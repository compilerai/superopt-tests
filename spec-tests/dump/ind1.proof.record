==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x164 (not $x163)))
 (let (($x267 (or $x163 $x164)))
 (let (($x268 (= $x267 false)))
 (let (($x269 (= $x268 true)))
 (let ((?x248 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x256 (concat ?x253 (concat ?x250 ?x248)))))
 (let (($x258 (= ?x257 input.dst.llvm-%l)))
 (let (($x259 (= $x258 true)))
 (let (($x260 (= $x259 true)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x211 (concat ?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x217 (concat ?x216 (concat ?x213 ?x211))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem ?x217))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv2 32))) ?x229))))
 (let (($x236 (= input.spec-%var-l-0.2.1.2.0 ?x235)))
 (let (($x237 (and $x236 true)))
 (let (($x27 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x238 (=> $x27 $x237)))
 (let (($x218 (= (_ bv0 32) ?x217)))
 (let ((?x219 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x223 (bvuge ?x219 (_ bv1 32))))
 (let (($x224 (= $x27 $x223)))
 (let (($x11 (= false false)))
 (let (($x43 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x43 $x11)))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (let (($x221 (= $x43 $x220)))
 (let (($x222 (and $x221 $x36)))
 (let (($x225 (and $x222 $x224)))
 (let (($x239 (and $x225 $x238)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x201)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x204)))
 (let (($x207 (= input.spec-%var-l-0.2.0 ?x206)))
 (let (($x240 (and $x207 $x239)))
 (let (($x194 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x241 (=> $x194 $x240)))
 (let ((?x189 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x189 (_ bv1 32))))
 (let (($x196 (= $x194 $x195)))
 (let (($x188 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x192 (=> $x188 $x11)))
 (let (($x190 (= ?x189 (_ bv0 32))))
 (let (($x191 (= $x188 $x190)))
 (let (($x193 (and $x191 $x192)))
 (let (($x197 (and $x193 $x196)))
 (let (($x242 (and $x197 $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x245 (= $x244 true)))
 (let (($x177 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x173 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x181 (or false (or false (and (and true (or $x172 $x173)) (or $x176 $x177))))))
 (let (($x183 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x181)))
 (let (($x167 (=> (and $x164 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x181)))
 (let (($x168 (= $x167 true)))
 (let (($x184 (= $x168 true)))
 (let (($x185 (= $x184 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x156 (concat ?x153 (concat ?x149 ?x147)))))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let ((?x131 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x131)))
 (let ((?x129 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x129)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x127)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x121 $x124)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x120 $x125)))
 (let (($x119 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x111)))
 (let (($x113 (not $x112)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x108)))
 (let (($x115 (and (not $x109) $x113)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x101 $x102)))
 (let (($x104 (not $x103)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x80 $x45)))
 (let (($x106 (and (not $x100) $x104)))
 (let (($x138 (and (and (and (and (and (and $x106 $x115) $x117) $x119) $x126) $x128) $x130)))
 (let (($x139 (and $x138 $x132)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x97 (or false (or false (and (and true (or $x88 $x90)) (or $x92 $x93))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x140 (and $x99 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x39 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x9 (= $x39 true)))
 (let (($x41 (= $x9 true)))
 (let (($x17 (= $x41 true)))
 (let (($x144 (and $x17 $x143)))
 (let (($x161 (and $x144 $x160)))
 (let (($x186 (and $x161 $x185)))
 (let (($x246 (and $x186 $x245)))
 (let (($x261 (and $x246 $x260)))
 (let (($x262 (and $x11 $x261)))
 (let (($x84 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x263 (and $x84 $x262)))
 (let (($x13 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (=> $x13 true)))
 (let (($x61 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x73 (= $x13 $x61)))
 (let (($x30 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x18 (=> $x30 $x11)))
 (let (($x40 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x74 (= $x30 $x40)))
 (let (($x38 (and $x74 $x18)))
 (let (($x82 (and $x38 $x73)))
 (let (($x77 (and $x82 $x42)))
 (let (($x48 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x56 (and $x48 $x77)))
 (let (($x54 (=> $x27 $x56)))
 (let (($x71 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x44 (= $x27 $x71)))
 (let (($x63 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x7 (= $x43 $x63)))
 (let (($x37 (and $x7 $x36)))
 (let (($x23 (and $x37 $x44)))
 (let (($x60 (and $x23 $x54)))
 (let (($x68 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x83 (and $x68 $x60)))
 (let (($x264 (and $x83 $x263)))
 (let (($x49 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x51 (and $x49 true)))
 (let (($x22 (=> $x13 $x51)))
 (let (($x79 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x13 $x79)))
 (let (($x15 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x30 $x15)))
 (let (($x10 (and $x86 $x18)))
 (let (($x24 (and $x10 $x72)))
 (let (($x75 (and $x24 $x22)))
 (let (($x65 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x52 (and $x65 $x75)))
 (let (($x76 (=> $x27 $x52)))
 (let (($x19 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x70 (= $x27 $x19)))
 (let (($x29 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x35 (= $x43 $x29)))
 (let (($x55 (and $x35 $x36)))
 (let (($x46 (and $x55 $x70)))
 (let (($x85 (and $x46 $x76)))
 (let (($x265 (and $x85 $x264)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x266 (and $x25 $x265)))
 (let (($x270 (=> $x266 $x269)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x163 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x164 (not $x163)))
 (let (($x267 (or $x163 $x164)))
 (let (($x268 (= $x267 false)))
 (let (($x269 (= $x268 true)))
 (let ((?x248 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x256 (concat ?x253 (concat ?x250 ?x248)))))
 (let (($x258 (= ?x257 input.dst.llvm-%l)))
 (let (($x259 (= $x258 true)))
 (let (($x260 (= $x259 true)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x211 (concat ?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x217 (concat ?x216 (concat ?x213 ?x211))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem ?x217))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x217 (_ bv2 32))) ?x229))))
 (let (($x236 (= input.spec-%var-l-0.2.1.2.0 ?x235)))
 (let (($x237 (and $x236 true)))
 (let (($x27 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x238 (=> $x27 $x237)))
 (let (($x218 (= (_ bv0 32) ?x217)))
 (let ((?x219 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x223 (bvuge ?x219 (_ bv1 32))))
 (let (($x224 (= $x27 $x223)))
 (let (($x11 (= false false)))
 (let (($x43 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x36 (=> $x43 $x11)))
 (let (($x220 (= ?x219 (_ bv0 32))))
 (let (($x221 (= $x43 $x220)))
 (let (($x222 (and $x221 $x36)))
 (let (($x225 (and $x222 $x224)))
 (let (($x239 (and $x225 $x238)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x201)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x204)))
 (let (($x207 (= input.spec-%var-l-0.2.0 ?x206)))
 (let (($x240 (and $x207 $x239)))
 (let (($x194 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x241 (=> $x194 $x240)))
 (let ((?x189 (ite $x163 (_ bv0 32) (_ bv1 32))))
 (let (($x195 (bvuge ?x189 (_ bv1 32))))
 (let (($x196 (= $x194 $x195)))
 (let (($x188 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x192 (=> $x188 $x11)))
 (let (($x190 (= ?x189 (_ bv0 32))))
 (let (($x191 (= $x188 $x190)))
 (let (($x193 (and $x191 $x192)))
 (let (($x197 (and $x193 $x196)))
 (let (($x242 (and $x197 $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let (($x245 (= $x244 true)))
 (let (($x177 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x173 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x181 (or false (or false (and (and true (or $x172 $x173)) (or $x176 $x177))))))
 (let (($x183 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x181)))
 (let (($x167 (=> (and $x164 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x181)))
 (let (($x168 (= $x167 true)))
 (let (($x184 (= $x168 true)))
 (let (($x185 (= $x184 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x156 (concat ?x153 (concat ?x149 ?x147)))))
 (let (($x158 (= ?x157 input.dst.llvm-%val)))
 (let (($x159 (= $x158 true)))
 (let (($x160 (= $x159 true)))
 (let ((?x131 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x131)))
 (let ((?x129 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x129)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x127)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x121 $x124)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x120 $x125)))
 (let (($x119 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x111)))
 (let (($x113 (not $x112)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x108)))
 (let (($x115 (and (not $x109) $x113)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x101 $x102)))
 (let (($x104 (not $x103)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x80 $x45)))
 (let (($x106 (and (not $x100) $x104)))
 (let (($x138 (and (and (and (and (and (and $x106 $x115) $x117) $x119) $x126) $x128) $x130)))
 (let (($x139 (and $x138 $x132)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x97 (or false (or false (and (and true (or $x88 $x90)) (or $x92 $x93))))))
 (let (($x99 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x140 (and $x99 $x139)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x39 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x9 (= $x39 true)))
 (let (($x41 (= $x9 true)))
 (let (($x17 (= $x41 true)))
 (let (($x144 (and $x17 $x143)))
 (let (($x161 (and $x144 $x160)))
 (let (($x186 (and $x161 $x185)))
 (let (($x246 (and $x186 $x245)))
 (let (($x261 (and $x246 $x260)))
 (let (($x262 (and $x11 $x261)))
 (let (($x84 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x263 (and $x84 $x262)))
 (let (($x13 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x42 (=> $x13 true)))
 (let (($x61 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x73 (= $x13 $x61)))
 (let (($x30 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x18 (=> $x30 $x11)))
 (let (($x40 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x74 (= $x30 $x40)))
 (let (($x38 (and $x74 $x18)))
 (let (($x82 (and $x38 $x73)))
 (let (($x77 (and $x82 $x42)))
 (let (($x48 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x56 (and $x48 $x77)))
 (let (($x54 (=> $x27 $x56)))
 (let (($x71 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x44 (= $x27 $x71)))
 (let (($x63 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x7 (= $x43 $x63)))
 (let (($x37 (and $x7 $x36)))
 (let (($x23 (and $x37 $x44)))
 (let (($x60 (and $x23 $x54)))
 (let (($x68 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x83 (and $x68 $x60)))
 (let (($x264 (and $x83 $x263)))
 (let (($x49 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x51 (and $x49 true)))
 (let (($x22 (=> $x13 $x51)))
 (let (($x79 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x72 (= $x13 $x79)))
 (let (($x15 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x86 (= $x30 $x15)))
 (let (($x10 (and $x86 $x18)))
 (let (($x24 (and $x10 $x72)))
 (let (($x75 (and $x24 $x22)))
 (let (($x65 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x52 (and $x65 $x75)))
 (let (($x76 (=> $x27 $x52)))
 (let (($x19 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x70 (= $x27 $x19)))
 (let (($x29 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x35 (= $x43 $x29)))
 (let (($x55 (and $x35 $x36)))
 (let (($x46 (and $x55 $x70)))
 (let (($x85 (and $x46 $x76)))
 (let (($x265 (and $x85 $x264)))
 (let (($x25 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x266 (and $x25 $x265)))
 (let (($x270 (=> $x266 $x269)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x83fb4f4c)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x83fb4c40)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x03)
                                #x036a9d04
                                #x00)
                         #x83fb4c41
                         #x9c)
                  #x036a9d05
                  #x00)))
  (store (store (store (store a!1 #x036a9d03 #x00) #x83fb4c42 #x6a)
                #x83fb4c40
                #xff)
         #x036a9d06
         #x00)))
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xfcfcfcfc)
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x03030303)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #xfcfcfcfc)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #xfcfcfcfc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x036a9cff)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x03030303)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32)
    #x03030303)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x03030303)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x83fb4c43)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x83fb4f4f)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x83fb4c40)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x83fb4f4c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3221225472 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3221225475 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3221225472 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x169 (not $x165)))
 (let (($x271 (or $x165 $x169)))
 (let (($x64 (= $x271 false)))
 (let (($x146 (= $x64 true)))
 (let ((?x249 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x260 (concat ?x257 (concat ?x248 ?x249)))))
 (let (($x262 (= ?x261 input.dst.llvm-%l)))
 (let (($x263 (= $x262 true)))
 (let (($x264 (= $x263 true)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x219 (concat ?x214 ?x208))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x226))))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.0 ?x238)))
 (let (($x240 (and $x239 false)))
 (let (($x11 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x241 (=> $x11 $x240)))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x222 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x222 (_ bv1 32))))
 (let (($x234 (= $x11 $x233)))
 (let (($x14 (= false false)))
 (let (($x25 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x55 (=> $x25 $x14)))
 (let (($x223 (= ?x222 (_ bv0 32))))
 (let (($x224 (= $x25 $x223)))
 (let (($x225 (and $x224 $x55)))
 (let (($x230 (and $x225 $x234)))
 (let (($x242 (and $x230 $x241)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x201)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x207)))
 (let (($x212 (= input.spec-%var-l-0.2.0 ?x216)))
 (let (($x243 (and $x212 $x242)))
 (let (($x197 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x244 (=> $x197 $x243)))
 (let ((?x192 (ite $x165 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x192 (_ bv1 32))))
 (let (($x202 (= $x197 $x205)))
 (let (($x191 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x195 (=> $x191 $x14)))
 (let (($x193 (= ?x192 (_ bv0 32))))
 (let (($x194 (= $x191 $x193)))
 (let (($x196 (and $x194 $x195)))
 (let (($x203 (and $x196 $x202)))
 (let (($x245 (and $x203 $x244)))
 (let (($x246 (= $x245 true)))
 (let (($x255 (= $x246 true)))
 (let (($x256 (= $x255 true)))
 (let (($x181 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x177 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x184 (or false (or false (and (and true (or $x176 $x177)) (or $x180 $x181))))))
 (let (($x186 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x171 (=> (and $x169 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x172 (= $x171 true)))
 (let (($x187 (= $x172 true)))
 (let (($x188 (= $x187 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x158 (concat ?x150 (concat ?x153 ?x151)))))
 (let (($x160 (= ?x159 input.dst.llvm-%val)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x128 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x128)))
 (let ((?x136 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x136)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x121)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x135 $x122)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x119 $x123)))
 (let (($x118 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x111)))
 (let (($x113 (not $x112)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x108 $x109)))
 (let (($x133 (and (not $x114) $x113)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x101 $x102)))
 (let (($x104 (not $x103)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x6 $x98)))
 (let (($x107 (and (not $x105) $x104)))
 (let (($x139 (and (and (and (and (and (and $x107 $x133) $x117) $x118) $x124) $x126) $x127)))
 (let (($x140 (and $x139 $x137)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x80 (or false (or false (and (and true (or $x58 $x57)) (or $x94 $x95))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x141 (and $x100 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x53 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x39 (= $x53 true)))
 (let (($x9 (= $x39 true)))
 (let (($x41 (= $x9 true)))
 (let (($x145 (and $x41 $x144)))
 (let (($x163 (and $x145 $x162)))
 (let (($x189 (and $x163 $x188)))
 (let (($x252 (and $x189 $x256)))
 (let (($x265 (and $x252 $x264)))
 (let (($x266 (and $x14 $x265)))
 (let (($x78 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x267 (and $x78 $x266)))
 (let (($x10 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x82 (=> $x10 false)))
 (let (($x38 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x61 (= $x10 $x38)))
 (let (($x69 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x86 (=> $x69 $x14)))
 (let (($x66 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x40 (= $x69 $x66)))
 (let (($x74 (and $x40 $x86)))
 (let (($x73 (and $x74 $x61)))
 (let (($x42 (and $x73 $x82)))
 (let (($x32 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x77 (and $x32 $x42)))
 (let (($x56 (=> $x11 $x77)))
 (let (($x37 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x71 (= $x11 $x37)))
 (let (($x81 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x63 (= $x25 $x81)))
 (let (($x7 (and $x63 $x55)))
 (let (($x44 (and $x7 $x71)))
 (let (($x54 (and $x44 $x56)))
 (let (($x5 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x60 (and $x5 $x54)))
 (let (($x268 (and $x60 $x267)))
 (let (($x50 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x49 (and $x50 false)))
 (let (($x51 (=> $x10 $x49)))
 (let (($x13 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x79 (= $x10 $x13)))
 (let (($x20 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x15 (= $x69 $x20)))
 (let (($x18 (and $x15 $x86)))
 (let (($x72 (and $x18 $x79)))
 (let (($x22 (and $x72 $x51)))
 (let (($x21 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x75 (and $x21 $x22)))
 (let (($x52 (=> $x11 $x75)))
 (let (($x27 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x19 (= $x11 $x27)))
 (let (($x43 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x35 (= $x25 $x43)))
 (let (($x36 (and $x35 $x55)))
 (let (($x70 (and $x36 $x19)))
 (let (($x76 (and $x70 $x52)))
 (let (($x269 (and $x76 $x268)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x270 (and $x8 $x269)))
 (let (($x247 (=> $x270 $x146)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x165 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x169 (not $x165)))
 (let (($x271 (or $x165 $x169)))
 (let (($x64 (= $x271 false)))
 (let (($x146 (= $x64 true)))
 (let ((?x249 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x260 (concat ?x257 (concat ?x248 ?x249)))))
 (let (($x262 (= ?x261 input.dst.llvm-%l)))
 (let (($x263 (= $x262 true)))
 (let (($x264 (= $x263 true)))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x208 (concat ?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x220 (concat ?x219 (concat ?x214 ?x208))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x226))))
 (let (($x239 (= input.spec-%var-l-0.2.1.2.0 ?x238)))
 (let (($x240 (and $x239 false)))
 (let (($x11 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x241 (=> $x11 $x240)))
 (let (($x221 (= (_ bv0 32) ?x220)))
 (let ((?x222 (ite $x221 (_ bv0 32) (_ bv1 32))))
 (let (($x233 (bvuge ?x222 (_ bv1 32))))
 (let (($x234 (= $x11 $x233)))
 (let (($x14 (= false false)))
 (let (($x25 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x55 (=> $x25 $x14)))
 (let (($x223 (= ?x222 (_ bv0 32))))
 (let (($x224 (= $x25 $x223)))
 (let (($x225 (and $x224 $x55)))
 (let (($x230 (and $x225 $x234)))
 (let (($x242 (and $x230 $x241)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x201)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x207)))
 (let (($x212 (= input.spec-%var-l-0.2.0 ?x216)))
 (let (($x243 (and $x212 $x242)))
 (let (($x197 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x244 (=> $x197 $x243)))
 (let ((?x192 (ite $x165 (_ bv0 32) (_ bv1 32))))
 (let (($x205 (bvuge ?x192 (_ bv1 32))))
 (let (($x202 (= $x197 $x205)))
 (let (($x191 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x195 (=> $x191 $x14)))
 (let (($x193 (= ?x192 (_ bv0 32))))
 (let (($x194 (= $x191 $x193)))
 (let (($x196 (and $x194 $x195)))
 (let (($x203 (and $x196 $x202)))
 (let (($x245 (and $x203 $x244)))
 (let (($x246 (= $x245 true)))
 (let (($x255 (= $x246 true)))
 (let (($x256 (= $x255 true)))
 (let (($x181 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x177 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x184 (or false (or false (and (and true (or $x176 $x177)) (or $x180 $x181))))))
 (let (($x186 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x184)))
 (let (($x171 (=> (and $x169 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x184)))
 (let (($x172 (= $x171 true)))
 (let (($x187 (= $x172 true)))
 (let (($x188 (= $x187 true)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x158 (concat ?x150 (concat ?x153 ?x151)))))
 (let (($x160 (= ?x159 input.dst.llvm-%val)))
 (let (($x161 (= $x160 true)))
 (let (($x162 (= $x161 true)))
 (let ((?x128 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x128)))
 (let ((?x136 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x136)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x121)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x135 $x122)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x119 $x123)))
 (let (($x118 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x112 (and $x110 $x111)))
 (let (($x113 (not $x112)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x108 $x109)))
 (let (($x133 (and (not $x114) $x113)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x101 $x102)))
 (let (($x104 (not $x103)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x6 $x98)))
 (let (($x107 (and (not $x105) $x104)))
 (let (($x139 (and (and (and (and (and (and $x107 $x133) $x117) $x118) $x124) $x126) $x127)))
 (let (($x140 (and $x139 $x137)))
 (let (($x95 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x80 (or false (or false (and (and true (or $x58 $x57)) (or $x94 $x95))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x141 (and $x100 $x140)))
 (let (($x142 (= $x141 true)))
 (let (($x143 (= $x142 true)))
 (let (($x144 (= $x143 true)))
 (let (($x53 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x39 (= $x53 true)))
 (let (($x9 (= $x39 true)))
 (let (($x41 (= $x9 true)))
 (let (($x145 (and $x41 $x144)))
 (let (($x163 (and $x145 $x162)))
 (let (($x189 (and $x163 $x188)))
 (let (($x252 (and $x189 $x256)))
 (let (($x265 (and $x252 $x264)))
 (let (($x266 (and $x14 $x265)))
 (let (($x78 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x267 (and $x78 $x266)))
 (let (($x10 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x82 (=> $x10 false)))
 (let (($x38 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x61 (= $x10 $x38)))
 (let (($x69 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x86 (=> $x69 $x14)))
 (let (($x66 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x40 (= $x69 $x66)))
 (let (($x74 (and $x40 $x86)))
 (let (($x73 (and $x74 $x61)))
 (let (($x42 (and $x73 $x82)))
 (let (($x32 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x77 (and $x32 $x42)))
 (let (($x56 (=> $x11 $x77)))
 (let (($x37 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x71 (= $x11 $x37)))
 (let (($x81 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x63 (= $x25 $x81)))
 (let (($x7 (and $x63 $x55)))
 (let (($x44 (and $x7 $x71)))
 (let (($x54 (and $x44 $x56)))
 (let (($x5 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x60 (and $x5 $x54)))
 (let (($x268 (and $x60 $x267)))
 (let (($x50 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x49 (and $x50 false)))
 (let (($x51 (=> $x10 $x49)))
 (let (($x13 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x79 (= $x10 $x13)))
 (let (($x20 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x15 (= $x69 $x20)))
 (let (($x18 (and $x15 $x86)))
 (let (($x72 (and $x18 $x79)))
 (let (($x22 (and $x72 $x51)))
 (let (($x21 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x75 (and $x21 $x22)))
 (let (($x52 (=> $x11 $x75)))
 (let (($x27 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x19 (= $x11 $x27)))
 (let (($x43 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x35 (= $x25 $x43)))
 (let (($x36 (and $x35 $x55)))
 (let (($x70 (and $x36 $x19)))
 (let (($x76 (and $x70 $x52)))
 (let (($x269 (and $x76 $x268)))
 (let (($x8 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x270 (and $x8 $x269)))
 (let (($x247 (=> $x270 $x146)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.spec-%var-l-0.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L1%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L1%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_val-0.L1%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffc26f74)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfdc22720)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #xfdc22721
                                #xff)
                         #xfdc22722
                         #x7f)
                  #xfdc22720
                  #xff)))
  (store a!1 #xfdc22723 #x5d)))
  (define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x5d7fffff)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfdc22723)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xffc26f77)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfdc22720)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xffc26f74)
  (define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2148532224 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2148532227 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2148532224 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x16 (not $x17)))
 (let (($x272 (or $x17 $x16)))
 (let (($x273 (not $x272)))
 (let (($x197 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x206 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x182 (or $x206 $x197)))
 (let (($x274 (or $x182 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x276 (= $x275 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x267 (concat ?x264 (concat ?x261 ?x251)))))
 (let (($x269 (= ?x268 input.dst.llvm-%l)))
 (let (($x270 (= $x269 true)))
 (let (($x271 (= $x270 true)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x220 (concat ?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x233 (concat ?x225 (concat ?x222 ?x220))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x238))))
 (let (($x245 (= input.spec-%var-l-0.2.1.2.0 ?x244)))
 (let (($x246 (and $x245 true)))
 (let (($x76 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x255 (=> $x76 $x246)))
 (let (($x234 (= (_ bv0 32) ?x233)))
 (let ((?x230 (ite $x234 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x230 (_ bv1 32))))
 (let (($x227 (= $x76 $x232)))
 (let (($x22 (= false false)))
 (let (($x26 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x75 (=> $x26 $x22)))
 (let (($x236 (= ?x230 (_ bv0 32))))
 (let (($x237 (= $x26 $x236)))
 (let (($x229 (and $x237 $x75)))
 (let (($x228 (and $x229 $x227)))
 (let (($x256 (and $x228 $x255)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x212)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x211)))
 (let (($x210 (= input.spec-%var-l-0.2.0 ?x209)))
 (let (($x252 (and $x210 $x256)))
 (let (($x259 (=> $x206 $x252)))
 (let ((?x205 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x205 (_ bv1 32))))
 (let (($x198 (= $x206 $x200)))
 (let (($x215 (=> $x197 $x22)))
 (let (($x202 (= ?x205 (_ bv0 32))))
 (let (($x203 (= $x197 $x202)))
 (let (($x204 (and $x203 $x215)))
 (let (($x199 (and $x204 $x198)))
 (let (($x260 (and $x199 $x259)))
 (let (($x254 (= $x260 true)))
 (let (($x257 (= $x254 true)))
 (let (($x250 (= $x257 true)))
 (let (($x191 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x194 (= $x193 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x184 (concat ?x183 (concat ?x178 ?x176)))))
 (let (($x171 (= ?x186 input.dst.llvm-%val)))
 (let (($x172 (= $x171 true)))
 (let (($x187 (= $x172 true)))
 (let ((?x151 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x151)))
 (let ((?x152 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x152)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x145 $x157)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x144 $x158)))
 (let (($x143 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x132 $x136)))
 (let (($x139 (not $x127)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x131 $x125)))
 (let (($x137 (and (not $x126) $x139)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x135 $x120)))
 (let (($x122 (not $x121)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x107 $x108)))
 (let (($x124 (and (not $x119) $x122)))
 (let (($x163 (and (and (and (and (and (and $x124 $x137) $x141) $x143) $x149) $x150) $x153)))
 (let (($x164 (and $x163 $x148)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x134 (or false (or false (and (and true (or $x110 $x111)) (or $x133 $x129))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x165 (and $x138 $x164)))
 (let (($x169 (= $x165 true)))
 (let (($x170 (= $x169 true)))
 (let (($x173 (= $x170 true)))
 (let (($x106 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x101 (= $x106 true)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x174 (and $x103 $x173)))
 (let (($x188 (and $x174 $x187)))
 (let (($x195 (and $x188 $x194)))
 (let (($x248 (and $x195 $x250)))
 (let (($x64 (and $x248 $x271)))
 (let (($x146 (and $x22 $x64)))
 (let (($x6 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x247 (and $x6 $x146)))
 (let (($x40 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x93 (=> $x40 true)))
 (let (($x92 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x91 (= $x40 $x92)))
 (let (($x71 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x48 (=> $x71 $x22)))
 (let (($x33 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x57 (= $x71 $x33)))
 (let (($x59 (and $x57 $x48)))
 (let (($x94 (and $x59 $x91)))
 (let (($x95 (and $x94 $x93)))
 (let (($x90 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x96 (and $x90 $x95)))
 (let (($x97 (=> $x76 $x96)))
 (let (($x47 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x87 (= $x76 $x47)))
 (let (($x39 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x9 (= $x26 $x39)))
 (let (($x41 (and $x9 $x75)))
 (let (($x45 (and $x41 $x87)))
 (let (($x99 (and $x45 $x97)))
 (let (($x89 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x80 (and $x89 $x99)))
 (let (($x166 (and $x80 $x247)))
 (let (($x42 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x77 (and $x42 true)))
 (let (($x56 (=> $x40 $x77)))
 (let (($x74 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x40 $x74)))
 (let (($x23 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x32 (= $x71 $x23)))
 (let (($x66 (and $x32 $x48)))
 (let (($x61 (and $x66 $x38)))
 (let (($x54 (and $x61 $x56)))
 (let (($x7 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x60 (and $x7 $x54)))
 (let (($x83 (=> $x76 $x60)))
 (let (($x85 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x76 $x85)))
 (let (($x49 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x51 (= $x26 $x49)))
 (let (($x52 (and $x51 $x75)))
 (let (($x68 (and $x52 $x5)))
 (let (($x78 (and $x68 $x83)))
 (let (($x28 (and $x78 $x166)))
 (let (($x72 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x156 (and $x72 $x28)))
 (let (($x30 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x70 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x18 (or false (or false (and (and true (or $x19 $x70)) (or $x69 $x30))))))
 (let (($x13 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x34 (=> (and $x16 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x253 (and $x34 $x156)))
 (let (($x277 (=> $x253 $x276)))
 (not $x277)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x16 (not $x17)))
 (let (($x272 (or $x17 $x16)))
 (let (($x273 (not $x272)))
 (let (($x197 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x206 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x182 (or $x206 $x197)))
 (let (($x274 (or $x182 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x276 (= $x275 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x267 (concat ?x264 (concat ?x261 ?x251)))))
 (let (($x269 (= ?x268 input.dst.llvm-%l)))
 (let (($x270 (= $x269 true)))
 (let (($x271 (= $x270 true)))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x220 (concat ?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x233 (concat ?x225 (concat ?x222 ?x220))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x244 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x238))))
 (let (($x245 (= input.spec-%var-l-0.2.1.2.0 ?x244)))
 (let (($x246 (and $x245 true)))
 (let (($x76 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x255 (=> $x76 $x246)))
 (let (($x234 (= (_ bv0 32) ?x233)))
 (let ((?x230 (ite $x234 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x230 (_ bv1 32))))
 (let (($x227 (= $x76 $x232)))
 (let (($x22 (= false false)))
 (let (($x26 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x75 (=> $x26 $x22)))
 (let (($x236 (= ?x230 (_ bv0 32))))
 (let (($x237 (= $x26 $x236)))
 (let (($x229 (and $x237 $x75)))
 (let (($x228 (and $x229 $x227)))
 (let (($x256 (and $x228 $x255)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x212)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x211)))
 (let (($x210 (= input.spec-%var-l-0.2.0 ?x209)))
 (let (($x252 (and $x210 $x256)))
 (let (($x259 (=> $x206 $x252)))
 (let ((?x205 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x205 (_ bv1 32))))
 (let (($x198 (= $x206 $x200)))
 (let (($x215 (=> $x197 $x22)))
 (let (($x202 (= ?x205 (_ bv0 32))))
 (let (($x203 (= $x197 $x202)))
 (let (($x204 (and $x203 $x215)))
 (let (($x199 (and $x204 $x198)))
 (let (($x260 (and $x199 $x259)))
 (let (($x254 (= $x260 true)))
 (let (($x257 (= $x254 true)))
 (let (($x250 (= $x257 true)))
 (let (($x191 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x192 (= $x191 true)))
 (let (($x193 (= $x192 true)))
 (let (($x194 (= $x193 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x184 (concat ?x183 (concat ?x178 ?x176)))))
 (let (($x171 (= ?x186 input.dst.llvm-%val)))
 (let (($x172 (= $x171 true)))
 (let (($x187 (= $x172 true)))
 (let ((?x151 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x151)))
 (let ((?x152 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x152)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x145 $x157)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x149 (and $x144 $x158)))
 (let (($x143 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x132 $x136)))
 (let (($x139 (not $x127)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x131 $x125)))
 (let (($x137 (and (not $x126) $x139)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x135 $x120)))
 (let (($x122 (not $x121)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x107 $x108)))
 (let (($x124 (and (not $x119) $x122)))
 (let (($x163 (and (and (and (and (and (and $x124 $x137) $x141) $x143) $x149) $x150) $x153)))
 (let (($x164 (and $x163 $x148)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x134 (or false (or false (and (and true (or $x110 $x111)) (or $x133 $x129))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x165 (and $x138 $x164)))
 (let (($x169 (= $x165 true)))
 (let (($x170 (= $x169 true)))
 (let (($x173 (= $x170 true)))
 (let (($x106 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x101 (= $x106 true)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let (($x174 (and $x103 $x173)))
 (let (($x188 (and $x174 $x187)))
 (let (($x195 (and $x188 $x194)))
 (let (($x248 (and $x195 $x250)))
 (let (($x64 (and $x248 $x271)))
 (let (($x146 (and $x22 $x64)))
 (let (($x6 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x247 (and $x6 $x146)))
 (let (($x40 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x93 (=> $x40 true)))
 (let (($x92 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x91 (= $x40 $x92)))
 (let (($x71 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x48 (=> $x71 $x22)))
 (let (($x33 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x57 (= $x71 $x33)))
 (let (($x59 (and $x57 $x48)))
 (let (($x94 (and $x59 $x91)))
 (let (($x95 (and $x94 $x93)))
 (let (($x90 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x96 (and $x90 $x95)))
 (let (($x97 (=> $x76 $x96)))
 (let (($x47 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x87 (= $x76 $x47)))
 (let (($x39 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x9 (= $x26 $x39)))
 (let (($x41 (and $x9 $x75)))
 (let (($x45 (and $x41 $x87)))
 (let (($x99 (and $x45 $x97)))
 (let (($x89 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x80 (and $x89 $x99)))
 (let (($x166 (and $x80 $x247)))
 (let (($x42 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x77 (and $x42 true)))
 (let (($x56 (=> $x40 $x77)))
 (let (($x74 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x38 (= $x40 $x74)))
 (let (($x23 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x32 (= $x71 $x23)))
 (let (($x66 (and $x32 $x48)))
 (let (($x61 (and $x66 $x38)))
 (let (($x54 (and $x61 $x56)))
 (let (($x7 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x60 (and $x7 $x54)))
 (let (($x83 (=> $x76 $x60)))
 (let (($x85 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x5 (= $x76 $x85)))
 (let (($x49 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x51 (= $x26 $x49)))
 (let (($x52 (and $x51 $x75)))
 (let (($x68 (and $x52 $x5)))
 (let (($x78 (and $x68 $x83)))
 (let (($x28 (and $x78 $x166)))
 (let (($x72 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x156 (and $x72 $x28)))
 (let (($x30 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x70 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x18 (or false (or false (and (and true (or $x19 $x70)) (or $x69 $x30))))))
 (let (($x13 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x34 (=> (and $x16 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x253 (and $x34 $x156)))
 (let (($x277 (=> $x253 $x276)))
 (not $x277)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x143)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x158 (= input.spec-%var-l-0.2.0 ?x157)))
 (let (($x289 (= $x158 true)))
 (let (($x290 (= $x289 true)))
 (let ((?x254 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x267 (concat ?x250 ?x254)))))
 (let (($x25 (= ?x261 input.dst.llvm-%l)))
 (let (($x279 (= $x25 true)))
 (let (($x280 (= $x279 true)))
 (let (($x272 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x28 (and true $x166)))
 (let (($x156 (and $x166 $x28)))
 (let (($x273 (and $x156 $x272)))
 (let (($x274 (= true $x273)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x63 (not $x43)))
 (let (($x275 (=> $x63 $x274)))
 (let (($x251 (= input.dst.llvm-%l ?x261)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x129 (concat ?x48 (concat ?x103 ?x93)))))
 (let (($x259 (= input.dst.llvm-%val ?x116)))
 (let ((?x231 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x231)))
 (let ((?x226 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x226)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x239)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x242 (and $x232 $x228)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x243 (and $x229 $x242)))
 (let (($x237 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x217 $x213)))
 (let (($x223 (not $x220)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x221 $x222)))
 (let (($x234 (and (not $x208) $x223)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x212 $x211)))
 (let (($x210 (not $x209)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x195 $x196)))
 (let (($x225 (and (not $x201) $x210)))
 (let (($x256 (and (and (and (and (and (and $x225 $x234) $x230) $x237) $x243) $x240) $x235)))
 (let (($x252 (and $x256 $x238)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x202 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x202)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x202)))
 (let (($x219 (or false (or false (and (and true (or $x203 $x215)) (or $x200 $x198))))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x268 (and (and (and $x216 $x252) $x259) $x251)))
 (let (($x193 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x269 (and $x193 $x268)))
 (let (($x119 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x270 (and $x119 $x269)))
 (let (($x276 (and $x270 $x275)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x148 (concat ?x151 (concat ?x152 ?x150))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x183))))
 (let (($x171 (= input.spec-%var-l-0.2.1.2.0 ?x186)))
 (let (($x172 (and $x171 true)))
 (let (($x38 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x187 (=> $x38 $x172)))
 (let (($x164 (= (_ bv0 32) ?x148)))
 (let ((?x165 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x165 (_ bv1 32))))
 (let (($x185 (= $x38 $x174)))
 (let (($x112 (= false false)))
 (let (($x94 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x86 (=> $x94 $x112)))
 (let (($x169 (= ?x165 (_ bv0 32))))
 (let (($x170 (= $x94 $x169)))
 (let (($x173 (and $x170 $x86)))
 (let (($x168 (and $x173 $x185)))
 (let (($x188 (and $x168 $x187)))
 (let (($x189 (and $x158 $x188)))
 (let (($x100 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x190 (=> $x100 $x189)))
 (let ((?x128 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x128 (_ bv1 32))))
 (let (($x154 (= $x100 $x137)))
 (let (($x126 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x127 (=> $x126 $x112)))
 (let (($x132 (= ?x128 (_ bv0 32))))
 (let (($x136 (= $x126 $x132)))
 (let (($x139 (and $x136 $x127)))
 (let (($x140 (and $x139 $x154)))
 (let (($x191 (and $x140 $x190)))
 (let (($x277 (and $x191 $x276)))
 (let (($x278 (= $x277 true)))
 (let (($x104 (= $x278 true)))
 (let (($x175 (= $x104 true)))
 (let (($x122 (= $x63 true)))
 (let (($x124 (= $x122 true)))
 (let (($x131 (= $x124 true)))
 (let (($x123 (= $x119 true)))
 (let (($x135 (= $x123 true)))
 (let (($x120 (= $x135 true)))
 (let (($x130 (= ?x116 input.dst.llvm-%val)))
 (let (($x134 (= $x130 true)))
 (let (($x138 (= $x134 true)))
 (let (($x121 (and $x138 $x120)))
 (let (($x125 (and $x121 $x131)))
 (let (($x249 (and $x125 $x175)))
 (let (($x281 (and $x249 $x280)))
 (let (($x282 (and $x100 $x281)))
 (let (($x283 (and $x112 $x282)))
 (let (($x57 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x284 (and $x57 $x283)))
 (let (($x30 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x114 (=> $x30 true)))
 (let (($x66 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x87 (= $x30 $x66)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x16 (=> $x76 $x112)))
 (let (($x91 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x20 (= $x76 $x91)))
 (let (($x82 (and $x20 $x16)))
 (let (($x97 (and $x82 $x87)))
 (let (($x77 (and $x97 $x114)))
 (let (($x26 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x52 (and $x26 $x77)))
 (let (($x85 (=> $x38 $x52)))
 (let (($x40 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x9 (= $x38 $x40)))
 (let (($x21 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x80 (= $x94 $x21)))
 (let (($x65 (and $x80 $x86)))
 (let (($x42 (and $x65 $x9)))
 (let (($x90 (and $x42 $x85)))
 (let (($x45 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x59 (and $x45 $x90)))
 (let (($x285 (and $x59 $x284)))
 (let (($x6 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x72 (and $x6 true)))
 (let (($x81 (=> $x30 $x72)))
 (let (($x31 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x84 (= $x30 $x31)))
 (let (($x56 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x76 $x56)))
 (let (($x110 (and $x79 $x16)))
 (let (($x24 (and $x110 $x84)))
 (let (($x54 (and $x24 $x81)))
 (let (($x98 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x22 (and $x98 $x54)))
 (let (($x71 (=> $x38 $x22)))
 (let (($x111 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x133 (= $x38 $x111)))
 (let (($x44 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x33 (= $x94 $x44)))
 (let (($x7 (and $x33 $x86)))
 (let (($x55 (and $x7 $x133)))
 (let (($x106 (and $x55 $x71)))
 (let (($x286 (and $x106 $x285)))
 (let (($x68 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x287 (and $x68 $x286)))
 (let (($x32 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x88 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x89 (or false (or false (and (and true (or $x62 $x88)) (or $x92 $x32))))))
 (let (($x29 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x89)))
 (let (($x14 (=> (and $x63 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x89)))
 (let (($x288 (and $x14 $x287)))
 (let (($x291 (=> $x288 $x290)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x143)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x158 (= input.spec-%var-l-0.2.0 ?x157)))
 (let (($x289 (= $x158 true)))
 (let (($x290 (= $x289 true)))
 (let ((?x254 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x250 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x261 (concat ?x258 (concat ?x267 (concat ?x250 ?x254)))))
 (let (($x25 (= ?x261 input.dst.llvm-%l)))
 (let (($x279 (= $x25 true)))
 (let (($x280 (= $x279 true)))
 (let (($x272 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x166 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x28 (and true $x166)))
 (let (($x156 (and $x166 $x28)))
 (let (($x273 (and $x156 $x272)))
 (let (($x274 (= true $x273)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x63 (not $x43)))
 (let (($x275 (=> $x63 $x274)))
 (let (($x251 (= input.dst.llvm-%l ?x261)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x116 (concat ?x129 (concat ?x48 (concat ?x103 ?x93)))))
 (let (($x259 (= input.dst.llvm-%val ?x116)))
 (let ((?x231 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x231)))
 (let ((?x226 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x226)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x240 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x239)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x242 (and $x232 $x228)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x243 (and $x229 $x242)))
 (let (($x237 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x217 $x213)))
 (let (($x223 (not $x220)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x221 $x222)))
 (let (($x234 (and (not $x208) $x223)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x212 $x211)))
 (let (($x210 (not $x209)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x195 $x196)))
 (let (($x225 (and (not $x201) $x210)))
 (let (($x256 (and (and (and (and (and (and $x225 $x234) $x230) $x237) $x243) $x240) $x235)))
 (let (($x252 (and $x256 $x238)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x202 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x202)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x202)))
 (let (($x219 (or false (or false (and (and true (or $x203 $x215)) (or $x200 $x198))))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x268 (and (and (and $x216 $x252) $x259) $x251)))
 (let (($x193 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x269 (and $x193 $x268)))
 (let (($x119 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x270 (and $x119 $x269)))
 (let (($x276 (and $x270 $x275)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x147 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x148 (concat ?x151 (concat ?x152 ?x150))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x183))))
 (let (($x171 (= input.spec-%var-l-0.2.1.2.0 ?x186)))
 (let (($x172 (and $x171 true)))
 (let (($x38 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x187 (=> $x38 $x172)))
 (let (($x164 (= (_ bv0 32) ?x148)))
 (let ((?x165 (ite $x164 (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x165 (_ bv1 32))))
 (let (($x185 (= $x38 $x174)))
 (let (($x112 (= false false)))
 (let (($x94 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x86 (=> $x94 $x112)))
 (let (($x169 (= ?x165 (_ bv0 32))))
 (let (($x170 (= $x94 $x169)))
 (let (($x173 (and $x170 $x86)))
 (let (($x168 (and $x173 $x185)))
 (let (($x188 (and $x168 $x187)))
 (let (($x189 (and $x158 $x188)))
 (let (($x100 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x190 (=> $x100 $x189)))
 (let ((?x128 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x137 (bvuge ?x128 (_ bv1 32))))
 (let (($x154 (= $x100 $x137)))
 (let (($x126 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x127 (=> $x126 $x112)))
 (let (($x132 (= ?x128 (_ bv0 32))))
 (let (($x136 (= $x126 $x132)))
 (let (($x139 (and $x136 $x127)))
 (let (($x140 (and $x139 $x154)))
 (let (($x191 (and $x140 $x190)))
 (let (($x277 (and $x191 $x276)))
 (let (($x278 (= $x277 true)))
 (let (($x104 (= $x278 true)))
 (let (($x175 (= $x104 true)))
 (let (($x122 (= $x63 true)))
 (let (($x124 (= $x122 true)))
 (let (($x131 (= $x124 true)))
 (let (($x123 (= $x119 true)))
 (let (($x135 (= $x123 true)))
 (let (($x120 (= $x135 true)))
 (let (($x130 (= ?x116 input.dst.llvm-%val)))
 (let (($x134 (= $x130 true)))
 (let (($x138 (= $x134 true)))
 (let (($x121 (and $x138 $x120)))
 (let (($x125 (and $x121 $x131)))
 (let (($x249 (and $x125 $x175)))
 (let (($x281 (and $x249 $x280)))
 (let (($x282 (and $x100 $x281)))
 (let (($x283 (and $x112 $x282)))
 (let (($x57 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x284 (and $x57 $x283)))
 (let (($x30 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x114 (=> $x30 true)))
 (let (($x66 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x87 (= $x30 $x66)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x16 (=> $x76 $x112)))
 (let (($x91 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x20 (= $x76 $x91)))
 (let (($x82 (and $x20 $x16)))
 (let (($x97 (and $x82 $x87)))
 (let (($x77 (and $x97 $x114)))
 (let (($x26 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x52 (and $x26 $x77)))
 (let (($x85 (=> $x38 $x52)))
 (let (($x40 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x9 (= $x38 $x40)))
 (let (($x21 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x80 (= $x94 $x21)))
 (let (($x65 (and $x80 $x86)))
 (let (($x42 (and $x65 $x9)))
 (let (($x90 (and $x42 $x85)))
 (let (($x45 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x59 (and $x45 $x90)))
 (let (($x285 (and $x59 $x284)))
 (let (($x6 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x72 (and $x6 true)))
 (let (($x81 (=> $x30 $x72)))
 (let (($x31 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x84 (= $x30 $x31)))
 (let (($x56 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x79 (= $x76 $x56)))
 (let (($x110 (and $x79 $x16)))
 (let (($x24 (and $x110 $x84)))
 (let (($x54 (and $x24 $x81)))
 (let (($x98 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x22 (and $x98 $x54)))
 (let (($x71 (=> $x38 $x22)))
 (let (($x111 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x133 (= $x38 $x111)))
 (let (($x44 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x33 (= $x94 $x44)))
 (let (($x7 (and $x33 $x86)))
 (let (($x55 (and $x7 $x133)))
 (let (($x106 (and $x55 $x71)))
 (let (($x286 (and $x106 $x285)))
 (let (($x68 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x287 (and $x68 $x286)))
 (let (($x32 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x88 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x89 (or false (or false (and (and true (or $x62 $x88)) (or $x92 $x32))))))
 (let (($x29 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x89)))
 (let (($x14 (=> (and $x63 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x89)))
 (let (($x288 (and $x14 $x287)))
 (let (($x291 (=> $x288 $x290)))
 (not $x291)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x73 (= $x194 true)))
 (let (($x260 (= $x73 true)))
 (let ((?x258 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x251 (concat ?x261 (concat ?x254 (concat ?x267 ?x258)))))
 (let (($x282 (= ?x251 input.dst.llvm-%val)))
 (let (($x283 (= $x282 true)))
 (let (($x284 (= $x283 true)))
 (let (($x276 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x182 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x272 (and true $x182)))
 (let (($x273 (and $x182 $x272)))
 (let (($x277 (and $x273 $x276)))
 (let (($x278 (= true $x277)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x63 (not $x17)))
 (let (($x104 (=> $x63 $x278)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x124 (concat ?x120 (concat ?x108 ?x138)))))
 (let (($x269 (= input.dst.llvm-%l ?x131)))
 (let (($x268 (= input.dst.llvm-%val ?x251)))
 (let ((?x226 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x226)))
 (let ((?x240 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x240)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x242 (and $x232 $x228)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x243 (and $x229 $x242)))
 (let (($x245 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x220 $x223)))
 (let (($x241 (not $x234)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x233 $x217)))
 (let (($x244 (and (not $x213) $x241)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x209 $x210)))
 (let (($x221 (not $x225)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x202 $x203)))
 (let (($x208 (and (not $x211) $x221)))
 (let (($x259 (and (and (and (and (and (and $x208 $x244) $x237) $x245) $x243) $x239) $x255)))
 (let (($x265 (and $x259 $x235)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x206)))
 (let (($x201 (or false (or false (and (and true (or $x200 $x198)) (or $x218 $x219))))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x201)))
 (let (($x271 (and (and (and $x212 $x265) $x268) $x269)))
 (let (($x205 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x146 (and $x205 $x271)))
 (let (($x103 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x247 (and $x103 $x146)))
 (let (($x175 (and $x247 $x104)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x161 (concat ?x152 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x164 (concat ?x148 (concat ?x149 ?x161))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x180))))
 (let (($x172 (= input.spec-%var-l-0.2.1.2.0 ?x171)))
 (let (($x187 (and $x172 true)))
 (let (($x111 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x188 (=> $x111 $x187)))
 (let (($x165 (= (_ bv0 32) ?x164)))
 (let ((?x169 (ite $x165 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x169 (_ bv1 32))))
 (let (($x168 (= $x111 $x185)))
 (let (($x86 (= false false)))
 (let (($x60 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x7 (=> $x60 $x86)))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x173 (= $x60 $x170)))
 (let (($x174 (and $x173 $x7)))
 (let (($x179 (and $x174 $x168)))
 (let (($x189 (and $x179 $x188)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x163 (= input.spec-%var-l-0.2.0 ?x158)))
 (let (($x190 (and $x163 $x189)))
 (let (($x37 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x191 (=> $x37 $x190)))
 (let ((?x136 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x136 (_ bv1 32))))
 (let (($x140 (= $x37 $x154)))
 (let (($x132 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x100 (=> $x132 $x86)))
 (let (($x127 (= ?x136 (_ bv0 32))))
 (let (($x139 (= $x132 $x127)))
 (let (($x137 (and $x139 $x100)))
 (let (($x155 (and $x137 $x140)))
 (let (($x192 (and $x155 $x191)))
 (let (($x249 (and $x192 $x175)))
 (let (($x25 (= $x249 true)))
 (let (($x279 (= $x25 true)))
 (let (($x280 (= $x279 true)))
 (let (($x125 (= ?x131 input.dst.llvm-%l)))
 (let (($x13 (= $x125 true)))
 (let (($x126 (= $x13 true)))
 (let (($x93 (= $x103 true)))
 (let (($x109 (= $x93 true)))
 (let (($x75 (= $x109 true)))
 (let (($x129 (= $x17 true)))
 (let (($x34 (= $x129 true)))
 (let (($x41 (= $x34 true)))
 (let (($x116 (and $x41 $x75)))
 (let (($x128 (and $x116 $x126)))
 (let (($x281 (and $x128 $x280)))
 (let (($x285 (and $x281 $x284)))
 (let (($x286 (and $x37 $x285)))
 (let (($x287 (and $x86 $x286)))
 (let (($x78 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x288 (and $x78 $x287)))
 (let (($x31 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x77 (=> $x31 true)))
 (let (($x87 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x97 (= $x31 $x87)))
 (let (($x69 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x110 (=> $x69 $x86)))
 (let (($x20 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x69 $x20)))
 (let (($x66 (and $x82 $x110)))
 (let (($x114 (and $x66 $x97)))
 (let (($x52 (and $x114 $x77)))
 (let (($x101 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x85 (and $x101 $x52)))
 (let (($x90 (=> $x111 $x85)))
 (let (($x9 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x42 (= $x111 $x9)))
 (let (($x80 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x65 (= $x60 $x80)))
 (let (($x40 (and $x65 $x7)))
 (let (($x118 (and $x40 $x42)))
 (let (($x59 (and $x118 $x90)))
 (let (($x95 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x50 (and $x95 $x59)))
 (let (($x289 (and $x50 $x288)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x81 (and $x72 true)))
 (let (($x54 (=> $x31 $x81)))
 (let (($x84 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x24 (= $x31 $x84)))
 (let (($x79 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x69 $x79)))
 (let (($x30 (and $x16 $x110)))
 (let (($x53 (and $x30 $x24)))
 (let (($x22 (and $x53 $x54)))
 (let (($x113 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x71 (and $x113 $x22)))
 (let (($x106 (=> $x111 $x71)))
 (let (($x133 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x55 (= $x111 $x133)))
 (let (($x33 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x112 (= $x60 $x33)))
 (let (($x38 (and $x112 $x7)))
 (let (($x74 (and $x38 $x55)))
 (let (($x67 (and $x74 $x106)))
 (let (($x290 (and $x67 $x289)))
 (let (($x105 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x291 (and $x105 $x290)))
 (let (($x96 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x61 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x14 (or false (or false (and (and true (or $x39 $x61)) (or $x19 $x96))))))
 (let (($x99 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x11 (=> (and $x63 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x292 (and $x11 $x291)))
 (let (($x18 (=> $x292 $x260)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x73 (= $x194 true)))
 (let (($x260 (= $x73 true)))
 (let ((?x258 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x251 (concat ?x261 (concat ?x254 (concat ?x267 ?x258)))))
 (let (($x282 (= ?x251 input.dst.llvm-%val)))
 (let (($x283 (= $x282 true)))
 (let (($x284 (= $x283 true)))
 (let (($x276 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x182 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x272 (and true $x182)))
 (let (($x273 (and $x182 $x272)))
 (let (($x277 (and $x273 $x276)))
 (let (($x278 (= true $x277)))
 (let (($x17 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x63 (not $x17)))
 (let (($x104 (=> $x63 $x278)))
 (let ((?x138 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x124 (concat ?x120 (concat ?x108 ?x138)))))
 (let (($x269 (= input.dst.llvm-%l ?x131)))
 (let (($x268 (= input.dst.llvm-%val ?x251)))
 (let ((?x226 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x226)))
 (let ((?x240 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x240)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x242 (and $x232 $x228)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x243 (and $x229 $x242)))
 (let (($x245 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x220 $x223)))
 (let (($x241 (not $x234)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x233 $x217)))
 (let (($x244 (and (not $x213) $x241)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x209 $x210)))
 (let (($x221 (not $x225)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x211 (and $x202 $x203)))
 (let (($x208 (and (not $x211) $x221)))
 (let (($x259 (and (and (and (and (and (and $x208 $x244) $x237) $x245) $x243) $x239) $x255)))
 (let (($x265 (and $x259 $x235)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x206)))
 (let (($x201 (or false (or false (and (and true (or $x200 $x198)) (or $x218 $x219))))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x201)))
 (let (($x271 (and (and (and $x212 $x265) $x268) $x269)))
 (let (($x205 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x146 (and $x205 $x271)))
 (let (($x103 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x247 (and $x103 $x146)))
 (let (($x175 (and $x247 $x104)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x161 (concat ?x152 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x164 (concat ?x148 (concat ?x149 ?x161))))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x180))))
 (let (($x172 (= input.spec-%var-l-0.2.1.2.0 ?x171)))
 (let (($x187 (and $x172 true)))
 (let (($x111 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x188 (=> $x111 $x187)))
 (let (($x165 (= (_ bv0 32) ?x164)))
 (let ((?x169 (ite $x165 (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x169 (_ bv1 32))))
 (let (($x168 (= $x111 $x185)))
 (let (($x86 (= false false)))
 (let (($x60 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x7 (=> $x60 $x86)))
 (let (($x170 (= ?x169 (_ bv0 32))))
 (let (($x173 (= $x60 $x170)))
 (let (($x174 (and $x173 $x7)))
 (let (($x179 (and $x174 $x168)))
 (let (($x189 (and $x179 $x188)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x145)))
 (let (($x163 (= input.spec-%var-l-0.2.0 ?x158)))
 (let (($x190 (and $x163 $x189)))
 (let (($x37 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x191 (=> $x37 $x190)))
 (let ((?x136 (ite $x17 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x136 (_ bv1 32))))
 (let (($x140 (= $x37 $x154)))
 (let (($x132 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x100 (=> $x132 $x86)))
 (let (($x127 (= ?x136 (_ bv0 32))))
 (let (($x139 (= $x132 $x127)))
 (let (($x137 (and $x139 $x100)))
 (let (($x155 (and $x137 $x140)))
 (let (($x192 (and $x155 $x191)))
 (let (($x249 (and $x192 $x175)))
 (let (($x25 (= $x249 true)))
 (let (($x279 (= $x25 true)))
 (let (($x280 (= $x279 true)))
 (let (($x125 (= ?x131 input.dst.llvm-%l)))
 (let (($x13 (= $x125 true)))
 (let (($x126 (= $x13 true)))
 (let (($x93 (= $x103 true)))
 (let (($x109 (= $x93 true)))
 (let (($x75 (= $x109 true)))
 (let (($x129 (= $x17 true)))
 (let (($x34 (= $x129 true)))
 (let (($x41 (= $x34 true)))
 (let (($x116 (and $x41 $x75)))
 (let (($x128 (and $x116 $x126)))
 (let (($x281 (and $x128 $x280)))
 (let (($x285 (and $x281 $x284)))
 (let (($x286 (and $x37 $x285)))
 (let (($x287 (and $x86 $x286)))
 (let (($x78 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x288 (and $x78 $x287)))
 (let (($x31 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x77 (=> $x31 true)))
 (let (($x87 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x97 (= $x31 $x87)))
 (let (($x69 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x110 (=> $x69 $x86)))
 (let (($x20 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x82 (= $x69 $x20)))
 (let (($x66 (and $x82 $x110)))
 (let (($x114 (and $x66 $x97)))
 (let (($x52 (and $x114 $x77)))
 (let (($x101 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x85 (and $x101 $x52)))
 (let (($x90 (=> $x111 $x85)))
 (let (($x9 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x42 (= $x111 $x9)))
 (let (($x80 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x65 (= $x60 $x80)))
 (let (($x40 (and $x65 $x7)))
 (let (($x118 (and $x40 $x42)))
 (let (($x59 (and $x118 $x90)))
 (let (($x95 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x50 (and $x95 $x59)))
 (let (($x289 (and $x50 $x288)))
 (let (($x72 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x81 (and $x72 true)))
 (let (($x54 (=> $x31 $x81)))
 (let (($x84 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x24 (= $x31 $x84)))
 (let (($x79 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (= $x69 $x79)))
 (let (($x30 (and $x16 $x110)))
 (let (($x53 (and $x30 $x24)))
 (let (($x22 (and $x53 $x54)))
 (let (($x113 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x71 (and $x113 $x22)))
 (let (($x106 (=> $x111 $x71)))
 (let (($x133 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x55 (= $x111 $x133)))
 (let (($x33 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x112 (= $x60 $x33)))
 (let (($x38 (and $x112 $x7)))
 (let (($x74 (and $x38 $x55)))
 (let (($x67 (and $x74 $x106)))
 (let (($x290 (and $x67 $x289)))
 (let (($x105 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x291 (and $x105 $x290)))
 (let (($x96 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x61 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x14 (or false (or false (and (and true (or $x39 $x61)) (or $x19 $x96))))))
 (let (($x99 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x14)))
 (let (($x11 (=> (and $x63 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x14)))
 (let (($x292 (and $x11 $x291)))
 (let (($x18 (=> $x292 $x260)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x163)))
 (let (($x35 (= input.spec-%var-val-0 ?x148)))
 (let (($x207 (= $x35 true)))
 (let (($x264 (= $x207 true)))
 (let ((?x267 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x271 (concat ?x268 (concat ?x257 ?x267)))))
 (let (($x287 (= ?x146 input.dst.llvm-%l)))
 (let (($x288 (= $x287 true)))
 (let (($x289 (= $x288 true)))
 (let (($x249 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x276 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x277 (and true $x276)))
 (let (($x278 (and $x276 $x277)))
 (let (($x25 (and $x278 $x249)))
 (let (($x279 (= true $x25)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x8 (not $x43)))
 (let (($x280 (=> $x8 $x279)))
 (let (($x247 (= input.dst.llvm-%l ?x146)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x135 (concat ?x122 (concat ?x75 ?x93)))))
 (let (($x254 (= input.dst.llvm-%val ?x120)))
 (let ((?x255 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x255)))
 (let ((?x262 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x262)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x228)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x243 (and $x227 $x242)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x252 (and $x232 $x243)))
 (let (($x229 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x241 $x244)))
 (let (($x236 (not $x256)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x220 $x223)))
 (let (($x231 (and (not $x234) $x236)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x221 $x208)))
 (let (($x217 (not $x233)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x200 $x198)))
 (let (($x230 (and (not $x225) $x217)))
 (let (($x261 (and (and (and (and (and (and $x230 $x231) $x245) $x229) $x252) $x239) $x240)))
 (let (($x250 (and $x261 $x259)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x222 (or false (or false (and (and true (or $x219 $x216)) (or $x201 $x212))))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x222)))
 (let (($x156 (and (and (and $x210 $x250) $x254) $x247)))
 (let (($x224 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x253 (and $x224 $x156)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x182 (and $x125 $x253)))
 (let (($x281 (and $x182 $x280)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x151 (concat ?x152 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x169 (concat ?x150 ?x151))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x167))))
 (let (($x189 (= input.spec-%var-l-0.2.1.2.0 ?x188)))
 (let (($x190 (and $x189 true)))
 (let (($x133 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x191 (=> $x133 $x190)))
 (let (($x173 (= (_ bv0 32) ?x170)))
 (let ((?x174 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x174 (_ bv1 32))))
 (let (($x186 (= $x133 $x176)))
 (let (($x7 (= false false)))
 (let (($x44 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x38 (=> $x44 $x7)))
 (let (($x185 (= ?x174 (_ bv0 32))))
 (let (($x168 (= $x44 $x185)))
 (let (($x179 (and $x168 $x38)))
 (let (($x181 (and $x179 $x186)))
 (let (($x192 (and $x181 $x191)))
 (let (($x147 (= input.spec-%var-l-0.2.0 ?x148)))
 (let (($x197 (and $x147 $x192)))
 (let (($x155 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x155 $x197)))
 (let ((?x100 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x100 (_ bv1 32))))
 (let (($x141 (= $x155 $x157)))
 (let (($x41 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x154 (=> $x41 $x7)))
 (let (($x137 (= ?x100 (_ bv0 32))))
 (let (($x37 (= $x41 $x137)))
 (let (($x140 (and $x37 $x154)))
 (let (($x143 (and $x140 $x141)))
 (let (($x215 (and $x143 $x205)))
 (let (($x282 (and $x215 $x281)))
 (let (($x283 (= $x282 true)))
 (let (($x284 (= $x283 true)))
 (let (($x285 (= $x284 true)))
 (let (($x132 (= $x8 true)))
 (let (($x136 (= $x132 true)))
 (let (($x127 (= $x136 true)))
 (let (($x13 (= $x125 true)))
 (let (($x126 (= $x13 true)))
 (let (($x128 (= $x126 true)))
 (let (($x108 (= ?x120 input.dst.llvm-%val)))
 (let (($x138 (= $x108 true)))
 (let (($x119 (= $x138 true)))
 (let (($x58 (and $x119 $x128)))
 (let (($x139 (and $x58 $x127)))
 (let (($x286 (and $x139 $x285)))
 (let (($x290 (and $x286 $x289)))
 (let (($x291 (and $x41 $x290)))
 (let (($x292 (and $x7 $x291)))
 (let (($x129 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x194 (and $x129 $x292)))
 (let (($x84 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x52 (=> $x84 true)))
 (let (($x97 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x114 (= $x84 $x97)))
 (let (($x56 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x30 (=> $x56 $x7)))
 (let (($x82 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x66 (= $x56 $x82)))
 (let (($x87 (and $x66 $x30)))
 (let (($x77 (and $x87 $x114)))
 (let (($x85 (and $x77 $x52)))
 (let (($x91 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x90 (and $x91 $x85)))
 (let (($x59 (=> $x133 $x90)))
 (let (($x42 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x118 (= $x133 $x42)))
 (let (($x65 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x40 (= $x44 $x65)))
 (let (($x9 (and $x40 $x38)))
 (let (($x26 (and $x9 $x118)))
 (let (($x50 (and $x26 $x59)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x57 (and $x21 $x50)))
 (let (($x73 (and $x57 $x194)))
 (let (($x81 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x54 (and $x81 true)))
 (let (($x22 (=> $x84 $x54)))
 (let (($x24 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x53 (= $x84 $x24)))
 (let (($x16 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x110 (= $x56 $x16)))
 (let (($x31 (and $x110 $x30)))
 (let (($x23 (and $x31 $x53)))
 (let (($x71 (and $x23 $x22)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x106 (and $x76 $x71)))
 (let (($x67 (=> $x133 $x106)))
 (let (($x55 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x74 (= $x133 $x55)))
 (let (($x112 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x86 (= $x44 $x112)))
 (let (($x111 (and $x86 $x38)))
 (let (($x15 (and $x111 $x74)))
 (let (($x45 (and $x15 $x67)))
 (let (($x260 (and $x45 $x73)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x18 (and $x94 $x260)))
 (let (($x89 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x92 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x11 (or false (or false (and (and true (or $x83 $x92)) (or $x49 $x89))))))
 (let (($x68 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x5 (=> (and $x8 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x293 (and $x5 $x18)))
 (let (($x130 (=> $x293 $x264)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x142)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x163)))
 (let (($x35 (= input.spec-%var-val-0 ?x148)))
 (let (($x207 (= $x35 true)))
 (let (($x264 (= $x207 true)))
 (let ((?x267 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x271 (concat ?x268 (concat ?x257 ?x267)))))
 (let (($x287 (= ?x146 input.dst.llvm-%l)))
 (let (($x288 (= $x287 true)))
 (let (($x289 (= $x288 true)))
 (let (($x249 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x276 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x277 (and true $x276)))
 (let (($x278 (and $x276 $x277)))
 (let (($x25 (and $x278 $x249)))
 (let (($x279 (= true $x25)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x8 (not $x43)))
 (let (($x280 (=> $x8 $x279)))
 (let (($x247 (= input.dst.llvm-%l ?x146)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x135 (concat ?x122 (concat ?x75 ?x93)))))
 (let (($x254 (= input.dst.llvm-%val ?x120)))
 (let ((?x255 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x255)))
 (let ((?x262 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x262)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x228)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x243 (and $x227 $x242)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x252 (and $x232 $x243)))
 (let (($x229 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x241 $x244)))
 (let (($x236 (not $x256)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x220 $x223)))
 (let (($x231 (and (not $x234) $x236)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x221 $x208)))
 (let (($x217 (not $x233)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x200 $x198)))
 (let (($x230 (and (not $x225) $x217)))
 (let (($x261 (and (and (and (and (and (and $x230 $x231) $x245) $x229) $x252) $x239) $x240)))
 (let (($x250 (and $x261 $x259)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x216 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x222 (or false (or false (and (and true (or $x219 $x216)) (or $x201 $x212))))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x222)))
 (let (($x156 (and (and (and $x210 $x250) $x254) $x247)))
 (let (($x224 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x253 (and $x224 $x156)))
 (let (($x125 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x182 (and $x125 $x253)))
 (let (($x281 (and $x182 $x280)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x151 (concat ?x152 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x169 (concat ?x150 ?x151))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x167))))
 (let (($x189 (= input.spec-%var-l-0.2.1.2.0 ?x188)))
 (let (($x190 (and $x189 true)))
 (let (($x133 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x191 (=> $x133 $x190)))
 (let (($x173 (= (_ bv0 32) ?x170)))
 (let ((?x174 (ite $x173 (_ bv0 32) (_ bv1 32))))
 (let (($x176 (bvuge ?x174 (_ bv1 32))))
 (let (($x186 (= $x133 $x176)))
 (let (($x7 (= false false)))
 (let (($x44 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x38 (=> $x44 $x7)))
 (let (($x185 (= ?x174 (_ bv0 32))))
 (let (($x168 (= $x44 $x185)))
 (let (($x179 (and $x168 $x38)))
 (let (($x181 (and $x179 $x186)))
 (let (($x192 (and $x181 $x191)))
 (let (($x147 (= input.spec-%var-l-0.2.0 ?x148)))
 (let (($x197 (and $x147 $x192)))
 (let (($x155 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x205 (=> $x155 $x197)))
 (let ((?x100 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x157 (bvuge ?x100 (_ bv1 32))))
 (let (($x141 (= $x155 $x157)))
 (let (($x41 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x154 (=> $x41 $x7)))
 (let (($x137 (= ?x100 (_ bv0 32))))
 (let (($x37 (= $x41 $x137)))
 (let (($x140 (and $x37 $x154)))
 (let (($x143 (and $x140 $x141)))
 (let (($x215 (and $x143 $x205)))
 (let (($x282 (and $x215 $x281)))
 (let (($x283 (= $x282 true)))
 (let (($x284 (= $x283 true)))
 (let (($x285 (= $x284 true)))
 (let (($x132 (= $x8 true)))
 (let (($x136 (= $x132 true)))
 (let (($x127 (= $x136 true)))
 (let (($x13 (= $x125 true)))
 (let (($x126 (= $x13 true)))
 (let (($x128 (= $x126 true)))
 (let (($x108 (= ?x120 input.dst.llvm-%val)))
 (let (($x138 (= $x108 true)))
 (let (($x119 (= $x138 true)))
 (let (($x58 (and $x119 $x128)))
 (let (($x139 (and $x58 $x127)))
 (let (($x286 (and $x139 $x285)))
 (let (($x290 (and $x286 $x289)))
 (let (($x291 (and $x41 $x290)))
 (let (($x292 (and $x7 $x291)))
 (let (($x129 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x194 (and $x129 $x292)))
 (let (($x84 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x52 (=> $x84 true)))
 (let (($x97 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x114 (= $x84 $x97)))
 (let (($x56 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x30 (=> $x56 $x7)))
 (let (($x82 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x66 (= $x56 $x82)))
 (let (($x87 (and $x66 $x30)))
 (let (($x77 (and $x87 $x114)))
 (let (($x85 (and $x77 $x52)))
 (let (($x91 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x90 (and $x91 $x85)))
 (let (($x59 (=> $x133 $x90)))
 (let (($x42 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x118 (= $x133 $x42)))
 (let (($x65 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x40 (= $x44 $x65)))
 (let (($x9 (and $x40 $x38)))
 (let (($x26 (and $x9 $x118)))
 (let (($x50 (and $x26 $x59)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x57 (and $x21 $x50)))
 (let (($x73 (and $x57 $x194)))
 (let (($x81 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x54 (and $x81 true)))
 (let (($x22 (=> $x84 $x54)))
 (let (($x24 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x53 (= $x84 $x24)))
 (let (($x16 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x110 (= $x56 $x16)))
 (let (($x31 (and $x110 $x30)))
 (let (($x23 (and $x31 $x53)))
 (let (($x71 (and $x23 $x22)))
 (let (($x76 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x106 (and $x76 $x71)))
 (let (($x67 (=> $x133 $x106)))
 (let (($x55 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x74 (= $x133 $x55)))
 (let (($x112 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x86 (= $x44 $x112)))
 (let (($x111 (and $x86 $x38)))
 (let (($x15 (and $x111 $x74)))
 (let (($x45 (and $x15 $x67)))
 (let (($x260 (and $x45 $x73)))
 (let (($x94 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x18 (and $x94 $x260)))
 (let (($x89 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x92 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x11 (or false (or false (and (and true (or $x83 $x92)) (or $x49 $x89))))))
 (let (($x68 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x5 (=> (and $x8 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x293 (and $x5 $x18)))
 (let (($x130 (=> $x293 $x264)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x209 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x63 (= $x209 true)))
 (let (($x206 (= $x63 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x247 (concat ?x248 (concat ?x258 ?x251)))))
 (let (($x292 (= ?x156 input.dst.llvm-%val)))
 (let (($x194 (= $x292 true)))
 (let (($x73 (= $x194 true)))
 (let (($x282 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x249 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x25 (and true $x249)))
 (let (($x279 (and $x249 $x25)))
 (let (($x283 (and $x279 $x282)))
 (let (($x284 (= true $x283)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x8 (not $x43)))
 (let (($x285 (=> $x8 $x284)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x127 (concat ?x58 (concat ?x125 ?x121)))))
 (let (($x182 (= input.dst.llvm-%l ?x139)))
 (let (($x253 (= input.dst.llvm-%val ?x156)))
 (let ((?x240 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x240)))
 (let ((?x263 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x263)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x242)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x228 $x243)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x227 $x252)))
 (let (($x232 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (and $x236 $x231)))
 (let (($x245 (not $x226)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x241 $x244)))
 (let (($x238 (and (not $x256) $x245)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x217 $x230)))
 (let (($x223 (not $x220)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x219 $x216)))
 (let (($x237 (and (not $x233) $x223)))
 (let (($x166 (and (and (and (and (and (and $x237 $x238) $x265) $x232) $x270) $x239) $x262)))
 (let (($x269 (and $x166 $x261)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x213 (or false (or false (and (and true (or $x212 $x202)) (or $x222 $x210))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x274 (and (and (and $x208 $x269) $x253) $x182)))
 (let (($x275 (and $x209 $x274)))
 (let (($x93 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x276 (and $x93 $x275)))
 (let (($x286 (and $x276 $x285)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x152 (concat ?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x174 (concat ?x173 (concat ?x151 ?x152))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x178))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.0 ?x190)))
 (let (($x192 (and $x191 true)))
 (let (($x74 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x197 (=> $x74 $x192)))
 (let (($x185 (= (_ bv0 32) ?x174)))
 (let ((?x168 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x168 (_ bv1 32))))
 (let (($x172 (= $x74 $x181)))
 (let (($x111 (= false false)))
 (let (($x112 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x112 $x111)))
 (let (($x179 (= ?x168 (_ bv0 32))))
 (let (($x176 (= $x112 $x179)))
 (let (($x186 (and $x176 $x133)))
 (let (($x187 (and $x186 $x172)))
 (let (($x205 (and $x187 $x197)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x144)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x148)))
 (let (($x169 (= input.spec-%var-l-0.2.0 ?x165)))
 (let (($x215 (and $x169 $x205)))
 (let (($x141 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x204 (=> $x141 $x215)))
 (let ((?x37 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x37 (_ bv1 32))))
 (let (($x153 (= $x141 $x143)))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x155 (=> $x135 $x111)))
 (let (($x154 (= ?x37 (_ bv0 32))))
 (let (($x140 (= $x135 $x154)))
 (let (($x157 (and $x140 $x155)))
 (let (($x145 (and $x157 $x153)))
 (let (($x224 (and $x145 $x204)))
 (let (($x287 (and $x224 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x289 (= $x288 true)))
 (let (($x290 (= $x289 true)))
 (let (($x34 (= ?x139 input.dst.llvm-%l)))
 (let (($x41 (= $x34 true)))
 (let (($x100 (= $x41 true)))
 (let (($x116 (= $x93 true)))
 (let (($x124 (= $x116 true)))
 (let (($x120 (= $x124 true)))
 (let (($x117 (= $x43 true)))
 (let (($x134 (= $x117 true)))
 (let (($x122 (= $x134 true)))
 (let (($x107 (and $x122 $x120)))
 (let (($x137 (and $x107 $x100)))
 (let (($x291 (and $x137 $x290)))
 (let (($x260 (and $x291 $x73)))
 (let (($x18 (and $x135 $x260)))
 (let (($x293 (and $x111 $x18)))
 (let (($x103 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x35 (and $x103 $x293)))
 (let (($x53 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x53 true)))
 (let (($x77 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x52 (= $x53 $x77)))
 (let (($x16 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x84 (=> $x16 $x111)))
 (let (($x87 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x16 $x87)))
 (let (($x114 (and $x97 $x84)))
 (let (($x85 (and $x114 $x52)))
 (let (($x59 (and $x85 $x90)))
 (let (($x82 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x50 (and $x82 $x59)))
 (let (($x57 (=> $x74 $x50)))
 (let (($x26 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x101 (= $x74 $x26)))
 (let (($x9 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x42 (= $x112 $x9)))
 (let (($x118 (and $x42 $x133)))
 (let (($x91 (and $x118 $x101)))
 (let (($x78 (and $x91 $x57)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x129 (and $x65 $x78)))
 (let (($x207 (and $x129 $x35)))
 (let (($x22 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x71 (and $x22 true)))
 (let (($x106 (=> $x53 $x71)))
 (let (($x23 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x6 (= $x53 $x23)))
 (let (($x30 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x31 (= $x16 $x30)))
 (let (($x24 (and $x31 $x84)))
 (let (($x72 (and $x24 $x6)))
 (let (($x67 (and $x72 $x106)))
 (let (($x56 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x45 (and $x56 $x67)))
 (let (($x95 (=> $x74 $x45)))
 (let (($x15 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x98 (= $x74 $x15)))
 (let (($x7 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x38 (= $x112 $x7)))
 (let (($x55 (and $x38 $x133)))
 (let (($x113 (and $x55 $x98)))
 (let (($x21 (and $x113 $x95)))
 (let (($x264 (and $x21 $x207)))
 (let (($x44 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x130 (and $x44 $x264)))
 (let (($x99 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x32 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x46 (or false (or false (and (and true (or $x19 $x32)) (or $x14 $x99))))))
 (let (($x94 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x70 (=> (and $x8 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x36 (and $x70 $x130)))
 (let (($x102 (=> $x36 $x206)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x209 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x63 (= $x209 true)))
 (let (($x206 (= $x63 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x247 (concat ?x248 (concat ?x258 ?x251)))))
 (let (($x292 (= ?x156 input.dst.llvm-%val)))
 (let (($x194 (= $x292 true)))
 (let (($x73 (= $x194 true)))
 (let (($x282 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x249 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x25 (and true $x249)))
 (let (($x279 (and $x249 $x25)))
 (let (($x283 (and $x279 $x282)))
 (let (($x284 (= true $x283)))
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x8 (not $x43)))
 (let (($x285 (=> $x8 $x284)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x127 (concat ?x58 (concat ?x125 ?x121)))))
 (let (($x182 (= input.dst.llvm-%l ?x139)))
 (let (($x253 (= input.dst.llvm-%val ?x156)))
 (let ((?x240 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x240)))
 (let ((?x263 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x263)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x243 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x242)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x228 $x243)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x227 $x252)))
 (let (($x232 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (and $x236 $x231)))
 (let (($x245 (not $x226)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x241 $x244)))
 (let (($x238 (and (not $x256) $x245)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x217 $x230)))
 (let (($x223 (not $x220)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x233 (and $x219 $x216)))
 (let (($x237 (and (not $x233) $x223)))
 (let (($x166 (and (and (and (and (and (and $x237 $x238) $x265) $x232) $x270) $x239) $x262)))
 (let (($x269 (and $x166 $x261)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x213 (or false (or false (and (and true (or $x212 $x202)) (or $x222 $x210))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x274 (and (and (and $x208 $x269) $x253) $x182)))
 (let (($x275 (and $x209 $x274)))
 (let (($x93 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x276 (and $x93 $x275)))
 (let (($x286 (and $x276 $x285)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x152 (concat ?x162 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x174 (concat ?x173 (concat ?x151 ?x152))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x178))))
 (let (($x191 (= input.spec-%var-l-0.2.1.2.0 ?x190)))
 (let (($x192 (and $x191 true)))
 (let (($x74 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x197 (=> $x74 $x192)))
 (let (($x185 (= (_ bv0 32) ?x174)))
 (let ((?x168 (ite $x185 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x168 (_ bv1 32))))
 (let (($x172 (= $x74 $x181)))
 (let (($x111 (= false false)))
 (let (($x112 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x133 (=> $x112 $x111)))
 (let (($x179 (= ?x168 (_ bv0 32))))
 (let (($x176 (= $x112 $x179)))
 (let (($x186 (and $x176 $x133)))
 (let (($x187 (and $x186 $x172)))
 (let (($x205 (and $x187 $x197)))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x144)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x148)))
 (let (($x169 (= input.spec-%var-l-0.2.0 ?x165)))
 (let (($x215 (and $x169 $x205)))
 (let (($x141 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x204 (=> $x141 $x215)))
 (let ((?x37 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x143 (bvuge ?x37 (_ bv1 32))))
 (let (($x153 (= $x141 $x143)))
 (let (($x135 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x155 (=> $x135 $x111)))
 (let (($x154 (= ?x37 (_ bv0 32))))
 (let (($x140 (= $x135 $x154)))
 (let (($x157 (and $x140 $x155)))
 (let (($x145 (and $x157 $x153)))
 (let (($x224 (and $x145 $x204)))
 (let (($x287 (and $x224 $x286)))
 (let (($x288 (= $x287 true)))
 (let (($x289 (= $x288 true)))
 (let (($x290 (= $x289 true)))
 (let (($x34 (= ?x139 input.dst.llvm-%l)))
 (let (($x41 (= $x34 true)))
 (let (($x100 (= $x41 true)))
 (let (($x116 (= $x93 true)))
 (let (($x124 (= $x116 true)))
 (let (($x120 (= $x124 true)))
 (let (($x117 (= $x43 true)))
 (let (($x134 (= $x117 true)))
 (let (($x122 (= $x134 true)))
 (let (($x107 (and $x122 $x120)))
 (let (($x137 (and $x107 $x100)))
 (let (($x291 (and $x137 $x290)))
 (let (($x260 (and $x291 $x73)))
 (let (($x18 (and $x135 $x260)))
 (let (($x293 (and $x111 $x18)))
 (let (($x103 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x35 (and $x103 $x293)))
 (let (($x53 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x53 true)))
 (let (($x77 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x52 (= $x53 $x77)))
 (let (($x16 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x84 (=> $x16 $x111)))
 (let (($x87 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x97 (= $x16 $x87)))
 (let (($x114 (and $x97 $x84)))
 (let (($x85 (and $x114 $x52)))
 (let (($x59 (and $x85 $x90)))
 (let (($x82 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x50 (and $x82 $x59)))
 (let (($x57 (=> $x74 $x50)))
 (let (($x26 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x101 (= $x74 $x26)))
 (let (($x9 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x42 (= $x112 $x9)))
 (let (($x118 (and $x42 $x133)))
 (let (($x91 (and $x118 $x101)))
 (let (($x78 (and $x91 $x57)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x129 (and $x65 $x78)))
 (let (($x207 (and $x129 $x35)))
 (let (($x22 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x71 (and $x22 true)))
 (let (($x106 (=> $x53 $x71)))
 (let (($x23 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x6 (= $x53 $x23)))
 (let (($x30 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x31 (= $x16 $x30)))
 (let (($x24 (and $x31 $x84)))
 (let (($x72 (and $x24 $x6)))
 (let (($x67 (and $x72 $x106)))
 (let (($x56 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x45 (and $x56 $x67)))
 (let (($x95 (=> $x74 $x45)))
 (let (($x15 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x98 (= $x74 $x15)))
 (let (($x7 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x38 (= $x112 $x7)))
 (let (($x55 (and $x38 $x133)))
 (let (($x113 (and $x55 $x98)))
 (let (($x21 (and $x113 $x95)))
 (let (($x264 (and $x21 $x207)))
 (let (($x44 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x130 (and $x44 $x264)))
 (let (($x99 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x32 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x46 (or false (or false (and (and true (or $x19 $x32)) (or $x14 $x99))))))
 (let (($x94 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x70 (=> (and $x8 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x36 (and $x70 $x130)))
 (let (($x102 (=> $x36 $x206)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x8 (not $x43)))
 (let (($x283 (or $x43 $x8)))
 (let (($x284 (= $x283 true)))
 (let (($x285 (= $x284 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x275 (concat ?x272 (concat ?x64 ?x251)))))
 (let (($x278 (= ?x276 input.dst.llvm-%l)))
 (let (($x277 (= $x278 true)))
 (let (($x104 (= $x277 true)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x244 (concat ?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x245 (concat ?x226 (concat ?x235 ?x244))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x252))))
 (let (($x262 (= input.spec-%var-l-0.2.1.2.0 ?x263)))
 (let (($x166 (and $x262 true)))
 (let (($x98 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x240 (=> $x98 $x166)))
 (let (($x238 (= (_ bv0 32) ?x245)))
 (let ((?x255 (ite $x238 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x255 (_ bv1 32))))
 (let (($x250 (= $x98 $x232)))
 (let (($x55 (= false false)))
 (let (($x7 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x7 $x55)))
 (let (($x229 (= ?x255 (_ bv0 32))))
 (let (($x265 (= $x7 $x229)))
 (let (($x259 (and $x265 $x74)))
 (let (($x227 (and $x259 $x250)))
 (let (($x261 (and $x227 $x240)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x219)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x220 (= input.spec-%var-l-0.2.0 ?x230)))
 (let (($x269 (and $x220 $x261)))
 (let (($x222 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x273 (=> $x222 $x269)))
 (let ((?x201 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x201 (_ bv1 32))))
 (let (($x200 (= $x222 $x210)))
 (let (($x221 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x203 (=> $x221 $x55)))
 (let (($x212 (= ?x201 (_ bv0 32))))
 (let (($x202 (= $x221 $x212)))
 (let (($x211 (and $x202 $x203)))
 (let (($x198 (and $x211 $x200)))
 (let (($x146 (and $x198 $x273)))
 (let (($x247 (= $x146 true)))
 (let (($x267 (= $x247 true)))
 (let (($x248 (= $x267 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x204 (concat ?x197 (concat ?x171 ?x180)))))
 (let (($x199 (= ?x224 input.dst.llvm-%val)))
 (let (($x214 (= $x199 true)))
 (let (($x209 (= $x214 true)))
 (let ((?x164 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x164)))
 (let ((?x161 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x161)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x149 (and $x169 $x173)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x165 $x149)))
 (let (($x148 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x153 $x145)))
 (let (($x142 (not $x147)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x157 $x141)))
 (let (($x159 (and (not $x143) $x142)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x123 $x135)))
 (let (($x154 (not $x37)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x107 $x108)))
 (let (($x155 (and (not $x137) $x154)))
 (let (($x181 (and (and (and (and (and (and $x155 $x159) $x158) $x148) $x151) $x162) $x152)))
 (let (($x172 (and $x181 $x174)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x34 (or false (or false (and (and true (or $x126 $x128)) (or $x125 $x121))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x34)))
 (let (($x187 (and $x100 $x172)))
 (let (($x188 (= $x187 true)))
 (let (($x189 (= $x188 true)))
 (let (($x184 (= $x189 true)))
 (let (($x75 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x93 (= $x75 true)))
 (let (($x116 (= $x93 true)))
 (let (($x124 (= $x116 true)))
 (let (($x167 (and $x124 $x184)))
 (let (($x195 (and $x167 $x209)))
 (let (($x268 (and $x195 $x248)))
 (let (($x175 (and $x268 $x104)))
 (let (($x249 (and $x55 $x175)))
 (let (($x134 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x25 (and $x134 $x249)))
 (let (($x6 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x50 (=> $x6 true)))
 (let (($x85 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x90 (= $x6 $x85)))
 (let (($x30 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x53 (=> $x30 $x55)))
 (let (($x114 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x77 (= $x30 $x114)))
 (let (($x52 (and $x77 $x53)))
 (let (($x59 (and $x52 $x90)))
 (let (($x57 (and $x59 $x50)))
 (let (($x87 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x78 (and $x87 $x57)))
 (let (($x129 (=> $x98 $x78)))
 (let (($x91 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x20 (= $x98 $x91)))
 (let (($x118 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x26 (= $x7 $x118)))
 (let (($x101 (and $x26 $x74)))
 (let (($x82 (and $x101 $x20)))
 (let (($x48 (and $x82 $x129)))
 (let (($x9 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x103 (and $x9 $x48)))
 (let (($x279 (and $x103 $x25)))
 (let (($x106 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x67 (and $x106 true)))
 (let (($x45 (=> $x6 $x67)))
 (let (($x72 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x81 (= $x6 $x72)))
 (let (($x84 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x24 (= $x30 $x84)))
 (let (($x23 (and $x24 $x53)))
 (let (($x54 (and $x23 $x81)))
 (let (($x95 (and $x54 $x45)))
 (let (($x16 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x21 (and $x16 $x95)))
 (let (($x80 (=> $x98 $x21)))
 (let (($x113 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x76 (= $x98 $x113)))
 (let (($x111 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x133 (= $x7 $x111)))
 (let (($x15 (and $x133 $x74)))
 (let (($x69 (and $x15 $x76)))
 (let (($x65 (and $x69 $x80)))
 (let (($x280 (and $x65 $x279)))
 (let (($x112 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x281 (and $x112 $x280)))
 (let (($x5 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x89 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x27 (or false (or false (and (and true (or $x96 $x89)) (or $x68 $x5))))))
 (let (($x44 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x27)))
 (let (($x61 (=> (and $x8 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x27)))
 (let (($x282 (and $x61 $x281)))
 (let (($x286 (=> $x282 $x285)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L1%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L1%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L1%9%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x8 (not $x43)))
 (let (($x283 (or $x43 $x8)))
 (let (($x284 (= $x283 true)))
 (let (($x285 (= $x284 true)))
 (let ((?x251 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x275 (concat ?x272 (concat ?x64 ?x251)))))
 (let (($x278 (= ?x276 input.dst.llvm-%l)))
 (let (($x277 (= $x278 true)))
 (let (($x104 (= $x277 true)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x244 (concat ?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x245 (concat ?x226 (concat ?x235 ?x244))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x252))))
 (let (($x262 (= input.spec-%var-l-0.2.1.2.0 ?x263)))
 (let (($x166 (and $x262 true)))
 (let (($x98 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x240 (=> $x98 $x166)))
 (let (($x238 (= (_ bv0 32) ?x245)))
 (let ((?x255 (ite $x238 (_ bv0 32) (_ bv1 32))))
 (let (($x232 (bvuge ?x255 (_ bv1 32))))
 (let (($x250 (= $x98 $x232)))
 (let (($x55 (= false false)))
 (let (($x7 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x7 $x55)))
 (let (($x229 (= ?x255 (_ bv0 32))))
 (let (($x265 (= $x7 $x229)))
 (let (($x259 (and $x265 $x74)))
 (let (($x227 (and $x259 $x250)))
 (let (($x261 (and $x227 $x240)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x219)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x234)))
 (let (($x220 (= input.spec-%var-l-0.2.0 ?x230)))
 (let (($x269 (and $x220 $x261)))
 (let (($x222 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x273 (=> $x222 $x269)))
 (let ((?x201 (ite $x43 (_ bv0 32) (_ bv1 32))))
 (let (($x210 (bvuge ?x201 (_ bv1 32))))
 (let (($x200 (= $x222 $x210)))
 (let (($x221 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x203 (=> $x221 $x55)))
 (let (($x212 (= ?x201 (_ bv0 32))))
 (let (($x202 (= $x221 $x212)))
 (let (($x211 (and $x202 $x203)))
 (let (($x198 (and $x211 $x200)))
 (let (($x146 (and $x198 $x273)))
 (let (($x247 (= $x146 true)))
 (let (($x267 (= $x247 true)))
 (let (($x248 (= $x267 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x204 (concat ?x197 (concat ?x171 ?x180)))))
 (let (($x199 (= ?x224 input.dst.llvm-%val)))
 (let (($x214 (= $x199 true)))
 (let (($x209 (= $x214 true)))
 (let ((?x164 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x164)))
 (let ((?x161 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x161)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x149 (and $x169 $x173)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x165 $x149)))
 (let (($x148 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x153 $x145)))
 (let (($x142 (not $x147)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x157 $x141)))
 (let (($x159 (and (not $x143) $x142)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x123 $x135)))
 (let (($x154 (not $x37)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (and $x107 $x108)))
 (let (($x155 (and (not $x137) $x154)))
 (let (($x181 (and (and (and (and (and (and $x155 $x159) $x158) $x148) $x151) $x162) $x152)))
 (let (($x172 (and $x181 $x174)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x34 (or false (or false (and (and true (or $x126 $x128)) (or $x125 $x121))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x34)))
 (let (($x187 (and $x100 $x172)))
 (let (($x188 (= $x187 true)))
 (let (($x189 (= $x188 true)))
 (let (($x184 (= $x189 true)))
 (let (($x75 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x93 (= $x75 true)))
 (let (($x116 (= $x93 true)))
 (let (($x124 (= $x116 true)))
 (let (($x167 (and $x124 $x184)))
 (let (($x195 (and $x167 $x209)))
 (let (($x268 (and $x195 $x248)))
 (let (($x175 (and $x268 $x104)))
 (let (($x249 (and $x55 $x175)))
 (let (($x134 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L1%9%bbentry)))
 (let (($x25 (and $x134 $x249)))
 (let (($x6 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x50 (=> $x6 true)))
 (let (($x85 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv1 32))))
 (let (($x90 (= $x6 $x85)))
 (let (($x30 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x53 (=> $x30 $x55)))
 (let (($x114 (= input.spec-%var-node-0.L1%9%bbentry.1.2.1.0 (_ bv0 32))))
 (let (($x77 (= $x30 $x114)))
 (let (($x52 (and $x77 $x53)))
 (let (($x59 (and $x52 $x90)))
 (let (($x57 (and $x59 $x50)))
 (let (($x87 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node-0.L1%9%bbentry.1.2.0)))
 (let (($x78 (and $x87 $x57)))
 (let (($x129 (=> $x98 $x78)))
 (let (($x91 (bvuge input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv1 32))))
 (let (($x20 (= $x98 $x91)))
 (let (($x118 (= input.spec-%var-node-0.L1%9%bbentry.1.0 (_ bv0 32))))
 (let (($x26 (= $x7 $x118)))
 (let (($x101 (and $x26 $x74)))
 (let (($x82 (and $x101 $x20)))
 (let (($x48 (and $x82 $x129)))
 (let (($x9 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L1%9%bbentry.0)))
 (let (($x103 (and $x9 $x48)))
 (let (($x279 (and $x103 $x25)))
 (let (($x106 (= input.spec-%var-l-0.2.1.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.1.2.0)))
 (let (($x67 (and $x106 true)))
 (let (($x45 (=> $x6 $x67)))
 (let (($x72 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x81 (= $x6 $x72)))
 (let (($x84 (= input.spec-%var-node_next-0.L1%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x24 (= $x30 $x84)))
 (let (($x23 (and $x24 $x53)))
 (let (($x54 (and $x23 $x81)))
 (let (($x95 (and $x54 $x45)))
 (let (($x16 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L1%9%bbentry.2.0)))
 (let (($x21 (and $x16 $x95)))
 (let (($x80 (=> $x98 $x21)))
 (let (($x113 (bvuge input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv1 32))))
 (let (($x76 (= $x98 $x113)))
 (let (($x111 (= input.spec-%var-node_next-0.L1%9%bbentry.0 (_ bv0 32))))
 (let (($x133 (= $x7 $x111)))
 (let (($x15 (and $x133 $x74)))
 (let (($x69 (and $x15 $x76)))
 (let (($x65 (and $x69 $x80)))
 (let (($x280 (and $x65 $x279)))
 (let (($x112 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L1%9%bbentry)))
 (let (($x281 (and $x112 $x280)))
 (let (($x5 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x89 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x27 (or false (or false (and (and true (or $x96 $x89)) (or $x68 $x5))))))
 (let (($x44 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x27)))
 (let (($x61 (=> (and $x8 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x27)))
 (let (($x282 (and $x61 $x281)))
 (let (($x286 (=> $x282 $x285)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460770/query
