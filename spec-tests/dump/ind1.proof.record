==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x11 $x12)))
 (let (($x17 (and $x10 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x106 (not $x105)))
 (let (($x234 (or $x105 $x106)))
 (let (($x235 (= $x234 false)))
 (let (($x236 (= $x235 true)))
 (let (($x221 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x222 (= $x220 $x221)))
 (let (($x181 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x223 (=> $x181 $x222)))
 (let (($x217 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x215 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x215 $x217)))
 (let (($x219 (=> $x181 $x218)))
 (let (($x212 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x213 (=> $x181 $x212)))
 (let (($x208 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x209 (= $x181 $x208)))
 (let (($x31 (= false false)))
 (let (($x165 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x197 (=> $x165 $x31)))
 (let (($x206 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x207 (= $x165 $x206)))
 (let (($x228 (and (and (and (and (and $x207 $x197) $x209) $x213) $x219) $x223)))
 (let (($x229 (= $x228 true)))
 (let (($x198 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x199 (= $x181 $x198)))
 (let (($x195 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x196 (= $x165 $x195)))
 (let (($x193 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x202 (and (and (and $x193 $x196) $x197) $x199)))
 (let (($x203 (= $x202 true)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x169 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x174 (concat ?x171 ?x169))))
 (let (($x176 (= (_ bv0 32) ?x175)))
 (let ((?x177 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x177 (_ bv1 32))))
 (let (($x183 (= $x181 $x182)))
 (let (($x150 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x184 (=> $x150 $x183)))
 (let (($x178 (= ?x177 (_ bv0 32))))
 (let (($x179 (= $x165 $x178)))
 (let (($x180 (=> $x150 $x179)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x156)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x159)))
 (let (($x162 (= input.spec-%var-l-0.2.0 ?x161)))
 (let (($x163 (=> $x150 $x162)))
 (let ((?x146 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x151 (bvuge ?x146 (_ bv1 32))))
 (let (($x152 (= $x150 $x151)))
 (let (($x145 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x149 (=> $x145 $x31)))
 (let (($x147 (= ?x146 (_ bv0 32))))
 (let (($x148 (= $x145 $x147)))
 (let (($x189 (and (and (and (and (and $x148 $x149) $x152) $x163) $x180) $x184)))
 (let (($x190 (= $x189 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x138 (concat ?x135 (concat ?x132 ?x130)))))
 (let (($x140 (= ?x139 input.dst.llvm-%l)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x119 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x115 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x123 (or false (or false (and (and true (or $x114 $x115)) (or $x118 $x119))))))
 (let (($x125 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x109 (=> (and $x106 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x110 (= $x109 true)))
 (let (($x126 (= $x110 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x57)))))
 (let (($x100 (= ?x99 input.dst.llvm-%val)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x39 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x39)))
 (let ((?x89 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x89)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x42 $x54)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x82 $x60)))
 (let (($x73 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x44 $x23)))
 (let (($x48 (not $x32)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x7 $x37)))
 (let (($x40 (and (not $x71) $x48)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x76 $x85)))
 (let (($x68 (not $x5)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x16 $x65)))
 (let (($x63 (and (not $x52) $x68)))
 (let (($x45 (and (and (and (and (and (and $x63 $x40) $x38) $x73) $x83) $x84) $x53)))
 (let (($x28 (and $x45 $x9)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x51 (or false (or false (and (and true (or $x15 $x86)) (or $x72 $x24))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x6 (and $x75 $x28)))
 (let (($x47 (= $x6 true)))
 (let (($x33 (= $x47 true)))
 (let (($x87 (= $x33 true)))
 (let (($x34 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x8 (= $x34 true)))
 (let (($x46 (= $x8 true)))
 (let (($x35 (= $x46 true)))
 (let (($x88 (and $x35 $x87)))
 (let (($x103 (and $x88 $x102)))
 (let (($x128 (and $x103 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x191 (and $x143 $x190)))
 (let (($x204 (and $x191 $x203)))
 (let (($x230 (and $x204 $x229)))
 (let (($x231 (and $x31 $x230)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x232 (and $x21 $x231)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x233 (and $x12 $x232)))
 (let (($x237 (=> $x233 $x236)))
 (not $x237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x105 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x106 (not $x105)))
 (let (($x234 (or $x105 $x106)))
 (let (($x235 (= $x234 false)))
 (let (($x236 (= $x235 true)))
 (let (($x221 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x220 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x222 (= $x220 $x221)))
 (let (($x181 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x223 (=> $x181 $x222)))
 (let (($x217 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x215 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x218 (= $x215 $x217)))
 (let (($x219 (=> $x181 $x218)))
 (let (($x212 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x213 (=> $x181 $x212)))
 (let (($x208 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x209 (= $x181 $x208)))
 (let (($x31 (= false false)))
 (let (($x165 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x197 (=> $x165 $x31)))
 (let (($x206 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x207 (= $x165 $x206)))
 (let (($x228 (and (and (and (and (and $x207 $x197) $x209) $x213) $x219) $x223)))
 (let (($x229 (= $x228 true)))
 (let (($x198 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x199 (= $x181 $x198)))
 (let (($x195 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x196 (= $x165 $x195)))
 (let (($x193 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x202 (and (and (and $x193 $x196) $x197) $x199)))
 (let (($x203 (= $x202 true)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x169 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x175 (concat ?x174 (concat ?x171 ?x169))))
 (let (($x176 (= (_ bv0 32) ?x175)))
 (let ((?x177 (ite $x176 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x177 (_ bv1 32))))
 (let (($x183 (= $x181 $x182)))
 (let (($x150 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x184 (=> $x150 $x183)))
 (let (($x178 (= ?x177 (_ bv0 32))))
 (let (($x179 (= $x165 $x178)))
 (let (($x180 (=> $x150 $x179)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x156)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x159)))
 (let (($x162 (= input.spec-%var-l-0.2.0 ?x161)))
 (let (($x163 (=> $x150 $x162)))
 (let ((?x146 (ite $x105 (_ bv0 32) (_ bv1 32))))
 (let (($x151 (bvuge ?x146 (_ bv1 32))))
 (let (($x152 (= $x150 $x151)))
 (let (($x145 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x149 (=> $x145 $x31)))
 (let (($x147 (= ?x146 (_ bv0 32))))
 (let (($x148 (= $x145 $x147)))
 (let (($x189 (and (and (and (and (and $x148 $x149) $x152) $x163) $x180) $x184)))
 (let (($x190 (= $x189 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x138 (concat ?x135 (concat ?x132 ?x130)))))
 (let (($x140 (= ?x139 input.dst.llvm-%l)))
 (let (($x141 (= $x140 true)))
 (let (($x142 (= $x141 true)))
 (let (($x119 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x115 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x123 (or false (or false (and (and true (or $x114 $x115)) (or $x118 $x119))))))
 (let (($x125 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x109 (=> (and $x106 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x110 (= $x109 true)))
 (let (($x126 (= $x110 true)))
 (let (($x127 (= $x126 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x98 (concat ?x95 (concat ?x91 ?x57)))))
 (let (($x100 (= ?x99 input.dst.llvm-%val)))
 (let (($x101 (= $x100 true)))
 (let (($x102 (= $x101 true)))
 (let ((?x39 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x39)))
 (let ((?x89 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x89)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x42 $x54)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x82 $x60)))
 (let (($x73 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x44 $x23)))
 (let (($x48 (not $x32)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x7 $x37)))
 (let (($x40 (and (not $x71) $x48)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x76 $x85)))
 (let (($x68 (not $x5)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x16 $x65)))
 (let (($x63 (and (not $x52) $x68)))
 (let (($x45 (and (and (and (and (and (and $x63 $x40) $x38) $x73) $x83) $x84) $x53)))
 (let (($x28 (and $x45 $x9)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x51 (or false (or false (and (and true (or $x15 $x86)) (or $x72 $x24))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x6 (and $x75 $x28)))
 (let (($x47 (= $x6 true)))
 (let (($x33 (= $x47 true)))
 (let (($x87 (= $x33 true)))
 (let (($x34 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x8 (= $x34 true)))
 (let (($x46 (= $x8 true)))
 (let (($x35 (= $x46 true)))
 (let (($x88 (and $x35 $x87)))
 (let (($x103 (and $x88 $x102)))
 (let (($x128 (and $x103 $x127)))
 (let (($x143 (and $x128 $x142)))
 (let (($x191 (and $x143 $x190)))
 (let (($x204 (and $x191 $x203)))
 (let (($x230 (and $x204 $x229)))
 (let (($x231 (and $x31 $x230)))
 (let (($x21 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x232 (and $x21 $x231)))
 (let (($x12 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x233 (and $x12 $x232)))
 (let (($x237 (=> $x233 $x236)))
 (not $x237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x3692fee2)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4739fd5c)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x47200000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xa8)
                                #xa8530e6f
                                #x00)
                         #x47200001
                         #x0e)
                  #xa8530e70
                  #x00)))
  (store (store (store (store a!1 #xa8530e6e #x00) #x47200002 #x53)
                #x47200000
                #x6a)
         #xa8530e71
         #x00)))
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xa8a8a8a8)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xa8530e6a)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #xa8a8a8a8)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #xa8a8a8a8)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #xa8a8a8a8)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xa8a8a8a8)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xa8a8a8a8)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x47200003)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4739fd5f)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x47200000)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4739fd5c)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3221225472 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3221225475 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3221225472 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x111 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x112 (not $x111)))
 (let (($x248 (or $x111 $x112)))
 (let (($x249 (= $x248 false)))
 (let (($x250 (= $x249 true)))
 (let (($x232 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x181 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x238 (and $x181 $x232)))
 (let (($x70 (not $x238)))
 (let (($x223 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x236 (and $x181 $x223)))
 (let (($x237 (not $x236)))
 (let (($x233 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x234 (= $x232 $x233)))
 (let (($x235 (=> $x181 $x234)))
 (let (($x229 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x230 (= $x223 $x229)))
 (let (($x231 (=> $x181 $x230)))
 (let (($x220 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x221 (=> $x181 $x220)))
 (let (($x217 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x218 (= $x181 $x217)))
 (let (($x24 (= false false)))
 (let (($x173 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x207 (=> $x173 $x24)))
 (let (($x215 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x216 (= $x173 $x215)))
 (let (($x241 (and (and (and (and (and (and $x216 $x207) $x218) $x221) $x231) $x235) $x237)))
 (let (($x242 (and $x241 $x70)))
 (let (($x243 (= $x242 true)))
 (let (($x209 (not $x181)))
 (let (($x224 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x208 (= $x181 $x224)))
 (let (($x205 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x206 (= $x173 $x205)))
 (let (($x203 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x212 (and (and (and (and $x203 $x206) $x207) $x208) $x209)))
 (let (($x213 (= $x212 true)))
 (let (($x186 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x191 (and $x186 $x181)))
 (let (($x192 (not $x191)))
 (let (($x189 (and $x186 $x173)))
 (let (($x190 (not $x189)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x171 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x176 (concat ?x175 (concat ?x166 ?x167))))
 (let (($x177 (= (_ bv0 32) ?x176)))
 (let ((?x178 (ite $x177 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x178 (_ bv1 32))))
 (let (($x183 (= $x181 $x182)))
 (let (($x184 (=> $x186 $x183)))
 (let (($x179 (= ?x178 (_ bv0 32))))
 (let (($x180 (= $x173 $x179)))
 (let (($x188 (=> $x186 $x180)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x153)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x161)))
 (let (($x187 (= input.spec-%var-l-0.2.0 ?x163)))
 (let (($x164 (=> $x186 $x187)))
 (let ((?x185 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x185 (_ bv1 32))))
 (let (($x157 (= $x186 $x160)))
 (let (($x149 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x152 (=> $x149 $x24)))
 (let (($x150 (= ?x185 (_ bv0 32))))
 (let (($x151 (= $x149 $x150)))
 (let (($x197 (and (and (and (and (and (and $x151 $x152) $x157) $x164) $x188) $x184) $x190)))
 (let (($x201 (and $x197 $x192)))
 (let (($x198 (= $x201 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x140 (concat ?x133 ?x132)))))
 (let (($x145 (= ?x144 input.dst.llvm-%l)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x125 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x120 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x127 (or false (or false (and (and true (or $x119 $x120)) (or $x123 $x125))))))
 (let (($x137 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x114 (=> (and $x112 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x115 (= $x114 true)))
 (let (($x138 (= $x115 true)))
 (let (($x134 (= $x138 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x96 (concat ?x59 ?x94)))))
 (let (($x103 (= ?x102 input.dst.llvm-%val)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x80 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x78 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x78)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x82 $x56)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x67 $x54)))
 (let (($x73 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x23 $x32)))
 (let (($x40 (not $x48)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x71 $x66)))
 (let (($x74 (and (not $x44) $x40)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x85 $x5)))
 (let (($x63 (not $x68)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x16 $x21)))
 (let (($x37 (and (not $x76) $x63)))
 (let (($x6 (and (and (and (and (and (and $x37 $x74) $x17) $x73) $x60) $x64) $x84)))
 (let (($x47 (and $x6 $x89)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x65 (or false (or false (and (and true (or $x30 $x49)) (or $x86 $x50))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x65)))
 (let (($x33 (and $x81 $x47)))
 (let (($x87 (= $x33 true)))
 (let (($x88 (= $x87 true)))
 (let (($x90 (= $x88 true)))
 (let (($x12 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x13 (= $x12 true)))
 (let (($x72 (= $x13 true)))
 (let (($x26 (= $x72 true)))
 (let (($x97 (and $x26 $x90)))
 (let (($x106 (and $x97 $x105)))
 (let (($x135 (and $x106 $x134)))
 (let (($x148 (and $x135 $x147)))
 (let (($x199 (and $x148 $x198)))
 (let (($x226 (and $x199 $x213)))
 (let (($x244 (and $x226 $x243)))
 (let (($x245 (and $x24 $x244)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x246 (and $x19 $x245)))
 (let (($x62 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x247 (and $x62 $x246)))
 (let (($x251 (=> $x247 $x250)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x111 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x112 (not $x111)))
 (let (($x248 (or $x111 $x112)))
 (let (($x249 (= $x248 false)))
 (let (($x250 (= $x249 true)))
 (let (($x232 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x181 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x238 (and $x181 $x232)))
 (let (($x70 (not $x238)))
 (let (($x223 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x236 (and $x181 $x223)))
 (let (($x237 (not $x236)))
 (let (($x233 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x234 (= $x232 $x233)))
 (let (($x235 (=> $x181 $x234)))
 (let (($x229 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x230 (= $x223 $x229)))
 (let (($x231 (=> $x181 $x230)))
 (let (($x220 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x221 (=> $x181 $x220)))
 (let (($x217 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x218 (= $x181 $x217)))
 (let (($x24 (= false false)))
 (let (($x173 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x207 (=> $x173 $x24)))
 (let (($x215 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x216 (= $x173 $x215)))
 (let (($x241 (and (and (and (and (and (and $x216 $x207) $x218) $x221) $x231) $x235) $x237)))
 (let (($x242 (and $x241 $x70)))
 (let (($x243 (= $x242 true)))
 (let (($x209 (not $x181)))
 (let (($x224 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x208 (= $x181 $x224)))
 (let (($x205 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x206 (= $x173 $x205)))
 (let (($x203 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x212 (and (and (and (and $x203 $x206) $x207) $x208) $x209)))
 (let (($x213 (= $x212 true)))
 (let (($x186 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x191 (and $x186 $x181)))
 (let (($x192 (not $x191)))
 (let (($x189 (and $x186 $x173)))
 (let (($x190 (not $x189)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x171 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x176 (concat ?x175 (concat ?x166 ?x167))))
 (let (($x177 (= (_ bv0 32) ?x176)))
 (let ((?x178 (ite $x177 (_ bv0 32) (_ bv1 32))))
 (let (($x182 (bvuge ?x178 (_ bv1 32))))
 (let (($x183 (= $x181 $x182)))
 (let (($x184 (=> $x186 $x183)))
 (let (($x179 (= ?x178 (_ bv0 32))))
 (let (($x180 (= $x173 $x179)))
 (let (($x188 (=> $x186 $x180)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x153)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x161)))
 (let (($x187 (= input.spec-%var-l-0.2.0 ?x163)))
 (let (($x164 (=> $x186 $x187)))
 (let ((?x185 (ite $x111 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (bvuge ?x185 (_ bv1 32))))
 (let (($x157 (= $x186 $x160)))
 (let (($x149 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x152 (=> $x149 $x24)))
 (let (($x150 (= ?x185 (_ bv0 32))))
 (let (($x151 (= $x149 $x150)))
 (let (($x197 (and (and (and (and (and (and $x151 $x152) $x157) $x164) $x188) $x184) $x190)))
 (let (($x201 (and $x197 $x192)))
 (let (($x198 (= $x201 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x143 (concat ?x140 (concat ?x133 ?x132)))))
 (let (($x145 (= ?x144 input.dst.llvm-%l)))
 (let (($x146 (= $x145 true)))
 (let (($x147 (= $x146 true)))
 (let (($x125 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x120 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x127 (or false (or false (and (and true (or $x119 $x120)) (or $x123 $x125))))))
 (let (($x137 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x114 (=> (and $x112 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x115 (= $x114 true)))
 (let (($x138 (= $x115 true)))
 (let (($x134 (= $x138 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x96 (concat ?x59 ?x94)))))
 (let (($x103 (= ?x102 input.dst.llvm-%val)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x80 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x80)))
 (let ((?x78 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x78)))
 (let ((?x83 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x83)))
 (let ((?x77 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x77)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x82 $x56)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x67 $x54)))
 (let (($x73 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x23 $x32)))
 (let (($x40 (not $x48)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x71 $x66)))
 (let (($x74 (and (not $x44) $x40)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x85 $x5)))
 (let (($x63 (not $x68)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x16 $x21)))
 (let (($x37 (and (not $x76) $x63)))
 (let (($x6 (and (and (and (and (and (and $x37 $x74) $x17) $x73) $x60) $x64) $x84)))
 (let (($x47 (and $x6 $x89)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x65 (or false (or false (and (and true (or $x30 $x49)) (or $x86 $x50))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x65)))
 (let (($x33 (and $x81 $x47)))
 (let (($x87 (= $x33 true)))
 (let (($x88 (= $x87 true)))
 (let (($x90 (= $x88 true)))
 (let (($x12 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x13 (= $x12 true)))
 (let (($x72 (= $x13 true)))
 (let (($x26 (= $x72 true)))
 (let (($x97 (and $x26 $x90)))
 (let (($x106 (and $x97 $x105)))
 (let (($x135 (and $x106 $x134)))
 (let (($x148 (and $x135 $x147)))
 (let (($x199 (and $x148 $x198)))
 (let (($x226 (and $x199 $x213)))
 (let (($x244 (and $x226 $x243)))
 (let (($x245 (and $x24 $x244)))
 (let (($x19 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x246 (and $x19 $x245)))
 (let (($x62 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x247 (and $x62 $x246)))
 (let (($x251 (=> $x247 $x250)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-0.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node_next-0.L2%9%bbentry.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-node-0.L2%9%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end #b10100000000000000000000000000111)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000100)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end #b01010000000000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin #b01010000000000000000000000000000)
(= input.dst.llvm-%val #b00000000000000000000000000000000)
(= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ #b01010000000000000000000000000000)
(= input.spec-%var-val-0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.spec-%var-node_val-0.L2%9%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-mem @fun_26)
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.spec-%var-l-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44806568)
  (define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x05084890)
  (define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%val () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x05084893)
  (define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4480656b)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x05084890)
  (define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44806568)
  (define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3221225472 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3221225475 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3221225472 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv2147483655 32))
(define-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.dst.llvm-%val () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv2147483652 32))
(define-fun input.spec-%var-val-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x25 (not $x113)))
 (let (($x243 (or $x113 $x25)))
 (let (($x244 (not $x243)))
 (let (($x160 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x159 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x242 (or $x159 $x160)))
 (let (($x245 (or $x242 $x244)))
 (let (($x246 (= $x245 true)))
 (let (($x247 (= $x246 true)))
 (let (($x229 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x230 (= $x228 $x229)))
 (let (($x184 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x231 (=> $x184 $x230)))
 (let (($x129 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x220 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x220 $x129)))
 (let (($x223 (=> $x184 $x222)))
 (let (($x58 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x219 (=> $x184 $x58)))
 (let (($x216 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x14 (= $x184 $x216)))
 (let (($x21 (= false false)))
 (let (($x166 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x207 (=> $x166 $x21)))
 (let (($x214 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x215 (= $x166 $x214)))
 (let (($x235 (and (and (and (and (and $x215 $x207) $x14) $x219) $x223) $x231)))
 (let (($x240 (= $x235 true)))
 (let (($x210 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x224 (= $x184 $x210)))
 (let (($x206 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x225 (= $x166 $x206)))
 (let (($x204 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x209 (and (and (and $x204 $x225) $x207) $x224)))
 (let (($x212 (= $x209 true)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x174 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x180 (concat ?x179 (concat ?x176 ?x167))))
 (let (($x188 (= (_ bv0 32) ?x180)))
 (let ((?x196 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x196 (_ bv1 32))))
 (let (($x189 (= $x184 $x200)))
 (let (($x190 (=> $x159 $x189)))
 (let (($x181 (= ?x196 (_ bv0 32))))
 (let (($x182 (= $x166 $x181)))
 (let (($x183 (=> $x159 $x182)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x163)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x195)))
 (let (($x172 (= input.spec-%var-l-0.2.0 ?x173)))
 (let (($x175 (=> $x159 $x172)))
 (let ((?x157 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x157 (_ bv1 32))))
 (let (($x155 (= $x159 $x154)))
 (let (($x201 (and (and (and (and (= $x160 (= ?x157 (_ bv0 32))) (=> $x160 $x21)) $x155) $x175) $x183)))
 (let (($x198 (and $x201 $x190)))
 (let (($x199 (= $x198 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x185 (concat ?x148 (concat ?x145 ?x141)))))
 (let (($x151 (= ?x150 input.dst.llvm-%l)))
 (let (($x24 (= $x151 true)))
 (let (($x152 (= $x24 true)))
 (let (($x139 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x140 (= $x139 true)))
 (let (($x130 (= $x140 true)))
 (let (($x133 (= $x130 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x137 (concat ?x110 (concat ?x122 ?x120)))))
 (let (($x115 (= ?x114 input.dst.llvm-%val)))
 (let (($x138 (= $x115 true)))
 (let (($x134 (= $x138 true)))
 (let ((?x91 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x91)))
 (let ((?x59 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x59)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x98 $x101)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x97 $x57)))
 (let (($x90 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x78 $x84)))
 (let (($x80 (not $x6)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x83 $x64)))
 (let (($x47 (and (not $x28) $x80)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x42 $x77)))
 (let (($x54 (not $x56)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x71 $x66)))
 (let (($x9 (and (not $x82) $x54)))
 (let (($x107 (and (and (and (and (and (and $x9 $x47) $x87) $x90) $x92) $x95) $x94)))
 (let (($x111 (and $x107 $x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x73 (or false (or false (and (and true (or $x32 $x48)) (or $x53 $x38))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x112 (and $x67 $x111)))
 (let (($x124 (= $x112 true)))
 (let (($x116 (= $x124 true)))
 (let (($x117 (= $x116 true)))
 (let (($x85 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x5 (= $x85 true)))
 (let (($x68 (= $x5 true)))
 (let (($x63 (= $x68 true)))
 (let (($x128 (and $x63 $x117)))
 (let (($x135 (and $x128 $x134)))
 (let (($x132 (and $x135 $x133)))
 (let (($x193 (and $x132 $x152)))
 (let (($x202 (and $x193 $x199)))
 (let (($x213 (and $x202 $x212)))
 (let (($x236 (and $x213 $x240)))
 (let (($x237 (and $x21 $x236)))
 (let (($x16 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x241 (and $x16 $x237)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x238 (and $x65 $x241)))
 (let (($x34 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x15 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x50 (or false (or false (and (and true (or $x52 $x15)) (or $x22 $x34))))))
 (let (($x55 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x50)))
 (let (($x10 (=> (and $x25 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x50)))
 (let (($x70 (and $x10 $x238)))
 (let (($x248 (=> $x70 $x247)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x25 (not $x113)))
 (let (($x243 (or $x113 $x25)))
 (let (($x244 (not $x243)))
 (let (($x160 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x159 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x242 (or $x159 $x160)))
 (let (($x245 (or $x242 $x244)))
 (let (($x246 (= $x245 true)))
 (let (($x247 (= $x246 true)))
 (let (($x229 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x228 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x230 (= $x228 $x229)))
 (let (($x184 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x231 (=> $x184 $x230)))
 (let (($x129 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x220 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x222 (= $x220 $x129)))
 (let (($x223 (=> $x184 $x222)))
 (let (($x58 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x219 (=> $x184 $x58)))
 (let (($x216 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x14 (= $x184 $x216)))
 (let (($x21 (= false false)))
 (let (($x166 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x207 (=> $x166 $x21)))
 (let (($x214 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x215 (= $x166 $x214)))
 (let (($x235 (and (and (and (and (and $x215 $x207) $x14) $x219) $x223) $x231)))
 (let (($x240 (= $x235 true)))
 (let (($x210 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x224 (= $x184 $x210)))
 (let (($x206 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x225 (= $x166 $x206)))
 (let (($x204 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x209 (and (and (and $x204 $x225) $x207) $x224)))
 (let (($x212 (= $x209 true)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x167 (concat ?x174 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x180 (concat ?x179 (concat ?x176 ?x167))))
 (let (($x188 (= (_ bv0 32) ?x180)))
 (let ((?x196 (ite $x188 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x196 (_ bv1 32))))
 (let (($x189 (= $x184 $x200)))
 (let (($x190 (=> $x159 $x189)))
 (let (($x181 (= ?x196 (_ bv0 32))))
 (let (($x182 (= $x166 $x181)))
 (let (($x183 (=> $x159 $x182)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x163)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x195)))
 (let (($x172 (= input.spec-%var-l-0.2.0 ?x173)))
 (let (($x175 (=> $x159 $x172)))
 (let ((?x157 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x154 (bvuge ?x157 (_ bv1 32))))
 (let (($x155 (= $x159 $x154)))
 (let (($x201 (and (and (and (and (= $x160 (= ?x157 (_ bv0 32))) (=> $x160 $x21)) $x155) $x175) $x183)))
 (let (($x198 (and $x201 $x190)))
 (let (($x199 (= $x198 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x185 (concat ?x148 (concat ?x145 ?x141)))))
 (let (($x151 (= ?x150 input.dst.llvm-%l)))
 (let (($x24 (= $x151 true)))
 (let (($x152 (= $x24 true)))
 (let (($x139 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x140 (= $x139 true)))
 (let (($x130 (= $x140 true)))
 (let (($x133 (= $x130 true)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x114 (concat ?x137 (concat ?x110 (concat ?x122 ?x120)))))
 (let (($x115 (= ?x114 input.dst.llvm-%val)))
 (let (($x138 (= $x115 true)))
 (let (($x134 (= $x138 true)))
 (let ((?x91 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x91)))
 (let ((?x59 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x59)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x98 $x101)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x97 $x57)))
 (let (($x90 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x78 $x84)))
 (let (($x80 (not $x6)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x83 $x64)))
 (let (($x47 (and (not $x28) $x80)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x42 $x77)))
 (let (($x54 (not $x56)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x71 $x66)))
 (let (($x9 (and (not $x82) $x54)))
 (let (($x107 (and (and (and (and (and (and $x9 $x47) $x87) $x90) $x92) $x95) $x94)))
 (let (($x111 (and $x107 $x99)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x73 (or false (or false (and (and true (or $x32 $x48)) (or $x53 $x38))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x112 (and $x67 $x111)))
 (let (($x124 (= $x112 true)))
 (let (($x116 (= $x124 true)))
 (let (($x117 (= $x116 true)))
 (let (($x85 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x5 (= $x85 true)))
 (let (($x68 (= $x5 true)))
 (let (($x63 (= $x68 true)))
 (let (($x128 (and $x63 $x117)))
 (let (($x135 (and $x128 $x134)))
 (let (($x132 (and $x135 $x133)))
 (let (($x193 (and $x132 $x152)))
 (let (($x202 (and $x193 $x199)))
 (let (($x213 (and $x202 $x212)))
 (let (($x236 (and $x213 $x240)))
 (let (($x237 (and $x21 $x236)))
 (let (($x16 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x241 (and $x16 $x237)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x238 (and $x65 $x241)))
 (let (($x34 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x15 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x50 (or false (or false (and (and true (or $x52 $x15)) (or $x22 $x34))))))
 (let (($x55 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x50)))
 (let (($x10 (=> (and $x25 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x50)))
 (let (($x70 (and $x10 $x238)))
 (let (($x248 (=> $x70 $x247)))
 (not $x248))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x181)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x201)))
 (let (($x189 (= input.spec-%var-l-0.2.0 ?x200)))
 (let (($x260 (= $x189 true)))
 (let (($x261 (= $x260 true)))
 (let (($x136 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x119 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x250 (= $x119 $x136)))
 (let (($x214 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x251 (=> $x214 $x250)))
 (let (($x249 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x247 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x108 (= $x247 $x249)))
 (let (($x37 (=> $x214 $x108)))
 (let (($x244 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x245 (=> $x214 $x244)))
 (let (($x238 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x70 (= $x214 $x238)))
 (let (($x112 (= false false)))
 (let (($x199 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x223 (=> $x199 $x112)))
 (let (($x237 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x241 (= $x199 $x237)))
 (let (($x131 (and (and (and (and (and $x241 $x223) $x70) $x245) $x37) $x251)))
 (let (($x253 (= $x131 true)))
 (let (($x234 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x228 (= $x214 $x234)))
 (let (($x129 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x222 (= $x199 $x129)))
 (let (($x220 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x231 (and (and (and $x220 $x222) $x223) $x228)))
 (let (($x235 (= $x231 true)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x205 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x210 (concat ?x211 (concat ?x225 ?x205))))
 (let (($x224 (= (_ bv0 32) ?x210)))
 (let ((?x209 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x209 (_ bv1 32))))
 (let (($x239 (= $x214 $x215)))
 (let (($x53 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x216 (=> $x53 $x239)))
 (let (($x212 (= ?x209 (_ bv0 32))))
 (let (($x213 (= $x199 $x212)))
 (let (($x226 (=> $x53 $x213)))
 (let (($x190 (=> $x53 $x189)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x176 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x176 (_ bv1 32))))
 (let (($x177 (= $x53 $x167)))
 (let (($x169 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x170 (=> $x169 $x112)))
 (let (($x171 (= ?x176 (_ bv0 32))))
 (let (($x174 (= $x169 $x171)))
 (let (($x58 (and (and (and (and (and $x174 $x170) $x177) $x190) $x226) $x216)))
 (let (($x219 (= $x58 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x24 (concat ?x31 (concat ?x145 ?x148)))))
 (let (($x168 (= ?x152 input.dst.llvm-%l)))
 (let (($x166 (= $x168 true)))
 (let (($x178 (= $x166 true)))
 (let (($x155 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x156 (and true $x21)))
 (let (($x197 (and $x21 $x156)))
 (let (($x191 (and $x197 $x155)))
 (let (($x165 (= true $x191)))
 (let (($x102 (not $x18)))
 (let (($x187 (=> $x102 $x165)))
 (let (($x193 (= input.dst.llvm-%l ?x152)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x34 (concat ?x111 (concat ?x40 ?x107)))))
 (let (($x185 (= input.dst.llvm-%val ?x80)))
 (let (($x186 (and $x185 $x193)))
 (let (($x164 (and $x186 $x187)))
 (let ((?x135 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x135)))
 (let ((?x138 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x138)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x121 $x120)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x110 $x123)))
 (let (($x109 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x124 $x116)))
 (let (($x128 (not $x117)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x82 $x39)))
 (let (($x127 (and (not $x96) $x128)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x42 $x95)))
 (let (($x92 (not $x73)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x77 $x64)))
 (let (($x66 (and (not $x87) $x92)))
 (let (($x132 (and (and (and (and (and (and $x66 $x127) $x137) $x109) $x126) $x115) $x134)))
 (let (($x149 (and $x132 $x142)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x23 (or false (or false (and (and true (or $x32 $x28)) (or $x90 $x67))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x99 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x158 (and (and (and $x99 $x33) $x149) $x164)))
 (let (($x56 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x163 (and $x56 $x158)))
 (let (($x195 (and true $x163)))
 (let (($x173 (= $x195 true)))
 (let (($x172 (= $x173 true)))
 (let (($x175 (= $x172 true)))
 (let (($x104 (= $x102 true)))
 (let (($x12 (= $x104 true)))
 (let (($x85 (= $x12 true)))
 (let (($x78 (= $x99 true)))
 (let (($x84 (= $x78 true)))
 (let (($x55 (= $x84 true)))
 (let (($x30 (= ?x80 input.dst.llvm-%val)))
 (let (($x49 (= $x30 true)))
 (let (($x45 (= $x49 true)))
 (let (($x89 (and $x45 $x55)))
 (let (($x61 (and $x89 $x85)))
 (let (($x192 (and $x61 $x175)))
 (let (($x179 (and $x192 $x178)))
 (let (($x233 (and $x179 $x219)))
 (let (($x240 (and $x233 $x235)))
 (let (($x254 (and $x240 $x253)))
 (let (($x255 (and $x53 $x254)))
 (let (($x256 (and $x112 $x255)))
 (let (($x35 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x257 (and $x35 $x256)))
 (let (($x5 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x258 (and $x5 $x257)))
 (let (($x101 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x29 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x41 (or false (or false (and (and true (or $x20 $x29)) (or $x60 $x101))))))
 (let (($x86 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x41)))
 (let (($x16 (=> (and $x102 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x41)))
 (let (($x259 (and $x16 $x258)))
 (let (($x262 (=> $x259 $x261)))
 (not $x262))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x181)))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x201)))
 (let (($x189 (= input.spec-%var-l-0.2.0 ?x200)))
 (let (($x260 (= $x189 true)))
 (let (($x261 (= $x260 true)))
 (let (($x136 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x119 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x250 (= $x119 $x136)))
 (let (($x214 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x251 (=> $x214 $x250)))
 (let (($x249 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x247 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x108 (= $x247 $x249)))
 (let (($x37 (=> $x214 $x108)))
 (let (($x244 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x245 (=> $x214 $x244)))
 (let (($x238 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x70 (= $x214 $x238)))
 (let (($x112 (= false false)))
 (let (($x199 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x223 (=> $x199 $x112)))
 (let (($x237 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x241 (= $x199 $x237)))
 (let (($x131 (and (and (and (and (and $x241 $x223) $x70) $x245) $x37) $x251)))
 (let (($x253 (= $x131 true)))
 (let (($x234 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x228 (= $x214 $x234)))
 (let (($x129 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x222 (= $x199 $x129)))
 (let (($x220 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x231 (and (and (and $x220 $x222) $x223) $x228)))
 (let (($x235 (= $x231 true)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x205 (concat ?x204 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x210 (concat ?x211 (concat ?x225 ?x205))))
 (let (($x224 (= (_ bv0 32) ?x210)))
 (let ((?x209 (ite $x224 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x209 (_ bv1 32))))
 (let (($x239 (= $x214 $x215)))
 (let (($x53 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x216 (=> $x53 $x239)))
 (let (($x212 (= ?x209 (_ bv0 32))))
 (let (($x213 (= $x199 $x212)))
 (let (($x226 (=> $x53 $x213)))
 (let (($x190 (=> $x53 $x189)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x176 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x167 (bvuge ?x176 (_ bv1 32))))
 (let (($x177 (= $x53 $x167)))
 (let (($x169 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x170 (=> $x169 $x112)))
 (let (($x171 (= ?x176 (_ bv0 32))))
 (let (($x174 (= $x169 $x171)))
 (let (($x58 (and (and (and (and (and $x174 $x170) $x177) $x190) $x226) $x216)))
 (let (($x219 (= $x58 true)))
 (let ((?x148 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x24 (concat ?x31 (concat ?x145 ?x148)))))
 (let (($x168 (= ?x152 input.dst.llvm-%l)))
 (let (($x166 (= $x168 true)))
 (let (($x178 (= $x166 true)))
 (let (($x155 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x21 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x156 (and true $x21)))
 (let (($x197 (and $x21 $x156)))
 (let (($x191 (and $x197 $x155)))
 (let (($x165 (= true $x191)))
 (let (($x102 (not $x18)))
 (let (($x187 (=> $x102 $x165)))
 (let (($x193 (= input.dst.llvm-%l ?x152)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x34 (concat ?x111 (concat ?x40 ?x107)))))
 (let (($x185 (= input.dst.llvm-%val ?x80)))
 (let (($x186 (and $x185 $x193)))
 (let (($x164 (and $x186 $x187)))
 (let ((?x135 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x135)))
 (let ((?x138 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x138)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x114)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x121 $x120)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x110 $x123)))
 (let (($x109 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x124 $x116)))
 (let (($x128 (not $x117)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x82 $x39)))
 (let (($x127 (and (not $x96) $x128)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x42 $x95)))
 (let (($x92 (not $x73)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x77 $x64)))
 (let (($x66 (and (not $x87) $x92)))
 (let (($x132 (and (and (and (and (and (and $x66 $x127) $x137) $x109) $x126) $x115) $x134)))
 (let (($x149 (and $x132 $x142)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x23 (or false (or false (and (and true (or $x32 $x28)) (or $x90 $x67))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x99 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x158 (and (and (and $x99 $x33) $x149) $x164)))
 (let (($x56 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x163 (and $x56 $x158)))
 (let (($x195 (and true $x163)))
 (let (($x173 (= $x195 true)))
 (let (($x172 (= $x173 true)))
 (let (($x175 (= $x172 true)))
 (let (($x104 (= $x102 true)))
 (let (($x12 (= $x104 true)))
 (let (($x85 (= $x12 true)))
 (let (($x78 (= $x99 true)))
 (let (($x84 (= $x78 true)))
 (let (($x55 (= $x84 true)))
 (let (($x30 (= ?x80 input.dst.llvm-%val)))
 (let (($x49 (= $x30 true)))
 (let (($x45 (= $x49 true)))
 (let (($x89 (and $x45 $x55)))
 (let (($x61 (and $x89 $x85)))
 (let (($x192 (and $x61 $x175)))
 (let (($x179 (and $x192 $x178)))
 (let (($x233 (and $x179 $x219)))
 (let (($x240 (and $x233 $x235)))
 (let (($x254 (and $x240 $x253)))
 (let (($x255 (and $x53 $x254)))
 (let (($x256 (and $x112 $x255)))
 (let (($x35 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x257 (and $x35 $x256)))
 (let (($x5 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x258 (and $x5 $x257)))
 (let (($x101 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x29 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x41 (or false (or false (and (and true (or $x20 $x29)) (or $x60 $x101))))))
 (let (($x86 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x41)))
 (let (($x16 (=> (and $x102 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x41)))
 (let (($x259 (and $x16 $x258)))
 (let (($x262 (=> $x259 $x261)))
 (not $x262))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x6 (= $x36 true)))
 (let (($x76 (= $x6 true)))
 (let (($x136 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x119 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x250 (= $x119 $x136)))
 (let (($x214 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x251 (=> $x214 $x250)))
 (let (($x108 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x37 (= $x248 $x108)))
 (let (($x93 (=> $x214 $x37)))
 (let (($x27 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x246 (=> $x214 $x27)))
 (let (($x242 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x243 (= $x214 $x242)))
 (let (($x91 (= false false)))
 (let (($x207 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x228 (=> $x207 $x91)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x51 (= $x207 $x70)))
 (let (($x256 (and (and (and (and (and $x51 $x228) $x243) $x246) $x93) $x251)))
 (let (($x257 (= $x256 true)))
 (let (($x231 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x235 (= $x214 $x231)))
 (let (($x230 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x234 (= $x207 $x230)))
 (let (($x229 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x237 (and (and (and $x229 $x234) $x228) $x235)))
 (let (($x241 (= $x237 true)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x203 (concat ?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x224 (concat ?x210 (concat ?x202 ?x203))))
 (let (($x209 (= (_ bv0 32) ?x224)))
 (let ((?x212 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x212 (_ bv1 32))))
 (let (($x239 (= $x214 $x215)))
 (let (($x34 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x216 (=> $x34 $x239)))
 (let (($x213 (= ?x212 (_ bv0 32))))
 (let (($x226 (= $x207 $x213)))
 (let (($x218 (=> $x34 $x226)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x200)))
 (let (($x217 (= input.spec-%var-l-0.2.0 ?x190)))
 (let (($x198 (=> $x34 $x217)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x53 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x53 (_ bv1 32))))
 (let (($x182 (= $x34 $x184)))
 (let (($x14 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x232 (=> $x14 $x91)))
 (let (($x167 (= ?x53 (_ bv0 32))))
 (let (($x177 (= $x14 $x167)))
 (let (($x220 (and (and (and (and (and $x177 $x232) $x182) $x198) $x218) $x216)))
 (let (($x221 (= $x220 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x157 (concat ?x152 (concat ?x148 ?x144)))))
 (let (($x171 (= ?x160 input.dst.llvm-%val)))
 (let (($x174 (= $x171 true)))
 (let (($x112 (= $x174 true)))
 (let (($x158 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x191 (and true $x155)))
 (let (($x165 (and $x155 $x191)))
 (let (($x163 (and $x165 $x158)))
 (let (($x195 (= true $x163)))
 (let (($x102 (not $x113)))
 (let (($x173 (=> $x102 $x195)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x85 (concat ?x89 (concat ?x99 ?x50)))))
 (let (($x162 (= input.dst.llvm-%l ?x61)))
 (let (($x194 (= input.dst.llvm-%val ?x160)))
 (let (($x21 (and $x194 $x162)))
 (let (($x172 (and $x21 $x173)))
 (let ((?x132 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x132)))
 (let ((?x138 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x138)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x120 $x126)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x122 $x130)))
 (let (($x121 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x127 $x143)))
 (let (($x139 (not $x137)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x116 $x117)))
 (let (($x109 (and (not $x128) $x139)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x66 $x82)))
 (let (($x96 (not $x39)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x81 $x9)))
 (let (($x124 (and (not $x92) $x96)))
 (let (($x24 (and (and (and (and (and (and $x124 $x109) $x110) $x121) $x114) $x133) $x134)))
 (let (($x146 (and $x24 $x135)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x42 (or false (or false (and (and true (or $x63 $x47)) (or $x153 $x77))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x107 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x168 (and (and (and $x107 $x73) $x146) $x172)))
 (let (($x32 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x166 (and $x32 $x168)))
 (let (($x178 (and true $x166)))
 (let (($x179 (= $x178 true)))
 (let (($x59 (= $x179 true)))
 (let (($x169 (= $x59 true)))
 (let (($x71 (= ?x61 input.dst.llvm-%l)))
 (let (($x56 (= $x71 true)))
 (let (($x97 (= $x56 true)))
 (let (($x105 (= $x107 true)))
 (let (($x44 (= $x105 true)))
 (let (($x80 (= $x44 true)))
 (let (($x10 (= $x113 true)))
 (let (($x100 (= $x10 true)))
 (let (($x111 (= $x100 true)))
 (let (($x74 (and $x111 $x80)))
 (let (($x83 (and $x74 $x97)))
 (let (($x176 (and $x83 $x169)))
 (let (($x170 (and $x176 $x112)))
 (let (($x129 (and $x170 $x221)))
 (let (($x252 (and $x129 $x241)))
 (let (($x258 (and $x252 $x257)))
 (let (($x259 (and $x34 $x258)))
 (let (($x260 (and $x91 $x259)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x261 (and $x65 $x260)))
 (let (($x52 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x262 (and $x52 $x261)))
 (let (($x22 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x79 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x16 (or false (or false (and (and true (or $x43 $x79)) (or $x98 $x22))))))
 (let (($x8 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x16)))
 (let (($x25 (=> (and $x102 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x16)))
 (let (($x263 (and $x25 $x262)))
 (let (($x147 (=> $x263 $x76)))
 (not $x147)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (= input.spec-%var-l-0.2.0 input.dst.llvm-%val)))
 (let (($x6 (= $x36 true)))
 (let (($x76 (= $x6 true)))
 (let (($x136 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x119 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x250 (= $x119 $x136)))
 (let (($x214 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x251 (=> $x214 $x250)))
 (let (($x108 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x248 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x37 (= $x248 $x108)))
 (let (($x93 (=> $x214 $x37)))
 (let (($x27 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x246 (=> $x214 $x27)))
 (let (($x242 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x243 (= $x214 $x242)))
 (let (($x91 (= false false)))
 (let (($x207 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x228 (=> $x207 $x91)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x51 (= $x207 $x70)))
 (let (($x256 (and (and (and (and (and $x51 $x228) $x243) $x246) $x93) $x251)))
 (let (($x257 (= $x256 true)))
 (let (($x231 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x235 (= $x214 $x231)))
 (let (($x230 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x234 (= $x207 $x230)))
 (let (($x229 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x237 (and (and (and $x229 $x234) $x228) $x235)))
 (let (($x241 (= $x237 true)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x203 (concat ?x225 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x224 (concat ?x210 (concat ?x202 ?x203))))
 (let (($x209 (= (_ bv0 32) ?x224)))
 (let ((?x212 (ite $x209 (_ bv0 32) (_ bv1 32))))
 (let (($x215 (bvuge ?x212 (_ bv1 32))))
 (let (($x239 (= $x214 $x215)))
 (let (($x34 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x216 (=> $x34 $x239)))
 (let (($x213 (= ?x212 (_ bv0 32))))
 (let (($x226 (= $x207 $x213)))
 (let (($x218 (=> $x34 $x226)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x200)))
 (let (($x217 (= input.spec-%var-l-0.2.0 ?x190)))
 (let (($x198 (=> $x34 $x217)))
 (let (($x113 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x53 (ite $x113 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (bvuge ?x53 (_ bv1 32))))
 (let (($x182 (= $x34 $x184)))
 (let (($x14 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x232 (=> $x14 $x91)))
 (let (($x167 (= ?x53 (_ bv0 32))))
 (let (($x177 (= $x14 $x167)))
 (let (($x220 (and (and (and (and (and $x177 $x232) $x182) $x198) $x218) $x216)))
 (let (($x221 (= $x220 true)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x157 (concat ?x152 (concat ?x148 ?x144)))))
 (let (($x171 (= ?x160 input.dst.llvm-%val)))
 (let (($x174 (= $x171 true)))
 (let (($x112 (= $x174 true)))
 (let (($x158 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x155 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x191 (and true $x155)))
 (let (($x165 (and $x155 $x191)))
 (let (($x163 (and $x165 $x158)))
 (let (($x195 (= true $x163)))
 (let (($x102 (not $x113)))
 (let (($x173 (=> $x102 $x195)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x85 (concat ?x89 (concat ?x99 ?x50)))))
 (let (($x162 (= input.dst.llvm-%l ?x61)))
 (let (($x194 (= input.dst.llvm-%val ?x160)))
 (let (($x21 (and $x194 $x162)))
 (let (($x172 (and $x21 $x173)))
 (let ((?x132 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x132)))
 (let ((?x138 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x138)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x120 $x126)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x122 $x130)))
 (let (($x121 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x127 $x143)))
 (let (($x139 (not $x137)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x116 $x117)))
 (let (($x109 (and (not $x128) $x139)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x66 $x82)))
 (let (($x96 (not $x39)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x81 $x9)))
 (let (($x124 (and (not $x92) $x96)))
 (let (($x24 (and (and (and (and (and (and $x124 $x109) $x110) $x121) $x114) $x133) $x134)))
 (let (($x146 (and $x24 $x135)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x42 (or false (or false (and (and true (or $x63 $x47)) (or $x153 $x77))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x107 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x168 (and (and (and $x107 $x73) $x146) $x172)))
 (let (($x32 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x166 (and $x32 $x168)))
 (let (($x178 (and true $x166)))
 (let (($x179 (= $x178 true)))
 (let (($x59 (= $x179 true)))
 (let (($x169 (= $x59 true)))
 (let (($x71 (= ?x61 input.dst.llvm-%l)))
 (let (($x56 (= $x71 true)))
 (let (($x97 (= $x56 true)))
 (let (($x105 (= $x107 true)))
 (let (($x44 (= $x105 true)))
 (let (($x80 (= $x44 true)))
 (let (($x10 (= $x113 true)))
 (let (($x100 (= $x10 true)))
 (let (($x111 (= $x100 true)))
 (let (($x74 (and $x111 $x80)))
 (let (($x83 (and $x74 $x97)))
 (let (($x176 (and $x83 $x169)))
 (let (($x170 (and $x176 $x112)))
 (let (($x129 (and $x170 $x221)))
 (let (($x252 (and $x129 $x241)))
 (let (($x258 (and $x252 $x257)))
 (let (($x259 (and $x34 $x258)))
 (let (($x260 (and $x91 $x259)))
 (let (($x65 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x261 (and $x65 $x260)))
 (let (($x52 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x262 (and $x52 $x261)))
 (let (($x22 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x79 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x16 (or false (or false (and (and true (or $x43 $x79)) (or $x98 $x22))))))
 (let (($x8 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x16)))
 (let (($x25 (=> (and $x102 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x16)))
 (let (($x263 (and $x25 $x262)))
 (let (($x147 (=> $x263 $x76)))
 (not $x147)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x217)))
 (let (($x19 (= input.spec-%var-val-0 ?x233)))
 (let (($x94 (= $x19 true)))
 (let (($x28 (= $x94 true)))
 (let (($x250 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x136 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x251 (= $x136 $x250)))
 (let (($x215 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x256 (=> $x215 $x251)))
 (let (($x93 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x108 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x255 (= $x108 $x93)))
 (let (($x119 (=> $x215 $x255)))
 (let (($x247 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x248 (=> $x215 $x247)))
 (let (($x245 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x27 (= $x215 $x245)))
 (let (($x100 (= false false)))
 (let (($x210 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (=> $x210 $x100)))
 (let (($x253 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x244 (= $x210 $x253)))
 (let (($x261 (and (and (and (and (and $x244 $x237) $x27) $x248) $x119) $x256)))
 (let (($x262 (= $x261 true)))
 (let (($x241 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x252 (= $x215 $x241)))
 (let (($x231 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x235 (= $x210 $x231)))
 (let (($x228 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x51 (and (and (and $x228 $x235) $x237) $x252)))
 (let (($x131 (= $x51 true)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x225 (concat ?x206 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x212 (concat ?x209 (concat ?x203 ?x225))))
 (let (($x213 (= (_ bv0 32) ?x212)))
 (let ((?x226 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x239 (bvuge ?x226 (_ bv1 32))))
 (let (($x216 (= $x215 $x239)))
 (let (($x189 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x220 (=> $x189 $x216)))
 (let (($x218 (= ?x226 (_ bv0 32))))
 (let (($x227 (= $x210 $x218)))
 (let (($x214 (=> $x189 $x227)))
 (let (($x199 (= input.spec-%var-l-0.2.0 ?x233)))
 (let (($x207 (=> $x189 $x199)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x34 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x34 (_ bv1 32))))
 (let (($x201 (= $x189 $x181)))
 (let (($x68 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x219 (=> $x68 $x100)))
 (let (($x184 (= ?x34 (_ bv0 32))))
 (let (($x182 (= $x68 $x184)))
 (let (($x223 (and (and (and (and (and $x182 $x219) $x201) $x207) $x214) $x220)))
 (let (($x230 (= $x223 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x159 (concat ?x21 (concat ?x160 ?x141)))))
 (let (($x177 (= ?x154 input.dst.llvm-%l)))
 (let (($x91 (= $x177 true)))
 (let (($x232 (= $x91 true)))
 (let (($x166 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x195 (and true $x163)))
 (let (($x173 (and $x163 $x195)))
 (let (($x178 (and $x173 $x166)))
 (let (($x179 (= true $x178)))
 (let (($x62 (not $x18)))
 (let (($x59 (=> $x62 $x179)))
 (let (($x155 (= input.dst.llvm-%l ?x154)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x89 (concat ?x85 (concat ?x74 ?x44)))))
 (let (($x148 (= input.dst.llvm-%val ?x103)))
 (let (($x191 (and $x148 $x155)))
 (let (($x169 (and $x191 $x59)))
 (let ((?x132 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x132)))
 (let ((?x134 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x134)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x114)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x130 $x185)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x126 $x115)))
 (let (($x123 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x142 $x140)))
 (let (($x149 (not $x110)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x137 $x139)))
 (let (($x161 (and (not $x109) $x149)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x116 $x117)))
 (let (($x125 (not $x128)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x33 $x153)))
 (let (($x143 (and (not $x124) $x125)))
 (let (($x152 (and (and (and (and (and (and $x143 $x161) $x122) $x123) $x133) $x138) $x24)))
 (let (($x145 (and $x152 $x135)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x82 (or false (or false (and (and true (or $x48 $x42)) (or $x81 $x9))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and (and (and $x56 $x96) $x145) $x169)))
 (let (($x47 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x112 (and $x47 $x174)))
 (let (($x170 (and true $x112)))
 (let (($x88 (= $x170 true)))
 (let (($x14 (= $x88 true)))
 (let (($x53 (= $x14 true)))
 (let (($x90 (= $x62 true)))
 (let (($x67 (= $x90 true)))
 (let (($x95 (= $x67 true)))
 (let (($x97 (= $x56 true)))
 (let (($x83 (= $x97 true)))
 (let (($x7 (= $x83 true)))
 (let (($x50 (= ?x103 input.dst.llvm-%val)))
 (let (($x78 (= $x50 true)))
 (let (($x104 (= $x78 true)))
 (let (($x32 (and $x104 $x7)))
 (let (($x17 (and $x32 $x95)))
 (let (($x167 (and $x17 $x53)))
 (let (($x58 (and $x167 $x232)))
 (let (($x234 (and $x58 $x230)))
 (let (($x242 (and $x234 $x131)))
 (let (($x263 (and $x242 $x262)))
 (let (($x36 (and $x68 $x263)))
 (let (($x6 (and $x100 $x36)))
 (let (($x10 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x76 (and $x10 $x6)))
 (let (($x35 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x147 (and $x35 $x76)))
 (let (($x41 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x60 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x25 (or false (or false (and (and true (or $x15 $x60)) (or $x106 $x41))))))
 (let (($x5 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x46 (=> (and $x62 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x264 (and $x46 $x147)))
 (let (($x31 (=> $x264 $x28)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x217)))
 (let (($x19 (= input.spec-%var-val-0 ?x233)))
 (let (($x94 (= $x19 true)))
 (let (($x28 (= $x94 true)))
 (let (($x250 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x136 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x251 (= $x136 $x250)))
 (let (($x215 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x256 (=> $x215 $x251)))
 (let (($x93 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x108 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x255 (= $x108 $x93)))
 (let (($x119 (=> $x215 $x255)))
 (let (($x247 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x248 (=> $x215 $x247)))
 (let (($x245 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x27 (= $x215 $x245)))
 (let (($x100 (= false false)))
 (let (($x210 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x237 (=> $x210 $x100)))
 (let (($x253 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x244 (= $x210 $x253)))
 (let (($x261 (and (and (and (and (and $x244 $x237) $x27) $x248) $x119) $x256)))
 (let (($x262 (= $x261 true)))
 (let (($x241 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x252 (= $x215 $x241)))
 (let (($x231 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x235 (= $x210 $x231)))
 (let (($x228 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x51 (and (and (and $x228 $x235) $x237) $x252)))
 (let (($x131 (= $x51 true)))
 (let ((?x206 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x225 (concat ?x206 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x212 (concat ?x209 (concat ?x203 ?x225))))
 (let (($x213 (= (_ bv0 32) ?x212)))
 (let ((?x226 (ite $x213 (_ bv0 32) (_ bv1 32))))
 (let (($x239 (bvuge ?x226 (_ bv1 32))))
 (let (($x216 (= $x215 $x239)))
 (let (($x189 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x220 (=> $x189 $x216)))
 (let (($x218 (= ?x226 (_ bv0 32))))
 (let (($x227 (= $x210 $x218)))
 (let (($x214 (=> $x189 $x227)))
 (let (($x199 (= input.spec-%var-l-0.2.0 ?x233)))
 (let (($x207 (=> $x189 $x199)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x34 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x181 (bvuge ?x34 (_ bv1 32))))
 (let (($x201 (= $x189 $x181)))
 (let (($x68 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x219 (=> $x68 $x100)))
 (let (($x184 (= ?x34 (_ bv0 32))))
 (let (($x182 (= $x68 $x184)))
 (let (($x223 (and (and (and (and (and $x182 $x219) $x201) $x207) $x214) $x220)))
 (let (($x230 (= $x223 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x159 (concat ?x21 (concat ?x160 ?x141)))))
 (let (($x177 (= ?x154 input.dst.llvm-%l)))
 (let (($x91 (= $x177 true)))
 (let (($x232 (= $x91 true)))
 (let (($x166 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x163 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x195 (and true $x163)))
 (let (($x173 (and $x163 $x195)))
 (let (($x178 (and $x173 $x166)))
 (let (($x179 (= true $x178)))
 (let (($x62 (not $x18)))
 (let (($x59 (=> $x62 $x179)))
 (let (($x155 (= input.dst.llvm-%l ?x154)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x89 (concat ?x85 (concat ?x74 ?x44)))))
 (let (($x148 (= input.dst.llvm-%val ?x103)))
 (let (($x191 (and $x148 $x155)))
 (let (($x169 (and $x191 $x59)))
 (let ((?x132 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x132)))
 (let ((?x134 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x134)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x114)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x130 $x185)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x133 (and $x126 $x115)))
 (let (($x123 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x142 $x140)))
 (let (($x149 (not $x110)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x137 $x139)))
 (let (($x161 (and (not $x109) $x149)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x116 $x117)))
 (let (($x125 (not $x128)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x33 $x153)))
 (let (($x143 (and (not $x124) $x125)))
 (let (($x152 (and (and (and (and (and (and $x143 $x161) $x122) $x123) $x133) $x138) $x24)))
 (let (($x145 (and $x152 $x135)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x82 (or false (or false (and (and true (or $x48 $x42)) (or $x81 $x9))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x56 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and (and (and $x56 $x96) $x145) $x169)))
 (let (($x47 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x112 (and $x47 $x174)))
 (let (($x170 (and true $x112)))
 (let (($x88 (= $x170 true)))
 (let (($x14 (= $x88 true)))
 (let (($x53 (= $x14 true)))
 (let (($x90 (= $x62 true)))
 (let (($x67 (= $x90 true)))
 (let (($x95 (= $x67 true)))
 (let (($x97 (= $x56 true)))
 (let (($x83 (= $x97 true)))
 (let (($x7 (= $x83 true)))
 (let (($x50 (= ?x103 input.dst.llvm-%val)))
 (let (($x78 (= $x50 true)))
 (let (($x104 (= $x78 true)))
 (let (($x32 (and $x104 $x7)))
 (let (($x17 (and $x32 $x95)))
 (let (($x167 (and $x17 $x53)))
 (let (($x58 (and $x167 $x232)))
 (let (($x234 (and $x58 $x230)))
 (let (($x242 (and $x234 $x131)))
 (let (($x263 (and $x242 $x262)))
 (let (($x36 (and $x68 $x263)))
 (let (($x6 (and $x100 $x36)))
 (let (($x10 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x76 (and $x10 $x6)))
 (let (($x35 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x147 (and $x35 $x76)))
 (let (($x41 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x60 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x25 (or false (or false (and (and true (or $x15 $x60)) (or $x106 $x41))))))
 (let (($x5 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x25)))
 (let (($x46 (=> (and $x62 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x25)))
 (let (($x264 (and $x46 $x147)))
 (let (($x31 (=> $x264 $x28)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x38 (= $x42 true)))
 (let (($x102 (= $x38 true)))
 (let (($x251 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x250 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x256 (= $x250 $x251)))
 (let (($x239 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x261 (=> $x239 $x256)))
 (let (($x119 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x260 (= $x93 $x119)))
 (let (($x136 (=> $x239 $x260)))
 (let (($x249 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x108 (=> $x239 $x249)))
 (let (($x254 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x247 (= $x239 $x254)))
 (let (($x55 (= false false)))
 (let (($x209 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x209 $x55)))
 (let (($x258 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x246 (= $x209 $x258)))
 (let (($x76 (and (and (and (and (and $x246 $x51) $x247) $x108) $x136) $x261)))
 (let (($x147 (= $x76 true)))
 (let (($x131 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x242 (= $x239 $x131)))
 (let (($x241 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x252 (= $x209 $x241)))
 (let (($x237 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x244 (and (and (and $x237 $x252) $x51) $x242)))
 (let (($x257 (= $x244 true)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x206 (concat ?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x226 (concat ?x213 (concat ?x225 ?x206))))
 (let (($x218 (= (_ bv0 32) ?x226)))
 (let ((?x227 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge ?x227 (_ bv1 32))))
 (let (($x220 (= $x239 $x216)))
 (let (($x198 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x223 (=> $x198 $x220)))
 (let (($x214 (= ?x227 (_ bv0 32))))
 (let (($x229 (= $x209 $x214)))
 (let (($x215 (=> $x198 $x229)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x199)))
 (let (($x208 (= input.spec-%var-l-0.2.0 ?x222)))
 (let (($x210 (=> $x198 $x208)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x189 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x189 (_ bv1 32))))
 (let (($x190 (= $x198 $x200)))
 (let (($x45 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x129 (=> $x45 $x55)))
 (let (($x181 (= ?x189 (_ bv0 32))))
 (let (($x201 (= $x45 $x181)))
 (let (($x236 (and (and (and (and (and $x201 $x129) $x190) $x210) $x215) $x223)))
 (let (($x231 (= $x236 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x165 (concat ?x155 (concat ?x194 ?x160)))))
 (let (($x182 (= ?x164 input.dst.llvm-%val)))
 (let (($x100 (= $x182 true)))
 (let (($x219 (= $x100 true)))
 (let (($x112 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x179 (and true $x178)))
 (let (($x59 (and $x178 $x179)))
 (let (($x170 (and $x59 $x112)))
 (let (($x88 (= true $x170)))
 (let (($x62 (not $x18)))
 (let (($x14 (=> $x62 $x88)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x17 (concat ?x90 (concat ?x97 ?x71)))))
 (let (($x163 (= input.dst.llvm-%l ?x63)))
 (let (($x158 (= input.dst.llvm-%val ?x164)))
 (let (($x195 (and $x158 $x163)))
 (let (($x53 (and $x195 $x14)))
 (let ((?x132 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x132)))
 (let ((?x24 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x24)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x115 $x157)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x185 $x151)))
 (let (($x114 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (and $x146 $x122)))
 (let (($x120 (not $x192)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x110 $x149)))
 (let (($x186 (and (not $x161) $x120)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x137 $x139)))
 (let (($x121 (not $x109)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x175 $x81)))
 (let (($x140 (and (not $x143) $x121)))
 (let (($x162 (and (and (and (and (and (and $x140 $x186) $x130) $x114) $x138) $x134) $x152)))
 (let (($x21 (and $x162 $x135)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x117 (or false (or false (and (and true (or $x66 $x82)) (or $x33 $x153))))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x117)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x91 (and (and (and $x30 $x125) $x21) $x53)))
 (let (($x232 (and $x42 $x91)))
 (let (($x58 (and true $x232)))
 (let (($x111 (= $x58 true)))
 (let (($x68 (= $x111 true)))
 (let (($x34 (= $x68 true)))
 (let (($x47 (= ?x63 input.dst.llvm-%l)))
 (let (($x77 (= $x47 true)))
 (let (($x64 (= $x77 true)))
 (let (($x84 (= $x30 true)))
 (let (($x103 (= $x84 true)))
 (let (($x99 (= $x103 true)))
 (let (($x12 (= $x18 true)))
 (let (($x85 (= $x12 true)))
 (let (($x80 (= $x85 true)))
 (let (($x50 (and $x80 $x99)))
 (let (($x39 (and $x50 $x64)))
 (let (($x184 (and $x39 $x34)))
 (let (($x221 (and $x184 $x219)))
 (let (($x235 (and $x221 $x231)))
 (let (($x245 (and $x235 $x257)))
 (let (($x264 (and $x245 $x147)))
 (let (($x19 (and $x45 $x264)))
 (let (($x94 (and $x55 $x19)))
 (let (($x105 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x28 (and $x105 $x94)))
 (let (($x10 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x31 (and $x10 $x28)))
 (let (($x8 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x101 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x26 (or false (or false (and (and true (or $x98 $x101)) (or $x16 $x8))))))
 (let (($x35 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x69 (=> (and $x62 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x49 (and $x69 $x31)))
 (let (($x23 (=> $x49 $x102)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x42 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x38 (= $x42 true)))
 (let (($x102 (= $x38 true)))
 (let (($x251 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x250 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x256 (= $x250 $x251)))
 (let (($x239 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x261 (=> $x239 $x256)))
 (let (($x119 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x93 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x260 (= $x93 $x119)))
 (let (($x136 (=> $x239 $x260)))
 (let (($x249 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x108 (=> $x239 $x249)))
 (let (($x254 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x247 (= $x239 $x254)))
 (let (($x55 (= false false)))
 (let (($x209 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x51 (=> $x209 $x55)))
 (let (($x258 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x246 (= $x209 $x258)))
 (let (($x76 (and (and (and (and (and $x246 $x51) $x247) $x108) $x136) $x261)))
 (let (($x147 (= $x76 true)))
 (let (($x131 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x242 (= $x239 $x131)))
 (let (($x241 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x252 (= $x209 $x241)))
 (let (($x237 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x244 (and (and (and $x237 $x252) $x51) $x242)))
 (let (($x257 (= $x244 true)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x206 (concat ?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x226 (concat ?x213 (concat ?x225 ?x206))))
 (let (($x218 (= (_ bv0 32) ?x226)))
 (let ((?x227 (ite $x218 (_ bv0 32) (_ bv1 32))))
 (let (($x216 (bvuge ?x227 (_ bv1 32))))
 (let (($x220 (= $x239 $x216)))
 (let (($x198 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x223 (=> $x198 $x220)))
 (let (($x214 (= ?x227 (_ bv0 32))))
 (let (($x229 (= $x209 $x214)))
 (let (($x215 (=> $x198 $x229)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x199)))
 (let (($x208 (= input.spec-%var-l-0.2.0 ?x222)))
 (let (($x210 (=> $x198 $x208)))
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let ((?x189 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x200 (bvuge ?x189 (_ bv1 32))))
 (let (($x190 (= $x198 $x200)))
 (let (($x45 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x129 (=> $x45 $x55)))
 (let (($x181 (= ?x189 (_ bv0 32))))
 (let (($x201 (= $x45 $x181)))
 (let (($x236 (and (and (and (and (and $x201 $x129) $x190) $x210) $x215) $x223)))
 (let (($x231 (= $x236 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x165 (concat ?x155 (concat ?x194 ?x160)))))
 (let (($x182 (= ?x164 input.dst.llvm-%val)))
 (let (($x100 (= $x182 true)))
 (let (($x219 (= $x100 true)))
 (let (($x112 (= (bvand input.dst.llvm-%l (_ bv4294967292 32)) input.dst.llvm-%l)))
 (let (($x178 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))) (bvult input.dst.llvm-%l (bvsub input.dst.llvm-%l (_ bv0 32))))))
 (let (($x179 (and true $x178)))
 (let (($x59 (and $x178 $x179)))
 (let (($x170 (and $x59 $x112)))
 (let (($x88 (= true $x170)))
 (let (($x62 (not $x18)))
 (let (($x14 (=> $x62 $x88)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x17 (concat ?x90 (concat ?x97 ?x71)))))
 (let (($x163 (= input.dst.llvm-%l ?x63)))
 (let (($x158 (= input.dst.llvm-%val ?x164)))
 (let (($x195 (and $x158 $x163)))
 (let (($x53 (and $x195 $x14)))
 (let ((?x132 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x132)))
 (let ((?x24 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x24)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x115 $x157)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x185 $x151)))
 (let (($x114 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (and $x146 $x122)))
 (let (($x120 (not $x192)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x110 $x149)))
 (let (($x186 (and (not $x161) $x120)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x137 $x139)))
 (let (($x121 (not $x109)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x175 $x81)))
 (let (($x140 (and (not $x143) $x121)))
 (let (($x162 (and (and (and (and (and (and $x140 $x186) $x130) $x114) $x138) $x134) $x152)))
 (let (($x21 (and $x162 $x135)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x117 (or false (or false (and (and true (or $x66 $x82)) (or $x33 $x153))))))
 (let (($x125 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x117)))
 (let (($x30 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x91 (and (and (and $x30 $x125) $x21) $x53)))
 (let (($x232 (and $x42 $x91)))
 (let (($x58 (and true $x232)))
 (let (($x111 (= $x58 true)))
 (let (($x68 (= $x111 true)))
 (let (($x34 (= $x68 true)))
 (let (($x47 (= ?x63 input.dst.llvm-%l)))
 (let (($x77 (= $x47 true)))
 (let (($x64 (= $x77 true)))
 (let (($x84 (= $x30 true)))
 (let (($x103 (= $x84 true)))
 (let (($x99 (= $x103 true)))
 (let (($x12 (= $x18 true)))
 (let (($x85 (= $x12 true)))
 (let (($x80 (= $x85 true)))
 (let (($x50 (and $x80 $x99)))
 (let (($x39 (and $x50 $x64)))
 (let (($x184 (and $x39 $x34)))
 (let (($x221 (and $x184 $x219)))
 (let (($x235 (and $x221 $x231)))
 (let (($x245 (and $x235 $x257)))
 (let (($x264 (and $x245 $x147)))
 (let (($x19 (and $x45 $x264)))
 (let (($x94 (and $x55 $x19)))
 (let (($x105 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x28 (and $x105 $x94)))
 (let (($x10 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x31 (and $x10 $x28)))
 (let (($x8 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x101 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x26 (or false (or false (and (and true (or $x98 $x101)) (or $x16 $x8))))))
 (let (($x35 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x69 (=> (and $x62 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x49 (and $x69 $x31)))
 (let (($x23 (=> $x49 $x102)))
 (not $x23))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x62 (not $x18)))
 (let (($x248 (or $x18 $x62)))
 (let (($x259 (= $x248 true)))
 (let (($x249 (= $x259 true)))
 (let (($x51 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x243 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x253 (= $x243 $x51)))
 (let (($x183 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x131 (=> $x183 $x253)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x238 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x241 (= $x238 $x70)))
 (let (($x252 (=> $x183 $x241)))
 (let (($x236 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x231 (=> $x183 $x236)))
 (let (($x239 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x216 (= $x183 $x239)))
 (let (($x80 (= false false)))
 (let (($x221 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x202 (=> $x221 $x80)))
 (let (($x215 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x228 (= $x221 $x215)))
 (let (($x27 (and (and (and (and (and $x228 $x202) $x216) $x231) $x252) $x131)))
 (let (($x258 (= $x27 true)))
 (let (($x211 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x206 (= $x183 $x211)))
 (let (($x225 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x203 (= $x221 $x225)))
 (let (($x213 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x218 (and (and (and $x213 $x203) $x202) $x206)))
 (let (($x227 (= $x218 true)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x200 (concat ?x198 (concat ?x55 ?x181))))
 (let (($x190 (= (_ bv0 32) ?x200)))
 (let ((?x234 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x234 (_ bv1 32))))
 (let (($x196 (= $x183 $x188)))
 (let (($x112 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x180 (=> $x112 $x196)))
 (let (($x207 (= ?x234 (_ bv0 32))))
 (let (($x217 (= $x221 $x207)))
 (let (($x233 (=> $x112 $x217)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x232)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x68)))
 (let (($x182 (= input.spec-%var-l-0.2.0 ?x184)))
 (let (($x100 (=> $x112 $x182)))
 (let ((?x179 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x179 (_ bv1 32))))
 (let (($x88 (= $x112 $x170)))
 (let (($x178 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x174 (=> $x178 $x80)))
 (let (($x59 (= ?x179 (_ bv0 32))))
 (let (($x169 (= $x178 $x59)))
 (let (($x240 (and (and (and (and (and $x169 $x174) $x88) $x100) $x233) $x180)))
 (let (($x224 (= $x240 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x158 (concat ?x197 (concat ?x141 ?x154)))))
 (let (($x195 (= ?x163 input.dst.llvm-%l)))
 (let (($x172 (= $x195 true)))
 (let (($x173 (= $x172 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x162 (concat ?x159 (concat ?x138 ?x157)))))
 (let (($x135 (= ?x132 input.dst.llvm-%val)))
 (let (($x21 (= $x135 true)))
 (let (($x177 (= $x21 true)))
 (let ((?x161 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x161)))
 (let ((?x110 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x110)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x143 $x137)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x81 $x139)))
 (let (($x175 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x176 $x33)))
 (let (($x124 (not $x153)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x66 $x82)))
 (let (($x116 (and (not $x96) $x124)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x48 $x42)))
 (let (($x92 (not $x9)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x78 $x61)))
 (let (($x118 (and (not $x87) $x92)))
 (let (($x145 (and (and (and (and (and (and $x118 $x116) $x125) $x175) $x109) $x140) $x149)))
 (let (($x126 (and $x145 $x123)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x77 (or false (or false (and (and true (or $x32 $x90)) (or $x71 $x83))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x130 (and $x39 $x126)))
 (let (($x171 (= $x130 true)))
 (let (($x114 (= $x171 true)))
 (let (($x148 (= $x114 true)))
 (let (($x30 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x84 (= $x30 true)))
 (let (($x103 (= $x84 true)))
 (let (($x99 (= $x103 true)))
 (let (($x185 (and $x99 $x148)))
 (let (($x187 (and $x185 $x177)))
 (let (($x168 (and $x187 $x173)))
 (let (($x209 (and $x168 $x224)))
 (let (($x214 (and $x209 $x227)))
 (let (($x246 (and $x214 $x258)))
 (let (($x262 (and $x80 $x246)))
 (let (($x85 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x254 (and $x85 $x262)))
 (let (($x105 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x247 (and $x105 $x254)))
 (let (($x46 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x41 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x11 (or false (or false (and (and true (or $x22 $x41)) (or $x5 $x46))))))
 (let (($x10 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x79 (=> (and $x62 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x263 (and $x79 $x247)))
 (let (($x108 (=> $x263 $x249)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node_next-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-node-0.L2%9%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.2.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%val () (_ BitVec 32))
(declare-fun input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-val-0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-node_val-0.L2%9%bbentry () (_ BitVec 32))
(assert
 (let (($x18 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x62 (not $x18)))
 (let (($x248 (or $x18 $x62)))
 (let (($x259 (= $x248 true)))
 (let (($x249 (= $x259 true)))
 (let (($x51 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv1 32))))
 (let (($x243 (bvuge input.spec-%var-l-0.2.1.2.1.0 (_ bv1 32))))
 (let (($x253 (= $x243 $x51)))
 (let (($x183 (bvuge input.spec-%var-l-0.2.1.0 (_ bv1 32))))
 (let (($x131 (=> $x183 $x253)))
 (let (($x70 (= input.spec-%var-node_next-0.L2%9%bbentry.2.1.0 (_ bv0 32))))
 (let (($x238 (= input.spec-%var-l-0.2.1.2.1.0 (_ bv0 32))))
 (let (($x241 (= $x238 $x70)))
 (let (($x252 (=> $x183 $x241)))
 (let (($x236 (= input.spec-%var-l-0.2.1.2.0 input.spec-%var-node_next-0.L2%9%bbentry.2.0)))
 (let (($x231 (=> $x183 $x236)))
 (let (($x239 (bvuge input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv1 32))))
 (let (($x216 (= $x183 $x239)))
 (let (($x80 (= false false)))
 (let (($x221 (= input.spec-%var-l-0.2.1.0 (_ bv0 32))))
 (let (($x202 (=> $x221 $x80)))
 (let (($x215 (= input.spec-%var-node_next-0.L2%9%bbentry.0 (_ bv0 32))))
 (let (($x228 (= $x221 $x215)))
 (let (($x27 (and (and (and (and (and $x228 $x202) $x216) $x231) $x252) $x131)))
 (let (($x258 (= $x27 true)))
 (let (($x211 (bvuge input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv1 32))))
 (let (($x206 (= $x183 $x211)))
 (let (($x225 (= input.spec-%var-node-0.L2%9%bbentry.1.0 (_ bv0 32))))
 (let (($x203 (= $x221 $x225)))
 (let (($x213 (= input.spec-%var-l-0.2.0 input.spec-%var-node-0.L2%9%bbentry.0)))
 (let (($x218 (and (and (and $x213 $x203) $x202) $x206)))
 (let (($x227 (= $x218 true)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x200 (concat ?x198 (concat ?x55 ?x181))))
 (let (($x190 (= (_ bv0 32) ?x200)))
 (let ((?x234 (ite $x190 (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x234 (_ bv1 32))))
 (let (($x196 (= $x183 $x188)))
 (let (($x112 (bvuge input.spec-%var-l-0.0 (_ bv1 32))))
 (let (($x180 (=> $x112 $x196)))
 (let (($x207 (= ?x234 (_ bv0 32))))
 (let (($x217 (= $x221 $x207)))
 (let (($x233 (=> $x112 $x217)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x232)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x68)))
 (let (($x182 (= input.spec-%var-l-0.2.0 ?x184)))
 (let (($x100 (=> $x112 $x182)))
 (let ((?x179 (ite $x18 (_ bv0 32) (_ bv1 32))))
 (let (($x170 (bvuge ?x179 (_ bv1 32))))
 (let (($x88 (= $x112 $x170)))
 (let (($x178 (= input.spec-%var-l-0.0 (_ bv0 32))))
 (let (($x174 (=> $x178 $x80)))
 (let (($x59 (= ?x179 (_ bv0 32))))
 (let (($x169 (= $x178 $x59)))
 (let (($x240 (and (and (and (and (and $x169 $x174) $x88) $x100) $x233) $x180)))
 (let (($x224 (= $x240 true)))
 (let ((?x154 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x158 (concat ?x197 (concat ?x141 ?x154)))))
 (let (($x195 (= ?x163 input.dst.llvm-%l)))
 (let (($x172 (= $x195 true)))
 (let (($x173 (= $x172 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___head_or__x__=L0%0%argnum1=/)))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x162 (concat ?x159 (concat ?x138 ?x157)))))
 (let (($x135 (= ?x132 input.dst.llvm-%val)))
 (let (($x21 (= $x135 true)))
 (let (($x177 (= $x21 true)))
 (let ((?x161 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x161)))
 (let ((?x110 (bvand input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x110)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x143 $x137)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x81 $x139)))
 (let (($x175 (= input.dst.local./*___y___head_or__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___head_or__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x176 $x33)))
 (let (($x124 (not $x153)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x66 $x82)))
 (let (($x116 (and (not $x96) $x124)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x48 $x42)))
 (let (($x92 (not $x9)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x78 $x61)))
 (let (($x118 (and (not $x87) $x92)))
 (let (($x145 (and (and (and (and (and (and $x118 $x116) $x125) $x175) $x109) $x140) $x149)))
 (let (($x126 (and $x145 $x123)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x77 (or false (or false (and (and true (or $x32 $x90)) (or $x71 $x83))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x130 (and $x39 $x126)))
 (let (($x171 (= $x130 true)))
 (let (($x114 (= $x171 true)))
 (let (($x148 (= $x114 true)))
 (let (($x30 (= input.spec-%var-val-0 input.dst.llvm-%val)))
 (let (($x84 (= $x30 true)))
 (let (($x103 (= $x84 true)))
 (let (($x99 (= $x103 true)))
 (let (($x185 (and $x99 $x148)))
 (let (($x187 (and $x185 $x177)))
 (let (($x168 (and $x187 $x173)))
 (let (($x209 (and $x168 $x224)))
 (let (($x214 (and $x209 $x227)))
 (let (($x246 (and $x214 $x258)))
 (let (($x262 (and $x80 $x246)))
 (let (($x85 (= input.spec-%var-l-0.2.0 input.spec-%tmpvar-0.L2%9%bbentry)))
 (let (($x254 (and $x85 $x262)))
 (let (($x105 (= input.spec-%var-l-0.2.0 input.spec-%var-node_val-0.L2%9%bbentry)))
 (let (($x247 (and $x105 $x254)))
 (let (($x46 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd input.dst.llvm-%l (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x41 (bvugt input.dst.llvm-%l input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___head_or__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x11 (or false (or false (and (and true (or $x22 $x41)) (or $x5 $x46))))))
 (let (($x10 (=> (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x79 (=> (and $x62 (bvule input.dst.llvm-%l (bvsub (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x263 (and $x79 $x247)))
 (let (($x108 (=> $x263 $x249)))
 (not $x108))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676107/query
