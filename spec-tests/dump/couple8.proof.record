==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x215 (= true false)))
 (let (($x216 (= $x215 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x207 (concat ?x206 (concat ?x203 (concat ?x200 ?x198)))))
 (let (($x208 (= ?x207 input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x192 (concat ?x189 (concat ?x186 ?x184)))))
 (let (($x194 (= ?x193 input.dst.llvm-%x)))
 (let (($x195 (= $x194 true)))
 (let (($x178 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x169))))
 (let ((?x53 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (=> $x33 (= ?x53 ?x175))))))))))
 ))
 (let (($x143 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x134 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (= $x33 (bvuge ?x134 (_ bv1 32))))))))
 ))
 (let (($x68 (forall ((Lambda1 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x85 (_ bv0 32))))
 (=> $x5 $x19))))))
 ))
 (let (($x137 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x134 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x85 (_ bv0 32))))
 (= $x5 (= ?x134 (_ bv0 32))))))))
 ))
 (let (($x138 (and $x137 $x68)))
 (let (($x144 (and $x138 $x143)))
 (let (($x179 (and $x144 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x181 (= $x180 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x102 $x105)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x101 $x106)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x91 $x92)))
 (let (($x94 (not $x93)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x58 $x57)))
 (let (($x96 (and (not $x59) $x94)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x39 $x79)))
 (let (($x87 (not $x86)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x75 $x83)))
 (let (($x90 (and (not $x62) $x87)))
 (let (($x119 (and (and (and (and (and (and $x90 $x96) $x98) $x100) $x107) $x109) $x111)))
 (let (($x120 (and $x119 $x113)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x72 (or false (or false (and (and true (or $x70 $x73)) (or $x74 $x17))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x121 (and $x50 $x120)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x182 (and $x123 $x181)))
 (let (($x196 (and $x182 $x195)))
 (let (($x210 (and $x196 $x209)))
 (let (($x47 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x41 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x53 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (=> $x33 (= ?x53 ?x41))))))))
 ))
 (let (($x82 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (= $x33 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x8 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x85 (_ bv0 32))))
 (= $x5 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x81 (and $x8 $x68)))
 (let (($x84 (and $x81 $x82)))
 (let (($x49 (and $x84 $x47)))
 (let (($x211 (and $x49 $x210)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x212 (and $x43 $x211)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x213 (and $x34 $x212)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x214 (and $x6 $x213)))
 (let (($x217 (=> $x214 $x216)))
 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x215 (= true false)))
 (let (($x216 (= $x215 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x207 (concat ?x206 (concat ?x203 (concat ?x200 ?x198)))))
 (let (($x208 (= ?x207 input.dst.llvm-%n)))
 (let (($x209 (= $x208 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x193 (concat ?x192 (concat ?x189 (concat ?x186 ?x184)))))
 (let (($x194 (= ?x193 input.dst.llvm-%x)))
 (let (($x195 (= $x194 true)))
 (let (($x178 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x169))))
 (let ((?x53 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (=> $x33 (= ?x53 ?x175))))))))))
 ))
 (let (($x143 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x134 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (= $x33 (bvuge ?x134 (_ bv1 32))))))))
 ))
 (let (($x68 (forall ((Lambda1 (_ BitVec 32)) )(let (($x19 (= false false)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x85 (_ bv0 32))))
 (=> $x5 $x19))))))
 ))
 (let (($x137 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x134 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x85 (_ bv0 32))))
 (= $x5 (= ?x134 (_ bv0 32))))))))
 ))
 (let (($x138 (and $x137 $x68)))
 (let (($x144 (and $x138 $x143)))
 (let (($x179 (and $x144 $x178)))
 (let (($x180 (= $x179 true)))
 (let (($x181 (= $x180 true)))
 (let ((?x112 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x112)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x110)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (and $x102 $x105)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x101 $x106)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x91 $x92)))
 (let (($x94 (not $x93)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x58 $x57)))
 (let (($x96 (and (not $x59) $x94)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x39 $x79)))
 (let (($x87 (not $x86)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x75 $x83)))
 (let (($x90 (and (not $x62) $x87)))
 (let (($x119 (and (and (and (and (and (and $x90 $x96) $x98) $x100) $x107) $x109) $x111)))
 (let (($x120 (and $x119 $x113)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x72 (or false (or false (and (and true (or $x70 $x73)) (or $x74 $x17))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x72)))
 (let (($x121 (and $x50 $x120)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x182 (and $x123 $x181)))
 (let (($x196 (and $x182 $x195)))
 (let (($x210 (and $x196 $x209)))
 (let (($x47 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x41 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x53 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (=> $x33 (= ?x53 ?x41))))))))
 ))
 (let (($x82 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x85 (_ bv1 32))))
 (= $x33 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x8 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x85 (_ bv0 32))))
 (= $x5 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x81 (and $x8 $x68)))
 (let (($x84 (and $x81 $x82)))
 (let (($x49 (and $x84 $x47)))
 (let (($x211 (and $x49 $x210)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x212 (and $x43 $x211)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x213 (and $x34 $x212)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x214 (and $x6 $x213)))
 (let (($x217 (=> $x214 $x216)))
 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x02201240)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000884)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x02201243)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000887)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x02201240)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000884)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x02201243)
                                   (k!0 #x02201242)
                                   (k!0 #x02201241)
                                   (k!0 #x02201240)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x02201243)
                                   (k!0 #x02201242)
                                   (k!0 #x02201241)
                                   (k!0 #x02201240)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x02201243)
                                   (k!0 #x02201242)
                                   (k!0 #x02201241)
                                   (k!0 #x02201240)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x02201243)
                                   (k!0 #x02201242)
                                   (k!0 #x02201241)
                                   (k!0 #x02201240))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf7f21728)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd29b1c3c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd29b1c3f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf7f2172b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd29b1c3c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf7f21728)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd29b1c3f)
                                   (k!0 #xd29b1c3e)
                                   (k!0 #xd29b1c3d)
                                   (k!0 #xd29b1c3c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd29b1c3f)
                                   (k!0 #xd29b1c3e)
                                   (k!0 #xd29b1c3d)
                                   (k!0 #xd29b1c3c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd29b1c3f)
                                   (k!0 #xd29b1c3e)
                                   (k!0 #xd29b1c3d)
                                   (k!0 #xd29b1c3c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xd29b1c3f)
                                   (k!0 #xd29b1c3e)
                                   (k!0 #xd29b1c3d)
                                   (k!0 #xd29b1c3c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x215)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x204 $x208)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x201 $x209)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x194 $x195)))
 (let (($x205 (not $x196)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x187 $x190)))
 (let (($x202 (and (not $x193) $x205)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x192 $x188)))
 (let (($x185 (not $x189)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x181 $x182)))
 (let (($x184 (and (not $x191) $x185)))
 (let (($x197 (and (and (and (and (and (and $x184 $x202) $x199) $x198) $x210) $x212) $x214)))
 (let (($x183 (and $x197 $x216)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x104 (or false (or false (and (and true (or $x82 $x97)) (or $x59 $x98))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x139 (and $x79 $x183)))
 (let (($x140 (= $x139 true)))
 (let (($x162 (= $x140 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x15 (concat ?x38 (concat ?x9 ?x7)))))
 (let (($x46 (= input.dst.llvm-%n ?x67)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x30 (concat ?x154 (concat ?x152 ?x156)))))
 (let (($x35 (= input.dst.llvm-%x ?x55)))
 (let (($x69 (and $x35 $x46)))
 (let (($x159 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and $x159 $x69)))
 (let (($x179 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x167))))
 (let ((?x62 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (=> $x32 (= ?x62 ?x176))))))))))
 ))
 (let (($x116 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (= $x32 (bvuge ?x13 (_ bv1 32))))))))
 ))
 (let (($x8 (forall ((Lambda1 (_ BitVec 32)) )(let (($x84 (= false false)))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x108 (_ bv0 32))))
 (=> $x64 $x84))))))
 ))
 (let (($x113 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x108 (_ bv0 32))))
 (= $x64 (= ?x13 (_ bv0 32))))))))
 ))
 (let (($x87 (and $x113 $x8)))
 (let (($x105 (and $x87 $x116)))
 (let (($x180 (and $x105 $x179)))
 (let (($x16 (and (and (and $x79 $x180) $x183) $x89)))
 (let (($x124 (= $x16 true)))
 (let (($x126 (= $x124 true)))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x102 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x62 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (=> $x32 (= ?x62 ?x102))))))))
 ))
 (let (($x75 (forall ((Lambda1 (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (= $x32 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x123 (forall ((Lambda1 (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x108 (_ bv0 32))))
 (= $x64 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x45 (and $x123 $x8)))
 (let (($x83 (and $x45 $x75)))
 (let (($x80 (and $x83 $x71)))
 (let (($x127 (and $x80 $x126)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x128 (and $x36 $x127)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x129 (and $x22 $x128)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x130 (and $x43 $x129)))
 (let (($x163 (=> $x130 $x162)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x215)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x213)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x207 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x207)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x204 $x208)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x201 $x209)))
 (let (($x198 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x194 $x195)))
 (let (($x205 (not $x196)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x187 $x190)))
 (let (($x202 (and (not $x193) $x205)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x192 $x188)))
 (let (($x185 (not $x189)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x181 $x182)))
 (let (($x184 (and (not $x191) $x185)))
 (let (($x197 (and (and (and (and (and (and $x184 $x202) $x199) $x198) $x210) $x212) $x214)))
 (let (($x183 (and $x197 $x216)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x104 (or false (or false (and (and true (or $x82 $x97)) (or $x59 $x98))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x104)))
 (let (($x139 (and $x79 $x183)))
 (let (($x140 (= $x139 true)))
 (let (($x162 (= $x140 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x15 (concat ?x38 (concat ?x9 ?x7)))))
 (let (($x46 (= input.dst.llvm-%n ?x67)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x30 (concat ?x154 (concat ?x152 ?x156)))))
 (let (($x35 (= input.dst.llvm-%x ?x55)))
 (let (($x69 (and $x35 $x46)))
 (let (($x159 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and $x159 $x69)))
 (let (($x179 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x167))))
 (let ((?x62 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (=> $x32 (= ?x62 ?x176))))))))))
 ))
 (let (($x116 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (= $x32 (bvuge ?x13 (_ bv1 32))))))))
 ))
 (let (($x8 (forall ((Lambda1 (_ BitVec 32)) )(let (($x84 (= false false)))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x108 (_ bv0 32))))
 (=> $x64 $x84))))))
 ))
 (let (($x113 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x13 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x108 (_ bv0 32))))
 (= $x64 (= ?x13 (_ bv0 32))))))))
 ))
 (let (($x87 (and $x113 $x8)))
 (let (($x105 (and $x87 $x116)))
 (let (($x180 (and $x105 $x179)))
 (let (($x16 (and (and (and $x79 $x180) $x183) $x89)))
 (let (($x124 (= $x16 true)))
 (let (($x126 (= $x124 true)))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x102 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x62 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (=> $x32 (= ?x62 ?x102))))))))
 ))
 (let (($x75 (forall ((Lambda1 (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x32 (bvuge ?x108 (_ bv1 32))))
 (= $x32 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x123 (forall ((Lambda1 (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x108 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (= ?x108 (_ bv0 32))))
 (= $x64 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x45 (and $x123 $x8)))
 (let (($x83 (and $x45 $x75)))
 (let (($x80 (and $x83 $x71)))
 (let (($x127 (and $x80 $x126)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x128 (and $x36 $x127)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x129 (and $x22 $x128)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x130 (and $x43 $x129)))
 (let (($x163 (=> $x130 $x162)))
 (not $x163)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x118 (= $x86 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x106 (concat ?x42 (concat ?x51 ?x24)))))
 (let (($x76 (= input.dst.llvm-%n ?x31)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x164 (concat ?x134 (concat ?x142 ?x147)))))
 (let (($x11 (= input.dst.llvm-%x ?x5)))
 (let (($x68 (and $x11 $x76)))
 (let (($x133 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x18 (and $x133 $x68)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x139)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x129)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x69 $x16)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x46 $x124)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x63 $x15)))
 (let (($x38 (not $x27)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x158 $x55)))
 (let (($x9 (and (not $x35) $x38)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x151 $x154)))
 (let (($x152 (not $x157)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x159 $x161)))
 (let (($x153 (and (not $x30) $x152)))
 (let (($x77 (and (and (and (and (and (and $x153 $x9) $x23) $x67) $x126) $x128) $x130)))
 (let (($x40 (and $x77 $x140)))
 (let (($x146 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x212))))
 (let ((?x112 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (=> $x21 (= ?x112 ?x216))))))))))
 ))
 (let (($x189 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x179 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (= $x21 (bvuge ?x179 (_ bv1 32))))))))
 ))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x73 (_ bv0 32))))
 (=> $x75 $x102))))))
 ))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x179 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x73 (_ bv0 32))))
 (= $x75 (= ?x179 (_ bv0 32))))))))
 ))
 (let (($x182 (and $x181 $x71)))
 (let (($x185 (and $x182 $x189)))
 (let (($x150 (and $x185 $x146)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x138 (or false (or false (and (and true (or $x99 $x116)) (or $x131 $x174))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x103 (and (and (and $x166 $x150) $x40) $x18)))
 (let (($x109 (= $x103 true)))
 (let (($x53 (= $x109 true)))
 (let (($x79 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x91 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x112 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (=> $x21 (= ?x112 ?x91))))))))
 ))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (= $x21 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x62 (forall ((Lambda1 (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x73 (_ bv0 32))))
 (= $x75 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x80 (and $x62 $x71)))
 (let (($x97 (and $x80 $x33)))
 (let (($x120 (and $x97 $x79)))
 (let (($x117 (and $x120 $x53)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x114 (and $x36 $x117)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x72 (and $x22 $x114)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x39 (and $x43 $x72)))
 (let (($x96 (=> $x39 $x118)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x118 (= $x86 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x106 (concat ?x42 (concat ?x51 ?x24)))))
 (let (($x76 (= input.dst.llvm-%n ?x31)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x164 (concat ?x134 (concat ?x142 ?x147)))))
 (let (($x11 (= input.dst.llvm-%x ?x5)))
 (let (($x68 (and $x11 $x76)))
 (let (($x133 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x18 (and $x133 $x68)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x140 (= (_ bv0 32) ?x139)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x129)))
 (let ((?x127 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x127)))
 (let ((?x89 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x89)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x69 $x16)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x46 $x124)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x63 $x15)))
 (let (($x38 (not $x27)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x158 $x55)))
 (let (($x9 (and (not $x35) $x38)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x151 $x154)))
 (let (($x152 (not $x157)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x159 $x161)))
 (let (($x153 (and (not $x30) $x152)))
 (let (($x77 (and (and (and (and (and (and $x153 $x9) $x23) $x67) $x126) $x128) $x130)))
 (let (($x40 (and $x77 $x140)))
 (let (($x146 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x212))))
 (let ((?x112 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (=> $x21 (= ?x112 ?x216))))))))))
 ))
 (let (($x189 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x179 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (= $x21 (bvuge ?x179 (_ bv1 32))))))))
 ))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let (($x102 (= false false)))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x73 (_ bv0 32))))
 (=> $x75 $x102))))))
 ))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x179 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x73 (_ bv0 32))))
 (= $x75 (= ?x179 (_ bv0 32))))))))
 ))
 (let (($x182 (and $x181 $x71)))
 (let (($x185 (and $x182 $x189)))
 (let (($x150 (and $x185 $x146)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x138 (or false (or false (and (and true (or $x99 $x116)) (or $x131 $x174))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x103 (and (and (and $x166 $x150) $x40) $x18)))
 (let (($x109 (= $x103 true)))
 (let (($x53 (= $x109 true)))
 (let (($x79 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x91 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x112 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (=> $x21 (= ?x112 ?x91))))))))
 ))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x73 (_ bv1 32))))
 (= $x21 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x62 (forall ((Lambda1 (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x73 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x73 (_ bv0 32))))
 (= $x75 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x80 (and $x62 $x71)))
 (let (($x97 (and $x80 $x33)))
 (let (($x120 (and $x97 $x79)))
 (let (($x117 (and $x120 $x53)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x114 (and $x36 $x117)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x72 (and $x22 $x114)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x39 (and $x43 $x72)))
 (let (($x96 (=> $x39 $x118)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000048)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000004b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000048)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000004a) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000013)
                                     (k!7 #x00000012)
                                     (k!7 #x00000011)
                                     (k!7 #x00000010)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000013)
                                     (k!7 #x00000012)
                                     (k!7 #x00000011)
                                     (k!7 #x00000010)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000013)
                                     (k!7 #x00000012)
                                     (k!7 #x00000011)
                                     (k!7 #x00000010)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000013)
                                     (k!7 #x00000012)
                                     (k!7 #x00000011)
                                     (k!7 #x00000010))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010000 x!0)
         (ite (bvule #x00010001 x!0) #x00010001 #x00010000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x12f4a1fc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2af630e0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x77ef7d00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2af630e3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x12f4a1ff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2af630e0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x12f4a1fc)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2af630e2) #xef
    (ite (= x!0 #x12f4a1fe) #x01
    (ite (= x!0 #x2af630e1) #x7d
    (ite (= x!0 #x2af630e3) #x77
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x2af630e3)
                                     (k!7 #x2af630e2)
                                     (k!7 #x2af630e1)
                                     (k!7 #x2af630e0)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x2af630e3)
                                     (k!7 #x2af630e2)
                                     (k!7 #x2af630e1)
                                     (k!7 #x2af630e0)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x2af630e3)
                                     (k!7 #x2af630e2)
                                     (k!7 #x2af630e1)
                                     (k!7 #x2af630e0)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x2af630e3)
                                     (k!7 #x2af630e2)
                                     (k!7 #x2af630e1)
                                     (k!7 #x2af630e0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010000 x!0)
         (ite (bvule #x00010001 x!0) #x00010001 #x00010000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 ((_ extract 15 0) input.dst.llvm-%n)))
 (let (($x204 (= (_ bv0 16) ?x186)))
 (let (($x207 (= $x204 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x122 (concat ?x44 (concat ?x95 ?x98)))))
 (let (($x47 (= input.dst.llvm-%n ?x60)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x88 (concat ?x202 (concat ?x196 ?x203)))))
 (let (($x37 (= input.dst.llvm-%x ?x111)))
 (let (($x121 (and $x37 $x47)))
 (let (($x198 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x115 (and $x198 $x121)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x86)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x72)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x68 $x103)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x76 $x109)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x50 $x106)))
 (let (($x42 (not $x49)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x137 $x5)))
 (let (($x51 (and (not $x11) $x42)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x136 $x134)))
 (let (($x142 (not $x141)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x133 $x143)))
 (let (($x135 (and (not $x164) $x142)))
 (let (($x34 (and (and (and (and (and (and $x135 $x51) $x54) $x31) $x53) $x114) $x39)))
 (let (($x145 (and $x34 $x118)))
 (let (($x160 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x128))))
 (let ((?x105 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (=> $x113 (= ?x105 ?x140))))))))))
 ))
 (let (($x157 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x146 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (= $x113 (bvuge ?x146 (_ bv1 32))))))))
 ))
 (let (($x104 (forall ((Lambda1 (_ BitVec 32)) )(let (($x112 (= false false)))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x81 (_ bv0 32))))
 (=> $x82 $x112))))))
 ))
 (let (($x159 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x146 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x81 (_ bv0 32))))
 (= $x82 (= ?x146 (_ bv0 32))))))))
 ))
 (let (($x161 (and $x159 $x104)))
 (let (($x152 (and $x161 $x157)))
 (let (($x93 (and $x152 $x160)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x217 (or false (or false (and (and true (or $x192 $x188)) (or $x208 $x209))))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x100 (and (and (and $x213 $x93) $x145) $x115)))
 (let (($x61 (= $x100 true)))
 (let (($x170 (= $x61 true)))
 (let (($x138 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x105 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (=> $x113 (= ?x105 ?x131))))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (= $x113 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x97 (forall ((Lambda1 (_ BitVec 32)) )(let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x81 (_ bv0 32))))
 (= $x82 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x79 (and $x97 $x104)))
 (let (($x87 (and $x79 $x99)))
 (let (($x166 (and $x87 $x138)))
 (let (($x171 (and $x166 $x170)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x155 (and $x6 $x171)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x167 (and $x43 $x155)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x169 (and $x10 $x167)))
 (let (($x165 (=> $x169 $x207)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x186 ((_ extract 15 0) input.dst.llvm-%n)))
 (let (($x204 (= (_ bv0 16) ?x186)))
 (let (($x207 (= $x204 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x122 (concat ?x44 (concat ?x95 ?x98)))))
 (let (($x47 (= input.dst.llvm-%n ?x60)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x88 (concat ?x202 (concat ?x196 ?x203)))))
 (let (($x37 (= input.dst.llvm-%x ?x111)))
 (let (($x121 (and $x37 $x47)))
 (let (($x198 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x115 (and $x198 $x121)))
 (let ((?x86 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x86)))
 (let ((?x72 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x72)))
 (let ((?x117 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x68 $x103)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x76 $x109)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x50 $x106)))
 (let (($x42 (not $x49)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x137 $x5)))
 (let (($x51 (and (not $x11) $x42)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x136 $x134)))
 (let (($x142 (not $x141)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x133 $x143)))
 (let (($x135 (and (not $x164) $x142)))
 (let (($x34 (and (and (and (and (and (and $x135 $x51) $x54) $x31) $x53) $x114) $x39)))
 (let (($x145 (and $x34 $x118)))
 (let (($x160 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x128))))
 (let ((?x105 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (=> $x113 (= ?x105 ?x140))))))))))
 ))
 (let (($x157 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x146 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (= $x113 (bvuge ?x146 (_ bv1 32))))))))
 ))
 (let (($x104 (forall ((Lambda1 (_ BitVec 32)) )(let (($x112 (= false false)))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x81 (_ bv0 32))))
 (=> $x82 $x112))))))
 ))
 (let (($x159 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x146 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x81 (_ bv0 32))))
 (= $x82 (= ?x146 (_ bv0 32))))))))
 ))
 (let (($x161 (and $x159 $x104)))
 (let (($x152 (and $x161 $x157)))
 (let (($x93 (and $x152 $x160)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x182 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x182)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x182)))
 (let (($x217 (or false (or false (and (and true (or $x192 $x188)) (or $x208 $x209))))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x100 (and (and (and $x213 $x93) $x145) $x115)))
 (let (($x61 (= $x100 true)))
 (let (($x170 (= $x61 true)))
 (let (($x138 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x105 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (=> $x113 (= ?x105 ?x131))))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x81 (_ bv1 32))))
 (= $x113 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x97 (forall ((Lambda1 (_ BitVec 32)) )(let (($x73 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x81 (ite $x73 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (= ?x81 (_ bv0 32))))
 (= $x82 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x79 (and $x97 $x104)))
 (let (($x87 (and $x79 $x99)))
 (let (($x166 (and $x87 $x138)))
 (let (($x171 (and $x166 $x170)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x155 (and $x6 $x171)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x167 (and $x43 $x155)))
 (let (($x10 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x169 (and $x10 $x167)))
 (let (($x165 (=> $x169 $x207)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002014)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002017)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002014)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000011) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002017)
                                     (k!7 #x00002016)
                                     (k!7 #x00002015)
                                     (k!7 #x00002014)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002017)
                                     (k!7 #x00002016)
                                     (k!7 #x00002015)
                                     (k!7 #x00002014)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002017)
                                     (k!7 #x00002016)
                                     (k!7 #x00002015)
                                     (k!7 #x00002014)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002017)
                                     (k!7 #x00002016)
                                     (k!7 #x00002015)
                                     (k!7 #x00002014))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00001000 x!0)
         (ite (bvule #x00001001 x!0) #x00001001 #x00001000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0f5daff4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb77afc38)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xdfdfdf20)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7f97df00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb77afc3b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0f5daff7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb77afc38)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0f5daff4)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7f97df01) #x00
    (ite (= x!0 #xb77afc3a) #x97
    (ite (= x!0 #x0f5daff4) #x20
    (ite (= x!0 #x7f97df03) #x00
    (ite (= x!0 #x7f97df02) #x00
    (ite (= x!0 #x7f97df00) #x00
    (ite (= x!0 #xb77afc3b) #x7f
    (ite (= x!0 #xb77afc38) #x00
      #xdf)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb77afc3b)
                                     (k!7 #xb77afc3a)
                                     (k!7 #xb77afc39)
                                     (k!7 #xb77afc38)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb77afc3b)
                                     (k!7 #xb77afc3a)
                                     (k!7 #xb77afc39)
                                     (k!7 #xb77afc38)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb77afc3b)
                                     (k!7 #xb77afc3a)
                                     (k!7 #xb77afc39)
                                     (k!7 #xb77afc38)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #xb77afc3b)
                                     (k!7 #xb77afc3a)
                                     (k!7 #xb77afc39)
                                     (k!7 #xb77afc38))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xdfdfdf20 x!0)
         (ite (bvule #xdfdfdf21 x!0) #xdfdfdf21 #xdfdfdf20)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x214 (= (_ bv0 8) ?x212)))
 (let (($x30 (= $x214 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x20 (concat ?x32 (concat ?x173 ?x58)))))
 (let (($x91 (= input.dst.llvm-%n ?x71)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x163 (concat ?x38 (concat ?x7 ?x67)))))
 (let (($x75 (= input.dst.llvm-%x ?x46)))
 (let (($x120 (and $x75 $x91)))
 (let (($x158 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x14 (and $x158 $x120)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x191)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x167)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x121 $x100)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x47 $x61)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x45 $x122)))
 (let (($x44 (not $x17)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x218 $x111)))
 (let (($x95 (and (not $x37) $x44)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x195 $x202)))
 (let (($x196 (not $x199)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x198 $x201)))
 (let (($x205 (and (not $x88) $x196)))
 (let (($x177 (and (and (and (and (and (and $x205 $x95) $x107) $x60) $x170) $x155) $x169)))
 (let (($x13 (and $x177 $x186)))
 (let (($x187 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x114))))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (=> $x26 (= ?x189 ?x118))))))))))
 ))
 (let (($x141 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x160 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (= $x26 (bvuge ?x160 (_ bv1 32))))))))
 ))
 (let (($x175 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (= false false)))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x168 (_ bv0 32))))
 (=> $x57 $x105))))))
 ))
 (let (($x133 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x160 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x168 (_ bv0 32))))
 (= $x57 (= ?x160 (_ bv0 32))))))))
 ))
 (let (($x143 (and $x133 $x175)))
 (let (($x142 (and $x143 $x141)))
 (let (($x194 (and $x142 $x187)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x162 (or false (or false (and (and true (or $x154 $x157)) (or $x12 $x124))))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x94 (and (and (and $x129 $x194) $x13) $x14)))
 (let (($x174 (= $x94 true)))
 (let (($x144 (= $x174 true)))
 (let (($x217 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x208 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (=> $x26 (= ?x189 ?x208))))))))
 ))
 (let (($x192 (forall ((Lambda1 (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (= $x26 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x87 (forall ((Lambda1 (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x168 (_ bv0 32))))
 (= $x57 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x138 (and $x87 $x175)))
 (let (($x181 (and $x138 $x192)))
 (let (($x213 (and $x181 $x217)))
 (let (($x176 (and $x213 $x144)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x29 $x176)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x211 (and $x22 $x66)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x210 (and $x56 $x211)))
 (let (($x156 (=> $x210 $x30)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x214 (= (_ bv0 8) ?x212)))
 (let (($x30 (= $x214 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x20 (concat ?x32 (concat ?x173 ?x58)))))
 (let (($x91 (= input.dst.llvm-%n ?x71)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x46 (concat ?x163 (concat ?x38 (concat ?x7 ?x67)))))
 (let (($x75 (= input.dst.llvm-%x ?x46)))
 (let (($x120 (and $x75 $x91)))
 (let (($x158 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x14 (and $x158 $x120)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x191)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x167)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x121 $x100)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x47 $x61)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x45 $x122)))
 (let (($x44 (not $x17)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x218 $x111)))
 (let (($x95 (and (not $x37) $x44)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x195 $x202)))
 (let (($x196 (not $x199)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x198 $x201)))
 (let (($x205 (and (not $x88) $x196)))
 (let (($x177 (and (and (and (and (and (and $x205 $x95) $x107) $x60) $x170) $x155) $x169)))
 (let (($x13 (and $x177 $x186)))
 (let (($x187 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x114))))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (=> $x26 (= ?x189 ?x118))))))))))
 ))
 (let (($x141 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x160 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (= $x26 (bvuge ?x160 (_ bv1 32))))))))
 ))
 (let (($x175 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (= false false)))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x168 (_ bv0 32))))
 (=> $x57 $x105))))))
 ))
 (let (($x133 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x160 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x168 (_ bv0 32))))
 (= $x57 (= ?x160 (_ bv0 32))))))))
 ))
 (let (($x143 (and $x133 $x175)))
 (let (($x142 (and $x143 $x141)))
 (let (($x194 (and $x142 $x187)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x162 (or false (or false (and (and true (or $x154 $x157)) (or $x12 $x124))))))
 (let (($x129 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x94 (and (and (and $x129 $x194) $x13) $x14)))
 (let (($x174 (= $x94 true)))
 (let (($x144 (= $x174 true)))
 (let (($x217 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x208 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (=> $x26 (= ?x189 ?x208))))))))
 ))
 (let (($x192 (forall ((Lambda1 (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x168 (_ bv1 32))))
 (= $x26 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x87 (forall ((Lambda1 (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x168 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (= ?x168 (_ bv0 32))))
 (= $x57 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x138 (and $x87 $x175)))
 (let (($x181 (and $x138 $x192)))
 (let (($x213 (and $x181 $x217)))
 (let (($x176 (and $x213 $x144)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x29 $x176)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x211 (and $x22 $x66)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x210 (and $x56 $x211)))
 (let (($x156 (=> $x210 $x30)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000060)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00003204)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000063)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00003207)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000060)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00003204)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000060) #x20
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000063)
                                   (k!0 #x00000062)
                                   (k!0 #x00000061)
                                   (k!0 #x00000060)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000063)
                                   (k!0 #x00000062)
                                   (k!0 #x00000061)
                                   (k!0 #x00000060)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000063)
                                   (k!0 #x00000062)
                                   (k!0 #x00000061)
                                   (k!0 #x00000060)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000063)
                                   (k!0 #x00000062)
                                   (k!0 #x00000061)
                                   (k!0 #x00000060))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd6c581d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8679e618)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00080108)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x5fffdf08)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8679e61b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd6c581d3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8679e618)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd6c581d0)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd6c581d1) #x01
    (ite (= x!0 #x8679e61a) #xff
    (ite (= x!0 #x5fffdf09) #x00
    (ite (= x!0 #x5fffdf0b) #x00
    (ite (= x!0 #xd6c581d3) #x00
    (ite (= x!0 #x8679e619) #xdf
    (ite (= x!0 #x5fffdf0a) #x00
    (ite (= x!0 #x5fffdf08) #x00
    (ite (= x!0 #x8679e61b) #x5f
      #x08))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x8679e61b)
                                     (k!7 #x8679e61a)
                                     (k!7 #x8679e619)
                                     (k!7 #x8679e618)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x8679e61b)
                                     (k!7 #x8679e61a)
                                     (k!7 #x8679e619)
                                     (k!7 #x8679e618)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x8679e61b)
                                     (k!7 #x8679e61a)
                                     (k!7 #x8679e619)
                                     (k!7 #x8679e618)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x8679e61b)
                                     (k!7 #x8679e61a)
                                     (k!7 #x8679e619)
                                     (k!7 #x8679e618))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00080108 x!0)
         (ite (bvule #x00080109 x!0) #x00080109 #x00080108)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 ((_ extract 2 0) input.dst.llvm-%x)))
 (let (($x147 (= (_ bv0 3) ?x164)))
 (let (($x68 (= $x147 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x104 (concat ?x21 (concat ?x64 ?x97)))))
 (let (($x166 (= input.dst.llvm-%n ?x131)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x76 (concat ?x106 (concat ?x54 ?x193)))))
 (let (($x6 (= input.dst.llvm-%x ?x82)))
 (let (($x179 (and $x6 $x166)))
 (let (($x50 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (and $x50 $x179)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x137)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x211)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x120 $x94)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x91 $x174)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x102 $x20)))
 (let (($x32 (not $x123)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x15 $x46)))
 (let (($x173 (and (not $x75) $x32)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x27 $x38)))
 (let (($x7 (not $x219)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x158 $x9)))
 (let (($x23 (and (not $x163) $x7)))
 (let (($x183 (and (and (and (and (and (and $x23 $x173) $x108) $x71) $x144) $x66) $x210)))
 (let (($x216 (and $x183 $x212)))
 (let (($x84 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x155))))
 (let ((?x152 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (=> $x159 (= ?x152 ?x186))))))))))
 ))
 (let (($x199 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x187 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (= $x159 (bvuge ?x187 (_ bv1 32))))))))
 ))
 (let (($x215 (forall ((Lambda1 (_ BitVec 32)) )(let (($x189 (= false false)))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x78 (_ bv0 32))))
 (=> $x182 $x189))))))
 ))
 (let (($x198 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x187 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x78 (_ bv0 32))))
 (= $x182 (= ?x187 (_ bv0 32))))))))
 ))
 (let (($x201 (and $x198 $x215)))
 (let (($x196 (and $x201 $x199)))
 (let (($x148 (and $x196 $x84)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x96 (or false (or false (and (and true (or $x136 $x134)) (or $x103 $x109))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x209 (and (and (and $x72 $x148) $x216) $x180)))
 (let (($x200 (= $x209 true)))
 (let (($x65 (= $x200 true)))
 (let (($x162 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x12 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x152 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (=> $x159 (= ?x152 ?x12))))))))
 ))
 (let (($x154 (forall ((Lambda1 (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (= $x159 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x78 (_ bv0 32))))
 (= $x182 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x217 (and $x181 $x215)))
 (let (($x161 (and $x217 $x154)))
 (let (($x129 (and $x161 $x162)))
 (let (($x125 (and $x129 $x65)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x127 (and $x22 $x125)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x10 $x127)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x128 (and $x178 $x126)))
 (let (($x18 (=> $x128 $x68)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 ((_ extract 2 0) input.dst.llvm-%x)))
 (let (($x147 (= (_ bv0 3) ?x164)))
 (let (($x68 (= $x147 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x104 (concat ?x21 (concat ?x64 ?x97)))))
 (let (($x166 (= input.dst.llvm-%n ?x131)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x76 (concat ?x106 (concat ?x54 ?x193)))))
 (let (($x6 (= input.dst.llvm-%x ?x82)))
 (let (($x179 (and $x6 $x166)))
 (let (($x50 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x180 (and $x50 $x179)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x137)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x211)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x120 $x94)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x91 $x174)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x123 (and $x102 $x20)))
 (let (($x32 (not $x123)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x15 $x46)))
 (let (($x173 (and (not $x75) $x32)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (and $x27 $x38)))
 (let (($x7 (not $x219)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x158 $x9)))
 (let (($x23 (and (not $x163) $x7)))
 (let (($x183 (and (and (and (and (and (and $x23 $x173) $x108) $x71) $x144) $x66) $x210)))
 (let (($x216 (and $x183 $x212)))
 (let (($x84 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x155))))
 (let ((?x152 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (=> $x159 (= ?x152 ?x186))))))))))
 ))
 (let (($x199 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x187 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (= $x159 (bvuge ?x187 (_ bv1 32))))))))
 ))
 (let (($x215 (forall ((Lambda1 (_ BitVec 32)) )(let (($x189 (= false false)))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x78 (_ bv0 32))))
 (=> $x182 $x189))))))
 ))
 (let (($x198 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x187 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x78 (_ bv0 32))))
 (= $x182 (= ?x187 (_ bv0 32))))))))
 ))
 (let (($x201 (and $x198 $x215)))
 (let (($x196 (and $x201 $x199)))
 (let (($x148 (and $x196 $x84)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x96 (or false (or false (and (and true (or $x136 $x134)) (or $x103 $x109))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x209 (and (and (and $x72 $x148) $x216) $x180)))
 (let (($x200 (= $x209 true)))
 (let (($x65 (= $x200 true)))
 (let (($x162 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x12 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x152 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (=> $x159 (= ?x152 ?x12))))))))
 ))
 (let (($x154 (forall ((Lambda1 (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x78 (_ bv1 32))))
 (= $x159 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x78 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x78 (_ bv0 32))))
 (= $x182 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x217 (and $x181 $x215)))
 (let (($x161 (and $x217 $x154)))
 (let (($x129 (and $x161 $x162)))
 (let (($x125 (and $x129 $x65)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x127 (and $x22 $x125)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x10 $x127)))
 (let (($x178 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x128 (and $x178 $x126)))
 (let (($x18 (=> $x128 $x68)))
 (not $x18)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x16754004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000d000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x16754007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000d003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x16754004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000d000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x16754004) #x04
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!7 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x16754007)
                                   (k!7 #x16754006)
                                   (k!7 #x16754005)
                                   (k!7 #x16754004)))))
          (a!2 (k!7 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x16754007)
                                   (k!7 #x16754006)
                                   (k!7 #x16754005)
                                   (k!7 #x16754004)))))
          (a!3 (k!7 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x16754007)
                                   (k!7 #x16754006)
                                   (k!7 #x16754005)
                                   (k!7 #x16754004)))))
          (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!7 #x16754007)
                                   (k!7 #x16754006)
                                   (k!7 #x16754005)
                                   (k!7 #x16754004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfae9f050)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x90125144)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf1fdec04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x90125147)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfae9f053)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x90125144)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfae9f050)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfae9f051) #x00
    (ite (= x!0 #xfae9f050) #x00
    (ite (= x!0 #xfae9f053) #x00
    (ite (= x!0 #xfae9f052) #x00
    (ite (= x!0 #x90125145) #xec
    (ite (= x!0 #x90125147) #xf1
    (ite (= x!0 #x90125144) #x04
      #xfd))))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!7 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x90125147)
                                   (k!7 #x90125146)
                                   (k!7 #x90125145)
                                   (k!7 #x90125144)))))
          (a!2 (k!7 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x90125147)
                                   (k!7 #x90125146)
                                   (k!7 #x90125145)
                                   (k!7 #x90125144)))))
          (a!3 (k!7 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x90125147)
                                   (k!7 #x90125146)
                                   (k!7 #x90125145)
                                   (k!7 #x90125144)))))
          (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!7 #x90125147)
                                   (k!7 #x90125146)
                                   (k!7 #x90125145)
                                   (k!7 #x90125144))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x88 (= (_ bv0 3) ?x39)))
 (let (($x203 (= $x88 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x172 (concat ?x79 (concat ?x16 ?x153)))))
 (let (($x208 (= input.dst.llvm-%n ?x175)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x207 (concat ?x44 (concat ?x98 ?x60)))))
 (let (($x57 (= input.dst.llvm-%x ?x47)))
 (let (($x213 (and $x57 $x208)))
 (let (($x218 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x150 (and $x218 $x213)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x130)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x126)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x179 $x209)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x166 $x200)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x110 $x104)))
 (let (($x21 (not $x80)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x51 $x82)))
 (let (($x64 (and (not $x6) $x21)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x42 $x106)))
 (let (($x54 (not $x24)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x50 $x149)))
 (let (($x49 (and (not $x76) $x54)))
 (let (($x40 (and (and (and (and (and (and $x49 $x64) $x83) $x131) $x65) $x127) $x128)))
 (let (($x146 (and $x40 $x164)))
 (let (($x36 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x66))))
 (let ((?x141 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (=> $x59 (= ?x141 ?x212))))))))))
 ))
 (let (($x219 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (= $x59 (bvuge ?x84 (_ bv1 32))))))))
 ))
 (let (($x139 (forall ((Lambda1 (_ BitVec 32)) )(let (($x152 (= false false)))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x74 (_ bv0 32))))
 (=> $x151 $x152))))))
 ))
 (let (($x158 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x74 (_ bv0 32))))
 (= $x151 (= ?x84 (_ bv0 32))))))))
 ))
 (let (($x9 (and $x158 $x139)))
 (let (($x7 (and $x9 $x219)))
 (let (($x63 (and $x7 $x36)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x204 (or false (or false (and (and true (or $x195 $x202)) (or $x100 $x61))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x55 (and (and (and $x167 $x63) $x146) $x150)))
 (let (($x124 (= $x55 true)))
 (let (($x52 (= $x124 true)))
 (let (($x96 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x141 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (=> $x59 (= ?x141 ?x103))))))))
 ))
 (let (($x136 (forall ((Lambda1 (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (= $x59 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x161 (forall ((Lambda1 (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x74 (_ bv0 32))))
 (= $x151 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x162 (and $x161 $x139)))
 (let (($x133 (and $x162 $x136)))
 (let (($x72 (and $x133 $x96)))
 (let (($x140 (and $x72 $x52)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x41 (and $x25 $x140)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x117 (and $x206 $x41)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x53 (and $x85 $x117)))
 (let (($x121 (=> $x53 $x203)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x39 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x88 (= (_ bv0 3) ?x39)))
 (let (($x203 (= $x88 true)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x172 (concat ?x79 (concat ?x16 ?x153)))))
 (let (($x208 (= input.dst.llvm-%n ?x175)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x207 (concat ?x44 (concat ?x98 ?x60)))))
 (let (($x57 (= input.dst.llvm-%x ?x47)))
 (let (($x213 (and $x57 $x208)))
 (let (($x218 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x150 (and $x218 $x213)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x130)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x126)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x179 $x209)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x166 $x200)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x110 $x104)))
 (let (($x21 (not $x80)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x51 $x82)))
 (let (($x64 (and (not $x6) $x21)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x42 $x106)))
 (let (($x54 (not $x24)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x50 $x149)))
 (let (($x49 (and (not $x76) $x54)))
 (let (($x40 (and (and (and (and (and (and $x49 $x64) $x83) $x131) $x65) $x127) $x128)))
 (let (($x146 (and $x40 $x164)))
 (let (($x36 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x174 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv1 32))) (select input.dst.llvm-mem ?x174))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x174 (_ bv2 32))) ?x66))))
 (let ((?x141 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (=> $x59 (= ?x141 ?x212))))))))))
 ))
 (let (($x219 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (= $x59 (bvuge ?x84 (_ bv1 32))))))))
 ))
 (let (($x139 (forall ((Lambda1 (_ BitVec 32)) )(let (($x152 (= false false)))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x74 (_ bv0 32))))
 (=> $x151 $x152))))))
 ))
 (let (($x158 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x74 (_ bv0 32))))
 (= $x151 (= ?x84 (_ bv0 32))))))))
 ))
 (let (($x9 (and $x158 $x139)))
 (let (($x7 (and $x9 $x219)))
 (let (($x63 (and $x7 $x36)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x204 (or false (or false (and (and true (or $x195 $x202)) (or $x100 $x61))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x55 (and (and (and $x167 $x63) $x146) $x150)))
 (let (($x124 (= $x55 true)))
 (let (($x52 (= $x124 true)))
 (let (($x96 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x141 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (=> $x59 (= ?x141 ?x103))))))))
 ))
 (let (($x136 (forall ((Lambda1 (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x74 (_ bv1 32))))
 (= $x59 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x161 (forall ((Lambda1 (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x74 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (= ?x74 (_ bv0 32))))
 (= $x151 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x162 (and $x161 $x139)))
 (let (($x133 (and $x162 $x136)))
 (let (($x72 (and $x133 $x96)))
 (let (($x140 (and $x72 $x52)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x41 (and $x25 $x140)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x117 (and $x206 $x41)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x53 (and $x85 $x117)))
 (let (($x121 (=> $x53 $x203)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000044)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80003808)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000047)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8000380b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000044)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80003808)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80003808) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000047)
                                     (k!7 #x00000046)
                                     (k!7 #x00000045)
                                     (k!7 #x00000044)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000047)
                                     (k!7 #x00000046)
                                     (k!7 #x00000045)
                                     (k!7 #x00000044)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000047)
                                     (k!7 #x00000046)
                                     (k!7 #x00000045)
                                     (k!7 #x00000044)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000047)
                                     (k!7 #x00000046)
                                     (k!7 #x00000045)
                                     (k!7 #x00000044))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5b373fe8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x66dddf94)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xfb00fb01)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xefa3fb00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x66dddf97)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5b373feb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x66dddf94)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5b373fe8)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xefa3fb01) #x00
    (ite (= x!0 #x66dddf96) #xa3
    (ite (= x!0 #x5b373fe8) #x01
    (ite (= x!0 #xefa3fb03) #x00
    (ite (= x!0 #x5b373fea) #x00
    (ite (= x!0 #xefa3fb02) #x00
    (ite (= x!0 #xefa3fb00) #x00
    (ite (= x!0 #x66dddf97) #xef
    (ite (= x!0 #x66dddf94) #x00
      #xfb))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x66dddf97)
                                     (k!7 #x66dddf96)
                                     (k!7 #x66dddf95)
                                     (k!7 #x66dddf94)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x66dddf97)
                                     (k!7 #x66dddf96)
                                     (k!7 #x66dddf95)
                                     (k!7 #x66dddf94)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x66dddf97)
                                     (k!7 #x66dddf96)
                                     (k!7 #x66dddf95)
                                     (k!7 #x66dddf94)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x66dddf97)
                                     (k!7 #x66dddf96)
                                     (k!7 #x66dddf95)
                                     (k!7 #x66dddf94))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xfb00fb01 x!0)
         (ite (bvule #xfb00fb02 x!0) #xfb00fb02 #xfb00fb01)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x163 (= (_ bv0 2) ?x169)))
 (let (($x67 (= $x163 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x197 (concat ?x138 (concat ?x5 ?x142)))))
 (let (($x12 (= input.dst.llvm-%n ?x215)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x30 (concat ?x32 (concat ?x58 ?x71)))))
 (let (($x182 (= input.dst.llvm-%x ?x91)))
 (let (($x129 (and $x182 $x12)))
 (let (($x15 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and $x15 $x129)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x114)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x117)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x213 $x55)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x208 $x124)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x105 $x172)))
 (let (($x79 (not $x33)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x122 $x47)))
 (let (($x16 (and (not $x57) $x79)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x17 $x44)))
 (let (($x98 (not $x165)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x218 $x95)))
 (let (($x107 (and (not $x207) $x98)))
 (let (($x145 (and (and (and (and (and (and $x107 $x16) $x73) $x175) $x52) $x41) $x53)))
 (let (($x90 (and $x145 $x39)))
 (let (($x185 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x127))))
 (let ((?x196 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x196 ?x164))))))))))
 ))
 (let (($x24 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (= $x201 (bvuge ?x36 (_ bv1 32))))))))
 ))
 (let (($x96 (forall ((Lambda1 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x143 (_ bv0 32))))
 (=> $x136 $x103))))))
 ))
 (let (($x50 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x143 (_ bv0 32))))
 (= $x136 (= ?x36 (_ bv0 32))))))))
 ))
 (let (($x149 (and $x50 $x96)))
 (let (($x54 (and $x149 $x24)))
 (let (($x31 (and $x54 $x185)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x214 (or false (or false (and (and true (or $x38 $x219)) (or $x62 $x174))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x214)))
 (let (($x135 (and (and (and $x211 $x31) $x90) $x160)))
 (let (($x109 (= $x135 true)))
 (let (($x70 (= $x109 true)))
 (let (($x167 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x196 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x196 ?x111))))))))
 ))
 (let (($x198 (forall ((Lambda1 (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (= $x201 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x141 (forall ((Lambda1 (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x143 (_ bv0 32))))
 (= $x136 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x72 (and $x141 $x96)))
 (let (($x202 (and $x72 $x198)))
 (let (($x13 (and $x202 $x167)))
 (let (($x118 (and $x13 $x70)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x220 (and $x25 $x118)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x171 (and $x206 $x220)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x170 (and $x85 $x171)))
 (let (($x120 (=> $x170 $x67)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x163 (= (_ bv0 2) ?x169)))
 (let (($x67 (= $x163 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x197 (concat ?x138 (concat ?x5 ?x142)))))
 (let (($x12 (= input.dst.llvm-%n ?x215)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x91 (concat ?x30 (concat ?x32 (concat ?x58 ?x71)))))
 (let (($x182 (= input.dst.llvm-%x ?x91)))
 (let (($x129 (and $x182 $x12)))
 (let (($x15 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and $x15 $x129)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x114)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x117)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x150)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (and $x213 $x55)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x208 $x124)))
 (let (($x175 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x105 $x172)))
 (let (($x79 (not $x33)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x122 $x47)))
 (let (($x16 (and (not $x57) $x79)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x17 $x44)))
 (let (($x98 (not $x165)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x218 $x95)))
 (let (($x107 (and (not $x207) $x98)))
 (let (($x145 (and (and (and (and (and (and $x107 $x16) $x73) $x175) $x52) $x41) $x53)))
 (let (($x90 (and $x145 $x39)))
 (let (($x185 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x127))))
 (let ((?x196 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x196 ?x164))))))))))
 ))
 (let (($x24 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (= $x201 (bvuge ?x36 (_ bv1 32))))))))
 ))
 (let (($x96 (forall ((Lambda1 (_ BitVec 32)) )(let (($x103 (= false false)))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x143 (_ bv0 32))))
 (=> $x136 $x103))))))
 ))
 (let (($x50 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x143 (_ bv0 32))))
 (= $x136 (= ?x36 (_ bv0 32))))))))
 ))
 (let (($x149 (and $x50 $x96)))
 (let (($x54 (and $x149 $x24)))
 (let (($x31 (and $x54 $x185)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x214 (or false (or false (and (and true (or $x38 $x219)) (or $x62 $x174))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x214)))
 (let (($x135 (and (and (and $x211 $x31) $x90) $x160)))
 (let (($x109 (= $x135 true)))
 (let (($x70 (= $x109 true)))
 (let (($x167 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x196 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (=> $x201 (= ?x196 ?x111))))))))
 ))
 (let (($x198 (forall ((Lambda1 (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x143 (_ bv1 32))))
 (= $x201 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x141 (forall ((Lambda1 (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x143 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (= ?x143 (_ bv0 32))))
 (= $x136 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x72 (and $x141 $x96)))
 (let (($x202 (and $x72 $x198)))
 (let (($x13 (and $x202 $x167)))
 (let (($x118 (and $x13 $x70)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x220 (and $x25 $x118)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x171 (and $x206 $x220)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x170 (and $x85 $x171)))
 (let (($x120 (=> $x170 $x67)))
 (not $x120)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x210 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x76 (= $x210 true)))
 (let (($x193 (= $x76 true)))
 (let ((?x205 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x139 (concat ?x159 (concat ?x61 ?x205)))))
 (let (($x34 (= input.dst.llvm-%n ?x162)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x68 (concat ?x21 (concat ?x97 ?x131)))))
 (let (($x192 (= input.dst.llvm-%x ?x166)))
 (let (($x187 (and $x192 $x34)))
 (let (($x51 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x194 (and $x51 $x187)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x170)))
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x220)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (and $x12 $x160)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x215 $x135)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x182 $x189)))
 (let (($x99 (not $x197)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x108 $x20)))
 (let (($x181 (and (not $x91) $x99)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x30 $x123)))
 (let (($x156 (not $x32)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x45 $x15)))
 (let (($x71 (and (not $x173) $x156)))
 (let (($x101 (and (and (and (and (and (and $x71 $x181) $x142) $x26) $x109) $x118) $x171)))
 (let (($x186 (and $x101 $x155)))
 (let (($x134 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x140))))
 (let ((?x7 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (=> $x158 (= ?x7 ?x114))))))))))
 ))
 (let (($x44 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (= $x158 (bvuge ?x157 (_ bv1 32))))))))
 ))
 (let (($x204 (forall ((Lambda1 (_ BitVec 32)) )(let (($x196 (= false false)))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x119 (_ bv0 32))))
 (=> $x195 $x196))))))
 ))
 (let (($x93 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x119 (_ bv0 32))))
 (= $x195 (= ?x157 (_ bv0 32))))))))
 ))
 (let (($x218 (and $x93 $x204)))
 (let (($x165 (and $x218 $x44)))
 (let (($x29 (and $x165 $x134)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x130 (or false (or false (and (and true (or $x42 $x106)) (or $x209 $x190))))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x100 (and (and (and $x37 $x29) $x186) $x194)))
 (let (($x8 (= $x100 true)))
 (let (($x177 (= $x8 true)))
 (let (($x214 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x62 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x7 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (=> $x158 (= ?x7 ?x62))))))))
 ))
 (let (($x38 (forall ((Lambda1 (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (= $x158 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x202 (forall ((Lambda1 (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x119 (_ bv0 32))))
 (= $x195 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x167 (and $x202 $x204)))
 (let (($x9 (and $x167 $x38)))
 (let (($x211 (and $x9 $x214)))
 (let (($x116 (and $x211 $x177)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x69 (and $x10 $x116)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x176 (and $x28 $x69)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x144 (and $x56 $x176)))
 (let (($x179 (=> $x144 $x193)))
 (not $x179)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x210 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x76 (= $x210 true)))
 (let (($x193 (= $x76 true)))
 (let ((?x205 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x139 (concat ?x159 (concat ?x61 ?x205)))))
 (let (($x34 (= input.dst.llvm-%n ?x162)))
 (let ((?x131 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x68 (concat ?x21 (concat ?x97 ?x131)))))
 (let (($x192 (= input.dst.llvm-%x ?x166)))
 (let (($x187 (and $x192 $x34)))
 (let (($x51 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x194 (and $x51 $x187)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x170)))
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x220)))
 (let ((?x70 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x70)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (and $x12 $x160)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (and $x215 $x135)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (and $x182 $x189)))
 (let (($x99 (not $x197)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x108 $x20)))
 (let (($x181 (and (not $x91) $x99)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x30 $x123)))
 (let (($x156 (not $x32)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x45 $x15)))
 (let (($x71 (and (not $x173) $x156)))
 (let (($x101 (and (and (and (and (and (and $x71 $x181) $x142) $x26) $x109) $x118) $x171)))
 (let (($x186 (and $x101 $x155)))
 (let (($x134 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x55 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv1 32))) (select input.dst.llvm-mem ?x55))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x55 (_ bv2 32))) ?x140))))
 (let ((?x7 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (=> $x158 (= ?x7 ?x114))))))))))
 ))
 (let (($x44 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (= $x158 (bvuge ?x157 (_ bv1 32))))))))
 ))
 (let (($x204 (forall ((Lambda1 (_ BitVec 32)) )(let (($x196 (= false false)))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x119 (_ bv0 32))))
 (=> $x195 $x196))))))
 ))
 (let (($x93 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x119 (_ bv0 32))))
 (= $x195 (= ?x157 (_ bv0 32))))))))
 ))
 (let (($x218 (and $x93 $x204)))
 (let (($x165 (and $x218 $x44)))
 (let (($x29 (and $x165 $x134)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x130 (or false (or false (and (and true (or $x42 $x106)) (or $x209 $x190))))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x130)))
 (let (($x100 (and (and (and $x37 $x29) $x186) $x194)))
 (let (($x8 (= $x100 true)))
 (let (($x177 (= $x8 true)))
 (let (($x214 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x62 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x7 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (=> $x158 (= ?x7 ?x62))))))))
 ))
 (let (($x38 (forall ((Lambda1 (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x119 (_ bv1 32))))
 (= $x158 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x202 (forall ((Lambda1 (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x119 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x119 (_ bv0 32))))
 (= $x195 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x167 (and $x202 $x204)))
 (let (($x9 (and $x167 $x38)))
 (let (($x211 (and $x9 $x214)))
 (let (($x116 (and $x211 $x177)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x69 (and $x10 $x116)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x176 (and $x28 $x69)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x144 (and $x56 $x176)))
 (let (($x179 (=> $x144 $x193)))
 (not $x179)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4af11c84)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000003c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4af11c87)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000003c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4af11c84)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000003c0)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000003c3) #xff
    (ite (= x!0 #x000003c2) #xff
    (ite (= x!0 #x000003c0) #xff
    (ite (= x!0 #x000003c1) #xff
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4af11c87)
                                     (k!7 #x4af11c86)
                                     (k!7 #x4af11c85)
                                     (k!7 #x4af11c84)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4af11c87)
                                     (k!7 #x4af11c86)
                                     (k!7 #x4af11c85)
                                     (k!7 #x4af11c84)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4af11c87)
                                     (k!7 #x4af11c86)
                                     (k!7 #x4af11c85)
                                     (k!7 #x4af11c84)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x4af11c87)
                                     (k!7 #x4af11c86)
                                     (k!7 #x4af11c85)
                                     (k!7 #x4af11c84))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xab495b60)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x921c7ac4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffdffe00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x921c7ac7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xab495b63)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x921c7ac4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xab495b60)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xab495b61) #xff
    (ite (= x!0 #xab495b60) #xff
    (ite (= x!0 #xffdffe03) #x00
    (ite (= x!0 #xab495b63) #xff
    (ite (= x!0 #xffdffe01) #x00
    (ite (= x!0 #xab495b62) #xff
    (ite (= x!0 #x921c7ac5) #xfe
    (ite (= x!0 #xffdffe02) #x00
    (ite (= x!0 #xffdffe00) #x00
    (ite (= x!0 #x921c7ac7) #xff
    (ite (= x!0 #x921c7ac4) #x00
      #xdf))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x921c7ac7)
                                     (k!7 #x921c7ac6)
                                     (k!7 #x921c7ac5)
                                     (k!7 #x921c7ac4)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x921c7ac7)
                                     (k!7 #x921c7ac6)
                                     (k!7 #x921c7ac5)
                                     (k!7 #x921c7ac4)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x921c7ac7)
                                     (k!7 #x921c7ac6)
                                     (k!7 #x921c7ac5)
                                     (k!7 #x921c7ac4)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x921c7ac7)
                                     (k!7 #x921c7ac6)
                                     (k!7 #x921c7ac5)
                                     (k!7 #x921c7ac4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x127 (= $x65 true)))
 (let (($x95 (= $x127 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x86 (concat ?x59 (concat ?x94 ?x23)))))
 (let (($x111 (= input.dst.llvm-%n ?x96)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x73 (concat ?x33 (concat ?x88 ?x113)))))
 (let (($x136 (= input.dst.llvm-%x ?x121)))
 (let (($x13 (and $x136 $x111)))
 (let (($x107 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x148 (and $x107 $x13)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x144)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x69)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x34 $x194)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x162 $x100)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x192 $x77)))
 (let (($x217 (not $x139)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x83 $x104)))
 (let (($x152 (and (not $x166) $x217)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x68 $x80)))
 (let (($x18 (not $x21)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x102 $x51)))
 (let (($x131 (and (not $x64) $x18)))
 (let (($x216 (and (and (and (and (and (and $x131 $x152) $x205) $x154) $x8) $x116) $x176)))
 (let (($x84 (and $x216 $x66)))
 (let (($x199 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x70))))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (=> $x19 (= ?x24 ?x170))))))))))
 ))
 (let (($x123 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x90 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (= $x19 (bvuge ?x90 (_ bv1 32))))))))
 ))
 (let (($x137 (forall ((Lambda1 (_ BitVec 32)) )(let (($x7 (= false false)))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x11 (_ bv0 32))))
 (=> $x27 $x7))))))
 ))
 (let (($x35 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x90 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x11 (_ bv0 32))))
 (= $x27 (= ?x90 (_ bv0 32))))))))
 ))
 (let (($x45 (and $x35 $x137)))
 (let (($x32 (and $x45 $x123)))
 (let (($x22 (and $x32 $x199)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x145 (or false (or false (and (and true (or $x60 $x17)) (or $x150 $x57))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x46 (and (and (and $x41 $x22) $x84) $x148)))
 (let (($x174 (= $x46 true)))
 (let (($x132 (= $x174 true)))
 (let (($x130 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (=> $x19 (= ?x24 ?x209))))))))
 ))
 (let (($x42 (forall ((Lambda1 (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (= $x19 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x9 (forall ((Lambda1 (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x11 (_ bv0 32))))
 (= $x27 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x214 (and $x9 $x137)))
 (let (($x50 (and $x214 $x42)))
 (let (($x37 (and $x50 $x130)))
 (let (($x212 (and $x37 $x132)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x126 (and $x206 $x212)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x89 (and $x178 $x126)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x125 (and $x6 $x89)))
 (let (($x207 (=> $x125 $x95)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x127 (= $x65 true)))
 (let (($x95 (= $x127 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x86 (concat ?x59 (concat ?x94 ?x23)))))
 (let (($x111 (= input.dst.llvm-%n ?x96)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x73 (concat ?x33 (concat ?x88 ?x113)))))
 (let (($x136 (= input.dst.llvm-%x ?x121)))
 (let (($x13 (and $x136 $x111)))
 (let (($x107 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x148 (and $x107 $x13)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x144)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x69)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x187)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x34 $x194)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x162 $x100)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (and $x192 $x77)))
 (let (($x217 (not $x139)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x166 (and $x83 $x104)))
 (let (($x152 (and (not $x166) $x217)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x68 $x80)))
 (let (($x18 (not $x21)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x102 $x51)))
 (let (($x131 (and (not $x64) $x18)))
 (let (($x216 (and (and (and (and (and (and $x131 $x152) $x205) $x154) $x8) $x116) $x176)))
 (let (($x84 (and $x216 $x66)))
 (let (($x199 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x70))))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (=> $x19 (= ?x24 ?x170))))))))))
 ))
 (let (($x123 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x90 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (= $x19 (bvuge ?x90 (_ bv1 32))))))))
 ))
 (let (($x137 (forall ((Lambda1 (_ BitVec 32)) )(let (($x7 (= false false)))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x11 (_ bv0 32))))
 (=> $x27 $x7))))))
 ))
 (let (($x35 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x90 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x11 (_ bv0 32))))
 (= $x27 (= ?x90 (_ bv0 32))))))))
 ))
 (let (($x45 (and $x35 $x137)))
 (let (($x32 (and $x45 $x123)))
 (let (($x22 (and $x32 $x199)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x145 (or false (or false (and (and true (or $x60 $x17)) (or $x150 $x57))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x46 (and (and (and $x41 $x22) $x84) $x148)))
 (let (($x174 (= $x46 true)))
 (let (($x132 (= $x174 true)))
 (let (($x130 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (=> $x19 (= ?x24 ?x209))))))))
 ))
 (let (($x42 (forall ((Lambda1 (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x11 (_ bv1 32))))
 (= $x19 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x9 (forall ((Lambda1 (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x11 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (= ?x11 (_ bv0 32))))
 (= $x27 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x214 (and $x9 $x137)))
 (let (($x50 (and $x214 $x42)))
 (let (($x37 (and $x50 $x130)))
 (let (($x212 (and $x37 $x132)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x126 (and $x206 $x212)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x89 (and $x178 $x126)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x125 (and $x6 $x89)))
 (let (($x207 (=> $x125 $x95)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x241 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x194 (bvmul Lambda1 (_ bv4 32))))
 (let ((?x228 (bvadd ?x194 input.dst.llvm-%n)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x232))))
 (let ((?x165 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (=> $x218 (= ?x165 ?x238)))))))))))
 ))
 (let (($x21 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (= $x218 (bvuge ?x199 (_ bv1 32))))))))
 ))
 (let (($x130 (forall ((Lambda1 (_ BitVec 32)) )(let (($x209 (= false false)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x149 (_ bv0 32))))
 (=> $x42 $x209))))))
 ))
 (let (($x102 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x149 (_ bv0 32))))
 (= $x42 (= ?x199 (_ bv0 32))))))))
 ))
 (let (($x51 (and $x102 $x130)))
 (let (($x18 (and $x51 $x21)))
 (let (($x242 (and $x18 $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x204 (concat ?x201 (concat ?x151 ?x202)))))
 (let (($x211 (= input.dst.llvm-%n ?x62)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x67 (concat ?x182 (concat ?x5 ?x26)))))
 (let (($x10 (= input.dst.llvm-%x ?x195)))
 (let (($x36 (and $x10 $x211)))
 (let (($x138 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x63 (and $x138 $x36)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x65)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x89)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x13 $x46)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x111 $x174)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x103 $x86)))
 (let (($x59 (not $x161)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x105 $x121)))
 (let (($x94 (and (not $x136) $x59)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x172 $x33)))
 (let (($x88 (not $x175)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x107 $x79)))
 (let (($x153 (and (not $x73) $x88)))
 (let (($x184 (and (and (and (and (and (and $x153 $x94) $x74) $x96) $x132) $x126) $x125)))
 (let (($x25 (and $x184 $x127)))
 (let (($x168 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x194 (bvmul Lambda1 (_ bv4 32))))
 (let ((?x100 (bvadd ?x194 input.dst.llvm-%x)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x116))))
 (let ((?x165 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (=> $x218 (= ?x165 ?x66)))))))))))
 ))
 (let (($x110 (and $x18 $x168)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x181 (or false (or false (and (and true (or $x30 $x123)) (or $x91 $x160))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x190 (and (and (and $x14 $x110) $x25) $x63)))
 (let (($x200 (= $x190 true)))
 (let (($x128 (= $x200 true)))
 (let (($x41 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x165 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (=> $x218 (= ?x165 ?x122))))))))
 ))
 (let (($x93 (forall ((Lambda1 (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (= $x218 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x24 (forall ((Lambda1 (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x149 (_ bv0 32))))
 (= $x42 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x37 (and $x24 $x130)))
 (let (($x17 (and $x37 $x93)))
 (let (($x114 (and $x17 $x41)))
 (let (($x75 (and $x114 $x128)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x52 (and $x206 $x75)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x115 (and $x56 $x52)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x124 (and $x85 $x115)))
 (let (($x245 (=> $x124 $x244)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x241 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x194 (bvmul Lambda1 (_ bv4 32))))
 (let ((?x228 (bvadd ?x194 input.dst.llvm-%n)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x232))))
 (let ((?x165 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (=> $x218 (= ?x165 ?x238)))))))))))
 ))
 (let (($x21 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (= $x218 (bvuge ?x199 (_ bv1 32))))))))
 ))
 (let (($x130 (forall ((Lambda1 (_ BitVec 32)) )(let (($x209 (= false false)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x149 (_ bv0 32))))
 (=> $x42 $x209))))))
 ))
 (let (($x102 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x149 (_ bv0 32))))
 (= $x42 (= ?x199 (_ bv0 32))))))))
 ))
 (let (($x51 (and $x102 $x130)))
 (let (($x18 (and $x51 $x21)))
 (let (($x242 (and $x18 $x241)))
 (let (($x243 (= $x242 true)))
 (let (($x244 (= $x243 true)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x204 (concat ?x201 (concat ?x151 ?x202)))))
 (let (($x211 (= input.dst.llvm-%n ?x62)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x67 (concat ?x182 (concat ?x5 ?x26)))))
 (let (($x10 (= input.dst.llvm-%x ?x195)))
 (let (($x36 (and $x10 $x211)))
 (let (($x138 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x63 (and $x138 $x36)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x65)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x89)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x126 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x148)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x13 $x46)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x111 $x174)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x103 $x86)))
 (let (($x59 (not $x161)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (and $x105 $x121)))
 (let (($x94 (and (not $x136) $x59)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x172 $x33)))
 (let (($x88 (not $x175)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x107 $x79)))
 (let (($x153 (and (not $x73) $x88)))
 (let (($x184 (and (and (and (and (and (and $x153 $x94) $x74) $x96) $x132) $x126) $x125)))
 (let (($x25 (and $x184 $x127)))
 (let (($x168 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x194 (bvmul Lambda1 (_ bv4 32))))
 (let ((?x100 (bvadd ?x194 input.dst.llvm-%x)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x116))))
 (let ((?x165 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (=> $x218 (= ?x165 ?x66)))))))))))
 ))
 (let (($x110 (and $x18 $x168)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x181 (or false (or false (and (and true (or $x30 $x123)) (or $x91 $x160))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x190 (and (and (and $x14 $x110) $x25) $x63)))
 (let (($x200 (= $x190 true)))
 (let (($x128 (= $x200 true)))
 (let (($x41 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x165 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (=> $x218 (= ?x165 ?x122))))))))
 ))
 (let (($x93 (forall ((Lambda1 (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x149 (_ bv1 32))))
 (= $x218 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x24 (forall ((Lambda1 (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x149 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x42 (= ?x149 (_ bv0 32))))
 (= $x42 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x37 (and $x24 $x130)))
 (let (($x17 (and $x37 $x93)))
 (let (($x114 (and $x17 $x41)))
 (let (($x75 (and $x114 $x128)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x52 (and $x206 $x75)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x115 (and $x56 $x52)))
 (let (($x85 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x124 (and $x85 $x115)))
 (let (($x245 (=> $x124 $x244)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0005fffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun Lambda1!0 () (_ BitVec 32)
    #x1fffffff)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xc0961800)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0005ffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0005fffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0005fffd) #x18
    (ite (= x!0 #x00000000) #x40
    (ite (= x!0 #x00000007) #x80
    (ite (= x!0 #x0005ffff) #xc0
    (ite (= x!0 #x0005fffe) #x96
    (ite (= x!0 #x00000004) #x04
      #x00)))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x1fffffff) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0005ffff)
                                     (k!1 #x0005fffe)
                                     (k!1 #x0005fffd)
                                     (k!1 #x0005fffc)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0005ffff)
                                     (k!1 #x0005fffe)
                                     (k!1 #x0005fffd)
                                     (k!1 #x0005fffc)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0005ffff)
                                     (k!1 #x0005fffe)
                                     (k!1 #x0005fffd)
                                     (k!1 #x0005fffc)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x0005ffff)
                                     (k!1 #x0005fffe)
                                     (k!1 #x0005fffd)
                                     (k!1 #x0005fffc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x1fffffff))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000004 x!0)
         (ite (bvule #x80000005 x!0) #x80000005 #x80000004)
         #x1fffffff))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x1fffffff) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x1fffffff) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1!0 () (_ BitVec 32)
    #x00818184)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5601aae0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4ac0d964)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x05e11121)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x54c89100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4ac0d967)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5601aae3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4ac0d964)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5601aae0)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5601aae1) #x11
    (ite (= x!0 #x4ac0d966) #xc8
    (ite (= x!0 #x5601aae0) #x21
    (ite (= x!0 #x5601aae3) #x05
    (ite (= x!0 #x5601aae2) #xe1
    (ite (= x!0 #x4ac0d965) #x91
    (ite (= x!0 #x4ac0d967) #x54
    (ite (= x!0 #x07e71731) #x40
      #x00)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00818184) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x4ac0d967)
                                     (k!1 #x4ac0d966)
                                     (k!1 #x4ac0d965)
                                     (k!1 #x4ac0d964)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x4ac0d967)
                                     (k!1 #x4ac0d966)
                                     (k!1 #x4ac0d965)
                                     (k!1 #x4ac0d964)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x4ac0d967)
                                     (k!1 #x4ac0d966)
                                     (k!1 #x4ac0d965)
                                     (k!1 #x4ac0d964)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x4ac0d967)
                                     (k!1 #x4ac0d966)
                                     (k!1 #x4ac0d965)
                                     (k!1 #x4ac0d964))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00818184) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x05e11121 x!0)
         (ite (bvule #x05e11122 x!0) #x05e11122 #x05e11121)
         #x00818184))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00818184) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00818184) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x212))))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (=> $x35 (= ?x32 ?x65))))))))))
 ))
 (let (($x44 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x158 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (= $x35 (bvuge ?x158 (_ bv1 32))))))))
 ))
 (let (($x145 (forall ((Lambda1 (_ BitVec 32)) )(let (($x165 (= false false)))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (=> $x60 $x165))))))
 ))
 (let (($x137 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x158 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (= $x60 (= ?x158 (_ bv0 32))))))))
 ))
 (let (($x214 (and $x137 $x145)))
 (let (($x150 (and $x214 $x44)))
 (let (($x55 (and $x150 $x49)))
 (let (($x203 (= $x55 true)))
 (let (($x39 (= $x203 true)))
 (let ((?x192 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x152 (concat ?x139 (concat ?x193 ?x192)))))
 (let (($x162 (= input.dst.llvm-%n ?x76)))
 (let ((?x240 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x117 (concat ?x245 (concat ?x242 ?x240)))))
 (let (($x81 (= input.dst.llvm-%x ?x54)))
 (let (($x140 (and $x81 $x162)))
 (let (($x238 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x223 (and $x238 $x140)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x124)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x52)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x36)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x211 $x63)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x62 $x190)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x204 (and $x10 $x191)))
 (let (($x72 (not $x204)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x189 $x99)))
 (let (($x82 (and (not $x195) $x72)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x67 $x197)))
 (let (($x169 (not $x182)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x71 $x138)))
 (let (($x26 (and (not $x142) $x169)))
 (let (($x231 (and (and (and (and (and (and $x26 $x82) $x202) $x196) $x200) $x75) $x115)))
 (let (($x229 (and $x231 $x228)))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (= $x35 (bvuge ?x219 (_ bv1 32))))))))
 ))
 (let (($x106 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (= $x60 (= ?x219 (_ bv0 32))))))))
 ))
 (let (($x107 (and $x106 $x145)))
 (let (($x175 (and $x107 $x33)))
 (let (($x87 (and $x175 $x49)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x144 (or false (or false (and (and true (or $x68 $x80)) (or $x194 $x159))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x221 (and (and (and $x180 $x87) $x229) $x223)))
 (let (($x173 (= $x221 true)))
 (let (($x215 (= $x173 true)))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x91 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (=> $x35 (= ?x32 ?x91))))))))
 ))
 (let (($x30 (forall ((Lambda1 (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (= $x35 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x17 (forall ((Lambda1 (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (= $x60 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x41 (and $x17 $x145)))
 (let (($x45 (and $x41 $x30)))
 (let (($x14 (and $x45 $x181)))
 (let (($x15 (and $x14 $x215)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x12 (and $x28 $x15)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x222 (and $x178 $x12)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x225 (and $x166 $x222)))
 (let (($x109 (=> $x225 $x39)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x49 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x212))))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (=> $x35 (= ?x32 ?x65))))))))))
 ))
 (let (($x44 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x158 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (= $x35 (bvuge ?x158 (_ bv1 32))))))))
 ))
 (let (($x145 (forall ((Lambda1 (_ BitVec 32)) )(let (($x165 (= false false)))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (=> $x60 $x165))))))
 ))
 (let (($x137 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x158 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (= $x60 (= ?x158 (_ bv0 32))))))))
 ))
 (let (($x214 (and $x137 $x145)))
 (let (($x150 (and $x214 $x44)))
 (let (($x55 (and $x150 $x49)))
 (let (($x203 (= $x55 true)))
 (let (($x39 (= $x203 true)))
 (let ((?x192 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x152 (concat ?x139 (concat ?x193 ?x192)))))
 (let (($x162 (= input.dst.llvm-%n ?x76)))
 (let ((?x240 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x117 (concat ?x245 (concat ?x242 ?x240)))))
 (let (($x81 (= input.dst.llvm-%x ?x54)))
 (let (($x140 (and $x81 $x162)))
 (let (($x238 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x223 (and $x238 $x140)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x124)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x52)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x36)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x211 $x63)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x62 $x190)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x204 (and $x10 $x191)))
 (let (($x72 (not $x204)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (and $x189 $x99)))
 (let (($x82 (and (not $x195) $x72)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x67 $x197)))
 (let (($x169 (not $x182)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x71 $x138)))
 (let (($x26 (and (not $x142) $x169)))
 (let (($x231 (and (and (and (and (and (and $x26 $x82) $x202) $x196) $x200) $x75) $x115)))
 (let (($x229 (and $x231 $x228)))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (= $x35 (bvuge ?x219 (_ bv1 32))))))))
 ))
 (let (($x106 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x219 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (= $x60 (= ?x219 (_ bv0 32))))))))
 ))
 (let (($x107 (and $x106 $x145)))
 (let (($x175 (and $x107 $x33)))
 (let (($x87 (and $x175 $x49)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x144 (or false (or false (and (and true (or $x68 $x80)) (or $x194 $x159))))))
 (let (($x180 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x221 (and (and (and $x180 $x87) $x229) $x223)))
 (let (($x173 (= $x221 true)))
 (let (($x215 (= $x173 true)))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x91 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (=> $x35 (= ?x32 ?x91))))))))
 ))
 (let (($x30 (forall ((Lambda1 (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x31 (_ bv1 32))))
 (= $x35 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x17 (forall ((Lambda1 (_ BitVec 32)) )(let (($x149 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x31 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (= ?x31 (_ bv0 32))))
 (= $x60 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x41 (and $x17 $x145)))
 (let (($x45 (and $x41 $x30)))
 (let (($x14 (and $x45 $x181)))
 (let (($x15 (and $x14 $x215)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x12 (and $x28 $x15)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x222 (and $x178 $x12)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x225 (and $x166 $x222)))
 (let (($x109 (=> $x225 $x39)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x99a42074)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8aac1864)
  (define-fun Lambda1!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x99a42077)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8aac1867)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x99a42074)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8aac1864)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x99a42074) #x08
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x99a42077)
                                   (k!2 #x99a42076)
                                   (k!2 #x99a42075)
                                   (k!2 #x99a42074)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x99a42077)
                                   (k!2 #x99a42076)
                                   (k!2 #x99a42075)
                                   (k!2 #x99a42074)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x99a42077)
                                   (k!2 #x99a42076)
                                   (k!2 #x99a42075)
                                   (k!2 #x99a42074)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x99a42077)
                                   (k!2 #x99a42076)
                                   (k!2 #x99a42075)
                                   (k!2 #x99a42074))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xdd7928a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2ded148c)
  (define-fun Lambda1!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2ded148f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xdd7928ab)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2ded148c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xdd7928a8)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdd7928a9) #x00
    (ite (= x!0 #x2ded148e) #x00
    (ite (= x!0 #xdd7928a8) #x00
    (ite (= x!0 #xdd7928ab) #x00
    (ite (= x!0 #xdd7928aa) #x00
    (ite (= x!0 #x2ded148d) #x00
    (ite (= x!0 #x2ded148f) #x00
      #x04))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x2ded148f)
                                   (k!2 #x2ded148e)
                                   (k!2 #x2ded148d)
                                   (k!2 #x2ded148c)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x2ded148f)
                                   (k!2 #x2ded148e)
                                   (k!2 #x2ded148d)
                                   (k!2 #x2ded148c)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x2ded148f)
                                   (k!2 #x2ded148e)
                                   (k!2 #x2ded148d)
                                   (k!2 #x2ded148c)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x2ded148f)
                                   (k!2 #x2ded148e)
                                   (k!2 #x2ded148d)
                                   (k!2 #x2ded148c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x13 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda1 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvmul Lambda1 (_ bv4 32))))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda1 (_ bv4 32)) (_ bv2 32))) ?x13)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda1 (_ bv4 32)) (_ bv3 32))) ?x98)))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (=> $x188 (= ?x21 ?x112))))))))))
 ))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (= $x188 (bvuge ?x25 (_ bv1 32))))))))
 ))
 (let (($x101 (forall ((Lambda1 (_ BitVec 32)) )(let (($x32 (= false false)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x118 (_ bv0 32))))
 (=> $x58 $x32))))))
 ))
 (let (($x224 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x118 (_ bv0 32))))
 (= $x58 (= ?x25 (_ bv0 32))))))))
 ))
 (let (($x71 (and $x224 $x101)))
 (let (($x182 (and $x71 $x197)))
 (let (($x220 (and $x182 $x70)))
 (let (($x64 (= $x220 true)))
 (let (($x97 (= $x64 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x42 (concat ?x59 (concat ?x86 ?x95)))))
 (let (($x156 (= input.dst.llvm-%n ?x206)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x153 (concat ?x90 (concat ?x109 ?x203)))))
 (let (($x92 (= input.dst.llvm-%x ?x141)))
 (let (($x24 (and $x92 $x156)))
 (let (($x150 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x129 (and $x150 $x24)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x225)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x12)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (and $x162 $x223)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x76 $x221)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x81 $x77)))
 (let (($x205 (not $x152)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x243 $x246)))
 (let (($x154 (and (not $x54) $x205)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x117 $x244)))
 (let (($x241 (not $x245)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x235 $x238)))
 (let (($x240 (and (not $x146) $x241)))
 (let (($x214 (and (and (and (and (and (and $x240 $x154) $x192) $x217) $x173) $x15) $x222)))
 (let (($x185 (and $x214 $x119)))
 (let (($x213 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (bvmul Lambda1 (_ bv4 32))))
 (let ((?x63 (bvadd ?x36 input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x128))))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (=> $x188 (= ?x21 ?x124)))))))))))
 ))
 (let (($x232 (and $x182 $x213)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x184 (or false (or false (and (and true (or $x113 $x172)) (or $x148 $x136))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x19 (and (and (and $x126 $x232) $x185) $x129)))
 (let (($x147 (= $x19 true)))
 (let (($x209 (= $x147 true)))
 (let (($x144 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x194 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (=> $x188 (= ?x21 ?x194))))))))
 ))
 (let (($x68 (forall ((Lambda1 (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (= $x188 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x45 (forall ((Lambda1 (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x118 (_ bv0 32))))
 (= $x58 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x181 (and $x45 $x101)))
 (let (($x102 (and $x181 $x68)))
 (let (($x180 (and $x102 $x144)))
 (let (($x40 (and $x180 $x209)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x130 (and $x56 $x40)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x122 (and $x6 $x130)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x114 (and $x43 $x122)))
 (let (($x34 (=> $x114 $x97)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x70 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x13 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda1 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvmul Lambda1 (_ bv4 32))))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda1 (_ bv4 32)) (_ bv2 32))) ?x13)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd (bvmul Lambda1 (_ bv4 32)) (_ bv3 32))) ?x98)))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (=> $x188 (= ?x21 ?x112))))))))))
 ))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (= $x188 (bvuge ?x25 (_ bv1 32))))))))
 ))
 (let (($x101 (forall ((Lambda1 (_ BitVec 32)) )(let (($x32 (= false false)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x118 (_ bv0 32))))
 (=> $x58 $x32))))))
 ))
 (let (($x224 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x25 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x118 (_ bv0 32))))
 (= $x58 (= ?x25 (_ bv0 32))))))))
 ))
 (let (($x71 (and $x224 $x101)))
 (let (($x182 (and $x71 $x197)))
 (let (($x220 (and $x182 $x70)))
 (let (($x64 (= $x220 true)))
 (let (($x97 (= $x64 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x42 (concat ?x59 (concat ?x86 ?x95)))))
 (let (($x156 (= input.dst.llvm-%n ?x206)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x153 (concat ?x90 (concat ?x109 ?x203)))))
 (let (($x92 (= input.dst.llvm-%x ?x141)))
 (let (($x24 (and $x92 $x156)))
 (let (($x150 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x129 (and $x150 $x24)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x225)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x12)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x15 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x140)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (and $x162 $x223)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x76 $x221)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x81 $x77)))
 (let (($x205 (not $x152)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x243 $x246)))
 (let (($x154 (and (not $x54) $x205)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (and $x117 $x244)))
 (let (($x241 (not $x245)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x235 $x238)))
 (let (($x240 (and (not $x146) $x241)))
 (let (($x214 (and (and (and (and (and (and $x240 $x154) $x192) $x217) $x173) $x15) $x222)))
 (let (($x185 (and $x214 $x119)))
 (let (($x213 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (bvmul Lambda1 (_ bv4 32))))
 (let ((?x63 (bvadd ?x36 input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x128))))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (=> $x188 (= ?x21 ?x124)))))))))))
 ))
 (let (($x232 (and $x182 $x213)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x184 (or false (or false (and (and true (or $x113 $x172)) (or $x148 $x136))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x19 (and (and (and $x126 $x232) $x185) $x129)))
 (let (($x147 (= $x19 true)))
 (let (($x209 (= $x147 true)))
 (let (($x144 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x194 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (=> $x188 (= ?x21 ?x194))))))))
 ))
 (let (($x68 (forall ((Lambda1 (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x118 (_ bv1 32))))
 (= $x188 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x45 (forall ((Lambda1 (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x118 (ite $x31 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (= ?x118 (_ bv0 32))))
 (= $x58 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x181 (and $x45 $x101)))
 (let (($x102 (and $x181 $x68)))
 (let (($x180 (and $x102 $x144)))
 (let (($x40 (and $x180 $x209)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x130 (and $x56 $x40)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x122 (and $x6 $x130)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x114 (and $x43 $x122)))
 (let (($x34 (=> $x114 $x97)))
 (not $x34))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x07fffffc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x07ffefcc)
  (define-fun Lambda1!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00814900)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x07ffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x07ffefcf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x07fffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x07ffefcc)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x07fffffd) #x49
    (ite (= x!0 #x07ffefcc) #x01
    (ite (= x!0 #x00000000) #x40
    (ite (= x!0 #x07fffffe) #x81
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x07ffffff)
                                     (k!1 #x07fffffe)
                                     (k!1 #x07fffffd)
                                     (k!1 #x07fffffc)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x07ffffff)
                                     (k!1 #x07fffffe)
                                     (k!1 #x07fffffd)
                                     (k!1 #x07fffffc)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x07ffffff)
                                     (k!1 #x07fffffe)
                                     (k!1 #x07fffffd)
                                     (k!1 #x07fffffc)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x07ffffff)
                                     (k!1 #x07fffffe)
                                     (k!1 #x07fffffd)
                                     (k!1 #x07fffffc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x81c2da08)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc74ada80)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf0ef8900)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc74ada83)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x81c2da0b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc74ada80)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x81c2da08)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x81c2da09) #x00
    (ite (= x!0 #xc74ada82) #xef
    (ite (= x!0 #x81c2da08) #x01
    (ite (= x!0 #x81c2da0b) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xf0ef8902) #x00
    (ite (= x!0 #x81c2da0a) #x00
    (ite (= x!0 #xc74ada81) #x89
    (ite (= x!0 #xf0ef8901) #x00
    (ite (= x!0 #xc74ada80) #x00
    (ite (= x!0 #x00000000) #x40
    (ite (= x!0 #xf0ef8903) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #xf0ef8900) #x00
      #xf0))))))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #xc74ada83)
                                     (k!1 #xc74ada82)
                                     (k!1 #xc74ada81)
                                     (k!1 #xc74ada80)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #xc74ada83)
                                     (k!1 #xc74ada82)
                                     (k!1 #xc74ada81)
                                     (k!1 #xc74ada80)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #xc74ada83)
                                     (k!1 #xc74ada82)
                                     (k!1 #xc74ada81)
                                     (k!1 #xc74ada80)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #xc74ada83)
                                     (k!1 #xc74ada82)
                                     (k!1 #xc74ada81)
                                     (k!1 #xc74ada80))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x15))))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (=> $x107 (= ?x175 ?x119))))))))))
 ))
 (let (($x245 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (= $x107 (bvuge ?x213 (_ bv1 32))))))))
 ))
 (let (($x144 (forall ((Lambda1 (_ BitVec 32)) )(let (($x194 (= false false)))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x51 (_ bv0 32))))
 (=> $x68 $x194))))))
 ))
 (let (($x235 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x51 (_ bv0 32))))
 (= $x68 (= ?x213 (_ bv0 32))))))))
 ))
 (let (($x238 (and $x235 $x144)))
 (let (($x241 (and $x238 $x245)))
 (let (($x44 (and $x241 $x16)))
 (let (($x18 (= $x44 true)))
 (let (($x17 (= $x18 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x233 (concat ?x202 (concat ?x204 (concat ?x236 ?x133)))))
 (let (($x69 (= input.dst.llvm-%n ?x233)))
 (let ((?x220 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x96 (concat ?x99 (concat ?x97 ?x220)))))
 (let (($x26 (= input.dst.llvm-%x ?x55)))
 (let (($x179 (and $x26 $x69)))
 (let (($x135 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and $x135 $x179)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x7)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x122)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x24 $x19)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x156 $x147)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x208 $x42)))
 (let (($x59 (not $x103)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x83 $x141)))
 (let (($x86 (and (not $x92) $x59)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x155 $x90)))
 (let (($x109 (not $x39)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x150 $x239)))
 (let (($x120 (and (not $x153) $x109)))
 (let (($x13 (and (and (and (and (and (and $x120 $x86) $x161) $x206) $x209) $x130) $x114)))
 (let (($x98 (and $x13 $x57)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x82 (or false (or false (and (and true (or $x67 $x197)) (or $x195 $x63))))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x123 (and (and (and $x230 $x44) $x98) $x160)))
 (let (($x134 (= $x123 true)))
 (let (($x108 (= $x134 true)))
 (let (($x126 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (=> $x107 (= ?x175 ?x105))))))))
 ))
 (let (($x106 (forall ((Lambda1 (_ BitVec 32)) )(let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (= $x107 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x21 (forall ((Lambda1 (_ BitVec 32)) )(let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x51 (_ bv0 32))))
 (= $x68 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x180 (and $x21 $x144)))
 (let (($x172 (and $x180 $x106)))
 (let (($x65 (and $x172 $x126)))
 (let (($x170 (and $x65 $x108)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x177 (and $x56 $x170)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x60 (and $x6 $x177)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x28 (and $x43 $x60)))
 (let (($x104 (=> $x28 $x17)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x16 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x15))))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (=> $x107 (= ?x175 ?x119))))))))))
 ))
 (let (($x245 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (= $x107 (bvuge ?x213 (_ bv1 32))))))))
 ))
 (let (($x144 (forall ((Lambda1 (_ BitVec 32)) )(let (($x194 (= false false)))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x51 (_ bv0 32))))
 (=> $x68 $x194))))))
 ))
 (let (($x235 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x51 (_ bv0 32))))
 (= $x68 (= ?x213 (_ bv0 32))))))))
 ))
 (let (($x238 (and $x235 $x144)))
 (let (($x241 (and $x238 $x245)))
 (let (($x44 (and $x241 $x16)))
 (let (($x18 (= $x44 true)))
 (let (($x17 (= $x18 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x233 (concat ?x202 (concat ?x204 (concat ?x236 ?x133)))))
 (let (($x69 (= input.dst.llvm-%n ?x233)))
 (let ((?x220 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x96 (concat ?x99 (concat ?x97 ?x220)))))
 (let (($x26 (= input.dst.llvm-%x ?x55)))
 (let (($x179 (and $x26 $x69)))
 (let (($x135 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and $x135 $x179)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x7)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x122)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x24 $x19)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x156 $x147)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x208 $x42)))
 (let (($x59 (not $x103)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x83 $x141)))
 (let (($x86 (and (not $x92) $x59)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x155 $x90)))
 (let (($x109 (not $x39)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x150 $x239)))
 (let (($x120 (and (not $x153) $x109)))
 (let (($x13 (and (and (and (and (and (and $x120 $x86) $x161) $x206) $x209) $x130) $x114)))
 (let (($x98 (and $x13 $x57)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x82 (or false (or false (and (and true (or $x67 $x197)) (or $x195 $x63))))))
 (let (($x230 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x123 (and (and (and $x230 $x44) $x98) $x160)))
 (let (($x134 (= $x123 true)))
 (let (($x108 (= $x134 true)))
 (let (($x126 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (=> $x107 (= ?x175 ?x105))))))))
 ))
 (let (($x106 (forall ((Lambda1 (_ BitVec 32)) )(let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x51 (_ bv1 32))))
 (= $x107 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x21 (forall ((Lambda1 (_ BitVec 32)) )(let (($x58 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x51 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x68 (= ?x51 (_ bv0 32))))
 (= $x68 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x180 (and $x21 $x144)))
 (let (($x172 (and $x180 $x106)))
 (let (($x65 (and $x172 $x126)))
 (let (($x170 (and $x65 $x108)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x177 (and $x56 $x170)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x60 (and $x6 $x177)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x28 (and $x43 $x60)))
 (let (($x104 (=> $x28 $x17)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (= false true)))
 (let (($x242 (= $x146 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x78 (concat ?x171 (concat ?x41 ?x136)))))
 (let (($x168 (= input.dst.llvm-%n ?x219)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x93 (concat ?x154 (concat ?x152 ?x193)))))
 (let (($x88 (= input.dst.llvm-%x ?x149)))
 (let (($x94 (and $x88 $x168)))
 (let (($x217 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x33 (and $x217 $x94)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x18)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x60)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x179 $x123)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x69 $x134)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x72 $x202)))
 (let (($x204 (not $x191)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x66 $x55)))
 (let (($x236 (and (not $x26) $x204)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x187 $x99)))
 (let (($x97 (not $x64)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x135 $x186)))
 (let (($x34 (and (not $x96) $x97)))
 (let (($x201 (and (and (and (and (and (and $x34 $x236) $x151) $x233) $x108) $x177) $x28)))
 (let (($x70 (and $x201 $x17)))
 (let (($x112 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x130))))
 (let ((?x169 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (=> $x5 (= ?x169 ?x57))))))))))
 ))
 (let (($x39 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (= $x5 (bvuge ?x16 (_ bv1 32))))))))
 ))
 (let (($x126 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (= false false)))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x113 (_ bv0 32))))
 (=> $x106 $x105))))))
 ))
 (let (($x150 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x113 (_ bv0 32))))
 (= $x106 (= ?x16 (_ bv0 32))))))))
 ))
 (let (($x239 (and $x150 $x126)))
 (let (($x109 (and $x239 $x39)))
 (let (($x157 (and $x109 $x112)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x167 (or false (or false (and (and true (or $x244 $x245)) (or $x139 $x221))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x167)))
 (let (($x207 (and (and (and $x12 $x157) $x70) $x33)))
 (let (($x127 (= $x207 true)))
 (let (($x200 (= $x127 true)))
 (let (($x230 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x169 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (=> $x5 (= ?x169 ?x36))))))))
 ))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (= $x5 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x175 (forall ((Lambda1 (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x113 (_ bv0 32))))
 (= $x106 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x65 (and $x175 $x126)))
 (let (($x197 (and $x65 $x71)))
 (let (($x228 (and $x197 $x230)))
 (let (($x234 (and $x228 $x200)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x190 (and $x56 $x234)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x128 (and $x6 $x190)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x52 (and $x43 $x128)))
 (let (($x162 (=> $x52 $x242)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x146 (= false true)))
 (let (($x242 (= $x146 true)))
 (let ((?x136 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x78 (concat ?x171 (concat ?x41 ?x136)))))
 (let (($x168 (= input.dst.llvm-%n ?x219)))
 (let ((?x193 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x93 (concat ?x154 (concat ?x152 ?x193)))))
 (let (($x88 (= input.dst.llvm-%x ?x149)))
 (let (($x94 (and $x88 $x168)))
 (let (($x217 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x33 (and $x217 $x94)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x17 (= (_ bv0 32) ?x18)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x60)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x160)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x179 $x123)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x69 $x134)))
 (let (($x233 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x72 $x202)))
 (let (($x204 (not $x191)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x66 $x55)))
 (let (($x236 (and (not $x26) $x204)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x187 $x99)))
 (let (($x97 (not $x64)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x135 $x186)))
 (let (($x34 (and (not $x96) $x97)))
 (let (($x201 (and (and (and (and (and (and $x34 $x236) $x151) $x233) $x108) $x177) $x28)))
 (let (($x70 (and $x201 $x17)))
 (let (($x112 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x130))))
 (let ((?x169 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (=> $x5 (= ?x169 ?x57))))))))))
 ))
 (let (($x39 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (= $x5 (bvuge ?x16 (_ bv1 32))))))))
 ))
 (let (($x126 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (= false false)))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x113 (_ bv0 32))))
 (=> $x106 $x105))))))
 ))
 (let (($x150 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x113 (_ bv0 32))))
 (= $x106 (= ?x16 (_ bv0 32))))))))
 ))
 (let (($x239 (and $x150 $x126)))
 (let (($x109 (and $x239 $x39)))
 (let (($x157 (and $x109 $x112)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x167 (or false (or false (and (and true (or $x244 $x245)) (or $x139 $x221))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x167)))
 (let (($x207 (and (and (and $x12 $x157) $x70) $x33)))
 (let (($x127 (= $x207 true)))
 (let (($x200 (= $x127 true)))
 (let (($x230 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x36 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x169 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (=> $x5 (= ?x169 ?x36))))))))
 ))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x113 (_ bv1 32))))
 (= $x5 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x175 (forall ((Lambda1 (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x113 (ite $x68 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x113 (_ bv0 32))))
 (= $x106 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x65 (and $x175 $x126)))
 (let (($x197 (and $x65 $x71)))
 (let (($x228 (and $x197 $x230)))
 (let (($x234 (and $x228 $x200)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x190 (and $x56 $x234)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x128 (and $x6 $x190)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x52 (and $x43 $x128)))
 (let (($x162 (=> $x52 $x242)))
 (not $x162))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00004c04)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002820)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00004c07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002823)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00004c04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002820)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00004c07)
                                   (k!0 #x00004c06)
                                   (k!0 #x00004c05)
                                   (k!0 #x00004c04)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00004c07)
                                   (k!0 #x00004c06)
                                   (k!0 #x00004c05)
                                   (k!0 #x00004c04)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00004c07)
                                   (k!0 #x00004c06)
                                   (k!0 #x00004c05)
                                   (k!0 #x00004c04)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00004c07)
                                   (k!0 #x00004c06)
                                   (k!0 #x00004c05)
                                   (k!0 #x00004c04))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf6524c2c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1e6c7fa8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1e6c7fab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf6524c2f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1e6c7fa8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf6524c2c)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1e6c7fab)
                                   (k!0 #x1e6c7faa)
                                   (k!0 #x1e6c7fa9)
                                   (k!0 #x1e6c7fa8)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1e6c7fab)
                                   (k!0 #x1e6c7faa)
                                   (k!0 #x1e6c7fa9)
                                   (k!0 #x1e6c7fa8)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x1e6c7fab)
                                   (k!0 #x1e6c7faa)
                                   (k!0 #x1e6c7fa9)
                                   (k!0 #x1e6c7fa8)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x1e6c7fab)
                                   (k!0 #x1e6c7faa)
                                   (k!0 #x1e6c7fa9)
                                   (k!0 #x1e6c7fa8))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 ((_ extract 4 0) input.dst.llvm-%x)))
 (let ((?x50 (bvmul (_ bv31 5) ?x129)))
 (let ((?x203 ((_ extract 4 0) input.dst.llvm-%n)))
 (let ((?x37 (bvadd ?x203 ?x50)))
 (let (($x218 (= (_ bv0 5) ?x37)))
 (let (($x165 (= $x218 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x125 (concat ?x216 (concat ?x188 ?x63)))))
 (let (($x87 (= input.dst.llvm-%n ?x49)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x45 (concat ?x86 (concat ?x103 ?x95)))))
 (let (($x189 (= input.dst.llvm-%x ?x118)))
 (let (($x75 (and $x189 $x87)))
 (let (($x206 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x182 (and $x206 $x75)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x52)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x190)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (and $x168 $x33)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x219 $x207)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x88 $x181)))
 (let (($x30 (not $x78)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x205 $x158)))
 (let (($x31 (and (not $x149) $x30)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x93 $x77)))
 (let (($x192 (not $x154)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x81 $x217)))
 (let (($x193 (and (not $x76) $x192)))
 (let (($x32 (and (and (and (and (and (and $x193 $x31) $x136) $x101) $x127) $x234) $x128)))
 (let (($x38 (and $x32 $x146)))
 (let (($x46 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x123 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x170))))
 (let ((?x241 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (=> $x235 (= ?x241 ?x18))))))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x29 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (= $x235 (bvuge ?x29 (_ bv1 32))))))))
 ))
 (let (($x82 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (= false false)))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x224 (_ bv0 32))))
 (=> $x67 $x169))))))
 ))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x29 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x224 (_ bv0 32))))
 (= $x67 (= ?x29 (_ bv0 32))))))))
 ))
 (let (($x135 (and $x148 $x82)))
 (let (($x64 (and $x135 $x99)))
 (let (($x243 (and $x64 $x46)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x239)))
 (let (($x7 (or false (or false (and (and true (or $x155 $x90)) (or $x19 $x23))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x115 (and (and (and $x79 $x243) $x38) $x182)))
 (let (($x229 (= $x115 true)))
 (let (($x183 (= $x229 true)))
 (let (($x167 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x139 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x241 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (=> $x235 (= ?x241 ?x139))))))))
 ))
 (let (($x244 (forall ((Lambda1 (_ BitVec 32)) )(let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (= $x235 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x224 (_ bv0 32))))
 (= $x67 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x230 (and $x197 $x82)))
 (let (($x238 (and $x230 $x244)))
 (let (($x12 (and $x238 $x167)))
 (let (($x215 (and $x12 $x183)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x173 (and $x178 $x215)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x15 (and $x47 $x173)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x222 (and $x121 $x15)))
 (let (($x53 (=> $x222 $x165)))
 (not $x53))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x129 ((_ extract 4 0) input.dst.llvm-%x)))
 (let ((?x50 (bvmul (_ bv31 5) ?x129)))
 (let ((?x203 ((_ extract 4 0) input.dst.llvm-%n)))
 (let ((?x37 (bvadd ?x203 ?x50)))
 (let (($x218 (= (_ bv0 5) ?x37)))
 (let (($x165 (= $x218 true)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x125 (concat ?x216 (concat ?x188 ?x63)))))
 (let (($x87 (= input.dst.llvm-%n ?x49)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x45 (concat ?x86 (concat ?x103 ?x95)))))
 (let (($x189 (= input.dst.llvm-%x ?x118)))
 (let (($x75 (and $x189 $x87)))
 (let (($x206 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x182 (and $x206 $x75)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x52)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x190)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (and $x168 $x33)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (and $x219 $x207)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x88 $x181)))
 (let (($x30 (not $x78)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x205 $x158)))
 (let (($x31 (and (not $x149) $x30)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x93 $x77)))
 (let (($x192 (not $x154)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x81 $x217)))
 (let (($x193 (and (not $x76) $x192)))
 (let (($x32 (and (and (and (and (and (and $x193 $x31) $x136) $x101) $x127) $x234) $x128)))
 (let (($x38 (and $x32 $x146)))
 (let (($x46 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x123 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x170))))
 (let ((?x241 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (=> $x235 (= ?x241 ?x18))))))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x29 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (= $x235 (bvuge ?x29 (_ bv1 32))))))))
 ))
 (let (($x82 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (= false false)))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x224 (_ bv0 32))))
 (=> $x67 $x169))))))
 ))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x29 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x224 (_ bv0 32))))
 (= $x67 (= ?x29 (_ bv0 32))))))))
 ))
 (let (($x135 (and $x148 $x82)))
 (let (($x64 (and $x135 $x99)))
 (let (($x243 (and $x64 $x46)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x239 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x239)))
 (let (($x7 (or false (or false (and (and true (or $x155 $x90)) (or $x19 $x23))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x115 (and (and (and $x79 $x243) $x38) $x182)))
 (let (($x229 (= $x115 true)))
 (let (($x183 (= $x229 true)))
 (let (($x167 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x139 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x241 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (=> $x235 (= ?x241 ?x139))))))))
 ))
 (let (($x244 (forall ((Lambda1 (_ BitVec 32)) )(let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (bvuge ?x224 (_ bv1 32))))
 (= $x235 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let (($x113 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x224 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x224 (_ bv0 32))))
 (= $x67 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x230 (and $x197 $x82)))
 (let (($x238 (and $x230 $x244)))
 (let (($x12 (and $x238 $x167)))
 (let (($x215 (and $x12 $x183)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x173 (and $x178 $x215)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x15 (and $x47 $x173)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x222 (and $x121 $x15)))
 (let (($x53 (=> $x222 $x165)))
 (not $x53))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2000c004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00017830)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2000c007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00017833)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2000c004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00017830)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2000c004) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!7 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x2000c007)
                                   (k!7 #x2000c006)
                                   (k!7 #x2000c005)
                                   (k!7 #x2000c004)))))
          (a!2 (k!7 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x2000c007)
                                   (k!7 #x2000c006)
                                   (k!7 #x2000c005)
                                   (k!7 #x2000c004)))))
          (a!3 (k!7 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x2000c007)
                                   (k!7 #x2000c006)
                                   (k!7 #x2000c005)
                                   (k!7 #x2000c004)))))
          (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!7 #x2000c007)
                                   (k!7 #x2000c006)
                                   (k!7 #x2000c005)
                                   (k!7 #x2000c004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x09698e80)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbf994c84)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xdf773f00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbf994c87)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x09698e83)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbf994c84)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x09698e80)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdf773f01) #x00
    (ite (= x!0 #xbf994c86) #x77
    (ite (= x!0 #xdf773f03) #x00
    (ite (= x!0 #xbf994c85) #x3f
    (ite (= x!0 #xdf773f02) #x00
    (ite (= x!0 #xdf773f00) #x00
    (ite (= x!0 #xbf994c87) #xdf
    (ite (= x!0 #xbf994c84) #x00
      #x08)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xbf994c87)
                                     (k!7 #xbf994c86)
                                     (k!7 #xbf994c85)
                                     (k!7 #xbf994c84)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xbf994c87)
                                     (k!7 #xbf994c86)
                                     (k!7 #xbf994c85)
                                     (k!7 #xbf994c84)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xbf994c87)
                                     (k!7 #xbf994c86)
                                     (k!7 #xbf994c85)
                                     (k!7 #xbf994c84)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #xbf994c87)
                                     (k!7 #xbf994c86)
                                     (k!7 #xbf994c85)
                                     (k!7 #xbf994c84))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08080808 x!0)
         (ite (bvule #x08080809 x!0) #x08080809 #x08080808)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x208 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (= $x208 false)))
 (let (($x138 (= $x212 true)))
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x159 true)))
 (let (($x199 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (= $x199 true)))
 (let (($x80 (= $x22 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x69 true)))
 (let (($x91 (= $x179 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x209 true)))
 (let (($x186 (= $x130 true)))
 (let (($x61 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x21 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x184))))
 (let ((?x39 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (=> $x163 (= ?x39 ?x245))))))))))
 ))
 (let (($x73 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x50 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (= $x163 (bvuge ?x50 (_ bv1 32))))))))
 ))
 (let (($x225 (forall ((Lambda1 (_ BitVec 32)) )(let (($x241 (= false false)))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x137 (_ bv0 32))))
 (=> $x117 $x241))))))
 ))
 (let (($x165 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x50 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x137 (_ bv0 32))))
 (= $x117 (= ?x50 (_ bv0 32))))))))
 ))
 (let (($x53 (and $x165 $x225)))
 (let (($x34 (and $x53 $x73)))
 (let (($x119 (and $x34 $x61)))
 (let (($x122 (= $x119 true)))
 (let (($x111 (= $x122 true)))
 (let (($x75 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x75 true)))
 (let (($x115 (= $x182 true)))
 (let ((?x156 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x45 (bvadd input.dst.llvm-%x ?x156)))
 (let (($x102 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x45 (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x118 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x63 (or false (or false (and (and true (or $x143 $x118)) (or $x125 $x102))))))
 (let (($x144 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) $x63)))
 (let (($x86 (=> (and $x208 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) $x63)))
 (let (($x161 (= $x86 true)))
 (let (($x49 (= $x161 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x33)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x168)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x242 $x162)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x31 $x35)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x192 $x193)))
 (let (($x158 (not $x205)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x93 $x77)))
 (let (($x171 (and (not $x154) $x158)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x243 $x195)))
 (let (($x217 (not $x81)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x99 $x64)))
 (let (($x152 (and (not $x46) $x217)))
 (let (($x190 (and (and (and (and (and (and $x152 $x171) $x181) $x30) $x101) $x219) $x94)))
 (let (($x128 (and $x190 $x207)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x18 (or false (or false (and (and true (or $x27 $x28)) (or $x108 $x84))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x32 (and $x70 $x128)))
 (let (($x52 (= $x32 true)))
 (let (($x146 (= $x52 true)))
 (let (($x157 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x157 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x98 (= (_ bv0 2) ?x114)))
 (let (($x29 (= $x98 true)))
 (let (($x135 (and $x29 $x148)))
 (let (($x38 (and $x135 $x146)))
 (let (($x87 (and $x38 $x49)))
 (let (($x229 (and $x87 $x115)))
 (let (($x40 (and $x229 $x111)))
 (let (($x96 (and $x40 $x186)))
 (let (($x14 (and $x96 $x91)))
 (let (($x131 (and $x14 $x80)))
 (let (($x176 (and $x131 $x100)))
 (let (($x7 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x19 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x39 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (=> $x163 (= ?x39 ?x19))))))))
 ))
 (let (($x155 (forall ((Lambda1 (_ BitVec 32)) )(let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (= $x163 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1 (_ BitVec 32)) )(let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x137 (_ bv0 32))))
 (= $x117 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x167 (and $x238 $x225)))
 (let (($x150 (and $x167 $x155)))
 (let (($x79 (and $x150 $x7)))
 (let (($x164 (and $x79 $x176)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x132 (and $x6 $x164)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x20 (and $x166 $x132)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x174 (and $x92 $x20)))
 (let (($x142 (=> $x174 $x138)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x208 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x212 (= $x208 false)))
 (let (($x138 (= $x212 true)))
 (let (($x159 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x100 (= $x159 true)))
 (let (($x199 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x22 (= $x199 true)))
 (let (($x80 (= $x22 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x69 true)))
 (let (($x91 (= $x179 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (= $x209 true)))
 (let (($x186 (= $x130 true)))
 (let (($x61 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x21 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x245 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x184))))
 (let ((?x39 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (=> $x163 (= ?x39 ?x245))))))))))
 ))
 (let (($x73 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x50 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (= $x163 (bvuge ?x50 (_ bv1 32))))))))
 ))
 (let (($x225 (forall ((Lambda1 (_ BitVec 32)) )(let (($x241 (= false false)))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x137 (_ bv0 32))))
 (=> $x117 $x241))))))
 ))
 (let (($x165 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x50 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x137 (_ bv0 32))))
 (= $x117 (= ?x50 (_ bv0 32))))))))
 ))
 (let (($x53 (and $x165 $x225)))
 (let (($x34 (and $x53 $x73)))
 (let (($x119 (and $x34 $x61)))
 (let (($x122 (= $x119 true)))
 (let (($x111 (= $x122 true)))
 (let (($x75 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x75 true)))
 (let (($x115 (= $x182 true)))
 (let ((?x156 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x45 (bvadd input.dst.llvm-%x ?x156)))
 (let (($x102 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd ?x45 (_ bv3 32))))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x118 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x63 (or false (or false (and (and true (or $x143 $x118)) (or $x125 $x102))))))
 (let (($x144 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) $x63)))
 (let (($x86 (=> (and $x208 (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32)))) $x63)))
 (let (($x161 (= $x86 true)))
 (let (($x49 (= $x161 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x33)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x168)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x242 $x162)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x31 $x35)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x192 $x193)))
 (let (($x158 (not $x205)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x93 $x77)))
 (let (($x171 (and (not $x154) $x158)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x243 $x195)))
 (let (($x217 (not $x81)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x99 $x64)))
 (let (($x152 (and (not $x46) $x217)))
 (let (($x190 (and (and (and (and (and (and $x152 $x171) $x181) $x30) $x101) $x219) $x94)))
 (let (($x128 (and $x190 $x207)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x18 (or false (or false (and (and true (or $x27 $x28)) (or $x108 $x84))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x32 (and $x70 $x128)))
 (let (($x52 (= $x32 true)))
 (let (($x146 (= $x52 true)))
 (let (($x157 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x148 (= $x157 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x98 (= (_ bv0 2) ?x114)))
 (let (($x29 (= $x98 true)))
 (let (($x135 (and $x29 $x148)))
 (let (($x38 (and $x135 $x146)))
 (let (($x87 (and $x38 $x49)))
 (let (($x229 (and $x87 $x115)))
 (let (($x40 (and $x229 $x111)))
 (let (($x96 (and $x40 $x186)))
 (let (($x14 (and $x96 $x91)))
 (let (($x131 (and $x14 $x80)))
 (let (($x176 (and $x131 $x100)))
 (let (($x7 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x19 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x39 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (=> $x163 (= ?x39 ?x19))))))))
 ))
 (let (($x155 (forall ((Lambda1 (_ BitVec 32)) )(let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x137 (_ bv1 32))))
 (= $x163 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x238 (forall ((Lambda1 (_ BitVec 32)) )(let (($x224 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x137 (ite $x224 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x137 (_ bv0 32))))
 (= $x117 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x167 (and $x238 $x225)))
 (let (($x150 (and $x167 $x155)))
 (let (($x79 (and $x150 $x7)))
 (let (($x164 (and $x79 $x176)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x132 (and $x6 $x164)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x20 (and $x166 $x132)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x174 (and $x92 $x20)))
 (let (($x142 (=> $x174 $x138)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40304060)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa0380080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x23980824)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa0380083)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x23980827)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa0380080)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x23980824)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x40304063 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x40304062 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x40304061 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x40304060 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x20000000 x!0)
         (ite (bvule #x20000001 x!0) #x20000001 #x20000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc6000340)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x91c12110)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb2010144)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb2010147)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc6000343)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb2010144)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc6000340)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!7 (bvadd #x91c12113 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x91c12112 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x91c12111 (bvmul #x00000004 x!0)))
              (k!7 (bvadd #x91c12110 (bvmul #x00000004 x!0))))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000020 x!0)
         (ite (bvule #x00000021 x!0) #x00000021 #x00000020)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x36 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x272 (= $x271 true)))
 (let (($x267 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x262 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x12))))
 (let ((?x17 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x167 (_ bv1 32))))
 (=> $x114 (= ?x17 ?x147))))))))))
 ))
 (let (($x256 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x212 (_ bv1 32))))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x167 (_ bv1 32))))
 (= $x114 $x42)))))))
 ))
 (let (($x252 (forall ((Lambda1 (_ BitVec 32)) )(let (($x39 (= false false)))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x167 (_ bv0 32))))
 (=> $x163 $x39))))))
 ))
 (let (($x249 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x212 (_ bv0 32))))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x167 (_ bv0 32))))
 (= $x163 $x138)))))))
 ))
 (let (($x253 (and $x249 $x252)))
 (let (($x257 (and $x253 $x256)))
 (let (($x263 (and $x257 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x265 (= $x264 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x8 true)))
 (let (($x226 (= $x116 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x185 true)))
 (let (($x223 (= $x175 true)))
 (let (($x173 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x12))))
 (let ((?x135 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (=> $x98 (= ?x135 ?x147))))))))))
 ))
 (let (($x106 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x212 (_ bv1 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (= $x98 $x42)))))))
 ))
 (let (($x13 (forall ((Lambda1 (_ BitVec 32)) )(let (($x39 (= false false)))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x198 (_ bv0 32))))
 (=> $x239 $x39))))))
 ))
 (let (($x62 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x212 (_ bv0 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x198 (_ bv0 32))))
 (= $x239 $x138)))))))
 ))
 (let (($x10 (and $x62 $x13)))
 (let (($x56 (and $x10 $x106)))
 (let (($x15 (and $x56 $x173)))
 (let (($x222 (= $x15 true)))
 (let (($x153 (= $x222 true)))
 (let ((?x105 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd input.dst.llvm-%x ?x105)))
 (let (($x130 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x107 (_ bv3 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x122 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x179 (or false (or false (and (and true (or $x119 $x122)) (or $x209 $x130))))))
 (let (($x14 (=> (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32))) $x179)))
 (let (($x228 (=> (and $x36 (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32)))) $x179)))
 (let (($x245 (= $x228 true)))
 (let (($x199 (= $x245 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x21 true)))
 (let (($x11 (= $x232 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x24)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x115)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x63 $x161)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x188 $x49)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x210 $x59)))
 (let (($x118 (not $x143)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x45 $x103)))
 (let (($x180 (and (not $x95) $x118)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x146 $x38)))
 (let (($x208 (not $x83)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x78 $x30)))
 (let (($x156 (and (not $x52) $x208)))
 (let (($x53 (and (and (and (and (and (and $x156 $x180) $x102) $x58) $x87) $x182) $x229)))
 (let (($x213 (and $x53 $x203)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x207 (or false (or false (and (and true (or $x162 $x35)) (or $x124 $x168))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x207)))
 (let (($x194 (and $x32 $x213)))
 (let (($x73 (= $x194 true)))
 (let (($x34 (= $x73 true)))
 (let (($x171 (= (_ bv0 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let (($x127 (= $x171 true)))
 (let (($x192 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x193 (= $x192 true)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x77 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x81 (= $x195 true)))
 (let (($x217 (= $x81 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x46 (= $x64 true)))
 (let (($x76 (= $x46 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x18 (= $x60 true)))
 (let (($x70 (= $x18 true)))
 (let ((?x89 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x84 (= (_ bv0 2) ?x89)))
 (let (($x134 (= $x84 true)))
 (let (($x99 (and $x134 $x70)))
 (let (($x243 (and $x99 $x76)))
 (let (($x152 (and $x243 $x217)))
 (let (($x149 (and $x152 $x154)))
 (let (($x205 (and $x149 $x193)))
 (let (($x88 (and $x205 $x127)))
 (let (($x196 (and $x88 $x34)))
 (let (($x72 (and $x196 $x11)))
 (let (($x22 (and $x72 $x199)))
 (let (($x145 (and $x22 $x153)))
 (let (($x211 (and $x145 $x223)))
 (let (($x227 (and $x211 $x226)))
 (let (($x266 (and $x227 $x265)))
 (let (($x270 (and $x266 $x269)))
 (let (($x273 (and $x270 $x272)))
 (let (($x201 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x17 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x135 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (=> $x98 (= ?x135 ?x17))))))))
 ))
 (let (($x112 (forall ((Lambda1 (_ BitVec 32)) )(let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x167 (_ bv1 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (= $x98 $x114))))))))
 ))
 (let (($x150 (forall ((Lambda1 (_ BitVec 32)) )(let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x167 (_ bv0 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x198 (_ bv0 32))))
 (= $x239 $x163))))))))
 ))
 (let (($x7 (and $x150 $x13)))
 (let (($x157 (and $x7 $x112)))
 (let (($x236 (and $x157 $x201)))
 (let (($x274 (and $x236 $x273)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x275 (and $x43 $x274)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x276 (and $x6 $x275)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x277 (and $x237 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x36 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x36 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x272 (= $x271 true)))
 (let (($x267 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x268 (= $x267 true)))
 (let (($x269 (= $x268 true)))
 (let (($x262 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x12))))
 (let ((?x17 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x167 (_ bv1 32))))
 (=> $x114 (= ?x17 ?x147))))))))))
 ))
 (let (($x256 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x212 (_ bv1 32))))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x167 (_ bv1 32))))
 (= $x114 $x42)))))))
 ))
 (let (($x252 (forall ((Lambda1 (_ BitVec 32)) )(let (($x39 (= false false)))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x167 (_ bv0 32))))
 (=> $x163 $x39))))))
 ))
 (let (($x249 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x212 (_ bv0 32))))
 (let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x167 (_ bv0 32))))
 (= $x163 $x138)))))))
 ))
 (let (($x253 (and $x249 $x252)))
 (let (($x257 (and $x253 $x256)))
 (let (($x263 (and $x257 $x262)))
 (let (($x264 (= $x263 true)))
 (let (($x265 (= $x264 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x116 (= $x8 true)))
 (let (($x226 (= $x116 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x175 (= $x185 true)))
 (let (($x223 (= $x175 true)))
 (let (($x173 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x169 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x12))))
 (let ((?x135 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (=> $x98 (= ?x135 ?x147))))))))))
 ))
 (let (($x106 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x212 (_ bv1 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (= $x98 $x42)))))))
 ))
 (let (($x13 (forall ((Lambda1 (_ BitVec 32)) )(let (($x39 (= false false)))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x198 (_ bv0 32))))
 (=> $x239 $x39))))))
 ))
 (let (($x62 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x138 (= ?x212 (_ bv0 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x198 (_ bv0 32))))
 (= $x239 $x138)))))))
 ))
 (let (($x10 (and $x62 $x13)))
 (let (($x56 (and $x10 $x106)))
 (let (($x15 (and $x56 $x173)))
 (let (($x222 (= $x15 true)))
 (let (($x153 (= $x222 true)))
 (let ((?x105 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x107 (bvadd input.dst.llvm-%x ?x105)))
 (let (($x130 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x61 (bvadd ?x107 (_ bv3 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x61)))
 (let (($x122 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x61)))
 (let (($x179 (or false (or false (and (and true (or $x119 $x122)) (or $x209 $x130))))))
 (let (($x14 (=> (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32))) $x179)))
 (let (($x228 (=> (and $x36 (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32)))) $x179)))
 (let (($x245 (= $x228 true)))
 (let (($x199 (= $x245 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x232 (= $x21 true)))
 (let (($x11 (= $x232 true)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x24)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x115)))
 (let ((?x75 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x63 $x161)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x188 $x49)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x210 $x59)))
 (let (($x118 (not $x143)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x45 $x103)))
 (let (($x180 (and (not $x95) $x118)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x146 $x38)))
 (let (($x208 (not $x83)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x78 $x30)))
 (let (($x156 (and (not $x52) $x208)))
 (let (($x53 (and (and (and (and (and (and $x156 $x180) $x102) $x58) $x87) $x182) $x229)))
 (let (($x213 (and $x53 $x203)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x207 (or false (or false (and (and true (or $x162 $x35)) (or $x124 $x168))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x207)))
 (let (($x194 (and $x32 $x213)))
 (let (($x73 (= $x194 true)))
 (let (($x34 (= $x73 true)))
 (let (($x171 (= (_ bv0 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let (($x127 (= $x171 true)))
 (let (($x192 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x193 (= $x192 true)))
 (let (($x77 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x154 (= $x77 true)))
 (let (($x195 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x81 (= $x195 true)))
 (let (($x217 (= $x81 true)))
 (let (($x64 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x46 (= $x64 true)))
 (let (($x76 (= $x46 true)))
 (let (($x60 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x18 (= $x60 true)))
 (let (($x70 (= $x18 true)))
 (let ((?x89 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x84 (= (_ bv0 2) ?x89)))
 (let (($x134 (= $x84 true)))
 (let (($x99 (and $x134 $x70)))
 (let (($x243 (and $x99 $x76)))
 (let (($x152 (and $x243 $x217)))
 (let (($x149 (and $x152 $x154)))
 (let (($x205 (and $x149 $x193)))
 (let (($x88 (and $x205 $x127)))
 (let (($x196 (and $x88 $x34)))
 (let (($x72 (and $x196 $x11)))
 (let (($x22 (and $x72 $x199)))
 (let (($x145 (and $x22 $x153)))
 (let (($x211 (and $x145 $x223)))
 (let (($x227 (and $x211 $x226)))
 (let (($x266 (and $x227 $x265)))
 (let (($x270 (and $x266 $x269)))
 (let (($x273 (and $x270 $x272)))
 (let (($x201 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x17 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x135 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (=> $x98 (= ?x135 ?x17))))))))
 ))
 (let (($x112 (forall ((Lambda1 (_ BitVec 32)) )(let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x167 (_ bv1 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x198 (_ bv1 32))))
 (= $x98 $x114))))))))
 ))
 (let (($x150 (forall ((Lambda1 (_ BitVec 32)) )(let (($x244 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x167 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (= ?x167 (_ bv0 32))))
 (let (($x137 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x198 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x198 (_ bv0 32))))
 (= $x239 $x163))))))))
 ))
 (let (($x7 (and $x150 $x13)))
 (let (($x157 (and $x7 $x112)))
 (let (($x236 (and $x157 $x201)))
 (let (($x274 (and $x236 $x273)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x275 (and $x43 $x274)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x276 (and $x6 $x275)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x277 (and $x237 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x41800000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x86800010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000400)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x20800004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x86800013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x20800007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x86800010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x20800004)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000400 x!0)
         (ite (bvule #x00000401 x!0) #x00000401 #x00000400)
         #x00000000))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x41800003 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x41800002 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x41800001 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x41800000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x41800003 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x41800002 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x41800001 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x41800000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x759ae3b0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xb5d2e7a4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb788eb90)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb788eb93)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x759ae3b3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb788eb90)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x759ae3b0)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #xb5d2e7a7 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #xb5d2e7a6 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #xb5d2e7a5 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #xb5d2e7a4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00080000 x!0)
         (ite (bvule #x00080001 x!0) #x00080001 #x00080000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #xb5d2e7a7 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #xb5d2e7a6 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #xb5d2e7a5 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #xb5d2e7a4 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x247 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x247 (_ bv1 32))))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (not $x6)))
 (let (($x254 (or $x172 $x250)))
 (let (($x258 (= $x254 true)))
 (let (($x259 (= $x258 true)))
 (let ((?x123 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x27 (bvneg ?x123)))
 (let (($x80 (= ?x27 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x80 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x9 (= $x57 true)))
 (let (($x148 (= $x9 true)))
 (let (($x241 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x272))))
 (let ((?x219 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x93 (_ bv1 32))))
 (=> $x242 (= ?x219 ?x278))))))))))
 ))
 (let (($x238 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x15 (_ bv1 32))))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x93 (_ bv1 32))))
 (= $x242 $x211)))))))
 ))
 (let (($x68 (forall ((Lambda1 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x93 (_ bv0 32))))
 (=> $x77 $x205))))))
 ))
 (let (($x202 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x15 (_ bv0 32))))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x93 (_ bv0 32))))
 (= $x77 $x222)))))))
 ))
 (let (($x117 (and $x202 $x68)))
 (let (($x160 (and $x117 $x238)))
 (let (($x214 (and $x160 $x241)))
 (let (($x225 (= $x214 true)))
 (let (($x19 (= $x225 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x197 true)))
 (let (($x67 (= $x141 true)))
 (let (($x281 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x272))))
 (let ((?x234 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (=> $x136 (= ?x234 ?x278))))))))))
 ))
 (let (($x116 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x15 (_ bv1 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (= $x136 $x211)))))))
 ))
 (let (($x127 (forall ((Lambda1 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x154 (_ bv0 32))))
 (=> $x149 $x205))))))
 ))
 (let (($x145 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x15 (_ bv0 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x154 (_ bv0 32))))
 (= $x149 $x222)))))))
 ))
 (let (($x185 (and $x145 $x127)))
 (let (($x226 (and $x185 $x116)))
 (let (($x181 (and $x226 $x281)))
 (let (($x25 (= $x181 true)))
 (let (($x184 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x23 true)))
 (let (($x16 (= $x240 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x5 (= $x204 true)))
 (let (($x169 (= $x5 true)))
 (let (($x42 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x233 (= $x42 true)))
 (let (($x106 (= $x233 true)))
 (let (($x138 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x142 (= $x138 true)))
 (let (($x62 (= $x142 true)))
 (let (($x20 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x132 (= $x20 true)))
 (let (($x174 (= $x132 true)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x122)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x61)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x36 $x105)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (and $x126 $x107)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (and $x213 $x194)))
 (let (($x34 (not $x73)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x53 $x24)))
 (let (($x51 (and (not $x203) $x34)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x218 $x75)))
 (let (($x165 (not $x182)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x59 $x143)))
 (let (($x229 (and (not $x87) $x165)))
 (let (($x69 (and (and (and (and (and (and $x229 $x51) $x232) $x72) $x246) $x91) $x119)))
 (let (($x179 (and $x69 $x111)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x86 (or false (or false (and (and true (or $x125 $x102)) (or $x58 $x37))))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x14 (and $x49 $x179)))
 (let (($x228 (= $x14 true)))
 (let (($x245 (= $x228 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x103 (= (_ bv0 2) ?x45)))
 (let (($x95 (= $x103 true)))
 (let ((?x206 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x146 (bvneg ?x206)))
 (let (($x83 (= ?x146 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x83 true)))
 (let (($x189 (and $x208 $x95)))
 (let (($x199 (and $x189 $x245)))
 (let (($x212 (and $x199 $x174)))
 (let (($x10 (and $x212 $x62)))
 (let (($x56 (and $x10 $x106)))
 (let (($x120 (and $x56 $x169)))
 (let (($x44 (and $x120 $x16)))
 (let (($x133 (and $x44 $x184)))
 (let (($x178 (and $x133 $x67)))
 (let (($x79 (and $x178 $x19)))
 (let (($x66 (and $x79 $x148)))
 (let (($x159 (and $x66 $x131)))
 (let (($x32 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x219 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x234 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (=> $x136 (= ?x234 ?x219))))))))
 ))
 (let (($x41 (forall ((Lambda1 (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x93 (_ bv1 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (= $x136 $x242))))))))
 ))
 (let (($x193 (forall ((Lambda1 (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x93 (_ bv0 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x154 (_ bv0 32))))
 (= $x149 $x77))))))))
 ))
 (let (($x88 (and $x193 $x127)))
 (let (($x35 (and $x88 $x41)))
 (let (($x78 (and $x35 $x32)))
 (let (($x100 (and $x78 $x159)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x176 (and $x134 $x100)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x164 (and $x89 $x176)))
 (let (($x236 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x220 (and $x236 $x164)))
 (let ((?x55 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd input.dst.llvm-%x ?x55)))
 (let (($x112 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd ?x85 (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x74 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x26 (or false (or false (and (and true (or $x39 $x74)) (or $x29 $x112))))))
 (let (($x201 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x224 (=> (and $x6 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x187 (and $x224 $x220)))
 (let (($x282 (=> $x187 $x259)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x65 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x247 (ite $x65 (_ bv1 32) (_ bv0 32))))
 (let (($x250 (bvuge ?x247 (_ bv1 32))))
 (let (($x6 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (not $x6)))
 (let (($x254 (or $x172 $x250)))
 (let (($x258 (= $x254 true)))
 (let (($x259 (= $x258 true)))
 (let ((?x123 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x27 (bvneg ?x123)))
 (let (($x80 (= ?x27 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x80 true)))
 (let (($x57 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x9 (= $x57 true)))
 (let (($x148 (= $x9 true)))
 (let (($x241 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x272))))
 (let ((?x219 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x93 (_ bv1 32))))
 (=> $x242 (= ?x219 ?x278))))))))))
 ))
 (let (($x238 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x15 (_ bv1 32))))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x93 (_ bv1 32))))
 (= $x242 $x211)))))))
 ))
 (let (($x68 (forall ((Lambda1 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x93 (_ bv0 32))))
 (=> $x77 $x205))))))
 ))
 (let (($x202 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x15 (_ bv0 32))))
 (let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x93 (_ bv0 32))))
 (= $x77 $x222)))))))
 ))
 (let (($x117 (and $x202 $x68)))
 (let (($x160 (and $x117 $x238)))
 (let (($x214 (and $x160 $x241)))
 (let (($x225 (= $x214 true)))
 (let (($x19 (= $x225 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x197 true)))
 (let (($x67 (= $x141 true)))
 (let (($x281 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x268 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv1 32))) (select input.dst.llvm-mem ?x268))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x268 (_ bv2 32))) ?x272))))
 (let ((?x234 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (=> $x136 (= ?x234 ?x278))))))))))
 ))
 (let (($x116 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x15 (_ bv1 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (= $x136 $x211)))))))
 ))
 (let (($x127 (forall ((Lambda1 (_ BitVec 32)) )(let (($x205 (= false false)))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x154 (_ bv0 32))))
 (=> $x149 $x205))))))
 ))
 (let (($x145 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x15 (_ bv0 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x154 (_ bv0 32))))
 (= $x149 $x222)))))))
 ))
 (let (($x185 (and $x145 $x127)))
 (let (($x226 (and $x185 $x116)))
 (let (($x181 (and $x226 $x281)))
 (let (($x25 (= $x181 true)))
 (let (($x184 (= $x25 true)))
 (let (($x23 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x23 true)))
 (let (($x16 (= $x240 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x5 (= $x204 true)))
 (let (($x169 (= $x5 true)))
 (let (($x42 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x233 (= $x42 true)))
 (let (($x106 (= $x233 true)))
 (let (($x138 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x142 (= $x138 true)))
 (let (($x62 (= $x142 true)))
 (let (($x20 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x132 (= $x20 true)))
 (let (($x174 (= $x132 true)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x122)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x61)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x110 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x110)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (and $x36 $x105)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (and $x126 $x107)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (and $x213 $x194)))
 (let (($x34 (not $x73)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x53 $x24)))
 (let (($x51 (and (not $x203) $x34)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x182 (and $x218 $x75)))
 (let (($x165 (not $x182)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x59 $x143)))
 (let (($x229 (and (not $x87) $x165)))
 (let (($x69 (and (and (and (and (and (and $x229 $x51) $x232) $x72) $x246) $x91) $x119)))
 (let (($x179 (and $x69 $x111)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x102 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x86 (or false (or false (and (and true (or $x125 $x102)) (or $x58 $x37))))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x14 (and $x49 $x179)))
 (let (($x228 (= $x14 true)))
 (let (($x245 (= $x228 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x103 (= (_ bv0 2) ?x45)))
 (let (($x95 (= $x103 true)))
 (let ((?x206 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x146 (bvneg ?x206)))
 (let (($x83 (= ?x146 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x83 true)))
 (let (($x189 (and $x208 $x95)))
 (let (($x199 (and $x189 $x245)))
 (let (($x212 (and $x199 $x174)))
 (let (($x10 (and $x212 $x62)))
 (let (($x56 (and $x10 $x106)))
 (let (($x120 (and $x56 $x169)))
 (let (($x44 (and $x120 $x16)))
 (let (($x133 (and $x44 $x184)))
 (let (($x178 (and $x133 $x67)))
 (let (($x79 (and $x178 $x19)))
 (let (($x66 (and $x79 $x148)))
 (let (($x159 (and $x66 $x131)))
 (let (($x32 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x219 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x234 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (=> $x136 (= ?x234 ?x219))))))))
 ))
 (let (($x41 (forall ((Lambda1 (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x93 (_ bv1 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x154 (_ bv1 32))))
 (= $x136 $x242))))))))
 ))
 (let (($x193 (forall ((Lambda1 (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (= ?x93 (_ bv0 32))))
 (let (($x70 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x154 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x154 (_ bv0 32))))
 (= $x149 $x77))))))))
 ))
 (let (($x88 (and $x193 $x127)))
 (let (($x35 (and $x88 $x41)))
 (let (($x78 (and $x35 $x32)))
 (let (($x100 (and $x78 $x159)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x176 (and $x134 $x100)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x164 (and $x89 $x176)))
 (let (($x236 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x220 (and $x236 $x164)))
 (let ((?x55 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd input.dst.llvm-%x ?x55)))
 (let (($x112 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x150 (bvadd ?x85 (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x150)))
 (let (($x74 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x150)))
 (let (($x26 (or false (or false (and (and true (or $x39 $x74)) (or $x29 $x112))))))
 (let (($x201 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x224 (=> (and $x6 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x187 (and $x224 $x220)))
 (let (($x282 (=> $x187 $x259)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 234 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x304 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x305 (bvmul (_ bv4294967295 32) ?x304)))
 (let ((?x306 (bvneg ?x305)))
 (let (($x308 (= ?x306 ?x307)))
 (let (($x309 (= $x308 true)))
 (let ((?x293 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x294 (bvneg ?x293)))
 (let (($x295 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x296 (= $x295 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x290 (= $x289 true)))
 (let (($x291 (= $x290 true)))
 (let (($x285 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (= $x285 true)))
 (let (($x287 (= $x286 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (= $x166 true)))
 (let (($x71 (= $x113 true)))
 (let (($x265 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x266 (= $x265 true)))
 (let (($x104 (= $x266 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x147 (= $x90 true)))
 (let (($x175 (= $x147 true)))
 (let ((?x237 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x237)))
 (let ((?x158 (bvsub ?x6 ?x237)))
 (let (($x101 (ite (bvsge ?x237 (_ bv0 32)) (bvuge ?x6 ?x158) (bvult ?x6 ?x158))))
 (let (($x81 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x217 (ite $x81 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x64 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x64)))
 (let ((?x76 ((_ extract 63 32) ?x46)))
 (let (($x152 (= ?x76 ?x217)))
 (let (($x124 (and $x152 $x101)))
 (let (($x168 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x94 (and $x168 $x124)))
 (let (($x190 (= true $x94)))
 (let (($x151 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x151 $x190)))
 (let (($x139 (= $x82 true)))
 (let (($x231 (= $x139 true)))
 (let (($x261 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x264 (= $x261 true)))
 (let (($x99 (= $x264 true)))
 (let (($x252 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x253 (= $x252 true)))
 (let (($x251 (= $x253 true)))
 (let (($x263 (= $x151 true)))
 (let (($x257 (= $x263 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x250)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x65)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x187)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x159 $x176)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x131 $x164)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x225 $x19)))
 (let (($x57 (not $x79)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (and $x235 $x241)))
 (let (($x148 (and (not $x214) $x57)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x68 $x117)))
 (let (($x238 (not $x97)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x269 $x272)))
 (let (($x230 (and (not $x109) $x238)))
 (let (($x248 (and (and (and (and (and (and $x230 $x148) $x123) $x80) $x220) $x172) $x247)))
 (let (($x121 (and $x248 $x254)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x281 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x280 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x178 (or false (or false (and (and true (or $x280 $x281)) (or $x184 $x133))))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x210 (and $x202 $x121)))
 (let (($x43 (= $x210 true)))
 (let (($x249 (= $x43 true)))
 (let (($x277 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x10))))
 (let ((?x161 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x162 (_ bv1 32))))
 (=> $x83 (= ?x161 ?x5))))))))))
 ))
 (let (($x116 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x232 (_ bv1 32))))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x162 (_ bv1 32))))
 (= $x83 $x110)))))))
 ))
 (let (($x145 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (= false false)))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x162 (_ bv0 32))))
 (=> $x41 $x207))))))
 ))
 (let (($x15 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x232 (_ bv0 32))))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x162 (_ bv0 32))))
 (= $x41 $x209)))))))
 ))
 (let (($x185 (and $x15 $x145)))
 (let (($x226 (and $x185 $x116)))
 (let (($x256 (and $x226 $x277)))
 (let (($x273 (= $x256 true)))
 (let (($x274 (= $x273 true)))
 (let (($x23 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x10))))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (=> $x208 (= ?x189 ?x5))))))))))
 ))
 (let (($x107 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x232 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (= $x208 $x110)))))))
 ))
 (let (($x30 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (= false false)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x35 (_ bv0 32))))
 (=> $x234 $x207))))))
 ))
 (let (($x72 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x232 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x35 (_ bv0 32))))
 (= $x234 $x209)))))))
 ))
 (let (($x130 (and $x72 $x30)))
 (let (($x246 (and $x130 $x107)))
 (let (($x240 (and $x246 $x23)))
 (let (($x16 (= $x240 true)))
 (let (($x44 (= $x16 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x229 (= (_ bv0 2) ?x165)))
 (let (($x53 (= $x229 true)))
 (let ((?x143 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x87 (bvneg ?x143)))
 (let (($x218 (= ?x87 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x218 true)))
 (let (($x24 (and $x75 $x53)))
 (let (($x215 (and $x24 $x44)))
 (let (($x270 (and $x215 $x274)))
 (let (($x262 (and $x270 $x249)))
 (let (($x260 (and $x262 $x257)))
 (let (($x255 (and $x260 $x251)))
 (let (($x170 (and $x255 $x99)))
 (let (($x12 (and $x170 $x231)))
 (let (($x223 (and $x12 $x175)))
 (let (($x54 (and $x223 $x104)))
 (let (($x284 (and $x54 $x71)))
 (let (($x288 (and $x284 $x287)))
 (let (($x292 (and $x288 $x291)))
 (let (($x297 (and $x292 $x296)))
 (let (($x63 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x144 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x144 (_ bv1 32))))
 (let (($x298 (and $x86 $x297)))
 (let (($x58 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x161 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (=> $x208 (= ?x189 ?x161))))))))
 ))
 (let (($x45 (forall ((Lambda1 (_ BitVec 32)) )(let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x162 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (= $x208 $x83))))))))
 ))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x162 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x35 (_ bv0 32))))
 (= $x234 $x41))))))))
 ))
 (let (($x52 (and $x33 $x30)))
 (let (($x103 (and $x52 $x45)))
 (let (($x37 (and $x103 $x58)))
 (let (($x299 (and $x37 $x298)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x300 (and $x70 $x299)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x301 (and $x134 $x300)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x302 (and $x108 $x301)))
 (let (($x17 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x6 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x98 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x137 (or false (or false (and (and true (or $x7 $x98)) (or $x135 $x17))))))
 (let (($x177 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x137)))
 (let (($x28 (=> (and $x151 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x137)))
 (let (($x303 (and $x28 $x302)))
 (let (($x310 (=> $x303 $x309)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x304 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x305 (bvmul (_ bv4294967295 32) ?x304)))
 (let ((?x306 (bvneg ?x305)))
 (let (($x308 (= ?x306 ?x307)))
 (let (($x309 (= $x308 true)))
 (let ((?x293 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x294 (bvneg ?x293)))
 (let (($x295 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x296 (= $x295 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x290 (= $x289 true)))
 (let (($x291 (= $x290 true)))
 (let (($x285 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (= $x285 true)))
 (let (($x287 (= $x286 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (= $x166 true)))
 (let (($x71 (= $x113 true)))
 (let (($x265 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x266 (= $x265 true)))
 (let (($x104 (= $x266 true)))
 (let (($x90 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x147 (= $x90 true)))
 (let (($x175 (= $x147 true)))
 (let ((?x237 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x237)))
 (let ((?x158 (bvsub ?x6 ?x237)))
 (let (($x101 (ite (bvsge ?x237 (_ bv0 32)) (bvuge ?x6 ?x158) (bvult ?x6 ?x158))))
 (let (($x81 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x217 (ite $x81 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x64 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x46 (bvmul (_ bv4 64) ?x64)))
 (let ((?x76 ((_ extract 63 32) ?x46)))
 (let (($x152 (= ?x76 ?x217)))
 (let (($x124 (and $x152 $x101)))
 (let (($x168 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x94 (and $x168 $x124)))
 (let (($x190 (= true $x94)))
 (let (($x151 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x151 $x190)))
 (let (($x139 (= $x82 true)))
 (let (($x231 (= $x139 true)))
 (let (($x261 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x264 (= $x261 true)))
 (let (($x99 (= $x264 true)))
 (let (($x252 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x253 (= $x252 true)))
 (let (($x251 (= $x253 true)))
 (let (($x263 (= $x151 true)))
 (let (($x257 (= $x263 true)))
 (let ((?x250 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x250)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x65)))
 (let ((?x187 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x187)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x100)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (and $x159 $x176)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x131 $x164)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x225 $x19)))
 (let (($x57 (not $x79)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (and $x235 $x241)))
 (let (($x148 (and (not $x214) $x57)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x68 $x117)))
 (let (($x238 (not $x97)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x269 $x272)))
 (let (($x230 (and (not $x109) $x238)))
 (let (($x248 (and (and (and (and (and (and $x230 $x148) $x123) $x80) $x220) $x172) $x247)))
 (let (($x121 (and $x248 $x254)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x279 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x279)))
 (let (($x281 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x280 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x279)))
 (let (($x178 (or false (or false (and (and true (or $x280 $x281)) (or $x184 $x133))))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x210 (and $x202 $x121)))
 (let (($x43 (= $x210 true)))
 (let (($x249 (= $x43 true)))
 (let (($x277 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x10))))
 (let ((?x161 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x162 (_ bv1 32))))
 (=> $x83 (= ?x161 ?x5))))))))))
 ))
 (let (($x116 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x232 (_ bv1 32))))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x162 (_ bv1 32))))
 (= $x83 $x110)))))))
 ))
 (let (($x145 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (= false false)))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x162 (_ bv0 32))))
 (=> $x41 $x207))))))
 ))
 (let (($x15 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x232 (_ bv0 32))))
 (let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x162 (_ bv0 32))))
 (= $x41 $x209)))))))
 ))
 (let (($x185 (and $x15 $x145)))
 (let (($x226 (and $x185 $x116)))
 (let (($x256 (and $x226 $x277)))
 (let (($x273 (= $x256 true)))
 (let (($x274 (= $x273 true)))
 (let (($x23 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x10))))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (=> $x208 (= ?x189 ?x5))))))))))
 ))
 (let (($x107 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x232 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (= $x208 $x110)))))))
 ))
 (let (($x30 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (= false false)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x35 (_ bv0 32))))
 (=> $x234 $x207))))))
 ))
 (let (($x72 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x232 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x232 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x35 (_ bv0 32))))
 (= $x234 $x209)))))))
 ))
 (let (($x130 (and $x72 $x30)))
 (let (($x246 (and $x130 $x107)))
 (let (($x240 (and $x246 $x23)))
 (let (($x16 (= $x240 true)))
 (let (($x44 (= $x16 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x229 (= (_ bv0 2) ?x165)))
 (let (($x53 (= $x229 true)))
 (let ((?x143 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x87 (bvneg ?x143)))
 (let (($x218 (= ?x87 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x218 true)))
 (let (($x24 (and $x75 $x53)))
 (let (($x215 (and $x24 $x44)))
 (let (($x270 (and $x215 $x274)))
 (let (($x262 (and $x270 $x249)))
 (let (($x260 (and $x262 $x257)))
 (let (($x255 (and $x260 $x251)))
 (let (($x170 (and $x255 $x99)))
 (let (($x12 (and $x170 $x231)))
 (let (($x223 (and $x12 $x175)))
 (let (($x54 (and $x223 $x104)))
 (let (($x284 (and $x54 $x71)))
 (let (($x288 (and $x284 $x287)))
 (let (($x292 (and $x288 $x291)))
 (let (($x297 (and $x292 $x296)))
 (let (($x63 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x144 (ite $x63 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x144 (_ bv1 32))))
 (let (($x298 (and $x86 $x297)))
 (let (($x58 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x161 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x189 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (=> $x208 (= ?x189 ?x161))))))))
 ))
 (let (($x45 (forall ((Lambda1 (_ BitVec 32)) )(let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x162 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x35 (_ bv1 32))))
 (= $x208 $x83))))))))
 ))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let (($x171 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x162 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x162 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x35 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x35 (_ bv0 32))))
 (= $x234 $x41))))))))
 ))
 (let (($x52 (and $x33 $x30)))
 (let (($x103 (and $x52 $x45)))
 (let (($x37 (and $x103 $x58)))
 (let (($x299 (and $x37 $x298)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x300 (and $x70 $x299)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x301 (and $x134 $x300)))
 (let (($x108 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x302 (and $x108 $x301)))
 (let (($x17 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x6 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x98 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x137 (or false (or false (and (and true (or $x7 $x98)) (or $x135 $x17))))))
 (let (($x177 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x137)))
 (let (($x28 (=> (and $x151 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x137)))
 (let (($x303 (and $x28 $x302)))
 (let (($x310 (=> $x303 $x309)))
 (not $x310)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x267))))
 (let ((?x317 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x316)))
 (let ((?x36 (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x20 (bvadd input.spec-%var-ret-0.L2%7%bbentry ?x36)))
 (let ((?x132 (bvmul (_ bv4294967295 32) ?x20)))
 (let ((?x183 (bvneg ?x132)))
 (let (($x318 (= ?x183 ?x317)))
 (let (($x319 (= $x318 true)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x95 (bvneg ?x38)))
 (let (($x125 (= ?x95 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x102 (= $x125 true)))
 (let ((?x88 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x136 (bvneg ?x88)))
 (let (($x242 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x242 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x192 (= (_ bv0 2) ?x149)))
 (let (($x193 (= $x192 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x22 (= $x77 true)))
 (let (($x118 (= $x22 true)))
 (let (($x119 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x288))))
 (let ((?x229 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x83 (_ bv1 32))))
 (=> $x49 (= ?x229 ?x294))))))))))
 ))
 (let (($x91 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x46 (_ bv1 32))))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x83 (_ bv1 32))))
 (= $x49 $x31)))))))
 ))
 (let (($x311 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (= false false)))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x83 (_ bv0 32))))
 (=> $x156 $x50))))))
 ))
 (let (($x308 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x46 (_ bv0 32))))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x83 (_ bv0 32))))
 (= $x156 $x76)))))))
 ))
 (let (($x85 (and $x308 $x311)))
 (let (($x228 (and $x85 $x91)))
 (let (($x96 (and $x228 $x119)))
 (let (($x69 (= $x96 true)))
 (let (($x14 (= $x69 true)))
 (let (($x302 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (= $x302 true)))
 (let (($x304 (= $x303 true)))
 (let (($x297 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x288))))
 (let ((?x75 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (=> $x59 (= ?x75 ?x294))))))))))
 ))
 (let (($x101 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x46 (_ bv1 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (= $x59 $x31)))))))
 ))
 (let (($x37 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (= false false)))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x45 (_ bv0 32))))
 (=> $x103 $x50))))))
 ))
 (let (($x217 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x46 (_ bv0 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x45 (_ bv0 32))))
 (= $x103 $x76)))))))
 ))
 (let (($x152 (and $x217 $x37)))
 (let (($x124 (and $x152 $x101)))
 (let (($x298 (and $x124 $x297)))
 (let (($x299 (= $x298 true)))
 (let (($x300 (= $x299 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x252 true)))
 (let (($x251 (= $x253 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x263 (= $x262 true)))
 (let (($x257 (= $x263 true)))
 (let (($x121 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x210 (= $x121 true)))
 (let (($x43 (= $x210 true)))
 (let (($x187 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 ?x47)) (bvult ?x198 (bvsub ?x198 ?x47)))))
 (let (($x282 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x159 (ite $x282 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x27 (bvmul (_ bv4 64) ?x259)))
 (let ((?x80 ((_ extract 63 32) ?x27)))
 (let (($x100 (= ?x80 ?x159)))
 (let (($x172 (and $x100 $x187)))
 (let (($x66 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x48 (and $x66 $x172)))
 (let (($x65 (= true $x48)))
 (let (($x239 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x239 $x65)))
 (let (($x248 (= $x247 true)))
 (let (($x250 (= $x248 true)))
 (let (($x225 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x19 (= $x225 true)))
 (let (($x79 (= $x19 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x241 (= $x235 true)))
 (let (($x214 (= $x241 true)))
 (let (($x97 (= $x239 true)))
 (let (($x238 (= $x97 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x133)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x25)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let ((?x278 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x278)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x275 $x191)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (and $x270 $x279)))
 (let (($x274 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x185 $x8)))
 (let (($x226 (not $x116)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x15 $x153)))
 (let (($x276 (and (not $x145) $x226)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x23 $x240)))
 (let (($x44 (not $x16)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x107 $x246)))
 (let (($x173 (and (not $x120) $x44)))
 (let (($x272 (and (and (and (and (and (and $x173 $x276) $x256) $x274) $x280) $x181) $x184)))
 (let (($x109 (and $x272 $x197)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x212 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x212)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x212)))
 (let (($x106 (or false (or false (and (and true (or $x56 $x204)) (or $x233 $x142))))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x160 (and $x169 $x109)))
 (let (($x68 (= $x160 true)))
 (let (($x117 (= $x68 true)))
 (let (($x230 (and $x117 $x238)))
 (let (($x9 (and $x230 $x214)))
 (let (($x57 (and $x9 $x79)))
 (let (($x254 (and $x57 $x250)))
 (let (($x249 (and $x254 $x43)))
 (let (($x260 (and $x249 $x257)))
 (let (($x255 (and $x260 $x251)))
 (let (($x301 (and $x255 $x300)))
 (let (($x305 (and $x301 $x304)))
 (let (($x199 (and $x305 $x14)))
 (let (($x127 (and $x199 $x118)))
 (let (($x205 (and $x127 $x193)))
 (let (($x206 (and $x205 $x32)))
 (let (($x203 (and $x206 $x102)))
 (let (($x72 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x130 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x130 (_ bv1 32))))
 (let (($x196 (and $x110 $x203)))
 (let (($x232 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x229 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x75 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (=> $x59 (= ?x75 ?x229))))))))
 ))
 (let (($x87 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x83 (_ bv1 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (= $x59 $x49))))))))
 ))
 (let (($x161 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x83 (_ bv0 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x45 (_ bv0 32))))
 (= $x103 $x156))))))))
 ))
 (let (($x188 (and $x161 $x37)))
 (let (($x115 (and $x188 $x87)))
 (let (($x209 (and $x115 $x232)))
 (let (($x213 (and $x209 $x196)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x194 (and $x243 $x213)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x73 (and $x18 $x194)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x34 (and $x89 $x73)))
 (let (($x201 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x198 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x114 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x28 (or false (or false (and (and true (or $x29 $x114)) (or $x26 $x201))))))
 (let (($x108 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x28)))
 (let (($x150 (=> (and $x239 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x28)))
 (let (($x126 (and $x150 $x34)))
 (let (($x320 (=> $x126 $x319)))
 (not $x320)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x267))))
 (let ((?x317 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x316)))
 (let ((?x36 (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x20 (bvadd input.spec-%var-ret-0.L2%7%bbentry ?x36)))
 (let ((?x132 (bvmul (_ bv4294967295 32) ?x20)))
 (let ((?x183 (bvneg ?x132)))
 (let (($x318 (= ?x183 ?x317)))
 (let (($x319 (= $x318 true)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x95 (bvneg ?x38)))
 (let (($x125 (= ?x95 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x102 (= $x125 true)))
 (let ((?x88 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x136 (bvneg ?x88)))
 (let (($x242 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x242 true)))
 (let ((?x149 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x192 (= (_ bv0 2) ?x149)))
 (let (($x193 (= $x192 true)))
 (let (($x77 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x22 (= $x77 true)))
 (let (($x118 (= $x22 true)))
 (let (($x119 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x288))))
 (let ((?x229 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x83 (_ bv1 32))))
 (=> $x49 (= ?x229 ?x294))))))))))
 ))
 (let (($x91 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x46 (_ bv1 32))))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x83 (_ bv1 32))))
 (= $x49 $x31)))))))
 ))
 (let (($x311 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (= false false)))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x83 (_ bv0 32))))
 (=> $x156 $x50))))))
 ))
 (let (($x308 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x46 (_ bv0 32))))
 (let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x83 (_ bv0 32))))
 (= $x156 $x76)))))))
 ))
 (let (($x85 (and $x308 $x311)))
 (let (($x228 (and $x85 $x91)))
 (let (($x96 (and $x228 $x119)))
 (let (($x69 (= $x96 true)))
 (let (($x14 (= $x69 true)))
 (let (($x302 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x303 (= $x302 true)))
 (let (($x304 (= $x303 true)))
 (let (($x297 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x294 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x288))))
 (let ((?x75 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (=> $x59 (= ?x75 ?x294))))))))))
 ))
 (let (($x101 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (bvuge ?x46 (_ bv1 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (= $x59 $x31)))))))
 ))
 (let (($x37 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (= false false)))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x45 (_ bv0 32))))
 (=> $x103 $x50))))))
 ))
 (let (($x217 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x46 (_ bv0 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x45 (_ bv0 32))))
 (= $x103 $x76)))))))
 ))
 (let (($x152 (and $x217 $x37)))
 (let (($x124 (and $x152 $x101)))
 (let (($x298 (and $x124 $x297)))
 (let (($x299 (= $x298 true)))
 (let (($x300 (= $x299 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x252 true)))
 (let (($x251 (= $x253 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x263 (= $x262 true)))
 (let (($x257 (= $x263 true)))
 (let (($x121 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x210 (= $x121 true)))
 (let (($x43 (= $x210 true)))
 (let (($x187 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 (bvsub ?x198 ?x47)) (bvult ?x198 (bvsub ?x198 ?x47)))))
 (let (($x282 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x159 (ite $x282 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x27 (bvmul (_ bv4 64) ?x259)))
 (let ((?x80 ((_ extract 63 32) ?x27)))
 (let (($x100 (= ?x80 ?x159)))
 (let (($x172 (and $x100 $x187)))
 (let (($x66 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x48 (and $x66 $x172)))
 (let (($x65 (= true $x48)))
 (let (($x239 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x247 (=> $x239 $x65)))
 (let (($x248 (= $x247 true)))
 (let (($x250 (= $x248 true)))
 (let (($x225 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x19 (= $x225 true)))
 (let (($x79 (= $x19 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x241 (= $x235 true)))
 (let (($x214 (= $x241 true)))
 (let (($x97 (= $x239 true)))
 (let (($x238 (= $x97 true)))
 (let ((?x133 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x133)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x25)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let ((?x278 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x191 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x278)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x275 $x191)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (and $x270 $x279)))
 (let (($x274 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x185 $x8)))
 (let (($x226 (not $x116)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x15 $x153)))
 (let (($x276 (and (not $x145) $x226)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x23 $x240)))
 (let (($x44 (not $x16)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x107 $x246)))
 (let (($x173 (and (not $x120) $x44)))
 (let (($x272 (and (and (and (and (and (and $x173 $x276) $x256) $x274) $x280) $x181) $x184)))
 (let (($x109 (and $x272 $x197)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x212 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x212)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x212)))
 (let (($x106 (or false (or false (and (and true (or $x56 $x204)) (or $x233 $x142))))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x160 (and $x169 $x109)))
 (let (($x68 (= $x160 true)))
 (let (($x117 (= $x68 true)))
 (let (($x230 (and $x117 $x238)))
 (let (($x9 (and $x230 $x214)))
 (let (($x57 (and $x9 $x79)))
 (let (($x254 (and $x57 $x250)))
 (let (($x249 (and $x254 $x43)))
 (let (($x260 (and $x249 $x257)))
 (let (($x255 (and $x260 $x251)))
 (let (($x301 (and $x255 $x300)))
 (let (($x305 (and $x301 $x304)))
 (let (($x199 (and $x305 $x14)))
 (let (($x127 (and $x199 $x118)))
 (let (($x205 (and $x127 $x193)))
 (let (($x206 (and $x205 $x32)))
 (let (($x203 (and $x206 $x102)))
 (let (($x72 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x130 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x130 (_ bv1 32))))
 (let (($x196 (and $x110 $x203)))
 (let (($x232 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x229 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x75 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (=> $x59 (= ?x75 ?x229))))))))
 ))
 (let (($x87 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x83 (_ bv1 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x45 (_ bv1 32))))
 (= $x59 $x49))))))))
 ))
 (let (($x161 (forall ((Lambda1 (_ BitVec 32)) )(let (($x207 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x83 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x83 (_ bv0 32))))
 (let (($x171 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x45 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (= ?x45 (_ bv0 32))))
 (= $x103 $x156))))))))
 ))
 (let (($x188 (and $x161 $x37)))
 (let (($x115 (and $x188 $x87)))
 (let (($x209 (and $x115 $x232)))
 (let (($x213 (and $x209 $x196)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x194 (and $x243 $x213)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x73 (and $x18 $x194)))
 (let (($x89 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x34 (and $x89 $x73)))
 (let (($x201 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd ?x198 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x114 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x28 (or false (or false (and (and true (or $x29 $x114)) (or $x26 $x201))))))
 (let (($x108 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x28)))
 (let (($x150 (=> (and $x239 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x28)))
 (let (($x126 (and $x150 $x34)))
 (let (($x320 (=> $x126 $x319)))
 (not $x320)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x24 (bvule ?x165 (_ bv3 32))))
 (let (($x40 (= $x24 true)))
 (let (($x261 (= $x40 true)))
 (let ((?x41 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x219 (bvneg ?x41)))
 (let (($x33 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x33 true)))
 (let (($x182 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x78 (= $x182 true)))
 (let (($x53 (= $x78 true)))
 (let (($x265 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x54 (= $x265 true)))
 (let (($x162 (= $x54 true)))
 (let (($x231 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x12 (= $x231 true)))
 (let (($x139 (= $x12 true)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x319 (= (_ bv0 32) ?x318)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x314 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let ((?x313 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x313)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x312 $x211)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x315 $x227)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x196 $x213)))
 (let (($x73 (not $x194)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x125 $x102)))
 (let (($x126 (and (not $x203) $x73)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x32 $x206)))
 (let (($x38 (not $x146)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x61 $x119)))
 (let (($x180 (and (not $x242) $x38)))
 (let (($x155 (and (and (and (and (and (and $x180 $x126) $x20) $x183) $x222) $x314) $x317)))
 (let (($x82 (and $x155 $x319)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x205 (or false (or false (and (and true (or $x199 $x77)) (or $x127 $x129))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x205)))
 (let (($x266 (and $x136 $x82)))
 (let (($x104 (= $x266 true)))
 (let (($x175 (= $x104 true)))
 (let (($x311 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x152))))
 (let ((?x62 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x49 (_ bv1 32))))
 (=> $x174 (= ?x62 ?x71))))))))))
 ))
 (let (($x303 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x100 (_ bv1 32))))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x49 (_ bv1 32))))
 (= $x174 $x48)))))))
 ))
 (let (($x299 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x49 (_ bv0 32))))
 (=> $x143 $x51))))))
 ))
 (let (($x296 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x100 (_ bv0 32))))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x49 (_ bv0 32))))
 (= $x143 $x164)))))))
 ))
 (let (($x300 (and $x296 $x299)))
 (let (($x304 (and $x300 $x303)))
 (let (($x85 (and $x304 $x311)))
 (let (($x55 (= $x85 true)))
 (let (($x91 (= $x55 true)))
 (let (($x287 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x285 (= $x287 true)))
 (let (($x288 (= $x285 true)))
 (let (($x293 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x152))))
 (let ((?x42 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (=> $x5 (= ?x42 ?x71))))))))))
 ))
 (let (($x247 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x100 (_ bv1 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (= $x5 $x48)))))))
 ))
 (let (($x209 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x87 (_ bv0 32))))
 (=> $x115 $x51))))))
 ))
 (let (($x220 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x100 (_ bv0 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x87 (_ bv0 32))))
 (= $x115 $x164)))))))
 ))
 (let (($x283 (and $x220 $x209)))
 (let (($x248 (and $x283 $x247)))
 (let (($x147 (and $x248 $x293)))
 (let (($x289 (= $x147 true)))
 (let (($x290 (= $x289 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x79 (= (_ bv0 2) ?x19)))
 (let (($x57 (= $x79 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x235 true)))
 (let (($x214 (= $x241 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x97 (= $x117 true)))
 (let (($x238 (= $x97 true)))
 (let (($x197 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x109 (= $x197 true)))
 (let (($x160 (= $x109 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x278 (bvsub ?x198 ?x47)))
 (let (($x202 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x278) (bvult ?x198 ?x278))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x270 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x273 (bvmul (_ bv4 64) ?x67)))
 (let ((?x274 ((_ extract 63 32) ?x273)))
 (let (($x275 (= ?x274 ?x270)))
 (let (($x281 (and $x275 $x202)))
 (let (($x277 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x181 (and $x277 $x281)))
 (let (($x269 (= true $x181)))
 (let (($x92 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x92 $x269)))
 (let (($x184 (= $x25 true)))
 (let (($x272 (= $x184 true)))
 (let ((?x145 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x268 (bvneg ?x145)))
 (let (($x8 (= ?x268 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x8 true)))
 (let (($x44 (= $x92 true)))
 (let (($x173 (= $x44 true)))
 (let (($x226 (and $x173 $x116)))
 (let (($x133 (and $x226 $x272)))
 (let (($x68 (and $x133 $x160)))
 (let (($x230 (and $x68 $x238)))
 (let (($x9 (and $x230 $x214)))
 (let (($x148 (and $x9 $x57)))
 (let (($x286 (and $x148 $x290)))
 (let (($x291 (and $x286 $x288)))
 (let (($x228 (and $x291 $x91)))
 (let (($x223 (and $x228 $x175)))
 (let (($x90 (and $x223 $x139)))
 (let (($x93 (and $x90 $x162)))
 (let (($x35 (and $x93 $x53)))
 (let (($x52 (and $x35 $x30)))
 (let (($x23 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x240 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (bvuge ?x240 (_ bv1 32))))
 (let (($x208 (and $x16 $x52)))
 (let (($x246 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x62 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x42 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (=> $x5 (= ?x42 ?x62))))))))
 ))
 (let (($x56 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x49 (_ bv1 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (= $x5 $x174))))))))
 ))
 (let (($x229 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x49 (_ bv0 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x87 (_ bv0 32))))
 (= $x115 $x143))))))))
 ))
 (let (($x72 (and $x229 $x209)))
 (let (($x204 (and $x72 $x56)))
 (let (($x120 (and $x204 $x246)))
 (let (($x216 (and $x120 $x208)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x63 (and $x234 $x216)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x144 (and $x70 $x63)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x86 (and $x84 $x144)))
 (let (($x137 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd ?x198 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x135 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x150 (or false (or false (and (and true (or $x112 $x135)) (or $x224 $x137))))))
 (let (($x89 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x150)))
 (let (($x244 (=> (and $x92 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x150)))
 (let (($x218 (and $x244 $x86)))
 (let (($x264 (=> $x218 $x261)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x24 (bvule ?x165 (_ bv3 32))))
 (let (($x40 (= $x24 true)))
 (let (($x261 (= $x40 true)))
 (let ((?x41 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x219 (bvneg ?x41)))
 (let (($x33 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x33 true)))
 (let (($x182 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x78 (= $x182 true)))
 (let (($x53 (= $x78 true)))
 (let (($x265 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x54 (= $x265 true)))
 (let (($x162 (= $x54 true)))
 (let (($x231 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x12 (= $x231 true)))
 (let (($x139 (= $x12 true)))
 (let ((?x318 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x319 (= (_ bv0 32) ?x318)))
 (let ((?x316 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x316)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x314 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x267)))
 (let ((?x313 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x313)))
 (let (($x312 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x312 $x211)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x315 $x227)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x196 $x213)))
 (let (($x73 (not $x194)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x125 $x102)))
 (let (($x126 (and (not $x203) $x73)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x32 $x206)))
 (let (($x38 (not $x146)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x61 $x119)))
 (let (($x180 (and (not $x242) $x38)))
 (let (($x155 (and (and (and (and (and (and $x180 $x126) $x20) $x183) $x222) $x314) $x317)))
 (let (($x82 (and $x155 $x319)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x205 (or false (or false (and (and true (or $x199 $x77)) (or $x127 $x129))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x205)))
 (let (($x266 (and $x136 $x82)))
 (let (($x104 (= $x266 true)))
 (let (($x175 (= $x104 true)))
 (let (($x311 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x152))))
 (let ((?x62 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x49 (_ bv1 32))))
 (=> $x174 (= ?x62 ?x71))))))))))
 ))
 (let (($x303 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x100 (_ bv1 32))))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x49 (_ bv1 32))))
 (= $x174 $x48)))))))
 ))
 (let (($x299 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x49 (_ bv0 32))))
 (=> $x143 $x51))))))
 ))
 (let (($x296 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x100 (_ bv0 32))))
 (let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x49 (_ bv0 32))))
 (= $x143 $x164)))))))
 ))
 (let (($x300 (and $x296 $x299)))
 (let (($x304 (and $x300 $x303)))
 (let (($x85 (and $x304 $x311)))
 (let (($x55 (= $x85 true)))
 (let (($x91 (= $x55 true)))
 (let (($x287 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x285 (= $x287 true)))
 (let (($x288 (= $x285 true)))
 (let (($x293 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv1 32))) (select input.dst.llvm-mem ?x46))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x46 (_ bv2 32))) ?x152))))
 (let ((?x42 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (=> $x5 (= ?x42 ?x71))))))))))
 ))
 (let (($x247 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (bvuge ?x100 (_ bv1 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (= $x5 $x48)))))))
 ))
 (let (($x209 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (= false false)))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x87 (_ bv0 32))))
 (=> $x115 $x51))))))
 ))
 (let (($x220 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x100 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x164 (= ?x100 (_ bv0 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x87 (_ bv0 32))))
 (= $x115 $x164)))))))
 ))
 (let (($x283 (and $x220 $x209)))
 (let (($x248 (and $x283 $x247)))
 (let (($x147 (and $x248 $x293)))
 (let (($x289 (= $x147 true)))
 (let (($x290 (= $x289 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x79 (= (_ bv0 2) ?x19)))
 (let (($x57 (= $x79 true)))
 (let (($x235 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x235 true)))
 (let (($x214 (= $x241 true)))
 (let (($x117 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x97 (= $x117 true)))
 (let (($x238 (= $x97 true)))
 (let (($x197 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x109 (= $x197 true)))
 (let (($x160 (= $x109 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x278 (bvsub ?x198 ?x47)))
 (let (($x202 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x278) (bvult ?x198 ?x278))))
 (let (($x178 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x270 (ite $x178 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x273 (bvmul (_ bv4 64) ?x67)))
 (let ((?x274 ((_ extract 63 32) ?x273)))
 (let (($x275 (= ?x274 ?x270)))
 (let (($x281 (and $x275 $x202)))
 (let (($x277 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x181 (and $x277 $x281)))
 (let (($x269 (= true $x181)))
 (let (($x92 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x92 $x269)))
 (let (($x184 (= $x25 true)))
 (let (($x272 (= $x184 true)))
 (let ((?x145 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x268 (bvneg ?x145)))
 (let (($x8 (= ?x268 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x8 true)))
 (let (($x44 (= $x92 true)))
 (let (($x173 (= $x44 true)))
 (let (($x226 (and $x173 $x116)))
 (let (($x133 (and $x226 $x272)))
 (let (($x68 (and $x133 $x160)))
 (let (($x230 (and $x68 $x238)))
 (let (($x9 (and $x230 $x214)))
 (let (($x148 (and $x9 $x57)))
 (let (($x286 (and $x148 $x290)))
 (let (($x291 (and $x286 $x288)))
 (let (($x228 (and $x291 $x91)))
 (let (($x223 (and $x228 $x175)))
 (let (($x90 (and $x223 $x139)))
 (let (($x93 (and $x90 $x162)))
 (let (($x35 (and $x93 $x53)))
 (let (($x52 (and $x35 $x30)))
 (let (($x23 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x240 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x16 (bvuge ?x240 (_ bv1 32))))
 (let (($x208 (and $x16 $x52)))
 (let (($x246 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x62 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x42 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (=> $x5 (= ?x42 ?x62))))))))
 ))
 (let (($x56 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x49 (_ bv1 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x5 (bvuge ?x87 (_ bv1 32))))
 (= $x5 $x174))))))))
 ))
 (let (($x229 (forall ((Lambda1 (_ BitVec 32)) )(let (($x50 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x49 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (= ?x49 (_ bv0 32))))
 (let (($x207 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x87 (ite $x207 (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x87 (_ bv0 32))))
 (= $x115 $x143))))))))
 ))
 (let (($x72 (and $x229 $x209)))
 (let (($x204 (and $x72 $x56)))
 (let (($x120 (and $x204 $x246)))
 (let (($x216 (and $x120 $x208)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x63 (and $x234 $x216)))
 (let (($x70 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x144 (and $x70 $x63)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x86 (and $x84 $x144)))
 (let (($x137 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd ?x198 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x135 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x150 (or false (or false (and (and true (or $x112 $x135)) (or $x224 $x137))))))
 (let (($x89 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x150)))
 (let (($x244 (=> (and $x92 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x150)))
 (let (($x218 (and $x244 $x86)))
 (let (($x264 (=> $x218 $x261)))
 (not $x264)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd9e50ac0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x1880d438)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x48c8a9c8)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x48c8a9cb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd9e50ac3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x48c8a9c8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd9e50ac0)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x1880d43b (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1880d43a (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1880d439 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1880d438 (bvmul #x00000004 x!0))))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x1880d43b (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1880d43a (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1880d439 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1880d438 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0caeaaa0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000b010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2800c818)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000b013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2800c81b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000b010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2800c818)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x0caeaaa3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x0caeaaa2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x0caeaaa1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x0caeaaa0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000800 x!0)
         (ite (bvule #x00000801 x!0) #x00000801 #x00000800)
         #x00000003))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x0caeaaa3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x0caeaaa2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x0caeaaa1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x0caeaaa0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (bvule ?x168 (_ bv4 32))))
 (let (($x297 (= $x294 true)))
 (let (($x301 (= $x297 true)))
 (let ((?x10 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x106 (bvneg ?x10)))
 (let (($x258 (= ?x106 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x258 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x186 (= $x110 true)))
 (let (($x122 (= $x186 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x59 (= $x188 true)))
 (let (($x21 (= $x59 true)))
 (let (($x156 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x189 (= $x156 true)))
 (let (($x161 (= $x189 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x260)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x257 (= (_ bv0 32) ?x251)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x264 $x239)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x261 $x179)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x52 $x208)))
 (let (($x63 (not $x216)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x219 $x33)))
 (let (($x86 (and (not $x30) $x63)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x93 $x182)))
 (let (($x53 (not $x78)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x105 $x316)))
 (let (($x41 (and (not $x162) $x53)))
 (let (($x83 (and (and (and (and (and (and $x41 $x86) $x165) $x40) $x39) $x253) $x257)))
 (let (($x11 (and $x83 $x43)))
 (let (($x223 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x318 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x318)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x318)))
 (let (($x90 (or false (or false (and (and true (or $x319 $x82)) (or $x175 $x223))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x233 (and $x54 $x11)))
 (let (($x58 (= $x233 true)))
 (let (($x138 (= $x58 true)))
 (let (($x211 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x22 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x149))))
 (let ((?x226 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x174 (_ bv1 32))))
 (=> $x44 (= ?x226 ?x119))))))))))
 ))
 (let (($x132 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x289 (_ bv1 32))))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x174 (_ bv1 32))))
 (= $x44 $x295)))))))
 ))
 (let (($x320 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (= false false)))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x174 (_ bv0 32))))
 (=> $x212 $x169))))))
 ))
 (let (($x194 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x174 (_ bv0 32))))
 (= $x212 $x290)))))))
 ))
 (let (($x36 (and $x194 $x320)))
 (let (($x183 (and $x36 $x132)))
 (let (($x227 (and $x183 $x211)))
 (let (($x222 (= $x227 true)))
 (let (($x221 (= $x222 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x125 true)))
 (let (($x203 (= $x102 true)))
 (let (($x32 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x22 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x149))))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (=> $x173 (= ?x185 ?x119))))))))))
 ))
 (let (($x298 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x289 (_ bv1 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (= $x173 $x295)))))))
 ))
 (let (($x120 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (= false false)))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x56 (_ bv0 32))))
 (=> $x204 $x169))))))
 ))
 (let (($x287 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x56 (_ bv0 32))))
 (= $x204 $x290)))))))
 ))
 (let (($x285 (and $x287 $x120)))
 (let (($x299 (and $x285 $x298)))
 (let (($x206 (and $x299 $x32)))
 (let (($x146 (= $x206 true)))
 (let (($x38 (= $x146 true)))
 (let ((?x263 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x31 (= (_ bv0 2) ?x263)))
 (let (($x128 (= $x31 true)))
 (let (($x250 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x64 (= $x250 true)))
 (let (($x46 (= $x64 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x131 (bvsub ?x198 ?x47)))
 (let (($x164 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x131) (bvult ?x198 ?x131))))
 (let (($x79 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x57 (ite $x79 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x225 (bvmul (_ bv4 64) ?x9)))
 (let ((?x19 ((_ extract 63 32) ?x225)))
 (let (($x148 (= ?x19 ?x57)))
 (let (($x176 (and $x148 $x164)))
 (let (($x241 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x220 (and $x241 $x176)))
 (let (($x283 (= true $x220)))
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (=> $x154 $x283)))
 (let (($x65 (= $x48 true)))
 (let (($x247 (= $x65 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x117 (= $x68 true)))
 (let (($x97 (= $x117 true)))
 (let (($x133 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x197 (= $x133 true)))
 (let (($x109 (= $x197 true)))
 (let ((?x281 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x181 (bvneg ?x281)))
 (let (($x25 (= ?x181 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x184 (= $x25 true)))
 (let (($x278 (= $x154 true)))
 (let (($x279 (= $x278 true)))
 (let (($x272 (and $x279 $x184)))
 (let (($x160 (and $x272 $x109)))
 (let (($x238 (and $x160 $x97)))
 (let (($x248 (and $x238 $x247)))
 (let (($x124 (and $x248 $x46)))
 (let (($x81 (and $x124 $x128)))
 (let (($x180 (and $x81 $x38)))
 (let (($x34 (and $x180 $x203)))
 (let (($x267 (and $x34 $x221)))
 (let (($x45 (and $x267 $x138)))
 (let (($x37 (and $x45 $x161)))
 (let (($x130 (and $x37 $x21)))
 (let (($x142 (and $x130 $x122)))
 (let (($x123 (and $x142 $x66)))
 (let (($x270 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x275 (ite $x270 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x275 (_ bv1 32))))
 (let (($x259 (and $x191 $x123)))
 (let (($x273 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x226 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (=> $x173 (= ?x185 ?x226))))))))
 ))
 (let (($x153 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x174 (_ bv1 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (= $x173 $x44))))))))
 ))
 (let (($x62 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x174 (_ bv0 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x56 (_ bv0 32))))
 (= $x204 $x212))))))))
 ))
 (let (($x215 (and $x62 $x120)))
 (let (($x145 (and $x215 $x153)))
 (let (($x274 (and $x145 $x273)))
 (let (($x27 (and $x274 $x259)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x80 (and $x103 $x27)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x187 (and $x243 $x80)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x172 (and $x134 $x187)))
 (let (($x28 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x198 (_ bv3 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x26 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x244 (or false (or false (and (and true (or $x157 $x26)) (or $x177 $x28))))))
 (let (($x84 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x244)))
 (let (($x13 (=> (and $x154 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x244)))
 (let (($x60 (and $x13 $x172)))
 (let (($x305 (=> $x60 $x301)))
 (not $x305)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x294 (bvule ?x168 (_ bv4 32))))
 (let (($x297 (= $x294 true)))
 (let (($x301 (= $x297 true)))
 (let ((?x10 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x106 (bvneg ?x10)))
 (let (($x258 (= ?x106 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (= $x258 true)))
 (let (($x110 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x186 (= $x110 true)))
 (let (($x122 (= $x186 true)))
 (let (($x188 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x59 (= $x188 true)))
 (let (($x21 (= $x59 true)))
 (let (($x156 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x189 (= $x156 true)))
 (let (($x161 (= $x189 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x260)))
 (let ((?x251 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x257 (= (_ bv0 32) ?x251)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x239 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x264 $x239)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x261 $x179)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x52 $x208)))
 (let (($x63 (not $x216)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x219 $x33)))
 (let (($x86 (and (not $x30) $x63)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x93 $x182)))
 (let (($x53 (not $x78)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (and $x105 $x316)))
 (let (($x41 (and (not $x162) $x53)))
 (let (($x83 (and (and (and (and (and (and $x41 $x86) $x165) $x40) $x39) $x253) $x257)))
 (let (($x11 (and $x83 $x43)))
 (let (($x223 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x318 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x318)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x318)))
 (let (($x90 (or false (or false (and (and true (or $x319 $x82)) (or $x175 $x223))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x233 (and $x54 $x11)))
 (let (($x58 (= $x233 true)))
 (let (($x138 (= $x58 true)))
 (let (($x211 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x22 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x149))))
 (let ((?x226 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x174 (_ bv1 32))))
 (=> $x44 (= ?x226 ?x119))))))))))
 ))
 (let (($x132 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x289 (_ bv1 32))))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x174 (_ bv1 32))))
 (= $x44 $x295)))))))
 ))
 (let (($x320 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (= false false)))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x174 (_ bv0 32))))
 (=> $x212 $x169))))))
 ))
 (let (($x194 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x174 (_ bv0 32))))
 (= $x212 $x290)))))))
 ))
 (let (($x36 (and $x194 $x320)))
 (let (($x183 (and $x36 $x132)))
 (let (($x227 (and $x183 $x211)))
 (let (($x222 (= $x227 true)))
 (let (($x221 (= $x222 true)))
 (let (($x125 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (= $x125 true)))
 (let (($x203 (= $x102 true)))
 (let (($x32 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x22 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x149))))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (=> $x173 (= ?x185 ?x119))))))))))
 ))
 (let (($x298 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x289 (_ bv1 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (= $x173 $x295)))))))
 ))
 (let (($x120 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (= false false)))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x56 (_ bv0 32))))
 (=> $x204 $x169))))))
 ))
 (let (($x287 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x289 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (= ?x289 (_ bv0 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x56 (_ bv0 32))))
 (= $x204 $x290)))))))
 ))
 (let (($x285 (and $x287 $x120)))
 (let (($x299 (and $x285 $x298)))
 (let (($x206 (and $x299 $x32)))
 (let (($x146 (= $x206 true)))
 (let (($x38 (= $x146 true)))
 (let ((?x263 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x31 (= (_ bv0 2) ?x263)))
 (let (($x128 (= $x31 true)))
 (let (($x250 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x64 (= $x250 true)))
 (let (($x46 (= $x64 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x131 (bvsub ?x198 ?x47)))
 (let (($x164 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x131) (bvult ?x198 ?x131))))
 (let (($x79 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x57 (ite $x79 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x225 (bvmul (_ bv4 64) ?x9)))
 (let ((?x19 ((_ extract 63 32) ?x225)))
 (let (($x148 (= ?x19 ?x57)))
 (let (($x176 (and $x148 $x164)))
 (let (($x241 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x220 (and $x241 $x176)))
 (let (($x283 (= true $x220)))
 (let (($x154 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x48 (=> $x154 $x283)))
 (let (($x65 (= $x48 true)))
 (let (($x247 (= $x65 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x117 (= $x68 true)))
 (let (($x97 (= $x117 true)))
 (let (($x133 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x197 (= $x133 true)))
 (let (($x109 (= $x197 true)))
 (let ((?x281 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x181 (bvneg ?x281)))
 (let (($x25 (= ?x181 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x184 (= $x25 true)))
 (let (($x278 (= $x154 true)))
 (let (($x279 (= $x278 true)))
 (let (($x272 (and $x279 $x184)))
 (let (($x160 (and $x272 $x109)))
 (let (($x238 (and $x160 $x97)))
 (let (($x248 (and $x238 $x247)))
 (let (($x124 (and $x248 $x46)))
 (let (($x81 (and $x124 $x128)))
 (let (($x180 (and $x81 $x38)))
 (let (($x34 (and $x180 $x203)))
 (let (($x267 (and $x34 $x221)))
 (let (($x45 (and $x267 $x138)))
 (let (($x37 (and $x45 $x161)))
 (let (($x130 (and $x37 $x21)))
 (let (($x142 (and $x130 $x122)))
 (let (($x123 (and $x142 $x66)))
 (let (($x270 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x275 (ite $x270 (_ bv1 32) (_ bv0 32))))
 (let (($x191 (bvuge ?x275 (_ bv1 32))))
 (let (($x259 (and $x191 $x123)))
 (let (($x273 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x226 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (=> $x173 (= ?x185 ?x226))))))))
 ))
 (let (($x153 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x44 (bvuge ?x174 (_ bv1 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x56 (_ bv1 32))))
 (= $x173 $x44))))))))
 ))
 (let (($x62 (forall ((Lambda1 (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x174 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (= ?x174 (_ bv0 32))))
 (let (($x50 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x56 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x204 (= ?x56 (_ bv0 32))))
 (= $x204 $x212))))))))
 ))
 (let (($x215 (and $x62 $x120)))
 (let (($x145 (and $x215 $x153)))
 (let (($x274 (and $x145 $x273)))
 (let (($x27 (and $x274 $x259)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x80 (and $x103 $x27)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x187 (and $x243 $x80)))
 (let (($x134 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x172 (and $x134 $x187)))
 (let (($x28 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x198 (_ bv3 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x26 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x244 (or false (or false (and (and true (or $x157 $x26)) (or $x177 $x28))))))
 (let (($x84 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x244)))
 (let (($x13 (=> (and $x154 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x244)))
 (let (($x60 (and $x13 $x172)))
 (let (($x305 (=> $x60 $x301)))
 (not $x305)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x30000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x30000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x30000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x30000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x30000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x30000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00840020)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000014)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x31000044)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00840023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x31000047)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00840020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x31000044)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000014 x!0)
         (ite (bvule #x00000015 x!0) #x00000015 #x00000014)
         #x00000004))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x101 (bvule ?x152 (_ bv4294967294 32))))
 (let (($x71 (= $x101 true)))
 (let (($x284 (= $x71 true)))
 (let ((?x5 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x107 (bvneg ?x5)))
 (let (($x23 (= ?x107 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x23 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x229 (= $x75 true)))
 (let (($x209 (= $x229 true)))
 (let (($x232 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x276 (= $x232 true)))
 (let (($x87 (= $x276 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x96)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x167)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x314 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x297)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (and $x294 $x301)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (and $x168 $x305)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x106 $x258)))
 (let (($x123 (not $x66)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x122 $x142)))
 (let (($x27 (and (not $x10) $x123)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x188 $x59)))
 (let (($x130 (not $x21)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x252 $x121)))
 (let (($x186 (and (not $x37) $x130)))
 (let (($x311 (and (and (and (and (and (and $x186 $x27) $x187) $x60) $x307) $x314) $x303)))
 (let (($x228 (and $x311 $x69)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x251 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x251)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x251)))
 (let (($x156 (or false (or false (and (and true (or $x257 $x83)) (or $x11 $x233))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x88 (and $x161 $x228)))
 (let (($x49 (= $x88 true)))
 (let (($x207 (= $x49 true)))
 (let (($x261 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x104))))
 (let ((?x272 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x44 (_ bv1 32))))
 (=> $x278 (= ?x272 ?x90))))))))))
 ))
 (let (($x218 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x95 (_ bv1 32))))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x44 (_ bv1 32))))
 (= $x278 $x102)))))))
 ))
 (let (($x216 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x44 (_ bv0 32))))
 (=> $x15 $x256))))))
 ))
 (let (($x144 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x95 (_ bv0 32))))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x44 (_ bv0 32))))
 (= $x15 $x32)))))))
 ))
 (let (($x63 (and $x144 $x216)))
 (let (($x165 (and $x63 $x218)))
 (let (($x264 (and $x165 $x261)))
 (let (($x99 (= $x264 true)))
 (let (($x239 (= $x99 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x78 true)))
 (let (($x41 (= $x53 true)))
 (let (($x316 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x104))))
 (let ((?x269 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (=> $x279 (= ?x269 ?x90))))))))))
 ))
 (let (($x34 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x95 (_ bv1 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (= $x279 $x102)))))))
 ))
 (let (($x274 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x153 (_ bv0 32))))
 (=> $x145 $x256))))))
 ))
 (let (($x146 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x95 (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x153 (_ bv0 32))))
 (= $x145 $x32)))))))
 ))
 (let (($x38 (and $x146 $x274)))
 (let (($x213 (and $x38 $x34)))
 (let (($x162 (and $x213 $x316)))
 (let (($x35 (= $x162 true)))
 (let (($x93 (= $x35 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x136 (= (_ bv0 2) ?x22)))
 (let (($x61 (= $x136 true)))
 (let (($x296 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x296 true)))
 (let (($x299 (= $x298 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x31 (bvsub ?x198 ?x47)))
 (let (($x292 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x31) (bvult ?x198 ?x31))))
 (let (($x124 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x94 (ite $x124 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x250 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x64 (bvmul (_ bv4 64) ?x250)))
 (let ((?x46 ((_ extract 63 32) ?x64)))
 (let (($x263 (= ?x46 ?x94)))
 (let (($x147 (and $x263 $x292)))
 (let (($x247 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x289 (and $x247 $x147)))
 (let (($x290 (= true $x289)))
 (let (($x254 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (=> $x254 $x290)))
 (let (($x287 (= $x286 true)))
 (let (($x285 (= $x287 true)))
 (let (($x164 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x176 (= $x164 true)))
 (let (($x220 (= $x176 true)))
 (let ((?x79 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x57 (bvneg ?x79)))
 (let (($x282 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x282 true)))
 (let (($x214 (= $x254 true)))
 (let (($x9 (= $x214 true)))
 (let (($x159 (and $x9 $x131)))
 (let (($x283 (and $x159 $x220)))
 (let (($x295 (and $x283 $x285)))
 (let (($x300 (and $x295 $x299)))
 (let (($x85 (and $x300 $x61)))
 (let (($x182 (and $x85 $x93)))
 (let (($x219 (and $x182 $x41)))
 (let (($x179 (and $x219 $x239)))
 (let (($x8 (and $x179 $x207)))
 (let (($x143 (and $x8 $x87)))
 (let (($x72 (and $x143 $x209)))
 (let (($x16 (and $x72 $x240)))
 (let (($x230 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x235 (ite $x230 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x235 (_ bv1 32))))
 (let (($x268 (and $x241 $x16)))
 (let (($x117 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x272 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x269 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (=> $x279 (= ?x269 ?x272))))))))
 ))
 (let (($x202 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x44 (_ bv1 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (= $x279 $x278))))))))
 ))
 (let (($x226 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x44 (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x153 (_ bv0 32))))
 (= $x145 $x15))))))))
 ))
 (let (($x178 (and $x226 $x274)))
 (let (($x281 (and $x178 $x202)))
 (let (($x97 (and $x281 $x117)))
 (let (($x116 (and $x97 $x268)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x141 (and $x115 $x116)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x277 (and $x234 $x141)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x217 (and $x18 $x277)))
 (let (($x150 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x198 (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x224 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x13 (or false (or false (and (and true (or $x17 $x224)) (or $x108 $x150))))))
 (let (($x134 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x98 (=> (and $x254 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x76 (and $x98 $x217)))
 (let (($x288 (=> $x76 $x284)))
 (not $x288)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x101 (bvule ?x152 (_ bv4294967294 32))))
 (let (($x71 (= $x101 true)))
 (let (($x284 (= $x71 true)))
 (let ((?x5 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x107 (bvneg ?x5)))
 (let (($x23 (= ?x107 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x23 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x229 (= $x75 true)))
 (let (($x209 (= $x229 true)))
 (let (($x232 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x276 (= $x232 true)))
 (let (($x87 (= $x276 true)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x96)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x167)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x314 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x297 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x301 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x297)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (and $x294 $x301)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (and $x168 $x305)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x187 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x106 $x258)))
 (let (($x123 (not $x66)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x122 $x142)))
 (let (($x27 (and (not $x10) $x123)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x188 $x59)))
 (let (($x130 (not $x21)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x252 $x121)))
 (let (($x186 (and (not $x37) $x130)))
 (let (($x311 (and (and (and (and (and (and $x186 $x27) $x187) $x60) $x307) $x314) $x303)))
 (let (($x228 (and $x311 $x69)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x251 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x251)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x251)))
 (let (($x156 (or false (or false (and (and true (or $x257 $x83)) (or $x11 $x233))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x88 (and $x161 $x228)))
 (let (($x49 (= $x88 true)))
 (let (($x207 (= $x49 true)))
 (let (($x261 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x104))))
 (let ((?x272 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x44 (_ bv1 32))))
 (=> $x278 (= ?x272 ?x90))))))))))
 ))
 (let (($x218 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x95 (_ bv1 32))))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x44 (_ bv1 32))))
 (= $x278 $x102)))))))
 ))
 (let (($x216 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x44 (_ bv0 32))))
 (=> $x15 $x256))))))
 ))
 (let (($x144 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x95 (_ bv0 32))))
 (let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x44 (_ bv0 32))))
 (= $x15 $x32)))))))
 ))
 (let (($x63 (and $x144 $x216)))
 (let (($x165 (and $x63 $x218)))
 (let (($x264 (and $x165 $x261)))
 (let (($x99 (= $x264 true)))
 (let (($x239 (= $x99 true)))
 (let (($x78 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x78 true)))
 (let (($x41 (= $x53 true)))
 (let (($x316 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x104))))
 (let ((?x269 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (=> $x279 (= ?x269 ?x90))))))))))
 ))
 (let (($x34 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x95 (_ bv1 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (= $x279 $x102)))))))
 ))
 (let (($x274 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (= false false)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x153 (_ bv0 32))))
 (=> $x145 $x256))))))
 ))
 (let (($x146 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x95 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x32 (= ?x95 (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x153 (_ bv0 32))))
 (= $x145 $x32)))))))
 ))
 (let (($x38 (and $x146 $x274)))
 (let (($x213 (and $x38 $x34)))
 (let (($x162 (and $x213 $x316)))
 (let (($x35 (= $x162 true)))
 (let (($x93 (= $x35 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x136 (= (_ bv0 2) ?x22)))
 (let (($x61 (= $x136 true)))
 (let (($x296 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x298 (= $x296 true)))
 (let (($x299 (= $x298 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x31 (bvsub ?x198 ?x47)))
 (let (($x292 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x31) (bvult ?x198 ?x31))))
 (let (($x124 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x94 (ite $x124 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x250 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x64 (bvmul (_ bv4 64) ?x250)))
 (let ((?x46 ((_ extract 63 32) ?x64)))
 (let (($x263 (= ?x46 ?x94)))
 (let (($x147 (and $x263 $x292)))
 (let (($x247 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x289 (and $x247 $x147)))
 (let (($x290 (= true $x289)))
 (let (($x254 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x286 (=> $x254 $x290)))
 (let (($x287 (= $x286 true)))
 (let (($x285 (= $x287 true)))
 (let (($x164 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x176 (= $x164 true)))
 (let (($x220 (= $x176 true)))
 (let ((?x79 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x57 (bvneg ?x79)))
 (let (($x282 (= ?x57 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x131 (= $x282 true)))
 (let (($x214 (= $x254 true)))
 (let (($x9 (= $x214 true)))
 (let (($x159 (and $x9 $x131)))
 (let (($x283 (and $x159 $x220)))
 (let (($x295 (and $x283 $x285)))
 (let (($x300 (and $x295 $x299)))
 (let (($x85 (and $x300 $x61)))
 (let (($x182 (and $x85 $x93)))
 (let (($x219 (and $x182 $x41)))
 (let (($x179 (and $x219 $x239)))
 (let (($x8 (and $x179 $x207)))
 (let (($x143 (and $x8 $x87)))
 (let (($x72 (and $x143 $x209)))
 (let (($x16 (and $x72 $x240)))
 (let (($x230 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x235 (ite $x230 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x235 (_ bv1 32))))
 (let (($x268 (and $x241 $x16)))
 (let (($x117 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x272 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x269 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (=> $x279 (= ?x269 ?x272))))))))
 ))
 (let (($x202 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x44 (_ bv1 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x279 (bvuge ?x153 (_ bv1 32))))
 (= $x279 $x278))))))))
 ))
 (let (($x226 (forall ((Lambda1 (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x44 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x44 (_ bv0 32))))
 (let (($x51 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x153 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x145 (= ?x153 (_ bv0 32))))
 (= $x145 $x15))))))))
 ))
 (let (($x178 (and $x226 $x274)))
 (let (($x281 (and $x178 $x202)))
 (let (($x97 (and $x281 $x117)))
 (let (($x116 (and $x97 $x268)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x141 (and $x115 $x116)))
 (let (($x234 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x277 (and $x234 $x141)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x217 (and $x18 $x277)))
 (let (($x150 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x198 (_ bv3 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x224 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x13 (or false (or false (and (and true (or $x17 $x224)) (or $x108 $x150))))))
 (let (($x134 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x98 (=> (and $x254 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x76 (and $x98 $x217)))
 (let (($x288 (=> $x76 $x284)))
 (not $x288)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 246 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x33 (bvsge ?x155 (_ bv0 32))))
 (let (($x52 (= $x33 true)))
 (let (($x86 (= $x52 true)))
 (let ((?x197 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x109 (bvneg ?x197)))
 (let (($x192 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x192 true)))
 (let (($x275 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x191 (= $x275 true)))
 (let (($x181 (= $x191 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x173 (= $x215 true)))
 (let (($x67 (= $x173 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x183)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x132)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x321 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x320)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (and $x236 $x222)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x313 (and $x39 $x221)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x277 $x217)))
 (let (($x152 (not $x76)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x268 $x116)))
 (let (($x71 (and (not $x141) $x152)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x72 $x5)))
 (let (($x23 (not $x107)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x304 $x167)))
 (let (($x16 (and (not $x209) $x23)))
 (let (($x133 (and (and (and (and (and (and $x16 $x71) $x288) $x154) $x313) $x321) $x36)))
 (let (($x56 (and $x133 $x227)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x143 (or false (or false (and (and true (or $x69 $x228)) (or $x207 $x8))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x212 (and $x229 $x56)))
 (let (($x42 (= $x212 true)))
 (let (($x62 (= $x42 true)))
 (let (($x301 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x58))))
 (let ((?x159 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x278 (_ bv1 32))))
 (=> $x214 (= ?x159 ?x121))))))))))
 ))
 (let (($x172 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x35 (_ bv1 32))))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x278 (_ bv1 32))))
 (= $x214 $x30)))))))
 ))
 (let (($x55 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x278 (_ bv0 32))))
 (=> $x280 $x160))))))
 ))
 (let (($x66 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x35 (_ bv0 32))))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x278 (_ bv0 32))))
 (= $x280 $x93)))))))
 ))
 (let (($x80 (and $x66 $x55)))
 (let (($x60 (and $x80 $x172)))
 (let (($x305 (and $x60 $x301)))
 (let (($x307 (= $x305 true)))
 (let (($x310 (= $x307 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x122 true)))
 (let (($x10 (= $x142 true)))
 (let (($x188 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x58))))
 (let ((?x148 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (=> $x9 (= ?x148 ?x121))))))))))
 ))
 (let (($x208 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x35 (_ bv1 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (= $x9 $x30)))))))
 ))
 (let (($x97 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x202 (_ bv0 32))))
 (=> $x281 $x160))))))
 ))
 (let (($x78 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x35 (_ bv0 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x202 (_ bv0 32))))
 (= $x281 $x93)))))))
 ))
 (let (($x53 (and $x78 $x97)))
 (let (($x216 (and $x53 $x208)))
 (let (($x59 (and $x216 $x188)))
 (let (($x21 (= $x59 true)))
 (let (($x130 (= $x21 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x175 (= (_ bv0 2) ?x312)))
 (let (($x223 (= $x175 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x194 true)))
 (let (($x318 (= $x265 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x119 (bvsub ?x198 ?x47)))
 (let (($x32 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x119) (bvult ?x198 ?x119))))
 (let (($x136 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x61 (ite $x136 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x77 (bvmul (_ bv4 64) ?x300)))
 (let ((?x22 ((_ extract 63 32) ?x77)))
 (let (($x85 (= ?x22 ?x61)))
 (let (($x206 (and $x85 $x32)))
 (let (($x298 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x146 (and $x298 $x206)))
 (let (($x38 (= true $x146)))
 (let (($x302 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x302 $x38)))
 (let (($x203 (= $x102 true)))
 (let (($x34 (= $x203 true)))
 (let (($x290 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x286 (= $x290 true)))
 (let (($x287 (= $x286 true)))
 (let ((?x128 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x31 (bvneg ?x128)))
 (let (($x293 (= ?x31 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x293 true)))
 (let (($x46 (= $x302 true)))
 (let (($x124 (= $x46 true)))
 (let (($x147 (and $x124 $x292)))
 (let (($x285 (and $x147 $x287)))
 (let (($x213 (and $x285 $x34)))
 (let (($x12 (and $x213 $x318)))
 (let (($x82 (and $x12 $x223)))
 (let (($x186 (and $x82 $x130)))
 (let (($x259 (and $x186 $x10)))
 (let (($x92 (and $x259 $x310)))
 (let (($x120 (and $x92 $x62)))
 (let (($x270 (and $x120 $x67)))
 (let (($x184 (and $x270 $x181)))
 (let (($x127 (and $x184 $x193)))
 (let (($x248 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x250 (ite $x248 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x250 (_ bv1 32))))
 (let (($x129 (and $x64 $x127)))
 (let (($x48 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x159 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x148 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (=> $x9 (= ?x148 ?x159))))))))
 ))
 (let (($x19 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x278 (_ bv1 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (= $x9 $x214))))))))
 ))
 (let (($x272 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x278 (_ bv0 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x202 (_ bv0 32))))
 (= $x281 $x280))))))))
 ))
 (let (($x238 (and $x272 $x97)))
 (let (($x79 (and $x238 $x19)))
 (let (($x65 (and $x79 $x48)))
 (let (($x118 (and $x65 $x129)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x149 (and $x204 $x118)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x180 (and $x103 $x149)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x125 (and $x70 $x180)))
 (let (($x244 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd ?x198 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x177 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x98 (or false (or false (and (and true (or $x201 $x177)) (or $x89 $x244))))))
 (let (($x18 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x98)))
 (let (($x114 (=> (and $x302 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x98)))
 (let (($x317 (and $x114 $x125)))
 (let (($x210 (=> $x317 $x86)))
 (not $x210)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x33 (bvsge ?x155 (_ bv0 32))))
 (let (($x52 (= $x33 true)))
 (let (($x86 (= $x52 true)))
 (let ((?x197 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x109 (bvneg ?x197)))
 (let (($x192 (= ?x109 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x192 true)))
 (let (($x275 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x191 (= $x275 true)))
 (let (($x181 (= $x191 true)))
 (let (($x215 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x173 (= $x215 true)))
 (let (($x67 (= $x173 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x227 (= (_ bv0 32) ?x183)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x132)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x321 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x320)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (and $x236 $x222)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x313 (and $x39 $x221)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x288 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x277 $x217)))
 (let (($x152 (not $x76)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x268 $x116)))
 (let (($x71 (and (not $x141) $x152)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x72 $x5)))
 (let (($x23 (not $x107)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x304 $x167)))
 (let (($x16 (and (not $x209) $x23)))
 (let (($x133 (and (and (and (and (and (and $x16 $x71) $x288) $x154) $x313) $x321) $x36)))
 (let (($x56 (and $x133 $x227)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x228 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x143 (or false (or false (and (and true (or $x69 $x228)) (or $x207 $x8))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x212 (and $x229 $x56)))
 (let (($x42 (= $x212 true)))
 (let (($x62 (= $x42 true)))
 (let (($x301 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x58))))
 (let ((?x159 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x278 (_ bv1 32))))
 (=> $x214 (= ?x159 ?x121))))))))))
 ))
 (let (($x172 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x35 (_ bv1 32))))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x278 (_ bv1 32))))
 (= $x214 $x30)))))))
 ))
 (let (($x55 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x278 (_ bv0 32))))
 (=> $x280 $x160))))))
 ))
 (let (($x66 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x35 (_ bv0 32))))
 (let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x278 (_ bv0 32))))
 (= $x280 $x93)))))))
 ))
 (let (($x80 (and $x66 $x55)))
 (let (($x60 (and $x80 $x172)))
 (let (($x305 (and $x60 $x301)))
 (let (($x307 (= $x305 true)))
 (let (($x310 (= $x307 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x142 (= $x122 true)))
 (let (($x10 (= $x142 true)))
 (let (($x188 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x58))))
 (let ((?x148 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (=> $x9 (= ?x148 ?x121))))))))))
 ))
 (let (($x208 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x35 (_ bv1 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (= $x9 $x30)))))))
 ))
 (let (($x97 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (= false false)))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x202 (_ bv0 32))))
 (=> $x281 $x160))))))
 ))
 (let (($x78 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x35 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (= ?x35 (_ bv0 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x202 (_ bv0 32))))
 (= $x281 $x93)))))))
 ))
 (let (($x53 (and $x78 $x97)))
 (let (($x216 (and $x53 $x208)))
 (let (($x59 (and $x216 $x188)))
 (let (($x21 (= $x59 true)))
 (let (($x130 (= $x21 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x175 (= (_ bv0 2) ?x312)))
 (let (($x223 (= $x175 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x194 true)))
 (let (($x318 (= $x265 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x119 (bvsub ?x198 ?x47)))
 (let (($x32 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x119) (bvult ?x198 ?x119))))
 (let (($x136 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x61 (ite $x136 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x300 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x77 (bvmul (_ bv4 64) ?x300)))
 (let ((?x22 ((_ extract 63 32) ?x77)))
 (let (($x85 (= ?x22 ?x61)))
 (let (($x206 (and $x85 $x32)))
 (let (($x298 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x146 (and $x298 $x206)))
 (let (($x38 (= true $x146)))
 (let (($x302 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x302 $x38)))
 (let (($x203 (= $x102 true)))
 (let (($x34 (= $x203 true)))
 (let (($x290 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x286 (= $x290 true)))
 (let (($x287 (= $x286 true)))
 (let ((?x128 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x31 (bvneg ?x128)))
 (let (($x293 (= ?x31 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x293 true)))
 (let (($x46 (= $x302 true)))
 (let (($x124 (= $x46 true)))
 (let (($x147 (and $x124 $x292)))
 (let (($x285 (and $x147 $x287)))
 (let (($x213 (and $x285 $x34)))
 (let (($x12 (and $x213 $x318)))
 (let (($x82 (and $x12 $x223)))
 (let (($x186 (and $x82 $x130)))
 (let (($x259 (and $x186 $x10)))
 (let (($x92 (and $x259 $x310)))
 (let (($x120 (and $x92 $x62)))
 (let (($x270 (and $x120 $x67)))
 (let (($x184 (and $x270 $x181)))
 (let (($x127 (and $x184 $x193)))
 (let (($x248 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x250 (ite $x248 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x250 (_ bv1 32))))
 (let (($x129 (and $x64 $x127)))
 (let (($x48 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x159 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x148 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (=> $x9 (= ?x148 ?x159))))))))
 ))
 (let (($x19 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x278 (_ bv1 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x202 (_ bv1 32))))
 (= $x9 $x214))))))))
 ))
 (let (($x272 (forall ((Lambda1 (_ BitVec 32)) )(let (($x256 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x278 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (= ?x278 (_ bv0 32))))
 (let (($x169 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x202 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (= ?x202 (_ bv0 32))))
 (= $x281 $x280))))))))
 ))
 (let (($x238 (and $x272 $x97)))
 (let (($x79 (and $x238 $x19)))
 (let (($x65 (and $x79 $x48)))
 (let (($x118 (and $x65 $x129)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x149 (and $x204 $x118)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x180 (and $x103 $x149)))
 (let (($x70 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x125 (and $x70 $x180)))
 (let (($x244 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd ?x198 (_ bv3 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x177 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x98 (or false (or false (and (and true (or $x201 $x177)) (or $x89 $x244))))))
 (let (($x18 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x98)))
 (let (($x114 (=> (and $x302 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x98)))
 (let (($x317 (and $x114 $x125)))
 (let (($x210 (=> $x317 $x86)))
 (not $x210)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvule ?x257 (_ bv4294967294 32))))
 (let (($x123 (= $x106 true)))
 (let (($x187 (= $x123 true)))
 (let ((?x164 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x176 (bvneg ?x164)))
 (let (($x266 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x319 (= $x266 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x241 (= $x235 true)))
 (let (($x57 (= $x241 true)))
 (let (($x178 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x279 (= $x178 true)))
 (let (($x68 (= $x279 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x179 (bvsub ?x198 ?x47)))
 (let (($x282 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x179) (bvult ?x198 ?x179))))
 (let (($x262 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x165 (ite $x262 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x99 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x99)))
 (let ((?x40 ((_ extract 63 32) ?x239)))
 (let (($x261 (= ?x40 ?x165)))
 (let (($x273 (and $x261 $x282)))
 (let (($x253 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x100 (and $x253 $x273)))
 (let (($x153 (= true $x100)))
 (let (($x126 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (=> $x126 $x153)))
 (let (($x185 (= $x15 true)))
 (let (($x226 (= $x185 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x24 (= $x210 true)))
 (let (($x254 (= $x24 true)))
 (let (($x33 (= $x126 true)))
 (let (($x52 (= $x33 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x184)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x191)))
 (let ((?x270 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x270)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x62 $x215)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x42 $x173)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x211 $x321)))
 (let (($x132 (not $x246)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x221 $x313)))
 (let (($x133 (and (not $x25) $x132)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x154 $x50)))
 (let (($x236 (not $x39)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x5 $x107)))
 (let (($x222 (and (not $x291) $x236)))
 (let (($x118 (and (and (and (and (and (and $x222 $x133) $x227) $x212) $x67) $x275) $x181)))
 (let (($x149 (and $x118 $x197)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x268 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x268)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x268)))
 (let (($x284 (or false (or false (and (and true (or $x116 $x141)) (or $x217 $x76))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x284)))
 (let (($x180 (and $x174 $x149)))
 (let (($x125 (= $x180 true)))
 (let (($x317 (= $x125 true)))
 (let (($x304 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x167 (= $x304 true)))
 (let (($x209 (= $x167 true)))
 (let (($x232 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x59 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x122))))
 (let ((?x147 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x214 (_ bv1 32))))
 (=> $x46 (= ?x147 ?x27))))))))))
 ))
 (let (($x69 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x105 (_ bv1 32))))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x214 (_ bv1 32))))
 (= $x46 $x30)))))))
 ))
 (let (($x303 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (= false false)))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x214 (_ bv0 32))))
 (=> $x225 $x220))))))
 ))
 (let (($x307 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x105 (_ bv0 32))))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x214 (_ bv0 32))))
 (= $x225 $x162)))))))
 ))
 (let (($x311 (and $x307 $x303)))
 (let (($x228 (and $x311 $x69)))
 (let (($x276 (and $x228 $x232)))
 (let (($x87 (= $x276 true)))
 (let (($x143 (= $x87 true)))
 (let (($x91 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x59 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x122))))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (=> $x124 (= ?x81 ?x27))))))))))
 ))
 (let (($x208 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x105 (_ bv1 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (= $x124 $x30)))))))
 ))
 (let (($x65 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (= false false)))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x19 (_ bv0 32))))
 (=> $x79 $x220))))))
 ))
 (let (($x93 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x105 (_ bv0 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x19 (_ bv0 32))))
 (= $x79 $x162)))))))
 ))
 (let (($x182 (and $x93 $x65)))
 (let (($x216 (and $x182 $x208)))
 (let (($x172 (and $x216 $x91)))
 (let (($x60 (= $x172 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x203 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x34 (= (_ bv0 2) ?x203)))
 (let (($x213 (= $x34 true)))
 (let (($x32 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x32 true)))
 (let (($x146 (= $x206 true)))
 (let ((?x61 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x85 (bvneg ?x61)))
 (let (($x119 (= ?x85 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x119 true)))
 (let (($x38 (and $x242 $x146)))
 (let (($x194 (and $x38 $x213)))
 (let (($x297 (and $x194 $x294)))
 (let (($x229 (and $x297 $x143)))
 (let (($x240 (and $x229 $x209)))
 (let (($x155 (and $x240 $x317)))
 (let (($x86 (and $x155 $x52)))
 (let (($x314 (and $x86 $x254)))
 (let (($x274 (and $x314 $x226)))
 (let (($x230 (and $x274 $x68)))
 (let (($x131 (and $x230 $x57)))
 (let (($x104 (and $x131 $x319)))
 (let (($x299 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x300 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x300 (_ bv1 32))))
 (let (($x231 (and $x77 $x104)))
 (let (($x295 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x147 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (=> $x124 (= ?x81 ?x147))))))))
 ))
 (let (($x263 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x214 (_ bv1 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (= $x124 $x46))))))))
 ))
 (let (($x159 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x214 (_ bv0 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x19 (_ bv0 32))))
 (= $x79 $x225))))))))
 ))
 (let (($x247 (and $x159 $x65)))
 (let (($x128 (and $x247 $x263)))
 (let (($x296 (and $x128 $x295)))
 (let (($x90 (and $x296 $x231)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x54 (and $x145 $x90)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x41 (and $x115 $x54)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x219 (and $x243 $x41)))
 (let (($x13 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd ?x198 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x108 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x114 (or false (or false (and (and true (or $x137 $x108)) (or $x84 $x13))))))
 (let (($x70 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x114)))
 (let (($x135 (=> (and $x126 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x114)))
 (let (($x251 (and $x135 $x219)))
 (let (($x308 (=> $x251 $x187)))
 (not $x308)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x106 (bvule ?x257 (_ bv4294967294 32))))
 (let (($x123 (= $x106 true)))
 (let (($x187 (= $x123 true)))
 (let ((?x164 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x176 (bvneg ?x164)))
 (let (($x266 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x319 (= $x266 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x241 (= $x235 true)))
 (let (($x57 (= $x241 true)))
 (let (($x178 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x279 (= $x178 true)))
 (let (($x68 (= $x279 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x179 (bvsub ?x198 ?x47)))
 (let (($x282 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x179) (bvult ?x198 ?x179))))
 (let (($x262 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x165 (ite $x262 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x99 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x239 (bvmul (_ bv4 64) ?x99)))
 (let ((?x40 ((_ extract 63 32) ?x239)))
 (let (($x261 (= ?x40 ?x165)))
 (let (($x273 (and $x261 $x282)))
 (let (($x253 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x100 (and $x253 $x273)))
 (let (($x153 (= true $x100)))
 (let (($x126 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x15 (=> $x126 $x153)))
 (let (($x185 (= $x15 true)))
 (let (($x226 (= $x185 true)))
 (let (($x210 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x24 (= $x210 true)))
 (let (($x254 (= $x24 true)))
 (let (($x33 (= $x126 true)))
 (let (($x52 (= $x33 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x184)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x191)))
 (let ((?x270 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x270)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x62 $x215)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x67 (and $x42 $x173)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x211 $x321)))
 (let (($x132 (not $x246)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x221 $x313)))
 (let (($x133 (and (not $x25) $x132)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (and $x154 $x50)))
 (let (($x236 (not $x39)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x5 $x107)))
 (let (($x222 (and (not $x291) $x236)))
 (let (($x118 (and (and (and (and (and (and $x222 $x133) $x227) $x212) $x67) $x275) $x181)))
 (let (($x149 (and $x118 $x197)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x268 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x268)))
 (let (($x141 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x268)))
 (let (($x284 (or false (or false (and (and true (or $x116 $x141)) (or $x217 $x76))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x284)))
 (let (($x180 (and $x174 $x149)))
 (let (($x125 (= $x180 true)))
 (let (($x317 (= $x125 true)))
 (let (($x304 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x167 (= $x304 true)))
 (let (($x209 (= $x167 true)))
 (let (($x232 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x59 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x122))))
 (let ((?x147 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x214 (_ bv1 32))))
 (=> $x46 (= ?x147 ?x27))))))))))
 ))
 (let (($x69 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x105 (_ bv1 32))))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x214 (_ bv1 32))))
 (= $x46 $x30)))))))
 ))
 (let (($x303 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (= false false)))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x214 (_ bv0 32))))
 (=> $x225 $x220))))))
 ))
 (let (($x307 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x105 (_ bv0 32))))
 (let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x214 (_ bv0 32))))
 (= $x225 $x162)))))))
 ))
 (let (($x311 (and $x307 $x303)))
 (let (($x228 (and $x311 $x69)))
 (let (($x276 (and $x228 $x232)))
 (let (($x87 (= $x276 true)))
 (let (($x143 (= $x87 true)))
 (let (($x91 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x59 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv1 32))) (select input.dst.llvm-mem ?x59))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x59 (_ bv2 32))) ?x122))))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (=> $x124 (= ?x81 ?x27))))))))))
 ))
 (let (($x208 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x105 (_ bv1 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (= $x124 $x30)))))))
 ))
 (let (($x65 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (= false false)))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x19 (_ bv0 32))))
 (=> $x79 $x220))))))
 ))
 (let (($x93 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x105 (_ bv0 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x19 (_ bv0 32))))
 (= $x79 $x162)))))))
 ))
 (let (($x182 (and $x93 $x65)))
 (let (($x216 (and $x182 $x208)))
 (let (($x172 (and $x216 $x91)))
 (let (($x60 (= $x172 true)))
 (let (($x294 (= $x60 true)))
 (let ((?x203 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x34 (= (_ bv0 2) ?x203)))
 (let (($x213 (= $x34 true)))
 (let (($x32 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x32 true)))
 (let (($x146 (= $x206 true)))
 (let ((?x61 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x85 (bvneg ?x61)))
 (let (($x119 (= ?x85 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x119 true)))
 (let (($x38 (and $x242 $x146)))
 (let (($x194 (and $x38 $x213)))
 (let (($x297 (and $x194 $x294)))
 (let (($x229 (and $x297 $x143)))
 (let (($x240 (and $x229 $x209)))
 (let (($x155 (and $x240 $x317)))
 (let (($x86 (and $x155 $x52)))
 (let (($x314 (and $x86 $x254)))
 (let (($x274 (and $x314 $x226)))
 (let (($x230 (and $x274 $x68)))
 (let (($x131 (and $x230 $x57)))
 (let (($x104 (and $x131 $x319)))
 (let (($x299 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x300 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x300 (_ bv1 32))))
 (let (($x231 (and $x77 $x104)))
 (let (($x295 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x147 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (=> $x124 (= ?x81 ?x147))))))))
 ))
 (let (($x263 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x214 (_ bv1 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x19 (_ bv1 32))))
 (= $x124 $x46))))))))
 ))
 (let (($x159 (forall ((Lambda1 (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x214 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (= ?x214 (_ bv0 32))))
 (let (($x256 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x19 (ite $x256 (_ bv1 32) (_ bv0 32))))
 (let (($x79 (= ?x19 (_ bv0 32))))
 (= $x79 $x225))))))))
 ))
 (let (($x247 (and $x159 $x65)))
 (let (($x128 (and $x247 $x263)))
 (let (($x296 (and $x128 $x295)))
 (let (($x90 (and $x296 $x231)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x54 (and $x145 $x90)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x41 (and $x115 $x54)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x219 (and $x243 $x41)))
 (let (($x13 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd ?x198 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x108 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x114 (or false (or false (and (and true (or $x137 $x108)) (or $x84 $x13))))))
 (let (($x70 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x114)))
 (let (($x135 (=> (and $x126 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x114)))
 (let (($x251 (and $x135 $x219)))
 (let (($x308 (=> $x251 $x187)))
 (not $x308)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 246 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (bvsge ?x110 (_ bv0 32))))
 (let (($x310 (= $x301 true)))
 (let (($x75 (= $x310 true)))
 (let ((?x290 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x286 (bvneg ?x290)))
 (let (($x265 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x318 (= $x265 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x250 true)))
 (let (($x31 (= $x64 true)))
 (let (($x238 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x9 (= $x238 true)))
 (let (($x283 (= $x9 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x43 (bvsub ?x198 ?x47)))
 (let (($x293 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x43) (bvult ?x198 ?x43))))
 (let (($x264 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x161 (ite $x264 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x11 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x11)))
 (let ((?x252 ((_ extract 63 32) ?x233)))
 (let (($x138 (= ?x252 ?x161)))
 (let (($x117 (and $x138 $x293)))
 (let (($x58 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x289 (and $x58 $x117)))
 (let (($x202 (= true $x289)))
 (let (($x249 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x280 (=> $x249 $x202)))
 (let (($x269 (= $x280 true)))
 (let (($x272 (= $x269 true)))
 (let (($x308 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x308 true)))
 (let (($x302 (= $x168 true)))
 (let (($x106 (= $x249 true)))
 (let (($x123 (= $x106 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x131)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x241)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x274 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x274)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x226 $x178)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x185 $x279)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x261 $x189)))
 (let (($x44 (not $x179)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x40 $x262)))
 (let (($x282 (and (not $x165) $x44)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x74 $x218)))
 (let (($x255 (not $x253)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x314 (and $x129 $x191)))
 (let (($x239 (and (not $x314) $x255)))
 (let (($x90 (and (and (and (and (and (and $x239 $x282) $x100) $x15) $x68) $x235) $x57)))
 (let (($x54 (and $x90 $x164)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x210 (or false (or false (and (and true (or $x197 $x149)) (or $x317 $x155))))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x41 (and $x254 $x54)))
 (let (($x219 (= $x41 true)))
 (let (($x251 (= $x219 true)))
 (let (($x173 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x173 true)))
 (let (($x127 (= $x67 true)))
 (let (($x193 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x152))))
 (let ((?x206 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x46 (_ bv1 32))))
 (=> $x22 (= ?x206 ?x107))))))))))
 ))
 (let (($x109 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x60 (_ bv1 32))))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x46 (_ bv1 32))))
 (= $x22 $x311)))))))
 ))
 (let (($x321 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (= false false)))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x46 (_ bv0 32))))
 (=> $x94 $x287))))))
 ))
 (let (($x25 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x60 (_ bv0 32))))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x46 (_ bv0 32))))
 (= $x94 $x294)))))))
 ))
 (let (($x246 (and $x25 $x321)))
 (let (($x183 (and $x246 $x109)))
 (let (($x42 (and $x183 $x193)))
 (let (($x62 (= $x42 true)))
 (let (($x120 (= $x62 true)))
 (let (($x154 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x152))))
 (let ((?x242 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (=> $x136 (= ?x242 ?x107))))))))))
 ))
 (let (($x69 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x60 (_ bv1 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (= $x136 $x311)))))))
 ))
 (let (($x296 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (= false false)))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x263 (_ bv0 32))))
 (=> $x128 $x287))))))
 ))
 (let (($x305 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x60 (_ bv0 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x263 (_ bv0 32))))
 (= $x128 $x294)))))))
 ))
 (let (($x307 (and $x305 $x296)))
 (let (($x228 (and $x307 $x69)))
 (let (($x50 (and $x228 $x154)))
 (let (($x39 (= $x50 true)))
 (let (($x236 (= $x39 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x142 (= (_ bv0 2) ?x45)))
 (let (($x10 (= $x142 true)))
 (let (($x63 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x63 true)))
 (let (($x59 (= $x188 true)))
 (let ((?x93 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x182 (bvneg ?x93)))
 (let (($x144 (= ?x182 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x144 true)))
 (let (($x258 (and $x208 $x59)))
 (let (($x130 (and $x258 $x10)))
 (let (($x222 (and $x130 $x236)))
 (let (($x215 (and $x222 $x120)))
 (let (($x270 (and $x215 $x127)))
 (let (($x257 (and $x270 $x251)))
 (let (($x187 (and $x257 $x123)))
 (let (($x72 (and $x187 $x302)))
 (let (($x97 (and $x72 $x272)))
 (let (($x248 (and $x97 $x283)))
 (let (($x292 (and $x248 $x31)))
 (let (($x12 (and $x292 $x318)))
 (let (($x223 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x316 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x316 (_ bv1 32))))
 (let (($x139 (and $x105 $x12)))
 (let (($x213 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x206 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x242 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (=> $x136 (= ?x242 ?x206))))))))
 ))
 (let (($x85 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x46 (_ bv1 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (= $x136 $x22))))))))
 ))
 (let (($x147 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x46 (_ bv0 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x263 (_ bv0 32))))
 (= $x128 $x94))))))))
 ))
 (let (($x298 (and $x147 $x296)))
 (let (($x205 (and $x298 $x85)))
 (let (($x194 (and $x205 $x213)))
 (let (($x312 (and $x194 $x139)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x175 (and $x281 $x312)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x78 (and $x204 $x175)))
 (let (($x234 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x53 (and $x234 $x78)))
 (let (($x98 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd ?x198 (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x89 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x135 (or false (or false (and (and true (or $x28 $x89)) (or $x134 $x98))))))
 (let (($x243 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x135)))
 (let (($x26 (=> (and $x249 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x135)))
 (let (($x37 (and $x26 $x53)))
 (let (($x88 (=> $x37 $x75)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x301 (bvsge ?x110 (_ bv0 32))))
 (let (($x310 (= $x301 true)))
 (let (($x75 (= $x310 true)))
 (let ((?x290 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x286 (bvneg ?x290)))
 (let (($x265 (= ?x286 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x318 (= $x265 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x64 (= $x250 true)))
 (let (($x31 (= $x64 true)))
 (let (($x238 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x9 (= $x238 true)))
 (let (($x283 (= $x9 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x43 (bvsub ?x198 ?x47)))
 (let (($x293 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x43) (bvult ?x198 ?x43))))
 (let (($x264 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x161 (ite $x264 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x11 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x11)))
 (let ((?x252 ((_ extract 63 32) ?x233)))
 (let (($x138 (= ?x252 ?x161)))
 (let (($x117 (and $x138 $x293)))
 (let (($x58 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x289 (and $x58 $x117)))
 (let (($x202 (= true $x289)))
 (let (($x249 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x280 (=> $x249 $x202)))
 (let (($x269 (= $x280 true)))
 (let (($x272 (= $x269 true)))
 (let (($x308 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x308 true)))
 (let (($x302 (= $x168 true)))
 (let (($x106 (= $x249 true)))
 (let (($x123 (= $x106 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x131)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x241)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x274 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x274)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x226 $x178)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (and $x185 $x279)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x261 $x189)))
 (let (($x44 (not $x179)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (and $x40 $x262)))
 (let (($x282 (and (not $x165) $x44)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x74 $x218)))
 (let (($x255 (not $x253)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x314 (and $x129 $x191)))
 (let (($x239 (and (not $x314) $x255)))
 (let (($x90 (and (and (and (and (and (and $x239 $x282) $x100) $x15) $x68) $x235) $x57)))
 (let (($x54 (and $x90 $x164)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x317 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x210 (or false (or false (and (and true (or $x197 $x149)) (or $x317 $x155))))))
 (let (($x254 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x41 (and $x254 $x54)))
 (let (($x219 (= $x41 true)))
 (let (($x251 (= $x219 true)))
 (let (($x173 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x173 true)))
 (let (($x127 (= $x67 true)))
 (let (($x193 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x152))))
 (let ((?x206 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x46 (_ bv1 32))))
 (=> $x22 (= ?x206 ?x107))))))))))
 ))
 (let (($x109 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x60 (_ bv1 32))))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x46 (_ bv1 32))))
 (= $x22 $x311)))))))
 ))
 (let (($x321 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (= false false)))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x46 (_ bv0 32))))
 (=> $x94 $x287))))))
 ))
 (let (($x25 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x60 (_ bv0 32))))
 (let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x46 (_ bv0 32))))
 (= $x94 $x294)))))))
 ))
 (let (($x246 (and $x25 $x321)))
 (let (($x183 (and $x246 $x109)))
 (let (($x42 (and $x183 $x193)))
 (let (($x62 (= $x42 true)))
 (let (($x120 (= $x62 true)))
 (let (($x154 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x152))))
 (let ((?x242 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (=> $x136 (= ?x242 ?x107))))))))))
 ))
 (let (($x69 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (bvuge ?x60 (_ bv1 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (= $x136 $x311)))))))
 ))
 (let (($x296 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (= false false)))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x263 (_ bv0 32))))
 (=> $x128 $x287))))))
 ))
 (let (($x305 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (= ?x60 (_ bv0 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x263 (_ bv0 32))))
 (= $x128 $x294)))))))
 ))
 (let (($x307 (and $x305 $x296)))
 (let (($x228 (and $x307 $x69)))
 (let (($x50 (and $x228 $x154)))
 (let (($x39 (= $x50 true)))
 (let (($x236 (= $x39 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x142 (= (_ bv0 2) ?x45)))
 (let (($x10 (= $x142 true)))
 (let (($x63 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x63 true)))
 (let (($x59 (= $x188 true)))
 (let ((?x93 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x182 (bvneg ?x93)))
 (let (($x144 (= ?x182 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x208 (= $x144 true)))
 (let (($x258 (and $x208 $x59)))
 (let (($x130 (and $x258 $x10)))
 (let (($x222 (and $x130 $x236)))
 (let (($x215 (and $x222 $x120)))
 (let (($x270 (and $x215 $x127)))
 (let (($x257 (and $x270 $x251)))
 (let (($x187 (and $x257 $x123)))
 (let (($x72 (and $x187 $x302)))
 (let (($x97 (and $x72 $x272)))
 (let (($x248 (and $x97 $x283)))
 (let (($x292 (and $x248 $x31)))
 (let (($x12 (and $x292 $x318)))
 (let (($x223 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x316 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (bvuge ?x316 (_ bv1 32))))
 (let (($x139 (and $x105 $x12)))
 (let (($x213 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x206 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x242 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (=> $x136 (= ?x242 ?x206))))))))
 ))
 (let (($x85 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x46 (_ bv1 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x263 (_ bv1 32))))
 (= $x136 $x22))))))))
 ))
 (let (($x147 (forall ((Lambda1 (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x46 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (= ?x46 (_ bv0 32))))
 (let (($x160 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x263 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x263 (_ bv0 32))))
 (= $x128 $x94))))))))
 ))
 (let (($x298 (and $x147 $x296)))
 (let (($x205 (and $x298 $x85)))
 (let (($x194 (and $x205 $x213)))
 (let (($x312 (and $x194 $x139)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x175 (and $x281 $x312)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x78 (and $x204 $x175)))
 (let (($x234 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x53 (and $x234 $x78)))
 (let (($x98 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x108 (bvadd ?x198 (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x89 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x108)))
 (let (($x135 (or false (or false (and (and true (or $x28 $x89)) (or $x134 $x98))))))
 (let (($x243 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x135)))
 (let (($x26 (=> (and $x249 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x135)))
 (let (($x37 (and $x26 $x53)))
 (let (($x88 (=> $x37 $x75)))
 (not $x88)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 246 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (bvule ?x116 input.dst.llvm-%n)))
 (let (($x36 (= $x221 true)))
 (let (($x132 (= $x36 true)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x102 (bvneg ?x38)))
 (let (($x186 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x186 true)))
 (let (($x299 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x110))))
 (let ((?x188 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x22 (_ bv1 32))))
 (=> $x162 (= ?x188 ?x126))))))))))
 ))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x138 (_ bv1 32))))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x22 (_ bv1 32))))
 (= $x162 $x289)))))))
 ))
 (let (($x48 (forall ((Lambda1 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x22 (_ bv0 32))))
 (=> $x61 $x203))))))
 ))
 (let (($x214 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x138 (_ bv0 32))))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x22 (_ bv0 32))))
 (= $x61 $x121)))))))
 ))
 (let (($x146 (and $x214 $x48)))
 (let (($x159 (and $x146 $x148)))
 (let (($x300 (and $x159 $x299)))
 (let (($x77 (= $x300 true)))
 (let (($x119 (= $x77 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x87 true)))
 (let (($x276 (= $x143 true)))
 (let (($x232 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x110))))
 (let ((?x208 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (=> $x35 (= ?x208 ?x126))))))))))
 ))
 (let (($x280 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x138 (_ bv1 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (= $x35 $x289)))))))
 ))
 (let (($x194 (forall ((Lambda1 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x85 (_ bv0 32))))
 (=> $x205 $x203))))))
 ))
 (let (($x278 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x138 (_ bv0 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x85 (_ bv0 32))))
 (= $x205 $x121)))))))
 ))
 (let (($x169 (and $x278 $x194)))
 (let (($x269 (and $x169 $x280)))
 (let (($x23 (and $x269 $x232)))
 (let (($x16 (= $x23 true)))
 (let (($x167 (= $x16 true)))
 (let (($x308 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x308 true)))
 (let (($x302 (= $x168 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x57 (bvsub ?x198 ?x47)))
 (let (($x54 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x57) (bvult ?x198 ?x57))))
 (let (($x235 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x231 (ite $x235 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x104 (bvmul (_ bv4 64) ?x68)))
 (let ((?x230 ((_ extract 63 32) ?x104)))
 (let (($x241 (= ?x230 ?x231)))
 (let (($x41 (and $x241 $x54)))
 (let (($x178 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x219 (and $x178 $x41)))
 (let (($x251 (= true $x219)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x257 (=> $x83 $x251)))
 (let (($x106 (= $x257 true)))
 (let (($x123 (= $x106 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x153 true)))
 (let (($x319 (= $x15 true)))
 (let (($x273 (= $x83 true)))
 (let (($x100 (= $x273 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x253)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x74)))
 (let ((?x314 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x314)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x86 $x254)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x52 $x129)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x118 $x24)))
 (let (($x197 (not $x184)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x127 $x270)))
 (let (($x180 (and (not $x181) $x197)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x42 $x62)))
 (let (($x215 (not $x120)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x291 $x320)))
 (let (($x67 (and (not $x193) $x215)))
 (let (($x261 (and (and (and (and (and (and $x67 $x180) $x317) $x33) $x191) $x99) $x218)))
 (let (($x189 (and $x261 $x255)))
 (let (($x321 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x183 (or false (or false (and (and true (or $x236 $x222)) (or $x211 $x321))))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x183)))
 (let (($x179 (and $x212 $x189)))
 (let (($x44 (= $x179 true)))
 (let (($x282 (= $x44 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x277 (= $x76 true)))
 (let (($x152 (= $x277 true)))
 (let ((?x304 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x71 (= (_ bv0 2) ?x304)))
 (let (($x267 (= $x71 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x207 true)))
 (let (($x101 (= $x141 true)))
 (let ((?x305 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x307 (bvneg ?x305)))
 (let (($x96 (= ?x307 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x96 true)))
 (let (($x174 (and $x69 $x101)))
 (let (($x217 (and $x174 $x267)))
 (let (($x284 (and $x217 $x152)))
 (let (($x176 (and $x284 $x282)))
 (let (($x266 (and $x176 $x100)))
 (let (($x185 (and $x266 $x319)))
 (let (($x187 (and $x185 $x123)))
 (let (($x72 (and $x187 $x302)))
 (let (($x209 (and $x72 $x167)))
 (let (($x229 (and $x209 $x276)))
 (let (($x32 (and $x229 $x119)))
 (let (($x122 (and $x32 $x21)))
 (let (($x80 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x172 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x172 (_ bv1 32))))
 (let (($x259 (and $x60 $x122)))
 (let (($x10 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x188 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x208 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (=> $x35 (= ?x208 ?x188))))))))
 ))
 (let (($x182 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x22 (_ bv1 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (= $x35 $x162))))))))
 ))
 (let (($x206 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x22 (_ bv0 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x85 (_ bv0 32))))
 (= $x205 $x61))))))))
 ))
 (let (($x82 (and $x206 $x194)))
 (let (($x30 (and $x82 $x182)))
 (let (($x130 (and $x30 $x10)))
 (let (($x27 (and $x130 $x259)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x55 (and $x79 $x27)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x92 (and $x145 $x55)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x303 (and $x103 $x92)))
 (let (($x114 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x198 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x84 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x26 (or false (or false (and (and true (or $x150 $x84)) (or $x18 $x114))))))
 (let (($x234 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x224 (=> (and $x83 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x268 (and $x224 $x303)))
 (let (($x227 (=> $x268 $x132)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x116 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x221 (bvule ?x116 input.dst.llvm-%n)))
 (let (($x36 (= $x221 true)))
 (let (($x132 (= $x36 true)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x102 (bvneg ?x38)))
 (let (($x186 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x186 true)))
 (let (($x299 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x110))))
 (let ((?x188 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x22 (_ bv1 32))))
 (=> $x162 (= ?x188 ?x126))))))))))
 ))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x138 (_ bv1 32))))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x22 (_ bv1 32))))
 (= $x162 $x289)))))))
 ))
 (let (($x48 (forall ((Lambda1 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x22 (_ bv0 32))))
 (=> $x61 $x203))))))
 ))
 (let (($x214 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x138 (_ bv0 32))))
 (let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x22 (_ bv0 32))))
 (= $x61 $x121)))))))
 ))
 (let (($x146 (and $x214 $x48)))
 (let (($x159 (and $x146 $x148)))
 (let (($x300 (and $x159 $x299)))
 (let (($x77 (= $x300 true)))
 (let (($x119 (= $x77 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x87 true)))
 (let (($x276 (= $x143 true)))
 (let (($x232 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x110))))
 (let ((?x208 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (=> $x35 (= ?x208 ?x126))))))))))
 ))
 (let (($x280 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x138 (_ bv1 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (= $x35 $x289)))))))
 ))
 (let (($x194 (forall ((Lambda1 (_ BitVec 32)) )(let (($x203 (= false false)))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x85 (_ bv0 32))))
 (=> $x205 $x203))))))
 ))
 (let (($x278 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x138 (_ bv0 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x85 (_ bv0 32))))
 (= $x205 $x121)))))))
 ))
 (let (($x169 (and $x278 $x194)))
 (let (($x269 (and $x169 $x280)))
 (let (($x23 (and $x269 $x232)))
 (let (($x16 (= $x23 true)))
 (let (($x167 (= $x16 true)))
 (let (($x308 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x308 true)))
 (let (($x302 (= $x168 true)))
 (let ((?x47 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvadd input.dst.llvm-%x ?x47)))
 (let ((?x57 (bvsub ?x198 ?x47)))
 (let (($x54 (ite (bvsge ?x47 (_ bv0 32)) (bvuge ?x198 ?x57) (bvult ?x198 ?x57))))
 (let (($x235 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x231 (ite $x235 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x68 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x104 (bvmul (_ bv4 64) ?x68)))
 (let ((?x230 ((_ extract 63 32) ?x104)))
 (let (($x241 (= ?x230 ?x231)))
 (let (($x41 (and $x241 $x54)))
 (let (($x178 (= (bvand ?x198 (_ bv4294967292 32)) ?x198)))
 (let (($x219 (and $x178 $x41)))
 (let (($x251 (= true $x219)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x257 (=> $x83 $x251)))
 (let (($x106 (= $x257 true)))
 (let (($x123 (= $x106 true)))
 (let (($x153 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x153 true)))
 (let (($x319 (= $x15 true)))
 (let (($x273 (= $x83 true)))
 (let (($x100 (= $x273 true)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x253)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x74)))
 (let ((?x314 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x314)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (and $x86 $x254)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x52 $x129)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x118 $x24)))
 (let (($x197 (not $x184)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x127 $x270)))
 (let (($x180 (and (not $x181) $x197)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (and $x42 $x62)))
 (let (($x215 (not $x120)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x291 $x320)))
 (let (($x67 (and (not $x193) $x215)))
 (let (($x261 (and (and (and (and (and (and $x67 $x180) $x317) $x33) $x191) $x99) $x218)))
 (let (($x189 (and $x261 $x255)))
 (let (($x321 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x183 (or false (or false (and (and true (or $x236 $x222)) (or $x211 $x321))))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x183)))
 (let (($x179 (and $x212 $x189)))
 (let (($x44 (= $x179 true)))
 (let (($x282 (= $x44 true)))
 (let (($x76 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x277 (= $x76 true)))
 (let (($x152 (= $x277 true)))
 (let ((?x304 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x71 (= (_ bv0 2) ?x304)))
 (let (($x267 (= $x71 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x141 (= $x207 true)))
 (let (($x101 (= $x141 true)))
 (let ((?x305 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x307 (bvneg ?x305)))
 (let (($x96 (= ?x307 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x96 true)))
 (let (($x174 (and $x69 $x101)))
 (let (($x217 (and $x174 $x267)))
 (let (($x284 (and $x217 $x152)))
 (let (($x176 (and $x284 $x282)))
 (let (($x266 (and $x176 $x100)))
 (let (($x185 (and $x266 $x319)))
 (let (($x187 (and $x185 $x123)))
 (let (($x72 (and $x187 $x302)))
 (let (($x209 (and $x72 $x167)))
 (let (($x229 (and $x209 $x276)))
 (let (($x32 (and $x229 $x119)))
 (let (($x122 (and $x32 $x21)))
 (let (($x80 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x172 (ite $x80 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x172 (_ bv1 32))))
 (let (($x259 (and $x60 $x122)))
 (let (($x10 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x188 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x208 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (=> $x35 (= ?x208 ?x188))))))))
 ))
 (let (($x182 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x162 (bvuge ?x22 (_ bv1 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x85 (_ bv1 32))))
 (= $x35 $x162))))))))
 ))
 (let (($x206 (forall ((Lambda1 (_ BitVec 32)) )(let (($x287 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x22 (ite $x287 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (= ?x22 (_ bv0 32))))
 (let (($x220 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x85 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (= ?x85 (_ bv0 32))))
 (= $x205 $x61))))))))
 ))
 (let (($x82 (and $x206 $x194)))
 (let (($x30 (and $x82 $x182)))
 (let (($x130 (and $x30 $x10)))
 (let (($x27 (and $x130 $x259)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x55 (and $x79 $x27)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x92 (and $x145 $x55)))
 (let (($x103 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x303 (and $x103 $x92)))
 (let (($x114 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd ?x198 (_ bv3 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x84 (bvugt ?x198 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x26 (or false (or false (and (and true (or $x150 $x84)) (or $x18 $x114))))))
 (let (($x234 (=> (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x224 (=> (and $x83 (bvule ?x198 (bvsub (bvadd ?x198 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x268 (and $x224 $x303)))
 (let (($x227 (=> $x268 $x132)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x240 (bvmul (_ bv4294967295 32) ?x139)))
 (let ((?x256 (bvneg ?x240)))
 (let (($x65 (= ?x256 ?x19)))
 (let (($x247 (= $x65 true)))
 (let ((?x258 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x66 (bvneg ?x258)))
 (let (($x163 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x260 (= $x163 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x105 (= $x316 true)))
 (let (($x144 (= $x105 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x298 true)))
 (let (($x34 (= $x136 true)))
 (let (($x94 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x81 (= $x94 true)))
 (let (($x147 (= $x81 true)))
 (let ((?x198 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvadd input.dst.llvm-%x ?x198)))
 (let ((?x283 (bvsub ?x112 ?x198)))
 (let (($x290 (ite (bvsge ?x198 (_ bv0 32)) (bvuge ?x112 ?x283) (bvult ?x112 ?x283))))
 (let (($x265 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x265 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x29 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvmul (_ bv4 64) ?x29)))
 (let ((?x286 ((_ extract 63 32) ?x238)))
 (let (($x292 (= ?x286 ?x31)))
 (let (($x318 (and $x292 $x290)))
 (let (($x249 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x46 (and $x249 $x318)))
 (let (($x160 (= true $x46)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x216 (=> $x83 $x160)))
 (let (($x295 (= $x216 true)))
 (let (($x59 (= $x295 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x36 (= $x221 true)))
 (let (($x132 (= $x36 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x303 (= $x92 true)))
 (let (($x268 (= $x303 true)))
 (let (($x122 (= $x83 true)))
 (let (($x259 (= $x122 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x148)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x146)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x276 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x276)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (and $x143 $x229)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x87 $x288)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x110 $x75)))
 (let (($x275 (not $x126)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x53 $x37)))
 (let (($x232 (and (not $x78) $x275)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x175 $x88)))
 (let (($x64 (not $x49)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x308 $x168)))
 (let (($x310 (and (not $x312) $x64)))
 (let (($x119 (and (and (and (and (and (and $x310 $x232) $x16) $x209) $x214) $x48) $x225)))
 (let (($x32 (and $x119 $x159)))
 (let (($x278 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x264 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x264)))
 (let (($x280 (or false (or false (and (and true (or $x252 $x161)) (or $x43 $x278))))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x38 (and $x272 $x32)))
 (let (($x102 (= $x38 true)))
 (let (($x186 (= $x102 true)))
 (let (($x219 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x255))))
 (let ((?x101 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x93 (_ bv1 32))))
 (=> $x297 (= ?x101 ?x273))))))))))
 ))
 (let (($x90 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x215 (_ bv1 32))))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x93 (_ bv1 32))))
 (= $x297 $x24)))))))
 ))
 (let (($x230 (forall ((Lambda1 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x93 (_ bv0 32))))
 (=> $x182 $x142))))))
 ))
 (let (($x279 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x215 (_ bv0 32))))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x93 (_ bv0 32))))
 (= $x182 $x67)))))))
 ))
 (let (($x235 (and $x279 $x230)))
 (let (($x57 (and $x235 $x90)))
 (let (($x251 (and $x57 $x219)))
 (let (($x257 (= $x251 true)))
 (let (($x106 (= $x257 true)))
 (let (($x153 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x255))))
 (let ((?x228 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (=> $x305 (= ?x228 ?x273))))))))))
 ))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x215 (_ bv1 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (= $x305 $x24)))))))
 ))
 (let (($x91 (forall ((Lambda1 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x30 (_ bv0 32))))
 (=> $x208 $x142))))))
 ))
 (let (($x270 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x215 (_ bv0 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x30 (_ bv0 32))))
 (= $x208 $x67)))))))
 ))
 (let (($x181 (and $x270 $x91)))
 (let (($x180 (and $x181 $x197)))
 (let (($x15 (and $x180 $x153)))
 (let (($x319 (= $x15 true)))
 (let (($x185 (= $x319 true)))
 (let ((?x321 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x246 (= (_ bv0 2) ?x321)))
 (let (($x133 (= $x246 true)))
 (let ((?x39 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x236 (bvneg ?x39)))
 (let (($x313 (= ?x236 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x313 true)))
 (let (($x109 (and $x25 $x133)))
 (let (($x226 (and $x109 $x185)))
 (let (($x123 (and $x226 $x106)))
 (let (($x21 (and $x123 $x186)))
 (let (($x27 (and $x21 $x259)))
 (let (($x116 (and $x27 $x268)))
 (let (($x227 (and $x116 $x132)))
 (let (($x263 (and $x227 $x59)))
 (let (($x296 (and $x263 $x147)))
 (let (($x223 (and $x296 $x34)))
 (let (($x63 (and $x223 $x144)))
 (let (($x58 (and $x63 $x260)))
 (let (($x152 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x284 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x284 (_ bv1 32))))
 (let (($x156 (and $x154 $x58)))
 (let (($x217 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x101 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x228 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (=> $x305 (= ?x228 ?x101))))))))
 ))
 (let (($x311 (forall ((Lambda1 (_ BitVec 32)) )(let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x93 (_ bv1 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (= $x305 $x297))))))))
 ))
 (let (($x45 (forall ((Lambda1 (_ BitVec 32)) )(let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x93 (_ bv0 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x30 (_ bv0 32))))
 (= $x208 $x182))))))))
 ))
 (let (($x80 (and $x45 $x91)))
 (let (($x96 (and $x80 $x311)))
 (let (($x76 (and $x96 $x217)))
 (let (($x11 (and $x76 $x156)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x233 (and $x220 $x11)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x293 (and $x79 $x233)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x117 (and $x204 $x293)))
 (let (($x243 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x244 (bvadd ?x112 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x13 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x244)))
 (let (($x17 (or false (or false (and (and true (or $x134 $x13)) (or $x135 $x243))))))
 (let (($x115 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) $x17)))
 (let (($x201 (=> (and $x83 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) $x17)))
 (let (($x12 (and $x201 $x117)))
 (let (($x14 (=> $x12 $x247)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x139 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x240 (bvmul (_ bv4294967295 32) ?x139)))
 (let ((?x256 (bvneg ?x240)))
 (let (($x65 (= ?x256 ?x19)))
 (let (($x247 (= $x65 true)))
 (let ((?x258 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x66 (bvneg ?x258)))
 (let (($x163 (= ?x66 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x260 (= $x163 true)))
 (let (($x316 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x105 (= $x316 true)))
 (let (($x144 (= $x105 true)))
 (let (($x298 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x298 true)))
 (let (($x34 (= $x136 true)))
 (let (($x94 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x81 (= $x94 true)))
 (let (($x147 (= $x81 true)))
 (let ((?x198 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x112 (bvadd input.dst.llvm-%x ?x198)))
 (let ((?x283 (bvsub ?x112 ?x198)))
 (let (($x290 (ite (bvsge ?x198 (_ bv0 32)) (bvuge ?x112 ?x283) (bvult ?x112 ?x283))))
 (let (($x265 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x265 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x29 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvmul (_ bv4 64) ?x29)))
 (let ((?x286 ((_ extract 63 32) ?x238)))
 (let (($x292 (= ?x286 ?x31)))
 (let (($x318 (and $x292 $x290)))
 (let (($x249 (= (bvand ?x112 (_ bv4294967292 32)) ?x112)))
 (let (($x46 (and $x249 $x318)))
 (let (($x160 (= true $x46)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x216 (=> $x83 $x160)))
 (let (($x295 (= $x216 true)))
 (let (($x59 (= $x295 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x36 (= $x221 true)))
 (let (($x132 (= $x36 true)))
 (let (($x92 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x303 (= $x92 true)))
 (let (($x268 (= $x303 true)))
 (let (($x122 (= $x83 true)))
 (let (($x259 (= $x122 true)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x148)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x146)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x276 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x276)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (and $x143 $x229)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x87 $x288)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x110 $x75)))
 (let (($x275 (not $x126)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x53 $x37)))
 (let (($x232 (and (not $x78) $x275)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x175 $x88)))
 (let (($x64 (not $x49)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x308 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x308 $x168)))
 (let (($x310 (and (not $x312) $x64)))
 (let (($x119 (and (and (and (and (and (and $x310 $x232) $x16) $x209) $x214) $x48) $x225)))
 (let (($x32 (and $x119 $x159)))
 (let (($x278 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x264 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x161 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x264)))
 (let (($x280 (or false (or false (and (and true (or $x252 $x161)) (or $x43 $x278))))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x38 (and $x272 $x32)))
 (let (($x102 (= $x38 true)))
 (let (($x186 (= $x102 true)))
 (let (($x219 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x255))))
 (let ((?x101 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x93 (_ bv1 32))))
 (=> $x297 (= ?x101 ?x273))))))))))
 ))
 (let (($x90 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x215 (_ bv1 32))))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x93 (_ bv1 32))))
 (= $x297 $x24)))))))
 ))
 (let (($x230 (forall ((Lambda1 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x93 (_ bv0 32))))
 (=> $x182 $x142))))))
 ))
 (let (($x279 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x215 (_ bv0 32))))
 (let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x93 (_ bv0 32))))
 (= $x182 $x67)))))))
 ))
 (let (($x235 (and $x279 $x230)))
 (let (($x57 (and $x235 $x90)))
 (let (($x251 (and $x57 $x219)))
 (let (($x257 (= $x251 true)))
 (let (($x106 (= $x257 true)))
 (let (($x153 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x255))))
 (let ((?x228 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (=> $x305 (= ?x228 ?x273))))))))))
 ))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x215 (_ bv1 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (= $x305 $x24)))))))
 ))
 (let (($x91 (forall ((Lambda1 (_ BitVec 32)) )(let (($x142 (= false false)))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x30 (_ bv0 32))))
 (=> $x208 $x142))))))
 ))
 (let (($x270 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x215 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x215 (_ bv0 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x30 (_ bv0 32))))
 (= $x208 $x67)))))))
 ))
 (let (($x181 (and $x270 $x91)))
 (let (($x180 (and $x181 $x197)))
 (let (($x15 (and $x180 $x153)))
 (let (($x319 (= $x15 true)))
 (let (($x185 (= $x319 true)))
 (let ((?x321 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x246 (= (_ bv0 2) ?x321)))
 (let (($x133 (= $x246 true)))
 (let ((?x39 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x236 (bvneg ?x39)))
 (let (($x313 (= ?x236 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x25 (= $x313 true)))
 (let (($x109 (and $x25 $x133)))
 (let (($x226 (and $x109 $x185)))
 (let (($x123 (and $x226 $x106)))
 (let (($x21 (and $x123 $x186)))
 (let (($x27 (and $x21 $x259)))
 (let (($x116 (and $x27 $x268)))
 (let (($x227 (and $x116 $x132)))
 (let (($x263 (and $x227 $x59)))
 (let (($x296 (and $x263 $x147)))
 (let (($x223 (and $x296 $x34)))
 (let (($x63 (and $x223 $x144)))
 (let (($x58 (and $x63 $x260)))
 (let (($x152 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x284 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x284 (_ bv1 32))))
 (let (($x156 (and $x154 $x58)))
 (let (($x217 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x101 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x228 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (=> $x305 (= ?x228 ?x101))))))))
 ))
 (let (($x311 (forall ((Lambda1 (_ BitVec 32)) )(let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x297 (bvuge ?x93 (_ bv1 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x305 (bvuge ?x30 (_ bv1 32))))
 (= $x305 $x297))))))))
 ))
 (let (($x45 (forall ((Lambda1 (_ BitVec 32)) )(let (($x213 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x93 (ite $x213 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (= ?x93 (_ bv0 32))))
 (let (($x22 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x30 (ite $x22 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (= ?x30 (_ bv0 32))))
 (= $x208 $x182))))))))
 ))
 (let (($x80 (and $x45 $x91)))
 (let (($x96 (and $x80 $x311)))
 (let (($x76 (and $x96 $x217)))
 (let (($x11 (and $x76 $x156)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x233 (and $x220 $x11)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x293 (and $x79 $x233)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x117 (and $x204 $x293)))
 (let (($x243 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x244 (bvadd ?x112 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x244)))
 (let (($x13 (bvugt ?x112 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x244)))
 (let (($x17 (or false (or false (and (and true (or $x134 $x13)) (or $x135 $x243))))))
 (let (($x115 (=> (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32))) $x17)))
 (let (($x201 (=> (and $x83 (bvule ?x112 (bvsub (bvadd ?x112 (_ bv4 32)) (_ bv1 32)))) $x17)))
 (let (($x12 (and $x201 $x117)))
 (let (($x14 (=> $x12 $x247)))
 (not $x14)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x108 (bvadd input.dst.llvm-%x ?x112)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x164))))
 (let ((?x170 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x118 (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x314 (bvadd input.spec-%var-ret-0.L2%7%bbentry ?x118)))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x314)))
 (let ((?x274 (bvneg ?x99)))
 (let (($x140 (= ?x274 ?x170)))
 (let (($x195 (= $x140 true)))
 (let ((?x294 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x69 (bvneg ?x294)))
 (let (($x5 (= ?x69 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x304 (= $x5 true)))
 (let ((?x82 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x35 (bvneg ?x82)))
 (let (($x162 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x162 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x242 (= (_ bv0 2) ?x205)))
 (let (($x206 (= $x242 true)))
 (let (($x61 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x85 (= $x61 true)))
 (let (($x207 (= $x85 true)))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x316))))
 (let ((?x133 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x307 (_ bv1 32))))
 (=> $x56 (= ?x133 ?x163))))))))))
 ))
 (let (($x317 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x132 (_ bv1 32))))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x307 (_ bv1 32))))
 (= $x56 $x238)))))))
 ))
 (let (($x125 (forall ((Lambda1 (_ BitVec 32)) )(let (($x267 (= false false)))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x307 (_ bv0 32))))
 (=> $x311 $x267))))))
 ))
 (let (($x247 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x132 (_ bv0 32))))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x307 (_ bv0 32))))
 (= $x311 $x227)))))))
 ))
 (let (($x237 (and $x247 $x125)))
 (let (($x129 (and $x237 $x317)))
 (let (($x40 (and $x129 $x33)))
 (let (($x262 (= $x40 true)))
 (let (($x254 (= $x262 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x12 true)))
 (let (($x240 (= $x139 true)))
 (let (($x156 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x316))))
 (let ((?x211 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (=> $x39 (= ?x211 ?x163))))))))))
 ))
 (let (($x265 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x132 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (= $x39 $x238)))))))
 ))
 (let (($x277 (forall ((Lambda1 (_ BitVec 32)) )(let (($x267 (= false false)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x96 (_ bv0 32))))
 (=> $x228 $x267))))))
 ))
 (let (($x97 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x132 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x96 (_ bv0 32))))
 (= $x228 $x227)))))))
 ))
 (let (($x249 (and $x97 $x277)))
 (let (($x31 (and $x249 $x265)))
 (let (($x11 (and $x31 $x156)))
 (let (($x233 (= $x11 true)))
 (let (($x293 (= $x233 true)))
 (let (($x102 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x102 true)))
 (let (($x21 (= $x186 true)))
 (let (($x77 (ite (bvsge ?x112 (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 ?x112)) (bvult ?x108 (bvsub ?x108 ?x112)))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x229 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x299 (bvmul (_ bv4 64) ?x209)))
 (let ((?x87 ((_ extract 63 32) ?x299)))
 (let (($x288 (= ?x87 ?x229)))
 (let (($x146 (and $x288 $x77)))
 (let (($x285 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x225 (and $x285 $x146)))
 (let (($x119 (= true $x225)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x83 $x119)))
 (let (($x159 (= $x148 true)))
 (let (($x32 (= $x159 true)))
 (let (($x126 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x275 (= $x126 true)))
 (let (($x232 (= $x275 true)))
 (let (($x78 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x78 true)))
 (let (($x110 (= $x7 true)))
 (let (($x64 (= $x83 true)))
 (let (($x310 (= $x64 true)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x169)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x43)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x269)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x72 $x264)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x302 $x252)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x241 $x90)))
 (let (($x54 (not $x57)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (and $x104 $x230)))
 (let (($x219 (and (not $x235) $x54)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x15 $x319)))
 (let (($x226 (not $x185)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x180 $x239)))
 (let (($x279 (and (not $x153) $x226)))
 (let (($x312 (and (and (and (and (and (and $x279 $x219) $x257) $x123) $x161) $x121) $x278)))
 (let (($x301 (and $x312 $x289)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x273 (or false (or false (and (and true (or $x176 $x52)) (or $x261 $x253))))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x273)))
 (let (($x175 (and $x266 $x301)))
 (let (($x88 (= $x175 true)))
 (let (($x49 (= $x88 true)))
 (let (($x53 (and $x49 $x310)))
 (let (($x75 (and $x53 $x110)))
 (let (($x124 (and $x75 $x232)))
 (let (($x38 (and $x124 $x32)))
 (let (($x122 (and $x38 $x21)))
 (let (($x117 (and $x122 $x293)))
 (let (($x256 (and $x117 $x240)))
 (let (($x165 (and $x256 $x254)))
 (let (($x194 (and $x165 $x207)))
 (let (($x203 (and $x194 $x206)))
 (let (($x172 (and $x203 $x10)))
 (let (($x183 (and $x172 $x304)))
 (let (($x181 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x24 (ite $x181 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x24 (_ bv1 32))))
 (let (($x212 (and $x184 $x183)))
 (let (($x67 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x133 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x211 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (=> $x39 (= ?x211 ?x133))))))))
 ))
 (let (($x222 (forall ((Lambda1 (_ BitVec 32)) )(let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x307 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (= $x39 $x56))))))))
 ))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x307 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x96 (_ bv0 32))))
 (= $x228 $x311))))))))
 ))
 (let (($x152 (and $x71 $x277)))
 (let (($x313 (and $x152 $x222)))
 (let (($x127 (and $x313 $x67)))
 (let (($x291 (and $x127 $x212)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x320 (and $x22 $x291)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x193 (and $x220 $x320)))
 (let (($x281 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x173 (and $x281 $x193)))
 (let (($x224 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd ?x108 (_ bv3 32))))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x114 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x157 (or false (or false (and (and true (or $x98 $x114)) (or $x234 $x224))))))
 (let (($x145 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) $x157)))
 (let (($x89 (=> (and $x83 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) $x157)))
 (let (($x149 (and $x89 $x173)))
 (let (($x200 (=> $x149 $x195)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x112 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x108 (bvadd input.dst.llvm-%x ?x112)))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv1 32))) (select input.dst.llvm-mem ?x108))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x108 (_ bv2 32))) ?x164))))
 (let ((?x170 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x118 (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x314 (bvadd input.spec-%var-ret-0.L2%7%bbentry ?x118)))
 (let ((?x99 (bvmul (_ bv4294967295 32) ?x314)))
 (let ((?x274 (bvneg ?x99)))
 (let (($x140 (= ?x274 ?x170)))
 (let (($x195 (= $x140 true)))
 (let ((?x294 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x69 (bvneg ?x294)))
 (let (($x5 (= ?x69 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x304 (= $x5 true)))
 (let ((?x82 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x35 (bvneg ?x82)))
 (let (($x162 (= ?x35 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (= $x162 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x242 (= (_ bv0 2) ?x205)))
 (let (($x206 (= $x242 true)))
 (let (($x61 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x85 (= $x61 true)))
 (let (($x207 (= $x85 true)))
 (let (($x33 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x316))))
 (let ((?x133 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x307 (_ bv1 32))))
 (=> $x56 (= ?x133 ?x163))))))))))
 ))
 (let (($x317 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x132 (_ bv1 32))))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x307 (_ bv1 32))))
 (= $x56 $x238)))))))
 ))
 (let (($x125 (forall ((Lambda1 (_ BitVec 32)) )(let (($x267 (= false false)))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x307 (_ bv0 32))))
 (=> $x311 $x267))))))
 ))
 (let (($x247 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x132 (_ bv0 32))))
 (let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x307 (_ bv0 32))))
 (= $x311 $x227)))))))
 ))
 (let (($x237 (and $x247 $x125)))
 (let (($x129 (and $x237 $x317)))
 (let (($x40 (and $x129 $x33)))
 (let (($x262 (= $x40 true)))
 (let (($x254 (= $x262 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (= $x12 true)))
 (let (($x240 (= $x139 true)))
 (let (($x156 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x316))))
 (let ((?x211 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (=> $x39 (= ?x211 ?x163))))))))))
 ))
 (let (($x265 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x132 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (= $x39 $x238)))))))
 ))
 (let (($x277 (forall ((Lambda1 (_ BitVec 32)) )(let (($x267 (= false false)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x96 (_ bv0 32))))
 (=> $x228 $x267))))))
 ))
 (let (($x97 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (= ?x132 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x96 (_ bv0 32))))
 (= $x228 $x227)))))))
 ))
 (let (($x249 (and $x97 $x277)))
 (let (($x31 (and $x249 $x265)))
 (let (($x11 (and $x31 $x156)))
 (let (($x233 (= $x11 true)))
 (let (($x293 (= $x233 true)))
 (let (($x102 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x186 (= $x102 true)))
 (let (($x21 (= $x186 true)))
 (let (($x77 (ite (bvsge ?x112 (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 ?x112)) (bvult ?x108 (bvsub ?x108 ?x112)))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x229 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x209 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x299 (bvmul (_ bv4 64) ?x209)))
 (let ((?x87 ((_ extract 63 32) ?x299)))
 (let (($x288 (= ?x87 ?x229)))
 (let (($x146 (and $x288 $x77)))
 (let (($x285 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x225 (and $x285 $x146)))
 (let (($x119 (= true $x225)))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (=> $x83 $x119)))
 (let (($x159 (= $x148 true)))
 (let (($x32 (= $x159 true)))
 (let (($x126 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x275 (= $x126 true)))
 (let (($x232 (= $x275 true)))
 (let (($x78 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x78 true)))
 (let (($x110 (= $x7 true)))
 (let (($x64 (= $x83 true)))
 (let (($x310 (= $x64 true)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x289 (= (_ bv0 32) ?x169)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x43)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x269)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (and $x72 $x264)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x302 $x252)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x241 $x90)))
 (let (($x54 (not $x57)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x235 (and $x104 $x230)))
 (let (($x219 (and (not $x235) $x54)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x15 $x319)))
 (let (($x226 (not $x185)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x180 $x239)))
 (let (($x279 (and (not $x153) $x226)))
 (let (($x312 (and (and (and (and (and (and $x279 $x219) $x257) $x123) $x161) $x121) $x278)))
 (let (($x301 (and $x312 $x289)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x282 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x282)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x282)))
 (let (($x273 (or false (or false (and (and true (or $x176 $x52)) (or $x261 $x253))))))
 (let (($x266 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x273)))
 (let (($x175 (and $x266 $x301)))
 (let (($x88 (= $x175 true)))
 (let (($x49 (= $x88 true)))
 (let (($x53 (and $x49 $x310)))
 (let (($x75 (and $x53 $x110)))
 (let (($x124 (and $x75 $x232)))
 (let (($x38 (and $x124 $x32)))
 (let (($x122 (and $x38 $x21)))
 (let (($x117 (and $x122 $x293)))
 (let (($x256 (and $x117 $x240)))
 (let (($x165 (and $x256 $x254)))
 (let (($x194 (and $x165 $x207)))
 (let (($x203 (and $x194 $x206)))
 (let (($x172 (and $x203 $x10)))
 (let (($x183 (and $x172 $x304)))
 (let (($x181 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x24 (ite $x181 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x24 (_ bv1 32))))
 (let (($x212 (and $x184 $x183)))
 (let (($x67 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x133 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x211 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (=> $x39 (= ?x211 ?x133))))))))
 ))
 (let (($x222 (forall ((Lambda1 (_ BitVec 32)) )(let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x307 (_ bv1 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x96 (_ bv1 32))))
 (= $x39 $x56))))))))
 ))
 (let (($x71 (forall ((Lambda1 (_ BitVec 32)) )(let (($x130 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x307 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x307 (_ bv0 32))))
 (let (($x93 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x96 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (= ?x96 (_ bv0 32))))
 (= $x228 $x311))))))))
 ))
 (let (($x152 (and $x71 $x277)))
 (let (($x313 (and $x152 $x222)))
 (let (($x127 (and $x313 $x67)))
 (let (($x291 (and $x127 $x212)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x320 (and $x22 $x291)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x193 (and $x220 $x320)))
 (let (($x281 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x173 (and $x281 $x193)))
 (let (($x224 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd ?x108 (_ bv3 32))))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x114 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x157 (or false (or false (and (and true (or $x98 $x114)) (or $x234 $x224))))))
 (let (($x145 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) $x157)))
 (let (($x89 (=> (and $x83 (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32)))) $x157)))
 (let (($x149 (and $x89 $x173)))
 (let (($x200 (=> $x149 $x195)))
 (not $x200)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 250 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x283 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x59 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x59 (_ bv1 32))))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (not $x83)))
 (let (($x160 (or $x137 $x263)))
 (let (($x216 (= $x160 true)))
 (let (($x250 (= $x216 true)))
 (let ((?x315 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x170 (bvneg ?x315)))
 (let (($x140 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x140 true)))
 (let (($x131 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x68 (= $x131 true)))
 (let (($x164 (= $x68 true)))
 (let (($x274 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x262))))
 (let ((?x255 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x236 (_ bv1 32))))
 (=> $x100 (= ?x255 ?x194))))))))))
 ))
 (let (($x193 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x46 (_ bv1 32))))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x236 (_ bv1 32))))
 (= $x100 $x63)))))))
 ))
 (let (($x183 (forall ((Lambda1 (_ BitVec 32)) )(let (($x215 (= false false)))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x236 (_ bv0 32))))
 (=> $x222 $x215))))))
 ))
 (let (($x141 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x46 (_ bv0 32))))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x236 (_ bv0 32))))
 (= $x222 $x105)))))))
 ))
 (let (($x212 (and $x141 $x183)))
 (let (($x173 (and $x212 $x193)))
 (let (($x190 (and $x173 $x274)))
 (let (($x196 (= $x190 true)))
 (let (($x73 (= $x196 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x10 (= $x162 true)))
 (let (($x172 (= $x10 true)))
 (let (($x242 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x262))))
 (let ((?x261 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (=> $x282 (= ?x261 ?x194))))))))))
 ))
 (let (($x260 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x46 (_ bv1 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (= $x282 $x63)))))))
 ))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let (($x215 (= false false)))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x313 (_ bv0 32))))
 (=> $x211 $x215))))))
 ))
 (let (($x34 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x46 (_ bv0 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x313 (_ bv0 32))))
 (= $x211 $x105)))))))
 ))
 (let (($x223 (and $x34 $x181)))
 (let (($x58 (and $x223 $x260)))
 (let (($x206 (and $x58 $x242)))
 (let (($x203 (= $x206 true)))
 (let (($x82 (= $x203 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (= $x227 true)))
 (let (($x97 (= $x192 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x221 true)))
 (let (($x36 (= $x116 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x186 (= $x102 true)))
 (let (($x21 (= $x186 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x276)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x87)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (and $x124 $x16)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x232 $x285)))
 (let (($x275 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x64 $x310)))
 (let (($x37 (not $x53)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x175 $x88)))
 (let (($x7 (and (not $x49) $x37)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x43 $x278)))
 (let (($x169 (not $x312)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x219 $x202)))
 (let (($x301 (and (not $x168) $x169)))
 (let (($x77 (and (and (and (and (and (and $x301 $x7) $x75) $x275) $x167) $x299) $x143)))
 (let (($x146 (and $x77 $x229)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x280)))
 (let (($x308 (or false (or false (and (and true (or $x106 $x123)) (or $x72 $x269))))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x308)))
 (let (($x225 (and $x121 $x146)))
 (let (($x119 (= $x225 true)))
 (let (($x148 (= $x119 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x241 (= (_ bv0 2) ?x41)))
 (let (($x90 (= $x241 true)))
 (let ((?x185 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x226 (bvneg ?x185)))
 (let (($x104 (= ?x226 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x104 true)))
 (let (($x57 (and $x230 $x90)))
 (let (($x159 (and $x57 $x148)))
 (let (($x122 (and $x159 $x21)))
 (let (($x132 (and $x122 $x36)))
 (let (($x249 (and $x132 $x97)))
 (let (($x35 (and $x249 $x82)))
 (let (($x60 (and $x35 $x172)))
 (let (($x231 (and $x60 $x73)))
 (let (($x20 (and $x231 $x164)))
 (let (($x200 (and $x20 $x195)))
 (let (($x153 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x255 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x261 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (=> $x282 (= ?x261 ?x255))))))))
 ))
 (let (($x52 (forall ((Lambda1 (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x236 (_ bv1 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (= $x282 $x100))))))))
 ))
 (let (($x120 (forall ((Lambda1 (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x236 (_ bv0 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x313 (_ bv0 32))))
 (= $x211 $x222))))))))
 ))
 (let (($x24 (and $x120 $x181)))
 (let (($x189 (and $x24 $x52)))
 (let (($x178 (and $x189 $x153)))
 (let (($x158 (and $x178 $x200)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x171 (and $x93 $x158)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x248 (and $x22 $x171)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x6 (and $x128 $x248)))
 (let ((?x108 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvadd input.dst.llvm-%x ?x108)))
 (let (($x201 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x150 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x243 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x103 (or false (or false (and (and true (or $x70 $x243)) (or $x115 $x201))))))
 (let (($x79 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) $x103)))
 (let (($x244 (=> (and $x83 (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32)))) $x103)))
 (let (($x197 (and $x244 $x6)))
 (let (($x290 (=> $x197 $x250)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x283 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x59 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x59 (_ bv1 32))))
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x137 (not $x83)))
 (let (($x160 (or $x137 $x263)))
 (let (($x216 (= $x160 true)))
 (let (($x250 (= $x216 true)))
 (let ((?x315 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x170 (bvneg ?x315)))
 (let (($x140 (= ?x170 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x140 true)))
 (let (($x131 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x68 (= $x131 true)))
 (let (($x164 (= $x68 true)))
 (let (($x274 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x262))))
 (let ((?x255 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x236 (_ bv1 32))))
 (=> $x100 (= ?x255 ?x194))))))))))
 ))
 (let (($x193 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x46 (_ bv1 32))))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x236 (_ bv1 32))))
 (= $x100 $x63)))))))
 ))
 (let (($x183 (forall ((Lambda1 (_ BitVec 32)) )(let (($x215 (= false false)))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x236 (_ bv0 32))))
 (=> $x222 $x215))))))
 ))
 (let (($x141 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x46 (_ bv0 32))))
 (let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x236 (_ bv0 32))))
 (= $x222 $x105)))))))
 ))
 (let (($x212 (and $x141 $x183)))
 (let (($x173 (and $x212 $x193)))
 (let (($x190 (and $x173 $x274)))
 (let (($x196 (= $x190 true)))
 (let (($x73 (= $x196 true)))
 (let (($x162 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x10 (= $x162 true)))
 (let (($x172 (= $x10 true)))
 (let (($x242 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x262))))
 (let ((?x261 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (=> $x282 (= ?x261 ?x194))))))))))
 ))
 (let (($x260 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x46 (_ bv1 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (= $x282 $x63)))))))
 ))
 (let (($x181 (forall ((Lambda1 (_ BitVec 32)) )(let (($x215 (= false false)))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x313 (_ bv0 32))))
 (=> $x211 $x215))))))
 ))
 (let (($x34 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x46 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x46 (_ bv0 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x313 (_ bv0 32))))
 (= $x211 $x105)))))))
 ))
 (let (($x223 (and $x34 $x181)))
 (let (($x58 (and $x223 $x260)))
 (let (($x206 (and $x58 $x242)))
 (let (($x203 (= $x206 true)))
 (let (($x82 (= $x203 true)))
 (let (($x227 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x192 (= $x227 true)))
 (let (($x97 (= $x192 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x116 (= $x221 true)))
 (let (($x36 (= $x116 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x186 (= $x102 true)))
 (let (($x21 (= $x186 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x229 (= (_ bv0 32) ?x276)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x87)))
 (let ((?x209 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (and $x124 $x16)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (and $x232 $x285)))
 (let (($x275 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x64 $x310)))
 (let (($x37 (not $x53)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x175 $x88)))
 (let (($x7 (and (not $x49) $x37)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (and $x43 $x278)))
 (let (($x169 (not $x312)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x219 $x202)))
 (let (($x301 (and (not $x168) $x169)))
 (let (($x77 (and (and (and (and (and (and $x301 $x7) $x75) $x275) $x167) $x299) $x143)))
 (let (($x146 (and $x77 $x229)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x280)))
 (let (($x308 (or false (or false (and (and true (or $x106 $x123)) (or $x72 $x269))))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x308)))
 (let (($x225 (and $x121 $x146)))
 (let (($x119 (= $x225 true)))
 (let (($x148 (= $x119 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x241 (= (_ bv0 2) ?x41)))
 (let (($x90 (= $x241 true)))
 (let ((?x185 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x226 (bvneg ?x185)))
 (let (($x104 (= ?x226 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x104 true)))
 (let (($x57 (and $x230 $x90)))
 (let (($x159 (and $x57 $x148)))
 (let (($x122 (and $x159 $x21)))
 (let (($x132 (and $x122 $x36)))
 (let (($x249 (and $x132 $x97)))
 (let (($x35 (and $x249 $x82)))
 (let (($x60 (and $x35 $x172)))
 (let (($x231 (and $x60 $x73)))
 (let (($x20 (and $x231 $x164)))
 (let (($x200 (and $x20 $x195)))
 (let (($x153 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x255 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x261 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (=> $x282 (= ?x261 ?x255))))))))
 ))
 (let (($x52 (forall ((Lambda1 (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x236 (_ bv1 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x313 (_ bv1 32))))
 (= $x282 $x100))))))))
 ))
 (let (($x120 (forall ((Lambda1 (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x236 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x236 (_ bv0 32))))
 (let (($x307 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x313 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x313 (_ bv0 32))))
 (= $x211 $x222))))))))
 ))
 (let (($x24 (and $x120 $x181)))
 (let (($x189 (and $x24 $x52)))
 (let (($x178 (and $x189 $x153)))
 (let (($x158 (and $x178 $x200)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x171 (and $x93 $x158)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x248 (and $x22 $x171)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x6 (and $x128 $x248)))
 (let ((?x108 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvadd input.dst.llvm-%x ?x108)))
 (let (($x201 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x150 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x243 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x103 (or false (or false (and (and true (or $x70 $x243)) (or $x115 $x201))))))
 (let (($x79 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) $x103)))
 (let (($x244 (=> (and $x83 (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32)))) $x103)))
 (let (($x197 (and $x244 $x6)))
 (let (($x290 (=> $x197 $x250)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 226 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (not $x83)))
 (let (($x316 (= $x136 false)))
 (let (($x177 (= $x316 true)))
 (let ((?x179 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x218 (bvneg ?x179)))
 (let (($x273 (= ?x218 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x266 (= $x273 true)))
 (let (($x56 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x263))))
 (let ((?x138 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x176 (_ bv1 32))))
 (=> $x104 (= ?x138 ?x96))))))))))
 ))
 (let (($x228 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x69 (_ bv1 32))))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x176 (_ bv1 32))))
 (= $x104 $x173)))))))
 ))
 (let (($x270 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (= false false)))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x176 (_ bv0 32))))
 (=> $x52 $x239))))))
 ))
 (let (($x247 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x69 (_ bv0 32))))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x176 (_ bv0 32))))
 (= $x52 $x141)))))))
 ))
 (let (($x253 (and $x247 $x270)))
 (let (($x101 (and $x253 $x228)))
 (let (($x67 (and $x101 $x56)))
 (let (($x184 (= $x67 true)))
 (let (($x51 (= $x184 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x256 true)))
 (let (($x117 (= $x65 true)))
 (let (($x54 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x263))))
 (let ((?x57 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (=> $x230 (= ?x57 ?x96))))))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x69 (_ bv1 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (= $x230 $x173)))))))
 ))
 (let (($x15 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (= false false)))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x189 (_ bv0 32))))
 (=> $x261 $x239))))))
 ))
 (let (($x183 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x69 (_ bv0 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x189 (_ bv0 32))))
 (= $x261 $x141)))))))
 ))
 (let (($x212 (and $x183 $x15)))
 (let (($x274 (and $x212 $x99)))
 (let (($x84 (and $x274 $x54)))
 (let (($x233 (= $x84 true)))
 (let (($x199 (= $x233 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x194 (= $x61 true)))
 (let (($x174 (= $x194 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x40 (= $x33 true)))
 (let (($x155 (= $x40 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x223)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x144)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x249)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (and $x97 $x258)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x192 $x298)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x38 $x102)))
 (let (($x21 (not $x186)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x119 $x148)))
 (let (($x221 (and (not $x159) $x21)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x143 $x77)))
 (let (($x229 (not $x276)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x288 $x110)))
 (let (($x225 (and (not $x87) $x229)))
 (let (($x210 (and (and (and (and (and (and $x225 $x221) $x36) $x227) $x66) $x105) $x34)))
 (let (($x85 (and $x210 $x63)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x209 (or false (or false (and (and true (or $x275 $x214)) (or $x23 $x16))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x209)))
 (let (($x207 (and $x48 $x85)))
 (let (($x240 (= $x207 true)))
 (let (($x254 (= $x240 true)))
 (let (($x64 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x310 (= $x64 true)))
 (let (($x53 (= $x310 true)))
 (let ((?x175 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x88 (= (_ bv0 2) ?x175)))
 (let (($x49 (= $x88 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x278 (= $x43 true)))
 (let (($x312 (= $x278 true)))
 (let ((?x161 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x308 (bvneg ?x161)))
 (let (($x219 (= ?x308 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x219 true)))
 (let (($x169 (and $x202 $x312)))
 (let (($x78 (and $x169 $x49)))
 (let (($x37 (and $x78 $x53)))
 (let (($x165 (and $x37 $x254)))
 (let (($x262 (and $x165 $x155)))
 (let (($x205 (and $x262 $x174)))
 (let (($x125 (and $x205 $x199)))
 (let (($x12 (and $x125 $x117)))
 (let (($x74 (and $x12 $x51)))
 (let (($x238 (and $x74 $x266)))
 (let (($x72 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x57 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (=> $x230 (= ?x57 ?x138))))))))
 ))
 (let (($x41 (forall ((Lambda1 (_ BitVec 32)) )(let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x176 (_ bv1 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (= $x230 $x104))))))))
 ))
 (let (($x180 (forall ((Lambda1 (_ BitVec 32)) )(let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x176 (_ bv0 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x189 (_ bv0 32))))
 (= $x261 $x52))))))))
 ))
 (let (($x319 (and $x180 $x15)))
 (let (($x241 (and $x319 $x41)))
 (let (($x269 (and $x241 $x72)))
 (let (($x286 (and $x269 $x238)))
 (let (($x307 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x265 (and $x307 $x286)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x31 (and $x93 $x265)))
 (let (($x287 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x292 (and $x287 $x31)))
 (let ((?x150 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%x ?x150)))
 (let (($x89 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x234 (bvadd ?x134 (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x234)))
 (let (($x224 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x234)))
 (let (($x204 (or false (or false (and (and true (or $x26 $x224)) (or $x145 $x89))))))
 (let (($x220 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x18 (=> (and $x83 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x296 (and $x18 $x292)))
 (let (($x317 (=> $x296 $x177)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x83 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (not $x83)))
 (let (($x316 (= $x136 false)))
 (let (($x177 (= $x316 true)))
 (let ((?x179 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x218 (bvneg ?x179)))
 (let (($x273 (= ?x218 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x266 (= $x273 true)))
 (let (($x56 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x263))))
 (let ((?x138 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x176 (_ bv1 32))))
 (=> $x104 (= ?x138 ?x96))))))))))
 ))
 (let (($x228 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x69 (_ bv1 32))))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x176 (_ bv1 32))))
 (= $x104 $x173)))))))
 ))
 (let (($x270 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (= false false)))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x176 (_ bv0 32))))
 (=> $x52 $x239))))))
 ))
 (let (($x247 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x69 (_ bv0 32))))
 (let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x176 (_ bv0 32))))
 (= $x52 $x141)))))))
 ))
 (let (($x253 (and $x247 $x270)))
 (let (($x101 (and $x253 $x228)))
 (let (($x67 (and $x101 $x56)))
 (let (($x184 (= $x67 true)))
 (let (($x51 (= $x184 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x256 true)))
 (let (($x117 (= $x65 true)))
 (let (($x54 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x263))))
 (let ((?x57 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (=> $x230 (= ?x57 ?x96))))))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x69 (_ bv1 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (= $x230 $x173)))))))
 ))
 (let (($x15 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (= false false)))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x189 (_ bv0 32))))
 (=> $x261 $x239))))))
 ))
 (let (($x183 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x69 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (= ?x69 (_ bv0 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x189 (_ bv0 32))))
 (= $x261 $x141)))))))
 ))
 (let (($x212 (and $x183 $x15)))
 (let (($x274 (and $x212 $x99)))
 (let (($x84 (and $x274 $x54)))
 (let (($x233 (= $x84 true)))
 (let (($x199 (= $x233 true)))
 (let (($x61 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x194 (= $x61 true)))
 (let (($x174 (= $x194 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x40 (= $x33 true)))
 (let (($x155 (= $x40 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x223)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x34 (= (_ bv0 32) ?x144)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x249)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (and $x97 $x258)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x192 $x298)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x38 $x102)))
 (let (($x21 (not $x186)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x119 $x148)))
 (let (($x221 (and (not $x159) $x21)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x143 $x77)))
 (let (($x229 (not $x276)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x288 $x110)))
 (let (($x225 (and (not $x87) $x229)))
 (let (($x210 (and (and (and (and (and (and $x225 $x221) $x36) $x227) $x66) $x105) $x34)))
 (let (($x85 (and $x210 $x63)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x126 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x214 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x126)))
 (let (($x209 (or false (or false (and (and true (or $x275 $x214)) (or $x23 $x16))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x209)))
 (let (($x207 (and $x48 $x85)))
 (let (($x240 (= $x207 true)))
 (let (($x254 (= $x240 true)))
 (let (($x64 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x310 (= $x64 true)))
 (let (($x53 (= $x310 true)))
 (let ((?x175 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x88 (= (_ bv0 2) ?x175)))
 (let (($x49 (= $x88 true)))
 (let (($x43 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x278 (= $x43 true)))
 (let (($x312 (= $x278 true)))
 (let ((?x161 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x308 (bvneg ?x161)))
 (let (($x219 (= ?x308 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x219 true)))
 (let (($x169 (and $x202 $x312)))
 (let (($x78 (and $x169 $x49)))
 (let (($x37 (and $x78 $x53)))
 (let (($x165 (and $x37 $x254)))
 (let (($x262 (and $x165 $x155)))
 (let (($x205 (and $x262 $x174)))
 (let (($x125 (and $x205 $x199)))
 (let (($x12 (and $x125 $x117)))
 (let (($x74 (and $x12 $x51)))
 (let (($x238 (and $x74 $x266)))
 (let (($x72 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x138 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x57 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (=> $x230 (= ?x57 ?x138))))))))
 ))
 (let (($x41 (forall ((Lambda1 (_ BitVec 32)) )(let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x176 (_ bv1 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x189 (_ bv1 32))))
 (= $x230 $x104))))))))
 ))
 (let (($x180 (forall ((Lambda1 (_ BitVec 32)) )(let (($x127 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x176 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (= ?x176 (_ bv0 32))))
 (let (($x236 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x189 (ite $x236 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x189 (_ bv0 32))))
 (= $x261 $x52))))))))
 ))
 (let (($x319 (and $x180 $x15)))
 (let (($x241 (and $x319 $x41)))
 (let (($x269 (and $x241 $x72)))
 (let (($x286 (and $x269 $x238)))
 (let (($x307 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x265 (and $x307 $x286)))
 (let (($x93 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x31 (and $x93 $x265)))
 (let (($x287 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x292 (and $x287 $x31)))
 (let ((?x150 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%x ?x150)))
 (let (($x89 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x234 (bvadd ?x134 (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x234)))
 (let (($x224 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x234)))
 (let (($x204 (or false (or false (and (and true (or $x26 $x224)) (or $x145 $x89))))))
 (let (($x220 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x18 (=> (and $x83 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x296 (and $x18 $x292)))
 (let (($x317 (=> $x296 $x177)))
 (not $x317)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6fee800a)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6fee800a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x6fee800a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6fee800a x!0)
         (ite (bvule #x6fee800b x!0) #x6fee800b #x6fee800a)
         #x00000000))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!10 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!10 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x5fc6a470)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x5fc6a470)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x872178b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x09fcda9c)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x5fc6a470)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x09fcda9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x872178bb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x09fcda9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x872178b8)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!10 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x5fc6a470 x!0)
         (ite (bvule #x5fc6a471 x!0) #x5fc6a471 #x5fc6a470)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!10 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x293 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x237 (ite $x293 (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x237 (_ bv0 32))))
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (or $x196 $x277)))
 (let (($x267 (= $x71 true)))
 (let (($x5 (= $x267 true)))
 (let ((?x242 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x206 (bvneg ?x242)))
 (let (($x203 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x203 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x257 (= $x90 true)))
 (let (($x106 (= $x257 true)))
 (let (($x100 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x31))))
 (let ((?x301 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x104 (_ bv1 32))))
 (=> $x121 (= ?x301 ?x317))))))))))
 ))
 (let (($x211 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x47 (_ bv1 32))))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x104 (_ bv1 32))))
 (= $x121 $x65)))))))
 ))
 (let (($x32 (forall ((Lambda1 (_ BitVec 32)) )(let (($x272 (= false false)))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x104 (_ bv0 32))))
 (=> $x235 $x272))))))
 ))
 (let (($x140 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x47 (_ bv0 32))))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x104 (_ bv0 32))))
 (= $x235 $x54)))))))
 ))
 (let (($x251 (and $x140 $x32)))
 (let (($x133 (and $x251 $x211)))
 (let (($x153 (and $x133 $x100)))
 (let (($x185 (= $x153 true)))
 (let (($x226 (= $x185 true)))
 (let (($x315 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (= $x315 true)))
 (let (($x131 (= $x170 true)))
 (let (($x7 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x31))))
 (let ((?x278 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (=> $x219 (= ?x278 ?x317))))))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x47 (_ bv1 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (= $x219 $x65)))))))
 ))
 (let (($x269 (forall ((Lambda1 (_ BitVec 32)) )(let (($x272 (= false false)))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x41 (_ bv0 32))))
 (=> $x241 $x272))))))
 ))
 (let (($x233 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x47 (_ bv0 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x41 (_ bv0 32))))
 (= $x241 $x54)))))))
 ))
 (let (($x199 (and $x233 $x269)))
 (let (($x139 (and $x199 $x12)))
 (let (($x13 (and $x139 $x7)))
 (let (($x73 (= $x13 true)))
 (let (($x195 (= $x73 true)))
 (let (($x197 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x290 (= $x197 true)))
 (let (($x9 (= $x290 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x99 true)))
 (let (($x190 (= $x274 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x183 true)))
 (let (($x173 (= $x212 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x165)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x240)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x144 $x210)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x129 $x223)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x58 $x192)))
 (let (($x249 (not $x97)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (and $x260 $x132)))
 (let (($x298 (and (not $x227) $x249)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x186 $x21)))
 (let (($x163 (not $x221)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x95 $x209)))
 (let (($x36 (and (not $x102) $x163)))
 (let (($x174 (and (and (and (and (and (and $x36 $x298) $x156) $x105) $x63) $x207) $x254)))
 (let (($x205 (and $x174 $x33)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x159 (or false (or false (and (and true (or $x87 $x146)) (or $x276 $x229))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x172 (and $x38 $x205)))
 (let (($x10 (= $x172 true)))
 (let (($x60 (= $x10 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x23 (= (_ bv0 2) ?x124)))
 (let (($x16 (= $x23 true)))
 (let ((?x300 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x299 (bvneg ?x300)))
 (let (($x275 (= ?x299 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x275 true)))
 (let (($x285 (and $x214 $x16)))
 (let (($x69 (and $x285 $x60)))
 (let (($x314 (and $x69 $x173)))
 (let (($x6 (and $x314 $x190)))
 (let (($x20 (and $x6 $x9)))
 (let (($x200 (and $x20 $x195)))
 (let (($x68 (and $x200 $x131)))
 (let (($x279 (and $x68 $x226)))
 (let (($x123 (and $x279 $x106)))
 (let (($x35 (and $x123 $x82)))
 (let (($x310 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x301 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x278 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (=> $x219 (= ?x278 ?x301))))))))
 ))
 (let (($x168 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x104 (_ bv1 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (= $x219 $x121))))))))
 ))
 (let (($x138 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x104 (_ bv0 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x41 (_ bv0 32))))
 (= $x241 $x235))))))))
 ))
 (let (($x264 (and $x138 $x269)))
 (let (($x289 (and $x264 $x168)))
 (let (($x53 (and $x289 $x310)))
 (let (($x162 (and $x53 $x35)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x320 (and $x76 $x162)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x193 (and $x130 $x320)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x171 (and $x22 $x193)))
 (let ((?x150 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%x ?x150)))
 (let (($x79 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd ?x134 (_ bv3 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x17 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x18 (or false (or false (and (and true (or $x115 $x17)) (or $x103 $x79))))))
 (let (($x287 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x114 (=> (and $x196 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x248 (and $x114 $x171)))
 (let (($x291 (=> $x248 $x5)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x293 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x237 (ite $x293 (_ bv1 32) (_ bv0 32))))
 (let (($x277 (= ?x237 (_ bv0 32))))
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x71 (or $x196 $x277)))
 (let (($x267 (= $x71 true)))
 (let (($x5 (= $x267 true)))
 (let ((?x242 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x206 (bvneg ?x242)))
 (let (($x203 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x203 true)))
 (let (($x90 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x257 (= $x90 true)))
 (let (($x106 (= $x257 true)))
 (let (($x100 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x31))))
 (let ((?x301 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x104 (_ bv1 32))))
 (=> $x121 (= ?x301 ?x317))))))))))
 ))
 (let (($x211 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x47 (_ bv1 32))))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x104 (_ bv1 32))))
 (= $x121 $x65)))))))
 ))
 (let (($x32 (forall ((Lambda1 (_ BitVec 32)) )(let (($x272 (= false false)))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x104 (_ bv0 32))))
 (=> $x235 $x272))))))
 ))
 (let (($x140 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x47 (_ bv0 32))))
 (let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x104 (_ bv0 32))))
 (= $x235 $x54)))))))
 ))
 (let (($x251 (and $x140 $x32)))
 (let (($x133 (and $x251 $x211)))
 (let (($x153 (and $x133 $x100)))
 (let (($x185 (= $x153 true)))
 (let (($x226 (= $x185 true)))
 (let (($x315 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x170 (= $x315 true)))
 (let (($x131 (= $x170 true)))
 (let (($x7 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x31))))
 (let ((?x278 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (=> $x219 (= ?x278 ?x317))))))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x47 (_ bv1 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (= $x219 $x65)))))))
 ))
 (let (($x269 (forall ((Lambda1 (_ BitVec 32)) )(let (($x272 (= false false)))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x41 (_ bv0 32))))
 (=> $x241 $x272))))))
 ))
 (let (($x233 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x47 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x54 (= ?x47 (_ bv0 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x41 (_ bv0 32))))
 (= $x241 $x54)))))))
 ))
 (let (($x199 (and $x233 $x269)))
 (let (($x139 (and $x199 $x12)))
 (let (($x13 (and $x139 $x7)))
 (let (($x73 (= $x13 true)))
 (let (($x195 (= $x73 true)))
 (let (($x197 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x290 (= $x197 true)))
 (let (($x9 (= $x290 true)))
 (let (($x99 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x99 true)))
 (let (($x190 (= $x274 true)))
 (let (($x183 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x212 (= $x183 true)))
 (let (($x173 (= $x212 true)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x165)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x240)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x144 $x210)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x129 $x223)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x58 $x192)))
 (let (($x249 (not $x97)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (and $x260 $x132)))
 (let (($x298 (and (not $x227) $x249)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x186 $x21)))
 (let (($x163 (not $x221)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x95 $x209)))
 (let (($x36 (and (not $x102) $x163)))
 (let (($x174 (and (and (and (and (and (and $x36 $x298) $x156) $x105) $x63) $x207) $x254)))
 (let (($x205 (and $x174 $x33)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x159 (or false (or false (and (and true (or $x87 $x146)) (or $x276 $x229))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x172 (and $x38 $x205)))
 (let (($x10 (= $x172 true)))
 (let (($x60 (= $x10 true)))
 (let ((?x124 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x23 (= (_ bv0 2) ?x124)))
 (let (($x16 (= $x23 true)))
 (let ((?x300 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x299 (bvneg ?x300)))
 (let (($x275 (= ?x299 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x275 true)))
 (let (($x285 (and $x214 $x16)))
 (let (($x69 (and $x285 $x60)))
 (let (($x314 (and $x69 $x173)))
 (let (($x6 (and $x314 $x190)))
 (let (($x20 (and $x6 $x9)))
 (let (($x200 (and $x20 $x195)))
 (let (($x68 (and $x200 $x131)))
 (let (($x279 (and $x68 $x226)))
 (let (($x123 (and $x279 $x106)))
 (let (($x35 (and $x123 $x82)))
 (let (($x310 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x301 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x278 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (=> $x219 (= ?x278 ?x301))))))))
 ))
 (let (($x168 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x121 (bvuge ?x104 (_ bv1 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x219 (bvuge ?x41 (_ bv1 32))))
 (= $x219 $x121))))))))
 ))
 (let (($x138 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x104 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x104 (_ bv0 32))))
 (let (($x127 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x127 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (= ?x41 (_ bv0 32))))
 (= $x241 $x235))))))))
 ))
 (let (($x264 (and $x138 $x269)))
 (let (($x289 (and $x264 $x168)))
 (let (($x53 (and $x289 $x310)))
 (let (($x162 (and $x53 $x35)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x320 (and $x76 $x162)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x193 (and $x130 $x320)))
 (let (($x22 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x171 (and $x22 $x193)))
 (let ((?x150 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvadd input.dst.llvm-%x ?x150)))
 (let (($x79 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd ?x134 (_ bv3 32))))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x17 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x18 (or false (or false (and (and true (or $x115 $x17)) (or $x103 $x79))))))
 (let (($x287 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) $x18)))
 (let (($x114 (=> (and $x196 (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32)))) $x18)))
 (let (($x248 (and $x114 $x171)))
 (let (($x291 (=> $x248 $x5)))
 (not $x291))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 225 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= input.spec-%var-ret-0.L2%7%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x169 (= $x43 true)))
 (let (($x88 (= $x169 true)))
 (let ((?x189 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x52 (bvneg ?x189)))
 (let (($x180 (= ?x52 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x180 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x51)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x270)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x313 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x311 (and $x291 $x313)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x5 $x311)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x162 $x320)))
 (let (($x171 (not $x193)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x203 $x82)))
 (let (($x293 (and (not $x35) $x171)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x90 $x257)))
 (let (($x123 (not $x106)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x73 $x195)))
 (let (($x206 (and (not $x279) $x123)))
 (let (($x67 (and (and (and (and (and (and $x206 $x293) $x277) $x267) $x8) $x98) $x184)))
 (let (($x74 (and $x67 $x39)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x153 (or false (or false (and (and true (or $x164 $x140)) (or $x211 $x133))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x153)))
 (let (($x176 (and $x226 $x74)))
 (let (($x236 (= $x176 true)))
 (let (($x312 (= $x236 true)))
 (let (($x317 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x294 (= $x317 true)))
 (let (($x198 (= $x294 true)))
 (let (($x286 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x304))))
 (let ((?x57 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x103 (_ bv1 32))))
 (=> $x307 (= ?x57 ?x274))))))))))
 ))
 (let (($x266 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x260 (_ bv1 32))))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x103 (_ bv1 32))))
 (= $x307 $x249)))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let (($x18 (= false false)))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x103 (_ bv0 32))))
 (=> $x89 $x18))))))
 ))
 (let (($x199 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x260 (_ bv0 32))))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x103 (_ bv0 32))))
 (= $x89 $x132)))))))
 ))
 (let (($x139 (and $x199 $x12)))
 (let (($x316 (and $x139 $x266)))
 (let (($x265 (and $x316 $x286)))
 (let (($x238 (= $x265 true)))
 (let (($x31 (= $x238 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x11 (= $x250 true)))
 (let (($x47 (= $x11 true)))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x304))))
 (let ((?x239 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (=> $x76 (= ?x239 ?x274))))))))))
 ))
 (let (($x40 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x260 (_ bv1 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (= $x76 $x249)))))))
 ))
 (let (($x135 (forall ((Lambda1 (_ BitVec 32)) )(let (($x18 (= false false)))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x79 (_ bv0 32))))
 (=> $x244 $x18))))))
 ))
 (let (($x258 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x260 (_ bv0 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x79 (_ bv0 32))))
 (= $x244 $x132)))))))
 ))
 (let (($x58 (and $x258 $x135)))
 (let (($x66 (and $x58 $x40)))
 (let (($x290 (and $x66 $x197)))
 (let (($x9 (= $x290 true)))
 (let (($x20 (= $x9 true)))
 (let ((?x119 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x148 (= (_ bv0 2) ?x119)))
 (let (($x159 (= $x148 true)))
 (let (($x146 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x146 true)))
 (let (($x77 (= $x143 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x288 true)))
 (let (($x110 (= $x122 true)))
 (let ((?x124 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x23 (bvneg ?x124)))
 (let (($x16 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x16 true)))
 (let (($x299 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x299 true)))
 (let (($x275 (= $x126 true)))
 (let (($x64 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x310 (not $x64)))
 (let (($x53 (= $x310 true)))
 (let (($x37 (= $x53 true)))
 (let (($x214 (and $x37 $x275)))
 (let (($x48 (and $x214 $x285)))
 (let (($x87 (and $x48 $x110)))
 (let (($x276 (and $x87 $x77)))
 (let (($x38 (and $x276 $x159)))
 (let (($x96 (and $x38 $x20)))
 (let (($x54 (and $x96 $x47)))
 (let (($x136 (and $x54 $x31)))
 (let (($x7 (and $x136 $x198)))
 (let (($x178 (and $x7 $x312)))
 (let (($x319 (and $x178 $x15)))
 (let (($x168 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x289 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x289 (_ bv0 32))))
 (let (($x230 (and $x278 $x319)))
 (let (($x219 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x57 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x239 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (=> $x76 (= ?x239 ?x57))))))))
 ))
 (let (($x127 (forall ((Lambda1 (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x103 (_ bv1 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (= $x76 $x307))))))))
 ))
 (let (($x220 (forall ((Lambda1 (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x103 (_ bv0 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x79 (_ bv0 32))))
 (= $x244 $x89))))))))
 ))
 (let (($x22 (and $x220 $x135)))
 (let (($x41 (and $x22 $x127)))
 (let (($x121 (and $x41 $x219)))
 (let (($x302 (and $x121 $x230)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x252 (and $x134 $x302)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x161 (and $x108 $x252)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x308 (and $x75 $x161)))
 (let (($x49 (=> $x308 $x88)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x43 (= input.spec-%var-ret-0.L2%7%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x169 (= $x43 true)))
 (let (($x88 (= $x169 true)))
 (let ((?x189 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x52 (bvneg ?x189)))
 (let (($x180 (= ?x52 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x180 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x51)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x270)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x313 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x149)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x311 (and $x291 $x313)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x5 $x311)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x162 $x320)))
 (let (($x171 (not $x193)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x203 $x82)))
 (let (($x293 (and (not $x35) $x171)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x90 $x257)))
 (let (($x123 (not $x106)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x73 $x195)))
 (let (($x206 (and (not $x279) $x123)))
 (let (($x67 (and (and (and (and (and (and $x206 $x293) $x277) $x267) $x8) $x98) $x184)))
 (let (($x74 (and $x67 $x39)))
 (let (($x133 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x153 (or false (or false (and (and true (or $x164 $x140)) (or $x211 $x133))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x153)))
 (let (($x176 (and $x226 $x74)))
 (let (($x236 (= $x176 true)))
 (let (($x312 (= $x236 true)))
 (let (($x317 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x294 (= $x317 true)))
 (let (($x198 (= $x294 true)))
 (let (($x286 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x304))))
 (let ((?x57 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x103 (_ bv1 32))))
 (=> $x307 (= ?x57 ?x274))))))))))
 ))
 (let (($x266 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x260 (_ bv1 32))))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x103 (_ bv1 32))))
 (= $x307 $x249)))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let (($x18 (= false false)))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x103 (_ bv0 32))))
 (=> $x89 $x18))))))
 ))
 (let (($x199 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x260 (_ bv0 32))))
 (let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x103 (_ bv0 32))))
 (= $x89 $x132)))))))
 ))
 (let (($x139 (and $x199 $x12)))
 (let (($x316 (and $x139 $x266)))
 (let (($x265 (and $x316 $x286)))
 (let (($x238 (= $x265 true)))
 (let (($x31 (= $x238 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x11 (= $x250 true)))
 (let (($x47 (= $x11 true)))
 (let (($x197 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x304))))
 (let ((?x239 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (=> $x76 (= ?x239 ?x274))))))))))
 ))
 (let (($x40 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x260 (_ bv1 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (= $x76 $x249)))))))
 ))
 (let (($x135 (forall ((Lambda1 (_ BitVec 32)) )(let (($x18 (= false false)))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x79 (_ bv0 32))))
 (=> $x244 $x18))))))
 ))
 (let (($x258 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x260 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x132 (= ?x260 (_ bv0 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x79 (_ bv0 32))))
 (= $x244 $x132)))))))
 ))
 (let (($x58 (and $x258 $x135)))
 (let (($x66 (and $x58 $x40)))
 (let (($x290 (and $x66 $x197)))
 (let (($x9 (= $x290 true)))
 (let (($x20 (= $x9 true)))
 (let ((?x119 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x148 (= (_ bv0 2) ?x119)))
 (let (($x159 (= $x148 true)))
 (let (($x146 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x146 true)))
 (let (($x77 (= $x143 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x122 (= $x288 true)))
 (let (($x110 (= $x122 true)))
 (let ((?x124 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x23 (bvneg ?x124)))
 (let (($x16 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x285 (= $x16 true)))
 (let (($x299 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x299 true)))
 (let (($x275 (= $x126 true)))
 (let (($x64 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x310 (not $x64)))
 (let (($x53 (= $x310 true)))
 (let (($x37 (= $x53 true)))
 (let (($x214 (and $x37 $x275)))
 (let (($x48 (and $x214 $x285)))
 (let (($x87 (and $x48 $x110)))
 (let (($x276 (and $x87 $x77)))
 (let (($x38 (and $x276 $x159)))
 (let (($x96 (and $x38 $x20)))
 (let (($x54 (and $x96 $x47)))
 (let (($x136 (and $x54 $x31)))
 (let (($x7 (and $x136 $x198)))
 (let (($x178 (and $x7 $x312)))
 (let (($x319 (and $x178 $x15)))
 (let (($x168 (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x289 (ite $x168 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x289 (_ bv0 32))))
 (let (($x230 (and $x278 $x319)))
 (let (($x219 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x57 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x239 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (=> $x76 (= ?x239 ?x57))))))))
 ))
 (let (($x127 (forall ((Lambda1 (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x103 (_ bv1 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x79 (_ bv1 32))))
 (= $x76 $x307))))))))
 ))
 (let (($x220 (forall ((Lambda1 (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x103 (ite $x26 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x103 (_ bv0 32))))
 (let (($x281 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x79 (ite $x281 (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x79 (_ bv0 32))))
 (= $x244 $x89))))))))
 ))
 (let (($x22 (and $x220 $x135)))
 (let (($x41 (and $x22 $x127)))
 (let (($x121 (and $x41 $x219)))
 (let (($x302 (and $x121 $x230)))
 (let (($x134 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x252 (and $x134 $x302)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x161 (and $x108 $x252)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x308 (and $x75 $x161)))
 (let (($x49 (=> $x308 $x88)))
 (not $x49))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (not $x196)))
 (let (($x179 (or $x196 $x256)))
 (let (($x218 (= $x179 true)))
 (let (($x231 (= $x218 true)))
 (let ((?x65 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x247 (bvneg ?x65)))
 (let (($x177 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x177 true)))
 (let (($x192 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x85))))
 (let ((?x258 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x16 (_ bv1 32))))
 (=> $x148 (= ?x258 ?x174))))))))))
 ))
 (let (($x95 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x67 (_ bv1 32))))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x16 (_ bv1 32))))
 (= $x148 $x178)))))))
 ))
 (let (($x241 (forall ((Lambda1 (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x16 (_ bv0 32))))
 (=> $x285 $x87))))))
 ))
 (let (($x213 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x67 (_ bv0 32))))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x16 (_ bv0 32))))
 (= $x285 $x51)))))))
 ))
 (let (($x235 (and $x213 $x241)))
 (let (($x209 (and $x235 $x95)))
 (let (($x97 (and $x209 $x192)))
 (let (($x165 (= $x97 true)))
 (let (($x33 (= $x165 true)))
 (let (($x224 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x224 true)))
 (let (($x201 (= $x115 true)))
 (let (($x104 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x85))))
 (let ((?x260 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (=> $x159 (= ?x260 ?x174))))))))))
 ))
 (let (($x189 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x67 (_ bv1 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (= $x159 $x178)))))))
 ))
 (let (($x77 (forall ((Lambda1 (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x48 (_ bv0 32))))
 (=> $x288 $x87))))))
 ))
 (let (($x74 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x67 (_ bv0 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x48 (_ bv0 32))))
 (= $x288 $x51)))))))
 ))
 (let (($x176 (and $x74 $x77)))
 (let (($x52 (and $x176 $x189)))
 (let (($x17 (and $x52 $x104)))
 (let (($x138 (= $x17 true)))
 (let (($x70 (= $x138 true)))
 (let (($x228 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x5 (= $x228 true)))
 (let (($x291 (= $x5 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x44 (= $x277 true)))
 (let (($x71 (= $x44 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x123)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x257)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x226)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (and $x153 $x73)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (and $x100 $x195)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x131 $x140)))
 (let (($x32 (not $x222)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (and $x170 $x68)))
 (let (($x211 (and (not $x164) $x32)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x294 $x198)))
 (let (($x200 (not $x7)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x47 $x54)))
 (let (($x185 (and (not $x317) $x200)))
 (let (($x320 (and (and (and (and (and (and $x185 $x211) $x133) $x282) $x279) $x90) $x106)))
 (let (($x193 (and $x320 $x206)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x316 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x238 (or false (or false (and (and true (or $x12 $x139)) (or $x316 $x292))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x238)))
 (let (($x171 (and $x136 $x193)))
 (let (($x293 (= $x171 true)))
 (let (($x56 (= $x293 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x20 (= $x9 true)))
 (let (($x96 (= $x20 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x6 (= (_ bv0 2) ?x190)))
 (let (($x197 (= $x6 true)))
 (let (($x69 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x10 (= $x69 true)))
 (let (($x304 (= $x10 true)))
 (let ((?x194 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x314 (bvneg ?x194)))
 (let (($x63 (= ?x314 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x63 true)))
 (let (($x173 (and $x183 $x304)))
 (let (($x290 (and $x173 $x197)))
 (let (($x250 (and $x290 $x96)))
 (let (($x237 (and $x250 $x56)))
 (let (($x267 (and $x237 $x71)))
 (let (($x149 (and $x267 $x291)))
 (let (($x28 (and $x149 $x70)))
 (let (($x145 (and $x28 $x201)))
 (let (($x84 (and $x145 $x33)))
 (let (($x216 (and $x84 $x152)))
 (let (($x156 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x258 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x260 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (=> $x159 (= ?x260 ?x258))))))))
 ))
 (let (($x163 (forall ((Lambda1 (_ BitVec 32)) )(let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x16 (_ bv1 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (= $x159 $x148))))))))
 ))
 (let (($x110 (forall ((Lambda1 (_ BitVec 32)) )(let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x16 (_ bv0 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x48 (_ bv0 32))))
 (= $x288 $x285))))))))
 ))
 (let (($x276 (and $x110 $x77)))
 (let (($x221 (and $x276 $x163)))
 (let (($x105 (and $x221 $x156)))
 (let (($x283 (and $x105 $x216)))
 (let (($x301 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x59 (and $x301 $x283)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x137 (and $x289 $x59)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x121 $x137)))
 (let ((?x108 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvadd input.dst.llvm-%x ?x108)))
 (let (($x127 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x220 (bvadd ?x150 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x114 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x220)))
 (let (($x269 (or false (or false (and (and true (or $x18 $x114)) (or $x261 $x127))))))
 (let (($x219 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) $x269)))
 (let (($x243 (=> (and $x196 (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32)))) $x269)))
 (let (($x125 (and $x243 $x263)))
 (let (($x158 (=> $x125 $x231)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x196 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (not $x196)))
 (let (($x179 (or $x196 $x256)))
 (let (($x218 (= $x179 true)))
 (let (($x231 (= $x218 true)))
 (let ((?x65 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x247 (bvneg ?x65)))
 (let (($x177 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x177 true)))
 (let (($x192 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x85))))
 (let ((?x258 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x16 (_ bv1 32))))
 (=> $x148 (= ?x258 ?x174))))))))))
 ))
 (let (($x95 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x67 (_ bv1 32))))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x16 (_ bv1 32))))
 (= $x148 $x178)))))))
 ))
 (let (($x241 (forall ((Lambda1 (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x16 (_ bv0 32))))
 (=> $x285 $x87))))))
 ))
 (let (($x213 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x67 (_ bv0 32))))
 (let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x16 (_ bv0 32))))
 (= $x285 $x51)))))))
 ))
 (let (($x235 (and $x213 $x241)))
 (let (($x209 (and $x235 $x95)))
 (let (($x97 (and $x209 $x192)))
 (let (($x165 (= $x97 true)))
 (let (($x33 (= $x165 true)))
 (let (($x224 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (= $x224 true)))
 (let (($x201 (= $x115 true)))
 (let (($x104 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x129 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x85))))
 (let ((?x260 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (=> $x159 (= ?x260 ?x174))))))))))
 ))
 (let (($x189 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x67 (_ bv1 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (= $x159 $x178)))))))
 ))
 (let (($x77 (forall ((Lambda1 (_ BitVec 32)) )(let (($x87 (= false false)))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x48 (_ bv0 32))))
 (=> $x288 $x87))))))
 ))
 (let (($x74 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x51 (= ?x67 (_ bv0 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x48 (_ bv0 32))))
 (= $x288 $x51)))))))
 ))
 (let (($x176 (and $x74 $x77)))
 (let (($x52 (and $x176 $x189)))
 (let (($x17 (and $x52 $x104)))
 (let (($x138 (= $x17 true)))
 (let (($x70 (= $x138 true)))
 (let (($x228 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x5 (= $x228 true)))
 (let (($x291 (= $x5 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x44 (= $x277 true)))
 (let (($x71 (= $x44 true)))
 (let ((?x123 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x123)))
 (let ((?x257 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x257)))
 (let ((?x242 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x242)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x226)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (and $x153 $x73)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (and $x100 $x195)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (and $x131 $x140)))
 (let (($x32 (not $x222)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (and $x170 $x68)))
 (let (($x211 (and (not $x164) $x32)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x294 $x198)))
 (let (($x200 (not $x7)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x47 $x54)))
 (let (($x185 (and (not $x317) $x200)))
 (let (($x320 (and (and (and (and (and (and $x185 $x211) $x133) $x282) $x279) $x90) $x106)))
 (let (($x193 (and $x320 $x206)))
 (let (($x292 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x316 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x139 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x238 (or false (or false (and (and true (or $x12 $x139)) (or $x316 $x292))))))
 (let (($x136 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x238)))
 (let (($x171 (and $x136 $x193)))
 (let (($x293 (= $x171 true)))
 (let (($x56 (= $x293 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x20 (= $x9 true)))
 (let (($x96 (= $x20 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x6 (= (_ bv0 2) ?x190)))
 (let (($x197 (= $x6 true)))
 (let (($x69 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x10 (= $x69 true)))
 (let (($x304 (= $x10 true)))
 (let ((?x194 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x314 (bvneg ?x194)))
 (let (($x63 (= ?x314 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x183 (= $x63 true)))
 (let (($x173 (and $x183 $x304)))
 (let (($x290 (and $x173 $x197)))
 (let (($x250 (and $x290 $x96)))
 (let (($x237 (and $x250 $x56)))
 (let (($x267 (and $x237 $x71)))
 (let (($x149 (and $x267 $x291)))
 (let (($x28 (and $x149 $x70)))
 (let (($x145 (and $x28 $x201)))
 (let (($x84 (and $x145 $x33)))
 (let (($x216 (and $x84 $x152)))
 (let (($x156 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x258 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x260 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (=> $x159 (= ?x260 ?x258))))))))
 ))
 (let (($x163 (forall ((Lambda1 (_ BitVec 32)) )(let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x148 (bvuge ?x16 (_ bv1 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x48 (_ bv1 32))))
 (= $x159 $x148))))))))
 ))
 (let (($x110 (forall ((Lambda1 (_ BitVec 32)) )(let (($x275 (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1)))
 (let ((?x16 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x16 (_ bv0 32))))
 (let (($x53 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x48 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x288 (= ?x48 (_ bv0 32))))
 (= $x288 $x285))))))))
 ))
 (let (($x276 (and $x110 $x77)))
 (let (($x221 (and $x276 $x163)))
 (let (($x105 (and $x221 $x156)))
 (let (($x283 (and $x105 $x216)))
 (let (($x301 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x59 (and $x301 $x283)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x137 (and $x289 $x59)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x121 $x137)))
 (let ((?x108 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x150 (bvadd input.dst.llvm-%x ?x108)))
 (let (($x127 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x220 (bvadd ?x150 (_ bv3 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x114 (bvugt ?x150 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x220)))
 (let (($x269 (or false (or false (and (and true (or $x18 $x114)) (or $x261 $x127))))))
 (let (($x219 (=> (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32))) $x269)))
 (let (($x243 (=> (and $x196 (bvule ?x150 (bvsub (bvadd ?x150 (_ bv4 32)) (_ bv1 32)))) $x269)))
 (let (($x125 (and $x243 $x263)))
 (let (($x158 (=> $x125 $x231)))
 (not $x158))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x255)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x189)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x67 $x39)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x184 $x74)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x277 $x44)))
 (let (($x267 (not $x71)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x293 $x56)))
 (let (($x5 (and (not $x237) $x267)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x106 $x320)))
 (let (($x206 (not $x123)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x90 $x162)))
 (let (($x171 (and (not $x257) $x206)))
 (let (($x210 (and (and (and (and (and (and $x171 $x5) $x149) $x101) $x176) $x175) $x52)))
 (let (($x254 (and $x210 $x46)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x205 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x205)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x205)))
 (let (($x173 (or false (or false (and (and true (or $x172 $x194)) (or $x212 $x60))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x173)))
 (let (($x231 (and $x190 $x254)))
 (let (($x158 (= $x231 true)))
 (let (($x181 (= $x158 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x224 (concat ?x138 (concat ?x141 ?x174)))))
 (let (($x59 (= ?x115 input.dst.llvm-%x)))
 (let (($x137 (= $x59 true)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x186 (concat ?x72 (concat ?x130 ?x287)))))
 (let (($x152 (= ?x21 input.dst.llvm-%n)))
 (let (($x216 (= $x152 true)))
 (let (($x192 (= input.dst.llvm-%n ?x21)))
 (let (($x201 (= input.dst.llvm-%x ?x115)))
 (let (($x97 (and $x201 $x192)))
 (let (($x85 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x165 (and $x85 $x97)))
 (let (($x248 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x203 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x24))))
 (let ((?x16 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (=> $x310 (= ?x16 ?x73))))))))))
 ))
 (let (($x296 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (= $x310 (bvuge ?x199 (_ bv1 32))))))))
 ))
 (let (($x121 (forall ((Lambda1 (_ BitVec 32)) )(let (($x219 (= false false)))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x41 (_ bv0 32))))
 (=> $x239 $x219))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x41 (_ bv0 32))))
 (= $x239 (= ?x199 (_ bv0 32))))))))
 ))
 (let (($x139 (and $x12 $x121)))
 (let (($x286 (and $x139 $x296)))
 (let (($x242 (and $x286 $x248)))
 (let (($x65 (and (and (and $x190 $x242) $x254) $x165)))
 (let (($x247 (= $x65 true)))
 (let (($x177 (= $x247 true)))
 (let (($x283 (and $x177 $x216)))
 (let (($x263 (and $x283 $x137)))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x110 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x16 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (=> $x310 (= ?x16 ?x110))))))))
 ))
 (let (($x48 (forall ((Lambda1 (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (= $x310 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x269 (forall ((Lambda1 (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x41 (_ bv0 32))))
 (= $x239 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x202 (and $x269 $x121)))
 (let (($x288 (and $x202 $x48)))
 (let (($x38 (and $x288 $x148)))
 (let (($x125 (and $x38 $x263)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x256 (and $x150 $x125)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x179 (and $x112 $x256)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x218 (and $x83 $x179)))
 (let (($x180 (=> $x218 $x181)))
 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x46 (= (_ bv0 32) ?x255)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x189)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x67 $x39)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x184 $x74)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (and $x277 $x44)))
 (let (($x267 (not $x71)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x293 $x56)))
 (let (($x5 (and (not $x237) $x267)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x106 $x320)))
 (let (($x206 (not $x123)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x90 $x162)))
 (let (($x171 (and (not $x257) $x206)))
 (let (($x210 (and (and (and (and (and (and $x171 $x5) $x149) $x101) $x176) $x175) $x52)))
 (let (($x254 (and $x210 $x46)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x205 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x205)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x205)))
 (let (($x173 (or false (or false (and (and true (or $x172 $x194)) (or $x212 $x60))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x173)))
 (let (($x231 (and $x190 $x254)))
 (let (($x158 (= $x231 true)))
 (let (($x181 (= $x158 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x224 (concat ?x138 (concat ?x141 ?x174)))))
 (let (($x59 (= ?x115 input.dst.llvm-%x)))
 (let (($x137 (= $x59 true)))
 (let ((?x287 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x186 (concat ?x72 (concat ?x130 ?x287)))))
 (let (($x152 (= ?x21 input.dst.llvm-%n)))
 (let (($x216 (= $x152 true)))
 (let (($x192 (= input.dst.llvm-%n ?x21)))
 (let (($x201 (= input.dst.llvm-%x ?x115)))
 (let (($x97 (and $x201 $x192)))
 (let (($x85 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x165 (and $x85 $x97)))
 (let (($x248 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x203 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x24))))
 (let ((?x16 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (=> $x310 (= ?x16 ?x73))))))))))
 ))
 (let (($x296 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (= $x310 (bvuge ?x199 (_ bv1 32))))))))
 ))
 (let (($x121 (forall ((Lambda1 (_ BitVec 32)) )(let (($x219 (= false false)))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x41 (_ bv0 32))))
 (=> $x239 $x219))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x199 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x41 (_ bv0 32))))
 (= $x239 (= ?x199 (_ bv0 32))))))))
 ))
 (let (($x139 (and $x12 $x121)))
 (let (($x286 (and $x139 $x296)))
 (let (($x242 (and $x286 $x248)))
 (let (($x65 (and (and (and $x190 $x242) $x254) $x165)))
 (let (($x247 (= $x65 true)))
 (let (($x177 (= $x247 true)))
 (let (($x283 (and $x177 $x216)))
 (let (($x263 (and $x283 $x137)))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x110 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x16 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (=> $x310 (= ?x16 ?x110))))))))
 ))
 (let (($x48 (forall ((Lambda1 (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x310 (bvuge ?x41 (_ bv1 32))))
 (= $x310 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x269 (forall ((Lambda1 (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x41 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x41 (_ bv0 32))))
 (= $x239 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x202 (and $x269 $x121)))
 (let (($x288 (and $x202 $x48)))
 (let (($x38 (and $x288 $x148)))
 (let (($x125 (and $x38 $x263)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x256 (and $x150 $x125)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x179 (and $x112 $x256)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x218 (and $x83 $x179)))
 (let (($x180 (=> $x218 $x181)))
 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x266 (= (_ bv0 2) ?x273)))
 (let (($x222 (= $x266 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x220 (concat ?x135 (concat ?x204 ?x68)))))
 (let (($x143 (= ?x18 input.dst.llvm-%x)))
 (let (($x77 (= $x143 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x211 (concat ?x296 (concat ?x12 ?x31)))))
 (let (($x22 (= input.dst.llvm-%n ?x54)))
 (let (($x89 (= input.dst.llvm-%x ?x18)))
 (let (($x76 (and $x89 $x22)))
 (let (($x315 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x261 (and $x315 $x76)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x221)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x47)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x218)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x179 $x231)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x256 $x158)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x247 $x177)))
 (let (($x216 (not $x152)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x97 $x165)))
 (let (($x59 (and (not $x65) $x216)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x130 $x287)))
 (let (($x95 (not $x241)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x235 $x72)))
 (let (($x192 (and (not $x213) $x95)))
 (let (($x185 (and (and (and (and (and (and $x192 $x59) $x137) $x125) $x181) $x75) $x163)))
 (let (($x170 (and $x185 $x145)))
 (let (($x209 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x240 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x17))))
 (let ((?x99 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (=> $x205 (= ?x99 ?x70))))))))))
 ))
 (let (($x101 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x44 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (= $x205 (bvuge ?x44 (_ bv1 32))))))))
 ))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let (($x110 (= false false)))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x53 (_ bv0 32))))
 (=> $x48 $x110))))))
 ))
 (let (($x5 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x44 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x53 (_ bv0 32))))
 (= $x48 (= ?x44 (_ bv0 32))))))))
 ))
 (let (($x129 (and $x5 $x148)))
 (let (($x207 (and $x129 $x101)))
 (let (($x186 (and $x207 $x209)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x106 (or false (or false (and (and true (or $x100 $x73)) (or $x33 $x90))))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x289 (and (and (and $x123 $x186) $x170) $x261)))
 (let (($x278 (= $x289 true)))
 (let (($x275 (= $x278 true)))
 (let (($x164 (= ?x54 input.dst.llvm-%n)))
 (let (($x153 (= $x164 true)))
 (let (($x122 (and $x153 $x275)))
 (let (($x260 (and $x122 $x77)))
 (let (($x190 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x99 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (=> $x205 (= ?x99 ?x183))))))))
 ))
 (let (($x105 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (= $x205 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x16 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x53 (_ bv0 32))))
 (= $x48 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x38 (and $x16 $x148)))
 (let (($x194 (and $x38 $x105)))
 (let (($x250 (and $x194 $x190)))
 (let (($x6 (and $x250 $x260)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x197 (and $x150 $x6)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x290 (and $x112 $x197)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x9 (and $x83 $x290)))
 (let (($x32 (=> $x9 $x222)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x273 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x266 (= (_ bv0 2) ?x273)))
 (let (($x222 (= $x266 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x220 (concat ?x135 (concat ?x204 ?x68)))))
 (let (($x143 (= ?x18 input.dst.llvm-%x)))
 (let (($x77 (= $x143 true)))
 (let ((?x31 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x211 (concat ?x296 (concat ?x12 ?x31)))))
 (let (($x22 (= input.dst.llvm-%n ?x54)))
 (let (($x89 (= input.dst.llvm-%x ?x18)))
 (let (($x76 (and $x89 $x22)))
 (let (($x315 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x261 (and $x315 $x76)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x221)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x47)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x218)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x179 $x231)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x256 $x158)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x247 $x177)))
 (let (($x216 (not $x152)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x97 $x165)))
 (let (($x59 (and (not $x65) $x216)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x130 $x287)))
 (let (($x95 (not $x241)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x235 $x72)))
 (let (($x192 (and (not $x213) $x95)))
 (let (($x185 (and (and (and (and (and (and $x192 $x59) $x137) $x125) $x181) $x75) $x163)))
 (let (($x170 (and $x185 $x145)))
 (let (($x209 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x240 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv1 32))) (select input.dst.llvm-mem ?x240))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x240 (_ bv2 32))) ?x17))))
 (let ((?x99 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (=> $x205 (= ?x99 ?x70))))))))))
 ))
 (let (($x101 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x44 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (= $x205 (bvuge ?x44 (_ bv1 32))))))))
 ))
 (let (($x148 (forall ((Lambda1 (_ BitVec 32)) )(let (($x110 (= false false)))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x53 (_ bv0 32))))
 (=> $x48 $x110))))))
 ))
 (let (($x5 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x44 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x53 (_ bv0 32))))
 (= $x48 (= ?x44 (_ bv0 32))))))))
 ))
 (let (($x129 (and $x5 $x148)))
 (let (($x207 (and $x129 $x101)))
 (let (($x186 (and $x207 $x209)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x106 (or false (or false (and (and true (or $x100 $x73)) (or $x33 $x90))))))
 (let (($x123 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x289 (and (and (and $x123 $x186) $x170) $x261)))
 (let (($x278 (= $x289 true)))
 (let (($x275 (= $x278 true)))
 (let (($x164 (= ?x54 input.dst.llvm-%n)))
 (let (($x153 (= $x164 true)))
 (let (($x122 (and $x153 $x275)))
 (let (($x260 (and $x122 $x77)))
 (let (($x190 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x99 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (=> $x205 (= ?x99 ?x183))))))))
 ))
 (let (($x105 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x205 (bvuge ?x53 (_ bv1 32))))
 (= $x205 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x16 (forall ((Lambda1 (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x53 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x53 (_ bv0 32))))
 (= $x48 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x38 (and $x16 $x148)))
 (let (($x194 (and $x38 $x105)))
 (let (($x250 (and $x194 $x190)))
 (let (($x6 (and $x250 $x260)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x197 (and $x150 $x6)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x290 (and $x112 $x197)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x9 (and $x83 $x290)))
 (let (($x32 (=> $x9 $x222)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x293 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x56 (= $x293 true)))
 (let (($x291 (= $x56 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x307 (concat ?x219 (concat ?x114 ?x52)))))
 (let (($x212 (= ?x127 input.dst.llvm-%n)))
 (let (($x69 (= $x212 true)))
 (let (($x57 (= input.dst.llvm-%n ?x127)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x106 (concat ?x90 (concat ?x279 ?x73)))))
 (let (($x176 (= input.dst.llvm-%x ?x123)))
 (let (($x281 (and $x176 $x57)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x121 (and $x178 $x281)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x96)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x11)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x290 $x20)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x197 $x273)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x261 $x289)))
 (let (($x275 (not $x278)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x89 $x22)))
 (let (($x143 (and (not $x76) $x275)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x140 $x204)))
 (let (($x79 (not $x68)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x220 $x285)))
 (let (($x18 (and (not $x135) $x79)))
 (let (($x255 (and (and (and (and (and (and $x18 $x143) $x260) $x6) $x266) $x32) $x51)))
 (let (($x34 (and $x255 $x226)))
 (let (($x315 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x251 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x47))))
 (let ((?x12 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (=> $x211 (= ?x12 ?x168))))))))))
 ))
 (let (($x65 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (= $x211 (bvuge ?x213 (_ bv1 32))))))))
 ))
 (let (($x190 (forall ((Lambda1 (_ BitVec 32)) )(let (($x183 (= false false)))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x172 (_ bv0 32))))
 (=> $x105 $x183))))))
 ))
 (let (($x287 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x172 (_ bv0 32))))
 (= $x105 (= ?x213 (_ bv0 32))))))))
 ))
 (let (($x241 (and $x287 $x190)))
 (let (($x283 (and $x241 $x65)))
 (let (($x26 (and $x283 $x315)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x85 (or false (or false (and (and true (or $x207 $x67)) (or $x104 $x138))))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x40 (and (and (and $x141 $x26) $x34) $x121)))
 (let (($x66 (= $x40 true)))
 (let (($x274 (= $x66 true)))
 (let (($x237 (= ?x123 input.dst.llvm-%x)))
 (let (($x277 (= $x237 true)))
 (let (($x314 (and $x277 $x274)))
 (let (($x10 (and $x314 $x69)))
 (let (($x133 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x12 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (=> $x211 (= ?x12 ?x286))))))))
 ))
 (let (($x292 (forall ((Lambda1 (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (= $x211 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x172 (_ bv0 32))))
 (= $x105 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x250 (and $x99 $x190)))
 (let (($x296 (and $x250 $x292)))
 (let (($x320 (and $x296 $x133)))
 (let (($x200 (and $x320 $x10)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x282 (and $x150 $x200)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x206 (and $x112 $x282)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x171 (and $x83 $x206)))
 (let (($x149 (=> $x171 $x291)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x293 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x56 (= $x293 true)))
 (let (($x291 (= $x56 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x307 (concat ?x219 (concat ?x114 ?x52)))))
 (let (($x212 (= ?x127 input.dst.llvm-%n)))
 (let (($x69 (= $x212 true)))
 (let (($x57 (= input.dst.llvm-%n ?x127)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x279 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x123 (concat ?x106 (concat ?x90 (concat ?x279 ?x73)))))
 (let (($x176 (= input.dst.llvm-%x ?x123)))
 (let (($x281 (and $x176 $x57)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x121 (and $x178 $x281)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x96)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x51 (= (_ bv0 32) ?x11)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (and $x290 $x20)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x197 $x273)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x261 $x289)))
 (let (($x275 (not $x278)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x89 $x22)))
 (let (($x143 (and (not $x76) $x275)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x140 $x204)))
 (let (($x79 (not $x68)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x220 $x285)))
 (let (($x18 (and (not $x135) $x79)))
 (let (($x255 (and (and (and (and (and (and $x18 $x143) $x260) $x6) $x266) $x32) $x51)))
 (let (($x34 (and $x255 $x226)))
 (let (($x315 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x251 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x47))))
 (let ((?x12 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (=> $x211 (= ?x12 ?x168))))))))))
 ))
 (let (($x65 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (= $x211 (bvuge ?x213 (_ bv1 32))))))))
 ))
 (let (($x190 (forall ((Lambda1 (_ BitVec 32)) )(let (($x183 (= false false)))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x172 (_ bv0 32))))
 (=> $x105 $x183))))))
 ))
 (let (($x287 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x172 (_ bv0 32))))
 (= $x105 (= ?x213 (_ bv0 32))))))))
 ))
 (let (($x241 (and $x287 $x190)))
 (let (($x283 (and $x241 $x65)))
 (let (($x26 (and $x283 $x315)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x85 (or false (or false (and (and true (or $x207 $x67)) (or $x104 $x138))))))
 (let (($x141 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x40 (and (and (and $x141 $x26) $x34) $x121)))
 (let (($x66 (= $x40 true)))
 (let (($x274 (= $x66 true)))
 (let (($x237 (= ?x123 input.dst.llvm-%x)))
 (let (($x277 (= $x237 true)))
 (let (($x314 (and $x277 $x274)))
 (let (($x10 (and $x314 $x69)))
 (let (($x133 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x12 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (=> $x211 (= ?x12 ?x286))))))))
 ))
 (let (($x292 (forall ((Lambda1 (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x211 (bvuge ?x172 (_ bv1 32))))
 (= $x211 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1 (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x172 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x105 (= ?x172 (_ bv0 32))))
 (= $x105 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x250 (and $x99 $x190)))
 (let (($x296 (and $x250 $x292)))
 (let (($x320 (and $x296 $x133)))
 (let (($x200 (and $x320 $x10)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x282 (and $x150 $x200)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x206 (and $x112 $x282)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x171 (and $x83 $x206)))
 (let (($x149 (=> $x171 $x291)))
 (not $x149)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x266 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem ?x275))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv2 32))) ?x260))))
 (let ((?x279 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (=> $x106 (= ?x279 ?x9))))))))))
 ))
 (let (($x221 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (= $x106 (bvuge ?x251 (_ bv1 32))))))))
 ))
 (let (($x133 (forall ((Lambda1 (_ BitVec 32)) )(let (($x286 (= false false)))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x316 (_ bv0 32))))
 (=> $x292 $x286))))))
 ))
 (let (($x163 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x316 (_ bv0 32))))
 (= $x292 (= ?x251 (_ bv0 32))))))))
 ))
 (let (($x185 (and $x163 $x133)))
 (let (($x168 (and $x185 $x221)))
 (let (($x74 (and $x168 $x266)))
 (let (($x186 (= $x74 true)))
 (let (($x95 (= $x186 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x125 (concat ?x256 (concat ?x100 ?x44)))))
 (let (($x203 (= ?x144 input.dst.llvm-%x)))
 (let (($x164 (= $x203 true)))
 (let ((?x238 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x310 (concat ?x239 (concat ?x31 (concat ?x218 ?x238)))))
 (let (($x265 (= ?x310 input.dst.llvm-%n)))
 (let (($x117 (= $x265 true)))
 (let (($x301 (= input.dst.llvm-%n ?x310)))
 (let (($x137 (= input.dst.llvm-%x ?x144)))
 (let (($x288 (and $x137 $x301)))
 (let (($x152 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x159 (and $x152 $x288)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x69)))
 (let ((?x314 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x314)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (and $x127 $x281)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x60 $x121)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x178 $x176)))
 (let (($x307 (not $x103)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x276 $x189)))
 (let (($x219 (and (not $x161) $x307)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x11 $x51)))
 (let (($x96 (not $x255)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x222 $x32)))
 (let (($x34 (and (not $x210) $x96)))
 (let (($x56 (and (and (and (and (and (and $x34 $x219) $x114) $x264) $x40) $x274) $x212)))
 (let (($x291 (and $x56 $x10)))
 (let (($x235 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x213 (or false (or false (and (and true (or $x174 $x138)) (or $x141 $x235))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x304 (and (and (and $x130 $x74) $x291) $x159)))
 (let (($x258 (= $x304 true)))
 (let (($x199 (= $x258 true)))
 (let (($x139 (and $x199 $x117)))
 (let (($x71 (and $x139 $x164)))
 (let (($x129 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x162 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x279 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (=> $x106 (= ?x279 ?x162))))))))
 ))
 (let (($x242 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (= $x106 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x316 (_ bv0 32))))
 (= $x292 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x320 (and $x12 $x133)))
 (let (($x90 (and $x320 $x242)))
 (let (($x17 (and $x90 $x129)))
 (let (($x70 (and $x17 $x71)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x115 (and $x150 $x70)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x201 (and $x112 $x115)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x209 (and $x83 $x201)))
 (let (($x192 (=> $x209 $x95)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x266 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x275 (bvadd (bvmul Lambda1 (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem ?x275))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv2 32))) ?x260))))
 (let ((?x279 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (=> $x106 (= ?x279 ?x9))))))))))
 ))
 (let (($x221 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (= $x106 (bvuge ?x251 (_ bv1 32))))))))
 ))
 (let (($x133 (forall ((Lambda1 (_ BitVec 32)) )(let (($x286 (= false false)))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x316 (_ bv0 32))))
 (=> $x292 $x286))))))
 ))
 (let (($x163 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x251 (ite (and (bvule (_ bv0 32) Lambda1) (bvult Lambda1 input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x316 (_ bv0 32))))
 (= $x292 (= ?x251 (_ bv0 32))))))))
 ))
 (let (($x185 (and $x163 $x133)))
 (let (($x168 (and $x185 $x221)))
 (let (($x74 (and $x168 $x266)))
 (let (($x186 (= $x74 true)))
 (let (($x95 (= $x186 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x256 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x125 (concat ?x256 (concat ?x100 ?x44)))))
 (let (($x203 (= ?x144 input.dst.llvm-%x)))
 (let (($x164 (= $x203 true)))
 (let ((?x238 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x310 (concat ?x239 (concat ?x31 (concat ?x218 ?x238)))))
 (let (($x265 (= ?x310 input.dst.llvm-%n)))
 (let (($x117 (= $x265 true)))
 (let (($x301 (= input.dst.llvm-%n ?x310)))
 (let (($x137 (= input.dst.llvm-%x ?x144)))
 (let (($x288 (and $x137 $x301)))
 (let (($x152 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x159 (and $x152 $x288)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x69)))
 (let ((?x314 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x314)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (and $x127 $x281)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x60 $x121)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x178 $x176)))
 (let (($x307 (not $x103)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x161 (and $x276 $x189)))
 (let (($x219 (and (not $x161) $x307)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x11 $x51)))
 (let (($x96 (not $x255)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x222 $x32)))
 (let (($x34 (and (not $x210) $x96)))
 (let (($x56 (and (and (and (and (and (and $x34 $x219) $x114) $x264) $x40) $x274) $x212)))
 (let (($x291 (and $x56 $x10)))
 (let (($x235 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x213 (or false (or false (and (and true (or $x174 $x138)) (or $x141 $x235))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x304 (and (and (and $x130 $x74) $x291) $x159)))
 (let (($x258 (= $x304 true)))
 (let (($x199 (= $x258 true)))
 (let (($x139 (and $x199 $x117)))
 (let (($x71 (and $x139 $x164)))
 (let (($x129 (forall ((Lambda1 (_ BitVec 32)) )(let ((?x162 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1)))
 (let ((?x279 (input.spec-%var-x-1.1.1 Lambda1)))
 (let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (=> $x106 (= ?x279 ?x162))))))))
 ))
 (let (($x242 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x316 (_ bv1 32))))
 (= $x106 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv1 32)))))))
 ))
 (let (($x12 (forall ((Lambda1 (_ BitVec 32)) )(let (($x105 (input.spec-%var-x-1.0.1 Lambda1)))
 (let ((?x316 (ite $x105 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (= ?x316 (_ bv0 32))))
 (= $x292 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1) (_ bv1 32) (_ bv0 32)) (_ bv0 32)))))))
 ))
 (let (($x320 (and $x12 $x133)))
 (let (($x90 (and $x320 $x242)))
 (let (($x17 (and $x90 $x129)))
 (let (($x70 (and $x17 $x71)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x115 (and $x150 $x70)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x201 (and $x112 $x115)))
 (let (($x83 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x209 (and $x83 $x201)))
 (let (($x192 (=> $x209 $x95)))
 (not $x192))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.460759/query
