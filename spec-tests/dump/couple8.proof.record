==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= false true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x178 (concat ?x175 ?x173)))))
 (let (($x183 (= ?x182 input.dst.llvm-%n)))
 (let (($x184 (= $x183 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x167 (concat ?x164 (concat ?x161 ?x159)))))
 (let (($x169 (= ?x168 input.dst.llvm-%x)))
 (let (($x170 (= $x169 true)))
 (let (($x154 (forall ((input.ind-%var40X (_ BitVec 32)) )(let ((?x141 (bvadd (bvmul input.ind-%var40X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x145))))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var40X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (=> $x30 (= ?x22 ?x151))))))))
 ))
 (let (($x117 (forall ((input.ind-%var39X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var39X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var39X) (bvult input.ind-%var39X input.dst.llvm-%n)))))
 ))
 (let (($x155 (and $x117 $x154)))
 (let (($x156 (= $x155 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x95)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x90)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x87 $x58)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x86 $x57)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x16 $x62)))
 (let (($x18 (not $x45)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x39 $x79)))
 (let (($x47 (and (not $x60) $x18)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x52 $x63)))
 (let (($x61 (not $x80)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x11 $x32)))
 (let (($x17 (and (not $x50) $x61)))
 (let (($x102 (and (and (and (and (and (and $x17 $x47) $x71) $x85) $x59) $x92) $x94)))
 (let (($x103 (and $x102 $x96)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x75 (or false (or false (and (and true (or $x42 $x70)) (or $x26 $x73))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x75)))
 (let (($x104 (and $x83 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x157 (and $x105 $x156)))
 (let (($x171 (and $x157 $x170)))
 (let (($x185 (and $x171 $x184)))
 (let (($x9 (forall ((input.ind-%var52X (_ BitVec 32)) )(let ((?x68 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var52X)))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var52X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var52X)))
 (=> $x30 (= ?x22 ?x68))))))
 ))
 (let (($x69 (forall ((input.ind-%var51X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var51X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var51X)))
 (= $x30 $x76))))
 ))
 (let (($x23 (and $x69 $x9)))
 (let (($x186 (and $x23 $x185)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x34 $x186)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x25 $x187)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x48 $x188)))
 (let (($x191 (=> $x189 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= false true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x178 (concat ?x175 ?x173)))))
 (let (($x183 (= ?x182 input.dst.llvm-%n)))
 (let (($x184 (= $x183 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x167 (concat ?x164 (concat ?x161 ?x159)))))
 (let (($x169 (= ?x168 input.dst.llvm-%x)))
 (let (($x170 (= $x169 true)))
 (let (($x154 (forall ((input.ind-%var40X (_ BitVec 32)) )(let ((?x141 (bvadd (bvmul input.ind-%var40X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x145))))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var40X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (=> $x30 (= ?x22 ?x151))))))))
 ))
 (let (($x117 (forall ((input.ind-%var39X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var39X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var39X) (bvult input.ind-%var39X input.dst.llvm-%n)))))
 ))
 (let (($x155 (and $x117 $x154)))
 (let (($x156 (= $x155 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x95)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x90)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x87 $x58)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x86 $x57)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x16 $x62)))
 (let (($x18 (not $x45)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x39 $x79)))
 (let (($x47 (and (not $x60) $x18)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x52 $x63)))
 (let (($x61 (not $x80)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x11 $x32)))
 (let (($x17 (and (not $x50) $x61)))
 (let (($x102 (and (and (and (and (and (and $x17 $x47) $x71) $x85) $x59) $x92) $x94)))
 (let (($x103 (and $x102 $x96)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x75 (or false (or false (and (and true (or $x42 $x70)) (or $x26 $x73))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x75)))
 (let (($x104 (and $x83 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x157 (and $x105 $x156)))
 (let (($x171 (and $x157 $x170)))
 (let (($x185 (and $x171 $x184)))
 (let (($x9 (forall ((input.ind-%var52X (_ BitVec 32)) )(let ((?x68 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var52X)))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var52X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var52X)))
 (=> $x30 (= ?x22 ?x68))))))
 ))
 (let (($x69 (forall ((input.ind-%var51X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var51X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var51X)))
 (= $x30 $x76))))
 ))
 (let (($x23 (and $x69 $x9)))
 (let (($x186 (and $x23 $x185)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x34 $x186)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x25 $x187)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x48 $x188)))
 (let (($x191 (=> $x189 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x41b971c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x87c329ec)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x87c329ef)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x41b971c7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x87c329ec)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x41b971c4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x87c329ef)
                                   (k!0 #x87c329ee)
                                   (k!0 #x87c329ed)
                                   (k!0 #x87c329ec)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x87c329ef)
                                   (k!0 #x87c329ee)
                                   (k!0 #x87c329ed)
                                   (k!0 #x87c329ec)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x87c329ef)
                                   (k!0 #x87c329ee)
                                   (k!0 #x87c329ed)
                                   (k!0 #x87c329ec)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x87c329ef)
                                   (k!0 #x87c329ee)
                                   (k!0 #x87c329ed)
                                   (k!0 #x87c329ec))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00033408)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0006a414)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0003340b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0006a417)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00033408)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0006a414)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0003340b)
                                   (k!0 #x0003340a)
                                   (k!0 #x00033409)
                                   (k!0 #x00033408)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0003340b)
                                   (k!0 #x0003340a)
                                   (k!0 #x00033409)
                                   (k!0 #x00033408)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0003340b)
                                   (k!0 #x0003340a)
                                   (k!0 #x00033409)
                                   (k!0 #x00033408)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0003340b)
                                   (k!0 #x0003340a)
                                   (k!0 #x00033409)
                                   (k!0 #x00033408))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0006a417)
                        (k!0 #x0006a416)
                        (k!0 #x0006a415)
                        (k!0 #x0006a414))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x187)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x185)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x175 $x176)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x174 $x179)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x162 $x165)))
 (let (($x169 (not $x168)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x160 $x161)))
 (let (($x171 (and (not $x159) $x169)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x156 $x157)))
 (let (($x167 (not $x166)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x153 $x154)))
 (let (($x164 (and (not $x155) $x167)))
 (let (($x19 (and (and (and (and (and (and $x164 $x171) $x181) $x178) $x182) $x184) $x186)))
 (let (($x122 (and $x19 $x188)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x50 (or false (or false (and (and true (or $x28 $x64)) (or $x7 $x42))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x50)))
 (let (($x21 (and $x63 $x122)))
 (let (($x33 (= $x21 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x107 (concat ?x130 (concat ?x128 ?x132)))))
 (let (($x112 (= input.dst.llvm-%n ?x111)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x124 (concat ?x106 (concat ?x8 ?x27)))))
 (let (($x135 (= input.dst.llvm-%x ?x126)))
 (let (($x138 (and $x135 $x112)))
 (let (($x172 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x119 (and $x172 $x138)))
 (let (($x151 (forall ((input.ind-%var78X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var78X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x150))))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var78X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var78X)))
 (=> $x76 (= ?x105 ?x142))))))))
 ))
 (let (($x90 (forall ((input.ind-%var77X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var77X) (bvult input.ind-%var77X input.dst.llvm-%n)))))
 ))
 (let (($x152 (and $x90 $x151)))
 (let (($x84 (and (and (and $x63 $x152) $x122) $x119)))
 (let (($x35 (= $x84 true)))
 (let (($x24 (forall ((input.ind-%var88X (_ BitVec 32)) )(let ((?x49 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var88X)))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var88X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (=> $x76 (= ?x105 ?x49))))))
 ))
 (let (($x41 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var87X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var87X)))
 (= $x76 $x39))))
 ))
 (let (($x52 (and $x41 $x24)))
 (let (($x15 (and $x52 $x35)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x36 $x15)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x6 $x44)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x43 $x37)))
 (let (($x89 (=> $x81 $x33)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x187)))
 (let ((?x185 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x185)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x175 $x176)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x174 $x179)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x162 $x165)))
 (let (($x169 (not $x168)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x160 $x161)))
 (let (($x171 (and (not $x159) $x169)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x156 $x157)))
 (let (($x167 (not $x166)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x153 $x154)))
 (let (($x164 (and (not $x155) $x167)))
 (let (($x19 (and (and (and (and (and (and $x164 $x171) $x181) $x178) $x182) $x184) $x186)))
 (let (($x122 (and $x19 $x188)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x50 (or false (or false (and (and true (or $x28 $x64)) (or $x7 $x42))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x50)))
 (let (($x21 (and $x63 $x122)))
 (let (($x33 (= $x21 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x111 (concat ?x107 (concat ?x130 (concat ?x128 ?x132)))))
 (let (($x112 (= input.dst.llvm-%n ?x111)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x124 (concat ?x106 (concat ?x8 ?x27)))))
 (let (($x135 (= input.dst.llvm-%x ?x126)))
 (let (($x138 (and $x135 $x112)))
 (let (($x172 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x119 (and $x172 $x138)))
 (let (($x151 (forall ((input.ind-%var78X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var78X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x150))))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var78X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var78X)))
 (=> $x76 (= ?x105 ?x142))))))))
 ))
 (let (($x90 (forall ((input.ind-%var77X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var77X) (bvult input.ind-%var77X input.dst.llvm-%n)))))
 ))
 (let (($x152 (and $x90 $x151)))
 (let (($x84 (and (and (and $x63 $x152) $x122) $x119)))
 (let (($x35 (= $x84 true)))
 (let (($x24 (forall ((input.ind-%var88X (_ BitVec 32)) )(let ((?x49 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var88X)))
 (let ((?x105 (input.spec-%var-x-1.1.1 input.ind-%var88X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (=> $x76 (= ?x105 ?x49))))))
 ))
 (let (($x41 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x39 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var87X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var87X)))
 (= $x76 $x39))))
 ))
 (let (($x52 (and $x41 $x24)))
 (let (($x15 (and $x52 $x35)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x36 $x15)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x6 $x44)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x43 $x37)))
 (let (($x89 (=> $x81 $x33)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x101 (= $x56 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x16 (concat ?x99 (concat ?x95 ?x116)))))
 (let (($x45 (= input.dst.llvm-%n ?x98)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x73 (concat ?x93 (concat ?x67 ?x79)))))
 (let (($x13 (= input.dst.llvm-%x ?x59)))
 (let (($x96 (and $x13 $x45)))
 (let (($x136 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x58 (and $x136 $x96)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x35)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x119)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x128 $x129)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x133 $x134)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x8 $x27)))
 (let (($x108 (not $x5)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x120 $x106)))
 (let (($x135 (and (not $x46) $x108)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x77 $x54)))
 (let (($x172 (not $x40)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x187 $x188)))
 (let (($x124 (and (not $x122) $x172)))
 (let (($x89 (and (and (and (and (and (and $x124 $x135) $x107) $x130) $x111) $x138) $x84)))
 (let (($x82 (and $x89 $x15)))
 (let (($x186 (forall ((input.ind-%var98X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var98X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x173))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var98X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var98X)))
 (=> $x76 (= ?x165 ?x184))))))))
 ))
 (let (($x139 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var97X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var97X) (bvult input.ind-%var97X input.dst.llvm-%n)))))
 ))
 (let (($x19 (and $x139 $x186)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x87 (or false (or false (and (and true (or $x52 $x78)) (or $x55 $x23))))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x85 (and (and (and $x117 $x19) $x82) $x58)))
 (let (($x57 (= $x85 true)))
 (let (($x114 (forall ((input.ind-%var108X (_ BitVec 32)) )(let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var108X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var108X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var108X)))
 (=> $x76 (= ?x165 ?x42))))))
 ))
 (let (($x31 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var107X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var107X)))
 (= $x76 $x109))))
 ))
 (let (($x115 (and $x31 $x114)))
 (let (($x30 (and $x115 $x57)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x6 $x30)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x100 (and $x123 $x9)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x43 $x100)))
 (let (($x75 (=> $x92 $x101)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x101 (= $x56 true)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x16 (concat ?x99 (concat ?x95 ?x116)))))
 (let (($x45 (= input.dst.llvm-%n ?x98)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x59 (concat ?x73 (concat ?x93 (concat ?x67 ?x79)))))
 (let (($x13 (= input.dst.llvm-%x ?x59)))
 (let (($x96 (and $x13 $x45)))
 (let (($x136 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x58 (and $x136 $x96)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x35)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x84 (= (_ bv0 32) ?x119)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x132)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x128 $x129)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x133 $x134)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x8 $x27)))
 (let (($x108 (not $x5)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x120 $x106)))
 (let (($x135 (and (not $x46) $x108)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x77 $x54)))
 (let (($x172 (not $x40)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (and $x187 $x188)))
 (let (($x124 (and (not $x122) $x172)))
 (let (($x89 (and (and (and (and (and (and $x124 $x135) $x107) $x130) $x111) $x138) $x84)))
 (let (($x82 (and $x89 $x15)))
 (let (($x186 (forall ((input.ind-%var98X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var98X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x173))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var98X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var98X)))
 (=> $x76 (= ?x165 ?x184))))))))
 ))
 (let (($x139 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var97X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var97X) (bvult input.ind-%var97X input.dst.llvm-%n)))))
 ))
 (let (($x19 (and $x139 $x186)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x78 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x87 (or false (or false (and (and true (or $x52 $x78)) (or $x55 $x23))))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x85 (and (and (and $x117 $x19) $x82) $x58)))
 (let (($x57 (= $x85 true)))
 (let (($x114 (forall ((input.ind-%var108X (_ BitVec 32)) )(let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var108X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var108X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var108X)))
 (=> $x76 (= ?x165 ?x42))))))
 ))
 (let (($x31 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var107X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var107X)))
 (= $x76 $x109))))
 ))
 (let (($x115 (and $x31 $x114)))
 (let (($x30 (and $x115 $x57)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x6 $x30)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x100 (and $x123 $x9)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x43 $x100)))
 (let (($x75 (=> $x92 $x101)))
 (not $x75))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000e) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80420404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xaea47100)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xff7bbf00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xaea47103)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80420407)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xaea47100)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80420404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xaea47102) #x7b
    (ite (= x!0 #x80420406) #x01
    (ite (= x!0 #xaea47101) #xbf
    (ite (= x!0 #xaea47103) #xff
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010000 x!0)
         (ite (bvule #x00010001 x!0) #x00010001 #x00010000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x166 ((_ extract 15 0) input.dst.llvm-%n)))
 (let (($x32 (= (_ bv0 16) ?x166)))
 (let (($x121 (= $x32 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x143 (concat ?x145 (concat ?x161 ?x180)))))
 (let (($x18 (= input.dst.llvm-%n ?x150)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x26 (concat ?x167 (concat ?x39 ?x102)))))
 (let (($x64 (= input.dst.llvm-%x ?x155)))
 (let (($x159 (and $x64 $x18)))
 (let (($x17 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x153 (and $x17 $x159)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x30)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x85)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x116 $x86)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x95 $x98)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x79 $x140)))
 (let (($x59 (not $x25)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x93 $x72)))
 (let (($x88 (and (not $x67) $x59)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x125 $x70)))
 (let (($x69 (not $x136)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x15 $x82)))
 (let (($x47 (and (not $x66) $x69)))
 (let (($x118 (and (and (and (and (and (and $x47 $x88) $x71) $x62) $x45) $x58) $x57)))
 (let (($x177 (and $x118 $x9)))
 (let (($x89 (forall ((input.ind-%var134X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var134X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x129))))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var134X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var134X)))
 (=> $x76 (= ?x5 ?x33))))))))
 ))
 (let (($x187 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var133X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var133X) (bvult input.ind-%var133X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x187 $x89)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x151 (or false (or false (and (and true (or $x115 $x53)) (or $x83 $x24))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x151)))
 (let (($x142 (and (and (and $x181 $x35) $x177) $x153)))
 (let (($x154 (= $x142 true)))
 (let (($x168 (forall ((input.ind-%var144X (_ BitVec 32)) )(let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var144X)))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var144X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (=> $x76 (= ?x5 ?x23))))))
 ))
 (let (($x192 (forall ((input.ind-%var143X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var143X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var143X)))
 (= $x76 $x169))))
 ))
 (let (($x189 (and $x192 $x168)))
 (let (($x36 (and $x189 $x154)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x14 $x36)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x163 (and $x28 $x11)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x157 (and $x34 $x163)))
 (let (($x193 (=> $x157 $x121)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x166 ((_ extract 15 0) input.dst.llvm-%n)))
 (let (($x32 (= (_ bv0 16) ?x166)))
 (let (($x121 (= $x32 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x143 (concat ?x145 (concat ?x161 ?x180)))))
 (let (($x18 (= input.dst.llvm-%n ?x150)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x26 (concat ?x167 (concat ?x39 ?x102)))))
 (let (($x64 (= input.dst.llvm-%x ?x155)))
 (let (($x159 (and $x64 $x18)))
 (let (($x17 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x153 (and $x17 $x159)))
 (let ((?x30 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x30)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x85)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x116 $x86)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x95 $x98)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x79 $x140)))
 (let (($x59 (not $x25)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x93 $x72)))
 (let (($x88 (and (not $x67) $x59)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x125 $x70)))
 (let (($x69 (not $x136)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x15 $x82)))
 (let (($x47 (and (not $x66) $x69)))
 (let (($x118 (and (and (and (and (and (and $x47 $x88) $x71) $x62) $x45) $x58) $x57)))
 (let (($x177 (and $x118 $x9)))
 (let (($x89 (forall ((input.ind-%var134X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var134X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x129))))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var134X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var134X)))
 (=> $x76 (= ?x5 ?x33))))))))
 ))
 (let (($x187 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var133X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var133X) (bvult input.ind-%var133X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x187 $x89)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x151 (or false (or false (and (and true (or $x115 $x53)) (or $x83 $x24))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x151)))
 (let (($x142 (and (and (and $x181 $x35) $x177) $x153)))
 (let (($x154 (= $x142 true)))
 (let (($x168 (forall ((input.ind-%var144X (_ BitVec 32)) )(let ((?x23 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var144X)))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var144X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (=> $x76 (= ?x5 ?x23))))))
 ))
 (let (($x192 (forall ((input.ind-%var143X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var143X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var143X)))
 (= $x76 $x169))))
 ))
 (let (($x189 (and $x192 $x168)))
 (let (($x36 (and $x189 $x154)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x14 $x36)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x163 (and $x28 $x11)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x157 (and $x34 $x163)))
 (let (($x193 (=> $x157 $x121)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000a04)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002250)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000a07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002253)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000a04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002250)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002251) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00002253)
                        (k!0 #x00002252)
                        (k!0 #x00002251)
                        (k!0 #x00002250))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e9d0f14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3659fe18)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xb7b7b720)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xb7fd5600)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3659fe1b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e9d0f17)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3659fe18)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e9d0f14)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb7fd5601) #x00
    (ite (= x!0 #x3659fe1a) #xfd
    (ite (= x!0 #x8e9d0f14) #x20
    (ite (= x!0 #xb7fd5603) #x00
    (ite (= x!0 #x3659fe19) #x56
    (ite (= x!0 #xb7fd5602) #x00
    (ite (= x!0 #xb7fd5600) #x00
    (ite (= x!0 #x3659fe18) #x00
      #xb7)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xb7b7b720 x!0)
         (ite (bvule #xb7b7b721 x!0) #xb7b7b721 #xb7b7b720)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 ((_ extract 4 0) input.dst.llvm-%n)))
 (let (($x90 (= (_ bv0 5) ?x40)))
 (let (($x172 (= $x90 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x186 (concat ?x175 (concat ?x107 ?x78)))))
 (let (($x183 (= input.dst.llvm-%n ?x22)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x48 (concat ?x81 (concat ?x170 ?x94)))))
 (let (($x38 (= input.dst.llvm-%x ?x103)))
 (let (($x182 (and $x38 $x183)))
 (let (($x133 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x176 (and $x133 $x182)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x36)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x142)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x180 $x148)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x161 $x150)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x102 $x178)))
 (let (($x155 (not $x10)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x167 $x74)))
 (let (($x152 (and (not $x39) $x155)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x191 $x65)))
 (let (($x60 (not $x17)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x9 $x177)))
 (let (($x146 (and (not $x149) $x60)))
 (let (($x121 (and (and (and (and (and (and $x146 $x152) $x104) $x144) $x18) $x153) $x154)))
 (let (($x193 (and $x121 $x11)))
 (let (($x118 (forall ((input.ind-%var170X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var170X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x86))))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var170X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var170X)))
 (=> $x76 (= ?x25 ?x75))))))))
 ))
 (let (($x15 (forall ((input.ind-%var169X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var169X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var169X) (bvult input.ind-%var169X input.dst.llvm-%n)))))
 ))
 (let (($x30 (and $x15 $x118)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x108 (or false (or false (and (and true (or $x189 $x49)) (or $x50 $x114))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x31 (and (and (and $x187 $x30) $x193) $x176)))
 (let (($x162 (= $x31 true)))
 (let (($x137 (forall ((input.ind-%var180X (_ BitVec 32)) )(let ((?x24 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var180X)))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var180X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var180X)))
 (=> $x76 (= ?x25 ?x24))))))
 ))
 (let (($x112 (forall ((input.ind-%var179X (_ BitVec 32)) )(let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var179X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (= $x76 $x106))))
 ))
 (let (($x37 (and $x112 $x137)))
 (let (($x12 (and $x37 $x162)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x122 (and $x28 $x12)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x6 (and $x43 $x122)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x34 $x6)))
 (let (($x113 (=> $x63 $x172)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 ((_ extract 4 0) input.dst.llvm-%n)))
 (let (($x90 (= (_ bv0 5) ?x40)))
 (let (($x172 (= $x90 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x186 (concat ?x175 (concat ?x107 ?x78)))))
 (let (($x183 (= input.dst.llvm-%n ?x22)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x170 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x103 (concat ?x48 (concat ?x81 (concat ?x170 ?x94)))))
 (let (($x38 (= input.dst.llvm-%x ?x103)))
 (let (($x182 (and $x38 $x183)))
 (let (($x133 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x176 (and $x133 $x182)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x36)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x142)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x141)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x180 $x148)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x161 $x150)))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x102 $x178)))
 (let (($x155 (not $x10)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x167 $x74)))
 (let (($x152 (and (not $x39) $x155)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x191 $x65)))
 (let (($x60 (not $x17)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x9 $x177)))
 (let (($x146 (and (not $x149) $x60)))
 (let (($x121 (and (and (and (and (and (and $x146 $x152) $x104) $x144) $x18) $x153) $x154)))
 (let (($x193 (and $x121 $x11)))
 (let (($x118 (forall ((input.ind-%var170X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var170X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x86))))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var170X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var170X)))
 (=> $x76 (= ?x25 ?x75))))))))
 ))
 (let (($x15 (forall ((input.ind-%var169X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var169X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var169X) (bvult input.ind-%var169X input.dst.llvm-%n)))))
 ))
 (let (($x30 (and $x15 $x118)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x108 (or false (or false (and (and true (or $x189 $x49)) (or $x50 $x114))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x31 (and (and (and $x187 $x30) $x193) $x176)))
 (let (($x162 (= $x31 true)))
 (let (($x137 (forall ((input.ind-%var180X (_ BitVec 32)) )(let ((?x24 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var180X)))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var180X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var180X)))
 (=> $x76 (= ?x25 ?x24))))))
 ))
 (let (($x112 (forall ((input.ind-%var179X (_ BitVec 32)) )(let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var179X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (= $x76 $x106))))
 ))
 (let (($x37 (and $x112 $x137)))
 (let (($x12 (and $x37 $x162)))
 (let (($x28 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x122 (and $x28 $x12)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x6 (and $x43 $x122)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x34 $x6)))
 (let (($x113 (=> $x63 $x172)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00033900)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2ffe6207)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00033903)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00033900)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00033900) #x08
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00033903)
                        (k!0 #x00033902)
                        (k!0 #x00033901)
                        (k!0 #x00033900))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xefc10948)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08000808)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xddfbda00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x639ce16f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xefc1094b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xefc10948)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xddfbda01) #x00
    (ite (= x!0 #x639ce16e) #xfb
    (ite (= x!0 #xddfbda03) #x00
    (ite (= x!0 #xefc1094a) #x00
    (ite (= x!0 #x639ce16d) #xda
    (ite (= x!0 #xddfbda02) #x00
    (ite (= x!0 #xddfbda00) #x00
    (ite (= x!0 #x639ce16f) #xdd
    (ite (= x!0 #x639ce16c) #x00
      #x08))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08000808 x!0)
         (ite (bvule #x08000809 x!0) #x08000809 #x08000808)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x139 (= (_ bv0 3) ?x136)))
 (let (($x69 (= $x139 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x89 (concat ?x132 (concat ?x71 ?x53)))))
 (let (($x138 (= input.dst.llvm-%n ?x41)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x29 (concat ?x56 (concat ?x8 ?x110)))))
 (let (($x61 (= input.dst.llvm-%x ?x147)))
 (let (($x21 (and $x61 $x138)))
 (let (($x95 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x134 (and $x95 $x21)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x12)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x31)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (and $x78 $x173)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x107 $x22)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x94 $x7)))
 (let (($x103 (not $x174)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x81 $x158)))
 (let (($x185 (and (not $x170) $x103)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x194 $x130)))
 (let (($x124 (not $x133)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x11 $x193)))
 (let (($x109 (and (not $x188) $x124)))
 (let (($x172 (and (and (and (and (and (and $x109 $x185) $x46) $x164) $x183) $x176) $x162)))
 (let (($x113 (and $x172 $x122)))
 (let (($x121 (forall ((input.ind-%var206X (_ BitVec 32)) )(let ((?x102 (bvadd (bvmul input.ind-%var206X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x148))))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var206X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (=> $x76 (= ?x10 ?x32))))))))
 ))
 (let (($x9 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var205X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var205X) (bvult input.ind-%var205X input.dst.llvm-%n)))))
 ))
 (let (($x36 (and $x9 $x121)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x59 (or false (or false (and (and true (or $x37 $x42)) (or $x87 $x168))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x192 (and (and (and $x15 $x36) $x113) $x134)))
 (let (($x27 (= $x192 true)))
 (let (($x16 (forall ((input.ind-%var216X (_ BitVec 32)) )(let ((?x114 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var216X)))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var216X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var216X)))
 (=> $x76 (= ?x10 ?x114))))))
 ))
 (let (($x96 (forall ((input.ind-%var215X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var215X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var215X)))
 (= $x76 $x72))))
 ))
 (let (($x92 (and $x96 $x16)))
 (let (($x119 (and $x92 $x27)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x66 (and $x43 $x119)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x14 (and $x123 $x66)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x34 $x14)))
 (let (($x171 (=> $x117 $x69)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x136 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x139 (= (_ bv0 3) ?x136)))
 (let (($x69 (= $x139 true)))
 (let ((?x53 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x89 (concat ?x132 (concat ?x71 ?x53)))))
 (let (($x138 (= input.dst.llvm-%n ?x41)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x29 (concat ?x56 (concat ?x8 ?x110)))))
 (let (($x61 (= input.dst.llvm-%x ?x147)))
 (let (($x21 (and $x61 $x138)))
 (let (($x95 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x134 (and $x95 $x21)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x12)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x31)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x182)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (and $x78 $x173)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x107 $x22)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x94 $x7)))
 (let (($x103 (not $x174)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x81 $x158)))
 (let (($x185 (and (not $x170) $x103)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x194 $x130)))
 (let (($x124 (not $x133)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x11 $x193)))
 (let (($x109 (and (not $x188) $x124)))
 (let (($x172 (and (and (and (and (and (and $x109 $x185) $x46) $x164) $x183) $x176) $x162)))
 (let (($x113 (and $x172 $x122)))
 (let (($x121 (forall ((input.ind-%var206X (_ BitVec 32)) )(let ((?x102 (bvadd (bvmul input.ind-%var206X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x148))))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var206X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (=> $x76 (= ?x10 ?x32))))))))
 ))
 (let (($x9 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var205X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var205X) (bvult input.ind-%var205X input.dst.llvm-%n)))))
 ))
 (let (($x36 (and $x9 $x121)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x59 (or false (or false (and (and true (or $x37 $x42)) (or $x87 $x168))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x192 (and (and (and $x15 $x36) $x113) $x134)))
 (let (($x27 (= $x192 true)))
 (let (($x16 (forall ((input.ind-%var216X (_ BitVec 32)) )(let ((?x114 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var216X)))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var216X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var216X)))
 (=> $x76 (= ?x10 ?x114))))))
 ))
 (let (($x96 (forall ((input.ind-%var215X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var215X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var215X)))
 (= $x76 $x72))))
 ))
 (let (($x92 (and $x96 $x16)))
 (let (($x119 (and $x92 $x27)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x66 (and $x43 $x119)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x14 (and $x123 $x66)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x34 $x14)))
 (let (($x171 (=> $x117 $x69)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00033900)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2ffe6207)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00033903)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00033900)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00033900) #x02
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00033903)
                        (k!0 #x00033902)
                        (k!0 #x00033901)
                        (k!0 #x00033900))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xefc10948)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04000404)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xddfbda00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x639ce16f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xefc1094b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xefc10948)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xddfbda01) #x00
    (ite (= x!0 #x639ce16e) #xfb
    (ite (= x!0 #xddfbda03) #x00
    (ite (= x!0 #xefc1094a) #x00
    (ite (= x!0 #x639ce16d) #xda
    (ite (= x!0 #xddfbda02) #x00
    (ite (= x!0 #xddfbda00) #x00
    (ite (= x!0 #x639ce16f) #xdd
    (ite (= x!0 #x639ce16c) #x00
      #x04))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x04000404 x!0)
         (ite (bvule #x04000405 x!0) #x04000405 #x04000404)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x54 (= (_ bv0 1) ?x17)))
 (let (($x60 (= $x54 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x118 (concat ?x97 (concat ?x104 ?x49)))))
 (let (($x58 (= input.dst.llvm-%n ?x126)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x52 (concat ?x80 (concat ?x79 ?x73)))))
 (let (($x91 (= input.dst.llvm-%x ?x184)))
 (let (($x101 (and $x91 $x58)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x98 (and $x161 $x101)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x119)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x192)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x53 $x129)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x71 $x41)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x110 $x55)))
 (let (($x147 (not $x128)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x56 $x20)))
 (let (($x84 (and (not $x8) $x147)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x190 $x62)))
 (let (($x47 (not $x95)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x122 $x113)))
 (let (($x169 (and (not $x82) $x47)))
 (let (($x69 (and (and (and (and (and (and $x169 $x84) $x67) $x135) $x138) $x134) $x27)))
 (let (($x171 (and $x69 $x66)))
 (let (($x172 (forall ((input.ind-%var242X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var242X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x173))))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var242X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var242X)))
 (=> $x76 (= ?x174 ?x90))))))))
 ))
 (let (($x11 (forall ((input.ind-%var241X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var241X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var241X) (bvult input.ind-%var241X input.dst.llvm-%n)))))
 ))
 (let (($x12 (and $x11 $x172)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x155 (or false (or false (and (and true (or $x92 $x23)) (or $x151 $x137))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x112 (and (and (and $x9 $x12) $x171) $x98)))
 (let (($x140 (= $x112 true)))
 (let (($x143 (forall ((input.ind-%var252X (_ BitVec 32)) )(let ((?x168 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var252X)))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var252X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var252X)))
 (=> $x76 (= ?x174 ?x168))))))
 ))
 (let (($x159 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var251X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var251X)))
 (= $x76 $x74))))
 ))
 (let (($x157 (and $x159 $x143)))
 (let (($x85 (and $x157 $x140)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x123 $x85)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x160 $x149)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x34 $x28)))
 (let (($x44 (=> $x181 $x60)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x54 (= (_ bv0 1) ?x17)))
 (let (($x60 (= $x54 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x118 (concat ?x97 (concat ?x104 ?x49)))))
 (let (($x58 (= input.dst.llvm-%n ?x126)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x52 (concat ?x80 (concat ?x79 ?x73)))))
 (let (($x91 (= input.dst.llvm-%x ?x184)))
 (let (($x101 (and $x91 $x58)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x98 (and $x161 $x101)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x119)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x192)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x53 $x129)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x71 $x41)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x110 $x55)))
 (let (($x147 (not $x128)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x56 $x20)))
 (let (($x84 (and (not $x8) $x147)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (and $x190 $x62)))
 (let (($x47 (not $x95)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x122 $x113)))
 (let (($x169 (and (not $x82) $x47)))
 (let (($x69 (and (and (and (and (and (and $x169 $x84) $x67) $x135) $x138) $x134) $x27)))
 (let (($x171 (and $x69 $x66)))
 (let (($x172 (forall ((input.ind-%var242X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var242X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x173))))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var242X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var242X)))
 (=> $x76 (= ?x174 ?x90))))))))
 ))
 (let (($x11 (forall ((input.ind-%var241X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var241X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var241X) (bvult input.ind-%var241X input.dst.llvm-%n)))))
 ))
 (let (($x12 (and $x11 $x172)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x155 (or false (or false (and (and true (or $x92 $x23)) (or $x151 $x137))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x112 (and (and (and $x9 $x12) $x171) $x98)))
 (let (($x140 (= $x112 true)))
 (let (($x143 (forall ((input.ind-%var252X (_ BitVec 32)) )(let ((?x168 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var252X)))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var252X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var252X)))
 (=> $x76 (= ?x174 ?x168))))))
 ))
 (let (($x159 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var251X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var251X)))
 (= $x76 $x74))))
 ))
 (let (($x157 (and $x159 $x143)))
 (let (($x85 (and $x157 $x140)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x149 (and $x123 $x85)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x160 $x149)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x181 (and $x34 $x28)))
 (let (($x44 (=> $x181 $x60)))
 (not $x44)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00015200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00035104)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00015203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00035107)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00015200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00035104)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00035104) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00035107)
                        (k!0 #x00035106)
                        (k!0 #x00035105)
                        (k!0 #x00035104))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb5a8f714)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f141e34)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x68ffb300)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f141e37)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb5a8f717)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f141e34)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb5a8f714)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb5a8f715) #x00
    (ite (= x!0 #x6f141e36) #xff
    (ite (= x!0 #xb5a8f714) #x01
    (ite (= x!0 #x68ffb303) #x00
    (ite (= x!0 #xb5a8f717) #x00
    (ite (= x!0 #x68ffb301) #x00
    (ite (= x!0 #xb5a8f716) #x00
    (ite (= x!0 #x68ffb302) #x00
    (ite (= x!0 #x68ffb300) #x00
    (ite (= x!0 #x6f141e37) #x68
    (ite (= x!0 #x6f141e34) #x00
      #xb3))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x133 (= (_ bv0 8) ?x194)))
 (let (($x70 (= $x133 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x121 (concat ?x141 (concat ?x46 ?x42)))))
 (let (($x153 (= input.dst.llvm-%n ?x13)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x115 (concat ?x77 (concat ?x102 ?x26)))))
 (let (($x156 (= input.dst.llvm-%x ?x33)))
 (let (($x166 (and $x156 $x153)))
 (let (($x107 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x150 (and $x107 $x166)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x140)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x98)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (and $x104 $x111)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x88 $x86)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x79 $x73)))
 (let (($x116 (not $x83)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x106 $x80)))
 (let (($x91 (and (not $x68) $x116)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x177 $x127)))
 (let (($x161 (not $x144)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x119 $x66)))
 (let (($x52 (and (not $x171) $x161)))
 (let (($x54 (and (and (and (and (and (and $x52 $x91) $x118) $x97) $x126) $x101) $x112)))
 (let (($x60 (and $x54 $x85)))
 (let (($x27 (forall ((input.ind-%var278X (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul input.ind-%var278X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x179))))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var278X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (=> $x76 (= ?x55 ?x134))))))))
 ))
 (let (($x64 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var277X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var277X) (bvult input.ind-%var277X input.dst.llvm-%n)))))
 ))
 (let (($x69 (and $x64 $x27)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x36 (or false (or false (and (and true (or $x157 $x24)) (or $x108 $x16))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x96 (and (and (and $x63 $x69) $x60) $x150)))
 (let (($x178 (= $x96 true)))
 (let (($x103 (forall ((input.ind-%var288X (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var288X)))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var288X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var288X)))
 (=> $x76 (= ?x55 ?x137))))))
 ))
 (let (($x32 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var287X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var287X)))
 (= $x76 $x185))))
 ))
 (let (($x186 (and $x32 $x103)))
 (let (($x142 (and $x186 $x178)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x160 $x142)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x43 (and $x164 $x188)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x34 $x43)))
 (let (($x124 (=> $x187 $x70)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x133 (= (_ bv0 8) ?x194)))
 (let (($x70 (= $x133 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x121 (concat ?x141 (concat ?x46 ?x42)))))
 (let (($x153 (= input.dst.llvm-%n ?x13)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x115 (concat ?x77 (concat ?x102 ?x26)))))
 (let (($x156 (= input.dst.llvm-%x ?x33)))
 (let (($x166 (and $x156 $x153)))
 (let (($x107 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x150 (and $x107 $x166)))
 (let ((?x140 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x140)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x98)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (and $x104 $x111)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x88 $x86)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x79 $x73)))
 (let (($x116 (not $x83)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (and $x106 $x80)))
 (let (($x91 (and (not $x68) $x116)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x177 $x127)))
 (let (($x161 (not $x144)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x119 $x66)))
 (let (($x52 (and (not $x171) $x161)))
 (let (($x54 (and (and (and (and (and (and $x52 $x91) $x118) $x97) $x126) $x101) $x112)))
 (let (($x60 (and $x54 $x85)))
 (let (($x27 (forall ((input.ind-%var278X (_ BitVec 32)) )(let ((?x61 (bvadd (bvmul input.ind-%var278X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem ?x61))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x61 (_ bv2 32))) ?x179))))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var278X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (=> $x76 (= ?x55 ?x134))))))))
 ))
 (let (($x64 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var277X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var277X) (bvult input.ind-%var277X input.dst.llvm-%n)))))
 ))
 (let (($x69 (and $x64 $x27)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x36 (or false (or false (and (and true (or $x157 $x24)) (or $x108 $x16))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x36)))
 (let (($x96 (and (and (and $x63 $x69) $x60) $x150)))
 (let (($x178 (= $x96 true)))
 (let (($x103 (forall ((input.ind-%var288X (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var288X)))
 (let ((?x55 (input.spec-%var-x-1.1.1 input.ind-%var288X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var288X)))
 (=> $x76 (= ?x55 ?x137))))))
 ))
 (let (($x32 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var287X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var287X)))
 (= $x76 $x185))))
 ))
 (let (($x186 (and $x32 $x103)))
 (let (($x142 (and $x186 $x178)))
 (let (($x160 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x160 $x142)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x43 (and $x164 $x188)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x187 (and $x34 $x43)))
 (let (($x124 (=> $x187 $x70)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x47f8800f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00005efb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x80)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00005efb)
                        (k!0 #x00005efa)
                        (k!0 #x00005ef9)
                        (k!0 #x00005ef8))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xcb17063c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf2f6e9d8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00016f6f)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xe5ed6f04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf2f6e9db)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xcb17063f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf2f6e9d8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xcb17063c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe5ed6f05) #x00
    (ite (= x!0 #xf2f6e9da) #xed
    (ite (= x!0 #xe5ed6f07) #x00
    (ite (= x!0 #xcb17063f) #x00
    (ite (= x!0 #xcb17063e) #x01
    (ite (= x!0 #xe5ed6f06) #x00
    (ite (= x!0 #xe5ed6f04) #x00
    (ite (= x!0 #xf2f6e9db) #xe5
    (ite (= x!0 #xf2f6e9d8) #x04
      #x6f))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00016f6f x!0)
         (ite (bvule #x00016f70 x!0) #x00016f70 #x00016f6f)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x95 (= (_ bv0 2) ?x65)))
 (let (($x163 (= $x95 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x12 (concat ?x7 (concat ?x176 ?x81)))))
 (let (($x173 (= input.dst.llvm-%n ?x182)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x75 (concat ?x183 (concat ?x87 ?x165)))))
 (let (($x82 (= input.dst.llvm-%x ?x120)))
 (let (($x18 (and $x82 $x173)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x8 (and $x5 $x18)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x142)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x96)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x42 $x148)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x46 $x13)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x26 $x50)))
 (let (($x33 (not $x180)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x77 $x105)))
 (let (($x154 (and (not $x102) $x33)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x44 $x99)))
 (let (($x109 (not $x107)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x85 $x60)))
 (let (($x72 (and (not $x193) $x109)))
 (let (($x70 (and (and (and (and (and (and $x72 $x154) $x170) $x152) $x153) $x150) $x178)))
 (let (($x124 (and $x70 $x188)))
 (let (($x54 (forall ((input.ind-%var314X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var314X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x111))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var314X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var314X)))
 (=> $x76 (= ?x83 ?x17))))))))
 ))
 (let (($x119 (forall ((input.ind-%var313X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var313X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var313X) (bvult input.ind-%var313X input.dst.llvm-%n)))))
 ))
 (let (($x140 (and $x119 $x54)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x172 (or false (or false (and (and true (or $x186 $x114)) (or $x59 $x143))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x131 (and (and (and $x67 $x140) $x124) $x8)))
 (let (($x90 (= $x131 true)))
 (let (($x128 (forall ((input.ind-%var324X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var324X)))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var324X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var324X)))
 (=> $x76 (= ?x83 ?x16))))))
 ))
 (let (($x136 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var323X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var323X)))
 (= $x76 $x147))))
 ))
 (let (($x14 (and $x136 $x128)))
 (let (($x113 (and $x14 $x90)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x164 $x113)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x15 (and $x35 $x123)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x34 $x15)))
 (let (($x175 (=> $x29 $x163)))
 (not $x175)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x95 (= (_ bv0 2) ?x65)))
 (let (($x163 (= $x95 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x7 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x12 (concat ?x7 (concat ?x176 ?x81)))))
 (let (($x173 (= input.dst.llvm-%n ?x182)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x120 (concat ?x75 (concat ?x183 (concat ?x87 ?x165)))))
 (let (($x82 (= input.dst.llvm-%x ?x120)))
 (let (($x18 (and $x82 $x173)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x8 (and $x5 $x18)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x142)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x96)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x148 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x42 $x148)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x46 $x13)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x26 $x50)))
 (let (($x33 (not $x180)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x77 $x105)))
 (let (($x154 (and (not $x102) $x33)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x44 $x99)))
 (let (($x109 (not $x107)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x85 $x60)))
 (let (($x72 (and (not $x193) $x109)))
 (let (($x70 (and (and (and (and (and (and $x72 $x154) $x170) $x152) $x153) $x150) $x178)))
 (let (($x124 (and $x70 $x188)))
 (let (($x54 (forall ((input.ind-%var314X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var314X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x111))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var314X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var314X)))
 (=> $x76 (= ?x83 ?x17))))))))
 ))
 (let (($x119 (forall ((input.ind-%var313X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var313X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var313X) (bvult input.ind-%var313X input.dst.llvm-%n)))))
 ))
 (let (($x140 (and $x119 $x54)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x103 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x103)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x103)))
 (let (($x172 (or false (or false (and (and true (or $x186 $x114)) (or $x59 $x143))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x131 (and (and (and $x67 $x140) $x124) $x8)))
 (let (($x90 (= $x131 true)))
 (let (($x128 (forall ((input.ind-%var324X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var324X)))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var324X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var324X)))
 (=> $x76 (= ?x83 ?x16))))))
 ))
 (let (($x136 (forall ((input.ind-%var323X (_ BitVec 32)) )(let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var323X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var323X)))
 (= $x76 $x147))))
 ))
 (let (($x14 (and $x136 $x128)))
 (let (($x113 (and $x14 $x90)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x123 (and $x164 $x113)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x15 (and $x35 $x123)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x29 (and $x34 $x15)))
 (let (($x175 (=> $x29 $x163)))
 (not $x175)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x11 (= $x144 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x27 (concat ?x53 (concat ?x118 ?x24)))))
 (let (($x21 (= input.dst.llvm-%n ?x38)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x19 (concat ?x181 (concat ?x61 ?x23)))))
 (let (($x93 (= input.dst.llvm-%x ?x94)))
 (let (($x138 (and $x93 $x21)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x129 (and $x88 $x138)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x90)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x8)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x176 $x20)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x89 $x31)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x87 $x165)))
 (let (($x47 (not $x74)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x135 $x183)))
 (let (($x82 (and (not $x158) $x47)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x159 $x100)))
 (let (($x5 (not $x125)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x142 $x188)))
 (let (($x75 (and (not $x124) $x5)))
 (let (($x95 (and (and (and (and (and (and $x75 $x82) $x12) $x7) $x182) $x18) $x131)))
 (let (($x163 (and $x95 $x113)))
 (let (($x178 (forall ((input.ind-%var334X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var334X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x45))))
 (let ((?x50 (input.spec-%var-x-1.1.1 input.ind-%var334X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var334X)))
 (=> $x76 (= ?x50 ?x150))))))))
 ))
 (let (($x122 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var333X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var333X) (bvult input.ind-%var333X input.dst.llvm-%n)))))
 ))
 (let (($x70 (and $x122 $x178)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x69 (or false (or false (and (and true (or $x14 $x168)) (or $x155 $x103))))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x69)))
 (let (($x32 (and (and (and $x28 $x70) $x163) $x129)))
 (let (($x110 (= $x32 true)))
 (let (($x116 (forall ((input.ind-%var344X (_ BitVec 32)) )(let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var344X)))
 (let ((?x50 (input.spec-%var-x-1.1.1 input.ind-%var344X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var344X)))
 (=> $x76 (= ?x50 ?x143))))))
 ))
 (let (($x134 (forall ((input.ind-%var343X (_ BitVec 32)) )(let (($x91 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var343X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var343X)))
 (= $x76 $x91))))
 ))
 (let (($x57 (and $x134 $x116)))
 (let (($x139 (and $x57 $x110)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x35 $x139)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x160 (and $x157 $x171)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x34 $x160)))
 (let (($x161 (=> $x9 $x11)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x144 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x11 (= $x144 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x27 (concat ?x53 (concat ?x118 ?x24)))))
 (let (($x21 (= input.dst.llvm-%n ?x38)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x19 (concat ?x181 (concat ?x61 ?x23)))))
 (let (($x93 (= input.dst.llvm-%x ?x94)))
 (let (($x138 (and $x93 $x21)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x129 (and $x88 $x138)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x90)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x8)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x173)))
 (let ((?x81 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x81)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x176 $x20)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x89 $x31)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x87 $x165)))
 (let (($x47 (not $x74)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x135 $x183)))
 (let (($x82 (and (not $x158) $x47)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x159 $x100)))
 (let (($x5 (not $x125)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x142 $x188)))
 (let (($x75 (and (not $x124) $x5)))
 (let (($x95 (and (and (and (and (and (and $x75 $x82) $x12) $x7) $x182) $x18) $x131)))
 (let (($x163 (and $x95 $x113)))
 (let (($x178 (forall ((input.ind-%var334X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var334X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x45))))
 (let ((?x50 (input.spec-%var-x-1.1.1 input.ind-%var334X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var334X)))
 (=> $x76 (= ?x50 ?x150))))))))
 ))
 (let (($x122 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var333X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var333X) (bvult input.ind-%var333X input.dst.llvm-%n)))))
 ))
 (let (($x70 (and $x122 $x178)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x168 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x69 (or false (or false (and (and true (or $x14 $x168)) (or $x155 $x103))))))
 (let (($x28 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x69)))
 (let (($x32 (and (and (and $x28 $x70) $x163) $x129)))
 (let (($x110 (= $x32 true)))
 (let (($x116 (forall ((input.ind-%var344X (_ BitVec 32)) )(let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var344X)))
 (let ((?x50 (input.spec-%var-x-1.1.1 input.ind-%var344X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var344X)))
 (=> $x76 (= ?x50 ?x143))))))
 ))
 (let (($x134 (forall ((input.ind-%var343X (_ BitVec 32)) )(let (($x91 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var343X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var343X)))
 (= $x76 $x91))))
 ))
 (let (($x57 (and $x134 $x116)))
 (let (($x139 (and $x57 $x110)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x35 $x139)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x160 (and $x157 $x171)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x34 $x160)))
 (let (($x161 (=> $x9 $x11)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000b)
                        (k!0 #x0000000a)
                        (k!0 #x00000009)
                        (k!0 #x00000008))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x34990b00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34810b0c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xff9fee00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34810b0f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x34990b03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34810b0c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x34990b00)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x34990b01) #xff
    (ite (= x!0 #x34990b00) #xff
    (ite (= x!0 #xff9fee03) #x00
    (ite (= x!0 #x34990b03) #xff
    (ite (= x!0 #xff9fee01) #x00
    (ite (= x!0 #x34990b02) #xff
    (ite (= x!0 #x34810b0d) #xee
    (ite (= x!0 #xff9fee02) #x00
    (ite (= x!0 #xff9fee00) #x00
    (ite (= x!0 #x34810b0f) #xff
    (ite (= x!0 #x34810b0c) #x00
      #x9f))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x64 (= $x99 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x140 (concat ?x73 (concat ?x101 ?x106)))))
 (let (($x111 (= input.dst.llvm-%n ?x58)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x40 (concat ?x126 (concat ?x108 ?x25)))))
 (let (($x193 (= input.dst.llvm-%x ?x167)))
 (let (($x41 (and $x193 $x111)))
 (let (($x10 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x102 (and $x10 $x41)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x110)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x129)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x118 $x22)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x169 $x179)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x61 $x23)))
 (let (($x71 (not $x151)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x185 $x181)))
 (let (($x93 (and (not $x48) $x71)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x66 $x175)))
 (let (($x88 (not $x145)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x90 $x113)))
 (let (($x19 (and (not $x163) $x88)))
 (let (($x11 (and (and (and (and (and (and $x19 $x93) $x27) $x53) $x38) $x138) $x32)))
 (let (($x161 (and $x11 $x139)))
 (let (($x131 (forall ((input.ind-%var370X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var370X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x81))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var370X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var370X)))
 (=> $x76 (= ?x165 ?x18))))))))
 ))
 (let (($x184 (forall ((input.ind-%var369X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var369X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var369X) (bvult input.ind-%var369X input.dst.llvm-%n)))))
 ))
 (let (($x95 (and $x184 $x131)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x54 (or false (or false (and (and true (or $x57 $x137)) (or $x36 $x128))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x49 (and (and (and $x170 $x95) $x161) $x102)))
 (let (($x17 (= $x49 true)))
 (let (($x180 (forall ((input.ind-%var380X (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var380X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var380X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var380X)))
 (=> $x76 (= ?x165 ?x103))))))
 ))
 (let (($x191 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x33 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var379X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var379X)))
 (= $x76 $x33))))
 ))
 (let (($x43 (and $x191 $x180)))
 (let (($x60 (and $x43 $x17)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x157 $x60)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x63 (and $x186 $x164)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x115 (and $x34 $x63)))
 (let (($x107 (=> $x115 $x64)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x64 (= $x99 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x140 (concat ?x73 (concat ?x101 ?x106)))))
 (let (($x111 (= input.dst.llvm-%n ?x58)))
 (let ((?x25 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x167 (concat ?x40 (concat ?x126 (concat ?x108 ?x25)))))
 (let (($x193 (= input.dst.llvm-%x ?x167)))
 (let (($x41 (and $x193 $x111)))
 (let (($x10 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x102 (and $x10 $x41)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x110)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x129)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x24 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (and $x118 $x22)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x169 $x179)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x61 $x23)))
 (let (($x71 (not $x151)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x185 $x181)))
 (let (($x93 (and (not $x48) $x71)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x66 $x175)))
 (let (($x88 (not $x145)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x90 $x113)))
 (let (($x19 (and (not $x163) $x88)))
 (let (($x11 (and (and (and (and (and (and $x19 $x93) $x27) $x53) $x38) $x138) $x32)))
 (let (($x161 (and $x11 $x139)))
 (let (($x131 (forall ((input.ind-%var370X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var370X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x81))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var370X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var370X)))
 (=> $x76 (= ?x165 ?x18))))))))
 ))
 (let (($x184 (forall ((input.ind-%var369X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var369X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var369X) (bvult input.ind-%var369X input.dst.llvm-%n)))))
 ))
 (let (($x95 (and $x184 $x131)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x54 (or false (or false (and (and true (or $x57 $x137)) (or $x36 $x128))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x49 (and (and (and $x170 $x95) $x161) $x102)))
 (let (($x17 (= $x49 true)))
 (let (($x180 (forall ((input.ind-%var380X (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var380X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var380X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var380X)))
 (=> $x76 (= ?x165 ?x103))))))
 ))
 (let (($x191 (forall ((input.ind-%var379X (_ BitVec 32)) )(let (($x33 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var379X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var379X)))
 (= $x76 $x33))))
 ))
 (let (($x43 (and $x191 $x180)))
 (let (($x60 (and $x43 $x17)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x157 $x60)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x63 (and $x186 $x164)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x115 (and $x34 $x63)))
 (let (($x107 (=> $x115 $x64)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (forall ((input.ind-%var410X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var410X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x24))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var410X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var410X)))
 (=> $x76 (= ?x23 ?x138))))))))
 ))
 (let (($x195 (forall ((input.ind-%var409X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var409X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var409X) (bvult input.ind-%var409X input.dst.llvm-%n)))))
 ))
 (let (($x214 (and $x195 $x213)))
 (let (($x215 (= $x214 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x194 (concat ?x133 (concat ?x183 ?x162)))))
 (let (($x86 (= input.dst.llvm-%n ?x45)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x130 (concat ?x5 (concat ?x91 ?x77)))))
 (let (($x168 (= input.dst.llvm-%x ?x124)))
 (let (($x158 (and $x168 $x86)))
 (let (($x114 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and $x114 $x158)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x17)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x102)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x101 $x105)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x121 $x98)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x108 $x25)))
 (let (($x109 (not $x147)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x152 $x126)))
 (let (($x193 (and (not $x80) $x109)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x136 $x6)))
 (let (($x10 (not $x132)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x110 $x139)))
 (let (($x40 (and (not $x161) $x10)))
 (let (($x107 (and (and (and (and (and (and $x40 $x193) $x140) $x73) $x58) $x41) $x49)))
 (let (($x84 (and $x107 $x60)))
 (let (($x32 (forall ((input.ind-%var390X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var390X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x24))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var390X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var390X)))
 (=> $x76 (= ?x23 ?x138))))))))
 ))
 (let (($x85 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var389X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var389X) (bvult input.ind-%var389X input.dst.llvm-%n)))))
 ))
 (let (($x11 (and $x85 $x32)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x178 (or false (or false (and (and true (or $x43 $x16)) (or $x172 $x116))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x150 (and (and (and $x12 $x11) $x84) $x142)))
 (let (($x188 (= $x150 true)))
 (let (($x74 (forall ((input.ind-%var400X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var400X)))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var400X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var400X)))
 (=> $x76 (= ?x23 ?x128))))))
 ))
 (let (($x153 (forall ((input.ind-%var399X (_ BitVec 32)) )(let (($x47 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var399X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var399X)))
 (= $x76 $x47))))
 ))
 (let (($x123 (and $x153 $x74)))
 (let (($x35 (and $x123 $x188)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x186 $x35)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x78 $x67)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x34 $x189)))
 (let (($x216 (=> $x100 $x215)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (forall ((input.ind-%var410X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var410X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x24))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var410X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var410X)))
 (=> $x76 (= ?x23 ?x138))))))))
 ))
 (let (($x195 (forall ((input.ind-%var409X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var409X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var409X) (bvult input.ind-%var409X input.dst.llvm-%n)))))
 ))
 (let (($x214 (and $x195 $x213)))
 (let (($x215 (= $x214 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x194 (concat ?x133 (concat ?x183 ?x162)))))
 (let (($x86 (= input.dst.llvm-%n ?x45)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x130 (concat ?x5 (concat ?x91 ?x77)))))
 (let (($x168 (= input.dst.llvm-%x ?x124)))
 (let (($x158 (and $x168 $x86)))
 (let (($x114 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and $x114 $x158)))
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x17)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x102)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (and $x101 $x105)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x121 $x98)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x108 $x25)))
 (let (($x109 (not $x147)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x152 $x126)))
 (let (($x193 (and (not $x80) $x109)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x136 $x6)))
 (let (($x10 (not $x132)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x110 $x139)))
 (let (($x40 (and (not $x161) $x10)))
 (let (($x107 (and (and (and (and (and (and $x40 $x193) $x140) $x73) $x58) $x41) $x49)))
 (let (($x84 (and $x107 $x60)))
 (let (($x32 (forall ((input.ind-%var390X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var390X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x24))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var390X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var390X)))
 (=> $x76 (= ?x23 ?x138))))))))
 ))
 (let (($x85 (forall ((input.ind-%var389X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var389X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var389X) (bvult input.ind-%var389X input.dst.llvm-%n)))))
 ))
 (let (($x11 (and $x85 $x32)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x180 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x180)))
 (let (($x178 (or false (or false (and (and true (or $x43 $x16)) (or $x172 $x116))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x178)))
 (let (($x150 (and (and (and $x12 $x11) $x84) $x142)))
 (let (($x188 (= $x150 true)))
 (let (($x74 (forall ((input.ind-%var400X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var400X)))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var400X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var400X)))
 (=> $x76 (= ?x23 ?x128))))))
 ))
 (let (($x153 (forall ((input.ind-%var399X (_ BitVec 32)) )(let (($x47 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var399X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var399X)))
 (= $x76 $x47))))
 ))
 (let (($x123 (and $x153 $x74)))
 (let (($x35 (and $x123 $x188)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x67 (and $x186 $x35)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x78 $x67)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x100 (and $x34 $x189)))
 (let (($x216 (=> $x100 $x215)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (forall ((input.ind-%var442X (_ BitVec 32)) )(let ((?x212 (spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var442X)))
 (let ((?x167 (bvadd (bvmul input.ind-%var442X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x106))))
 (let (($x164 (and (bvule (_ bv0 32) input.ind-%var442X) (bvult input.ind-%var442X input.dst.llvm-%n))))
 (=> $x164 (= ?x41 ?x212))))))))
 ))
 (let (($x187 (forall ((input.ind-%var441X (_ BitVec 32)) )(let (($x154 (spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var441X)))
 (let (($x164 (and (bvule (_ bv0 32) input.ind-%var441X) (bvult input.ind-%var441X input.dst.llvm-%n))))
 (= $x164 $x154))))
 ))
 (let (($x223 (and $x187 $x222)))
 (let (($x224 (= $x223 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x65 (concat ?x181 (concat ?x75 ?x163)))))
 (let (($x95 (= input.dst.llvm-%n ?x8)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x37 (concat ?x53 (concat ?x135 ?x72)))))
 (let (($x190 (= input.dst.llvm-%x ?x156)))
 (let (($x62 (and $x190 $x95)))
 (let (($x9 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x81 (and $x9 $x62)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x188)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x142)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x183 $x46)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x166 $x96)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x91 $x77)))
 (let (($x30 (not $x7)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x13 $x5)))
 (let (($x168 (and (not $x59) $x30)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x42 $x29)))
 (let (($x114 (not $x174)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x17 $x60)))
 (let (($x130 (and (not $x84) $x114)))
 (let (($x214 (and (and (and (and (and (and $x130 $x168) $x194) $x133) $x45) $x158) $x150)))
 (let (($x215 (and $x214 $x35)))
 (let (($x49 (forall ((input.ind-%var420X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var420X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x106))))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var420X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var420X)))
 (=> $x76 (= ?x25 ?x41))))))))
 ))
 (let (($x134 (forall ((input.ind-%var419X (_ BitVec 32)) )(let (($x164 (and (bvule (_ bv0 32) input.ind-%var419X) (bvult input.ind-%var419X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var419X)))
 (= $x76 $x164))))
 ))
 (let (($x107 (and $x134 $x49)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x131 (or false (or false (and (and true (or $x123 $x143)) (or $x69 $x180))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x90 (and (and (and $x27 $x107) $x215) $x81)))
 (let (($x191 (= $x90 true)))
 (let (($x151 (forall ((input.ind-%var430X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var430X)))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var430X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var430X)))
 (=> $x76 (= ?x25 ?x116))))))
 ))
 (let (($x182 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x71 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var429X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var429X)))
 (= $x76 $x71))))
 ))
 (let (($x171 (and $x182 $x151)))
 (let (($x176 (and $x171 $x191)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x78 $x176)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x113 (and $x68 $x18)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x157 (and $x34 $x113)))
 (let (($x225 (=> $x157 $x224)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (forall ((input.ind-%var442X (_ BitVec 32)) )(let ((?x212 (spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var442X)))
 (let ((?x167 (bvadd (bvmul input.ind-%var442X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x106))))
 (let (($x164 (and (bvule (_ bv0 32) input.ind-%var442X) (bvult input.ind-%var442X input.dst.llvm-%n))))
 (=> $x164 (= ?x41 ?x212))))))))
 ))
 (let (($x187 (forall ((input.ind-%var441X (_ BitVec 32)) )(let (($x154 (spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var441X)))
 (let (($x164 (and (bvule (_ bv0 32) input.ind-%var441X) (bvult input.ind-%var441X input.dst.llvm-%n))))
 (= $x164 $x154))))
 ))
 (let (($x223 (and $x187 $x222)))
 (let (($x224 (= $x223 true)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x8 (concat ?x65 (concat ?x181 (concat ?x75 ?x163)))))
 (let (($x95 (= input.dst.llvm-%n ?x8)))
 (let ((?x72 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x156 (concat ?x37 (concat ?x53 (concat ?x135 ?x72)))))
 (let (($x190 (= input.dst.llvm-%x ?x156)))
 (let (($x62 (and $x190 $x95)))
 (let (($x9 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x81 (and $x9 $x62)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x188)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x142)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x162 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x162)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x183 $x46)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x166 $x96)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x91 $x77)))
 (let (($x30 (not $x7)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x13 $x5)))
 (let (($x168 (and (not $x59) $x30)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x42 $x29)))
 (let (($x114 (not $x174)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x17 $x60)))
 (let (($x130 (and (not $x84) $x114)))
 (let (($x214 (and (and (and (and (and (and $x130 $x168) $x194) $x133) $x45) $x158) $x150)))
 (let (($x215 (and $x214 $x35)))
 (let (($x49 (forall ((input.ind-%var420X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var420X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x106))))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var420X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var420X)))
 (=> $x76 (= ?x25 ?x41))))))))
 ))
 (let (($x134 (forall ((input.ind-%var419X (_ BitVec 32)) )(let (($x164 (and (bvule (_ bv0 32) input.ind-%var419X) (bvult input.ind-%var419X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var419X)))
 (= $x76 $x164))))
 ))
 (let (($x107 (and $x134 $x49)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x131 (or false (or false (and (and true (or $x123 $x143)) (or $x69 $x180))))))
 (let (($x27 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x131)))
 (let (($x90 (and (and (and $x27 $x107) $x215) $x81)))
 (let (($x191 (= $x90 true)))
 (let (($x151 (forall ((input.ind-%var430X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var430X)))
 (let ((?x25 (input.spec-%var-x-1.1.1 input.ind-%var430X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var430X)))
 (=> $x76 (= ?x25 ?x116))))))
 ))
 (let (($x182 (forall ((input.ind-%var429X (_ BitVec 32)) )(let (($x71 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var429X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var429X)))
 (= $x76 $x71))))
 ))
 (let (($x171 (and $x182 $x151)))
 (let (($x176 (and $x171 $x191)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x78 $x176)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x113 (and $x68 $x18)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x157 (and $x34 $x113)))
 (let (($x225 (=> $x157 $x224)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5d9968d0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var442X!1 () (_ BitVec 32)
    #x28801039)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3aaae1c4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x2880103a)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x5e809f1c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5d9968d3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3aaae1c7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5d9968d0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3aaae1c4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x5d9968d3) #x5e
    (ite (= x!0 #x5d9968d0) #x1c
    (ite (= x!0 #x3aaae1c7) #x28
    (ite (= x!0 #x3aaae1c6) #x80
    (ite (= x!0 #x5d9968d2) #x80
    (ite (= x!0 #x5d9968d1) #x9f
    (ite (= x!0 #x0080e000) #x08
    (ite (= x!0 #x3aaae1c4) #x3a
    (ite (= x!0 #x3aaae1c5) #x10
      #x00))))))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!2 #x3aaae1c7)
                        (k!2 #x3aaae1c6)
                        (k!2 #x3aaae1c5)
                        (k!2 #x3aaae1c4))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x28801039) #x00000008
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x5d9968d3)
                                     (k!2 #x5d9968d2)
                                     (k!2 #x5d9968d1)
                                     (k!2 #x5d9968d0)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x5d9968d3)
                                     (k!2 #x5d9968d2)
                                     (k!2 #x5d9968d1)
                                     (k!2 #x5d9968d0)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x5d9968d3)
                                     (k!2 #x5d9968d2)
                                     (k!2 #x5d9968d1)
                                     (k!2 #x5d9968d0)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x5d9968d3)
                                     (k!2 #x5d9968d2)
                                     (k!2 #x5d9968d1)
                                     (k!2 #x5d9968d0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x28801039) #x00000008
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000a18c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80450990)
  (define-fun input.ind-%var442X!1 () (_ BitVec 32)
    #x18a0a001)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x18c0c002)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00500000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80450993)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000a18c7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80450990)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000a18c4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x000a18c5) #xc0
    (ite (= x!0 #x80450992) #x50
    (ite (= x!0 #x000a18c7) #x18
    (ite (= x!0 #x62d28005) #x00
    (ite (= x!0 #x000a18c6) #xc0
    (ite (= x!0 #x80450991) #x00
    (ite (= x!0 #x00500002) #x00
    (ite (= x!0 #x00500000) #x00
    (ite (= x!0 #x80450993) #x00
    (ite (= x!0 #x80450990) #x00
    (ite (= x!0 #x00500001) #x00
    (ite (= x!0 #x62d28006) #x00
    (ite (= x!0 #x00500003) #x00
    (ite (= x!0 #x62d28007) #x00
      #x02)))))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x18a0a001) #x00000002
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!8 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #x80450993)
                                     (k!8 #x80450992)
                                     (k!8 #x80450991)
                                     (k!8 #x80450990)))))
            (a!2 (k!8 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #x80450993)
                                     (k!8 #x80450992)
                                     (k!8 #x80450991)
                                     (k!8 #x80450990)))))
            (a!3 (k!8 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #x80450993)
                                     (k!8 #x80450992)
                                     (k!8 #x80450991)
                                     (k!8 #x80450990)))))
            (a!4 (k!8 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!8 #x80450993)
                                     (k!8 #x80450992)
                                     (k!8 #x80450991)
                                     (k!8 #x80450990))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x18c0c002 x!0)
         (ite (bvule #x18c0c003 x!0) #x18c0c003 #x18c0c002)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x18a0a001) #x00000002
      (input.spec-%var-x-1.1.1 x!0))))
  (define-fun spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (forall ((input.ind-%var500X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var500X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x162))))
 (let ((?x77 (input.spec-%var-x-1.1.1 input.ind-%var500X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var500X)))
 (=> $x76 (= ?x77 ?x158))))))))
 ))
 (let (($x6 (forall ((input.ind-%var499X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var499X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var499X) (bvult input.ind-%var499X (_ bv0 32))))))
 ))
 (let (($x52 (and $x6 $x197)))
 (let (($x175 (= $x52 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x16 (concat ?x127 (concat ?x10 ?x15)))))
 (let (($x112 (= input.dst.llvm-%n ?x19)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x36 (concat ?x160 (concat ?x226 ?x224)))))
 (let (($x73 (= input.dst.llvm-%x ?x47)))
 (let (($x21 (and $x73 $x112)))
 (let (($x222 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x126 (and $x222 $x21)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x191)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x81)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x75 $x192)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x137 $x89)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x135 $x72)))
 (let (($x31 (not $x155)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x33 $x53)))
 (let (($x190 (and (not $x146) $x31)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x48 $x216)))
 (let (($x9 (not $x217)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x188 $x35)))
 (let (($x37 (and (not $x215) $x9)))
 (let (($x187 (and (and (and (and (and (and $x37 $x190) $x65) $x181) $x8) $x62) $x90)))
 (let (($x212 (and $x187 $x176)))
 (let (($x150 (forall ((input.ind-%var480X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var480X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x162))))
 (let ((?x77 (input.spec-%var-x-1.1.1 input.ind-%var480X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var480X)))
 (=> $x76 (= ?x77 ?x158))))))))
 ))
 (let (($x148 (forall ((input.ind-%var479X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var479X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var479X) (bvult input.ind-%var479X input.dst.llvm-%n)))))
 ))
 (let (($x214 (and $x148 $x150)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x32 (or false (or false (and (and true (or $x171 $x103)) (or $x54 $x74))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x144 (and (and (and $x140 $x214) $x212) $x126)))
 (let (($x129 (= $x144 true)))
 (let (($x147 (forall ((input.ind-%var490X (_ BitVec 32)) )(let ((?x180 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var490X)))
 (let ((?x77 (input.spec-%var-x-1.1.1 input.ind-%var490X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var490X)))
 (=> $x76 (= ?x77 ?x180))))))
 ))
 (let (($x38 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var489X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var489X)))
 (= $x76 $x109))))
 ))
 (let (($x164 (and $x38 $x147)))
 (let (($x11 (and $x164 $x129)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x68 $x11)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x24 (and $x34 $x177)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x141 $x24)))
 (let (($x122 (=> $x20 $x175)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x197 (forall ((input.ind-%var500X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var500X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x162))))
 (let ((?x77 (input.spec-%var-x-1.1.1 input.ind-%var500X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var500X)))
 (=> $x76 (= ?x77 ?x158))))))))
 ))
 (let (($x6 (forall ((input.ind-%var499X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var499X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var499X) (bvult input.ind-%var499X (_ bv0 32))))))
 ))
 (let (($x52 (and $x6 $x197)))
 (let (($x175 (= $x52 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x16 (concat ?x127 (concat ?x10 ?x15)))))
 (let (($x112 (= input.dst.llvm-%n ?x19)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x36 (concat ?x160 (concat ?x226 ?x224)))))
 (let (($x73 (= input.dst.llvm-%x ?x47)))
 (let (($x21 (and $x73 $x112)))
 (let (($x222 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x126 (and $x222 $x21)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x191)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x81)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x163)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (and $x75 $x192)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x137 $x89)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x135 $x72)))
 (let (($x31 (not $x155)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x33 $x53)))
 (let (($x190 (and (not $x146) $x31)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x48 $x216)))
 (let (($x9 (not $x217)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x188 $x35)))
 (let (($x37 (and (not $x215) $x9)))
 (let (($x187 (and (and (and (and (and (and $x37 $x190) $x65) $x181) $x8) $x62) $x90)))
 (let (($x212 (and $x187 $x176)))
 (let (($x150 (forall ((input.ind-%var480X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var480X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x162))))
 (let ((?x77 (input.spec-%var-x-1.1.1 input.ind-%var480X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var480X)))
 (=> $x76 (= ?x77 ?x158))))))))
 ))
 (let (($x148 (forall ((input.ind-%var479X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var479X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var479X) (bvult input.ind-%var479X input.dst.llvm-%n)))))
 ))
 (let (($x214 (and $x148 $x150)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x32 (or false (or false (and (and true (or $x171 $x103)) (or $x54 $x74))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x144 (and (and (and $x140 $x214) $x212) $x126)))
 (let (($x129 (= $x144 true)))
 (let (($x147 (forall ((input.ind-%var490X (_ BitVec 32)) )(let ((?x180 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var490X)))
 (let ((?x77 (input.spec-%var-x-1.1.1 input.ind-%var490X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var490X)))
 (=> $x76 (= ?x77 ?x180))))))
 ))
 (let (($x38 (forall ((input.ind-%var489X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var489X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var489X)))
 (= $x76 $x109))))
 ))
 (let (($x164 (and $x38 $x147)))
 (let (($x11 (and $x164 $x129)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x68 $x11)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x24 (and $x34 $x177)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x141 $x24)))
 (let (($x122 (=> $x20 $x175)))
 (not $x122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var500X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.ind-%var499X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var499X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18404004)
  (define-fun input.ind-%var500X!1 () (_ BitVec 32)
    #x140cc320)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10250021)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x2c883140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x905c8543)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18404007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18404004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x18404005) #x00
    (ite (= x!0 #x905c8542) #x88
    (ite (= x!0 #x18404004) #x21
    (ite (= x!0 #x2c883142) #x00
    (ite (= x!0 #x2c883141) #x00
    (ite (= x!0 #x2c883143) #x00
    (ite (= x!0 #x18404006) #x25
    (ite (= x!0 #x905c8541) #x31
    (ite (= x!0 #x2c883140) #x00
    (ite (= x!0 #x905c8543) #x2c
    (ite (= x!0 #x905c8540) #x40
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x10250021 x!0)
         (ite (bvule #x10250022 x!0)
              (ite (bvule #x140cc320 x!0) #x140cc320 #x10250022)
              #x10250021)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x140cc320) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (forall ((input.ind-%var546X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var546X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x163))))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var546X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var546X)))
 (=> $x76 (= ?x72 ?x62))))))))
 ))
 (let (($x82 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var545X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var545X) (bvult input.ind-%var545X (_ bv0 32))))))
 ))
 (let (($x28 (and $x82 $x139)))
 (let (($x132 (= $x28 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x5 (concat ?x40 (concat ?x189 ?x94)))))
 (let (($x108 (= input.dst.llvm-%n ?x121)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x133 (concat ?x152 (concat ?x50 ?x119)))))
 (let (($x114 (= input.dst.llvm-%x ?x98)))
 (let (($x64 (and $x114 $x108)))
 (let (($x175 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x102 (and $x175 $x64)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x129)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x126)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x15)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x10 $x56)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x179 $x63)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x226 $x224)))
 (let (($x55 (not $x115)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x83 $x160)))
 (let (($x73 (and (not $x225) $x55)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x61 $x220)))
 (let (($x222 (not $x221)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x191 $x176)))
 (let (($x36 (and (not $x212) $x222)))
 (let (($x92 (and (and (and (and (and (and $x36 $x73) $x16) $x127) $x19) $x21) $x144)))
 (let (($x6 (and $x92 $x11)))
 (let (($x90 (forall ((input.ind-%var526X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var526X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x163))))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var526X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var526X)))
 (=> $x76 (= ?x72 ?x62))))))))
 ))
 (let (($x169 (forall ((input.ind-%var525X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var525X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var525X) (bvult input.ind-%var525X input.dst.llvm-%n)))))
 ))
 (let (($x187 (and $x169 $x90)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x49 (or false (or false (and (and true (or $x164 $x128)) (or $x178 $x151))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x49)))
 (let (($x106 (and (and (and $x194 $x187) $x6) $x102)))
 (let (($x22 (= $x106 true)))
 (let (($x7 (forall ((input.ind-%var536X (_ BitVec 32)) )(let ((?x74 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var536X)))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var536X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var536X)))
 (=> $x76 (= ?x72 ?x74))))))
 ))
 (let (($x58 (forall ((input.ind-%var535X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var535X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var535X)))
 (= $x76 $x30))))
 ))
 (let (($x67 (and $x58 $x7)))
 (let (($x59 (and $x67 $x22)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x17 (and $x34 $x59)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x26 $x17)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x141 $x182)))
 (let (($x145 (=> $x101 $x132)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (forall ((input.ind-%var546X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var546X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x163))))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var546X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var546X)))
 (=> $x76 (= ?x72 ?x62))))))))
 ))
 (let (($x82 (forall ((input.ind-%var545X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var545X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var545X) (bvult input.ind-%var545X (_ bv0 32))))))
 ))
 (let (($x28 (and $x82 $x139)))
 (let (($x132 (= $x28 true)))
 (let ((?x94 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x5 (concat ?x40 (concat ?x189 ?x94)))))
 (let (($x108 (= input.dst.llvm-%n ?x121)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x133 (concat ?x152 (concat ?x50 ?x119)))))
 (let (($x114 (= input.dst.llvm-%x ?x98)))
 (let (($x64 (and $x114 $x108)))
 (let (($x175 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x102 (and $x175 $x64)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x129)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x144 (= (_ bv0 32) ?x126)))
 (let ((?x112 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x112)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x15)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x10 $x56)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x179 $x63)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x226 $x224)))
 (let (($x55 (not $x115)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x83 $x160)))
 (let (($x73 (and (not $x225) $x55)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x221 (and $x61 $x220)))
 (let (($x222 (not $x221)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x212 (and $x191 $x176)))
 (let (($x36 (and (not $x212) $x222)))
 (let (($x92 (and (and (and (and (and (and $x36 $x73) $x16) $x127) $x19) $x21) $x144)))
 (let (($x6 (and $x92 $x11)))
 (let (($x90 (forall ((input.ind-%var526X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var526X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x163))))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var526X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var526X)))
 (=> $x76 (= ?x72 ?x62))))))))
 ))
 (let (($x169 (forall ((input.ind-%var525X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var525X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var525X) (bvult input.ind-%var525X input.dst.llvm-%n)))))
 ))
 (let (($x187 (and $x169 $x90)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x49 (or false (or false (and (and true (or $x164 $x128)) (or $x178 $x151))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x49)))
 (let (($x106 (and (and (and $x194 $x187) $x6) $x102)))
 (let (($x22 (= $x106 true)))
 (let (($x7 (forall ((input.ind-%var536X (_ BitVec 32)) )(let ((?x74 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var536X)))
 (let ((?x72 (input.spec-%var-x-1.1.1 input.ind-%var536X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var536X)))
 (=> $x76 (= ?x72 ?x74))))))
 ))
 (let (($x58 (forall ((input.ind-%var535X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var535X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var535X)))
 (= $x76 $x30))))
 ))
 (let (($x67 (and $x58 $x7)))
 (let (($x59 (and $x67 $x22)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x17 (and $x34 $x59)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x26 $x17)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x141 $x182)))
 (let (($x145 (=> $x101 $x132)))
 (not $x145))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var545X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var546X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var545X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18404004)
  (define-fun input.ind-%var546X!1 () (_ BitVec 32)
    #x140cc320)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10250021)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x2c883140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x905c8543)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18404007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18404004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x18404005) #x00
    (ite (= x!0 #x905c8542) #x88
    (ite (= x!0 #x18404004) #x21
    (ite (= x!0 #x2c883141) #x00
    (ite (= x!0 #x2c883142) #x00
    (ite (= x!0 #x18404006) #x25
    (ite (= x!0 #x2c883143) #x00
    (ite (= x!0 #x905c8541) #x31
    (ite (= x!0 #x2c883140) #x00
    (ite (= x!0 #x905c8543) #x2c
    (ite (= x!0 #x905c8540) #x40
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x10250021 x!0)
         (ite (bvule #x10250022 x!0)
              (ite (bvule #x140cc320 x!0) #x140cc320 #x10250022)
              #x10250021)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x140cc320) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (forall ((input.ind-%var592X (_ BitVec 32)) )(let ((?x47 (bvadd (bvmul input.ind-%var592X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x15))))
 (let ((?x224 (input.spec-%var-x-1.1.1 input.ind-%var592X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var592X)))
 (=> $x76 (= ?x224 ?x21))))))))
 ))
 (let (($x118 (forall ((input.ind-%var591X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var591X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var591X) (bvult input.ind-%var591X (_ bv0 32))))))
 ))
 (let (($x110 (and $x118 $x29)))
 (let (($x153 (= $x110 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x53 (concat ?x130 (concat ?x113 ?x167)))))
 (let (($x91 (= input.dst.llvm-%n ?x166)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x181 (concat ?x13 (concat ?x165 ?x199)))))
 (let (($x9 (= input.dst.llvm-%x ?x96)))
 (let (($x213 (and $x9 $x91)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and $x132 $x213)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x22)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x102)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (and $x189 $x84)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x44 $x70)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x50 $x119)))
 (let (($x172 (not $x198)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x223 $x152)))
 (let (($x114 (and (not $x100) $x172)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x99 $x197)))
 (let (($x175 (not $x52)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x129 $x11)))
 (let (($x133 (and (not $x6) $x175)))
 (let (($x93 (and (and (and (and (and (and $x133 $x114) $x5) $x40) $x121) $x64) $x106)))
 (let (($x82 (and $x93 $x59)))
 (let (($x144 (forall ((input.ind-%var572X (_ BitVec 32)) )(let ((?x47 (bvadd (bvmul input.ind-%var572X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x15))))
 (let ((?x224 (input.spec-%var-x-1.1.1 input.ind-%var572X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var572X)))
 (=> $x76 (= ?x224 ?x21))))))))
 ))
 (let (($x107 (forall ((input.ind-%var571X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var571X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var571X) (bvult input.ind-%var571X input.dst.llvm-%n)))))
 ))
 (let (($x92 (and $x107 $x144)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x150 (or false (or false (and (and true (or $x67 $x116)) (or $x131 $x147))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x162 (and (and (and $x65 $x92) $x82) $x142)))
 (let (($x105 (= $x162 true)))
 (let (($x155 (forall ((input.ind-%var582X (_ BitVec 32)) )(let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var582X)))
 (let ((?x224 (input.spec-%var-x-1.1.1 input.ind-%var582X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var582X)))
 (=> $x76 (= ?x224 ?x151))))))
 ))
 (let (($x45 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var581X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var581X)))
 (= $x76 $x31))))
 ))
 (let (($x18 (and $x45 $x155)))
 (let (($x146 (and $x18 $x105)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x26 $x146)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x38 (and $x173 $x188)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x183 (and $x141 $x38)))
 (let (($x138 (=> $x183 $x153)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x29 (forall ((input.ind-%var592X (_ BitVec 32)) )(let ((?x47 (bvadd (bvmul input.ind-%var592X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x15))))
 (let ((?x224 (input.spec-%var-x-1.1.1 input.ind-%var592X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var592X)))
 (=> $x76 (= ?x224 ?x21))))))))
 ))
 (let (($x118 (forall ((input.ind-%var591X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var591X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var591X) (bvult input.ind-%var591X (_ bv0 32))))))
 ))
 (let (($x110 (and $x118 $x29)))
 (let (($x153 (= $x110 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x53 (concat ?x130 (concat ?x113 ?x167)))))
 (let (($x91 (= input.dst.llvm-%n ?x166)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x181 (concat ?x13 (concat ?x165 ?x199)))))
 (let (($x9 (= input.dst.llvm-%x ?x96)))
 (let (($x213 (and $x9 $x91)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and $x132 $x213)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x22)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x102)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (and $x189 $x84)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (and $x44 $x70)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x50 $x119)))
 (let (($x172 (not $x198)))
 (let (($x152 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x223 $x152)))
 (let (($x114 (and (not $x100) $x172)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x99 $x197)))
 (let (($x175 (not $x52)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x129 $x11)))
 (let (($x133 (and (not $x6) $x175)))
 (let (($x93 (and (and (and (and (and (and $x133 $x114) $x5) $x40) $x121) $x64) $x106)))
 (let (($x82 (and $x93 $x59)))
 (let (($x144 (forall ((input.ind-%var572X (_ BitVec 32)) )(let ((?x47 (bvadd (bvmul input.ind-%var572X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x15))))
 (let ((?x224 (input.spec-%var-x-1.1.1 input.ind-%var572X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var572X)))
 (=> $x76 (= ?x224 ?x21))))))))
 ))
 (let (($x107 (forall ((input.ind-%var571X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var571X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var571X) (bvult input.ind-%var571X input.dst.llvm-%n)))))
 ))
 (let (($x92 (and $x107 $x144)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x150 (or false (or false (and (and true (or $x67 $x116)) (or $x131 $x147))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x162 (and (and (and $x65 $x92) $x82) $x142)))
 (let (($x105 (= $x162 true)))
 (let (($x155 (forall ((input.ind-%var582X (_ BitVec 32)) )(let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var582X)))
 (let ((?x224 (input.spec-%var-x-1.1.1 input.ind-%var582X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var582X)))
 (=> $x76 (= ?x224 ?x151))))))
 ))
 (let (($x45 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var581X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var581X)))
 (= $x76 $x31))))
 ))
 (let (($x18 (and $x45 $x155)))
 (let (($x146 (and $x18 $x105)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x188 (and $x26 $x146)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x38 (and $x173 $x188)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x183 (and $x141 $x38)))
 (let (($x138 (=> $x183 $x153)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var591X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var592X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var592X!1 () (_ BitVec 32)
    #x140cc320)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18404004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x905c8540)
  (define-fun input.ind-%var591X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10250021)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x2c883140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x905c8543)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18404007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18404004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x18404005) #x00
    (ite (= x!0 #x905c8542) #x88
    (ite (= x!0 #x18404004) #x21
    (ite (= x!0 #x2c883143) #x00
    (ite (= x!0 #x2c883142) #x00
    (ite (= x!0 #x2c883141) #x00
    (ite (= x!0 #x18404006) #x25
    (ite (= x!0 #x905c8541) #x31
    (ite (= x!0 #x2c883140) #x00
    (ite (= x!0 #x905c8543) #x2c
    (ite (= x!0 #x905c8540) #x40
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x10250021 x!0)
         (ite (bvule #x10250022 x!0)
              (ite (bvule #x140cc320 x!0) #x140cc320 #x10250022)
              #x10250021)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x140cc320) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x216 (forall ((input.ind-%var638X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var638X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x94))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var638X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var638X)))
 (=> $x76 (= ?x119 ?x64))))))))
 ))
 (let (($x12 (forall ((input.ind-%var637X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var637X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var637X) (bvult input.ind-%var637X (_ bv0 32))))))
 ))
 (let (($x60 (and $x12 $x216)))
 (let (($x78 (= $x60 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x160 (concat ?x37 (concat ?x24 ?x124)))))
 (let (($x135 (= input.dst.llvm-%n ?x137)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x127 (concat ?x33 (concat ?x23 ?x184)))))
 (let (($x222 (= input.dst.llvm-%x ?x89)))
 (let (($x149 (and $x222 $x135)))
 (let (($x153 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x81 (and $x153 $x149)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x105)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x142)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x113 $x215)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x159 $x87)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x165 $x199)))
 (let (($x69 (not $x97)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x122 $x13)))
 (let (($x9 (and (not $x157) $x69)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x195 $x139)))
 (let (($x132 (not $x28)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x22 $x59)))
 (let (($x181 (and (not $x82) $x132)))
 (let (($x193 (and (and (and (and (and (and $x181 $x9) $x53) $x130) $x166) $x213) $x162)))
 (let (($x118 (and $x193 $x146)))
 (let (($x106 (forall ((input.ind-%var618X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var618X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x94))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var618X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var618X)))
 (=> $x76 (= ?x119 ?x64))))))))
 ))
 (let (($x214 (forall ((input.ind-%var617X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var617X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var617X) (bvult input.ind-%var617X input.dst.llvm-%n)))))
 ))
 (let (($x93 (and $x214 $x106)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x90 (or false (or false (and (and true (or $x18 $x180)) (or $x32 $x7))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x163 (and (and (and $x16 $x93) $x118) $x81)))
 (let (($x46 (= $x163 true)))
 (let (($x115 (forall ((input.ind-%var628X (_ BitVec 32)) )(let ((?x147 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var628X)))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var628X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var628X)))
 (=> $x76 (= ?x119 ?x147))))))
 ))
 (let (($x8 (forall ((input.ind-%var627X (_ BitVec 32)) )(let (($x55 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var627X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var627X)))
 (= $x76 $x55))))
 ))
 (let (($x177 (and $x8 $x115)))
 (let (($x225 (and $x177 $x46)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x173 $x225)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x58 (and $x120 $x191)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x141 $x58)))
 (let (($x79 (=> $x75 $x78)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x216 (forall ((input.ind-%var638X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var638X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x94))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var638X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var638X)))
 (=> $x76 (= ?x119 ?x64))))))))
 ))
 (let (($x12 (forall ((input.ind-%var637X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var637X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var637X) (bvult input.ind-%var637X (_ bv0 32))))))
 ))
 (let (($x60 (and $x12 $x216)))
 (let (($x78 (= $x60 true)))
 (let ((?x124 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x160 (concat ?x37 (concat ?x24 ?x124)))))
 (let (($x135 (= input.dst.llvm-%n ?x137)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x127 (concat ?x33 (concat ?x23 ?x184)))))
 (let (($x222 (= input.dst.llvm-%x ?x89)))
 (let (($x149 (and $x222 $x135)))
 (let (($x153 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x81 (and $x153 $x149)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x105)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x142)))
 (let ((?x91 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x167)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (and $x113 $x215)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x159 $x87)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x165 $x199)))
 (let (($x69 (not $x97)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x122 $x13)))
 (let (($x9 (and (not $x157) $x69)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x195 $x139)))
 (let (($x132 (not $x28)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x22 $x59)))
 (let (($x181 (and (not $x82) $x132)))
 (let (($x193 (and (and (and (and (and (and $x181 $x9) $x53) $x130) $x166) $x213) $x162)))
 (let (($x118 (and $x193 $x146)))
 (let (($x106 (forall ((input.ind-%var618X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var618X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x94))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var618X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var618X)))
 (=> $x76 (= ?x119 ?x64))))))))
 ))
 (let (($x214 (forall ((input.ind-%var617X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var617X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var617X) (bvult input.ind-%var617X input.dst.llvm-%n)))))
 ))
 (let (($x93 (and $x214 $x106)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x90 (or false (or false (and (and true (or $x18 $x180)) (or $x32 $x7))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x163 (and (and (and $x16 $x93) $x118) $x81)))
 (let (($x46 (= $x163 true)))
 (let (($x115 (forall ((input.ind-%var628X (_ BitVec 32)) )(let ((?x147 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var628X)))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var628X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var628X)))
 (=> $x76 (= ?x119 ?x147))))))
 ))
 (let (($x8 (forall ((input.ind-%var627X (_ BitVec 32)) )(let (($x55 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var627X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var627X)))
 (= $x76 $x55))))
 ))
 (let (($x177 (and $x8 $x115)))
 (let (($x225 (and $x177 $x46)))
 (let (($x173 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x173 $x225)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x58 (and $x120 $x191)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x75 (and $x141 $x58)))
 (let (($x79 (=> $x75 $x78)))
 (not $x79))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var638X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var637X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var637X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18404004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x905c8540)
  (define-fun input.ind-%var638X!1 () (_ BitVec 32)
    #x140cc320)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10250021)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x2c883140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x905c8543)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18404007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18404004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x18404005) #x00
    (ite (= x!0 #x905c8542) #x88
    (ite (= x!0 #x18404004) #x21
    (ite (= x!0 #x2c883143) #x00
    (ite (= x!0 #x2c883142) #x00
    (ite (= x!0 #x2c883141) #x00
    (ite (= x!0 #x18404006) #x25
    (ite (= x!0 #x905c8541) #x31
    (ite (= x!0 #x2c883140) #x00
    (ite (= x!0 #x905c8543) #x2c
    (ite (= x!0 #x905c8540) #x40
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x10250021 x!0)
         (ite (bvule #x10250022 x!0)
              (ite (bvule #x140cc320 x!0) #x140cc320 #x10250022)
              #x10250021)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x140cc320) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x220 (forall ((input.ind-%var688X (_ BitVec 32)) )(let ((?x96 (bvadd (bvmul input.ind-%var688X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv1 32))) (select input.dst.llvm-mem ?x96))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv2 32))) ?x167))))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var688X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var688X)))
 (=> $x76 (= ?x199 ?x213))))))))
 ))
 (let (($x27 (forall ((input.ind-%var687X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var687X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var687X) (bvult input.ind-%var687X input.dst.llvm-%x)))))
 ))
 (let (($x35 (and $x27 $x220)))
 (let (($x68 (= $x35 true)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x152 (concat ?x36 (concat ?x182 ?x156)))))
 (let (($x226 (= input.dst.llvm-%n ?x179)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x40 (concat ?x83 (concat ?x25 ?x80)))))
 (let (($x175 (= input.dst.llvm-%x ?x63)))
 (let (($x170 (and $x175 $x226)))
 (let (($x78 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x126 (and $x78 $x170)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x46)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x81)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x124)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x24 $x212)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x66 $x161)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x23 $x184)))
 (let (($x54 (not $x104)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x145 $x33)))
 (let (($x222 (and (not $x20) $x54)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x154 $x29)))
 (let (($x153 (not $x110)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x105 $x146)))
 (let (($x127 (and (not $x118) $x153)))
 (let (($x168 (and (and (and (and (and (and $x127 $x222) $x160) $x37) $x137) $x149) $x163)))
 (let (($x12 (and $x168 $x225)))
 (let (($x162 (forall ((input.ind-%var668X (_ BitVec 32)) )(let ((?x96 (bvadd (bvmul input.ind-%var668X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv1 32))) (select input.dst.llvm-mem ?x96))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv2 32))) ?x167))))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var668X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var668X)))
 (=> $x76 (= ?x199 ?x213))))))))
 ))
 (let (($x187 (forall ((input.ind-%var667X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var667X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var667X) (bvult input.ind-%var667X input.dst.llvm-%n)))))
 ))
 (let (($x193 (and $x187 $x162)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x144 (or false (or false (and (and true (or $x177 $x74)) (or $x49 $x155))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x15 (and (and (and $x5 $x193) $x12) $x126)))
 (let (($x192 (= $x15 true)))
 (let (($x198 (forall ((input.ind-%var678X (_ BitVec 32)) )(let ((?x7 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var678X)))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var678X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var678X)))
 (=> $x76 (= ?x199 ?x7))))))
 ))
 (let (($x19 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var677X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var677X)))
 (= $x76 $x172))))
 ))
 (let (($x17 (and $x19 $x198)))
 (let (($x100 (and $x17 $x192)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x120 $x100)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x45 (and $x141 $x129)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x123 $x45)))
 (let (($x88 (=> $x10 $x68)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x220 (forall ((input.ind-%var688X (_ BitVec 32)) )(let ((?x96 (bvadd (bvmul input.ind-%var688X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv1 32))) (select input.dst.llvm-mem ?x96))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv2 32))) ?x167))))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var688X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var688X)))
 (=> $x76 (= ?x199 ?x213))))))))
 ))
 (let (($x27 (forall ((input.ind-%var687X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var687X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var687X) (bvult input.ind-%var687X input.dst.llvm-%x)))))
 ))
 (let (($x35 (and $x27 $x220)))
 (let (($x68 (= $x35 true)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x152 (concat ?x36 (concat ?x182 ?x156)))))
 (let (($x226 (= input.dst.llvm-%n ?x179)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x40 (concat ?x83 (concat ?x25 ?x80)))))
 (let (($x175 (= input.dst.llvm-%x ?x63)))
 (let (($x170 (and $x175 $x226)))
 (let (($x78 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x126 (and $x78 $x170)))
 (let ((?x46 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x225 (= (_ bv0 32) ?x46)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x81)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x212 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x124)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x24 $x212)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x66 $x161)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x23 $x184)))
 (let (($x54 (not $x104)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x145 $x33)))
 (let (($x222 (and (not $x20) $x54)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x110 (and $x154 $x29)))
 (let (($x153 (not $x110)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (and $x105 $x146)))
 (let (($x127 (and (not $x118) $x153)))
 (let (($x168 (and (and (and (and (and (and $x127 $x222) $x160) $x37) $x137) $x149) $x163)))
 (let (($x12 (and $x168 $x225)))
 (let (($x162 (forall ((input.ind-%var668X (_ BitVec 32)) )(let ((?x96 (bvadd (bvmul input.ind-%var668X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv1 32))) (select input.dst.llvm-mem ?x96))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x96 (_ bv2 32))) ?x167))))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var668X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var668X)))
 (=> $x76 (= ?x199 ?x213))))))))
 ))
 (let (($x187 (forall ((input.ind-%var667X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var667X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var667X) (bvult input.ind-%var667X input.dst.llvm-%n)))))
 ))
 (let (($x193 (and $x187 $x162)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x144 (or false (or false (and (and true (or $x177 $x74)) (or $x49 $x155))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x15 (and (and (and $x5 $x193) $x12) $x126)))
 (let (($x192 (= $x15 true)))
 (let (($x198 (forall ((input.ind-%var678X (_ BitVec 32)) )(let ((?x7 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var678X)))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var678X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var678X)))
 (=> $x76 (= ?x199 ?x7))))))
 ))
 (let (($x19 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var677X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var677X)))
 (= $x76 $x172))))
 ))
 (let (($x17 (and $x19 $x198)))
 (let (($x100 (and $x17 $x192)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x129 (and $x120 $x100)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x45 (and $x141 $x129)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x123 $x45)))
 (let (($x88 (=> $x10 $x68)))
 (not $x88))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8ba21b14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var688X!1 () (_ BitVec 32)
    #x0112011b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0800a2c)
  (define-fun input.ind-%var687X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x01000140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8ba21b17)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0800a2f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8ba21b14)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0800a2c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8ba21b17) #x01
    (ite (= x!0 #x8ba21b14) #x40
    (ite (= x!0 #x8ba21b15) #x01
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0112011b) false
      (not (bvule (concat (k!2 #xe0800a2f)
                          (k!2 #xe0800a2e)
                          (k!2 #xe0800a2d)
                          (k!2 #xe0800a2c))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0112011b) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var687X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var688X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xeaee57bc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x207ffdf8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7f38a1fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x207ffdfb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xeaee57bf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x207ffdf8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xeaee57bc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xeaee57bd) #x00
    (ite (= x!0 #x207ffdfa) #x38
    (ite (= x!0 #x7f38a1ff) #x00
    (ite (= x!0 #xeaee57bc) #x00
    (ite (= x!0 #xeaee57bf) #x00
    (ite (= x!0 #x7f38a1fe) #x00
    (ite (= x!0 #x207ffdf9) #xa1
    (ite (= x!0 #xeaee57be) #x00
    (ite (= x!0 #x7f38a1fc) #x00
    (ite (= x!0 #x207ffdfb) #x7f
    (ite (= x!0 #x207ffdf8) #xfc
      #x40))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x211 (forall ((input.ind-%var734X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var734X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x124))))
 (let ((?x184 (input.spec-%var-x-1.1.1 input.ind-%var734X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var734X)))
 (=> $x76 (= ?x184 ?x149))))))))
 ))
 (let (($x107 (forall ((input.ind-%var733X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var733X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var733X) (bvult input.ind-%var733X input.dst.llvm-%n)))))
 ))
 (let (($x11 (and $x107 $x211)))
 (let (($x71 (= $x11 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x13 (concat ?x133 (concat ?x38 ?x47)))))
 (let (($x50 (= input.dst.llvm-%n ?x44)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x130 (concat ?x223 (concat ?x77 ?x41)))))
 (let (($x132 (= input.dst.llvm-%x ?x70)))
 (let (($x174 (and $x132 $x50)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x102 (and $x68 $x174)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x192)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x126)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x156)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x182 $x6)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x136 $x111)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x25 $x80)))
 (let (($x178 (not $x14)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x138 $x83)))
 (let (($x175 (and (not $x101) $x178)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x186 $x216)))
 (let (($x78 (not $x60)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x46 $x225)))
 (let (($x40 (and (not $x12) $x78)))
 (let (($x190 (and (and (and (and (and (and $x40 $x175) $x152) $x36) $x179) $x170) $x15)))
 (let (($x27 (and $x190 $x100)))
 (let (($x163 (forall ((input.ind-%var714X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var714X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x124))))
 (let ((?x184 (input.spec-%var-x-1.1.1 input.ind-%var714X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var714X)))
 (=> $x76 (= ?x184 ?x149))))))))
 ))
 (let (($x92 (forall ((input.ind-%var713X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var713X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var713X) (bvult input.ind-%var713X input.dst.llvm-%n)))))
 ))
 (let (($x168 (and $x92 $x163)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x106 (or false (or false (and (and true (or $x17 $x151)) (or $x150 $x115))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x94 (and (and (and $x53 $x168) $x27) $x102)))
 (let (($x56 (= $x94 true)))
 (let (($x97 (forall ((input.ind-%var724X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var724X)))
 (let ((?x184 (input.spec-%var-x-1.1.1 input.ind-%var724X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var724X)))
 (=> $x76 (= ?x184 ?x155))))))
 ))
 (let (($x121 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x69 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var723X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var723X)))
 (= $x76 $x69))))
 ))
 (let (($x188 (and $x121 $x97)))
 (let (($x157 (and $x188 $x56)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x22 (and $x141 $x157)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x8 (and $x103 $x22)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x123 $x8)))
 (let (($x197 (=> $x189 $x71)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x211 (forall ((input.ind-%var734X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var734X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x124))))
 (let ((?x184 (input.spec-%var-x-1.1.1 input.ind-%var734X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var734X)))
 (=> $x76 (= ?x184 ?x149))))))))
 ))
 (let (($x107 (forall ((input.ind-%var733X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var733X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var733X) (bvult input.ind-%var733X input.dst.llvm-%n)))))
 ))
 (let (($x11 (and $x107 $x211)))
 (let (($x71 (= $x11 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x13 (concat ?x133 (concat ?x38 ?x47)))))
 (let (($x50 (= input.dst.llvm-%n ?x44)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x130 (concat ?x223 (concat ?x77 ?x41)))))
 (let (($x132 (= input.dst.llvm-%x ?x70)))
 (let (($x174 (and $x132 $x50)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x102 (and $x68 $x174)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x192)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x126)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x226)))
 (let ((?x156 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x156)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x182 $x6)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x136 $x111)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x25 $x80)))
 (let (($x178 (not $x14)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x138 $x83)))
 (let (($x175 (and (not $x101) $x178)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x186 $x216)))
 (let (($x78 (not $x60)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x46 $x225)))
 (let (($x40 (and (not $x12) $x78)))
 (let (($x190 (and (and (and (and (and (and $x40 $x175) $x152) $x36) $x179) $x170) $x15)))
 (let (($x27 (and $x190 $x100)))
 (let (($x163 (forall ((input.ind-%var714X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var714X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x124))))
 (let ((?x184 (input.spec-%var-x-1.1.1 input.ind-%var714X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var714X)))
 (=> $x76 (= ?x184 ?x149))))))))
 ))
 (let (($x92 (forall ((input.ind-%var713X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var713X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var713X) (bvult input.ind-%var713X input.dst.llvm-%n)))))
 ))
 (let (($x168 (and $x92 $x163)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x106 (or false (or false (and (and true (or $x17 $x151)) (or $x150 $x115))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x106)))
 (let (($x94 (and (and (and $x53 $x168) $x27) $x102)))
 (let (($x56 (= $x94 true)))
 (let (($x97 (forall ((input.ind-%var724X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var724X)))
 (let ((?x184 (input.spec-%var-x-1.1.1 input.ind-%var724X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var724X)))
 (=> $x76 (= ?x184 ?x155))))))
 ))
 (let (($x121 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x69 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var723X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var723X)))
 (= $x76 $x69))))
 ))
 (let (($x188 (and $x121 $x97)))
 (let (($x157 (and $x188 $x56)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x22 (and $x141 $x157)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x8 (and $x103 $x22)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x123 $x8)))
 (let (($x197 (=> $x189 $x71)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x201 (forall ((input.ind-%var764X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var764X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x156))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var764X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var764X)))
 (=> $x76 (= ?x80 ?x170))))))))
 ))
 (let (($x65 (forall ((input.ind-%var763X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var763X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var763X) (bvult input.ind-%var763X input.dst.llvm-%x)))))
 ))
 (let (($x62 (and $x65 $x201)))
 (let (($x34 (= $x62 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x217 (concat ?x33 (concat ?x181 ?x118)))))
 (let (($x193 (= input.dst.llvm-%n ?x142)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x143 (concat ?x37 (concat ?x122 ?x43)))))
 (let (($x48 (= input.dst.llvm-%x ?x98)))
 (let (($x134 (and $x48 $x193)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x167 (and $x75 $x134)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x56)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x102)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (and $x38 $x82)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x42 $x86)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x77 $x41)))
 (let (($x131 (not $x57)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x79 $x223)))
 (let (($x132 (and (not $x183) $x131)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x85 $x220)))
 (let (($x68 (not $x35)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x192 $x100)))
 (let (($x130 (and (not $x27) $x68)))
 (let (($x11 (and (and (and (and (and (and $x130 $x132) $x13) $x133) $x44) $x174) $x94)))
 (let (($x71 (and $x11 $x157)))
 (let (($x15 (forall ((input.ind-%var744X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var744X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x156))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var744X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var744X)))
 (=> $x76 (= ?x80 ?x170))))))))
 ))
 (let (($x93 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var743X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var743X) (bvult input.ind-%var743X input.dst.llvm-%n)))))
 ))
 (let (($x190 (and $x93 $x15)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x162 (or false (or false (and (and true (or $x188 $x147)) (or $x90 $x198))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x105 (and (and (and $x160 $x190) $x71) $x167)))
 (let (($x19 (= $x105 true)))
 (let (($x104 (forall ((input.ind-%var754X (_ BitVec 32)) )(let ((?x115 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var754X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var754X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var754X)))
 (=> $x76 (= ?x80 ?x115))))))
 ))
 (let (($x166 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var753X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var753X)))
 (= $x76 $x54))))
 ))
 (let (($x191 (and $x166 $x104)))
 (let (($x113 (and $x191 $x19)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x213 (and $x103 $x113)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x146 (and $x128 $x213)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x123 $x146)))
 (let (($x185 (=> $x120 $x34)))
 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x201 (forall ((input.ind-%var764X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var764X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x156))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var764X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var764X)))
 (=> $x76 (= ?x80 ?x170))))))))
 ))
 (let (($x65 (forall ((input.ind-%var763X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var763X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var763X) (bvult input.ind-%var763X input.dst.llvm-%x)))))
 ))
 (let (($x62 (and $x65 $x201)))
 (let (($x34 (= $x62 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x217 (concat ?x33 (concat ?x181 ?x118)))))
 (let (($x193 (= input.dst.llvm-%n ?x142)))
 (let ((?x43 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x143 (concat ?x37 (concat ?x122 ?x43)))))
 (let (($x48 (= input.dst.llvm-%x ?x98)))
 (let (($x134 (and $x48 $x193)))
 (let (($x75 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x167 (and $x75 $x134)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x56)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x102)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x47)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (and $x38 $x82)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x42 $x86)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x77 $x41)))
 (let (($x131 (not $x57)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (and $x79 $x223)))
 (let (($x132 (and (not $x183) $x131)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x85 $x220)))
 (let (($x68 (not $x35)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x192 $x100)))
 (let (($x130 (and (not $x27) $x68)))
 (let (($x11 (and (and (and (and (and (and $x130 $x132) $x13) $x133) $x44) $x174) $x94)))
 (let (($x71 (and $x11 $x157)))
 (let (($x15 (forall ((input.ind-%var744X (_ BitVec 32)) )(let ((?x63 (bvadd (bvmul input.ind-%var744X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x156))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var744X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var744X)))
 (=> $x76 (= ?x80 ?x170))))))))
 ))
 (let (($x93 (forall ((input.ind-%var743X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var743X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var743X) (bvult input.ind-%var743X input.dst.llvm-%n)))))
 ))
 (let (($x190 (and $x93 $x15)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x162 (or false (or false (and (and true (or $x188 $x147)) (or $x90 $x198))))))
 (let (($x160 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x105 (and (and (and $x160 $x190) $x71) $x167)))
 (let (($x19 (= $x105 true)))
 (let (($x104 (forall ((input.ind-%var754X (_ BitVec 32)) )(let ((?x115 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var754X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var754X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var754X)))
 (=> $x76 (= ?x80 ?x115))))))
 ))
 (let (($x166 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var753X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var753X)))
 (= $x76 $x54))))
 ))
 (let (($x191 (and $x166 $x104)))
 (let (($x113 (and $x191 $x19)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x213 (and $x103 $x113)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x146 (and $x128 $x213)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x123 $x146)))
 (let (($x185 (=> $x120 $x34)))
 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8ba21b14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var764X!1 () (_ BitVec 32)
    #x0112011b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0800a2c)
  (define-fun input.ind-%var763X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x01000140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8ba21b17)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0800a2f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8ba21b14)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0800a2c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8ba21b17) #x01
    (ite (= x!0 #x8ba21b14) #x40
    (ite (= x!0 #x8ba21b15) #x01
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0112011b) false
      (not (bvule (concat (k!2 #xe0800a2f)
                          (k!2 #xe0800a2e)
                          (k!2 #xe0800a2d)
                          (k!2 #xe0800a2c))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0112011b) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var763X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xeaee57bc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x207ffdf8)
  (define-fun input.ind-%var764X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7f38a1fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x207ffdfb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xeaee57bf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x207ffdf8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xeaee57bc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xeaee57bd) #x00
    (ite (= x!0 #x207ffdfa) #x38
    (ite (= x!0 #xeaee57bc) #x00
    (ite (= x!0 #xeaee57bf) #x00
    (ite (= x!0 #x7f38a1ff) #x00
    (ite (= x!0 #x7f38a1fc) #x00
    (ite (= x!0 #x7f38a1fe) #x00
    (ite (= x!0 #xeaee57be) #x00
    (ite (= x!0 #x207ffdf9) #xa1
    (ite (= x!0 #x207ffdfb) #x7f
    (ite (= x!0 #x207ffdf8) #xfc
      #x40))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (= false true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x83 (concat ?x127 (concat ?x45 ?x96)))))
 (let (($x23 (= input.dst.llvm-%n ?x66)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x36 (concat ?x145 (concat ?x224 ?x158)))))
 (let (($x78 (= input.dst.llvm-%x ?x161)))
 (let (($x221 (and $x78 $x23)))
 (let (($x34 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x81 (and $x34 $x221)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x19)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x167)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x118)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x181 $x95)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x74 $x159)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x122 $x43)))
 (let (($x87 (not $x32)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x172 $x37)))
 (let (($x48 (and (not $x88) $x87)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x20 $x197)))
 (let (($x75 (not $x176)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x56 $x157)))
 (let (($x143 (and (not $x71) $x75)))
 (let (($x173 (and (and (and (and (and (and $x143 $x48) $x217) $x33) $x142) $x134) $x105)))
 (let (($x65 (and $x173 $x113)))
 (let (($x94 (forall ((input.ind-%var790X (_ BitVec 32)) )(let ((?x70 (bvadd (bvmul input.ind-%var790X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x47))))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var790X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var790X)))
 (=> $x76 (= ?x41 ?x174))))))))
 ))
 (let (($x84 (forall ((input.ind-%var789X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var789X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var789X) (bvult input.ind-%var789X input.dst.llvm-%n)))))
 ))
 (let (($x11 (and $x84 $x94)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x163 (or false (or false (and (and true (or $x191 $x7)) (or $x144 $x97))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x124 (and (and (and $x152 $x11) $x65) $x81)))
 (let (($x215 (= $x124 true)))
 (let (($x14 (forall ((input.ind-%var800X (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var800X)))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var800X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var800X)))
 (=> $x76 (= ?x41 ?x198))))))
 ))
 (let (($x137 (forall ((input.ind-%var799X (_ BitVec 32)) )(let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var799X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var799X)))
 (= $x76 $x178))))
 ))
 (let (($x129 (and $x137 $x14)))
 (let (($x101 (and $x129 $x215)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x128 $x101)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x121 (and $x116 $x46)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x123 $x121)))
 (let (($x225 (=> $x24 $x149)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (= false true)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x83 (concat ?x127 (concat ?x45 ?x96)))))
 (let (($x23 (= input.dst.llvm-%n ?x66)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x36 (concat ?x145 (concat ?x224 ?x158)))))
 (let (($x78 (= input.dst.llvm-%x ?x161)))
 (let (($x221 (and $x78 $x23)))
 (let (($x34 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x81 (and $x34 $x221)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x19)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x167)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x193)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x118)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (and $x181 $x95)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x74 $x159)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x122 $x43)))
 (let (($x87 (not $x32)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x172 $x37)))
 (let (($x48 (and (not $x88) $x87)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x20 $x197)))
 (let (($x75 (not $x176)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x56 $x157)))
 (let (($x143 (and (not $x71) $x75)))
 (let (($x173 (and (and (and (and (and (and $x143 $x48) $x217) $x33) $x142) $x134) $x105)))
 (let (($x65 (and $x173 $x113)))
 (let (($x94 (forall ((input.ind-%var790X (_ BitVec 32)) )(let ((?x70 (bvadd (bvmul input.ind-%var790X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x47))))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var790X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var790X)))
 (=> $x76 (= ?x41 ?x174))))))))
 ))
 (let (($x84 (forall ((input.ind-%var789X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var789X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var789X) (bvult input.ind-%var789X input.dst.llvm-%n)))))
 ))
 (let (($x11 (and $x84 $x94)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x104)))
 (let (($x163 (or false (or false (and (and true (or $x191 $x7)) (or $x144 $x97))))))
 (let (($x152 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x124 (and (and (and $x152 $x11) $x65) $x81)))
 (let (($x215 (= $x124 true)))
 (let (($x14 (forall ((input.ind-%var800X (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var800X)))
 (let ((?x41 (input.spec-%var-x-1.1.1 input.ind-%var800X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var800X)))
 (=> $x76 (= ?x41 ?x198))))))
 ))
 (let (($x137 (forall ((input.ind-%var799X (_ BitVec 32)) )(let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var799X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var799X)))
 (= $x76 $x178))))
 ))
 (let (($x129 (and $x137 $x14)))
 (let (($x101 (and $x129 $x215)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x128 $x101)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x121 (and $x116 $x46)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x123 $x121)))
 (let (($x225 (=> $x24 $x149)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x47f8800f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00005efb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00005efb)
                        (k!0 #x00005efa)
                        (k!0 #x00005ef9)
                        (k!0 #x00005ef8))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfff4bc04)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9e2f3c60)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9e2f3c63)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfff4bc07)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9e2f3c60)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfff4bc04)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x215)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x81)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (and $x45 $x12)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x61 $x112)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x224 $x158)))
 (let (($x49 (not $x58)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x72 $x145)))
 (let (($x78 (and (not $x10) $x49)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x148 $x201)))
 (let (($x34 (not $x62)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x19 $x113)))
 (let (($x36 (and (not $x65) $x34)))
 (let (($x141 (and (and (and (and (and (and $x36 $x78) $x83) $x127) $x66) $x221) $x124)))
 (let (($x189 (and $x141 $x101)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x15 (or false (or false (and (and true (or $x129 $x155)) (or $x106 $x104))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x35 (and $x13 $x189)))
 (let (($x222 (= $x35 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x156 (concat ?x126 (concat ?x136 ?x226)))))
 (let (($x183 (= input.dst.llvm-%n ?x212)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x27 (concat ?x164 (concat ?x133 ?x150)))))
 (let (($x40 (= input.dst.llvm-%x ?x147)))
 (let (($x192 (and $x40 $x183)))
 (let (($x185 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x166 (and $x185 $x192)))
 (let (($x105 (forall ((input.ind-%var842X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var842X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x118))))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var842X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var842X)))
 (=> $x76 (= ?x43 ?x134))))))))
 ))
 (let (($x168 (forall ((input.ind-%var841X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var841X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var841X) (bvult input.ind-%var841X input.dst.llvm-%n)))))
 ))
 (let (($x173 (and $x168 $x105)))
 (let (($x100 (and (and (and $x13 $x173) $x189) $x166)))
 (let (($x103 (= $x100 true)))
 (let (($x57 (forall ((input.ind-%var852X (_ BitVec 32)) )(let ((?x97 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var852X)))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var852X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var852X)))
 (=> $x76 (= ?x43 ?x97))))))
 ))
 (let (($x179 (forall ((input.ind-%var851X (_ BitVec 32)) )(let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var851X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var851X)))
 (= $x76 $x131))))
 ))
 (let (($x22 (and $x179 $x57)))
 (let (($x53 (and $x22 $x103)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x116 $x53)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x220 (and $x180 $x55)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x123 $x220)))
 (let (($x21 (=> $x92 $x222)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x215)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x81)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (and $x45 $x12)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x61 $x112)))
 (let (($x127 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x224 $x158)))
 (let (($x49 (not $x58)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x72 $x145)))
 (let (($x78 (and (not $x10) $x49)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x148 $x201)))
 (let (($x34 (not $x62)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x19 $x113)))
 (let (($x36 (and (not $x65) $x34)))
 (let (($x141 (and (and (and (and (and (and $x36 $x78) $x83) $x127) $x66) $x221) $x124)))
 (let (($x189 (and $x141 $x101)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x15 (or false (or false (and (and true (or $x129 $x155)) (or $x106 $x104))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x15)))
 (let (($x35 (and $x13 $x189)))
 (let (($x222 (= $x35 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x212 (concat ?x156 (concat ?x126 (concat ?x136 ?x226)))))
 (let (($x183 (= input.dst.llvm-%n ?x212)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x27 (concat ?x164 (concat ?x133 ?x150)))))
 (let (($x40 (= input.dst.llvm-%x ?x147)))
 (let (($x192 (and $x40 $x183)))
 (let (($x185 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x166 (and $x185 $x192)))
 (let (($x105 (forall ((input.ind-%var842X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var842X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x118))))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var842X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var842X)))
 (=> $x76 (= ?x43 ?x134))))))))
 ))
 (let (($x168 (forall ((input.ind-%var841X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var841X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var841X) (bvult input.ind-%var841X input.dst.llvm-%n)))))
 ))
 (let (($x173 (and $x168 $x105)))
 (let (($x100 (and (and (and $x13 $x173) $x189) $x166)))
 (let (($x103 (= $x100 true)))
 (let (($x57 (forall ((input.ind-%var852X (_ BitVec 32)) )(let ((?x97 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var852X)))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var852X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var852X)))
 (=> $x76 (= ?x43 ?x97))))))
 ))
 (let (($x179 (forall ((input.ind-%var851X (_ BitVec 32)) )(let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var851X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var851X)))
 (= $x76 $x131))))
 ))
 (let (($x22 (and $x179 $x57)))
 (let (($x53 (and $x22 $x103)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x116 $x53)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x220 (and $x180 $x55)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x123 $x220)))
 (let (($x21 (=> $x92 $x222)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x176 (= $x93 true)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x107 (concat ?x211 (concat ?x37 ?x165)))))
 (let (($x6 (= input.dst.llvm-%n ?x47)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x195 (concat ?x75 (concat ?x178 ?x79)))))
 (let (($x7 (= input.dst.llvm-%x ?x71)))
 (let (($x88 (and $x7 $x6)))
 (let (($x108 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x56 (and $x108 $x88)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x103)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x166)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x226)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x136 $x25)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x223 $x190)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x133 $x150)))
 (let (($x89 (not $x111)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x68 $x164)))
 (let (($x40 (and (not $x54) $x89)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x170 $x119)))
 (let (($x185 (not $x171)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x215 $x101)))
 (let (($x27 (and (not $x189) $x185)))
 (let (($x21 (and (and (and (and (and (and $x27 $x40) $x156) $x126) $x212) $x192) $x100)))
 (let (($x5 (and $x21 $x53)))
 (let (($x124 (forall ((input.ind-%var862X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var862X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x96))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var862X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var862X)))
 (=> $x76 (= ?x158 ?x221))))))))
 ))
 (let (($x182 (forall ((input.ind-%var861X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var861X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var861X) (bvult input.ind-%var861X input.dst.llvm-%n)))))
 ))
 (let (($x141 (and $x182 $x124)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x94 (or false (or false (and (and true (or $x22 $x115)) (or $x162 $x14))))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x94)))
 (let (($x174 (and (and (and $x217 $x141) $x5) $x56)))
 (let (($x157 (= $x174 true)))
 (let (($x32 (forall ((input.ind-%var872X (_ BitVec 32)) )(let ((?x104 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var872X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var872X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var872X)))
 (=> $x76 (= ?x158 ?x104))))))
 ))
 (let (($x44 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var871X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var871X)))
 (= $x76 $x87))))
 ))
 (let (($x213 (and $x44 $x32)))
 (let (($x128 (and $x213 $x157)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x180 $x128)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x91 $x160)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x123 $x153)))
 (let (($x175 (=> $x197 $x176)))
 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x93 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x176 (= $x93 true)))
 (let ((?x165 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x107 (concat ?x211 (concat ?x37 ?x165)))))
 (let (($x6 (= input.dst.llvm-%n ?x47)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x195 (concat ?x75 (concat ?x178 ?x79)))))
 (let (($x7 (= input.dst.llvm-%x ?x71)))
 (let (($x88 (and $x7 $x6)))
 (let (($x108 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x56 (and $x108 $x88)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x103)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x166)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x226 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x226)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x136 $x25)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x212 (and $x223 $x190)))
 (let (($x126 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x111 (and $x133 $x150)))
 (let (($x89 (not $x111)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x68 $x164)))
 (let (($x40 (and (not $x54) $x89)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x170 $x119)))
 (let (($x185 (not $x171)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x189 (and $x215 $x101)))
 (let (($x27 (and (not $x189) $x185)))
 (let (($x21 (and (and (and (and (and (and $x27 $x40) $x156) $x126) $x212) $x192) $x100)))
 (let (($x5 (and $x21 $x53)))
 (let (($x124 (forall ((input.ind-%var862X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var862X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x96))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var862X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var862X)))
 (=> $x76 (= ?x158 ?x221))))))))
 ))
 (let (($x182 (forall ((input.ind-%var861X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var861X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var861X) (bvult input.ind-%var861X input.dst.llvm-%n)))))
 ))
 (let (($x141 (and $x182 $x124)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x94 (or false (or false (and (and true (or $x22 $x115)) (or $x162 $x14))))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x94)))
 (let (($x174 (and (and (and $x217 $x141) $x5) $x56)))
 (let (($x157 (= $x174 true)))
 (let (($x32 (forall ((input.ind-%var872X (_ BitVec 32)) )(let ((?x104 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var872X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var872X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var872X)))
 (=> $x76 (= ?x158 ?x104))))))
 ))
 (let (($x44 (forall ((input.ind-%var871X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var871X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var871X)))
 (= $x76 $x87))))
 ))
 (let (($x213 (and $x44 $x32)))
 (let (($x128 (and $x213 $x157)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x180 $x128)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x91 $x160)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x123 $x153)))
 (let (($x175 (=> $x197 $x176)))
 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000e) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000f)
                        (k!0 #x0000000e)
                        (k!0 #x0000000d)
                        (k!0 #x0000000c))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80420404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xaea47100)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xff7bbf00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xaea47103)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80420407)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xaea47100)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80420404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xaea47102) #x7b
    (ite (= x!0 #x80420406) #x01
    (ite (= x!0 #xaea47101) #xbf
    (ite (= x!0 #xaea47103) #xff
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xaea47103)
                                     (k!6 #xaea47102)
                                     (k!6 #xaea47101)
                                     (k!6 #xaea47100))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010000 x!0)
         (ite (bvule #x00010001 x!0) #x00010001 #x00010000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 ((_ extract 15 0) input.dst.llvm-%n)))
 (let (($x132 (= (_ bv0 16) ?x62)))
 (let (($x146 (= $x132 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x140 (concat ?x64 (concat ?x145 ?x135)))))
 (let (($x82 (= input.dst.llvm-%n ?x118)))
 (let ((?x172 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x154 (concat ?x34 (concat ?x131 ?x172)))))
 (let (($x155 (= input.dst.llvm-%x ?x65)))
 (let (($x10 (and $x155 $x82)))
 (let (($x130 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x19 (and $x130 $x10)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x157)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x56)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (and $x37 $x42)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x50 $x102)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x178 $x79)))
 (let (($x67 (not $x33)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x86 $x75)))
 (let (($x7 (and (not $x90) $x67)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x38 $x120)))
 (let (($x108 (not $x199)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x103 $x53)))
 (let (($x195 (and (not $x5) $x108)))
 (let (($x175 (and (and (and (and (and (and $x195 $x7) $x107) $x211) $x47) $x88) $x174)))
 (let (($x8 (and $x175 $x128)))
 (let (($x100 (forall ((input.ind-%var898X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var898X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x226))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var898X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var898X)))
 (=> $x76 (= ?x150 ?x192))))))))
 ))
 (let (($x137 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var897X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var897X) (bvult input.ind-%var897X input.dst.llvm-%n)))))
 ))
 (let (($x21 (and $x137 $x100)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x32)))
 (let (($x105 (or false (or false (and (and true (or $x213 $x198)) (or $x163 $x57))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x134 (and (and (and $x83 $x21) $x8) $x19)))
 (let (($x113 (= $x134 true)))
 (let (($x58 (forall ((input.ind-%var908X (_ BitVec 32)) )(let ((?x14 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var908X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var908X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var908X)))
 (=> $x76 (= ?x150 ?x14))))))
 ))
 (let (($x142 (forall ((input.ind-%var907X (_ BitVec 32)) )(let (($x49 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var907X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var907X)))
 (= $x76 $x49))))
 ))
 (let (($x46 (and $x142 $x58)))
 (let (($x116 (and $x46 $x113)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x91 $x116)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x69 (and $x151 $x152)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x201 (and $x123 $x69)))
 (let (($x31 (=> $x201 $x146)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x62 ((_ extract 15 0) input.dst.llvm-%n)))
 (let (($x132 (= (_ bv0 16) ?x62)))
 (let (($x146 (= $x132 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x118 (concat ?x140 (concat ?x64 (concat ?x145 ?x135)))))
 (let (($x82 (= input.dst.llvm-%n ?x118)))
 (let ((?x172 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x154 (concat ?x34 (concat ?x131 ?x172)))))
 (let (($x155 (= input.dst.llvm-%x ?x65)))
 (let (($x10 (and $x155 $x82)))
 (let (($x130 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x19 (and $x130 $x10)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x157)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x56)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (and $x37 $x42)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x50 $x102)))
 (let (($x211 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x178 $x79)))
 (let (($x67 (not $x33)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x86 $x75)))
 (let (($x7 (and (not $x90) $x67)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x38 $x120)))
 (let (($x108 (not $x199)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x103 $x53)))
 (let (($x195 (and (not $x5) $x108)))
 (let (($x175 (and (and (and (and (and (and $x195 $x7) $x107) $x211) $x47) $x88) $x174)))
 (let (($x8 (and $x175 $x128)))
 (let (($x100 (forall ((input.ind-%var898X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var898X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x226))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var898X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var898X)))
 (=> $x76 (= ?x150 ?x192))))))))
 ))
 (let (($x137 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var897X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var897X) (bvult input.ind-%var897X input.dst.llvm-%n)))))
 ))
 (let (($x21 (and $x137 $x100)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x32)))
 (let (($x105 (or false (or false (and (and true (or $x213 $x198)) (or $x163 $x57))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x134 (and (and (and $x83 $x21) $x8) $x19)))
 (let (($x113 (= $x134 true)))
 (let (($x58 (forall ((input.ind-%var908X (_ BitVec 32)) )(let ((?x14 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var908X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var908X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var908X)))
 (=> $x76 (= ?x150 ?x14))))))
 ))
 (let (($x142 (forall ((input.ind-%var907X (_ BitVec 32)) )(let (($x49 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var907X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var907X)))
 (= $x76 $x49))))
 ))
 (let (($x46 (and $x142 $x58)))
 (let (($x116 (and $x46 $x113)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x91 $x116)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x69 (and $x151 $x152)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x201 (and $x123 $x69)))
 (let (($x31 (=> $x201 $x146)))
 (not $x31)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000a04)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002250)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000a07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002253)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000a04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002250)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00002251) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000a07)
                                   (k!0 #x40000a06)
                                   (k!0 #x40000a05)
                                   (k!0 #x40000a04))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00002253)
                        (k!0 #x00002252)
                        (k!0 #x00002251)
                        (k!0 #x00002250))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8e9d0f14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3659fe18)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xb7b7b720)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xb7fd5600)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3659fe1b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8e9d0f17)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3659fe18)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8e9d0f14)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb7fd5601) #x00
    (ite (= x!0 #x3659fe1a) #xfd
    (ite (= x!0 #x8e9d0f14) #x20
    (ite (= x!0 #xb7fd5603) #x00
    (ite (= x!0 #x3659fe19) #x56
    (ite (= x!0 #xb7fd5602) #x00
    (ite (= x!0 #xb7fd5600) #x00
    (ite (= x!0 #x3659fe18) #x00
      #xb7)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x3659fe1b)
                                     (k!6 #x3659fe1a)
                                     (k!6 #x3659fe19)
                                     (k!6 #x3659fe18))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xb7b7b720 x!0)
         (ite (bvule #xb7b7b721 x!0) #xb7b7b721 #xb7b7b720)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 ((_ extract 4 0) input.dst.llvm-%n)))
 (let (($x168 (= (_ bv0 5) ?x119)))
 (let (($x171 (= $x168 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x81 (concat ?x61 (concat ?x169 ?x115)))))
 (let (($x149 (= input.dst.llvm-%n ?x141)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x177 (concat ?x126 (concat ?x72 ?x143)))))
 (let (($x186 (= input.dst.llvm-%x ?x98)))
 (let (($x96 (and $x186 $x149)))
 (let (($x92 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x95 (and $x92 $x96)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x113)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x19)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x135)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x145 $x74)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x193 $x167)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x131 $x172)))
 (let (($x18 (not $x127)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x159 $x34)))
 (let (($x155 (and (not $x144) $x18)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x181 $x24)))
 (let (($x130 (not $x184)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x157 $x128)))
 (let (($x154 (and (not $x8) $x130)))
 (let (($x132 (and (and (and (and (and (and $x154 $x155) $x140) $x64) $x118) $x10) $x134)))
 (let (($x146 (and $x132 $x116)))
 (let (($x174 (forall ((input.ind-%var934X (_ BitVec 32)) )(let ((?x71 (bvadd (bvmul input.ind-%var934X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x165))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var934X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var934X)))
 (=> $x76 (= ?x79 ?x88))))))))
 ))
 (let (($x179 (forall ((input.ind-%var933X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var933X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var933X) (bvult input.ind-%var933X input.dst.llvm-%n)))))
 ))
 (let (($x175 (and $x179 $x174)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x124 (or false (or false (and (and true (or $x46 $x97)) (or $x15 $x32))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x44 (and (and (and $x156 $x175) $x146) $x95)))
 (let (($x45 (= $x44 true)))
 (let (($x111 (forall ((input.ind-%var944X (_ BitVec 32)) )(let ((?x57 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var944X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var944X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (=> $x76 (= ?x79 ?x57))))))
 ))
 (let (($x66 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var943X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var943X)))
 (= $x76 $x89))))
 ))
 (let (($x55 (and $x66 $x111)))
 (let (($x221 (and $x55 $x45)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x101 (and $x151 $x221)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x180 (and $x52 $x101)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x123 $x180)))
 (let (($x48 (=> $x13 $x171)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 ((_ extract 4 0) input.dst.llvm-%n)))
 (let (($x168 (= (_ bv0 5) ?x119)))
 (let (($x171 (= $x168 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x141 (concat ?x81 (concat ?x61 (concat ?x169 ?x115)))))
 (let (($x149 (= input.dst.llvm-%n ?x141)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x177 (concat ?x126 (concat ?x72 ?x143)))))
 (let (($x186 (= input.dst.llvm-%x ?x98)))
 (let (($x96 (and $x186 $x149)))
 (let (($x92 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x95 (and $x92 $x96)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x113)))
 (let ((?x19 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x19)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x135)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (and $x145 $x74)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x193 $x167)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (and $x131 $x172)))
 (let (($x18 (not $x127)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x159 $x34)))
 (let (($x155 (and (not $x144) $x18)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x181 $x24)))
 (let (($x130 (not $x184)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x157 $x128)))
 (let (($x154 (and (not $x8) $x130)))
 (let (($x132 (and (and (and (and (and (and $x154 $x155) $x140) $x64) $x118) $x10) $x134)))
 (let (($x146 (and $x132 $x116)))
 (let (($x174 (forall ((input.ind-%var934X (_ BitVec 32)) )(let ((?x71 (bvadd (bvmul input.ind-%var934X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x165))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var934X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var934X)))
 (=> $x76 (= ?x79 ?x88))))))))
 ))
 (let (($x179 (forall ((input.ind-%var933X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var933X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var933X) (bvult input.ind-%var933X input.dst.llvm-%n)))))
 ))
 (let (($x175 (and $x179 $x174)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x124 (or false (or false (and (and true (or $x46 $x97)) (or $x15 $x32))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x124)))
 (let (($x44 (and (and (and $x156 $x175) $x146) $x95)))
 (let (($x45 (= $x44 true)))
 (let (($x111 (forall ((input.ind-%var944X (_ BitVec 32)) )(let ((?x57 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var944X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var944X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (=> $x76 (= ?x79 ?x57))))))
 ))
 (let (($x66 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var943X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var943X)))
 (= $x76 $x89))))
 ))
 (let (($x55 (and $x66 $x111)))
 (let (($x221 (and $x55 $x45)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x101 (and $x151 $x221)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x180 (and $x52 $x101)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x13 (and $x123 $x180)))
 (let (($x48 (=> $x13 $x171)))
 (not $x48)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00033900)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2ffe6207)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00033903)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00033900)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00033900) #x08
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00033903)
                        (k!0 #x00033902)
                        (k!0 #x00033901)
                        (k!0 #x00033900))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xefc10948)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08000808)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xddfbda00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x639ce16f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xefc1094b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xefc10948)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xddfbda01) #x00
    (ite (= x!0 #x639ce16e) #xfb
    (ite (= x!0 #xddfbda03) #x00
    (ite (= x!0 #xefc1094a) #x00
    (ite (= x!0 #x639ce16d) #xda
    (ite (= x!0 #xddfbda02) #x00
    (ite (= x!0 #xddfbda00) #x00
    (ite (= x!0 #x639ce16f) #xdd
    (ite (= x!0 #x639ce16c) #x00
      #x08))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08000808 x!0)
         (ite (bvule #x08000809 x!0) #x08000809 #x08000808)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x182 (= (_ bv0 3) ?x120)))
 (let (($x199 (= $x182 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x166 (concat ?x223 (concat ?x11 ?x198)))))
 (let (($x35 (= input.dst.llvm-%n ?x21)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x17 (concat ?x211 (concat ?x68 ?x189)))))
 (let (($x85 (= input.dst.llvm-%x ?x161)))
 (let (($x226 (and $x85 $x35)))
 (let (($x197 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x12 (and $x197 $x226)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x45)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x95)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x169 $x23)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x36 $x224)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x72 $x143)))
 (let (($x112 (not $x106)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x87 $x126)))
 (let (($x186 (and (not $x138) $x112)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x215 $x31)))
 (let (($x92 (not $x216)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x113 $x116)))
 (let (($x177 (and (not $x146) $x92)))
 (let (($x168 (and (and (and (and (and (and $x177 $x186) $x81) $x61) $x141) $x96) $x44)))
 (let (($x171 (and $x168 $x221)))
 (let (($x134 (forall ((input.ind-%var970X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var970X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x135))))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var970X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var970X)))
 (=> $x76 (= ?x172 ?x10))))))))
 ))
 (let (($x54 (forall ((input.ind-%var969X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var969X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var969X) (bvult input.ind-%var969X input.dst.llvm-%n)))))
 ))
 (let (($x132 (and $x54 $x134)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x100 (or false (or false (and (and true (or $x55 $x104)) (or $x94 $x58))))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x142 (and (and (and $x107 $x132) $x171) $x12)))
 (let (($x136 (= $x142 true)))
 (let (($x33 (forall ((input.ind-%var980X (_ BitVec 32)) )(let ((?x32 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var980X)))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var980X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var980X)))
 (=> $x76 (= ?x172 ?x32))))))
 ))
 (let (($x212 (forall ((input.ind-%var979X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var979X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var979X)))
 (= $x76 $x67))))
 ))
 (let (($x160 (and $x212 $x33)))
 (let (($x192 (and $x160 $x136)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x52 $x192)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x77 $x53)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x217 (and $x123 $x91)))
 (let (($x78 (=> $x217 $x199)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x182 (= (_ bv0 3) ?x120)))
 (let (($x199 (= $x182 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x166 (concat ?x223 (concat ?x11 ?x198)))))
 (let (($x35 (= input.dst.llvm-%n ?x21)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x161 (concat ?x17 (concat ?x211 (concat ?x68 ?x189)))))
 (let (($x85 (= input.dst.llvm-%x ?x161)))
 (let (($x226 (and $x85 $x35)))
 (let (($x197 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x12 (and $x197 $x226)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x45)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x95)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x169 $x23)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x36 $x224)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x72 $x143)))
 (let (($x112 (not $x106)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x87 $x126)))
 (let (($x186 (and (not $x138) $x112)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (and $x215 $x31)))
 (let (($x92 (not $x216)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x113 $x116)))
 (let (($x177 (and (not $x146) $x92)))
 (let (($x168 (and (and (and (and (and (and $x177 $x186) $x81) $x61) $x141) $x96) $x44)))
 (let (($x171 (and $x168 $x221)))
 (let (($x134 (forall ((input.ind-%var970X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var970X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x135))))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var970X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var970X)))
 (=> $x76 (= ?x172 ?x10))))))))
 ))
 (let (($x54 (forall ((input.ind-%var969X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var969X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var969X) (bvult input.ind-%var969X input.dst.llvm-%n)))))
 ))
 (let (($x132 (and $x54 $x134)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x100 (or false (or false (and (and true (or $x55 $x104)) (or $x94 $x58))))))
 (let (($x107 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x142 (and (and (and $x107 $x132) $x171) $x12)))
 (let (($x136 (= $x142 true)))
 (let (($x33 (forall ((input.ind-%var980X (_ BitVec 32)) )(let ((?x32 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var980X)))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var980X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var980X)))
 (=> $x76 (= ?x172 ?x32))))))
 ))
 (let (($x212 (forall ((input.ind-%var979X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var979X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var979X)))
 (= $x76 $x67))))
 ))
 (let (($x160 (and $x212 $x33)))
 (let (($x192 (and $x160 $x136)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x52 $x192)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x77 $x53)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x217 (and $x123 $x91)))
 (let (($x78 (=> $x217 $x199)))
 (not $x78)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00033900)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2ffe6207)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00033903)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2ffe6204)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00033900)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00033900) #x02
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x2ffe6207)
                                   (k!0 #x2ffe6206)
                                   (k!0 #x2ffe6205)
                                   (k!0 #x2ffe6204))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00033903)
                        (k!0 #x00033902)
                        (k!0 #x00033901)
                        (k!0 #x00033900))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xefc10948)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04000404)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xddfbda00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x639ce16f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xefc1094b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x639ce16c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xefc10948)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xddfbda01) #x00
    (ite (= x!0 #x639ce16e) #xfb
    (ite (= x!0 #xddfbda03) #x00
    (ite (= x!0 #xefc1094a) #x00
    (ite (= x!0 #x639ce16d) #xda
    (ite (= x!0 #xddfbda02) #x00
    (ite (= x!0 #xddfbda00) #x00
    (ite (= x!0 #x639ce16f) #xdd
    (ite (= x!0 #x639ce16c) #x00
      #x04))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x639ce16f)
                                     (k!6 #x639ce16e)
                                     (k!6 #x639ce16d)
                                     (k!6 #x639ce16c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x04000404 x!0)
         (ite (bvule #x04000405 x!0) #x04000405 #x04000404)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x137 (= (_ bv0 1) ?x24)))
 (let (($x184 (= $x137 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x56 (concat ?x50 (concat ?x173 ?x97)))))
 (let (($x93 (= input.dst.llvm-%n ?x175)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x188 (concat ?x64 (concat ?x86 ?x5)))))
 (let (($x20 (= input.dst.llvm-%x ?x147)))
 (let (($x165 (and $x20 $x93)))
 (let (($x201 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x25 (and $x201 $x165)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x136)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x12)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x11 $x183)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x27 $x133)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x68 $x189)))
 (let (($x190 (not $x162)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x49 $x211)))
 (let (($x85 (and (not $x80) $x190)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x103 $x48)))
 (let (($x197 (not $x121)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x45 $x221)))
 (let (($x17 (and (not $x171) $x197)))
 (let (($x182 (and (and (and (and (and (and $x17 $x85) $x166) $x223) $x21) $x226) $x142)))
 (let (($x199 (and $x182 $x192)))
 (let (($x44 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1006X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x115))))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var1006X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1006X)))
 (=> $x76 (= ?x143 ?x96))))))))
 ))
 (let (($x90 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1005X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1005X) (bvult input.ind-%var1005X input.dst.llvm-%n)))))
 ))
 (let (($x168 (and $x90 $x44)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x174 (or false (or false (and (and true (or $x160 $x14)) (or $x105 $x111))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x66 (and (and (and $x140 $x168) $x199) $x25)))
 (let (($x37 (= $x66 true)))
 (let (($x127 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let ((?x58 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1016X)))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var1016X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1016X)))
 (=> $x76 (= ?x143 ?x58))))))
 ))
 (let (($x47 (forall ((input.ind-%var1015X (_ BitVec 32)) )(let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1015X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1015X)))
 (= $x76 $x18))))
 ))
 (let (($x152 (and $x47 $x127)))
 (let (($x88 (and $x152 $x37)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x77 $x88)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x151 (and $x122 $x128)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x123 $x151)))
 (let (($x40 (=> $x83 $x184)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x24 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x137 (= (_ bv0 1) ?x24)))
 (let (($x184 (= $x137 true)))
 (let ((?x97 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x56 (concat ?x50 (concat ?x173 ?x97)))))
 (let (($x93 (= input.dst.llvm-%n ?x175)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x147 (concat ?x188 (concat ?x64 (concat ?x86 ?x5)))))
 (let (($x20 (= input.dst.llvm-%x ?x147)))
 (let (($x165 (and $x20 $x93)))
 (let (($x201 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x25 (and $x201 $x165)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x192 (= (_ bv0 32) ?x136)))
 (let ((?x12 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x12)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x35)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (and $x11 $x183)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x27 $x133)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (and $x68 $x189)))
 (let (($x190 (not $x162)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x49 $x211)))
 (let (($x85 (and (not $x80) $x190)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (and $x103 $x48)))
 (let (($x197 (not $x121)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x45 $x221)))
 (let (($x17 (and (not $x171) $x197)))
 (let (($x182 (and (and (and (and (and (and $x17 $x85) $x166) $x223) $x21) $x226) $x142)))
 (let (($x199 (and $x182 $x192)))
 (let (($x44 (forall ((input.ind-%var1006X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1006X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x115))))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var1006X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1006X)))
 (=> $x76 (= ?x143 ?x96))))))))
 ))
 (let (($x90 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1005X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1005X) (bvult input.ind-%var1005X input.dst.llvm-%n)))))
 ))
 (let (($x168 (and $x90 $x44)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x174 (or false (or false (and (and true (or $x160 $x14)) (or $x105 $x111))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x174)))
 (let (($x66 (and (and (and $x140 $x168) $x199) $x25)))
 (let (($x37 (= $x66 true)))
 (let (($x127 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let ((?x58 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1016X)))
 (let ((?x143 (input.spec-%var-x-1.1.1 input.ind-%var1016X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1016X)))
 (=> $x76 (= ?x143 ?x58))))))
 ))
 (let (($x47 (forall ((input.ind-%var1015X (_ BitVec 32)) )(let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1015X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1015X)))
 (= $x76 $x18))))
 ))
 (let (($x152 (and $x47 $x127)))
 (let (($x88 (and $x152 $x37)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x77 $x88)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x151 (and $x122 $x128)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x83 (and $x123 $x151)))
 (let (($x40 (=> $x83 $x184)))
 (not $x40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00015200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00035104)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00015203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00035107)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00015200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00035104)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00035104) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00015203)
                                   (k!0 #x00015202)
                                   (k!0 #x00015201)
                                   (k!0 #x00015200))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00035107)
                        (k!0 #x00035106)
                        (k!0 #x00035105)
                        (k!0 #x00035104))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb5a8f714)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f141e34)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x68ffb300)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f141e37)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb5a8f717)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f141e34)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb5a8f714)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb5a8f715) #x00
    (ite (= x!0 #x6f141e36) #xff
    (ite (= x!0 #xb5a8f714) #x01
    (ite (= x!0 #x68ffb303) #x00
    (ite (= x!0 #xb5a8f717) #x00
    (ite (= x!0 #x68ffb301) #x00
    (ite (= x!0 #xb5a8f716) #x00
    (ite (= x!0 #x68ffb302) #x00
    (ite (= x!0 #x68ffb300) #x00
    (ite (= x!0 #x6f141e37) #x68
    (ite (= x!0 #x6f141e34) #x00
      #xb3))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x6f141e37)
                                     (k!6 #x6f141e36)
                                     (k!6 #x6f141e35)
                                     (k!6 #x6f141e34))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x31 (= (_ bv0 8) ?x185)))
 (let (($x179 (= $x31 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x19 (concat ?x193 (concat ?x225 ?x104)))))
 (let (($x84 (= input.dst.llvm-%n ?x132)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x191 (concat ?x61 (concat ?x159 ?x8)))))
 (let (($x148 (= input.dst.llvm-%x ?x71)))
 (let (($x135 (and $x148 $x84)))
 (let (($x13 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x42 (and $x13 $x135)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x37)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x25)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x173 $x6)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x195 $x178)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x86 $x5)))
 (let (($x102 (not $x163)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x89 $x64)))
 (let (($x20 (and (not $x41) $x102)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x157 $x78)))
 (let (($x201 (not $x220)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x136 $x192)))
 (let (($x188 (and (not $x199) $x201)))
 (let (($x137 (and (and (and (and (and (and $x188 $x20) $x56) $x50) $x175) $x165) $x66)))
 (let (($x184 (and $x137 $x88)))
 (let (($x142 (forall ((input.ind-%var1042X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var1042X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x198))))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var1042X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1042X)))
 (=> $x76 (= ?x189 ?x226))))))))
 ))
 (let (($x144 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1041X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1041X) (bvult input.ind-%var1041X input.dst.llvm-%n)))))
 ))
 (let (($x182 (and $x144 $x142)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x134 (or false (or false (and (and true (or $x152 $x57)) (or $x124 $x33))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x212 (and (and (and $x81 $x182) $x184) $x42)))
 (let (($x145 (= $x212 true)))
 (let (($x106 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1052X)))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var1052X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1052X)))
 (=> $x76 (= ?x189 ?x111))))))
 ))
 (let (($x118 (forall ((input.ind-%var1051X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1051X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1051X)))
 (= $x76 $x112))))
 ))
 (let (($x101 (and $x118 $x106)))
 (let (($x10 (and $x101 $x145)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x122 $x10)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x52 (and $x164 $x116)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x123 $x52)))
 (let (($x216 (=> $x156 $x179)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x31 (= (_ bv0 8) ?x185)))
 (let (($x179 (= $x31 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x19 (concat ?x193 (concat ?x225 ?x104)))))
 (let (($x84 (= input.dst.llvm-%n ?x132)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x71 (concat ?x191 (concat ?x61 (concat ?x159 ?x8)))))
 (let (($x148 (= input.dst.llvm-%x ?x71)))
 (let (($x135 (and $x148 $x84)))
 (let (($x13 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x42 (and $x13 $x135)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x37)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x25)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x165 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x173 $x6)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x195 $x178)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x86 $x5)))
 (let (($x102 (not $x163)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x89 $x64)))
 (let (($x20 (and (not $x41) $x102)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x157 $x78)))
 (let (($x201 (not $x220)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x136 $x192)))
 (let (($x188 (and (not $x199) $x201)))
 (let (($x137 (and (and (and (and (and (and $x188 $x20) $x56) $x50) $x175) $x165) $x66)))
 (let (($x184 (and $x137 $x88)))
 (let (($x142 (forall ((input.ind-%var1042X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var1042X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x198))))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var1042X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1042X)))
 (=> $x76 (= ?x189 ?x226))))))))
 ))
 (let (($x144 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1041X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1041X) (bvult input.ind-%var1041X input.dst.llvm-%n)))))
 ))
 (let (($x182 (and $x144 $x142)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x134 (or false (or false (and (and true (or $x152 $x57)) (or $x124 $x33))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x212 (and (and (and $x81 $x182) $x184) $x42)))
 (let (($x145 (= $x212 true)))
 (let (($x106 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1052X)))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var1052X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1052X)))
 (=> $x76 (= ?x189 ?x111))))))
 ))
 (let (($x118 (forall ((input.ind-%var1051X (_ BitVec 32)) )(let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1051X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1051X)))
 (= $x76 $x112))))
 ))
 (let (($x101 (and $x118 $x106)))
 (let (($x10 (and $x101 $x145)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x122 $x10)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x52 (and $x164 $x116)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x123 $x52)))
 (let (($x216 (=> $x156 $x179)))
 (not $x216)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x47f8800f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00005efb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x80)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00005efb)
                        (k!0 #x00005efa)
                        (k!0 #x00005ef9)
                        (k!0 #x00005ef8))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xcb17063c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf2f6e9d8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00016f6f)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xe5ed6f04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf2f6e9db)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xcb17063f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf2f6e9d8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xcb17063c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe5ed6f05) #x00
    (ite (= x!0 #xf2f6e9da) #xed
    (ite (= x!0 #xe5ed6f07) #x00
    (ite (= x!0 #xcb17063f) #x00
    (ite (= x!0 #xcb17063e) #x01
    (ite (= x!0 #xe5ed6f06) #x00
    (ite (= x!0 #xe5ed6f04) #x00
    (ite (= x!0 #xf2f6e9db) #xe5
    (ite (= x!0 #xf2f6e9d8) #x04
      #x6f))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xf2f6e9db)
                                     (k!6 #xf2f6e9da)
                                     (k!6 #xf2f6e9d9)
                                     (k!6 #xf2f6e9d8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00016f6f x!0)
         (ite (bvule #x00016f70 x!0) #x00016f70 #x00016f6f)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x121 (= (_ bv0 2) ?x54)))
 (let (($x155 (= $x121 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x168 (concat ?x72 (concat ?x149 ?x177)))))
 (let (($x115 (= input.dst.llvm-%n ?x99)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x65 (concat ?x224 (concat ?x94 ?x158)))))
 (let (($x171 (= input.dst.llvm-%x ?x170)))
 (let (($x74 (and $x171 $x115)))
 (let (($x150 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x80 (and $x150 $x74)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x145)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x42)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x225 $x82)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x154 $x131)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x159 $x8)))
 (let (($x167 (not $x15)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (and $x67 $x61)))
 (let (($x148 (and (not $x43) $x167)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x113 $x40)))
 (let (($x13 (not $x153)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x37 $x88)))
 (let (($x191 (and (not $x184) $x13)))
 (let (($x31 (and (and (and (and (and (and $x191 $x148) $x19) $x193) $x132) $x135) $x212)))
 (let (($x179 (and $x31 $x10)))
 (let (($x66 (forall ((input.ind-%var1078X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var1078X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x97))))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var1078X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1078X)))
 (=> $x76 (= ?x5 ?x165))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1077X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1077X) (bvult input.ind-%var1077X input.dst.llvm-%n)))))
 ))
 (let (($x137 (and $x138 $x66)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x44 (or false (or false (and (and true (or $x101 $x32)) (or $x100 $x127))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x169 (and (and (and $x166 $x137) $x179) $x80)))
 (let (($x96 (= $x169 true)))
 (let (($x162 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1088X)))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var1088X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1088X)))
 (=> $x76 (= ?x5 ?x33))))))
 ))
 (let (($x141 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1087X)))
 (= $x76 $x190))))
 ))
 (let (($x53 (and $x141 $x162)))
 (let (($x221 (and $x53 $x96)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x164 $x221)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x217 $x77)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x123 $x107)))
 (let (($x180 (=> $x108 $x155)))
 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x121 (= (_ bv0 2) ?x54)))
 (let (($x155 (= $x121 true)))
 (let ((?x177 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x168 (concat ?x72 (concat ?x149 ?x177)))))
 (let (($x115 (= input.dst.llvm-%n ?x99)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x65 (concat ?x224 (concat ?x94 ?x158)))))
 (let (($x171 (= input.dst.llvm-%x ?x170)))
 (let (($x74 (and $x171 $x115)))
 (let (($x150 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x80 (and $x150 $x74)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x145)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x212 (= (_ bv0 32) ?x42)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (and $x225 $x82)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x154 $x131)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x159 $x8)))
 (let (($x167 (not $x15)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (and $x67 $x61)))
 (let (($x148 (and (not $x43) $x167)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x113 $x40)))
 (let (($x13 (not $x153)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x37 $x88)))
 (let (($x191 (and (not $x184) $x13)))
 (let (($x31 (and (and (and (and (and (and $x191 $x148) $x19) $x193) $x132) $x135) $x212)))
 (let (($x179 (and $x31 $x10)))
 (let (($x66 (forall ((input.ind-%var1078X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var1078X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x97))))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var1078X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1078X)))
 (=> $x76 (= ?x5 ?x165))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1077X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1077X) (bvult input.ind-%var1077X input.dst.llvm-%n)))))
 ))
 (let (($x137 (and $x138 $x66)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x44 (or false (or false (and (and true (or $x101 $x32)) (or $x100 $x127))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x169 (and (and (and $x166 $x137) $x179) $x80)))
 (let (($x96 (= $x169 true)))
 (let (($x162 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1088X)))
 (let ((?x5 (input.spec-%var-x-1.1.1 input.ind-%var1088X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1088X)))
 (=> $x76 (= ?x5 ?x33))))))
 ))
 (let (($x141 (forall ((input.ind-%var1087X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1087X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1087X)))
 (= $x76 $x190))))
 ))
 (let (($x53 (and $x141 $x162)))
 (let (($x221 (and $x53 $x96)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x77 (and $x164 $x221)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x217 $x77)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x123 $x107)))
 (let (($x180 (=> $x108 $x155)))
 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x90 (= $x78 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x12 (concat ?x27 (concat ?x176 ?x57)))))
 (let (($x63 (= input.dst.llvm-%n ?x182)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x22 (concat ?x50 (concat ?x49 ?x14)))))
 (let (($x38 (= input.dst.llvm-%x ?x98)))
 (let (($x198 (and $x38 $x63)))
 (let (($x83 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x23 (and $x83 $x198)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x96)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x80)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x177)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x149 $x211)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x222 $x119)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x94 $x158)))
 (let (($x197 (not $x18)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x223 $x224)))
 (let (($x171 (and (not $x87) $x197)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x47 $x216)))
 (let (($x150 (not $x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x145 $x10)))
 (let (($x65 (and (not $x179) $x150)))
 (let (($x121 (and (and (and (and (and (and $x65 $x171) $x168) $x72) $x99) $x74) $x169)))
 (let (($x155 (and $x121 $x221)))
 (let (($x212 (forall ((input.ind-%var1098X (_ BitVec 32)) )(let ((?x71 (bvadd (bvmul input.ind-%var1098X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x104))))
 (let ((?x8 (input.spec-%var-x-1.1.1 input.ind-%var1098X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1098X)))
 (=> $x76 (= ?x8 ?x135))))))))
 ))
 (let (($x45 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1097X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1097X) (bvult input.ind-%var1097X input.dst.llvm-%n)))))
 ))
 (let (($x31 (and $x45 $x212)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x142 (or false (or false (and (and true (or $x53 $x58)) (or $x174 $x106))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x142)))
 (let (($x118 (and (and (and $x56 $x31) $x155) $x23)))
 (let (($x11 (= $x118 true)))
 (let (($x163 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let ((?x127 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1108X)))
 (let ((?x8 (input.spec-%var-x-1.1.1 input.ind-%var1108X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1108X)))
 (=> $x76 (= ?x8 ?x127))))))
 ))
 (let (($x21 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x102 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1107X)))
 (= $x76 $x102))))
 ))
 (let (($x128 (and $x21 $x163)))
 (let (($x226 (and $x128 $x11)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x217 $x226)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x122 (and $x34 $x192)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x123 $x122)))
 (let (($x220 (=> $x140 $x90)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x78 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x90 (= $x78 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x12 (concat ?x27 (concat ?x176 ?x57)))))
 (let (($x63 (= input.dst.llvm-%n ?x182)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x49 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x22 (concat ?x50 (concat ?x49 ?x14)))))
 (let (($x38 (= input.dst.llvm-%x ?x98)))
 (let (($x198 (and $x38 $x63)))
 (let (($x83 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x23 (and $x83 $x198)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x96)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x80)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x177)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (and $x149 $x211)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x222 $x119)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x94 $x158)))
 (let (($x197 (not $x18)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x223 $x224)))
 (let (($x171 (and (not $x87) $x197)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x47 $x216)))
 (let (($x150 (not $x7)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x145 $x10)))
 (let (($x65 (and (not $x179) $x150)))
 (let (($x121 (and (and (and (and (and (and $x65 $x171) $x168) $x72) $x99) $x74) $x169)))
 (let (($x155 (and $x121 $x221)))
 (let (($x212 (forall ((input.ind-%var1098X (_ BitVec 32)) )(let ((?x71 (bvadd (bvmul input.ind-%var1098X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv1 32))) (select input.dst.llvm-mem ?x71))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x71 (_ bv2 32))) ?x104))))
 (let ((?x8 (input.spec-%var-x-1.1.1 input.ind-%var1098X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1098X)))
 (=> $x76 (= ?x8 ?x135))))))))
 ))
 (let (($x45 (forall ((input.ind-%var1097X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1097X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1097X) (bvult input.ind-%var1097X input.dst.llvm-%n)))))
 ))
 (let (($x31 (and $x45 $x212)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x162 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x162)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x162)))
 (let (($x142 (or false (or false (and (and true (or $x53 $x58)) (or $x174 $x106))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x142)))
 (let (($x118 (and (and (and $x56 $x31) $x155) $x23)))
 (let (($x11 (= $x118 true)))
 (let (($x163 (forall ((input.ind-%var1108X (_ BitVec 32)) )(let ((?x127 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1108X)))
 (let ((?x8 (input.spec-%var-x-1.1.1 input.ind-%var1108X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1108X)))
 (=> $x76 (= ?x8 ?x127))))))
 ))
 (let (($x21 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let (($x102 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1107X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1107X)))
 (= $x76 $x102))))
 ))
 (let (($x128 (and $x21 $x163)))
 (let (($x226 (and $x128 $x11)))
 (let (($x217 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x217 $x226)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x122 (and $x34 $x192)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x140 (and $x123 $x122)))
 (let (($x220 (=> $x140 $x90)))
 (not $x220))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000b)
                        (k!0 #x0000000a)
                        (k!0 #x00000009)
                        (k!0 #x00000008))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x34990b00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x34810b0c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xff9fee00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x34810b0f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x34990b03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x34810b0c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x34990b00)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x34990b01) #xff
    (ite (= x!0 #x34990b00) #xff
    (ite (= x!0 #xff9fee03) #x00
    (ite (= x!0 #x34990b03) #xff
    (ite (= x!0 #xff9fee01) #x00
    (ite (= x!0 #x34990b02) #xff
    (ite (= x!0 #x34810b0d) #xee
    (ite (= x!0 #xff9fee02) #x00
    (ite (= x!0 #xff9fee00) #x00
    (ite (= x!0 #x34810b0f) #xff
    (ite (= x!0 #x34810b0c) #x00
      #x9f))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x34810b0f)
                                     (k!6 #x34810b0e)
                                     (k!6 #x34810b0d)
                                     (k!6 #x34810b0c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x144 (= $x40 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x137 (concat ?x86 (concat ?x93 ?x188)))))
 (let (($x97 (= input.dst.llvm-%n ?x70)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x161 (concat ?x178 (concat ?x124 ?x79)))))
 (let (($x184 (= input.dst.llvm-%x ?x181)))
 (let (($x183 (and $x184 $x97)))
 (let (($x172 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x43 (and $x172 $x183)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x11)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x23)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x176 $x35)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x17 $x68)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x49 $x14)))
 (let (($x133 (not $x105)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x112 $x50)))
 (let (($x38 (and (not $x146) $x133)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x136 $x180)))
 (let (($x83 (not $x69)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x96 $x221)))
 (let (($x22 (and (not $x155) $x83)))
 (let (($x90 (and (and (and (and (and (and $x22 $x38) $x12) $x27) $x182) $x198) $x118)))
 (let (($x220 (and $x90 $x226)))
 (let (($x169 (forall ((input.ind-%var1134X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var1134X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x177))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1134X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1134X)))
 (=> $x76 (= ?x158 ?x74))))))))
 ))
 (let (($x41 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1133X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1133X) (bvult input.ind-%var1133X input.dst.llvm-%n)))))
 ))
 (let (($x121 (and $x41 $x169)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x66 (or false (or false (and (and true (or $x128 $x111)) (or $x134 $x162))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x173 (and (and (and $x19 $x121) $x220) $x43)))
 (let (($x165 (= $x173 true)))
 (let (($x15 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let ((?x106 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1144X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1144X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1144X)))
 (=> $x76 (= ?x158 ?x106))))))
 ))
 (let (($x175 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1143X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1143X)))
 (= $x76 $x167))))
 ))
 (let (($x116 (and $x175 $x15)))
 (let (($x88 (and $x116 $x165)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x34 $x88)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x81 (and $x126 $x164)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x123 $x81)))
 (let (($x153 (=> $x92 $x144)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x40 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x144 (= $x40 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x137 (concat ?x86 (concat ?x93 ?x188)))))
 (let (($x97 (= input.dst.llvm-%n ?x70)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x161 (concat ?x178 (concat ?x124 ?x79)))))
 (let (($x184 (= input.dst.llvm-%x ?x181)))
 (let (($x183 (and $x184 $x97)))
 (let (($x172 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x43 (and $x172 $x183)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x11)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x23)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x176 $x35)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x182 (and $x17 $x68)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x49 $x14)))
 (let (($x133 (not $x105)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x112 $x50)))
 (let (($x38 (and (not $x146) $x133)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x69 (and $x136 $x180)))
 (let (($x83 (not $x69)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (and $x96 $x221)))
 (let (($x22 (and (not $x155) $x83)))
 (let (($x90 (and (and (and (and (and (and $x22 $x38) $x12) $x27) $x182) $x198) $x118)))
 (let (($x220 (and $x90 $x226)))
 (let (($x169 (forall ((input.ind-%var1134X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var1134X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x177))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1134X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1134X)))
 (=> $x76 (= ?x158 ?x74))))))))
 ))
 (let (($x41 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1133X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1133X) (bvult input.ind-%var1133X input.dst.llvm-%n)))))
 ))
 (let (($x121 (and $x41 $x169)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x66 (or false (or false (and (and true (or $x128 $x111)) (or $x134 $x162))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x173 (and (and (and $x19 $x121) $x220) $x43)))
 (let (($x165 (= $x173 true)))
 (let (($x15 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let ((?x106 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1144X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var1144X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1144X)))
 (=> $x76 (= ?x158 ?x106))))))
 ))
 (let (($x175 (forall ((input.ind-%var1143X (_ BitVec 32)) )(let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1143X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1143X)))
 (= $x76 $x167))))
 ))
 (let (($x116 (and $x175 $x15)))
 (let (($x88 (and $x116 $x165)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x34 $x88)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x81 (and $x126 $x164)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x123 $x81)))
 (let (($x153 (=> $x92 $x144)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1174X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x57))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1174X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1174X)))
 (=> $x76 (= ?x14 ?x198))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1173X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1173X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1173X) (bvult input.ind-%var1173X (_ bv0 32))))))
 ))
 (let (($x117 (and $x204 $x114)))
 (let (($x26 (= $x117 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x75 (concat ?x185 (concat ?x224 ?x95)))))
 (let (($x6 (= input.dst.llvm-%n ?x104)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x215 (concat ?x150 (concat ?x102 ?x67)))))
 (let (($x58 (= input.dst.llvm-%x ?x179)))
 (let (($x87 (and $x58 $x6)))
 (let (($x32 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x145 (and $x32 $x87)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x165)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x43)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (and $x93 $x61)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x62 $x24)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (and $x124 $x79)))
 (let (($x13 (not $x190)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x193 $x178)))
 (let (($x184 (and (not $x89) $x13)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x141 $x186)))
 (let (($x172 (not $x156)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x11 $x226)))
 (let (($x161 (and (not $x220) $x172)))
 (let (($x153 (and (and (and (and (and (and $x161 $x184) $x137) $x86) $x70) $x183) $x173)))
 (let (($x85 (and $x153 $x88)))
 (let (($x118 (forall ((input.ind-%var1154X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1154X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x57))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1154X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1154X)))
 (=> $x76 (= ?x14 ?x198))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1153X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1153X) (bvult input.ind-%var1153X input.dst.llvm-%n)))))
 ))
 (let (($x90 (and $x37 $x118)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x212 (or false (or false (and (and true (or $x116 $x33)) (or $x44 $x163))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x135 (and (and (and $x168 $x90) $x85) $x145)))
 (let (($x10 (= $x135 true)))
 (let (($x18 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let ((?x162 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1164X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1164X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1164X)))
 (=> $x76 (= ?x14 ?x162))))))
 ))
 (let (($x132 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x197 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1163X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1163X)))
 (= $x76 $x197))))
 ))
 (let (($x77 (and $x132 $x18)))
 (let (($x217 (and $x77 $x10)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x126 $x217)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x129 (and $x36 $x166)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x123 $x129)))
 (let (($x73 (=> $x216 $x26)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1174X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x57))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1174X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1174X)))
 (=> $x76 (= ?x14 ?x198))))))))
 ))
 (let (($x204 (forall ((input.ind-%var1173X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1173X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1173X) (bvult input.ind-%var1173X (_ bv0 32))))))
 ))
 (let (($x117 (and $x204 $x114)))
 (let (($x26 (= $x117 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x75 (concat ?x185 (concat ?x224 ?x95)))))
 (let (($x6 (= input.dst.llvm-%n ?x104)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x215 (concat ?x150 (concat ?x102 ?x67)))))
 (let (($x58 (= input.dst.llvm-%x ?x179)))
 (let (($x87 (and $x58 $x6)))
 (let (($x32 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x145 (and $x32 $x87)))
 (let ((?x165 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x165)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x43)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (and $x93 $x61)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x62 $x24)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (and $x124 $x79)))
 (let (($x13 (not $x190)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x193 $x178)))
 (let (($x184 (and (not $x89) $x13)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (and $x141 $x186)))
 (let (($x172 (not $x156)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x11 $x226)))
 (let (($x161 (and (not $x220) $x172)))
 (let (($x153 (and (and (and (and (and (and $x161 $x184) $x137) $x86) $x70) $x183) $x173)))
 (let (($x85 (and $x153 $x88)))
 (let (($x118 (forall ((input.ind-%var1154X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var1154X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x57))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1154X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1154X)))
 (=> $x76 (= ?x14 ?x198))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1153X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1153X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1153X) (bvult input.ind-%var1153X input.dst.llvm-%n)))))
 ))
 (let (($x90 (and $x37 $x118)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x212 (or false (or false (and (and true (or $x116 $x33)) (or $x44 $x163))))))
 (let (($x168 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x212)))
 (let (($x135 (and (and (and $x168 $x90) $x85) $x145)))
 (let (($x10 (= $x135 true)))
 (let (($x18 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let ((?x162 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1164X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1164X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1164X)))
 (=> $x76 (= ?x14 ?x162))))))
 ))
 (let (($x132 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x197 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1163X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1163X)))
 (= $x76 $x197))))
 ))
 (let (($x77 (and $x132 $x18)))
 (let (($x217 (and $x77 $x10)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x166 (and $x126 $x217)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x129 (and $x36 $x166)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x216 (and $x123 $x129)))
 (let (($x73 (=> $x216 $x26)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var1174X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var1173X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var1174X!1 () (_ BitVec 32)
    #x140cc320)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18404004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x905c8540)
  (define-fun input.ind-%var1173X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10250021)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x2c883140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x905c8543)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18404007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18404004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x18404005) #x00
    (ite (= x!0 #x905c8542) #x88
    (ite (= x!0 #x18404004) #x21
    (ite (= x!0 #x2c883142) #x00
    (ite (= x!0 #x2c883140) #x00
    (ite (= x!0 #x2c883143) #x00
    (ite (= x!0 #x18404006) #x25
    (ite (= x!0 #x905c8541) #x31
    (ite (= x!0 #x2c883141) #x00
    (ite (= x!0 #x905c8543) #x2c
    (ite (= x!0 #x905c8540) #x40
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x10250021 x!0)
         (ite (bvule #x10250022 x!0)
              (ite (bvule #x140cc320 x!0) #x140cc320 #x10250022)
              #x10250021)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x140cc320) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var1220X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x188))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1220X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1220X)))
 (=> $x76 (= ?x79 ?x183))))))))
 ))
 (let (($x214 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1219X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1219X) (bvult input.ind-%var1219X input.dst.llvm-%x)))))
 ))
 (let (($x30 (and $x214 $x91)))
 (let (($x29 (= $x30 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x50 (concat ?x65 (concat ?x122 ?x71)))))
 (let (($x94 (= input.dst.llvm-%n ?x222)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x27 (concat ?x223 (concat ?x189 ?x28)))))
 (let (($x83 (= input.dst.llvm-%x ?x119)))
 (let (($x54 (and $x83 $x94)))
 (let (($x26 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x80 (and $x26 $x54)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x10)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x145)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x224 $x154)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x84 $x42)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x102 $x67)))
 (let (($x46 (not $x72)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x131 $x150)))
 (let (($x58 (and (not $x100) $x46)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x225 $x108)))
 (let (($x32 (not $x143)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x165 $x88)))
 (let (($x215 (and (not $x85) $x32)))
 (let (($x9 (and (and (and (and (and (and $x215 $x58) $x75) $x185) $x104) $x87) $x135)))
 (let (($x204 (and $x9 $x217)))
 (let (($x173 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var1200X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x188))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1200X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1200X)))
 (=> $x76 (= ?x79 ?x183))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1199X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1199X) (bvult input.ind-%var1199X input.dst.llvm-%n)))))
 ))
 (let (($x153 (and $x21 $x173)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x169 (or false (or false (and (and true (or $x77 $x127)) (or $x142 $x15))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x177 (and (and (and $x12 $x153) $x204) $x80)))
 (let (($x82 (= $x177 true)))
 (let (($x105 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let ((?x163 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1210X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1210X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1210X)))
 (=> $x76 (= ?x79 ?x163))))))
 ))
 (let (($x99 (forall ((input.ind-%var1209X (_ BitVec 32)) )(let (($x133 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1209X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1209X)))
 (= $x76 $x133))))
 ))
 (let (($x192 (and $x99 $x105)))
 (let (($x146 (and $x192 $x82)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x96 (and $x36 $x146)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x64 $x96)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x149 (and $x123 $x175)))
 (let (($x110 (=> $x149 $x29)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x91 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var1220X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x188))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1220X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1220X)))
 (=> $x76 (= ?x79 ?x183))))))))
 ))
 (let (($x214 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1219X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1219X) (bvult input.ind-%var1219X input.dst.llvm-%x)))))
 ))
 (let (($x30 (and $x214 $x91)))
 (let (($x29 (= $x30 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x50 (concat ?x65 (concat ?x122 ?x71)))))
 (let (($x94 (= input.dst.llvm-%n ?x222)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x119 (concat ?x27 (concat ?x223 (concat ?x189 ?x28)))))
 (let (($x83 (= input.dst.llvm-%x ?x119)))
 (let (($x54 (and $x83 $x94)))
 (let (($x26 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x80 (and $x26 $x54)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x10)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x145)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x224 $x154)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x84 $x42)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x102 $x67)))
 (let (($x46 (not $x72)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x131 $x150)))
 (let (($x58 (and (not $x100) $x46)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x225 $x108)))
 (let (($x32 (not $x143)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x165 $x88)))
 (let (($x215 (and (not $x85) $x32)))
 (let (($x9 (and (and (and (and (and (and $x215 $x58) $x75) $x185) $x104) $x87) $x135)))
 (let (($x204 (and $x9 $x217)))
 (let (($x173 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let ((?x181 (bvadd (bvmul input.ind-%var1200X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x188))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1200X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1200X)))
 (=> $x76 (= ?x79 ?x183))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1199X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1199X) (bvult input.ind-%var1199X input.dst.llvm-%n)))))
 ))
 (let (($x153 (and $x21 $x173)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x169 (or false (or false (and (and true (or $x77 $x127)) (or $x142 $x15))))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x169)))
 (let (($x177 (and (and (and $x12 $x153) $x204) $x80)))
 (let (($x82 (= $x177 true)))
 (let (($x105 (forall ((input.ind-%var1210X (_ BitVec 32)) )(let ((?x163 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1210X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1210X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1210X)))
 (=> $x76 (= ?x79 ?x163))))))
 ))
 (let (($x99 (forall ((input.ind-%var1209X (_ BitVec 32)) )(let (($x133 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1209X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1209X)))
 (= $x76 $x133))))
 ))
 (let (($x192 (and $x99 $x105)))
 (let (($x146 (and $x192 $x82)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x96 (and $x36 $x146)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x64 $x96)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x149 (and $x123 $x175)))
 (let (($x110 (=> $x149 $x29)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8ba21b14)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var1219X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var1220X!1 () (_ BitVec 32)
    #x0112011b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe0800a2c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x01000140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8ba21b17)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe0800a2f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8ba21b14)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe0800a2c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x8ba21b17) #x01
    (ite (= x!0 #x8ba21b14) #x40
    (ite (= x!0 #x8ba21b15) #x01
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0112011b) false
      (not (bvule (concat (k!2 #xe0800a2f)
                          (k!2 #xe0800a2e)
                          (k!2 #xe0800a2d)
                          (k!2 #xe0800a2c))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x8ba21b17)
                                   (k!2 #x8ba21b16)
                                   (k!2 #x8ba21b15)
                                   (k!2 #x8ba21b14))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0112011b) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var1219X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xeaee57bc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x207ffdf8)
  (define-fun input.ind-%var1220X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7f38a1fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x207ffdfb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xeaee57bf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x207ffdf8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xeaee57bc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7f38a1fc) #x00
    (ite (= x!0 #x207ffdfa) #x38
    (ite (= x!0 #xeaee57bd) #x00
    (ite (= x!0 #xeaee57bc) #x00
    (ite (= x!0 #x7f38a1ff) #x00
    (ite (= x!0 #xeaee57bf) #x00
    (ite (= x!0 #xeaee57be) #x00
    (ite (= x!0 #x207ffdf9) #xa1
    (ite (= x!0 #x7f38a1fe) #x00
    (ite (= x!0 #x207ffdfb) #x7f
    (ite (= x!0 #x207ffdf8) #xfc
      #x40))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x207ffdfb)
                                     (k!2 #x207ffdfa)
                                     (k!2 #x207ffdf9)
                                     (k!2 #x207ffdf8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (forall ((input.ind-%var1266X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var1266X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x95))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1266X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1266X)))
 (=> $x76 (= ?x67 ?x87))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1265X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1265X) (bvult input.ind-%var1265X (_ bv0 32))))))
 ))
 (let (($x7 (and $x52 $x180)))
 (let (($x20 (= $x7 true)))
 (let ((?x170 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x178 (concat ?x22 (concat ?x81 ?x170)))))
 (let (($x49 (= input.dst.llvm-%n ?x17)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x86 (concat ?x112 (concat ?x5 ?x107)))))
 (let (($x172 (= input.dst.llvm-%x ?x68)))
 (let (($x78 (and $x172 $x49)))
 (let (($x29 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x23 (and $x29 $x78)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x82)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x80)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (and $x122 $x155)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x103 $x120)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x189 $x28)))
 (let (($x174 (not $x191)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x199 $x223)))
 (let (($x83 (and (not $x140) $x174)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x48 $x114)))
 (let (($x26 (not $x117)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x10 $x217)))
 (let (($x27 (and (not $x204) $x26)))
 (let (($x148 (and (and (and (and (and (and $x27 $x83) $x50) $x65) $x222) $x54) $x177)))
 (let (($x214 (and $x148 $x146)))
 (let (($x135 (forall ((input.ind-%var1246X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var1246X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x95))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1246X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1246X)))
 (=> $x76 (= ?x67 ?x87))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1245X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1245X) (bvult input.ind-%var1245X input.dst.llvm-%n)))))
 ))
 (let (($x9 (and $x121 $x135)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x118 (or false (or false (and (and true (or $x192 $x106)) (or $x66 $x18))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x57 (and (and (and $x137 $x9) $x214) $x23)))
 (let (($x211 (= $x57 true)))
 (let (($x190 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1256X)))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1256X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1256X)))
 (=> $x76 (= ?x67 ?x15))))))
 ))
 (let (($x182 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1255X)))
 (= $x76 $x13))))
 ))
 (let (($x164 (and $x182 $x190)))
 (let (($x89 (and $x164 $x211)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x64 $x89)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x132 (and $x195 $x11)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x123 $x132)))
 (let (($x151 (=> $x176 $x20)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (forall ((input.ind-%var1266X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var1266X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x95))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1266X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1266X)))
 (=> $x76 (= ?x67 ?x87))))))))
 ))
 (let (($x52 (forall ((input.ind-%var1265X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1265X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1265X) (bvult input.ind-%var1265X (_ bv0 32))))))
 ))
 (let (($x7 (and $x52 $x180)))
 (let (($x20 (= $x7 true)))
 (let ((?x170 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x178 (concat ?x22 (concat ?x81 ?x170)))))
 (let (($x49 (= input.dst.llvm-%n ?x17)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x86 (concat ?x112 (concat ?x5 ?x107)))))
 (let (($x172 (= input.dst.llvm-%x ?x68)))
 (let (($x78 (and $x172 $x49)))
 (let (($x29 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x23 (and $x29 $x78)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x146 (= (_ bv0 32) ?x82)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x177 (= (_ bv0 32) ?x80)))
 (let ((?x94 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x94)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (and $x122 $x155)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x103 $x120)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x189 $x28)))
 (let (($x174 (not $x191)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x199 $x223)))
 (let (($x83 (and (not $x140) $x174)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x48 $x114)))
 (let (($x26 (not $x117)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x10 $x217)))
 (let (($x27 (and (not $x204) $x26)))
 (let (($x148 (and (and (and (and (and (and $x27 $x83) $x50) $x65) $x222) $x54) $x177)))
 (let (($x214 (and $x148 $x146)))
 (let (($x135 (forall ((input.ind-%var1246X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var1246X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x95))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1246X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1246X)))
 (=> $x76 (= ?x67 ?x87))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1245X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1245X) (bvult input.ind-%var1245X input.dst.llvm-%n)))))
 ))
 (let (($x9 (and $x121 $x135)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x118 (or false (or false (and (and true (or $x192 $x106)) (or $x66 $x18))))))
 (let (($x137 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x57 (and (and (and $x137 $x9) $x214) $x23)))
 (let (($x211 (= $x57 true)))
 (let (($x190 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let ((?x15 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1256X)))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var1256X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1256X)))
 (=> $x76 (= ?x67 ?x15))))))
 ))
 (let (($x182 (forall ((input.ind-%var1255X (_ BitVec 32)) )(let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1255X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1255X)))
 (= $x76 $x13))))
 ))
 (let (($x164 (and $x182 $x190)))
 (let (($x89 (and $x164 $x211)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x64 $x89)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x132 (and $x195 $x11)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x123 $x132)))
 (let (($x151 (=> $x176 $x20)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var1265X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var1266X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000043)
                                     (k!2 #x00000042)
                                     (k!2 #x00000041)
                                     (k!2 #x00000040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var1265X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18404004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x905c8540)
  (define-fun input.ind-%var1266X!1 () (_ BitVec 32)
    #x140cc320)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10250021)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x2c883140)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x905c8543)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18404007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x905c8540)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18404004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x18404005) #x00
    (ite (= x!0 #x905c8542) #x88
    (ite (= x!0 #x18404004) #x21
    (ite (= x!0 #x2c883143) #x00
    (ite (= x!0 #x2c883142) #x00
    (ite (= x!0 #x2c883141) #x00
    (ite (= x!0 #x18404006) #x25
    (ite (= x!0 #x905c8541) #x31
    (ite (= x!0 #x2c883140) #x00
    (ite (= x!0 #x905c8543) #x2c
    (ite (= x!0 #x905c8540) #x40
      #x10))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x905c8543)
                                     (k!2 #x905c8542)
                                     (k!2 #x905c8541)
                                     (k!2 #x905c8540))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x10250021 x!0)
         (ite (bvule #x10250022 x!0)
              (ite (bvule #x140cc320 x!0) #x140cc320 #x10250022)
              #x10250021)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x140cc320) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul input.ind-%var1312X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x71))))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var1312X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1312X)))
 (=> $x76 (= ?x28 ?x54))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1311X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1311X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1311X) (bvult input.ind-%var1311X input.dst.llvm-%n)))))
 ))
 (let (($x226 (and $x37 $x139)))
 (let (($x213 (= $x226 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x150 (concat ?x161 (concat ?x129 ?x98)))))
 (let (($x124 (= input.dst.llvm-%n ?x62)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x185 (concat ?x193 (concat ?x8 ?x16)))))
 (let (($x32 (= input.dst.llvm-%x ?x24)))
 (let (($x144 (and $x32 $x124)))
 (let (($x20 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x43 (and $x20 $x144)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x211)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x23)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x81 $x220)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x157 $x25)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x5 $x107)))
 (let (($x134 (not $x55)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x73 $x112)))
 (let (($x172 (and (not $x92) $x134)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x130 $x91)))
 (let (($x29 (not $x30)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x82 $x146)))
 (let (($x86 (and (not $x214) $x29)))
 (let (($x171 (and (and (and (and (and (and $x86 $x172) $x178) $x22) $x17) $x78) $x57)))
 (let (($x52 (and $x171 $x89)))
 (let (($x177 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul input.ind-%var1292X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x71))))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var1292X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1292X)))
 (=> $x76 (= ?x28 ?x54))))))))
 ))
 (let (($x90 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1291X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1291X) (bvult input.ind-%var1291X input.dst.llvm-%n)))))
 ))
 (let (($x148 (and $x90 $x177)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x173 (or false (or false (and (and true (or $x164 $x162)) (or $x212 $x105))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x173)))
 (let (($x188 (and (and (and $x75 $x148) $x52) $x43)))
 (let (($x35 (= $x188 true)))
 (let (($x72 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let ((?x18 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1302X)))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var1302X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1302X)))
 (=> $x76 (= ?x28 ?x18))))))
 ))
 (let (($x70 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1301X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1301X)))
 (= $x76 $x46))))
 ))
 (let (($x166 (and $x70 $x72)))
 (let (($x100 (and $x166 $x35)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x165 (and $x195 $x100)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x99 (and $x159 $x165)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x93 (and $x123 $x99)))
 (let (($x186 (=> $x93 $x213)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x139 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul input.ind-%var1312X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x71))))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var1312X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1312X)))
 (=> $x76 (= ?x28 ?x54))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1311X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1311X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1311X) (bvult input.ind-%var1311X input.dst.llvm-%n)))))
 ))
 (let (($x226 (and $x37 $x139)))
 (let (($x213 (= $x226 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x150 (concat ?x161 (concat ?x129 ?x98)))))
 (let (($x124 (= input.dst.llvm-%n ?x62)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x185 (concat ?x193 (concat ?x8 ?x16)))))
 (let (($x32 (= input.dst.llvm-%x ?x24)))
 (let (($x144 (and $x32 $x124)))
 (let (($x20 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x43 (and $x20 $x144)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x211)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x23)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x49)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x81 $x220)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x157 $x25)))
 (let (($x22 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x5 $x107)))
 (let (($x134 (not $x55)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x73 $x112)))
 (let (($x172 (and (not $x92) $x134)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x130 $x91)))
 (let (($x29 (not $x30)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x214 (and $x82 $x146)))
 (let (($x86 (and (not $x214) $x29)))
 (let (($x171 (and (and (and (and (and (and $x86 $x172) $x178) $x22) $x17) $x78) $x57)))
 (let (($x52 (and $x171 $x89)))
 (let (($x177 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul input.ind-%var1292X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x71))))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var1292X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1292X)))
 (=> $x76 (= ?x28 ?x54))))))))
 ))
 (let (($x90 (forall ((input.ind-%var1291X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1291X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1291X) (bvult input.ind-%var1291X input.dst.llvm-%n)))))
 ))
 (let (($x148 (and $x90 $x177)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x212 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x162 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x173 (or false (or false (and (and true (or $x164 $x162)) (or $x212 $x105))))))
 (let (($x75 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x173)))
 (let (($x188 (and (and (and $x75 $x148) $x52) $x43)))
 (let (($x35 (= $x188 true)))
 (let (($x72 (forall ((input.ind-%var1302X (_ BitVec 32)) )(let ((?x18 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1302X)))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var1302X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1302X)))
 (=> $x76 (= ?x28 ?x18))))))
 ))
 (let (($x70 (forall ((input.ind-%var1301X (_ BitVec 32)) )(let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1301X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1301X)))
 (= $x76 $x46))))
 ))
 (let (($x166 (and $x70 $x72)))
 (let (($x100 (and $x166 $x35)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x165 (and $x195 $x100)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x99 (and $x159 $x165)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x93 (and $x123 $x99)))
 (let (($x186 (=> $x93 $x213)))
 (not $x186))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (= false true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x60 (concat ?x223 (concat ?x215 ?x204)))))
 (let (($x9 (= input.dst.llvm-%n ?x145)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x101 (concat ?x65 (concat ?x131 ?x152)))))
 (let (($x47 (= input.dst.llvm-%x ?x181)))
 (let (($x187 (and $x47 $x9)))
 (let (($x149 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x95 (and $x149 $x187)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x35)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x43)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x129 $x85)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x113 $x31)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x8 $x16)))
 (let (($x44 (not $x160)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x110 $x193)))
 (let (($x32 (and (not $x216) $x44)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x40 $x180)))
 (let (($x20 (not $x7)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x211 $x89)))
 (let (($x185 (and (not $x52) $x20)))
 (let (($x226 (and (and (and (and (and (and $x185 $x32) $x150) $x161) $x62) $x144) $x188)))
 (let (($x213 (and $x226 $x100)))
 (let (($x57 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var1322X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x170))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1322X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1322X)))
 (=> $x76 (= ?x107 ?x78))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1321X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1321X) (bvult input.ind-%var1321X input.dst.llvm-%n)))))
 ))
 (let (($x171 (and $x153 $x57)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x135 (or false (or false (and (and true (or $x166 $x163)) (or $x169 $x190))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x10 (and (and (and $x50 $x171) $x213) $x95)))
 (let (($x182 (= $x10 true)))
 (let (($x191 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let ((?x105 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1332X)))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1332X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1332X)))
 (=> $x76 (= ?x107 ?x105))))))
 ))
 (let (($x104 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1331X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1331X)))
 (= $x76 $x174))))
 ))
 (let (($x96 (and $x104 $x191)))
 (let (($x224 (and $x96 $x182)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x159 $x224)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x217 (and $x111 $x87)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x123 $x217)))
 (let (($x167 (=> $x64 $x12)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (= false true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x60 (concat ?x223 (concat ?x215 ?x204)))))
 (let (($x9 (= input.dst.llvm-%n ?x145)))
 (let ((?x152 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x181 (concat ?x101 (concat ?x65 (concat ?x131 ?x152)))))
 (let (($x47 (= input.dst.llvm-%x ?x181)))
 (let (($x187 (and $x47 $x9)))
 (let (($x149 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x95 (and $x149 $x187)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x35)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x43)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x129 $x85)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x113 $x31)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x8 $x16)))
 (let (($x44 (not $x160)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (and $x110 $x193)))
 (let (($x32 (and (not $x216) $x44)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x40 $x180)))
 (let (($x20 (not $x7)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x211 $x89)))
 (let (($x185 (and (not $x52) $x20)))
 (let (($x226 (and (and (and (and (and (and $x185 $x32) $x150) $x161) $x62) $x144) $x188)))
 (let (($x213 (and $x226 $x100)))
 (let (($x57 (forall ((input.ind-%var1322X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var1322X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x170))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1322X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1322X)))
 (=> $x76 (= ?x107 ?x78))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1321X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1321X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var1321X) (bvult input.ind-%var1321X input.dst.llvm-%n)))))
 ))
 (let (($x171 (and $x153 $x57)))
 (let (($x190 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x135 (or false (or false (and (and true (or $x166 $x163)) (or $x169 $x190))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x10 (and (and (and $x50 $x171) $x213) $x95)))
 (let (($x182 (= $x10 true)))
 (let (($x191 (forall ((input.ind-%var1332X (_ BitVec 32)) )(let ((?x105 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1332X)))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1332X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1332X)))
 (=> $x76 (= ?x107 ?x105))))))
 ))
 (let (($x104 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1331X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var1331X)))
 (= $x76 $x174))))
 ))
 (let (($x96 (and $x104 $x191)))
 (let (($x224 (and $x96 $x182)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x159 $x224)))
 (let (($x111 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x217 (and $x111 $x87)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x123 $x217)))
 (let (($x167 (=> $x64 $x12)))
 (not $x167)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x47f8800f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00005efb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x47f8800c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00005ef8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x47f8800f)
                                   (k!0 #x47f8800e)
                                   (k!0 #x47f8800d)
                                   (k!0 #x47f8800c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00005efb)
                        (k!0 #x00005efa)
                        (k!0 #x00005ef9)
                        (k!0 #x00005ef8))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfff4bc04)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9e2f3c60)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9e2f3c63)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfff4bc07)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9e2f3c60)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfff4bc04)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x9e2f3c63)
                                   (k!0 #x9e2f3c62)
                                   (k!0 #x9e2f3c61)
                                   (k!0 #x9e2f3c60))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x221 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x221 false)))
 (let (($x19 (= $x210 true)))
 (let (($x198 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x198 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x183 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x117 true)))
 (let (($x58 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x58 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (= $x91 true)))
 (let (($x146 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1358X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x148))))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1358X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1358X)))
 (=> $x174 (= ?x48 ?x70))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1357X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1357X) (bvult input.ind-%var1357X input.dst.llvm-%n)))))
 ))
 (let (($x195 (and $x167 $x146)))
 (let (($x137 (= $x195 true)))
 (let ((?x26 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvadd input.dst.llvm-%x ?x26)))
 (let (($x6 (bvugt ?x101 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd ?x101 (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x181 (bvugt ?x101 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x204 (or false (or false (and (and true (or $x42 $x181)) (or $x60 $x6))))))
 (let (($x84 (=> (bvule ?x101 (bvsub (bvadd ?x101 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x65 (=> (and $x221 (bvule ?x101 (bvsub (bvadd ?x101 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x151 (= $x65 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x31)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x98)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x97 $x127)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x165 $x161)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x185 $x110)))
 (let (($x216 (not $x193)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x180 $x7)))
 (let (($x8 (and (not $x20) $x216)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x61 $x211)))
 (let (($x52 (not $x89)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x153 $x130)))
 (let (($x40 (and (not $x171) $x52)))
 (let (($x188 (and (and (and (and (and (and $x40 $x8) $x160) $x32) $x93) $x129) $x85)))
 (let (($x226 (and $x188 $x62)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x156 (or false (or false (and (and true (or $x41 $x49)) (or $x81 $x5))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x35 (and $x57 $x226)))
 (let (($x100 (= $x35 true)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x172 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x83 (= (_ bv0 2) ?x90)))
 (let (($x135 (= $x83 true)))
 (let (($x55 (and $x135 $x177)))
 (let (($x213 (and $x55 $x100)))
 (let (($x145 (and $x213 $x151)))
 (let (($x197 (and $x145 $x137)))
 (let (($x30 (and $x197 $x121)))
 (let (($x21 (and $x30 $x143)))
 (let (($x56 (and $x21 $x184)))
 (let (($x168 (and $x56 $x36)))
 (let (($x39 (and $x168 $x126)))
 (let (($x169 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1368X)))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1368X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1368X)))
 (=> $x174 (= ?x48 ?x166))))))
 ))
 (let (($x191 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let (($x107 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1367X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1367X)))
 (= $x174 $x107))))
 ))
 (let (($x141 (and $x191 $x169)))
 (let (($x109 (and $x141 $x39)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x59 (and $x128 $x109)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x207 (and $x123 $x59)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x77 $x207)))
 (let (($x206 (=> $x202 $x19)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x221 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x221 false)))
 (let (($x19 (= $x210 true)))
 (let (($x198 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x198 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x36 (= $x183 true)))
 (let (($x117 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x184 (= $x117 true)))
 (let (($x58 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x143 (= $x58 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (= $x91 true)))
 (let (($x146 (forall ((input.ind-%var1358X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1358X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x148))))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1358X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1358X)))
 (=> $x174 (= ?x48 ?x70))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1357X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1357X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1357X) (bvult input.ind-%var1357X input.dst.llvm-%n)))))
 ))
 (let (($x195 (and $x167 $x146)))
 (let (($x137 (= $x195 true)))
 (let ((?x26 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvadd input.dst.llvm-%x ?x26)))
 (let (($x6 (bvugt ?x101 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd ?x101 (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x181 (bvugt ?x101 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x204 (or false (or false (and (and true (or $x42 $x181)) (or $x60 $x6))))))
 (let (($x84 (=> (bvule ?x101 (bvsub (bvadd ?x101 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x65 (=> (and $x221 (bvule ?x101 (bvsub (bvadd ?x101 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x151 (= $x65 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x31)))
 (let ((?x98 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x85 (= (_ bv0 32) ?x98)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x113)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (and $x97 $x127)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x165 $x161)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x185 $x110)))
 (let (($x216 (not $x193)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x180 $x7)))
 (let (($x8 (and (not $x20) $x216)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x61 $x211)))
 (let (($x52 (not $x89)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x153 $x130)))
 (let (($x40 (and (not $x171) $x52)))
 (let (($x188 (and (and (and (and (and (and $x40 $x8) $x160) $x32) $x93) $x129) $x85)))
 (let (($x226 (and $x188 $x62)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x156 (or false (or false (and (and true (or $x41 $x49)) (or $x81 $x5))))))
 (let (($x57 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x35 (and $x57 $x226)))
 (let (($x100 (= $x35 true)))
 (let (($x172 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x172 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x83 (= (_ bv0 2) ?x90)))
 (let (($x135 (= $x83 true)))
 (let (($x55 (and $x135 $x177)))
 (let (($x213 (and $x55 $x100)))
 (let (($x145 (and $x213 $x151)))
 (let (($x197 (and $x145 $x137)))
 (let (($x30 (and $x197 $x121)))
 (let (($x21 (and $x30 $x143)))
 (let (($x56 (and $x21 $x184)))
 (let (($x168 (and $x56 $x36)))
 (let (($x39 (and $x168 $x126)))
 (let (($x169 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1368X)))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1368X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1368X)))
 (=> $x174 (= ?x48 ?x166))))))
 ))
 (let (($x191 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let (($x107 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1367X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1367X)))
 (= $x174 $x107))))
 ))
 (let (($x141 (and $x191 $x169)))
 (let (($x109 (and $x141 $x39)))
 (let (($x128 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x59 (and $x128 $x109)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x207 (and $x123 $x59)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x77 $x207)))
 (let (($x206 (=> $x202 $x19)))
 (not $x206))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40082204)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000314)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x10008300)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000317)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x10008303)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000314)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x10008300)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x40082207 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40082206 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40082205 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40082204 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00040000 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf750a004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x09d685d0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6d5b25c4)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6d5b25c7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf750a007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6d5b25c4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf750a004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!6 (bvadd #x09d685d3 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x09d685d2 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x09d685d1 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x09d685d0 (bvmul #x00000004 x!0))))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x40000000 x!0)
         (ite (bvule #x40000001 x!0) #x40000001 #x40000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x146)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x122)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (and $x71 $x80)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x45 $x189)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x87 $x64)))
 (let (($x167 (not $x12)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x151 $x145)))
 (let (($x112 (and (not $x217) $x167)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x223 $x106)))
 (let (($x204 (not $x215)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x102 $x60)))
 (let (($x65 (and (not $x6) $x204)))
 (let (($x58 (and (and (and (and (and (and $x65 $x112) $x92) $x29) $x148) $x70) $x54)))
 (let (($x143 (and $x58 $x195)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x81 (or false (or false (and (and true (or $x141 $x86)) (or $x83 $x135))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x162 (and $x170 $x143)))
 (let (($x53 (= $x162 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x118 (concat ?x105 (concat ?x13 ?x206)))))
 (let (($x18 (= input.dst.llvm-%n ?x96)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x207 (concat ?x39 (concat ?x168 ?x183)))))
 (let (($x210 (= input.dst.llvm-%x ?x202)))
 (let (($x159 (and $x210 $x18)))
 (let (($x184 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (and $x184 $x159)))
 (let (($x181 (forall ((input.ind-%var1394X (_ BitVec 32)) )(let ((?x93 (bvadd (bvmul input.ind-%var1394X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x221))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1394X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1394X)))
 (=> $x174 (= ?x113 ?x115))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1393X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1393X) (bvult input.ind-%var1393X input.dst.llvm-%n)))))
 ))
 (let (($x47 (and $x37 $x181)))
 (let (($x9 (and (and (and $x170 $x47) $x143) $x104)))
 (let (($x95 (= $x9 true)))
 (let (($x157 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let ((?x222 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1404X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1404X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1404X)))
 (=> $x174 (= ?x113 ?x222))))))
 ))
 (let (($x171 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1403X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1403X)))
 (= $x174 $x57))))
 ))
 (let (($x5 (and $x171 $x157)))
 (let (($x10 (and $x5 $x95)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x123 $x10)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x199 (and $x33 $x158)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x214 (and $x77 $x199)))
 (let (($x179 (=> $x214 $x53)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x146)))
 (let ((?x122 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x122)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x69 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x69)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (and $x71 $x80)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (and $x45 $x189)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x87 $x64)))
 (let (($x167 (not $x12)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x217 (and $x151 $x145)))
 (let (($x112 (and (not $x217) $x167)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x223 $x106)))
 (let (($x204 (not $x215)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x102 $x60)))
 (let (($x65 (and (not $x6) $x204)))
 (let (($x58 (and (and (and (and (and (and $x65 $x112) $x92) $x29) $x148) $x70) $x54)))
 (let (($x143 (and $x58 $x195)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x81 (or false (or false (and (and true (or $x141 $x86)) (or $x83 $x135))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x162 (and $x170 $x143)))
 (let (($x53 (= $x162 true)))
 (let ((?x206 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x118 (concat ?x105 (concat ?x13 ?x206)))))
 (let (($x18 (= input.dst.llvm-%n ?x96)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x207 (concat ?x39 (concat ?x168 ?x183)))))
 (let (($x210 (= input.dst.llvm-%x ?x202)))
 (let (($x159 (and $x210 $x18)))
 (let (($x184 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (and $x184 $x159)))
 (let (($x181 (forall ((input.ind-%var1394X (_ BitVec 32)) )(let ((?x93 (bvadd (bvmul input.ind-%var1394X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem ?x93))))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x93 (_ bv2 32))) ?x221))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1394X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1394X)))
 (=> $x174 (= ?x113 ?x115))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1393X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1393X) (bvult input.ind-%var1393X input.dst.llvm-%n)))))
 ))
 (let (($x47 (and $x37 $x181)))
 (let (($x9 (and (and (and $x170 $x47) $x143) $x104)))
 (let (($x95 (= $x9 true)))
 (let (($x157 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let ((?x222 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1404X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var1404X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1404X)))
 (=> $x174 (= ?x113 ?x222))))))
 ))
 (let (($x171 (forall ((input.ind-%var1403X (_ BitVec 32)) )(let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1403X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1403X)))
 (= $x174 $x57))))
 ))
 (let (($x5 (and $x171 $x157)))
 (let (($x10 (and $x5 $x95)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x158 (and $x123 $x10)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x199 (and $x33 $x158)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x214 (and $x77 $x199)))
 (let (($x179 (=> $x214 $x53)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x49 (= (_ bv0 2) ?x165)))
 (let (($x114 (= $x49 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x133 (concat ?x110 (concat ?x127 ?x188)))))
 (let (($x211 (= input.dst.llvm-%n ?x20)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x73 (concat ?x97 (concat ?x107 ?x153)))))
 (let (($x177 (= input.dst.llvm-%x ?x124)))
 (let (($x161 (and $x177 $x211)))
 (let (($x19 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x16 (and $x19 $x161)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x95)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x104)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x206)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x13 $x11)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x205 $x79)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x168 $x183)))
 (let (($x109 (not $x198)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x126 $x39)))
 (let (($x210 (and (not $x36) $x109)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x14 $x21)))
 (let (($x184 (not $x117)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x146 $x195)))
 (let (($x207 (and (not $x143) $x184)))
 (let (($x179 (and (and (and (and (and (and $x207 $x210) $x118) $x105) $x96) $x159) $x9)))
 (let (($x46 (and $x179 $x10)))
 (let (($x54 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var1414X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x69))))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var1414X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1414X)))
 (=> $x174 (= ?x64 ?x70))))))))
 ))
 (let (($x72 (forall ((input.ind-%var1413X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1413X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1413X) (bvult input.ind-%var1413X input.dst.llvm-%n)))))
 ))
 (let (($x58 (and $x72 $x54)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x216 (or false (or false (and (and true (or $x5 $x212)) (or $x15 $x169))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x216)))
 (let (($x185 (and (and (and $x31 $x58) $x46) $x16)))
 (let (($x160 (= $x185 true)))
 (let (($x129 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let ((?x135 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1424X)))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var1424X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1424X)))
 (=> $x174 (= ?x64 ?x135))))))
 ))
 (let (($x24 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let (($x43 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1423X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1423X)))
 (= $x174 $x43))))
 ))
 (let (($x85 (and $x24 $x129)))
 (let (($x128 (and $x85 $x160)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x33 $x128)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x44 (and $x226 $x225)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x77 $x44)))
 (let (($x22 (=> $x144 $x114)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x49 (= (_ bv0 2) ?x165)))
 (let (($x114 (= $x49 true)))
 (let ((?x188 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x133 (concat ?x110 (concat ?x127 ?x188)))))
 (let (($x211 (= input.dst.llvm-%n ?x20)))
 (let ((?x153 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x73 (concat ?x97 (concat ?x107 ?x153)))))
 (let (($x177 (= input.dst.llvm-%x ?x124)))
 (let (($x161 (and $x177 $x211)))
 (let (($x19 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x16 (and $x19 $x161)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x95)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x104)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x206)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x13 $x11)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x205 $x79)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x198 (and $x168 $x183)))
 (let (($x109 (not $x198)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x126 $x39)))
 (let (($x210 (and (not $x36) $x109)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x14 $x21)))
 (let (($x184 (not $x117)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x146 $x195)))
 (let (($x207 (and (not $x143) $x184)))
 (let (($x179 (and (and (and (and (and (and $x207 $x210) $x118) $x105) $x96) $x159) $x9)))
 (let (($x46 (and $x179 $x10)))
 (let (($x54 (forall ((input.ind-%var1414X (_ BitVec 32)) )(let ((?x175 (bvadd (bvmul input.ind-%var1414X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv1 32))) (select input.dst.llvm-mem ?x175))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x175 (_ bv2 32))) ?x69))))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var1414X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1414X)))
 (=> $x174 (= ?x64 ?x70))))))))
 ))
 (let (($x72 (forall ((input.ind-%var1413X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1413X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1413X) (bvult input.ind-%var1413X input.dst.llvm-%n)))))
 ))
 (let (($x58 (and $x72 $x54)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x216 (or false (or false (and (and true (or $x5 $x212)) (or $x15 $x169))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x216)))
 (let (($x185 (and (and (and $x31 $x58) $x46) $x16)))
 (let (($x160 (= $x185 true)))
 (let (($x129 (forall ((input.ind-%var1424X (_ BitVec 32)) )(let ((?x135 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1424X)))
 (let ((?x64 (input.spec-%var-x-1.1.1 input.ind-%var1424X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1424X)))
 (=> $x174 (= ?x64 ?x135))))))
 ))
 (let (($x24 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let (($x43 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1423X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1423X)))
 (= $x174 $x43))))
 ))
 (let (($x85 (and $x24 $x129)))
 (let (($x128 (and $x85 $x160)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x225 (and $x33 $x128)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x44 (and $x226 $x225)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x77 $x44)))
 (let (($x22 (=> $x144 $x114)))
 (not $x22)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x106 (= $x84 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x42 (concat ?x213 (concat ?x103 ?x86)))))
 (let (($x131 (= input.dst.llvm-%n ?x47)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x164 (concat ?x29 (concat ?x99 ?x156)))))
 (let (($x134 (= input.dst.llvm-%x ?x130)))
 (let (($x221 (and $x134 $x131)))
 (let (($x91 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and $x91 $x221)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x160)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x16)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x127 $x40)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x61 $x193)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x107 $x153)))
 (let (($x111 (not $x35)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x52 $x97)))
 (let (($x177 (and (not $x41) $x111)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x180 $x100)))
 (let (($x19 (not $x172)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x95 $x10)))
 (let (($x73 (and (not $x46) $x19)))
 (let (($x49 (and (and (and (and (and (and $x73 $x177) $x133) $x110) $x20) $x161) $x185)))
 (let (($x114 (and $x49 $x128)))
 (let (($x9 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var1434X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x206))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1434X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1434X)))
 (=> $x174 (= ?x183 ?x159))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1433X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1433X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1433X) (bvult input.ind-%var1433X input.dst.llvm-%n)))))
 ))
 (let (($x179 (and $x191 $x9)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x181 (or false (or false (and (and true (or $x85 $x166)) (or $x155 $x157))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x171 (and (and (and $x92 $x179) $x114) $x89)))
 (let (($x186 (= $x171 true)))
 (let (($x12 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1444X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1444X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1444X)))
 (=> $x174 (= ?x183 ?x169))))))
 ))
 (let (($x101 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1443X)))
 (= $x174 $x167))))
 ))
 (let (($x137 (and $x101 $x12)))
 (let (($x115 (and $x137 $x186)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x226 $x115)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x82 $x60)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x77 $x123)))
 (let (($x17 (=> $x220 $x106)))
 (not $x17))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x84 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x106 (= $x84 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x47 (concat ?x42 (concat ?x213 (concat ?x103 ?x86)))))
 (let (($x131 (= input.dst.llvm-%n ?x47)))
 (let ((?x156 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x164 (concat ?x29 (concat ?x99 ?x156)))))
 (let (($x134 (= input.dst.llvm-%x ?x130)))
 (let (($x221 (and $x134 $x131)))
 (let (($x91 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x89 (and $x91 $x221)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x160)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x185 (= (_ bv0 32) ?x16)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (and $x127 $x40)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (and $x61 $x193)))
 (let (($x110 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x107 $x153)))
 (let (($x111 (not $x35)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x52 $x97)))
 (let (($x177 (and (not $x41) $x111)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x180 $x100)))
 (let (($x19 (not $x172)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x95 $x10)))
 (let (($x73 (and (not $x46) $x19)))
 (let (($x49 (and (and (and (and (and (and $x73 $x177) $x133) $x110) $x20) $x161) $x185)))
 (let (($x114 (and $x49 $x128)))
 (let (($x9 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var1434X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x206))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1434X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1434X)))
 (=> $x174 (= ?x183 ?x159))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1433X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1433X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1433X) (bvult input.ind-%var1433X input.dst.llvm-%n)))))
 ))
 (let (($x179 (and $x191 $x9)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x181 (or false (or false (and (and true (or $x85 $x166)) (or $x155 $x157))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x171 (and (and (and $x92 $x179) $x114) $x89)))
 (let (($x186 (= $x171 true)))
 (let (($x12 (forall ((input.ind-%var1444X (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1444X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1444X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1444X)))
 (=> $x174 (= ?x183 ?x169))))))
 ))
 (let (($x101 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1443X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1443X)))
 (= $x174 $x167))))
 ))
 (let (($x137 (and $x101 $x12)))
 (let (($x115 (and $x137 $x186)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x226 $x115)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x82 $x60)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x220 (and $x77 $x123)))
 (let (($x17 (=> $x220 $x106)))
 (not $x17))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1474X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x188))))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var1474X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1474X)))
 (=> $x174 (= ?x153 ?x161))))))))
 ))
 (let (($x120 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1473X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1473X) (bvult input.ind-%var1473X input.dst.llvm-%n)))))
 ))
 (let (($x203 (and $x120 $x108)))
 (let (($x38 (= $x203 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x121 (concat ?x30 (concat ?x39 ?x119)))))
 (let (($x149 (= input.dst.llvm-%n ?x69)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x90 (concat ?x184 (concat ?x43 ?x151)))))
 (let (($x212 (= input.dst.llvm-%x ?x143)))
 (let (($x36 (and $x212 $x149)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x146 (and $x6 $x36)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x186)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x89)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x103 $x152)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x150 $x139)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x99 $x156)))
 (let (($x26 (not $x23)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x57 $x29)))
 (let (($x134 (and (not $x56) $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x102 $x22)))
 (let (($x91 (not $x66)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x160 $x128)))
 (let (($x164 (and (not $x114) $x91)))
 (let (($x17 (and (and (and (and (and (and $x164 $x134) $x42) $x213) $x47) $x221) $x171)))
 (let (($x215 (and $x17 $x115)))
 (let (($x185 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1454X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x188))))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var1454X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1454X)))
 (=> $x174 (= ?x153 ?x161))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1453X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1453X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1453X) (bvult input.ind-%var1453X input.dst.llvm-%n)))))
 ))
 (let (($x49 (and $x217 $x185)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x54 (or false (or false (and (and true (or $x137 $x222)) (or $x81 $x129))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x70 (and (and (and $x118 $x49) $x215) $x146)))
 (let (($x195 (= $x70 true)))
 (let (($x198 (forall ((input.ind-%var1464X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1464X)))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var1464X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1464X)))
 (=> $x174 (= ?x153 ?x157))))))
 ))
 (let (($x148 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1463X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1463X)))
 (= $x174 $x109))))
 ))
 (let (($x158 (and $x148 $x198)))
 (let (($x33 (and $x158 $x195)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x82 $x33)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x59 (and $x178 $x170)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x77 $x59)))
 (let (($x194 (=> $x21 $x38)))
 (not $x194))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1474X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x188))))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var1474X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1474X)))
 (=> $x174 (= ?x153 ?x161))))))))
 ))
 (let (($x120 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1473X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1473X) (bvult input.ind-%var1473X input.dst.llvm-%n)))))
 ))
 (let (($x203 (and $x120 $x108)))
 (let (($x38 (= $x203 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x30 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x121 (concat ?x30 (concat ?x39 ?x119)))))
 (let (($x149 (= input.dst.llvm-%n ?x69)))
 (let ((?x151 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x90 (concat ?x184 (concat ?x43 ?x151)))))
 (let (($x212 (= input.dst.llvm-%x ?x143)))
 (let (($x36 (and $x212 $x149)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x146 (and $x6 $x36)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x186)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x89)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x221 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x103 $x152)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x150 $x139)))
 (let (($x213 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x99 $x156)))
 (let (($x26 (not $x23)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x57 $x29)))
 (let (($x134 (and (not $x56) $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x102 $x22)))
 (let (($x91 (not $x66)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x160 $x128)))
 (let (($x164 (and (not $x114) $x91)))
 (let (($x17 (and (and (and (and (and (and $x164 $x134) $x42) $x213) $x47) $x221) $x171)))
 (let (($x215 (and $x17 $x115)))
 (let (($x185 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1454X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x188))))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var1454X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1454X)))
 (=> $x174 (= ?x153 ?x161))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1453X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1453X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1453X) (bvult input.ind-%var1453X input.dst.llvm-%n)))))
 ))
 (let (($x49 (and $x217 $x185)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x54 (or false (or false (and (and true (or $x137 $x222)) (or $x81 $x129))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x54)))
 (let (($x70 (and (and (and $x118 $x49) $x215) $x146)))
 (let (($x195 (= $x70 true)))
 (let (($x198 (forall ((input.ind-%var1464X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1464X)))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var1464X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1464X)))
 (=> $x174 (= ?x153 ?x157))))))
 ))
 (let (($x148 (forall ((input.ind-%var1463X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1463X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1463X)))
 (= $x174 $x109))))
 ))
 (let (($x158 (and $x148 $x198)))
 (let (($x33 (and $x158 $x195)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x82 $x33)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x59 (and $x178 $x170)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x77 $x59)))
 (let (($x194 (=> $x21 $x38)))
 (not $x194))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var1504X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x86))))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var1504X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1504X)))
 (=> $x174 (= ?x156 ?x221))))))))
 ))
 (let (($x187 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1503X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1503X) (bvult input.ind-%var1503X input.dst.llvm-%n)))))
 ))
 (let (($x88 (and $x187 $x62)))
 (let (($x27 (= $x88 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x53 (concat ?x97 (concat ?x207 ?x46)))))
 (let (($x179 (= input.dst.llvm-%n ?x104)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x192 (concat ?x110 (concat ?x126 ?x65)))))
 (let (($x78 (= input.dst.llvm-%x ?x175)))
 (let (($x162 (and $x78 $x179)))
 (let (($x144 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x206 (and $x144 $x162)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x195)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x146)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x39 $x45)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x154 $x122)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x43 $x151)))
 (let (($x116 (not $x105)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x189 $x184)))
 (let (($x212 (and (not $x83) $x116)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x71 $x214)))
 (let (($x6 (not $x190)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x186 $x115)))
 (let (($x90 (and (not $x215) $x6)))
 (let (($x203 (and (and (and (and (and (and $x90 $x212) $x121) $x30) $x69) $x36) $x70)))
 (let (($x38 (and $x203 $x33)))
 (let (($x171 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var1484X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x86))))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var1484X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1484X)))
 (=> $x174 (= ?x156 ?x221))))))))
 ))
 (let (($x24 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1483X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1483X) (bvult input.ind-%var1483X input.dst.llvm-%n)))))
 ))
 (let (($x17 (and $x24 $x171)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x9 (or false (or false (and (and true (or $x158 $x135)) (or $x216 $x12))))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x95 (and (and (and $x133 $x17) $x38) $x206)))
 (let (($x101 (= $x95 true)))
 (let (($x35 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let ((?x129 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1494X)))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var1494X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1494X)))
 (=> $x174 (= ?x156 ?x129))))))
 ))
 (let (($x96 (forall ((input.ind-%var1493X (_ BitVec 32)) )(let (($x111 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1493X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1493X)))
 (= $x174 $x111))))
 ))
 (let (($x225 (and $x96 $x35)))
 (let (($x13 (and $x225 $x101)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x178 $x13)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x7 $x159)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x226 (and $x77 $x10)))
 (let (($x147 (=> $x226 $x27)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x62 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var1504X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x86))))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var1504X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1504X)))
 (=> $x174 (= ?x156 ?x221))))))))
 ))
 (let (($x187 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1503X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1503X) (bvult input.ind-%var1503X input.dst.llvm-%n)))))
 ))
 (let (($x88 (and $x187 $x62)))
 (let (($x27 (= $x88 true)))
 (let ((?x46 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x97 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x53 (concat ?x97 (concat ?x207 ?x46)))))
 (let (($x179 (= input.dst.llvm-%n ?x104)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x175 (concat ?x192 (concat ?x110 (concat ?x126 ?x65)))))
 (let (($x78 (= input.dst.llvm-%x ?x175)))
 (let (($x162 (and $x78 $x179)))
 (let (($x144 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x206 (and $x144 $x162)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x195)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x146)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x119 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x119)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x39 $x45)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (and $x154 $x122)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (and $x43 $x151)))
 (let (($x116 (not $x105)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x189 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x189 $x184)))
 (let (($x212 (and (not $x83) $x116)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (and $x71 $x214)))
 (let (($x6 (not $x190)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x186 $x115)))
 (let (($x90 (and (not $x215) $x6)))
 (let (($x203 (and (and (and (and (and (and $x90 $x212) $x121) $x30) $x69) $x36) $x70)))
 (let (($x38 (and $x203 $x33)))
 (let (($x171 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var1484X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x86))))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var1484X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1484X)))
 (=> $x174 (= ?x156 ?x221))))))))
 ))
 (let (($x24 (forall ((input.ind-%var1483X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1483X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var1483X) (bvult input.ind-%var1483X input.dst.llvm-%n)))))
 ))
 (let (($x17 (and $x24 $x171)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x198 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x198)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x198)))
 (let (($x9 (or false (or false (and (and true (or $x158 $x135)) (or $x216 $x12))))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x95 (and (and (and $x133 $x17) $x38) $x206)))
 (let (($x101 (= $x95 true)))
 (let (($x35 (forall ((input.ind-%var1494X (_ BitVec 32)) )(let ((?x129 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1494X)))
 (let ((?x156 (input.spec-%var-x-1.1.1 input.ind-%var1494X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1494X)))
 (=> $x174 (= ?x156 ?x129))))))
 ))
 (let (($x96 (forall ((input.ind-%var1493X (_ BitVec 32)) )(let (($x111 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1493X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var1493X)))
 (= $x174 $x111))))
 ))
 (let (($x225 (and $x96 $x35)))
 (let (($x13 (and $x225 $x101)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x178 $x13)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x7 $x159)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x226 (and $x77 $x10)))
 (let (($x147 (=> $x226 $x27)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x160 false)))
 (let (($x255 (= $x254 true)))
 (let (($x247 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x244 true)))
 (let (($x241 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x242 (= $x241 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x238 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (= $x235 true)))
 (let (($x231 (forall ((input.ind-%var1524X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var1524X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x222))))
 (let ((?x180 (input.spec-%var-x-1.1.1 input.ind-%var1524X)))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1524X)))
 (=> $x111 (= ?x180 ?x107))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x162 (and (bvule (_ bv0 32) input.ind-%var1523X) (bvult input.ind-%var1523X input.dst.llvm-%n))))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1523X)))
 (= $x111 $x162))))
 ))
 (let (($x232 (and $x75 $x231)))
 (let (($x233 (= $x232 true)))
 (let ((?x148 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x127 (bvadd input.dst.llvm-%x ?x148)))
 (let (($x31 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x127 (_ bv3 32))))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x191 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x224 (or false (or false (and (and true (or $x22 $x191)) (or $x197 $x31))))))
 (let (($x28 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) $x224)))
 (let (($x161 (=> (and $x160 (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32)))) $x224)))
 (let (($x128 (= $x161 true)))
 (let (($x49 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var1514X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x222))))
 (let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1514X)))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1514X)))
 (=> $x156 (= ?x158 ?x107))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1513X (_ BitVec 32)) )(let (($x162 (and (bvule (_ bv0 32) input.ind-%var1513X) (bvult input.ind-%var1513X input.dst.llvm-%n))))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1513X)))
 (= $x156 $x162))))
 ))
 (let (($x68 (and $x95 $x49)))
 (let (($x188 (= $x68 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x192)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x144)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x195)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x70 $x33)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x146 $x38)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x154 $x39)))
 (let (($x45 (not $x119)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x87 $x30)))
 (let (($x69 (and (not $x21) $x45)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x116 $x212)))
 (let (($x58 (not $x170)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x221 $x106)))
 (let (($x59 (and (not $x105) $x58)))
 (let (($x79 (and (and (and (and (and (and $x59 $x69) $x149) $x108) $x41) $x74) $x19)))
 (let (($x175 (and $x79 $x167)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x143 (or false (or false (and (and true (or $x115 $x215)) (or $x6 $x90))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x78 (and $x151 $x175)))
 (let (($x168 (= $x78 true)))
 (let (($x150 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x103 (= $x150 true)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x40 true)))
 (let (($x130 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x20 (= $x130 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x102 (= (_ bv0 2) ?x24)))
 (let (($x164 (= $x102 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x134 true)))
 (let (($x177 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x177 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x217 (= $x81 true)))
 (let (($x133 (and $x217 $x9)))
 (let (($x23 (and $x133 $x185)))
 (let (($x26 (and $x23 $x164)))
 (let (($x84 (and $x26 $x20)))
 (let (($x139 (and $x84 $x152)))
 (let (($x99 (and $x139 $x103)))
 (let (($x53 (and $x99 $x168)))
 (let (($x11 (and $x53 $x188)))
 (let (($x51 (and $x11 $x128)))
 (let (($x234 (and $x51 $x233)))
 (let (($x237 (and $x234 $x236)))
 (let (($x240 (and $x237 $x239)))
 (let (($x243 (and $x240 $x242)))
 (let (($x246 (and $x243 $x245)))
 (let (($x249 (and $x246 $x248)))
 (let (($x216 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1534X)))
 (let ((?x180 (input.spec-%var-x-1.1.1 input.ind-%var1534X)))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1534X)))
 (=> $x111 (= ?x180 ?x158))))))
 ))
 (let (($x35 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1533X)))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1533X)))
 (= $x111 $x156))))
 ))
 (let (($x223 (and $x35 $x216)))
 (let (($x250 (and $x223 $x249)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x50 $x250)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x252 (and $x145 $x251)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x253 (and $x141 $x252)))
 (let (($x256 (=> $x253 $x255)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x160 false)))
 (let (($x255 (= $x254 true)))
 (let (($x247 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x244 true)))
 (let (($x241 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x242 (= $x241 true)))
 (let (($x238 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x238 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (= $x235 true)))
 (let (($x231 (forall ((input.ind-%var1524X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var1524X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x222))))
 (let ((?x180 (input.spec-%var-x-1.1.1 input.ind-%var1524X)))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1524X)))
 (=> $x111 (= ?x180 ?x107))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let (($x162 (and (bvule (_ bv0 32) input.ind-%var1523X) (bvult input.ind-%var1523X input.dst.llvm-%n))))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1523X)))
 (= $x111 $x162))))
 ))
 (let (($x232 (and $x75 $x231)))
 (let (($x233 (= $x232 true)))
 (let ((?x148 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x127 (bvadd input.dst.llvm-%x ?x148)))
 (let (($x31 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x127 (_ bv3 32))))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x191 (bvugt ?x127 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x224 (or false (or false (and (and true (or $x22 $x191)) (or $x197 $x31))))))
 (let (($x28 (=> (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32))) $x224)))
 (let (($x161 (=> (and $x160 (bvule ?x127 (bvsub (bvadd ?x127 (_ bv4 32)) (_ bv1 32)))) $x224)))
 (let (($x128 (= $x161 true)))
 (let (($x49 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let ((?x202 (bvadd (bvmul input.ind-%var1514X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv1 32))) (select input.dst.llvm-mem ?x202))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x202 (_ bv2 32))) ?x222))))
 (let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1514X)))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1514X)))
 (=> $x156 (= ?x158 ?x107))))))))
 ))
 (let (($x95 (forall ((input.ind-%var1513X (_ BitVec 32)) )(let (($x162 (and (bvule (_ bv0 32) input.ind-%var1513X) (bvult input.ind-%var1513X input.dst.llvm-%n))))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1513X)))
 (= $x156 $x162))))
 ))
 (let (($x68 (and $x95 $x49)))
 (let (($x188 (= $x68 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x167 (= (_ bv0 32) ?x192)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x144)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x194)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x33 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x195)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x70 $x33)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x146 $x38)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x154 $x39)))
 (let (($x45 (not $x119)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x87 $x30)))
 (let (($x69 (and (not $x21) $x45)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x116 $x212)))
 (let (($x58 (not $x170)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x221 $x106)))
 (let (($x59 (and (not $x105) $x58)))
 (let (($x79 (and (and (and (and (and (and $x59 $x69) $x149) $x108) $x41) $x74) $x19)))
 (let (($x175 (and $x79 $x167)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x143 (or false (or false (and (and true (or $x115 $x215)) (or $x6 $x90))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x78 (and $x151 $x175)))
 (let (($x168 (= $x78 true)))
 (let (($x150 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x103 (= $x150 true)))
 (let (($x40 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x152 (= $x40 true)))
 (let (($x130 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x20 (= $x130 true)))
 (let ((?x24 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x102 (= (_ bv0 2) ?x24)))
 (let (($x164 (= $x102 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x185 (= $x134 true)))
 (let (($x177 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x9 (= $x177 true)))
 (let (($x81 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x217 (= $x81 true)))
 (let (($x133 (and $x217 $x9)))
 (let (($x23 (and $x133 $x185)))
 (let (($x26 (and $x23 $x164)))
 (let (($x84 (and $x26 $x20)))
 (let (($x139 (and $x84 $x152)))
 (let (($x99 (and $x139 $x103)))
 (let (($x53 (and $x99 $x168)))
 (let (($x11 (and $x53 $x188)))
 (let (($x51 (and $x11 $x128)))
 (let (($x234 (and $x51 $x233)))
 (let (($x237 (and $x234 $x236)))
 (let (($x240 (and $x237 $x239)))
 (let (($x243 (and $x240 $x242)))
 (let (($x246 (and $x243 $x245)))
 (let (($x249 (and $x246 $x248)))
 (let (($x216 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1534X)))
 (let ((?x180 (input.spec-%var-x-1.1.1 input.ind-%var1534X)))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1534X)))
 (=> $x111 (= ?x180 ?x158))))))
 ))
 (let (($x35 (forall ((input.ind-%var1533X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1533X)))
 (let (($x111 (input.spec-%var-x-1.0.1 input.ind-%var1533X)))
 (= $x111 $x156))))
 ))
 (let (($x223 (and $x35 $x216)))
 (let (($x250 (and $x223 $x249)))
 (let (($x50 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x50 $x250)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x252 (and $x145 $x251)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x253 (and $x141 $x252)))
 (let (($x256 (=> $x253 $x255)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x39441420)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x196e2434)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3877061c)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3877061f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x39441423)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3877061c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x39441420)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x196e2437 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x196e2436 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x196e2435 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x196e2434 (bvmul #x00000004 x!0))))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000200 x!0)
         (ite (bvule #x00000201 x!0) #x00000201 #x00000200)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x196e2437 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x196e2436 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x196e2435 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x196e2434 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x02001010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x802b648c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x486aaa48)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x802b648f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x486aaa4b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x802b648c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x486aaa48)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00004000 x!0)
         (ite (bvule #x00004001 x!0) #x00004001 #x00004000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x02001013 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x02001012 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x02001011 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x02001010 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x02001013 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x02001012 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x02001011 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x02001010 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x135 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x135 (_ bv1 32))))
 (let (($x7 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (not $x7)))
 (let (($x183 (or $x112 $x153)))
 (let (($x37 (= $x183 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x34)))
 (let (($x136 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x136 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x98 true)))
 (let (($x117 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1774X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x251))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1774X)))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1774X)))
 (=> $x152 (= ?x80 ?x257))))))))
 ))
 (let (($x166 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1773X) (bvult input.ind-%var1773X input.dst.llvm-%n))))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1773X)))
 (= $x152 $x161))))
 ))
 (let (($x173 (and $x166 $x117)))
 (let (($x94 (= $x173 true)))
 (let (($x225 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x157 (= $x225 true)))
 (let (($x129 (forall ((input.ind-%var1764X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1764X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x251))))
 (let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1764X)))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1764X)))
 (=> $x103 (= ?x71 ?x257))))))))
 ))
 (let (($x51 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1763X) (bvult input.ind-%var1763X input.dst.llvm-%n))))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1763X)))
 (= $x103 $x161))))
 ))
 (let (($x64 (and $x51 $x129)))
 (let (($x124 (= $x64 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x191 (= $x22 true)))
 (let (($x92 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x176 (= $x92 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x148 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x11 (= $x188 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x73)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x61)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x206 $x10)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x162 $x187)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x79 $x192)))
 (let (($x175 (not $x167)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x15 $x144)))
 (let (($x168 (and (not $x19) $x175)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x33 $x38)))
 (let (($x65 (not $x41)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x21 $x122)))
 (let (($x74 (and (not $x195) $x65)))
 (let (($x107 (and (and (and (and (and (and $x74 $x168) $x179) $x104) $x140) $x29) $x113)))
 (let (($x165 (and $x107 $x142)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x119)))
 (let (($x146 (or false (or false (and (and true (or $x45 $x69)) (or $x149 $x55))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x146)))
 (let (($x16 (and $x203 $x165)))
 (let (($x49 (= $x16 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x58 (= (_ bv0 2) ?x170)))
 (let (($x59 (= $x58 true)))
 (let ((?x221 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x221)))
 (let (($x121 (= ?x106 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x121 true)))
 (let (($x87 (and $x116 $x59)))
 (let (($x68 (and $x87 $x49)))
 (let (($x56 (and $x68 $x11)))
 (let (($x82 (and $x56 $x127)))
 (let (($x204 (and $x82 $x176)))
 (let (($x66 (and $x204 $x191)))
 (let (($x181 (and $x66 $x124)))
 (let (($x178 (and $x181 $x157)))
 (let (($x67 (and $x178 $x94)))
 (let (($x209 (and $x67 $x25)))
 (let (($x200 (and $x209 $x218)))
 (let (($x208 (and $x200 $x138)))
 (let (($x184 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1784X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1784X)))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1784X)))
 (=> $x152 (= ?x80 ?x71))))))
 ))
 (let (($x43 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1783X)))
 (= $x152 $x103))))
 ))
 (let (($x83 (and $x43 $x184)))
 (let (($x196 (and $x83 $x208)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x132 (and $x20 $x196)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x163 (and $x57 $x132)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x102 $x163)))
 (let ((?x141 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvadd input.dst.llvm-%x ?x141)))
 (let (($x133 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x5 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x223 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x60 (or false (or false (and (and true (or $x216 $x223)) (or $x9 $x133))))))
 (let (($x24 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) $x60)))
 (let (($x174 (=> (and $x7 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) $x60)))
 (let (($x227 (and $x174 $x63)))
 (let (($x258 (=> $x227 $x37)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x135 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x153 (bvuge ?x135 (_ bv1 32))))
 (let (($x7 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (not $x7)))
 (let (($x183 (or $x112 $x153)))
 (let (($x37 (= $x183 true)))
 (let ((?x34 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x34)))
 (let (($x136 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x136 true)))
 (let (($x219 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x218 (= $x219 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x98 true)))
 (let (($x117 (forall ((input.ind-%var1774X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1774X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x251))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1774X)))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1774X)))
 (=> $x152 (= ?x80 ?x257))))))))
 ))
 (let (($x166 (forall ((input.ind-%var1773X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1773X) (bvult input.ind-%var1773X input.dst.llvm-%n))))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1773X)))
 (= $x152 $x161))))
 ))
 (let (($x173 (and $x166 $x117)))
 (let (($x94 (= $x173 true)))
 (let (($x225 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x157 (= $x225 true)))
 (let (($x129 (forall ((input.ind-%var1764X (_ BitVec 32)) )(let ((?x247 (bvadd (bvmul input.ind-%var1764X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x251))))
 (let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1764X)))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1764X)))
 (=> $x103 (= ?x71 ?x257))))))))
 ))
 (let (($x51 (forall ((input.ind-%var1763X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1763X) (bvult input.ind-%var1763X input.dst.llvm-%n))))
 (let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1763X)))
 (= $x103 $x161))))
 ))
 (let (($x64 (and $x51 $x129)))
 (let (($x124 (= $x64 true)))
 (let (($x22 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x191 (= $x22 true)))
 (let (($x92 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x176 (= $x92 true)))
 (let (($x148 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x148 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x11 (= $x188 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x142 (= (_ bv0 32) ?x73)))
 (let ((?x61 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x61)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x206 $x10)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x162 $x187)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x79 $x192)))
 (let (($x175 (not $x167)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x15 $x144)))
 (let (($x168 (and (not $x19) $x175)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x33 $x38)))
 (let (($x65 (not $x41)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x21 $x122)))
 (let (($x74 (and (not $x195) $x65)))
 (let (($x107 (and (and (and (and (and (and $x74 $x168) $x179) $x104) $x140) $x29) $x113)))
 (let (($x165 (and $x107 $x142)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x119)))
 (let (($x146 (or false (or false (and (and true (or $x45 $x69)) (or $x149 $x55))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x146)))
 (let (($x16 (and $x203 $x165)))
 (let (($x49 (= $x16 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x58 (= (_ bv0 2) ?x170)))
 (let (($x59 (= $x58 true)))
 (let ((?x221 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x106 (bvneg ?x221)))
 (let (($x121 (= ?x106 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x121 true)))
 (let (($x87 (and $x116 $x59)))
 (let (($x68 (and $x87 $x49)))
 (let (($x56 (and $x68 $x11)))
 (let (($x82 (and $x56 $x127)))
 (let (($x204 (and $x82 $x176)))
 (let (($x66 (and $x204 $x191)))
 (let (($x181 (and $x66 $x124)))
 (let (($x178 (and $x181 $x157)))
 (let (($x67 (and $x178 $x94)))
 (let (($x209 (and $x67 $x25)))
 (let (($x200 (and $x209 $x218)))
 (let (($x208 (and $x200 $x138)))
 (let (($x184 (forall ((input.ind-%var1784X (_ BitVec 32)) )(let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1784X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1784X)))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1784X)))
 (=> $x152 (= ?x80 ?x71))))))
 ))
 (let (($x43 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let (($x103 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1783X)))
 (let (($x152 (input.spec-%var-x-1.0.1 input.ind-%var1783X)))
 (= $x152 $x103))))
 ))
 (let (($x83 (and $x43 $x184)))
 (let (($x196 (and $x83 $x208)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x132 (and $x20 $x196)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x163 (and $x57 $x132)))
 (let (($x102 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x102 $x163)))
 (let ((?x141 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvadd input.dst.llvm-%x ?x141)))
 (let (($x133 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x14 (bvadd ?x5 (_ bv3 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x14)))
 (let (($x223 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x14)))
 (let (($x60 (or false (or false (and (and true (or $x216 $x223)) (or $x9 $x133))))))
 (let (($x24 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) $x60)))
 (let (($x174 (=> (and $x7 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) $x60)))
 (let (($x227 (and $x174 $x63)))
 (let (($x258 (=> $x227 $x37)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 167 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x279 (bvmul (_ bv4294967295 32) ?x278)))
 (let ((?x280 (bvneg ?x279)))
 (let (($x282 (= ?x280 ?x281)))
 (let (($x283 (= $x282 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x267)))
 (let (($x269 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x270 (= $x269 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x264 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (= $x261 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x172 (= $x190 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x6 (= $x193 true)))
 (let (($x131 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x131 true)))
 (let (($x101 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x101 true)))
 (let ((?x137 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvadd input.dst.llvm-%x ?x137)))
 (let ((?x97 (bvsub ?x7 ?x137)))
 (let (($x147 (ite (bvsge ?x137 (_ bv0 32)) (bvuge ?x7 ?x97) (bvult ?x7 ?x97))))
 (let (($x155 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x109 (ite $x155 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x76 (bvmul (_ bv4 64) ?x96)))
 (let ((?x54 ((_ extract 63 32) ?x76)))
 (let (($x213 (= ?x54 ?x109)))
 (let (($x44 (and $x213 $x147)))
 (let (($x245 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x199 (and $x245 $x44)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x5 $x199)))
 (let (($x8 (= $x52 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x182 (= $x72 true)))
 (let (($x243 (= $x5 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x100)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x210)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x17 $x84)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x215 $x150)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (and $x183 $x37)))
 (let (($x259 (not $x258)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x228 $x135)))
 (let (($x50 (and (not $x153) $x259)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x196 $x132)))
 (let (($x63 (not $x163)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x166 $x13)))
 (let (($x112 (and (not $x208) $x63)))
 (let (($x234 (and (and (and (and (and (and $x112 $x50) $x99) $x139) $x93) $x229) $x31)))
 (let (($x235 (and $x234 $x231)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x201 (or false (or false (and (and true (or $x94 $x67)) (or $x209 $x219))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x201)))
 (let (($x233 (and $x138 $x235)))
 (let (($x236 (= $x233 true)))
 (let ((?x181 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x225 (= (_ bv0 2) ?x181)))
 (let (($x157 (= $x225 true)))
 (let (($x86 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1809X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x61))))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1809X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1809X)))
 (=> $x80 (= ?x121 ?x16))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1808X) (bvult input.ind-%var1808X input.dst.llvm-%n))))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1808X)))
 (= $x80 $x74))))
 ))
 (let (($x47 (and $x66 $x86)))
 (let (($x129 (= $x47 true)))
 (let (($x188 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1799X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x61))))
 (let ((?x170 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1799X)))
 (let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x189 (= ?x170 ?x16))))))))
 ))
 (let (($x144 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1798X) (bvult input.ind-%var1798X input.dst.llvm-%n))))
 (let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x189 $x74))))
 ))
 (let (($x11 (and $x144 $x188)))
 (let (($x56 (= $x11 true)))
 (let ((?x36 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x36)))
 (let (($x146 (= ?x108 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x146 true)))
 (let (($x148 (and $x203 $x56)))
 (let (($x64 (and $x148 $x129)))
 (let (($x178 (and $x64 $x157)))
 (let (($x240 (and $x178 $x236)))
 (let (($x197 (and $x240 $x243)))
 (let (($x244 (and $x197 $x182)))
 (let (($x198 (and $x244 $x8)))
 (let (($x205 (and $x198 $x159)))
 (let (($x62 (and $x205 $x89)))
 (let (($x186 (and $x62 $x6)))
 (let (($x260 (and $x186 $x172)))
 (let (($x263 (and $x260 $x262)))
 (let (($x266 (and $x263 $x265)))
 (let (($x271 (and $x266 $x270)))
 (let (($x69 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x110 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x110 (_ bv1 32))))
 (let (($x272 (and $x120 $x271)))
 (let (($x70 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x170 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1819X)))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1819X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1819X)))
 (=> $x80 (= ?x121 ?x170))))))
 ))
 (let (($x151 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1818X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1818X)))
 (= $x80 $x189))))
 ))
 (let (($x119 (and $x151 $x70)))
 (let (($x273 (and $x119 $x272)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x152 $x273)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x20 $x274)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x276 (and $x26 $x275)))
 (let (($x23 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd ?x7 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x217 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x111 (or false (or false (and (and true (or $x81 $x217)) (or $x185 $x23))))))
 (let (($x164 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) $x111)))
 (let (($x42 (=> (and $x5 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) $x111)))
 (let (($x277 (and $x42 $x276)))
 (let (($x284 (=> $x277 $x283)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x279 (bvmul (_ bv4294967295 32) ?x278)))
 (let ((?x280 (bvneg ?x279)))
 (let (($x282 (= ?x280 ?x281)))
 (let (($x283 (= $x282 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x267)))
 (let (($x269 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x270 (= $x269 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x264 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x262 (= $x261 true)))
 (let (($x190 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x172 (= $x190 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x6 (= $x193 true)))
 (let (($x131 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x131 true)))
 (let (($x101 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x159 (= $x101 true)))
 (let ((?x137 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvadd input.dst.llvm-%x ?x137)))
 (let ((?x97 (bvsub ?x7 ?x137)))
 (let (($x147 (ite (bvsge ?x137 (_ bv0 32)) (bvuge ?x7 ?x97) (bvult ?x7 ?x97))))
 (let (($x155 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x109 (ite $x155 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x96 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x76 (bvmul (_ bv4 64) ?x96)))
 (let ((?x54 ((_ extract 63 32) ?x76)))
 (let (($x213 (= ?x54 ?x109)))
 (let (($x44 (and $x213 $x147)))
 (let (($x245 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x199 (and $x245 $x44)))
 (let (($x5 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x5 $x199)))
 (let (($x8 (= $x52 true)))
 (let (($x72 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x182 (= $x72 true)))
 (let (($x243 (= $x5 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x100)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x210)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x17 $x84)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x215 $x150)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (and $x183 $x37)))
 (let (($x259 (not $x258)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x228 $x135)))
 (let (($x50 (and (not $x153) $x259)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x196 $x132)))
 (let (($x63 (not $x163)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x166 $x13)))
 (let (($x112 (and (not $x208) $x63)))
 (let (($x234 (and (and (and (and (and (and $x112 $x50) $x99) $x139) $x93) $x229) $x31)))
 (let (($x235 (and $x234 $x231)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x173 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x209 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x173)))
 (let (($x201 (or false (or false (and (and true (or $x94 $x67)) (or $x209 $x219))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x201)))
 (let (($x233 (and $x138 $x235)))
 (let (($x236 (= $x233 true)))
 (let ((?x181 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x225 (= (_ bv0 2) ?x181)))
 (let (($x157 (= $x225 true)))
 (let (($x86 (forall ((input.ind-%var1809X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1809X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x61))))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1809X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1809X)))
 (=> $x80 (= ?x121 ?x16))))))))
 ))
 (let (($x66 (forall ((input.ind-%var1808X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1808X) (bvult input.ind-%var1808X input.dst.llvm-%n))))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1808X)))
 (= $x80 $x74))))
 ))
 (let (($x47 (and $x66 $x86)))
 (let (($x129 (= $x47 true)))
 (let (($x188 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1799X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x61))))
 (let ((?x170 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1799X)))
 (let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x189 (= ?x170 ?x16))))))))
 ))
 (let (($x144 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1798X) (bvult input.ind-%var1798X input.dst.llvm-%n))))
 (let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x189 $x74))))
 ))
 (let (($x11 (and $x144 $x188)))
 (let (($x56 (= $x11 true)))
 (let ((?x36 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x36)))
 (let (($x146 (= ?x108 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x203 (= $x146 true)))
 (let (($x148 (and $x203 $x56)))
 (let (($x64 (and $x148 $x129)))
 (let (($x178 (and $x64 $x157)))
 (let (($x240 (and $x178 $x236)))
 (let (($x197 (and $x240 $x243)))
 (let (($x244 (and $x197 $x182)))
 (let (($x198 (and $x244 $x8)))
 (let (($x205 (and $x198 $x159)))
 (let (($x62 (and $x205 $x89)))
 (let (($x186 (and $x62 $x6)))
 (let (($x260 (and $x186 $x172)))
 (let (($x263 (and $x260 $x262)))
 (let (($x266 (and $x263 $x265)))
 (let (($x271 (and $x266 $x270)))
 (let (($x69 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x110 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x120 (bvuge ?x110 (_ bv1 32))))
 (let (($x272 (and $x120 $x271)))
 (let (($x70 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x170 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1819X)))
 (let ((?x121 (input.spec-%var-x-1.1.1 input.ind-%var1819X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1819X)))
 (=> $x80 (= ?x121 ?x170))))))
 ))
 (let (($x151 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x189 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1818X)))
 (let (($x80 (input.spec-%var-x-1.0.1 input.ind-%var1818X)))
 (= $x80 $x189))))
 ))
 (let (($x119 (and $x151 $x70)))
 (let (($x273 (and $x119 $x272)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x152 $x273)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x20 $x274)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x276 (and $x26 $x275)))
 (let (($x23 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd ?x7 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x217 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x111 (or false (or false (and (and true (or $x81 $x217)) (or $x185 $x23))))))
 (let (($x164 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) $x111)))
 (let (($x42 (=> (and $x5 (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32)))) $x111)))
 (let (($x277 (and $x42 $x276)))
 (let (($x284 (=> $x277 $x283)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x160))))
 (let ((?x291 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x290)))
 (let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x83 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x171)))
 (let ((?x224 (bvmul (_ bv4294967295 32) ?x83)))
 (let ((?x251 (bvneg ?x224)))
 (let (($x292 (= ?x251 ?x291)))
 (let (($x293 (= $x292 true)))
 (let ((?x256 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x237 (bvneg ?x256)))
 (let (($x247 (= ?x237 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x247 true)))
 (let ((?x92 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x92)))
 (let (($x128 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x128 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x187 (= (_ bv0 2) ?x78)))
 (let (($x161 (= $x187 true)))
 (let (($x122 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x33 (= $x122 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x179 true)))
 (let (($x104 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul input.ind-%var1849X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x264))))
 (let ((?x149 (input.spec-%var-x-1.1.1 input.ind-%var1849X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1849X)))
 (=> $x151 (= ?x149 ?x270))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var1848X) (bvult input.ind-%var1848X input.dst.llvm-%n))))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1848X)))
 (= $x151 $x109))))
 ))
 (let (($x123 (and $x18 $x104)))
 (let (($x53 (= $x123 true)))
 (let (($x277 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x278 (= $x277 true)))
 (let (($x273 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul input.ind-%var1839X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x264))))
 (let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1839X)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x154 (= ?x108 ?x270))))))))
 ))
 (let (($x27 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var1838X) (bvult input.ind-%var1838X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x154 $x109))))
 ))
 (let (($x274 (and $x27 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x182 (= $x72 true)))
 (let (($x240 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x243 (= $x240 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x233 (= $x235 true)))
 (let (($x239 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 (bvsub ?x14 ?x77)) (bvult ?x14 (bvsub ?x14 ?x77)))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x139 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x242 (bvmul (_ bv4 64) ?x139)))
 (let ((?x215 ((_ extract 63 32) ?x242)))
 (let (($x150 (= ?x215 ?x84)))
 (let (($x210 (and $x150 $x239)))
 (let (($x241 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x31 (and $x241 $x210)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (=> $x141 $x31)))
 (let (($x100 (= $x234 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x50 (= $x259 true)))
 (let (($x37 (= $x141 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x227)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x13)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x218)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (and $x219 $x200)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x209 $x34)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x157 $x178)))
 (let (($x117 (not $x91)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x124 $x181)))
 (let (($x173 (and (not $x225) $x117)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x254 $x257)))
 (let (($x47 (not $x86)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x165 $x114)))
 (let (($x64 (and (not $x66) $x47)))
 (let (($x135 (and (and (and (and (and (and $x64 $x173) $x67) $x25) $x201) $x166) $x208)))
 (let (($x153 (and $x135 $x196)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x56 (or false (or false (and (and true (or $x211 $x202)) (or $x16 $x49))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x56)))
 (let (($x145 (and $x191 $x153)))
 (let (($x183 (= $x145 true)))
 (let (($x258 (and $x183 $x37)))
 (let (($x232 (and $x258 $x50)))
 (let (($x231 (and $x232 $x100)))
 (let (($x236 (and $x231 $x233)))
 (let (($x197 (and $x236 $x243)))
 (let (($x244 (and $x197 $x182)))
 (let (($x276 (and $x244 $x275)))
 (let (($x279 (and $x276 $x278)))
 (let (($x168 (and $x279 $x53)))
 (let (($x95 (and $x168 $x32)))
 (let (($x38 (and $x95 $x33)))
 (let (($x127 (and $x38 $x161)))
 (let (($x253 (and $x127 $x51)))
 (let (($x255 (and $x253 $x230)))
 (let (($x192 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x140 (ite $x192 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x140 (_ bv1 32))))
 (let (($x252 (and $x222 $x255)))
 (let (($x74 (forall ((input.ind-%var1859X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1859X)))
 (let ((?x149 (input.spec-%var-x-1.1.1 input.ind-%var1859X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1859X)))
 (=> $x151 (= ?x149 ?x108))))))
 ))
 (let (($x45 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1858X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1858X)))
 (= $x151 $x154))))
 ))
 (let (($x15 (and $x45 $x74)))
 (let (($x250 (and $x15 $x252)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x43 $x250)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x204 (and $x40 $x82)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x57 $x204)))
 (let (($x24 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd ?x14 (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x177 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x42 (or false (or false (and (and true (or $x9 $x177)) (or $x60 $x24))))))
 (let (($x26 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x42)))
 (let (($x102 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x42)))
 (let (($x248 (and $x102 $x22)))
 (let (($x294 (=> $x248 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x160))))
 (let ((?x291 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x290)))
 (let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x83 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x171)))
 (let ((?x224 (bvmul (_ bv4294967295 32) ?x83)))
 (let ((?x251 (bvneg ?x224)))
 (let (($x292 (= ?x251 ?x291)))
 (let (($x293 (= $x292 true)))
 (let ((?x256 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x237 (bvneg ?x256)))
 (let (($x247 (= ?x237 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x230 (= $x247 true)))
 (let ((?x92 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x92)))
 (let (($x128 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x128 true)))
 (let ((?x78 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x187 (= (_ bv0 2) ?x78)))
 (let (($x161 (= $x187 true)))
 (let (($x122 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x33 (= $x122 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x179 true)))
 (let (($x104 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul input.ind-%var1849X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x264))))
 (let ((?x149 (input.spec-%var-x-1.1.1 input.ind-%var1849X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1849X)))
 (=> $x151 (= ?x149 ?x270))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var1848X) (bvult input.ind-%var1848X input.dst.llvm-%n))))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1848X)))
 (= $x151 $x109))))
 ))
 (let (($x123 (and $x18 $x104)))
 (let (($x53 (= $x123 true)))
 (let (($x277 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x278 (= $x277 true)))
 (let (($x273 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let ((?x260 (bvadd (bvmul input.ind-%var1839X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv1 32))) (select input.dst.llvm-mem ?x260))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x260 (_ bv2 32))) ?x264))))
 (let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1839X)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1839X)))
 (=> $x154 (= ?x108 ?x270))))))))
 ))
 (let (($x27 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x109 (and (bvule (_ bv0 32) input.ind-%var1838X) (bvult input.ind-%var1838X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1838X)))
 (= $x154 $x109))))
 ))
 (let (($x274 (and $x27 $x273)))
 (let (($x275 (= $x274 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x182 (= $x72 true)))
 (let (($x240 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x243 (= $x240 true)))
 (let (($x235 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x233 (= $x235 true)))
 (let (($x239 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 (bvsub ?x14 ?x77)) (bvult ?x14 (bvsub ?x14 ?x77)))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x139 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x242 (bvmul (_ bv4 64) ?x139)))
 (let ((?x215 ((_ extract 63 32) ?x242)))
 (let (($x150 (= ?x215 ?x84)))
 (let (($x210 (and $x150 $x239)))
 (let (($x241 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x31 (and $x241 $x210)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x234 (=> $x141 $x31)))
 (let (($x100 (= $x234 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x50 (= $x259 true)))
 (let (($x37 (= $x141 true)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x227)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x13)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x166 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let ((?x218 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x218)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (and $x219 $x200)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x209 $x34)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x157 $x178)))
 (let (($x117 (not $x91)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x124 $x181)))
 (let (($x173 (and (not $x225) $x117)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x254 $x257)))
 (let (($x47 (not $x86)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x165 $x114)))
 (let (($x64 (and (not $x66) $x47)))
 (let (($x135 (and (and (and (and (and (and $x64 $x173) $x67) $x25) $x201) $x166) $x208)))
 (let (($x153 (and $x135 $x196)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x29 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x29)))
 (let (($x56 (or false (or false (and (and true (or $x211 $x202)) (or $x16 $x49))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x56)))
 (let (($x145 (and $x191 $x153)))
 (let (($x183 (= $x145 true)))
 (let (($x258 (and $x183 $x37)))
 (let (($x232 (and $x258 $x50)))
 (let (($x231 (and $x232 $x100)))
 (let (($x236 (and $x231 $x233)))
 (let (($x197 (and $x236 $x243)))
 (let (($x244 (and $x197 $x182)))
 (let (($x276 (and $x244 $x275)))
 (let (($x279 (and $x276 $x278)))
 (let (($x168 (and $x279 $x53)))
 (let (($x95 (and $x168 $x32)))
 (let (($x38 (and $x95 $x33)))
 (let (($x127 (and $x38 $x161)))
 (let (($x253 (and $x127 $x51)))
 (let (($x255 (and $x253 $x230)))
 (let (($x192 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x140 (ite $x192 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x140 (_ bv1 32))))
 (let (($x252 (and $x222 $x255)))
 (let (($x74 (forall ((input.ind-%var1859X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1859X)))
 (let ((?x149 (input.spec-%var-x-1.1.1 input.ind-%var1859X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1859X)))
 (=> $x151 (= ?x149 ?x108))))))
 ))
 (let (($x45 (forall ((input.ind-%var1858X (_ BitVec 32)) )(let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1858X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1858X)))
 (= $x151 $x154))))
 ))
 (let (($x15 (and $x45 $x74)))
 (let (($x250 (and $x15 $x252)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x82 (and $x43 $x250)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x204 (and $x40 $x82)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x22 (and $x57 $x204)))
 (let (($x24 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x217 (bvadd ?x14 (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x217)))
 (let (($x177 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x217)))
 (let (($x42 (or false (or false (and (and true (or $x9 $x177)) (or $x60 $x24))))))
 (let (($x26 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x42)))
 (let (($x102 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x42)))
 (let (($x248 (and $x102 $x22)))
 (let (($x294 (=> $x248 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 189 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (bvule ?x19 (_ bv3 32))))
 (let (($x103 (= $x79 true)))
 (let ((?x184 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x220 (bvneg ?x184)))
 (let (($x190 (= ?x220 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x190 true)))
 (let (($x96 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x76 (= $x96 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x6 (= $x89 true)))
 (let (($x198 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x52 (= $x198 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x97)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x189)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (and $x121 $x69)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x126 $x120)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x288 $x290)))
 (let (($x292 (not $x291)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x87 $x59)))
 (let (($x294 (and (not $x160) $x292)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x224 $x251)))
 (let (($x286 (not $x289)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x128 $x51)))
 (let (($x106 (and (not $x83) $x286)))
 (let (($x62 (and (and (and (and (and (and $x106 $x294) $x5) $x39) $x80) $x36) $x70)))
 (let (($x193 (and $x62 $x48)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x22 (or false (or false (and (and true (or $x237 $x246)) (or $x255 $x252))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x205 (and $x171 $x193)))
 (let (($x131 (= $x205 true)))
 (let (($x161 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x127 (= $x161 true)))
 (let ((?x38 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x10 (= (_ bv0 2) ?x38)))
 (let (($x78 (= $x10 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x32 true)))
 (let (($x123 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul input.ind-%var1885X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x231))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1885X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1885X)))
 (=> $x45 (= ?x107 ?x197))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) input.ind-%var1884X) (bvult input.ind-%var1884X input.dst.llvm-%n))))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1884X)))
 (= $x45 $x145))))
 ))
 (let (($x53 (and $x262 $x123)))
 (let (($x168 (= $x53 true)))
 (let (($x213 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x27 (= $x213 true)))
 (let (($x244 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul input.ind-%var1875X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x231))))
 (let ((?x211 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x65 (= ?x211 ?x197))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x65 $x145))))
 ))
 (let (($x155 (and $x37 $x244)))
 (let (($x54 (= $x155 true)))
 (let ((?x218 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x218)))
 (let (($x201 (= ?x200 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x201 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x117 (bvsub ?x14 ?x77)))
 (let (($x67 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x117) (bvult ?x14 ?x117))))
 (let (($x136 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x178 (ite $x136 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x124 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x181 (bvmul (_ bv4 64) ?x124)))
 (let ((?x225 ((_ extract 63 32) ?x181)))
 (let (($x91 (= ?x225 ?x178)))
 (let (($x163 (and $x91 $x67)))
 (let (($x47 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x98 (and $x47 $x163)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x141 $x98)))
 (let (($x63 (= $x25 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x129 (= $x66 true)))
 (let (($x114 (= $x141 true)))
 (let (($x254 (and $x114 $x129)))
 (let (($x209 (and $x254 $x63)))
 (let (($x138 (and $x209 $x112)))
 (let (($x109 (and $x138 $x54)))
 (let (($x147 (and $x109 $x27)))
 (let (($x179 (and $x147 $x168)))
 (let (($x122 (and $x179 $x95)))
 (let (($x187 (and $x122 $x78)))
 (let (($x92 (and $x187 $x127)))
 (let (($x8 (and $x92 $x131)))
 (let (($x101 (and $x8 $x52)))
 (let (($x75 (and $x101 $x6)))
 (let (($x186 (and $x75 $x76)))
 (let (($x280 (and $x186 $x71)))
 (let (($x56 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x191 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x191 (_ bv1 32))))
 (let (($x282 (and $x165 $x280)))
 (let (($x68 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x211 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1895X)))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1895X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1895X)))
 (=> $x45 (= ?x107 ?x211))))))
 ))
 (let (($x192 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1894X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1894X)))
 (= $x45 $x65))))
 ))
 (let (($x188 (and $x192 $x68)))
 (let (($x283 (and $x188 $x282)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x143 $x283)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x221 (and $x152 $x116)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x195 (and $x130 $x221)))
 (let (($x111 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd ?x14 (_ bv3 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x185 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x102 (or false (or false (and (and true (or $x133 $x185)) (or $x174 $x111))))))
 (let (($x57 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x35 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x194 (and $x35 $x195)))
 (let (($x90 (=> $x194 $x103)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (bvule ?x19 (_ bv3 32))))
 (let (($x103 (= $x79 true)))
 (let ((?x184 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x220 (bvneg ?x184)))
 (let (($x190 (= ?x220 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x71 (= $x190 true)))
 (let (($x96 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x76 (= $x96 true)))
 (let (($x89 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x6 (= $x89 true)))
 (let (($x198 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x52 (= $x198 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x97)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x189)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x55 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (and $x121 $x69)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x126 $x120)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x288 $x290)))
 (let (($x292 (not $x291)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x87 $x59)))
 (let (($x294 (and (not $x160) $x292)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x224 $x251)))
 (let (($x286 (not $x289)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x128 $x51)))
 (let (($x106 (and (not $x83) $x286)))
 (let (($x62 (and (and (and (and (and (and $x106 $x294) $x5) $x39) $x80) $x36) $x70)))
 (let (($x193 (and $x62 $x48)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x246 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x22 (or false (or false (and (and true (or $x237 $x246)) (or $x255 $x252))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x205 (and $x171 $x193)))
 (let (($x131 (= $x205 true)))
 (let (($x161 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x127 (= $x161 true)))
 (let ((?x38 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x10 (= (_ bv0 2) ?x38)))
 (let (($x78 (= $x10 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x32 true)))
 (let (($x123 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul input.ind-%var1885X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x231))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1885X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1885X)))
 (=> $x45 (= ?x107 ?x197))))))))
 ))
 (let (($x262 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) input.ind-%var1884X) (bvult input.ind-%var1884X input.dst.llvm-%n))))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1884X)))
 (= $x45 $x145))))
 ))
 (let (($x53 (and $x262 $x123)))
 (let (($x168 (= $x53 true)))
 (let (($x213 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x27 (= $x213 true)))
 (let (($x244 (forall ((input.ind-%var1875X (_ BitVec 32)) )(let ((?x210 (bvadd (bvmul input.ind-%var1875X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x231))))
 (let ((?x211 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1875X)))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1875X)))
 (=> $x65 (= ?x211 ?x197))))))))
 ))
 (let (($x37 (forall ((input.ind-%var1874X (_ BitVec 32)) )(let (($x145 (and (bvule (_ bv0 32) input.ind-%var1874X) (bvult input.ind-%var1874X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1874X)))
 (= $x65 $x145))))
 ))
 (let (($x155 (and $x37 $x244)))
 (let (($x54 (= $x155 true)))
 (let ((?x218 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x200 (bvneg ?x218)))
 (let (($x201 (= ?x200 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x112 (= $x201 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x117 (bvsub ?x14 ?x77)))
 (let (($x67 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x117) (bvult ?x14 ?x117))))
 (let (($x136 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x178 (ite $x136 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x124 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x181 (bvmul (_ bv4 64) ?x124)))
 (let ((?x225 ((_ extract 63 32) ?x181)))
 (let (($x91 (= ?x225 ?x178)))
 (let (($x163 (and $x91 $x67)))
 (let (($x47 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x98 (and $x47 $x163)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x141 $x98)))
 (let (($x63 (= $x25 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x129 (= $x66 true)))
 (let (($x114 (= $x141 true)))
 (let (($x254 (and $x114 $x129)))
 (let (($x209 (and $x254 $x63)))
 (let (($x138 (and $x209 $x112)))
 (let (($x109 (and $x138 $x54)))
 (let (($x147 (and $x109 $x27)))
 (let (($x179 (and $x147 $x168)))
 (let (($x122 (and $x179 $x95)))
 (let (($x187 (and $x122 $x78)))
 (let (($x92 (and $x187 $x127)))
 (let (($x8 (and $x92 $x131)))
 (let (($x101 (and $x8 $x52)))
 (let (($x75 (and $x101 $x6)))
 (let (($x186 (and $x75 $x76)))
 (let (($x280 (and $x186 $x71)))
 (let (($x56 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x191 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x165 (bvuge ?x191 (_ bv1 32))))
 (let (($x282 (and $x165 $x280)))
 (let (($x68 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let ((?x211 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1895X)))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var1895X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1895X)))
 (=> $x45 (= ?x107 ?x211))))))
 ))
 (let (($x192 (forall ((input.ind-%var1894X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1894X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1894X)))
 (= $x45 $x65))))
 ))
 (let (($x188 (and $x192 $x68)))
 (let (($x283 (and $x188 $x282)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x143 $x283)))
 (let (($x152 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x221 (and $x152 $x116)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x195 (and $x130 $x221)))
 (let (($x111 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd ?x14 (_ bv3 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x185 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x102 (or false (or false (and (and true (or $x133 $x185)) (or $x174 $x111))))))
 (let (($x57 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x102)))
 (let (($x35 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x102)))
 (let (($x194 (and $x35 $x195)))
 (let (($x90 (=> $x194 $x103)))
 (not $x90))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00800002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00800002 x!0)
         (ite (bvule #x00800003 x!0) #x00800003 #x00800002)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5676a604)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x1ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3762e848)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3762e84b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5676a607)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3762e848)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5676a604)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x1ffffffb (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1ffffffa (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1ffffff9 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1ffffff8 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x1ffffffb (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1ffffffa (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1ffffff9 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1ffffff8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x61 (bvule ?x206 (_ bv4 32))))
 (let (($x222 (= $x61 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x272)))
 (let (($x271 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x271 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x275 (= $x279 true)))
 (let (($x267 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x270 (= $x267 true)))
 (let (($x172 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x268 (= $x172 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x139)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x115)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x208)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x13 $x30)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x166 $x99)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x148 $x140)))
 (let (($x151 (not $x113)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x41 $x202)))
 (let (($x29 (and (not $x149) $x151)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x79 $x103)))
 (let (($x105 (not $x90)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x89 $x6)))
 (let (($x176 (and (not $x19) $x105)))
 (let (($x227 (and (and (and (and (and (and $x176 $x29) $x74) $x50) $x150) $x17) $x214)))
 (let (($x125 (and $x227 $x241)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x221 (or false (or false (and (and true (or $x186 $x184)) (or $x71 $x280))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x259 (and $x194 $x125)))
 (let (($x229 (= $x259 true)))
 (let (($x8 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (= $x8 true)))
 (let ((?x48 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x193 (= (_ bv0 2) ?x48)))
 (let (($x205 (= $x193 true)))
 (let (($x189 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x70 (= $x189 true)))
 (let (($x44 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var1966X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x247))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1966X)))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1966X)))
 (=> $x192 (= ?x114 ?x204))))))))
 ))
 (let (($x160 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1965X) (bvult input.ind-%var1965X input.dst.llvm-%n))))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1965X)))
 (= $x192 $x27))))
 ))
 (let (($x170 (and $x160 $x44)))
 (let (($x36 (= $x170 true)))
 (let (($x128 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var1956X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x247))))
 (let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1956X)))
 (let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (=> $x16 (= ?x254 ?x204))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1955X) (bvult input.ind-%var1955X input.dst.llvm-%n))))
 (let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1955X)))
 (= $x16 $x27))))
 ))
 (let (($x51 (and $x266 $x128)))
 (let (($x83 (= $x51 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x231 (= $x31 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x234 (= $x233 true)))
 (let ((?x239 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x239)))
 (let (($x243 (= ?x210 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x243 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x200 (bvsub ?x14 ?x77)))
 (let (($x138 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x200) (bvult ?x14 ?x200))))
 (let (($x63 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x219 (ite $x63 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvmul (_ bv4 64) ?x163)))
 (let ((?x25 ((_ extract 63 32) ?x98)))
 (let (($x218 (= ?x25 ?x219)))
 (let (($x153 (and $x218 $x138)))
 (let (($x94 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x196 (and $x94 $x153)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x141 $x196)))
 (let (($x183 (= $x145 true)))
 (let (($x173 (= $x141 true)))
 (let (($x37 (and $x173 $x183)))
 (let (($x235 (and $x37 $x215)))
 (let (($x100 (and $x235 $x234)))
 (let (($x236 (and $x100 $x231)))
 (let (($x287 (and $x236 $x83)))
 (let (($x199 (and $x287 $x36)))
 (let (($x62 (and $x199 $x70)))
 (let (($x131 (and $x62 $x205)))
 (let (($x52 (and $x131 $x198)))
 (let (($x264 (and $x52 $x229)))
 (let (($x269 (and $x264 $x268)))
 (let (($x278 (and $x269 $x270)))
 (let (($x276 (and $x278 $x275)))
 (let (($x277 (and $x276 $x274)))
 (let (($x157 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x178 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x178 (_ bv1 32))))
 (let (($x226 (and $x91 $x277)))
 (let (($x181 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1976X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1976X)))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1976X)))
 (=> $x192 (= ?x114 ?x254))))))
 ))
 (let (($x11 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1975X)))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1975X)))
 (= $x192 $x16))))
 ))
 (let (($x225 (and $x11 $x181)))
 (let (($x260 (and $x225 $x226)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x119 $x260)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x265 (and $x43 $x159)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x20 $x265)))
 (let (($x42 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x14 (_ bv3 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x60 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x35 (or false (or false (and (and true (or $x134 $x60)) (or $x164 $x42))))))
 (let (($x130 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x12 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x261 (and $x12 $x18)))
 (let (($x73 (=> $x261 $x222)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x61 (bvule ?x206 (_ bv4 32))))
 (let (($x222 (= $x61 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x272)))
 (let (($x271 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x271 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x275 (= $x279 true)))
 (let (($x267 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x270 (= $x267 true)))
 (let (($x172 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x268 (= $x172 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x139)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x214 (= (_ bv0 32) ?x115)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x17 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x208)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x13 $x30)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x166 $x99)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x148 $x140)))
 (let (($x151 (not $x113)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x41 $x202)))
 (let (($x29 (and (not $x149) $x151)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x79 $x103)))
 (let (($x105 (not $x90)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x89 $x6)))
 (let (($x176 (and (not $x19) $x105)))
 (let (($x227 (and (and (and (and (and (and $x176 $x29) $x74) $x50) $x150) $x17) $x214)))
 (let (($x125 (and $x227 $x241)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x221 (or false (or false (and (and true (or $x186 $x184)) (or $x71 $x280))))))
 (let (($x194 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x259 (and $x194 $x125)))
 (let (($x229 (= $x259 true)))
 (let (($x8 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x198 (= $x8 true)))
 (let ((?x48 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x193 (= (_ bv0 2) ?x48)))
 (let (($x205 (= $x193 true)))
 (let (($x189 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x70 (= $x189 true)))
 (let (($x44 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var1966X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x247))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1966X)))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1966X)))
 (=> $x192 (= ?x114 ?x204))))))))
 ))
 (let (($x160 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1965X) (bvult input.ind-%var1965X input.dst.llvm-%n))))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1965X)))
 (= $x192 $x27))))
 ))
 (let (($x170 (and $x160 $x44)))
 (let (($x36 (= $x170 true)))
 (let (($x128 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var1956X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x247))))
 (let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1956X)))
 (let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1956X)))
 (=> $x16 (= ?x254 ?x204))))))))
 ))
 (let (($x266 (forall ((input.ind-%var1955X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1955X) (bvult input.ind-%var1955X input.dst.llvm-%n))))
 (let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1955X)))
 (= $x16 $x27))))
 ))
 (let (($x51 (and $x266 $x128)))
 (let (($x83 (= $x51 true)))
 (let (($x31 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x231 (= $x31 true)))
 (let (($x233 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x234 (= $x233 true)))
 (let ((?x239 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x210 (bvneg ?x239)))
 (let (($x243 (= ?x210 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x215 (= $x243 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x200 (bvsub ?x14 ?x77)))
 (let (($x138 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x200) (bvult ?x14 ?x200))))
 (let (($x63 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x219 (ite $x63 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x98 (bvmul (_ bv4 64) ?x163)))
 (let ((?x25 ((_ extract 63 32) ?x98)))
 (let (($x218 (= ?x25 ?x219)))
 (let (($x153 (and $x218 $x138)))
 (let (($x94 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x196 (and $x94 $x153)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x141 $x196)))
 (let (($x183 (= $x145 true)))
 (let (($x173 (= $x141 true)))
 (let (($x37 (and $x173 $x183)))
 (let (($x235 (and $x37 $x215)))
 (let (($x100 (and $x235 $x234)))
 (let (($x236 (and $x100 $x231)))
 (let (($x287 (and $x236 $x83)))
 (let (($x199 (and $x287 $x36)))
 (let (($x62 (and $x199 $x70)))
 (let (($x131 (and $x62 $x205)))
 (let (($x52 (and $x131 $x198)))
 (let (($x264 (and $x52 $x229)))
 (let (($x269 (and $x264 $x268)))
 (let (($x278 (and $x269 $x270)))
 (let (($x276 (and $x278 $x275)))
 (let (($x277 (and $x276 $x274)))
 (let (($x157 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x178 (ite $x157 (_ bv1 32) (_ bv0 32))))
 (let (($x91 (bvuge ?x178 (_ bv1 32))))
 (let (($x226 (and $x91 $x277)))
 (let (($x181 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1976X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1976X)))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1976X)))
 (=> $x192 (= ?x114 ?x254))))))
 ))
 (let (($x11 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1975X)))
 (let (($x192 (input.spec-%var-x-1.0.1 input.ind-%var1975X)))
 (= $x192 $x16))))
 ))
 (let (($x225 (and $x11 $x181)))
 (let (($x260 (and $x225 $x226)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x119 $x260)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x265 (and $x43 $x159)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x20 $x265)))
 (let (($x42 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x14 (_ bv3 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x60 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x35 (or false (or false (and (and true (or $x134 $x60)) (or $x164 $x42))))))
 (let (($x130 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x12 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x261 (and $x12 $x18)))
 (let (($x73 (=> $x261 $x222)))
 (not $x73))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9466fea8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x467839ac)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ff46bac)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ff46baf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9466feab)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ff46bac)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9466fea8)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x467839af (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x467839ae (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x467839ad (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x467839ac (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x467839af (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x467839ae (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x467839ad (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x467839ac (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000030)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000033)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000030)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x106 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x87 (= $x106 true)))
 (let ((?x292 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x292)))
 (let (($x126 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x126 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x286 (= $x289 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x253 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x10)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x161)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x104 $x182)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x262 $x244)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x257 $x107)))
 (let (($x56 (not $x66)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x137 $x101)))
 (let (($x45 (and (not $x49) $x56)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x261 $x206)))
 (let (($x222 (not $x61)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x268 $x269)))
 (let (($x144 (and (not $x18) $x222)))
 (let (($x72 (and (and (and (and (and (and $x144 $x45) $x129) $x68) $x53) $x187) $x38)))
 (let (($x155 (and $x72 $x32)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x260 (or false (or false (and (and true (or $x279 $x275)) (or $x273 $x271))))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x54 (and $x265 $x155)))
 (let (($x92 (= $x54 true)))
 (let (($x259 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x229 (= $x259 true)))
 (let ((?x227 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x139 (= (_ bv0 2) ?x227)))
 (let (($x241 (= $x139 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (= $x17 true)))
 (let (($x99 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x75 (bvadd (bvmul input.ind-%var2041X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x186))))
 (let ((?x173 (input.spec-%var-x-1.1.1 input.ind-%var2041X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2041X)))
 (=> $x11 (= ?x173 ?x282))))))))
 ))
 (let (($x41 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X input.dst.llvm-%n))))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2040X)))
 (= $x11 $x128))))
 ))
 (let (($x150 (and $x41 $x99)))
 (let (($x228 (= $x150 true)))
 (let (($x221 (forall ((input.ind-%var2031X (_ BitVec 32)) )(let ((?x75 (bvadd (bvmul input.ind-%var2031X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x186))))
 (let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2031X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2031X)))
 (=> $x64 (= ?x94 ?x282))))))))
 ))
 (let (($x83 (forall ((input.ind-%var2030X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var2030X) (bvult input.ind-%var2030X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2030X)))
 (= $x64 $x128))))
 ))
 (let (($x194 (and $x83 $x221)))
 (let (($x89 (= $x194 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x33 true)))
 (let ((?x147 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x147)))
 (let (($x249 (= ?x266 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x249 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x215 (bvsub ?x14 ?x77)))
 (let (($x100 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x215) (bvult ?x14 ?x215))))
 (let (($x239 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x240 (ite $x239 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x37 (bvmul (_ bv4 64) ?x183)))
 (let ((?x232 ((_ extract 63 32) ?x37)))
 (let (($x243 (= ?x232 ?x240)))
 (let (($x31 (and $x243 $x100)))
 (let (($x196 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x231 (and $x196 $x31)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (=> $x141 $x231)))
 (let (($x213 (= $x236 true)))
 (let (($x112 (= $x141 true)))
 (let (($x109 (and $x112 $x213)))
 (let (($x250 (and $x109 $x248)))
 (let (($x255 (and $x250 $x230)))
 (let (($x6 (and $x255 $x89)))
 (let (($x238 (and $x6 $x228)))
 (let (($x115 (and $x238 $x135)))
 (let (($x125 (and $x115 $x241)))
 (let (($x264 (and $x125 $x229)))
 (let (($x207 (and $x264 $x92)))
 (let (($x224 (and $x207 $x290)))
 (let (($x291 (and $x224 $x286)))
 (let (($x142 (and $x291 $x245)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x200 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x200 (_ bv1 32))))
 (let (($x46 (and $x201 $x142)))
 (let (($x209 (forall ((input.ind-%var2051X (_ BitVec 32)) )(let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2051X)))
 (let ((?x173 (input.spec-%var-x-1.1.1 input.ind-%var2051X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2051X)))
 (=> $x11 (= ?x173 ?x94))))))
 ))
 (let (($x136 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2050X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2050X)))
 (= $x11 $x64))))
 ))
 (let (($x219 (and $x136 $x209)))
 (let (($x295 (and $x219 $x46)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x15 $x295)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x5 (and $x143 $x294)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x40 $x5)))
 (let (($x102 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd ?x14 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x174 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x12 (or false (or false (and (and true (or $x23 $x174)) (or $x26 $x102))))))
 (let (($x20 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x12)))
 (let (($x217 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x12)))
 (let (($x121 (and $x217 $x39)))
 (let (($x55 (=> $x121 $x87)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x106 (bvule ?x251 (_ bv4294967294 32))))
 (let (($x87 (= $x106 true)))
 (let ((?x292 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x88 (bvneg ?x292)))
 (let (($x126 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x126 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x286 (= $x289 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x253 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x10)))
 (let ((?x161 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x161)))
 (let ((?x168 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x168)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x104 $x182)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (and $x262 $x244)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x257 $x107)))
 (let (($x56 (not $x66)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x137 $x101)))
 (let (($x45 (and (not $x49) $x56)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x261 $x206)))
 (let (($x222 (not $x61)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x268 $x269)))
 (let (($x144 (and (not $x18) $x222)))
 (let (($x72 (and (and (and (and (and (and $x144 $x45) $x129) $x68) $x53) $x187) $x38)))
 (let (($x155 (and $x72 $x32)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x260 (or false (or false (and (and true (or $x279 $x275)) (or $x273 $x271))))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x260)))
 (let (($x54 (and $x265 $x155)))
 (let (($x92 (= $x54 true)))
 (let (($x259 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x229 (= $x259 true)))
 (let ((?x227 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x139 (= (_ bv0 2) ?x227)))
 (let (($x241 (= $x139 true)))
 (let (($x17 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x135 (= $x17 true)))
 (let (($x99 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x75 (bvadd (bvmul input.ind-%var2041X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x186))))
 (let ((?x173 (input.spec-%var-x-1.1.1 input.ind-%var2041X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2041X)))
 (=> $x11 (= ?x173 ?x282))))))))
 ))
 (let (($x41 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X input.dst.llvm-%n))))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2040X)))
 (= $x11 $x128))))
 ))
 (let (($x150 (and $x41 $x99)))
 (let (($x228 (= $x150 true)))
 (let (($x221 (forall ((input.ind-%var2031X (_ BitVec 32)) )(let ((?x75 (bvadd (bvmul input.ind-%var2031X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem ?x75))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x75 (_ bv2 32))) ?x186))))
 (let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2031X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2031X)))
 (=> $x64 (= ?x94 ?x282))))))))
 ))
 (let (($x83 (forall ((input.ind-%var2030X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var2030X) (bvult input.ind-%var2030X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2030X)))
 (= $x64 $x128))))
 ))
 (let (($x194 (and $x83 $x221)))
 (let (($x89 (= $x194 true)))
 (let (($x33 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x33 true)))
 (let ((?x147 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x266 (bvneg ?x147)))
 (let (($x249 (= ?x266 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x249 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x215 (bvsub ?x14 ?x77)))
 (let (($x100 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x215) (bvult ?x14 ?x215))))
 (let (($x239 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x240 (ite $x239 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x183 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x37 (bvmul (_ bv4 64) ?x183)))
 (let ((?x232 ((_ extract 63 32) ?x37)))
 (let (($x243 (= ?x232 ?x240)))
 (let (($x31 (and $x243 $x100)))
 (let (($x196 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x231 (and $x196 $x31)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (=> $x141 $x231)))
 (let (($x213 (= $x236 true)))
 (let (($x112 (= $x141 true)))
 (let (($x109 (and $x112 $x213)))
 (let (($x250 (and $x109 $x248)))
 (let (($x255 (and $x250 $x230)))
 (let (($x6 (and $x255 $x89)))
 (let (($x238 (and $x6 $x228)))
 (let (($x115 (and $x238 $x135)))
 (let (($x125 (and $x115 $x241)))
 (let (($x264 (and $x125 $x229)))
 (let (($x207 (and $x264 $x92)))
 (let (($x224 (and $x207 $x290)))
 (let (($x291 (and $x224 $x286)))
 (let (($x142 (and $x291 $x245)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x200 (ite $x34 (_ bv1 32) (_ bv0 32))))
 (let (($x201 (bvuge ?x200 (_ bv1 32))))
 (let (($x46 (and $x201 $x142)))
 (let (($x209 (forall ((input.ind-%var2051X (_ BitVec 32)) )(let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2051X)))
 (let ((?x173 (input.spec-%var-x-1.1.1 input.ind-%var2051X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2051X)))
 (=> $x11 (= ?x173 ?x94))))))
 ))
 (let (($x136 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2050X)))
 (let (($x11 (input.spec-%var-x-1.0.1 input.ind-%var2050X)))
 (= $x11 $x64))))
 ))
 (let (($x219 (and $x136 $x209)))
 (let (($x295 (and $x219 $x46)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x15 $x295)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x5 (and $x143 $x294)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x39 (and $x40 $x5)))
 (let (($x102 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd ?x14 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x174 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x12 (or false (or false (and (and true (or $x23 $x174)) (or $x26 $x102))))))
 (let (($x20 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x12)))
 (let (($x217 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x12)))
 (let (($x121 (and $x217 $x39)))
 (let (($x55 (=> $x121 $x87)))
 (not $x55))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (bvsge ?x13 (_ bv0 32))))
 (let (($x178 (= $x163 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x151)))
 (let (($x113 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x113 true)))
 (let (($x50 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x50 true)))
 (let (($x148 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x148 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x48)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x170)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x193)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x44 $x205)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x80 $x62)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x192 $x254)))
 (let (($x16 (not $x132)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x117 $x157)))
 (let (($x287 (and (not $x91) $x16)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x288 $x7)))
 (let (($x124 (not $x172)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x289 $x286)))
 (let (($x114 (and (not $x55) $x124)))
 (let (($x198 (and (and (and (and (and (and $x114 $x287) $x237) $x247) $x97) $x199) $x189)))
 (let (($x108 (and $x198 $x131)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x251 (or false (or false (and (and true (or $x126 $x245)) (or $x295 $x294))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x251)))
 (let (($x19 (and $x87 $x108)))
 (let (($x79 (= $x19 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x207 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x155 (= (_ bv0 2) ?x32)))
 (let (($x54 (= $x155 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x161 true)))
 (let (($x78 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var2076X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x276))))
 (let ((?x112 (input.spec-%var-x-1.1.1 input.ind-%var2076X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2076X)))
 (=> $x136 (= ?x112 ?x226))))))))
 ))
 (let (($x49 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var2075X) (bvult input.ind-%var2075X input.dst.llvm-%n))))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2075X)))
 (= $x136 $x89))))
 ))
 (let (($x168 (and $x49 $x78)))
 (let (($x187 (= $x168 true)))
 (let (($x268 (forall ((input.ind-%var2066X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var2066X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x276))))
 (let ((?x196 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2066X)))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2066X)))
 (=> $x25 (= ?x196 ?x226))))))))
 ))
 (let (($x176 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var2065X) (bvult input.ind-%var2065X input.dst.llvm-%n))))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2065X)))
 (= $x25 $x89))))
 ))
 (let (($x269 (and $x176 $x268)))
 (let (($x18 (= $x269 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x195 (= $x220 true)))
 (let ((?x120 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x120)))
 (let (($x71 (= ?x52 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x71 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x248 (bvsub ?x14 ?x77)))
 (let (($x230 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x248) (bvult ?x14 ?x248))))
 (let (($x147 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x147 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x213 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x213)))
 (let ((?x27 ((_ extract 63 32) ?x109)))
 (let (($x249 (= ?x27 ?x123)))
 (let (($x255 (and $x249 $x230)))
 (let (($x231 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x171 (and $x231 $x255)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x141 $x171)))
 (let (($x128 (= $x22 true)))
 (let (($x234 (= $x141 true)))
 (let (($x51 (and $x234 $x128)))
 (let (($x70 (and $x51 $x280)))
 (let (($x76 (and $x70 $x195)))
 (let (($x73 (and $x76 $x18)))
 (let (($x127 (and $x73 $x187)))
 (let (($x72 (and $x127 $x38)))
 (let (($x92 (and $x72 $x54)))
 (let (($x290 (and $x92 $x253)))
 (let (($x103 (and $x290 $x79)))
 (let (($x258 (and $x103 $x140)))
 (let (($x74 (and $x258 $x154)))
 (let (($x84 (and $x74 $x242)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x215 (ite $x235 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x215 (_ bv1 32))))
 (let (($x93 (and $x233 $x84)))
 (let (($x210 (forall ((input.ind-%var2086X (_ BitVec 32)) )(let ((?x196 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2086X)))
 (let ((?x112 (input.spec-%var-x-1.1.1 input.ind-%var2086X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2086X)))
 (=> $x136 (= ?x112 ?x196))))))
 ))
 (let (($x218 (forall ((input.ind-%var2085X (_ BitVec 32)) )(let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2085X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2085X)))
 (= $x136 $x25))))
 ))
 (let (($x240 (and $x218 $x210)))
 (let (($x85 (and $x240 $x93)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x188 $x85)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x105 (and $x119 $x90)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x152 $x105)))
 (let (($x35 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd ?x14 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x164 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x217 (or false (or false (and (and true (or $x24 $x164)) (or $x57 $x35))))))
 (let (($x40 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x217)))
 (let (($x177 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x217)))
 (let (($x149 (and $x177 $x166)))
 (let (($x98 (=> $x149 $x178)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x163 (bvsge ?x13 (_ bv0 32))))
 (let (($x178 (= $x163 true)))
 (let ((?x151 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x29 (bvneg ?x151)))
 (let (($x113 (= ?x29 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (= $x113 true)))
 (let (($x50 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x154 (= $x50 true)))
 (let (($x148 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x140 (= $x148 true)))
 (let ((?x48 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x48)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x170)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x36)))
 (let ((?x193 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x193)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x44 $x205)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (and $x80 $x62)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x192 $x254)))
 (let (($x16 (not $x132)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x117 $x157)))
 (let (($x287 (and (not $x91) $x16)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x288 $x7)))
 (let (($x124 (not $x172)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x289 $x286)))
 (let (($x114 (and (not $x55) $x124)))
 (let (($x198 (and (and (and (and (and (and $x114 $x287) $x237) $x247) $x97) $x199) $x189)))
 (let (($x108 (and $x198 $x131)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x251 (or false (or false (and (and true (or $x126 $x245)) (or $x295 $x294))))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x251)))
 (let (($x19 (and $x87 $x108)))
 (let (($x79 (= $x19 true)))
 (let (($x207 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x207 true)))
 (let ((?x32 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x155 (= (_ bv0 2) ?x32)))
 (let (($x54 (= $x155 true)))
 (let (($x161 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x161 true)))
 (let (($x78 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var2076X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x276))))
 (let ((?x112 (input.spec-%var-x-1.1.1 input.ind-%var2076X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2076X)))
 (=> $x136 (= ?x112 ?x226))))))))
 ))
 (let (($x49 (forall ((input.ind-%var2075X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var2075X) (bvult input.ind-%var2075X input.dst.llvm-%n))))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2075X)))
 (= $x136 $x89))))
 ))
 (let (($x168 (and $x49 $x78)))
 (let (($x187 (= $x168 true)))
 (let (($x268 (forall ((input.ind-%var2066X (_ BitVec 32)) )(let ((?x159 (bvadd (bvmul input.ind-%var2066X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x276))))
 (let ((?x196 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2066X)))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2066X)))
 (=> $x25 (= ?x196 ?x226))))))))
 ))
 (let (($x176 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let (($x89 (and (bvule (_ bv0 32) input.ind-%var2065X) (bvult input.ind-%var2065X input.dst.llvm-%n))))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2065X)))
 (= $x25 $x89))))
 ))
 (let (($x269 (and $x176 $x268)))
 (let (($x18 (= $x269 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x195 (= $x220 true)))
 (let ((?x120 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x52 (bvneg ?x120)))
 (let (($x71 (= ?x52 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x71 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x248 (bvsub ?x14 ?x77)))
 (let (($x230 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x248) (bvult ?x14 ?x248))))
 (let (($x147 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x123 (ite $x147 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x213 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x109 (bvmul (_ bv4 64) ?x213)))
 (let ((?x27 ((_ extract 63 32) ?x109)))
 (let (($x249 (= ?x27 ?x123)))
 (let (($x255 (and $x249 $x230)))
 (let (($x231 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x171 (and $x231 $x255)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x141 $x171)))
 (let (($x128 (= $x22 true)))
 (let (($x234 (= $x141 true)))
 (let (($x51 (and $x234 $x128)))
 (let (($x70 (and $x51 $x280)))
 (let (($x76 (and $x70 $x195)))
 (let (($x73 (and $x76 $x18)))
 (let (($x127 (and $x73 $x187)))
 (let (($x72 (and $x127 $x38)))
 (let (($x92 (and $x72 $x54)))
 (let (($x290 (and $x92 $x253)))
 (let (($x103 (and $x290 $x79)))
 (let (($x258 (and $x103 $x140)))
 (let (($x74 (and $x258 $x154)))
 (let (($x84 (and $x74 $x242)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x215 (ite $x235 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x215 (_ bv1 32))))
 (let (($x93 (and $x233 $x84)))
 (let (($x210 (forall ((input.ind-%var2086X (_ BitVec 32)) )(let ((?x196 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2086X)))
 (let ((?x112 (input.spec-%var-x-1.1.1 input.ind-%var2086X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2086X)))
 (=> $x136 (= ?x112 ?x196))))))
 ))
 (let (($x218 (forall ((input.ind-%var2085X (_ BitVec 32)) )(let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2085X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var2085X)))
 (= $x136 $x25))))
 ))
 (let (($x240 (and $x218 $x210)))
 (let (($x85 (and $x240 $x93)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x188 $x85)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x105 (and $x119 $x90)))
 (let (($x152 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x152 $x105)))
 (let (($x35 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd ?x14 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x164 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x217 (or false (or false (and (and true (or $x24 $x164)) (or $x57 $x35))))))
 (let (($x40 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x217)))
 (let (($x177 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x217)))
 (let (($x149 (and $x177 $x166)))
 (let (($x98 (=> $x149 $x178)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x183 (bvule ?x182 (_ bv4294967294 32))))
 (let (($x200 (= $x183 true)))
 (let ((?x95 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x95)))
 (let (($x45 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x45 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x262 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x66 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x261 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x115 (bvsub ?x14 ?x77)))
 (let (($x283 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x115) (bvult ?x14 ?x115))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x135 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x259)))
 (let ((?x139 ((_ extract 63 32) ?x227)))
 (let (($x238 (= ?x139 ?x135)))
 (let (($x116 (and $x238 $x283)))
 (let (($x228 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x264 (and $x228 $x116)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x141 $x264)))
 (let (($x267 (= $x208 true)))
 (let (($x96 (= $x141 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x145)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x224)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x149 $x163)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x166 $x178)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x74 $x151)))
 (let (($x113 (not $x29)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x258 $x50)))
 (let (($x84 (and (not $x154) $x113)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x108 $x19)))
 (let (($x103 (not $x79)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x256 $x247)))
 (let (($x140 (and (not $x131) $x103)))
 (let (($x153 (and (and (and (and (and (and $x140 $x84) $x85) $x105) $x98) $x156) $x63)))
 (let (($x64 (and $x153 $x173)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x189 (or false (or false (and (and true (or $x193 $x205)) (or $x8 $x36))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x189)))
 (let (($x209 (and $x48 $x64)))
 (let (($x41 (= $x209 true)))
 (let ((?x287 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x246 (= (_ bv0 2) ?x287)))
 (let (($x160 (= $x246 true)))
 (let (($x181 (forall ((input.ind-%var2111X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var2111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x187))))
 (let ((?x234 (input.spec-%var-x-1.1.1 input.ind-%var2111X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2111X)))
 (=> $x218 (= ?x234 ?x32))))))))
 ))
 (let (($x46 (forall ((input.ind-%var2110X (_ BitVec 32)) )(let (($x176 (and (bvule (_ bv0 32) input.ind-%var2110X) (bvult input.ind-%var2110X input.dst.llvm-%n))))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2110X)))
 (= $x218 $x176))))
 ))
 (let (($x192 (and $x46 $x181)))
 (let (($x254 (= $x192 true)))
 (let (($x92 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var2101X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x187))))
 (let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2101X)))
 (let (($x232 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2101X)))
 (=> $x232 (= ?x231 ?x32))))))))
 ))
 (let (($x270 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x176 (and (bvule (_ bv0 32) input.ind-%var2100X) (bvult input.ind-%var2100X input.dst.llvm-%n))))
 (let (($x232 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2100X)))
 (= $x232 $x176))))
 ))
 (let (($x207 (and $x270 $x92)))
 (let (($x253 (= $x207 true)))
 (let (($x71 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x280 (= $x71 true)))
 (let ((?x128 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x128)))
 (let (($x120 (= ?x51 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x120 true)))
 (let (($x230 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x230 true)))
 (let (($x75 (and $x255 $x52)))
 (let (($x70 (and $x75 $x280)))
 (let (($x290 (and $x70 $x253)))
 (let (($x132 (and $x290 $x254)))
 (let (($x237 (and $x132 $x160)))
 (let (($x30 (and $x237 $x41)))
 (let (($x190 (and $x30 $x96)))
 (let (($x107 (and $x190 $x267)))
 (let (($x222 (and $x107 $x61)))
 (let (($x122 (and $x222 $x56)))
 (let (($x65 (and $x122 $x179)))
 (let (($x68 (and $x65 $x129)))
 (let (($x250 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x248 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x248 (_ bv1 32))))
 (let (($x104 (and $x82 $x68)))
 (let (($x266 (forall ((input.ind-%var2121X (_ BitVec 32)) )(let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2121X)))
 (let ((?x234 (input.spec-%var-x-1.1.1 input.ind-%var2121X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2121X)))
 (=> $x218 (= ?x234 ?x231))))))
 ))
 (let (($x243 (forall ((input.ind-%var2120X (_ BitVec 32)) )(let (($x232 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2120X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2120X)))
 (= $x218 $x232))))
 ))
 (let (($x123 (and $x243 $x266)))
 (let (($x206 (and $x123 $x104)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x225 $x206)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x137 (and $x15 $x144)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x43 $x137)))
 (let (($x12 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x14 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x26 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x164)))
 (let (($x177 (or false (or false (and (and true (or $x111 $x26)) (or $x130 $x12))))))
 (let (($x152 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x177)))
 (let (($x185 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x177)))
 (let (($x257 (and $x185 $x197)))
 (let (($x37 (=> $x257 $x200)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x183 (bvule ?x182 (_ bv4294967294 32))))
 (let (($x200 (= $x183 true)))
 (let ((?x95 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x211 (bvneg ?x95)))
 (let (($x45 (= ?x211 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (= $x45 true)))
 (let (($x262 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x262 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x66 true)))
 (let (($x261 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x261 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x115 (bvsub ?x14 ?x77)))
 (let (($x283 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x115) (bvult ?x14 ?x115))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x135 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x227 (bvmul (_ bv4 64) ?x259)))
 (let ((?x139 ((_ extract 63 32) ?x227)))
 (let (($x238 (= ?x139 ?x135)))
 (let (($x116 (and $x238 $x283)))
 (let (($x228 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x264 (and $x228 $x116)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (=> $x141 $x264)))
 (let (($x267 (= $x208 true)))
 (let (($x96 (= $x141 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x145)))
 (let ((?x224 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x224)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x149 $x163)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (and $x166 $x178)))
 (let (($x105 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x74 $x151)))
 (let (($x113 (not $x29)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x258 $x50)))
 (let (($x84 (and (not $x154) $x113)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x108 $x19)))
 (let (($x103 (not $x79)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x256 $x247)))
 (let (($x140 (and (not $x131) $x103)))
 (let (($x153 (and (and (and (and (and (and $x140 $x84) $x85) $x105) $x98) $x156) $x63)))
 (let (($x64 (and $x153 $x173)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x189 (or false (or false (and (and true (or $x193 $x205)) (or $x8 $x36))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x189)))
 (let (($x209 (and $x48 $x64)))
 (let (($x41 (= $x209 true)))
 (let ((?x287 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x246 (= (_ bv0 2) ?x287)))
 (let (($x160 (= $x246 true)))
 (let (($x181 (forall ((input.ind-%var2111X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var2111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x187))))
 (let ((?x234 (input.spec-%var-x-1.1.1 input.ind-%var2111X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2111X)))
 (=> $x218 (= ?x234 ?x32))))))))
 ))
 (let (($x46 (forall ((input.ind-%var2110X (_ BitVec 32)) )(let (($x176 (and (bvule (_ bv0 32) input.ind-%var2110X) (bvult input.ind-%var2110X input.dst.llvm-%n))))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2110X)))
 (= $x218 $x176))))
 ))
 (let (($x192 (and $x46 $x181)))
 (let (($x254 (= $x192 true)))
 (let (($x92 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var2101X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x187))))
 (let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2101X)))
 (let (($x232 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2101X)))
 (=> $x232 (= ?x231 ?x32))))))))
 ))
 (let (($x270 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x176 (and (bvule (_ bv0 32) input.ind-%var2100X) (bvult input.ind-%var2100X input.dst.llvm-%n))))
 (let (($x232 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2100X)))
 (= $x232 $x176))))
 ))
 (let (($x207 (and $x270 $x92)))
 (let (($x253 (= $x207 true)))
 (let (($x71 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x280 (= $x71 true)))
 (let ((?x128 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x51 (bvneg ?x128)))
 (let (($x120 (= ?x51 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x120 true)))
 (let (($x230 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x230 true)))
 (let (($x75 (and $x255 $x52)))
 (let (($x70 (and $x75 $x280)))
 (let (($x290 (and $x70 $x253)))
 (let (($x132 (and $x290 $x254)))
 (let (($x237 (and $x132 $x160)))
 (let (($x30 (and $x237 $x41)))
 (let (($x190 (and $x30 $x96)))
 (let (($x107 (and $x190 $x267)))
 (let (($x222 (and $x107 $x61)))
 (let (($x122 (and $x222 $x56)))
 (let (($x65 (and $x122 $x179)))
 (let (($x68 (and $x65 $x129)))
 (let (($x250 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x248 (ite $x250 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x248 (_ bv1 32))))
 (let (($x104 (and $x82 $x68)))
 (let (($x266 (forall ((input.ind-%var2121X (_ BitVec 32)) )(let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2121X)))
 (let ((?x234 (input.spec-%var-x-1.1.1 input.ind-%var2121X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2121X)))
 (=> $x218 (= ?x234 ?x231))))))
 ))
 (let (($x243 (forall ((input.ind-%var2120X (_ BitVec 32)) )(let (($x232 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2120X)))
 (let (($x218 (input.spec-%var-x-1.0.1 input.ind-%var2120X)))
 (= $x218 $x232))))
 ))
 (let (($x123 (and $x243 $x266)))
 (let (($x206 (and $x123 $x104)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x144 (and $x225 $x206)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x137 (and $x15 $x144)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x43 $x137)))
 (let (($x12 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x164 (bvadd ?x14 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x164)))
 (let (($x26 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x111 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x164)))
 (let (($x177 (or false (or false (and (and true (or $x111 $x26)) (or $x130 $x12))))))
 (let (($x152 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x177)))
 (let (($x185 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x177)))
 (let (($x257 (and $x185 $x197)))
 (let (($x37 (=> $x257 $x200)))
 (not $x37))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (bvsge ?x117 (_ bv0 32))))
 (let (($x215 (= $x213 true)))
 (let ((?x87 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x87)))
 (let (($x251 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x251 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x172 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (= $x39 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x291 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x276 (bvsub ?x14 ?x77)))
 (let (($x194 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x276) (bvult ?x14 ?x276))))
 (let (($x275 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x278 (ite $x275 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x269)))
 (let ((?x260 ((_ extract 63 32) ?x226)))
 (let (($x279 (= ?x260 ?x278)))
 (let (($x221 (and $x279 $x194)))
 (let (($x273 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x73 (and $x273 $x221)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (=> $x141 $x73)))
 (let (($x101 (= $x274 true)))
 (let (($x184 (= $x141 true)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x236)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x252)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x257 $x183)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x197 $x200)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x65 $x95)))
 (let (($x45 (not $x211)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x122 $x262)))
 (let (($x68 (and (not $x179) $x45)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x107 $x261)))
 (let (($x222 (not $x61)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x150 $x228)))
 (let (($x56 (and (not $x267) $x222)))
 (let (($x31 (and (and (and (and (and (and $x56 $x68) $x206) $x137) $x37) $x118) $x239)))
 (let (($x25 (and $x31 $x112)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x116 (or false (or false (and (and true (or $x139 $x17)) (or $x241 $x115))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x210 (and $x208 $x25)))
 (let (($x159 (= $x210 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x30 (= (_ bv0 2) ?x41)))
 (let (($x96 (= $x30 true)))
 (let (($x153 (forall ((input.ind-%var2146X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var2146X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x170))))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var2146X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2146X)))
 (=> $x243 (= ?x33 ?x148))))))))
 ))
 (let (($x84 (forall ((input.ind-%var2145X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var2145X) (bvult input.ind-%var2145X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2145X)))
 (= $x243 $x253))))
 ))
 (let (($x145 (and $x84 $x153)))
 (let (($x173 (= $x145 true)))
 (let (($x79 (forall ((input.ind-%var2136X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var2136X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x170))))
 (let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2136X)))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2136X)))
 (=> $x27 (= ?x171 ?x148))))))))
 ))
 (let (($x142 (forall ((input.ind-%var2135X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var2135X) (bvult input.ind-%var2135X input.dst.llvm-%n))))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2135X)))
 (= $x27 $x253))))
 ))
 (let (($x103 (and $x142 $x79)))
 (let (($x140 (= $x103 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x161 true)))
 (let ((?x49 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x49)))
 (let (($x10 (= ?x244 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x10 true)))
 (let (($x176 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x99 (= $x176 true)))
 (let (($x127 (and $x99 $x271)))
 (let (($x168 (and $x127 $x78)))
 (let (($x258 (and $x168 $x140)))
 (let (($x64 (and $x258 $x173)))
 (let (($x190 (and $x64 $x96)))
 (let (($x277 (and $x190 $x159)))
 (let (($x195 (and $x277 $x184)))
 (let (($x5 (and $x195 $x101)))
 (let (($x88 (and $x5 $x106)))
 (let (($x7 (and $x88 $x121)))
 (let (($x67 (and $x7 $x55)))
 (let (($x288 (and $x67 $x286)))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x70 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x70 (_ bv1 32))))
 (let (($x124 (and $x6 $x288)))
 (let (($x52 (forall ((input.ind-%var2156X (_ BitVec 32)) )(let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2156X)))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var2156X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2156X)))
 (=> $x243 (= ?x33 ?x171))))))
 ))
 (let (($x249 (forall ((input.ind-%var2155X (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2155X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2155X)))
 (= $x243 $x27))))
 ))
 (let (($x75 (and $x249 $x52)))
 (let (($x292 (and $x75 $x124)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x219 $x292)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x245 (and $x188 $x126)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x143 $x245)))
 (let (($x217 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x14 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x57 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x185 (or false (or false (and (and true (or $x42 $x57)) (or $x20 $x217))))))
 (let (($x43 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x185)))
 (let (($x60 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x185)))
 (let (($x294 (and $x60 $x114)))
 (let (($x109 (=> $x294 $x215)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x117 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (bvsge ?x117 (_ bv0 32))))
 (let (($x215 (= $x213 true)))
 (let ((?x87 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x87)))
 (let (($x251 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x251 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x172 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x121 (= $x39 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x291 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x276 (bvsub ?x14 ?x77)))
 (let (($x194 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x276) (bvult ?x14 ?x276))))
 (let (($x275 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x278 (ite $x275 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x269)))
 (let ((?x260 ((_ extract 63 32) ?x226)))
 (let (($x279 (= ?x260 ?x278)))
 (let (($x221 (and $x279 $x194)))
 (let (($x273 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x73 (and $x273 $x221)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (=> $x141 $x73)))
 (let (($x101 (= $x274 true)))
 (let (($x184 (= $x141 true)))
 (let ((?x236 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x236)))
 (let ((?x252 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x252)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x257 $x183)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (and $x197 $x200)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x65 $x95)))
 (let (($x45 (not $x211)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x122 $x262)))
 (let (($x68 (and (not $x179) $x45)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x107 $x261)))
 (let (($x222 (not $x61)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (and $x150 $x228)))
 (let (($x56 (and (not $x267) $x222)))
 (let (($x31 (and (and (and (and (and (and $x56 $x68) $x206) $x137) $x37) $x118) $x239)))
 (let (($x25 (and $x31 $x112)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x116 (or false (or false (and (and true (or $x139 $x17)) (or $x241 $x115))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x210 (and $x208 $x25)))
 (let (($x159 (= $x210 true)))
 (let ((?x41 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x30 (= (_ bv0 2) ?x41)))
 (let (($x96 (= $x30 true)))
 (let (($x153 (forall ((input.ind-%var2146X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var2146X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x170))))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var2146X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2146X)))
 (=> $x243 (= ?x33 ?x148))))))))
 ))
 (let (($x84 (forall ((input.ind-%var2145X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var2145X) (bvult input.ind-%var2145X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2145X)))
 (= $x243 $x253))))
 ))
 (let (($x145 (and $x84 $x153)))
 (let (($x173 (= $x145 true)))
 (let (($x79 (forall ((input.ind-%var2136X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var2136X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x170))))
 (let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2136X)))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2136X)))
 (=> $x27 (= ?x171 ?x148))))))))
 ))
 (let (($x142 (forall ((input.ind-%var2135X (_ BitVec 32)) )(let (($x253 (and (bvule (_ bv0 32) input.ind-%var2135X) (bvult input.ind-%var2135X input.dst.llvm-%n))))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2135X)))
 (= $x27 $x253))))
 ))
 (let (($x103 (and $x142 $x79)))
 (let (($x140 (= $x103 true)))
 (let (($x161 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x161 true)))
 (let ((?x49 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x49)))
 (let (($x10 (= ?x244 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x10 true)))
 (let (($x176 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x99 (= $x176 true)))
 (let (($x127 (and $x99 $x271)))
 (let (($x168 (and $x127 $x78)))
 (let (($x258 (and $x168 $x140)))
 (let (($x64 (and $x258 $x173)))
 (let (($x190 (and $x64 $x96)))
 (let (($x277 (and $x190 $x159)))
 (let (($x195 (and $x277 $x184)))
 (let (($x5 (and $x195 $x101)))
 (let (($x88 (and $x5 $x106)))
 (let (($x7 (and $x88 $x121)))
 (let (($x67 (and $x7 $x55)))
 (let (($x288 (and $x67 $x286)))
 (let (($x280 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x70 (ite $x280 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x70 (_ bv1 32))))
 (let (($x124 (and $x6 $x288)))
 (let (($x52 (forall ((input.ind-%var2156X (_ BitVec 32)) )(let ((?x171 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2156X)))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var2156X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2156X)))
 (=> $x243 (= ?x33 ?x171))))))
 ))
 (let (($x249 (forall ((input.ind-%var2155X (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2155X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2155X)))
 (= $x243 $x27))))
 ))
 (let (($x75 (and $x249 $x52)))
 (let (($x292 (and $x75 $x124)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x126 (and $x219 $x292)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x245 (and $x188 $x126)))
 (let (($x143 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x143 $x245)))
 (let (($x217 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x14 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x57 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x185 (or false (or false (and (and true (or $x42 $x57)) (or $x20 $x217))))))
 (let (($x43 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x185)))
 (let (($x60 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x185)))
 (let (($x294 (and $x60 $x114)))
 (let (($x109 (=> $x294 $x215)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (bvule ?x94 input.dst.llvm-%n)))
 (let (($x248 (= $x128 true)))
 (let ((?x201 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x201)))
 (let (($x105 (= ?x166 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x105 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x13 (= $x11 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (= $x34 true)))
 (let (($x85 (forall ((input.ind-%var2181X (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul input.ind-%var2181X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x213))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var2181X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2181X)))
 (=> $x249 (= ?x89 ?x147))))))))
 ))
 (let (($x38 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var2180X) (bvult input.ind-%var2180X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2180X)))
 (= $x249 $x194))))
 ))
 (let (($x50 (and $x38 $x85)))
 (let (($x242 (= $x50 true)))
 (let (($x230 (forall ((input.ind-%var2171X (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul input.ind-%var2171X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x213))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2171X)))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2171X)))
 (=> $x83 (= ?x270 ?x147))))))))
 ))
 (let (($x73 (forall ((input.ind-%var2170X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var2170X) (bvult input.ind-%var2170X input.dst.llvm-%n))))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2170X)))
 (= $x83 $x194))))
 ))
 (let (($x250 (and $x73 $x230)))
 (let (($x82 (= $x250 true)))
 (let (($x268 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x269 (= $x268 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x112 (bvsub ?x14 ?x77)))
 (let (($x277 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x112) (bvult ?x14 ?x112))))
 (let (($x239 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x239 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x118 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x196 (bvmul (_ bv4 64) ?x118)))
 (let ((?x252 ((_ extract 63 32) ?x196)))
 (let (($x236 (= ?x252 ?x31)))
 (let (($x184 (and $x236 $x277)))
 (let (($x136 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x195 (and $x136 $x184)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (=> $x141 $x195)))
 (let (($x272 (= $x76 true)))
 (let (($x182 (= $x141 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x211)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x65)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x222)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x61 $x56)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (and $x261 $x122)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x283 (and $x229 $x186)))
 (let (($x116 (not $x283)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x238 $x241)))
 (let (($x150 (and (not $x115) $x116)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x259 $x264)))
 (let (($x139 (not $x227)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x79 $x103)))
 (let (($x135 (and (not $x125) $x139)))
 (let (($x144 (and (and (and (and (and (and $x135 $x150) $x267) $x107) $x262) $x129) $x95)))
 (let (($x137 (and $x144 $x45)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x30 (or false (or false (and (and true (or $x84 $x224)) (or $x145 $x173))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x233 (and $x190 $x137)))
 (let (($x197 (= $x233 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x256 (= (_ bv0 2) ?x170)))
 (let (($x148 (= $x256 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x48 true)))
 (let ((?x97 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x97)))
 (let (($x131 (= ?x8 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x131 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x253 true)))
 (let (($x189 (and $x290 $x160)))
 (let (($x59 (and $x189 $x199)))
 (let (($x108 (and $x59 $x148)))
 (let (($x257 (and $x108 $x197)))
 (let (($x183 (and $x257 $x182)))
 (let (($x273 (and $x183 $x272)))
 (let (($x226 (and $x273 $x269)))
 (let (($x218 (and $x226 $x82)))
 (let (($x74 (and $x218 $x242)))
 (let (($x98 (and $x74 $x90)))
 (let (($x163 (and $x98 $x13)))
 (let (($x178 (and $x163 $x149)))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x168 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x168 (_ bv1 32))))
 (let (($x293 (and $x207 $x178)))
 (let (($x271 (forall ((input.ind-%var2191X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2191X)))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var2191X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2191X)))
 (=> $x249 (= ?x89 ?x270))))))
 ))
 (let (($x71 (forall ((input.ind-%var2190X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2190X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2190X)))
 (= $x249 $x83))))
 ))
 (let (($x127 (and $x71 $x271)))
 (let (($x154 (and $x127 $x293)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x151 (and $x240 $x154)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x29 (and $x225 $x151)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x119 $x29)))
 (let (($x177 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd ?x14 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x130 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x60 (or false (or false (and (and true (or $x102 $x130)) (or $x40 $x177))))))
 (let (($x143 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x60)))
 (let (($x174 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x60)))
 (let (($x93 (and $x174 $x156)))
 (let (($x51 (=> $x93 $x248)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (bvule ?x94 input.dst.llvm-%n)))
 (let (($x248 (= $x128 true)))
 (let ((?x201 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x201)))
 (let (($x105 (= ?x166 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x105 true)))
 (let (($x11 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x13 (= $x11 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x90 (= $x34 true)))
 (let (($x85 (forall ((input.ind-%var2181X (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul input.ind-%var2181X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x213))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var2181X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2181X)))
 (=> $x249 (= ?x89 ?x147))))))))
 ))
 (let (($x38 (forall ((input.ind-%var2180X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var2180X) (bvult input.ind-%var2180X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2180X)))
 (= $x249 $x194))))
 ))
 (let (($x50 (and $x38 $x85)))
 (let (($x242 (= $x50 true)))
 (let (($x230 (forall ((input.ind-%var2171X (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul input.ind-%var2171X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x213))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2171X)))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2171X)))
 (=> $x83 (= ?x270 ?x147))))))))
 ))
 (let (($x73 (forall ((input.ind-%var2170X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var2170X) (bvult input.ind-%var2170X input.dst.llvm-%n))))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2170X)))
 (= $x83 $x194))))
 ))
 (let (($x250 (and $x73 $x230)))
 (let (($x82 (= $x250 true)))
 (let (($x268 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x269 (= $x268 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x112 (bvsub ?x14 ?x77)))
 (let (($x277 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x112) (bvult ?x14 ?x112))))
 (let (($x239 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x239 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x118 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x196 (bvmul (_ bv4 64) ?x118)))
 (let ((?x252 ((_ extract 63 32) ?x196)))
 (let (($x236 (= ?x252 ?x31)))
 (let (($x184 (and $x236 $x277)))
 (let (($x136 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x195 (and $x136 $x184)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x76 (=> $x141 $x195)))
 (let (($x272 (= $x76 true)))
 (let (($x182 (= $x141 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x211)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x65)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x129 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x56 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x222)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x61 $x56)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (and $x261 $x122)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x267 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x283 (and $x229 $x186)))
 (let (($x116 (not $x283)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x238 $x241)))
 (let (($x150 (and (not $x115) $x116)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x259 $x264)))
 (let (($x139 (not $x227)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x79 $x103)))
 (let (($x135 (and (not $x125) $x139)))
 (let (($x144 (and (and (and (and (and (and $x135 $x150) $x267) $x107) $x262) $x129) $x95)))
 (let (($x137 (and $x144 $x45)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x113 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x113)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x113)))
 (let (($x30 (or false (or false (and (and true (or $x84 $x224)) (or $x145 $x173))))))
 (let (($x190 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x233 (and $x190 $x137)))
 (let (($x197 (= $x233 true)))
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x256 (= (_ bv0 2) ?x170)))
 (let (($x148 (= $x256 true)))
 (let (($x48 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x48 true)))
 (let ((?x97 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x97)))
 (let (($x131 (= ?x8 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x160 (= $x131 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x253 true)))
 (let (($x189 (and $x290 $x160)))
 (let (($x59 (and $x189 $x199)))
 (let (($x108 (and $x59 $x148)))
 (let (($x257 (and $x108 $x197)))
 (let (($x183 (and $x257 $x182)))
 (let (($x273 (and $x183 $x272)))
 (let (($x226 (and $x273 $x269)))
 (let (($x218 (and $x226 $x82)))
 (let (($x74 (and $x218 $x242)))
 (let (($x98 (and $x74 $x90)))
 (let (($x163 (and $x98 $x13)))
 (let (($x178 (and $x163 $x149)))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x168 (ite $x78 (_ bv1 32) (_ bv0 32))))
 (let (($x207 (bvuge ?x168 (_ bv1 32))))
 (let (($x293 (and $x207 $x178)))
 (let (($x271 (forall ((input.ind-%var2191X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2191X)))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var2191X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2191X)))
 (=> $x249 (= ?x89 ?x270))))))
 ))
 (let (($x71 (forall ((input.ind-%var2190X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2190X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2190X)))
 (= $x249 $x83))))
 ))
 (let (($x127 (and $x71 $x271)))
 (let (($x154 (and $x127 $x293)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x151 (and $x240 $x154)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x29 (and $x225 $x151)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x156 (and $x119 $x29)))
 (let (($x177 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd ?x14 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x130 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x60 (or false (or false (and (and true (or $x102 $x130)) (or $x40 $x177))))))
 (let (($x143 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x60)))
 (let (($x174 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x60)))
 (let (($x93 (and $x174 $x156)))
 (let (($x51 (=> $x93 $x248)))
 (not $x51))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x244 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x49 (bvmul (_ bv4294967295 32) ?x205)))
 (let ((?x70 (bvneg ?x49)))
 (let (($x138 (= ?x70 ?x244)))
 (let (($x69 (= $x138 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x204)))
 (let (($x237 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x237 true)))
 (let (($x187 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x132 (= $x187 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x198 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x231 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x292 (= $x101 true)))
 (let (($x265 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x276 (= $x265 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x251 (bvsub ?x14 ?x77)))
 (let (($x121 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x251) (bvult ?x14 ?x251))))
 (let (($x279 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x106 (ite $x279 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x5 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x260 (bvmul (_ bv4 64) ?x5)))
 (let ((?x278 ((_ extract 63 32) ?x260)))
 (let (($x88 (= ?x278 ?x106)))
 (let (($x7 (and $x88 $x121)))
 (let (($x52 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x39 (and $x52 $x7)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (=> $x141 $x39)))
 (let (($x289 (= $x172 true)))
 (let (($x243 (= $x141 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x128)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x149 $x293)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x105 $x154)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x34 (and $x242 $x74)))
 (let (($x90 (not $x34)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x62 $x85)))
 (let (($x11 (and (not $x50) $x90)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x250 $x82)))
 (let (($x53 (not $x218)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x73 $x291)))
 (let (($x157 (and (not $x230) $x53)))
 (let (($x214 (and (and (and (and (and (and $x157 $x11) $x163) $x166) $x151) $x156) $x94)))
 (let (($x33 (and $x214 $x248)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x147 (or false (or false (and (and true (or $x282 $x55)) (or $x294 $x117))))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x176 (and $x234 $x33)))
 (let (($x280 (= $x176 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x220 (= (_ bv0 2) ?x226)))
 (let (($x18 (= $x220 true)))
 (let (($x76 (forall ((input.ind-%var2216X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var2216X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x107))))
 (let ((?x92 (input.spec-%var-x-1.1.1 input.ind-%var2216X)))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2216X)))
 (=> $x71 (= ?x92 ?x122))))))))
 ))
 (let (($x257 (forall ((input.ind-%var2215X (_ BitVec 32)) )(let (($x209 (and (bvule (_ bv0 32) input.ind-%var2215X) (bvult input.ind-%var2215X input.dst.llvm-%n))))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2215X)))
 (= $x71 $x209))))
 ))
 (let (($x272 (and $x257 $x76)))
 (let (($x273 (= $x272 true)))
 (let (($x179 (forall ((input.ind-%var2206X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var2206X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x107))))
 (let ((?x142 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2206X)))
 (let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2206X)))
 (=> $x72 (= ?x142 ?x122))))))))
 ))
 (let (($x30 (forall ((input.ind-%var2205X (_ BitVec 32)) )(let (($x209 (and (bvule (_ bv0 32) input.ind-%var2205X) (bvult input.ind-%var2205X input.dst.llvm-%n))))
 (let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2205X)))
 (= $x72 $x209))))
 ))
 (let (($x129 (and $x30 $x179)))
 (let (($x235 (= $x129 true)))
 (let ((?x148 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x148)))
 (let (($x258 (= ?x108 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x258 true)))
 (let (($x65 (and $x96 $x235)))
 (let (($x268 (and $x65 $x273)))
 (let (($x194 (and $x268 $x18)))
 (let (($x6 (and $x194 $x280)))
 (let (($x171 (and $x6 $x243)))
 (let (($x288 (and $x171 $x289)))
 (let (($x124 (and $x288 $x276)))
 (let (($x254 (and $x124 $x292)))
 (let (($x266 (and $x254 $x232)))
 (let (($x193 (and $x266 $x44)))
 (let (($x246 (and $x193 $x132)))
 (let (($x80 (and $x246 $x287)))
 (let (($x199 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x59 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x59 (_ bv1 32))))
 (let (($x155 (and $x36 $x80)))
 (let (($x160 (forall ((input.ind-%var2226X (_ BitVec 32)) )(let ((?x142 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2226X)))
 (let ((?x92 (input.spec-%var-x-1.1.1 input.ind-%var2226X)))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2226X)))
 (=> $x71 (= ?x92 ?x142))))))
 ))
 (let (($x161 (forall ((input.ind-%var2225X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2225X)))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2225X)))
 (= $x71 $x72))))
 ))
 (let (($x189 (and $x161 $x160)))
 (let (($x255 (and $x189 $x155)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x123 $x255)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x219 $x46)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x15 $x91)))
 (let (($x185 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x14 (_ bv3 32))))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x20 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x174 (or false (or false (and (and true (or $x35 $x20)) (or $x152 $x185))))))
 (let (($x119 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x174)))
 (let (($x164 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x174)))
 (let (($x192 (and $x164 $x54)))
 (let (($x86 (=> $x192 $x69)))
 (not $x86)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x244 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x49 (bvmul (_ bv4294967295 32) ?x205)))
 (let ((?x70 (bvneg ?x49)))
 (let (($x138 (= ?x70 ?x244)))
 (let (($x69 (= $x138 true)))
 (let ((?x204 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x204)))
 (let (($x237 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x237 true)))
 (let (($x187 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x132 (= $x187 true)))
 (let (($x198 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x44 (= $x198 true)))
 (let (($x231 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x232 (= $x231 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x292 (= $x101 true)))
 (let (($x265 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x276 (= $x265 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x251 (bvsub ?x14 ?x77)))
 (let (($x121 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x251) (bvult ?x14 ?x251))))
 (let (($x279 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x106 (ite $x279 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x5 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x260 (bvmul (_ bv4 64) ?x5)))
 (let ((?x278 ((_ extract 63 32) ?x260)))
 (let (($x88 (= ?x278 ?x106)))
 (let (($x7 (and $x88 $x121)))
 (let (($x52 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x39 (and $x52 $x7)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (=> $x141 $x39)))
 (let (($x289 (= $x172 true)))
 (let (($x243 (= $x141 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x248 (= (_ bv0 32) ?x128)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x94 (= (_ bv0 32) ?x93)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x149 $x293)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x105 $x154)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x34 (and $x242 $x74)))
 (let (($x90 (not $x34)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x62 $x85)))
 (let (($x11 (and (not $x50) $x90)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x250 $x82)))
 (let (($x53 (not $x218)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x73 $x291)))
 (let (($x157 (and (not $x230) $x53)))
 (let (($x214 (and (and (and (and (and (and $x157 $x11) $x163) $x166) $x151) $x156) $x94)))
 (let (($x33 (and $x214 $x248)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x147 (or false (or false (and (and true (or $x282 $x55)) (or $x294 $x117))))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x147)))
 (let (($x176 (and $x234 $x33)))
 (let (($x280 (= $x176 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x220 (= (_ bv0 2) ?x226)))
 (let (($x18 (= $x220 true)))
 (let (($x76 (forall ((input.ind-%var2216X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var2216X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x107))))
 (let ((?x92 (input.spec-%var-x-1.1.1 input.ind-%var2216X)))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2216X)))
 (=> $x71 (= ?x92 ?x122))))))))
 ))
 (let (($x257 (forall ((input.ind-%var2215X (_ BitVec 32)) )(let (($x209 (and (bvule (_ bv0 32) input.ind-%var2215X) (bvult input.ind-%var2215X input.dst.llvm-%n))))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2215X)))
 (= $x71 $x209))))
 ))
 (let (($x272 (and $x257 $x76)))
 (let (($x273 (= $x272 true)))
 (let (($x179 (forall ((input.ind-%var2206X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var2206X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x107))))
 (let ((?x142 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2206X)))
 (let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2206X)))
 (=> $x72 (= ?x142 ?x122))))))))
 ))
 (let (($x30 (forall ((input.ind-%var2205X (_ BitVec 32)) )(let (($x209 (and (bvule (_ bv0 32) input.ind-%var2205X) (bvult input.ind-%var2205X input.dst.llvm-%n))))
 (let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2205X)))
 (= $x72 $x209))))
 ))
 (let (($x129 (and $x30 $x179)))
 (let (($x235 (= $x129 true)))
 (let ((?x148 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x148)))
 (let (($x258 (= ?x108 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x258 true)))
 (let (($x65 (and $x96 $x235)))
 (let (($x268 (and $x65 $x273)))
 (let (($x194 (and $x268 $x18)))
 (let (($x6 (and $x194 $x280)))
 (let (($x171 (and $x6 $x243)))
 (let (($x288 (and $x171 $x289)))
 (let (($x124 (and $x288 $x276)))
 (let (($x254 (and $x124 $x292)))
 (let (($x266 (and $x254 $x232)))
 (let (($x193 (and $x266 $x44)))
 (let (($x246 (and $x193 $x132)))
 (let (($x80 (and $x246 $x287)))
 (let (($x199 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x59 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x59 (_ bv1 32))))
 (let (($x155 (and $x36 $x80)))
 (let (($x160 (forall ((input.ind-%var2226X (_ BitVec 32)) )(let ((?x142 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2226X)))
 (let ((?x92 (input.spec-%var-x-1.1.1 input.ind-%var2226X)))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2226X)))
 (=> $x71 (= ?x92 ?x142))))))
 ))
 (let (($x161 (forall ((input.ind-%var2225X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2225X)))
 (let (($x71 (input.spec-%var-x-1.0.1 input.ind-%var2225X)))
 (= $x71 $x72))))
 ))
 (let (($x189 (and $x161 $x160)))
 (let (($x255 (and $x189 $x155)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x46 (and $x123 $x255)))
 (let (($x219 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x219 $x46)))
 (let (($x15 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x54 (and $x15 $x91)))
 (let (($x185 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd ?x14 (_ bv3 32))))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x20 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x174 (or false (or false (and (and true (or $x35 $x20)) (or $x152 $x185))))))
 (let (($x119 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x174)))
 (let (($x164 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x174)))
 (let (($x192 (and $x164 $x54)))
 (let (($x86 (=> $x192 $x69)))
 (not $x86)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x32))))
 (let ((?x281 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x167)))
 (let ((?x233 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x159 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x233)))
 (let ((?x183 (bvmul (_ bv4294967295 32) ?x159)))
 (let ((?x277 (bvneg ?x183)))
 (let (($x284 (= ?x277 ?x281)))
 (let (($x285 (= $x284 true)))
 (let ((?x25 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x25)))
 (let (($x31 (= ?x112 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x31 true)))
 (let ((?x200 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x200)))
 (let (($x211 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x211 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x116 (= (_ bv0 2) ?x145)))
 (let (($x79 (= $x116 true)))
 (let (($x208 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (= $x208 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x139 true)))
 (let (($x186 (forall ((input.ind-%var2251X (_ BitVec 32)) )(let ((?x193 (bvadd (bvmul input.ind-%var2251X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x204))))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var2251X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2251X)))
 (=> $x161 (= ?x170 ?x255))))))))
 ))
 (let (($x221 (forall ((input.ind-%var2250X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var2250X) (bvult input.ind-%var2250X input.dst.llvm-%n))))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2250X)))
 (= $x161 $x88))))
 ))
 (let (($x241 (and $x221 $x186)))
 (let (($x115 (= $x241 true)))
 (let (($x54 (forall ((input.ind-%var2241X (_ BitVec 32)) )(let ((?x193 (bvadd (bvmul input.ind-%var2241X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x204))))
 (let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2241X)))
 (let (($x247 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2241X)))
 (=> $x247 (= ?x108 ?x255))))))))
 ))
 (let (($x251 (forall ((input.ind-%var2240X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var2240X) (bvult input.ind-%var2240X input.dst.llvm-%n))))
 (let (($x247 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2240X)))
 (= $x247 $x88))))
 ))
 (let (($x192 (and $x251 $x54)))
 (let (($x205 (= $x192 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x171 (= $x243 true)))
 (let (($x176 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x280 (= $x176 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x128 true)))
 (let (($x19 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 (bvsub ?x14 ?x77)) (bvult ?x14 (bvsub ?x14 ?x77)))))
 (let (($x166 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x105 (ite $x166 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x295 (bvmul (_ bv4 64) ?x163)))
 (let ((?x201 ((_ extract 63 32) ?x295)))
 (let (($x149 (= ?x201 ?x105)))
 (let (($x29 (and $x149 $x19)))
 (let (($x51 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x156 (and $x51 $x29)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (=> $x141 $x156)))
 (let (($x93 (= $x120 true)))
 (let (($x74 (= $x141 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x38)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x291)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x114)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x117 $x213)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x294 $x165)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x18 $x194)))
 (let (($x245 (not $x126)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x269 $x226)))
 (let (($x169 (and (not $x220) $x245)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x184 $x195)))
 (let (($x272 (not $x76)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x56 $x238)))
 (let (($x268 (and (not $x257) $x272)))
 (let (($x85 (and (and (and (and (and (and $x268 $x169) $x55) $x109) $x147) $x73) $x230)))
 (let (($x50 (and $x85 $x250)))
 (let (($x262 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x235 (or false (or false (and (and true (or $x66 $x267)) (or $x122 $x262))))))
 (let (($x197 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x235)))
 (let (($x98 (and $x197 $x50)))
 (let (($x242 (= $x98 true)))
 (let (($x34 (and $x242 $x74)))
 (let (($x94 (and $x34 $x93)))
 (let (($x33 (and $x94 $x248)))
 (let (($x6 (and $x33 $x280)))
 (let (($x99 (and $x6 $x171)))
 (let (($x49 (and $x99 $x205)))
 (let (($x227 (and $x49 $x115)))
 (let (($x135 (and $x227 $x264)))
 (let (($x84 (and $x135 $x283)))
 (let (($x150 (and $x84 $x79)))
 (let (($x37 (and $x150 $x45)))
 (let (($x196 (and $x37 $x118)))
 (let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x68 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x68 (_ bv1 32))))
 (let (($x202 (and $x228 $x196)))
 (let (($x209 (forall ((input.ind-%var2261X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2261X)))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var2261X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2261X)))
 (=> $x161 (= ?x170 ?x108))))))
 ))
 (let (($x48 (forall ((input.ind-%var2260X (_ BitVec 32)) )(let (($x247 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2260X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2260X)))
 (= $x161 $x247))))
 ))
 (let (($x41 (and $x48 $x209)))
 (let (($x252 (and $x41 $x202)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x236 (and $x75 $x252)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x210 (and $x240 $x236)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x188 $x210)))
 (let (($x60 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd ?x14 (_ bv3 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x40 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x164 (or false (or false (and (and true (or $x12 $x40)) (or $x43 $x60))))))
 (let (($x15 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x164)))
 (let (($x26 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x164)))
 (let (($x137 (and $x26 $x144)))
 (let (($x175 (=> $x137 $x285)))
 (not $x175)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x32))))
 (let ((?x281 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x167)))
 (let ((?x233 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x159 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x233)))
 (let ((?x183 (bvmul (_ bv4294967295 32) ?x159)))
 (let ((?x277 (bvneg ?x183)))
 (let (($x284 (= ?x277 ?x281)))
 (let (($x285 (= $x284 true)))
 (let ((?x25 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x25)))
 (let (($x31 (= ?x112 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x31 true)))
 (let ((?x200 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x200)))
 (let (($x211 (= ?x95 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x211 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x116 (= (_ bv0 2) ?x145)))
 (let (($x79 (= $x116 true)))
 (let (($x208 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x283 (= $x208 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (= $x139 true)))
 (let (($x186 (forall ((input.ind-%var2251X (_ BitVec 32)) )(let ((?x193 (bvadd (bvmul input.ind-%var2251X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x204))))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var2251X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2251X)))
 (=> $x161 (= ?x170 ?x255))))))))
 ))
 (let (($x221 (forall ((input.ind-%var2250X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var2250X) (bvult input.ind-%var2250X input.dst.llvm-%n))))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2250X)))
 (= $x161 $x88))))
 ))
 (let (($x241 (and $x221 $x186)))
 (let (($x115 (= $x241 true)))
 (let (($x54 (forall ((input.ind-%var2241X (_ BitVec 32)) )(let ((?x193 (bvadd (bvmul input.ind-%var2241X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv1 32))) (select input.dst.llvm-mem ?x193))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x193 (_ bv2 32))) ?x204))))
 (let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2241X)))
 (let (($x247 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2241X)))
 (=> $x247 (= ?x108 ?x255))))))))
 ))
 (let (($x251 (forall ((input.ind-%var2240X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var2240X) (bvult input.ind-%var2240X input.dst.llvm-%n))))
 (let (($x247 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2240X)))
 (= $x247 $x88))))
 ))
 (let (($x192 (and $x251 $x54)))
 (let (($x205 (= $x192 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x171 (= $x243 true)))
 (let (($x176 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x280 (= $x176 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x248 (= $x128 true)))
 (let (($x19 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 (bvsub ?x14 ?x77)) (bvult ?x14 (bvsub ?x14 ?x77)))))
 (let (($x166 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x105 (ite $x166 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x163 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x295 (bvmul (_ bv4 64) ?x163)))
 (let ((?x201 ((_ extract 63 32) ?x295)))
 (let (($x149 (= ?x201 ?x105)))
 (let (($x29 (and $x149 $x19)))
 (let (($x51 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x156 (and $x51 $x29)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x120 (=> $x141 $x156)))
 (let (($x93 (= $x120 true)))
 (let (($x74 (= $x141 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x38)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x291)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x234)))
 (let ((?x114 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x114)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x117 $x213)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (and $x294 $x165)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x18 $x194)))
 (let (($x245 (not $x126)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x269 $x226)))
 (let (($x169 (and (not $x220) $x245)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x184 $x195)))
 (let (($x272 (not $x76)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x56 $x238)))
 (let (($x268 (and (not $x257) $x272)))
 (let (($x85 (and (and (and (and (and (and $x268 $x169) $x55) $x109) $x147) $x73) $x230)))
 (let (($x50 (and $x85 $x250)))
 (let (($x262 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x235 (or false (or false (and (and true (or $x66 $x267)) (or $x122 $x262))))))
 (let (($x197 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x235)))
 (let (($x98 (and $x197 $x50)))
 (let (($x242 (= $x98 true)))
 (let (($x34 (and $x242 $x74)))
 (let (($x94 (and $x34 $x93)))
 (let (($x33 (and $x94 $x248)))
 (let (($x6 (and $x33 $x280)))
 (let (($x99 (and $x6 $x171)))
 (let (($x49 (and $x99 $x205)))
 (let (($x227 (and $x49 $x115)))
 (let (($x135 (and $x227 $x264)))
 (let (($x84 (and $x135 $x283)))
 (let (($x150 (and $x84 $x79)))
 (let (($x37 (and $x150 $x45)))
 (let (($x196 (and $x37 $x118)))
 (let (($x125 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x68 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x68 (_ bv1 32))))
 (let (($x202 (and $x228 $x196)))
 (let (($x209 (forall ((input.ind-%var2261X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2261X)))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var2261X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2261X)))
 (=> $x161 (= ?x170 ?x108))))))
 ))
 (let (($x48 (forall ((input.ind-%var2260X (_ BitVec 32)) )(let (($x247 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2260X)))
 (let (($x161 (input.spec-%var-x-1.0.1 input.ind-%var2260X)))
 (= $x161 $x247))))
 ))
 (let (($x41 (and $x48 $x209)))
 (let (($x252 (and $x41 $x202)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x236 (and $x75 $x252)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x210 (and $x240 $x236)))
 (let (($x188 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x188 $x210)))
 (let (($x60 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x20 (bvadd ?x14 (_ bv3 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x40 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x20)))
 (let (($x164 (or false (or false (and (and true (or $x12 $x40)) (or $x43 $x60))))))
 (let (($x15 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x164)))
 (let (($x26 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x164)))
 (let (($x137 (and $x26 $x144)))
 (let (($x175 (=> $x137 $x285)))
 (not $x175)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 183 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x271 (bvule ?x83 (_ bv4294967294 32))))
 (let (($x249 (= $x271 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x10)))
 (let (($x198 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x198 true)))
 (let (($x260 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x278 (= $x260 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x292 true)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x274)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x121)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x36 $x142)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x199 $x148)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x284 $x285)))
 (let (($x58 (not $x175)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (and $x212 $x167)))
 (let (($x222 (and (not $x281) $x58)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x47 $x263)))
 (let (($x8 (not $x168)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x136 $x25)))
 (let (($x32 (and (not $x21) $x8)))
 (let (($x101 (and (and (and (and (and (and $x32 $x222) $x140) $x256) $x72) $x67) $x27)))
 (let (($x288 (and $x101 $x5)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x159 (or false (or false (and (and true (or $x118 $x196)) (or $x236 $x210))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x275 (and $x277 $x288)))
 (let (($x289 (= $x275 true)))
 (let (($x95 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x95 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x79 (= (_ bv0 2) ?x116)))
 (let (($x150 (= $x79 true)))
 (let (($x283 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (= $x283 true)))
 (let (($x139 (forall ((input.ind-%var2287X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var2287X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x33))))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var2287X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2287X)))
 (=> $x48 (= ?x261 ?x99))))))))
 ))
 (let (($x132 (forall ((input.ind-%var2286X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2286X) (bvult input.ind-%var2286X input.dst.llvm-%n))))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2286X)))
 (= $x48 $x242))))
 ))
 (let (($x264 (and $x132 $x139)))
 (let (($x135 (= $x264 true)))
 (let (($x88 (forall ((input.ind-%var2277X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var2277X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x33))))
 (let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2277X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2277X)))
 (=> $x64 (= ?x66 ?x99))))))))
 ))
 (let (($x34 (forall ((input.ind-%var2276X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2276X) (bvult input.ind-%var2276X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2276X)))
 (= $x64 $x242))))
 ))
 (let (($x286 (and $x34 $x88)))
 (let (($x251 (= $x286 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x157 true)))
 (let ((?x53 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x53)))
 (let (($x114 (= ?x294 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x114 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x18 (bvsub ?x14 ?x77)))
 (let (($x169 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x18) (bvult ?x14 ?x18))))
 (let (($x269 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x220 (ite $x269 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x272 (bvmul (_ bv4 64) ?x76)))
 (let ((?x268 ((_ extract 63 32) ?x272)))
 (let (($x22 (= ?x268 ?x220)))
 (let (($x82 (and $x22 $x169)))
 (let (($x184 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x282 (and $x184 $x82)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (=> $x141 $x282)))
 (let (($x218 (= $x55 true)))
 (let (($x238 (= $x141 true)))
 (let (($x215 (and $x238 $x218)))
 (let (($x165 (and $x215 $x213)))
 (let (($x73 (and $x165 $x234)))
 (let (($x7 (and $x73 $x251)))
 (let (($x208 (and $x7 $x135)))
 (let (($x153 (and $x208 $x84)))
 (let (($x200 (and $x153 $x150)))
 (let (($x45 (and $x200 $x211)))
 (let (($x265 (and $x45 $x289)))
 (let (($x52 (and $x265 $x232)))
 (let (($x266 (and $x52 $x278)))
 (let (($x70 (and $x266 $x89)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x197 (ite $x235 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x197 (_ bv1 32))))
 (let (($x138 (and $x56 $x70)))
 (let (($x206 (forall ((input.ind-%var2297X (_ BitVec 32)) )(let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2297X)))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var2297X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2297X)))
 (=> $x48 (= ?x261 ?x66))))))
 ))
 (let (($x125 (forall ((input.ind-%var2296X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2296X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2296X)))
 (= $x48 $x64))))
 ))
 (let (($x179 (and $x125 $x206)))
 (let (($x69 (and $x179 $x138)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x253 (and $x127 $x69)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x78 (and $x123 $x253)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x225 $x78)))
 (let (($x174 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x14 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x152 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x26 (or false (or false (and (and true (or $x217 $x152)) (or $x143 $x174))))))
 (let (($x188 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x57 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x113 (and $x57 $x103)))
 (let (($x270 (=> $x113 $x249)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x271 (bvule ?x83 (_ bv4294967294 32))))
 (let (($x249 (= $x271 true)))
 (let ((?x10 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x87 (bvneg ?x10)))
 (let (($x198 (= ?x87 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x198 true)))
 (let (($x260 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x278 (= $x260 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x292 true)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x274)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x121)))
 (let ((?x160 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (and $x36 $x142)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x199 $x148)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x284 $x285)))
 (let (($x58 (not $x175)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x281 (and $x212 $x167)))
 (let (($x222 (and (not $x281) $x58)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x47 $x263)))
 (let (($x8 (not $x168)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x136 $x25)))
 (let (($x32 (and (not $x21) $x8)))
 (let (($x101 (and (and (and (and (and (and $x32 $x222) $x140) $x256) $x72) $x67) $x27)))
 (let (($x288 (and $x101 $x5)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x236 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x159 (or false (or false (and (and true (or $x118 $x196)) (or $x236 $x210))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x159)))
 (let (($x275 (and $x277 $x288)))
 (let (($x289 (= $x275 true)))
 (let (($x95 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x211 (= $x95 true)))
 (let ((?x116 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x79 (= (_ bv0 2) ?x116)))
 (let (($x150 (= $x79 true)))
 (let (($x283 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (= $x283 true)))
 (let (($x139 (forall ((input.ind-%var2287X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var2287X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x33))))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var2287X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2287X)))
 (=> $x48 (= ?x261 ?x99))))))))
 ))
 (let (($x132 (forall ((input.ind-%var2286X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2286X) (bvult input.ind-%var2286X input.dst.llvm-%n))))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2286X)))
 (= $x48 $x242))))
 ))
 (let (($x264 (and $x132 $x139)))
 (let (($x135 (= $x264 true)))
 (let (($x88 (forall ((input.ind-%var2277X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var2277X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x33))))
 (let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2277X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2277X)))
 (=> $x64 (= ?x66 ?x99))))))))
 ))
 (let (($x34 (forall ((input.ind-%var2276X (_ BitVec 32)) )(let (($x242 (and (bvule (_ bv0 32) input.ind-%var2276X) (bvult input.ind-%var2276X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2276X)))
 (= $x64 $x242))))
 ))
 (let (($x286 (and $x34 $x88)))
 (let (($x251 (= $x286 true)))
 (let (($x157 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x157 true)))
 (let ((?x53 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x53)))
 (let (($x114 (= ?x294 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x114 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x18 (bvsub ?x14 ?x77)))
 (let (($x169 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x18) (bvult ?x14 ?x18))))
 (let (($x269 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x220 (ite $x269 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x76 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x272 (bvmul (_ bv4 64) ?x76)))
 (let ((?x268 ((_ extract 63 32) ?x272)))
 (let (($x22 (= ?x268 ?x220)))
 (let (($x82 (and $x22 $x169)))
 (let (($x184 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x282 (and $x184 $x82)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (=> $x141 $x282)))
 (let (($x218 (= $x55 true)))
 (let (($x238 (= $x141 true)))
 (let (($x215 (and $x238 $x218)))
 (let (($x165 (and $x215 $x213)))
 (let (($x73 (and $x165 $x234)))
 (let (($x7 (and $x73 $x251)))
 (let (($x208 (and $x7 $x135)))
 (let (($x153 (and $x208 $x84)))
 (let (($x200 (and $x153 $x150)))
 (let (($x45 (and $x200 $x211)))
 (let (($x265 (and $x45 $x289)))
 (let (($x52 (and $x265 $x232)))
 (let (($x266 (and $x52 $x278)))
 (let (($x70 (and $x266 $x89)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x197 (ite $x235 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x197 (_ bv1 32))))
 (let (($x138 (and $x56 $x70)))
 (let (($x206 (forall ((input.ind-%var2297X (_ BitVec 32)) )(let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2297X)))
 (let ((?x261 (input.spec-%var-x-1.1.1 input.ind-%var2297X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2297X)))
 (=> $x48 (= ?x261 ?x66))))))
 ))
 (let (($x125 (forall ((input.ind-%var2296X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2296X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2296X)))
 (= $x48 $x64))))
 ))
 (let (($x179 (and $x125 $x206)))
 (let (($x69 (and $x179 $x138)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x253 (and $x127 $x69)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x78 (and $x123 $x253)))
 (let (($x225 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x225 $x78)))
 (let (($x174 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x14 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x152 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x26 (or false (or false (and (and true (or $x217 $x152)) (or $x143 $x174))))))
 (let (($x188 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x57 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x113 (and $x57 $x103)))
 (let (($x270 (=> $x113 $x249)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x241 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x107 (bvsge ?x241 (_ bv0 32))))
 (let (($x228 (= $x107 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x91)))
 (let (($x46 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x46 true)))
 (let (($x259 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x205 (= $x259 true)))
 (let (($x287 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x287 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x154)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x201)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (and $x295 $x19)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x163 $x293)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x161 $x108)))
 (let (($x247 (not $x100)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x65 $x68)))
 (let (($x90 (and (not $x104) $x247)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x207 $x134)))
 (let (($x173 (not $x37)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x260 $x278)))
 (let (($x170 (and (not $x270) $x173)))
 (let (($x120 (and (and (and (and (and (and $x170 $x90) $x62) $x85) $x178) $x180) $x105)))
 (let (($x204 (and $x120 $x29)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x83 (or false (or false (and (and true (or $x198 $x89)) (or $x69 $x253))))))
 (let (($x249 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x44 (and $x249 $x204)))
 (let (($x80 (= $x44 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x292 (= $x265 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x288 (= (_ bv0 2) ?x5)))
 (let (($x275 (= $x288 true)))
 (let (($x121 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x121 true)))
 (let (($x231 (forall ((input.ind-%var2322X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var2322X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x202))))
 (let ((?x238 (input.spec-%var-x-1.1.1 input.ind-%var2322X)))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2322X)))
 (=> $x125 (= ?x238 ?x233))))))))
 ))
 (let (($x281 (forall ((input.ind-%var2321X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var2321X) (bvult input.ind-%var2321X input.dst.llvm-%n))))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2321X)))
 (= $x125 $x251))))
 ))
 (let (($x160 (and $x281 $x231)))
 (let (($x67 (= $x160 true)))
 (let (($x136 (forall ((input.ind-%var2312X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var2312X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x202))))
 (let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2312X)))
 (let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2312X)))
 (=> $x122 (= ?x184 ?x233))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2311X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var2311X) (bvult input.ind-%var2311X input.dst.llvm-%n))))
 (let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2311X)))
 (= $x122 $x251))))
 ))
 (let (($x25 (and $x237 $x136)))
 (let (($x21 (= $x25 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x280 true)))
 (let ((?x13 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x13)))
 (let (($x243 (= ?x93 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x243 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x213 (bvsub ?x14 ?x77)))
 (let (($x234 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x213) (bvult ?x14 ?x213))))
 (let (($x53 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x117 (ite $x53 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvmul (_ bv4 64) ?x218)))
 (let ((?x109 ((_ extract 63 32) ?x215)))
 (let (($x114 (= ?x109 ?x117)))
 (let (($x73 (and $x114 $x234)))
 (let (($x282 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x98 (and $x282 $x73)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x141 $x98)))
 (let (($x242 (= $x50 true)))
 (let (($x245 (= $x141 true)))
 (let (($x74 (and $x245 $x242)))
 (let (($x149 (and $x74 $x171)))
 (let (($x248 (and $x149 $x128)))
 (let (($x97 (and $x248 $x21)))
 (let (($x124 (and $x97 $x67)))
 (let (($x101 (and $x124 $x27)))
 (let (($x289 (and $x101 $x275)))
 (let (($x232 (and $x289 $x292)))
 (let (($x155 (and $x232 $x80)))
 (let (($x221 (and $x155 $x255)))
 (let (($x49 (and $x221 $x205)))
 (let (($x9 (and $x49 $x192)))
 (let (($x194 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x18 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x18 (_ bv1 32))))
 (let (($x229 (and $x126 $x9)))
 (let (($x226 (forall ((input.ind-%var2332X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2332X)))
 (let ((?x238 (input.spec-%var-x-1.1.1 input.ind-%var2332X)))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2332X)))
 (=> $x125 (= ?x238 ?x184))))))
 ))
 (let (($x129 (forall ((input.ind-%var2331X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2331X)))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2331X)))
 (= $x125 $x122))))
 ))
 (let (($x220 (and $x129 $x226)))
 (let (($x193 (and $x220 $x229)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x276 (and $x189 $x193)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x16 (and $x75 $x276)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x186 (and $x219 $x16)))
 (let (($x164 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd ?x14 (_ bv3 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x43 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x57 (or false (or false (and (and true (or $x177 $x43)) (or $x119 $x164))))))
 (let (($x225 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x57)))
 (let (($x130 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x57)))
 (let (($x187 (and $x130 $x186)))
 (let (($x61 (=> $x187 $x228)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x241 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x107 (bvsge ?x241 (_ bv0 32))))
 (let (($x228 (= $x107 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x91)))
 (let (($x46 (= ?x54 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x46 true)))
 (let (($x259 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x205 (= $x259 true)))
 (let (($x287 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x255 (= $x287 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x154)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x201)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (and $x295 $x19)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (and $x163 $x293)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x161 $x108)))
 (let (($x247 (not $x100)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x65 $x68)))
 (let (($x90 (and (not $x104) $x247)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x207 $x134)))
 (let (($x173 (not $x37)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x260 $x278)))
 (let (($x170 (and (not $x270) $x173)))
 (let (($x120 (and (and (and (and (and (and $x170 $x90) $x62) $x85) $x178) $x180) $x105)))
 (let (($x204 (and $x120 $x29)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x83 (or false (or false (and (and true (or $x198 $x89)) (or $x69 $x253))))))
 (let (($x249 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x44 (and $x249 $x204)))
 (let (($x80 (= $x44 true)))
 (let (($x265 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x292 (= $x265 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x288 (= (_ bv0 2) ?x5)))
 (let (($x275 (= $x288 true)))
 (let (($x121 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x121 true)))
 (let (($x231 (forall ((input.ind-%var2322X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var2322X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x202))))
 (let ((?x238 (input.spec-%var-x-1.1.1 input.ind-%var2322X)))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2322X)))
 (=> $x125 (= ?x238 ?x233))))))))
 ))
 (let (($x281 (forall ((input.ind-%var2321X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var2321X) (bvult input.ind-%var2321X input.dst.llvm-%n))))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2321X)))
 (= $x125 $x251))))
 ))
 (let (($x160 (and $x281 $x231)))
 (let (($x67 (= $x160 true)))
 (let (($x136 (forall ((input.ind-%var2312X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var2312X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x202))))
 (let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2312X)))
 (let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2312X)))
 (=> $x122 (= ?x184 ?x233))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2311X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var2311X) (bvult input.ind-%var2311X input.dst.llvm-%n))))
 (let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2311X)))
 (= $x122 $x251))))
 ))
 (let (($x25 (and $x237 $x136)))
 (let (($x21 (= $x25 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x128 (= $x280 true)))
 (let ((?x13 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x93 (bvneg ?x13)))
 (let (($x243 (= ?x93 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x171 (= $x243 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x213 (bvsub ?x14 ?x77)))
 (let (($x234 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x213) (bvult ?x14 ?x213))))
 (let (($x53 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x117 (ite $x53 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x218 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x215 (bvmul (_ bv4 64) ?x218)))
 (let ((?x109 ((_ extract 63 32) ?x215)))
 (let (($x114 (= ?x109 ?x117)))
 (let (($x73 (and $x114 $x234)))
 (let (($x282 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x98 (and $x282 $x73)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x50 (=> $x141 $x98)))
 (let (($x242 (= $x50 true)))
 (let (($x245 (= $x141 true)))
 (let (($x74 (and $x245 $x242)))
 (let (($x149 (and $x74 $x171)))
 (let (($x248 (and $x149 $x128)))
 (let (($x97 (and $x248 $x21)))
 (let (($x124 (and $x97 $x67)))
 (let (($x101 (and $x124 $x27)))
 (let (($x289 (and $x101 $x275)))
 (let (($x232 (and $x289 $x292)))
 (let (($x155 (and $x232 $x80)))
 (let (($x221 (and $x155 $x255)))
 (let (($x49 (and $x221 $x205)))
 (let (($x9 (and $x49 $x192)))
 (let (($x194 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x18 (ite $x194 (_ bv1 32) (_ bv0 32))))
 (let (($x126 (bvuge ?x18 (_ bv1 32))))
 (let (($x229 (and $x126 $x9)))
 (let (($x226 (forall ((input.ind-%var2332X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2332X)))
 (let ((?x238 (input.spec-%var-x-1.1.1 input.ind-%var2332X)))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2332X)))
 (=> $x125 (= ?x238 ?x184))))))
 ))
 (let (($x129 (forall ((input.ind-%var2331X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2331X)))
 (let (($x125 (input.spec-%var-x-1.0.1 input.ind-%var2331X)))
 (= $x125 $x122))))
 ))
 (let (($x220 (and $x129 $x226)))
 (let (($x193 (and $x220 $x229)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x276 (and $x189 $x193)))
 (let (($x75 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x16 (and $x75 $x276)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x186 (and $x219 $x16)))
 (let (($x164 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd ?x14 (_ bv3 32))))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x43 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x57 (or false (or false (and (and true (or $x177 $x43)) (or $x119 $x164))))))
 (let (($x225 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x57)))
 (let (($x130 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x57)))
 (let (($x187 (and $x130 $x186)))
 (let (($x61 (=> $x187 $x228)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (bvule ?x142 (_ bv4294967294 32))))
 (let (($x197 (= $x76 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x39)))
 (let (($x222 (= ?x131 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x222 true)))
 (let (($x199 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x172 (= $x199 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x175 true)))
 (let (($x47 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x47 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x153 (bvsub ?x14 ?x77)))
 (let (($x106 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x153) (bvult ?x14 ?x153))))
 (let (($x283 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x283 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x95 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x95)))
 (let ((?x79 ((_ extract 63 32) ?x116)))
 (let (($x208 (= ?x79 ?x84)))
 (let (($x279 (and $x208 $x106)))
 (let (($x135 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x45 (and $x135 $x279)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (=> $x141 $x45)))
 (let (($x112 (= $x115 true)))
 (let (($x214 (= $x141 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x195)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x52)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x241 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x241)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (and $x187 $x107)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x186 $x228)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x49 $x91)))
 (let (($x46 (not $x54)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x221 $x259)))
 (let (($x9 (and (not $x205) $x46)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x204 $x44)))
 (let (($x155 (not $x80)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x230 $x85)))
 (let (($x255 (and (not $x29) $x155)))
 (let (($x273 (and (and (and (and (and (and $x255 $x9) $x193) $x16) $x61) $x23) $x262)))
 (let (($x64 (and $x273 $x261)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x105 (or false (or false (and (and true (or $x151 $x19)) (or $x156 $x166))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x206 (and $x154 $x64)))
 (let (($x132 (= $x206 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x291 (= (_ bv0 2) ?x90)))
 (let (($x51 (= $x291 true)))
 (let (($x209 (forall ((input.ind-%var2357X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2357X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x67))))
 (let ((?x245 (input.spec-%var-x-1.1.1 input.ind-%var2357X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2357X)))
 (=> $x129 (= ?x245 ?x5))))))))
 ))
 (let (($x138 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2356X) (bvult input.ind-%var2356X input.dst.llvm-%n))))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2356X)))
 (= $x129 $x237))))
 ))
 (let (($x161 (and $x138 $x209)))
 (let (($x108 (= $x161 true)))
 (let (($x289 (forall ((input.ind-%var2347X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2347X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x67))))
 (let ((?x282 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2347X)))
 (let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2347X)))
 (=> $x268 (= ?x282 ?x5))))))))
 ))
 (let (($x239 (forall ((input.ind-%var2346X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2346X) (bvult input.ind-%var2346X input.dst.llvm-%n))))
 (let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2346X)))
 (= $x268 $x237))))
 ))
 (let (($x265 (and $x239 $x289)))
 (let (($x292 (= $x265 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x171 (= $x243 true)))
 (let ((?x242 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x242)))
 (let (($x13 (= ?x74 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x13 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x234 true)))
 (let (($x94 (and $x73 $x93)))
 (let (($x149 (and $x94 $x171)))
 (let (($x232 (and $x149 $x292)))
 (let (($x100 (and $x232 $x108)))
 (let (($x62 (and $x100 $x51)))
 (let (($x227 (and $x62 $x132)))
 (let (($x6 (and $x227 $x214)))
 (let (($x285 (and $x6 $x112)))
 (let (($x8 (and $x285 $x168)))
 (let (($x254 (and $x8 $x58)))
 (let (($x92 (and $x254 $x172)))
 (let (($x256 (and $x92 $x140)))
 (let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x213 (_ bv1 32))))
 (let (($x36 (and $x147 $x256)))
 (let (($x294 (forall ((input.ind-%var2367X (_ BitVec 32)) )(let ((?x282 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2367X)))
 (let ((?x245 (input.spec-%var-x-1.1.1 input.ind-%var2367X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2367X)))
 (=> $x129 (= ?x245 ?x282))))))
 ))
 (let (($x22 (forall ((input.ind-%var2366X (_ BitVec 32)) )(let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2366X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2366X)))
 (= $x129 $x268))))
 ))
 (let (($x117 (and $x22 $x294)))
 (let (($x263 (and $x117 $x36)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x32 (and $x41 $x263)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x212 (and $x127 $x32)))
 (let (($x240 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x71 (and $x240 $x212)))
 (let (($x26 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd ?x14 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x143 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x130 (or false (or false (and (and true (or $x185 $x143)) (or $x15 $x26))))))
 (let (($x219 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x130)))
 (let (($x20 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x130)))
 (let (($x284 (and $x20 $x71)))
 (let (($x272 (=> $x284 $x197)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x142 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x76 (bvule ?x142 (_ bv4294967294 32))))
 (let (($x197 (= $x76 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x131 (bvneg ?x39)))
 (let (($x222 (= ?x131 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x222 true)))
 (let (($x199 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x172 (= $x199 true)))
 (let (($x175 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x58 (= $x175 true)))
 (let (($x47 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x47 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x153 (bvsub ?x14 ?x77)))
 (let (($x106 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x153) (bvult ?x14 ?x153))))
 (let (($x283 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x84 (ite $x283 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x95 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x116 (bvmul (_ bv4 64) ?x95)))
 (let ((?x79 ((_ extract 63 32) ?x116)))
 (let (($x208 (= ?x79 ?x84)))
 (let (($x279 (and $x208 $x106)))
 (let (($x135 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x45 (and $x135 $x279)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (=> $x141 $x45)))
 (let (($x112 (= $x115 true)))
 (let (($x214 (= $x141 true)))
 (let ((?x195 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x195)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x52)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x241 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x241)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (and $x187 $x107)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x186 $x228)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x49 $x91)))
 (let (($x46 (not $x54)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x221 $x259)))
 (let (($x9 (and (not $x205) $x46)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x204 $x44)))
 (let (($x155 (not $x80)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x230 $x85)))
 (let (($x255 (and (not $x29) $x155)))
 (let (($x273 (and (and (and (and (and (and $x255 $x9) $x193) $x16) $x61) $x23) $x262)))
 (let (($x64 (and $x273 $x261)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x105 (or false (or false (and (and true (or $x151 $x19)) (or $x156 $x166))))))
 (let (($x154 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x206 (and $x154 $x64)))
 (let (($x132 (= $x206 true)))
 (let ((?x90 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x291 (= (_ bv0 2) ?x90)))
 (let (($x51 (= $x291 true)))
 (let (($x209 (forall ((input.ind-%var2357X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2357X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x67))))
 (let ((?x245 (input.spec-%var-x-1.1.1 input.ind-%var2357X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2357X)))
 (=> $x129 (= ?x245 ?x5))))))))
 ))
 (let (($x138 (forall ((input.ind-%var2356X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2356X) (bvult input.ind-%var2356X input.dst.llvm-%n))))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2356X)))
 (= $x129 $x237))))
 ))
 (let (($x161 (and $x138 $x209)))
 (let (($x108 (= $x161 true)))
 (let (($x289 (forall ((input.ind-%var2347X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2347X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x67))))
 (let ((?x282 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2347X)))
 (let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2347X)))
 (=> $x268 (= ?x282 ?x5))))))))
 ))
 (let (($x239 (forall ((input.ind-%var2346X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2346X) (bvult input.ind-%var2346X input.dst.llvm-%n))))
 (let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2346X)))
 (= $x268 $x237))))
 ))
 (let (($x265 (and $x239 $x289)))
 (let (($x292 (= $x265 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x171 (= $x243 true)))
 (let ((?x242 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x242)))
 (let (($x13 (= ?x74 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x93 (= $x13 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x234 true)))
 (let (($x94 (and $x73 $x93)))
 (let (($x149 (and $x94 $x171)))
 (let (($x232 (and $x149 $x292)))
 (let (($x100 (and $x232 $x108)))
 (let (($x62 (and $x100 $x51)))
 (let (($x227 (and $x62 $x132)))
 (let (($x6 (and $x227 $x214)))
 (let (($x285 (and $x6 $x112)))
 (let (($x8 (and $x285 $x168)))
 (let (($x254 (and $x8 $x58)))
 (let (($x92 (and $x254 $x172)))
 (let (($x256 (and $x92 $x140)))
 (let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x213 (_ bv1 32))))
 (let (($x36 (and $x147 $x256)))
 (let (($x294 (forall ((input.ind-%var2367X (_ BitVec 32)) )(let ((?x282 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2367X)))
 (let ((?x245 (input.spec-%var-x-1.1.1 input.ind-%var2367X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2367X)))
 (=> $x129 (= ?x245 ?x282))))))
 ))
 (let (($x22 (forall ((input.ind-%var2366X (_ BitVec 32)) )(let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2366X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2366X)))
 (= $x129 $x268))))
 ))
 (let (($x117 (and $x22 $x294)))
 (let (($x263 (and $x117 $x36)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x32 (and $x41 $x263)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x212 (and $x127 $x32)))
 (let (($x240 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x71 (and $x240 $x212)))
 (let (($x26 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd ?x14 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x143 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x130 (or false (or false (and (and true (or $x185 $x143)) (or $x15 $x26))))))
 (let (($x219 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x130)))
 (let (($x20 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x130)))
 (let (($x284 (and $x20 $x71)))
 (let (($x272 (=> $x284 $x197)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (bvsge ?x65 (_ bv0 32))))
 (let (($x18 (= $x218 true)))
 (let ((?x249 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x249)))
 (let (($x83 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (= $x83 true)))
 (let (($x37 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x270 (= $x37 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x103 true)))
 (let (($x266 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x271 (= $x266 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x202 (bvsub ?x14 ?x77)))
 (let (($x286 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x202) (bvult ?x14 ?x202))))
 (let (($x196 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x196 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x25 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x25)))
 (let ((?x159 ((_ extract 63 32) ?x233)))
 (let (($x118 (= ?x159 ?x31)))
 (let (($x88 (and $x118 $x286)))
 (let (($x236 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x97 (and $x236 $x88)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (=> $x141 $x97)))
 (let (($x167 (= $x144 true)))
 (let (($x176 (= $x141 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x55)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x38)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (and $x284 $x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x71 $x197)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x92 $x39)))
 (let (($x222 (not $x131)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x254 $x199)))
 (let (($x256 (and (not $x172) $x222)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x285 $x47)))
 (let (($x8 (not $x168)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x264 $x135)))
 (let (($x58 (and (not $x112) $x8)))
 (let (($x82 (and (and (and (and (and (and $x58 $x256) $x263) $x212) $x272) $x24) $x269)))
 (let (($x122 (and $x82 $x238)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x279 (or false (or false (and (and true (or $x79 $x283)) (or $x150 $x153))))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x279)))
 (let (($x226 (and $x115 $x122)))
 (let (($x183 (= $x226 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x227 (= (_ bv0 2) ?x132)))
 (let (($x214 (= $x227 true)))
 (let (($x273 (forall ((input.ind-%var2392X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var2392X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x201))))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var2392X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2392X)))
 (=> $x22 (= ?x157 ?x287))))))))
 ))
 (let (($x9 (forall ((input.ind-%var2391X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2391X) (bvult input.ind-%var2391X input.dst.llvm-%n))))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2391X)))
 (= $x22 $x292))))
 ))
 (let (($x195 (and $x9 $x273)))
 (let (($x261 (= $x195 true)))
 (let (($x80 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var2382X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x201))))
 (let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2382X)))
 (let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2382X)))
 (=> $x109 (= ?x98 ?x287))))))))
 ))
 (let (($x70 (forall ((input.ind-%var2381X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2381X) (bvult input.ind-%var2381X input.dst.llvm-%n))))
 (let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2381X)))
 (= $x109 $x292))))
 ))
 (let (($x155 (and $x70 $x80)))
 (let (($x255 (= $x155 true)))
 (let (($x121 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x231 (= $x121 true)))
 (let ((?x281 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x281)))
 (let (($x274 (= ?x148 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x274 true)))
 (let (($x237 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x237 true)))
 (let (($x124 (and $x139 $x210)))
 (let (($x160 (and $x124 $x231)))
 (let (($x221 (and $x160 $x255)))
 (let (($x64 (and $x221 $x261)))
 (let (($x6 (and $x64 $x214)))
 (let (($x137 (and $x6 $x183)))
 (let (($x128 (and $x137 $x176)))
 (let (($x78 (and $x128 $x167)))
 (let (($x87 (and $x78 $x271)))
 (let (($x134 (and $x87 $x113)))
 (let (($x267 (and $x134 $x270)))
 (let (($x207 (and $x267 $x278)))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x149 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x149 (_ bv1 32))))
 (let (($x173 (and $x7 $x207)))
 (let (($x93 (forall ((input.ind-%var2402X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2402X)))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var2402X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2402X)))
 (=> $x22 (= ?x157 ?x98))))))
 ))
 (let (($x114 (forall ((input.ind-%var2401X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2401X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2401X)))
 (= $x22 $x109))))
 ))
 (let (($x94 (and $x114 $x93)))
 (let (($x10 (and $x94 $x173)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x198 (and $x179 $x10)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x89 (and $x189 $x198)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x123 $x89)))
 (let (($x57 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd ?x14 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x119 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x20 (or false (or false (and (and true (or $x60 $x119)) (or $x188 $x57))))))
 (let (($x240 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x20)))
 (let (($x40 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x20)))
 (let (($x253 (and $x40 $x170)))
 (let (($x215 (=> $x253 $x18)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x65 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x218 (bvsge ?x65 (_ bv0 32))))
 (let (($x18 (= $x218 true)))
 (let ((?x249 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x249)))
 (let (($x83 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x278 (= $x83 true)))
 (let (($x37 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x270 (= $x37 true)))
 (let (($x103 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x113 (= $x103 true)))
 (let (($x266 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x271 (= $x266 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x202 (bvsub ?x14 ?x77)))
 (let (($x286 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x202) (bvult ?x14 ?x202))))
 (let (($x196 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x31 (ite $x196 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x25 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvmul (_ bv4 64) ?x25)))
 (let ((?x159 ((_ extract 63 32) ?x233)))
 (let (($x118 (= ?x159 ?x31)))
 (let (($x88 (and $x118 $x286)))
 (let (($x236 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x97 (and $x236 $x88)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x144 (=> $x141 $x97)))
 (let (($x167 (= $x144 true)))
 (let (($x176 (= $x141 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x55)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x38)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x246)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x76 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (and $x284 $x76)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x71 $x197)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x92 $x39)))
 (let (($x222 (not $x131)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (and $x254 $x199)))
 (let (($x256 (and (not $x172) $x222)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x285 $x47)))
 (let (($x8 (not $x168)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x264 $x135)))
 (let (($x58 (and (not $x112) $x8)))
 (let (($x82 (and (and (and (and (and (and $x58 $x256) $x263) $x212) $x272) $x24) $x269)))
 (let (($x122 (and $x82 $x238)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x150 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x279 (or false (or false (and (and true (or $x79 $x283)) (or $x150 $x153))))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x279)))
 (let (($x226 (and $x115 $x122)))
 (let (($x183 (= $x226 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x227 (= (_ bv0 2) ?x132)))
 (let (($x214 (= $x227 true)))
 (let (($x273 (forall ((input.ind-%var2392X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var2392X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x201))))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var2392X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2392X)))
 (=> $x22 (= ?x157 ?x287))))))))
 ))
 (let (($x9 (forall ((input.ind-%var2391X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2391X) (bvult input.ind-%var2391X input.dst.llvm-%n))))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2391X)))
 (= $x22 $x292))))
 ))
 (let (($x195 (and $x9 $x273)))
 (let (($x261 (= $x195 true)))
 (let (($x80 (forall ((input.ind-%var2382X (_ BitVec 32)) )(let ((?x156 (bvadd (bvmul input.ind-%var2382X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x201))))
 (let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2382X)))
 (let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2382X)))
 (=> $x109 (= ?x98 ?x287))))))))
 ))
 (let (($x70 (forall ((input.ind-%var2381X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2381X) (bvult input.ind-%var2381X input.dst.llvm-%n))))
 (let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2381X)))
 (= $x109 $x292))))
 ))
 (let (($x155 (and $x70 $x80)))
 (let (($x255 (= $x155 true)))
 (let (($x121 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x231 (= $x121 true)))
 (let ((?x281 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x148 (bvneg ?x281)))
 (let (($x274 (= ?x148 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x274 true)))
 (let (($x237 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x237 true)))
 (let (($x124 (and $x139 $x210)))
 (let (($x160 (and $x124 $x231)))
 (let (($x221 (and $x160 $x255)))
 (let (($x64 (and $x221 $x261)))
 (let (($x6 (and $x64 $x214)))
 (let (($x137 (and $x6 $x183)))
 (let (($x128 (and $x137 $x176)))
 (let (($x78 (and $x128 $x167)))
 (let (($x87 (and $x78 $x271)))
 (let (($x134 (and $x87 $x113)))
 (let (($x267 (and $x134 $x270)))
 (let (($x207 (and $x267 $x278)))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x149 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x149 (_ bv1 32))))
 (let (($x173 (and $x7 $x207)))
 (let (($x93 (forall ((input.ind-%var2402X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2402X)))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var2402X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2402X)))
 (=> $x22 (= ?x157 ?x98))))))
 ))
 (let (($x114 (forall ((input.ind-%var2401X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2401X)))
 (let (($x22 (input.spec-%var-x-1.0.1 input.ind-%var2401X)))
 (= $x22 $x109))))
 ))
 (let (($x94 (and $x114 $x93)))
 (let (($x10 (and $x94 $x173)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x198 (and $x179 $x10)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x89 (and $x189 $x198)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x123 $x89)))
 (let (($x57 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd ?x14 (_ bv3 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x119 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x20 (or false (or false (and (and true (or $x60 $x119)) (or $x188 $x57))))))
 (let (($x240 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x20)))
 (let (($x40 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x20)))
 (let (($x253 (and $x40 $x170)))
 (let (($x215 (=> $x253 $x18)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (bvule ?x66 input.dst.llvm-%n)))
 (let (($x213 (= $x242 true)))
 (let ((?x56 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x56)))
 (let (($x16 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x16 true)))
 (let (($x48 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x48 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x235 true)))
 (let (($x193 (forall ((input.ind-%var2427X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2427X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x218))))
 (let ((?x251 (input.spec-%var-x-1.1.1 input.ind-%var2427X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2427X)))
 (=> $x114 (= ?x251 ?x53))))))))
 ))
 (let (($x27 (forall ((input.ind-%var2426X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2426X) (bvult input.ind-%var2426X input.dst.llvm-%n))))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2426X)))
 (= $x114 $x286))))
 ))
 (let (($x259 (and $x27 $x193)))
 (let (($x192 (= $x259 true)))
 (let (($x234 (forall ((input.ind-%var2417X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2417X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x218))))
 (let ((?x239 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2417X)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2417X)))
 (=> $x34 (= ?x239 ?x53))))))))
 ))
 (let (($x97 (forall ((input.ind-%var2416X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2416X) (bvult input.ind-%var2416X input.dst.llvm-%n))))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2416X)))
 (= $x34 $x286))))
 ))
 (let (($x165 (and $x97 $x234)))
 (let (($x147 (= $x165 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x136 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x238 (bvsub ?x14 ?x77)))
 (let (($x137 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x238) (bvult ?x14 ?x238))))
 (let (($x269 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x82 (ite $x269 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x24 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x184 (bvmul (_ bv4 64) ?x24)))
 (let ((?x38 ((_ extract 63 32) ?x184)))
 (let (($x55 (= ?x38 ?x82)))
 (let (($x176 (and $x55 $x137)))
 (let (($x125 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x128 (and $x125 $x176)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x141 $x128)))
 (let (($x252 (= $x248 true)))
 (let (($x142 (= $x141 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x131)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x92)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (and $x168 $x58)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x47 $x254)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x211 $x33)))
 (let (($x279 (not $x106)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x208 $x150)))
 (let (($x264 (and (not $x153) $x279)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x95 $x45)))
 (let (($x79 (not $x116)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x80 $x155)))
 (let (($x84 (and (not $x200) $x79)))
 (let (($x32 (and (and (and (and (and (and $x84 $x264) $x112) $x285) $x199) $x140) $x39)))
 (let (($x212 (and $x32 $x222)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x227 (or false (or false (and (and true (or $x9 $x52)) (or $x195 $x261))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x227)))
 (let (($x126 (and $x6 $x212)))
 (let (($x71 (= $x126 true)))
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x230 (= (_ bv0 2) ?x201)))
 (let (($x287 (= $x230 true)))
 (let (($x154 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x180 (= $x154 true)))
 (let ((?x178 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x178)))
 (let (($x29 (= ?x156 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x29 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x292 true)))
 (let (($x105 (and $x232 $x51)))
 (let (($x11 (and $x105 $x180)))
 (let (($x204 (and $x11 $x287)))
 (let (($x284 (and $x204 $x71)))
 (let (($x76 (and $x284 $x142)))
 (let (($x236 (and $x76 $x252)))
 (let (($x233 (and $x236 $x25)))
 (let (($x129 (and $x233 $x147)))
 (let (($x49 (and $x129 $x192)))
 (let (($x61 (and $x49 $x276)))
 (let (($x107 (and $x61 $x241)))
 (let (($x228 (and $x107 $x187)))
 (let (($x231 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x160 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x160 (_ bv1 32))))
 (let (($x30 (and $x265 $x228)))
 (let (($x210 (forall ((input.ind-%var2437X (_ BitVec 32)) )(let ((?x239 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2437X)))
 (let ((?x251 (input.spec-%var-x-1.1.1 input.ind-%var2437X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2437X)))
 (=> $x114 (= ?x251 ?x239))))))
 ))
 (let (($x243 (forall ((input.ind-%var2436X (_ BitVec 32)) )(let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2436X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2436X)))
 (= $x114 $x34))))
 ))
 (let (($x124 (and $x243 $x210)))
 (let (($x205 (and $x124 $x30)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x91 (and $x220 $x205)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x54 (and $x41 $x91)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x75 $x54)))
 (let (($x130 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd ?x14 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x15 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x119)))
 (let (($x40 (or false (or false (and (and true (or $x174 $x15)) (or $x225 $x130))))))
 (let (($x123 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x40)))
 (let (($x152 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x40)))
 (let (($x229 (and $x152 $x23)))
 (let (($x74 (=> $x229 $x213)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x242 (bvule ?x66 input.dst.llvm-%n)))
 (let (($x213 (= $x242 true)))
 (let ((?x56 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x56)))
 (let (($x16 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x16 true)))
 (let (($x48 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x48 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x235 true)))
 (let (($x193 (forall ((input.ind-%var2427X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2427X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x218))))
 (let ((?x251 (input.spec-%var-x-1.1.1 input.ind-%var2427X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2427X)))
 (=> $x114 (= ?x251 ?x53))))))))
 ))
 (let (($x27 (forall ((input.ind-%var2426X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2426X) (bvult input.ind-%var2426X input.dst.llvm-%n))))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2426X)))
 (= $x114 $x286))))
 ))
 (let (($x259 (and $x27 $x193)))
 (let (($x192 (= $x259 true)))
 (let (($x234 (forall ((input.ind-%var2417X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2417X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x218))))
 (let ((?x239 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2417X)))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2417X)))
 (=> $x34 (= ?x239 ?x53))))))))
 ))
 (let (($x97 (forall ((input.ind-%var2416X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2416X) (bvult input.ind-%var2416X input.dst.llvm-%n))))
 (let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2416X)))
 (= $x34 $x286))))
 ))
 (let (($x165 (and $x97 $x234)))
 (let (($x147 (= $x165 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x136 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x238 (bvsub ?x14 ?x77)))
 (let (($x137 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x238) (bvult ?x14 ?x238))))
 (let (($x269 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x82 (ite $x269 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x24 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x184 (bvmul (_ bv4 64) ?x24)))
 (let ((?x38 ((_ extract 63 32) ?x184)))
 (let (($x55 (= ?x38 ?x82)))
 (let (($x176 (and $x55 $x137)))
 (let (($x125 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x128 (and $x125 $x176)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x141 $x128)))
 (let (($x252 (= $x248 true)))
 (let (($x142 (= $x141 true)))
 (let ((?x131 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x131)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x92)))
 (let ((?x172 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (and $x168 $x58)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x47 $x254)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x211 $x33)))
 (let (($x279 (not $x106)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x153 (and $x208 $x150)))
 (let (($x264 (and (not $x153) $x279)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x95 $x45)))
 (let (($x79 (not $x116)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x80 $x155)))
 (let (($x84 (and (not $x200) $x79)))
 (let (($x32 (and (and (and (and (and (and $x84 $x264) $x112) $x285) $x199) $x140) $x39)))
 (let (($x212 (and $x32 $x222)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x227 (or false (or false (and (and true (or $x9 $x52)) (or $x195 $x261))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x227)))
 (let (($x126 (and $x6 $x212)))
 (let (($x71 (= $x126 true)))
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x230 (= (_ bv0 2) ?x201)))
 (let (($x287 (= $x230 true)))
 (let (($x154 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x180 (= $x154 true)))
 (let ((?x178 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x156 (bvneg ?x178)))
 (let (($x29 (= ?x156 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x29 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x292 true)))
 (let (($x105 (and $x232 $x51)))
 (let (($x11 (and $x105 $x180)))
 (let (($x204 (and $x11 $x287)))
 (let (($x284 (and $x204 $x71)))
 (let (($x76 (and $x284 $x142)))
 (let (($x236 (and $x76 $x252)))
 (let (($x233 (and $x236 $x25)))
 (let (($x129 (and $x233 $x147)))
 (let (($x49 (and $x129 $x192)))
 (let (($x61 (and $x49 $x276)))
 (let (($x107 (and $x61 $x241)))
 (let (($x228 (and $x107 $x187)))
 (let (($x231 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x160 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x160 (_ bv1 32))))
 (let (($x30 (and $x265 $x228)))
 (let (($x210 (forall ((input.ind-%var2437X (_ BitVec 32)) )(let ((?x239 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2437X)))
 (let ((?x251 (input.spec-%var-x-1.1.1 input.ind-%var2437X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2437X)))
 (=> $x114 (= ?x251 ?x239))))))
 ))
 (let (($x243 (forall ((input.ind-%var2436X (_ BitVec 32)) )(let (($x34 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2436X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var2436X)))
 (= $x114 $x34))))
 ))
 (let (($x124 (and $x243 $x210)))
 (let (($x205 (and $x124 $x30)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x91 (and $x220 $x205)))
 (let (($x41 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x54 (and $x41 $x91)))
 (let (($x75 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x23 (and $x75 $x54)))
 (let (($x130 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x119 (bvadd ?x14 (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x15 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x119)))
 (let (($x40 (or false (or false (and (and true (or $x174 $x15)) (or $x225 $x130))))))
 (let (($x123 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x40)))
 (let (($x152 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x40)))
 (let (($x229 (and $x152 $x23)))
 (let (($x74 (=> $x229 $x213)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x173 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x173 (_ bv1 32))))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (not $x141)))
 (let (($x10 (or $x277 $x167)))
 (let (($x108 (= $x10 true)))
 (let ((?x278 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x278)))
 (let (($x249 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x249 true)))
 (let (($x271 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x271 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (= $x159 true)))
 (let (($x109 (forall ((input.ind-%var2462X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var2462X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x27))))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2462X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2462X)))
 (=> $x243 (= ?x289 ?x49))))))))
 ))
 (let (($x91 (forall ((input.ind-%var2461X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var2461X) (bvult input.ind-%var2461X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2461X)))
 (= $x243 $x233))))
 ))
 (let (($x93 (and $x91 $x109)))
 (let (($x144 (= $x93 true)))
 (let (($x61 (forall ((input.ind-%var2452X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var2452X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x27))))
 (let ((?x70 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2452X)))
 (let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2452X)))
 (=> $x101 (= ?x70 ?x49))))))))
 ))
 (let (($x21 (forall ((input.ind-%var2451X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var2451X) (bvult input.ind-%var2451X input.dst.llvm-%n))))
 (let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2451X)))
 (= $x101 $x233))))
 ))
 (let (($x48 (and $x21 $x61)))
 (let (($x241 (= $x48 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x238 true)))
 (let (($x82 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x55 (= $x82 true)))
 (let (($x184 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x184 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x32)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x92)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x58 $x199)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x8 $x263)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x264 $x256)))
 (let (($x112 (not $x135)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x33 $x106)))
 (let (($x175 (and (not $x279) $x112)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x84 $x208)))
 (let (($x153 (not $x150)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x52 $x262)))
 (let (($x211 (and (not $x79) $x153)))
 (let (($x142 (and (and (and (and (and (and $x211 $x175) $x36) $x168) $x172) $x194) $x39)))
 (let (($x76 (and $x142 $x131)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x95 (or false (or false (and (and true (or $x64 $x206)) (or $x6 $x80))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x95)))
 (let (($x197 (and $x116 $x76)))
 (let (($x272 (= $x197 true)))
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x221 (= (_ bv0 2) ?x255)))
 (let (($x214 (= $x221 true)))
 (let ((?x11 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x11)))
 (let (($x230 (= ?x166 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x230 true)))
 (let (($x46 (and $x287 $x214)))
 (let (($x125 (and $x46 $x272)))
 (let (($x269 (and $x125 $x38)))
 (let (($x122 (and $x269 $x55)))
 (let (($x183 (and $x122 $x226)))
 (let (($x107 (and $x183 $x241)))
 (let (($x78 (and $x107 $x144)))
 (let (($x118 (and $x78 $x31)))
 (let (($x83 (and $x118 $x87)))
 (let (($x134 (and $x83 $x113)))
 (let (($x51 (forall ((input.ind-%var2472X (_ BitVec 32)) )(let ((?x70 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2472X)))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2472X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2472X)))
 (=> $x243 (= ?x289 ?x70))))))
 ))
 (let (($x121 (forall ((input.ind-%var2471X (_ BitVec 32)) )(let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2471X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2471X)))
 (= $x243 $x101))))
 ))
 (let (($x105 (and $x121 $x51)))
 (let (($x103 (and $x105 $x134)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x117 $x103)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x260 (and $x179 $x37)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x207 (and $x127 $x260)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let (($x20 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd ?x14 (_ bv3 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x188 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x152 (or false (or false (and (and true (or $x164 $x188)) (or $x219 $x20))))))
 (let (($x75 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x152)))
 (let (($x43 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x152)))
 (let (($x196 (and $x43 $x207)))
 (let (($x282 (=> $x196 $x108)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x173 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x173 (_ bv1 32))))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (not $x141)))
 (let (($x10 (or $x277 $x167)))
 (let (($x108 (= $x10 true)))
 (let ((?x278 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x267 (bvneg ?x278)))
 (let (($x249 (= ?x267 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x249 true)))
 (let (($x271 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x87 (= $x271 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x31 (= $x159 true)))
 (let (($x109 (forall ((input.ind-%var2462X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var2462X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x27))))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2462X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2462X)))
 (=> $x243 (= ?x289 ?x49))))))))
 ))
 (let (($x91 (forall ((input.ind-%var2461X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var2461X) (bvult input.ind-%var2461X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2461X)))
 (= $x243 $x233))))
 ))
 (let (($x93 (and $x91 $x109)))
 (let (($x144 (= $x93 true)))
 (let (($x61 (forall ((input.ind-%var2452X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var2452X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x27))))
 (let ((?x70 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2452X)))
 (let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2452X)))
 (=> $x101 (= ?x70 ?x49))))))))
 ))
 (let (($x21 (forall ((input.ind-%var2451X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var2451X) (bvult input.ind-%var2451X input.dst.llvm-%n))))
 (let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2451X)))
 (= $x101 $x233))))
 ))
 (let (($x48 (and $x21 $x61)))
 (let (($x241 (= $x48 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x226 (= $x238 true)))
 (let (($x82 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x55 (= $x82 true)))
 (let (($x184 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x184 true)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x32)))
 (let ((?x92 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x92)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x58 $x199)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x8 $x263)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x264 $x256)))
 (let (($x112 (not $x135)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x33 $x106)))
 (let (($x175 (and (not $x279) $x112)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x84 $x208)))
 (let (($x153 (not $x150)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x52 $x262)))
 (let (($x211 (and (not $x79) $x153)))
 (let (($x142 (and (and (and (and (and (and $x211 $x175) $x36) $x168) $x172) $x194) $x39)))
 (let (($x76 (and $x142 $x131)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x206 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x95 (or false (or false (and (and true (or $x64 $x206)) (or $x6 $x80))))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x95)))
 (let (($x197 (and $x116 $x76)))
 (let (($x272 (= $x197 true)))
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x221 (= (_ bv0 2) ?x255)))
 (let (($x214 (= $x221 true)))
 (let ((?x11 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x166 (bvneg ?x11)))
 (let (($x230 (= ?x166 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x230 true)))
 (let (($x46 (and $x287 $x214)))
 (let (($x125 (and $x46 $x272)))
 (let (($x269 (and $x125 $x38)))
 (let (($x122 (and $x269 $x55)))
 (let (($x183 (and $x122 $x226)))
 (let (($x107 (and $x183 $x241)))
 (let (($x78 (and $x107 $x144)))
 (let (($x118 (and $x78 $x31)))
 (let (($x83 (and $x118 $x87)))
 (let (($x134 (and $x83 $x113)))
 (let (($x51 (forall ((input.ind-%var2472X (_ BitVec 32)) )(let ((?x70 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2472X)))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2472X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2472X)))
 (=> $x243 (= ?x289 ?x70))))))
 ))
 (let (($x121 (forall ((input.ind-%var2471X (_ BitVec 32)) )(let (($x101 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2471X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2471X)))
 (= $x243 $x101))))
 ))
 (let (($x105 (and $x121 $x51)))
 (let (($x103 (and $x105 $x134)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x117 $x103)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x260 (and $x179 $x37)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x207 (and $x127 $x260)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let (($x20 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd ?x14 (_ bv3 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x188 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x152 (or false (or false (and (and true (or $x164 $x188)) (or $x219 $x20))))))
 (let (($x75 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x152)))
 (let (($x43 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x152)))
 (let (($x196 (and $x43 $x207)))
 (let (($x282 (=> $x196 $x108)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 161 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x19)))
 (let ((?x149 (bvneg ?x281)))
 (let (($x257 (= ?x149 ?x148)))
 (let (($x290 (= $x257 true)))
 (let ((?x250 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x250)))
 (let (($x62 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x62 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x67 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (= $x120 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x5 (= $x156 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x22 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x30 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x237 (bvsub ?x14 ?x77)))
 (let (($x69 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x237) (bvult ?x14 ?x237))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x242 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x56 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x16 (bvmul (_ bv4 64) ?x56)))
 (let ((?x187 ((_ extract 63 32) ?x16)))
 (let (($x157 (= ?x187 ?x242)))
 (let (($x213 (and $x157 $x69)))
 (let (($x245 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x42 (and $x245 $x213)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x141 $x42)))
 (let (($x171 (= $x145 true)))
 (let (($x236 (= $x141 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x218)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x198)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x34 $x286)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x232 $x97)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x102 $x9)))
 (let (($x209 (not $x274)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x268 (and $x108 $x282)))
 (let (($x292 (and (not $x268) $x209)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x196 $x277)))
 (let (($x173 (not $x202)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x93 $x144)))
 (let (($x10 (and (not $x207) $x173)))
 (let (($x18 (and (and (and (and (and (and $x10 $x292) $x265) $x239) $x137) $x248) $x89)))
 (let (($x170 (and $x18 $x133)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x103 (or false (or false (and (and true (or $x118 $x271)) (or $x278 $x267))))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x53 (and $x260 $x170)))
 (let (($x176 (= $x53 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x91 (= (_ bv0 2) ?x205)))
 (let (($x98 (= $x91 true)))
 (let (($x276 (forall ((input.ind-%var2497X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var2497X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x284))))
 (let ((?x201 (input.spec-%var-x-1.1.1 input.ind-%var2497X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2497X)))
 (=> $x121 (= ?x201 ?x76))))))))
 ))
 (let (($x25 (forall ((input.ind-%var2496X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var2496X) (bvult input.ind-%var2496X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2496X)))
 (= $x121 $x153))))
 ))
 (let (($x61 (and $x25 $x276)))
 (let (($x48 (= $x61 true)))
 (let (($x125 (forall ((input.ind-%var2487X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var2487X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x284))))
 (let ((?x204 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2487X)))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2487X)))
 (=> $x85 (= ?x204 ?x76))))))))
 ))
 (let (($x33 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var2486X) (bvult input.ind-%var2486X input.dst.llvm-%n))))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2486X)))
 (= $x85 $x153))))
 ))
 (let (($x24 (and $x33 $x125)))
 (let (($x184 (= $x24 true)))
 (let ((?x80 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x80)))
 (let (($x283 (= ?x155 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x283 true)))
 (let (($x38 (and $x95 $x184)))
 (let (($x241 (and $x38 $x48)))
 (let (($x139 (and $x241 $x98)))
 (let (($x252 (and $x139 $x176)))
 (let (($x50 (and $x252 $x236)))
 (let (($x186 (and $x50 $x171)))
 (let (($x23 (and $x186 $x7)))
 (let (($x160 (and $x23 $x178)))
 (let (($x294 (and $x160 $x5)))
 (let (($x151 (and $x294 $x295)))
 (let (($x291 (and $x151 $x100)))
 (let (($x163 (and $x291 $x90)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x206 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x206 (_ bv1 32))))
 (let (($x288 (and $x132 $x163)))
 (let (($x195 (forall ((input.ind-%var2507X (_ BitVec 32)) )(let ((?x204 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2507X)))
 (let ((?x201 (input.spec-%var-x-1.1.1 input.ind-%var2507X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2507X)))
 (=> $x121 (= ?x201 ?x204))))))
 ))
 (let (($x154 (forall ((input.ind-%var2506X (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2506X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2506X)))
 (= $x121 $x85))))
 ))
 (let (($x45 (and $x154 $x195)))
 (let (($x73 (and $x45 $x288)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x138 (and $x94 $x73)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x104 (and $x220 $x138)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x189 $x104)))
 (let (($x40 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x14 (_ bv3 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x225 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x43 (or false (or false (and (and true (or $x26 $x225)) (or $x240 $x40))))))
 (let (($x127 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x43)))
 (let (($x143 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x43)))
 (let (($x161 (and $x143 $x275)))
 (let (($x190 (=> $x161 $x290)))
 (not $x190)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x148 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x281 (bvmul (_ bv4294967295 32) ?x19)))
 (let ((?x149 (bvneg ?x281)))
 (let (($x257 (= ?x149 ?x148)))
 (let (($x290 (= $x257 true)))
 (let ((?x250 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x247 (bvneg ?x250)))
 (let (($x62 (= ?x247 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x62 true)))
 (let (($x67 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x67 true)))
 (let (($x120 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (= $x120 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x5 (= $x156 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x178 (= $x22 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x30 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x237 (bvsub ?x14 ?x77)))
 (let (($x69 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x237) (bvult ?x14 ?x237))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x242 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x56 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x16 (bvmul (_ bv4 64) ?x56)))
 (let ((?x187 ((_ extract 63 32) ?x16)))
 (let (($x157 (= ?x187 ?x242)))
 (let (($x213 (and $x157 $x69)))
 (let (($x245 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x42 (and $x245 $x213)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x141 $x42)))
 (let (($x171 (= $x145 true)))
 (let (($x236 (= $x141 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x133 (= (_ bv0 32) ?x218)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x198)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (and $x34 $x286)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (and $x232 $x97)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x102 $x9)))
 (let (($x209 (not $x274)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x268 (and $x108 $x282)))
 (let (($x292 (and (not $x268) $x209)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x196 $x277)))
 (let (($x173 (not $x202)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (and $x93 $x144)))
 (let (($x10 (and (not $x207) $x173)))
 (let (($x18 (and (and (and (and (and (and $x10 $x292) $x265) $x239) $x137) $x248) $x89)))
 (let (($x170 (and $x18 $x133)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x278 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x103 (or false (or false (and (and true (or $x118 $x271)) (or $x278 $x267))))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x53 (and $x260 $x170)))
 (let (($x176 (= $x53 true)))
 (let ((?x205 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x91 (= (_ bv0 2) ?x205)))
 (let (($x98 (= $x91 true)))
 (let (($x276 (forall ((input.ind-%var2497X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var2497X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x284))))
 (let ((?x201 (input.spec-%var-x-1.1.1 input.ind-%var2497X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2497X)))
 (=> $x121 (= ?x201 ?x76))))))))
 ))
 (let (($x25 (forall ((input.ind-%var2496X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var2496X) (bvult input.ind-%var2496X input.dst.llvm-%n))))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2496X)))
 (= $x121 $x153))))
 ))
 (let (($x61 (and $x25 $x276)))
 (let (($x48 (= $x61 true)))
 (let (($x125 (forall ((input.ind-%var2487X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var2487X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x284))))
 (let ((?x204 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2487X)))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2487X)))
 (=> $x85 (= ?x204 ?x76))))))))
 ))
 (let (($x33 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var2486X) (bvult input.ind-%var2486X input.dst.llvm-%n))))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2486X)))
 (= $x85 $x153))))
 ))
 (let (($x24 (and $x33 $x125)))
 (let (($x184 (= $x24 true)))
 (let ((?x80 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x80)))
 (let (($x283 (= ?x155 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x95 (= $x283 true)))
 (let (($x38 (and $x95 $x184)))
 (let (($x241 (and $x38 $x48)))
 (let (($x139 (and $x241 $x98)))
 (let (($x252 (and $x139 $x176)))
 (let (($x50 (and $x252 $x236)))
 (let (($x186 (and $x50 $x171)))
 (let (($x23 (and $x186 $x7)))
 (let (($x160 (and $x23 $x178)))
 (let (($x294 (and $x160 $x5)))
 (let (($x151 (and $x294 $x295)))
 (let (($x291 (and $x151 $x100)))
 (let (($x163 (and $x291 $x90)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x206 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x132 (bvuge ?x206 (_ bv1 32))))
 (let (($x288 (and $x132 $x163)))
 (let (($x195 (forall ((input.ind-%var2507X (_ BitVec 32)) )(let ((?x204 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2507X)))
 (let ((?x201 (input.spec-%var-x-1.1.1 input.ind-%var2507X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2507X)))
 (=> $x121 (= ?x201 ?x204))))))
 ))
 (let (($x154 (forall ((input.ind-%var2506X (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2506X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var2506X)))
 (= $x121 $x85))))
 ))
 (let (($x45 (and $x154 $x195)))
 (let (($x73 (and $x45 $x288)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x138 (and $x94 $x73)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x104 (and $x220 $x138)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x189 $x104)))
 (let (($x40 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd ?x14 (_ bv3 32))))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x225 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x43 (or false (or false (and (and true (or $x26 $x225)) (or $x240 $x40))))))
 (let (($x127 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x43)))
 (let (($x143 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x43)))
 (let (($x161 (and $x143 $x275)))
 (let (($x190 (=> $x161 $x290)))
 (not $x190)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x246))))
 (let ((?x17 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x181)))
 (let ((?x226 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x27 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x226)))
 (let ((?x233 (bvmul (_ bv4294967295 32) ?x27)))
 (let ((?x193 (bvneg ?x233)))
 (let (($x258 (= ?x193 ?x17)))
 (let (($x59 (= $x258 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x129)))
 (let (($x68 (= ?x72 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x68 true)))
 (let ((?x280 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x280)))
 (let (($x55 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x55 true)))
 (let ((?x84 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x254 (= (_ bv0 2) ?x84)))
 (let (($x279 (= $x254 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x168 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x222 true)))
 (let (($x8 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var2532X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x250))))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var2532X)))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2532X)))
 (=> $x154 (= ?x227 ?x73))))))))
 ))
 (let (($x109 (forall ((input.ind-%var2531X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var2531X) (bvult input.ind-%var2531X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2531X)))
 (= $x154 $x157))))
 ))
 (let (($x212 (and $x109 $x8)))
 (let (($x47 (= $x212 true)))
 (let (($x275 (forall ((input.ind-%var2522X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var2522X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x250))))
 (let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2522X)))
 (let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2522X)))
 (=> $x46 (= ?x155 ?x73))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2521X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var2521X) (bvult input.ind-%var2521X input.dst.llvm-%n))))
 (let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2521X)))
 (= $x46 $x157))))
 ))
 (let (($x161 (and $x237 $x275)))
 (let (($x19 (= $x161 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x50 (= $x236 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x176 (= $x53 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x218 true)))
 (let (($x270 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 (bvsub ?x14 ?x77)) (bvult ?x14 (bvsub ?x14 ?x77)))))
 (let (($x239 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x232 (ite $x239 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x265 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x65 (bvmul (_ bv4 64) ?x265)))
 (let ((?x114 ((_ extract 63 32) ?x65)))
 (let (($x34 (= ?x114 ?x232)))
 (let (($x128 (and $x34 $x270)))
 (let (($x253 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x248 (and $x253 $x128)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (=> $x141 $x248)))
 (let (($x198 (= $x111 true)))
 (let (($x9 (= $x141 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x167)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x144)))
 (let ((?x260 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x260)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x249)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x267 $x113)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x278 $x134)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x98 $x139)))
 (let (($x159 (not $x78)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x107 $x205)))
 (let (($x31 (and (not $x91) $x159)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x49 $x235)))
 (let (($x61 (not $x276)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x131 $x36)))
 (let (($x241 (and (not $x25) $x61)))
 (let (($x282 (and (and (and (and (and (and $x241 $x31) $x271) $x83) $x103) $x93) $x207)))
 (let (($x268 (and $x282 $x196)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x184 (or false (or false (and (and true (or $x194 $x71)) (or $x76 $x197))))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x251 (and $x183 $x268)))
 (let (($x102 (= $x251 true)))
 (let (($x274 (and $x102 $x9)))
 (let (($x89 (and $x274 $x198)))
 (let (($x170 (and $x89 $x133)))
 (let (($x252 (and $x170 $x176)))
 (let (($x54 (and $x252 $x50)))
 (let (($x281 (and $x54 $x19)))
 (let (($x175 (and $x281 $x47)))
 (let (($x285 (and $x175 $x112)))
 (let (($x52 (and $x285 $x58)))
 (let (($x199 (and $x52 $x279)))
 (let (($x21 (and $x199 $x122)))
 (let (($x259 (and $x21 $x165)))
 (let (($x264 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x263 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x263 (_ bv1 32))))
 (let (($x234 (and $x172 $x259)))
 (let (($x153 (forall ((input.ind-%var2542X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2542X)))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var2542X)))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2542X)))
 (=> $x154 (= ?x227 ?x155))))))
 ))
 (let (($x261 (forall ((input.ind-%var2541X (_ BitVec 32)) )(let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2541X)))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2541X)))
 (= $x154 $x46))))
 ))
 (let (($x211 (and $x261 $x153)))
 (let (($x192 (and $x211 $x234)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x124 $x192)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x147 (and $x117 $x293)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x41 $x147)))
 (let (($x152 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd ?x14 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x219 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x143 (or false (or false (and (and true (or $x57 $x219)) (or $x123 $x152))))))
 (let (($x189 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x119 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x238 (and $x119 $x82)))
 (let (($x96 (=> $x238 $x59)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv1 32))) (select input.dst.llvm-mem ?x14))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x14 (_ bv2 32))) ?x246))))
 (let ((?x17 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x181)))
 (let ((?x226 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x27 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x226)))
 (let ((?x233 (bvmul (_ bv4294967295 32) ?x27)))
 (let ((?x193 (bvneg ?x233)))
 (let (($x258 (= ?x193 ?x17)))
 (let (($x59 (= $x258 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x72 (bvneg ?x129)))
 (let (($x68 (= ?x72 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x165 (= $x68 true)))
 (let ((?x280 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x280)))
 (let (($x55 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x122 (= $x55 true)))
 (let ((?x84 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x254 (= (_ bv0 2) ?x84)))
 (let (($x279 (= $x254 true)))
 (let (($x168 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x168 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x222 true)))
 (let (($x8 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var2532X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x250))))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var2532X)))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2532X)))
 (=> $x154 (= ?x227 ?x73))))))))
 ))
 (let (($x109 (forall ((input.ind-%var2531X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var2531X) (bvult input.ind-%var2531X input.dst.llvm-%n))))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2531X)))
 (= $x154 $x157))))
 ))
 (let (($x212 (and $x109 $x8)))
 (let (($x47 (= $x212 true)))
 (let (($x275 (forall ((input.ind-%var2522X (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul input.ind-%var2522X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x250))))
 (let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2522X)))
 (let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2522X)))
 (=> $x46 (= ?x155 ?x73))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2521X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var2521X) (bvult input.ind-%var2521X input.dst.llvm-%n))))
 (let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2521X)))
 (= $x46 $x157))))
 ))
 (let (($x161 (and $x237 $x275)))
 (let (($x19 (= $x161 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x50 (= $x236 true)))
 (let (($x53 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x176 (= $x53 true)))
 (let (($x218 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x218 true)))
 (let (($x270 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 (bvsub ?x14 ?x77)) (bvult ?x14 (bvsub ?x14 ?x77)))))
 (let (($x239 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x232 (ite $x239 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x265 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x65 (bvmul (_ bv4 64) ?x265)))
 (let ((?x114 ((_ extract 63 32) ?x65)))
 (let (($x34 (= ?x114 ?x232)))
 (let (($x128 (and $x34 $x270)))
 (let (($x253 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x248 (and $x253 $x128)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (=> $x141 $x248)))
 (let (($x198 (= $x111 true)))
 (let (($x9 (= $x141 true)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x167)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x207 (= (_ bv0 32) ?x144)))
 (let ((?x260 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x260)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x249)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x267 $x113)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x278 $x134)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x98 $x139)))
 (let (($x159 (not $x78)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (and $x107 $x205)))
 (let (($x31 (and (not $x91) $x159)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x49 $x235)))
 (let (($x61 (not $x276)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x131 $x36)))
 (let (($x241 (and (not $x25) $x61)))
 (let (($x282 (and (and (and (and (and (and $x241 $x31) $x271) $x83) $x103) $x93) $x207)))
 (let (($x268 (and $x282 $x196)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x184 (or false (or false (and (and true (or $x194 $x71)) (or $x76 $x197))))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x184)))
 (let (($x251 (and $x183 $x268)))
 (let (($x102 (= $x251 true)))
 (let (($x274 (and $x102 $x9)))
 (let (($x89 (and $x274 $x198)))
 (let (($x170 (and $x89 $x133)))
 (let (($x252 (and $x170 $x176)))
 (let (($x54 (and $x252 $x50)))
 (let (($x281 (and $x54 $x19)))
 (let (($x175 (and $x281 $x47)))
 (let (($x285 (and $x175 $x112)))
 (let (($x52 (and $x285 $x58)))
 (let (($x199 (and $x52 $x279)))
 (let (($x21 (and $x199 $x122)))
 (let (($x259 (and $x21 $x165)))
 (let (($x264 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x263 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x263 (_ bv1 32))))
 (let (($x234 (and $x172 $x259)))
 (let (($x153 (forall ((input.ind-%var2542X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2542X)))
 (let ((?x227 (input.spec-%var-x-1.1.1 input.ind-%var2542X)))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2542X)))
 (=> $x154 (= ?x227 ?x155))))))
 ))
 (let (($x261 (forall ((input.ind-%var2541X (_ BitVec 32)) )(let (($x46 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2541X)))
 (let (($x154 (input.spec-%var-x-1.0.1 input.ind-%var2541X)))
 (= $x154 $x46))))
 ))
 (let (($x211 (and $x261 $x153)))
 (let (($x192 (and $x211 $x234)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x124 $x192)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x147 (and $x117 $x293)))
 (let (($x41 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x41 $x147)))
 (let (($x152 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x225 (bvadd ?x14 (_ bv3 32))))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x219 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x225)))
 (let (($x143 (or false (or false (and (and true (or $x57 $x219)) (or $x123 $x152))))))
 (let (($x189 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x119 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x238 (and $x119 $x82)))
 (let (($x96 (=> $x238 $x59)))
 (not $x96)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 183 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (bvule ?x101 (_ bv4294967294 32))))
 (let (($x243 (= $x51 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x29)))
 (let (($x120 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x120 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x187 (= $x16 true)))
 (let (($x178 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x178 true)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x229)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x69)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x121)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x132 $x204)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x64 $x80)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x258 $x59)))
 (let (($x182 (not $x96)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x191 $x181)))
 (let (($x32 (and (not $x17) $x182)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x244 $x86)))
 (let (($x214 (not $x11)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x266 $x129)))
 (let (($x246 (and (not $x63) $x214)))
 (let (($x22 (and (and (and (and (and (and $x246 $x32) $x200) $x6) $x85) $x13) $x88)))
 (let (($x186 (and $x22 $x56)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x27 (or false (or false (and (and true (or $x165 $x259)) (or $x293 $x147))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x228 (and $x193 $x186)))
 (let (($x171 (= $x228 true)))
 (let (($x269 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x269 true)))
 (let ((?x254 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x279 (= (_ bv0 2) ?x254)))
 (let (($x199 (= $x279 true)))
 (let (($x58 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (= $x58 true)))
 (let (($x222 (forall ((input.ind-%var2568X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2568X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x170))))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var2568X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2568X)))
 (=> $x261 (= ?x39 ?x54))))))))
 ))
 (let (($x100 (forall ((input.ind-%var2567X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var2567X) (bvult input.ind-%var2567X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2567X)))
 (= $x261 $x102))))
 ))
 (let (($x112 (and $x100 $x222)))
 (let (($x285 (= $x112 true)))
 (let (($x157 (forall ((input.ind-%var2558X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2558X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x170))))
 (let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2558X)))
 (let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2558X)))
 (=> $x150 (= ?x194 ?x54))))))))
 ))
 (let (($x274 (forall ((input.ind-%var2557X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var2557X) (bvult input.ind-%var2557X input.dst.llvm-%n))))
 (let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2557X)))
 (= $x150 $x102))))
 ))
 (let (($x44 (and $x274 $x157)))
 (let (($x237 (= $x44 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x10 true)))
 (let ((?x173 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x173)))
 (let (($x249 (= ?x278 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x249 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x98 (bvsub ?x14 ?x77)))
 (let (($x31 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x98) (bvult ?x14 ?x98))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x91 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x276 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x61 (bvmul (_ bv4 64) ?x276)))
 (let ((?x241 ((_ extract 63 32) ?x61)))
 (let (($x37 (= ?x241 ?x91)))
 (let (($x277 (and $x37 $x31)))
 (let (($x49 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x118 (and $x49 $x277)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x141 $x118)))
 (let (($x202 (= $x271 true)))
 (let (($x36 (= $x141 true)))
 (let (($x87 (and $x36 $x202)))
 (let (($x134 (and $x87 $x113)))
 (let (($x93 (and $x134 $x260)))
 (let (($x213 (and $x93 $x237)))
 (let (($x168 (and $x213 $x285)))
 (let (($x115 (and $x168 $x52)))
 (let (($x280 (and $x115 $x199)))
 (let (($x122 (and $x280 $x55)))
 (let (($x30 (and $x122 $x171)))
 (let (($x245 (and $x30 $x5)))
 (let (($x294 (and $x245 $x187)))
 (let (($x149 (and $x294 $x289)))
 (let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x183 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x183 (_ bv1 32))))
 (let (($x257 (and $x131 $x149)))
 (let (($x272 (forall ((input.ind-%var2578X (_ BitVec 32)) )(let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2578X)))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var2578X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2578X)))
 (=> $x261 (= ?x39 ?x194))))))
 ))
 (let (($x264 (forall ((input.ind-%var2577X (_ BitVec 32)) )(let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2577X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2577X)))
 (= $x261 $x150))))
 ))
 (let (($x125 (and $x264 $x272)))
 (let (($x290 (and $x125 $x257)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x230 (and $x105 $x290)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x180 (and $x94 $x230)))
 (let (($x179 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x179 $x180)))
 (let (($x43 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd ?x14 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x240 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x119 (or false (or false (and (and true (or $x130 $x240)) (or $x75 $x43))))))
 (let (($x41 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x119)))
 (let (($x15 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x119)))
 (let (($x116 (and $x15 $x169)))
 (let (($x70 (=> $x116 $x243)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x101 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x51 (bvule ?x101 (_ bv4294967294 32))))
 (let (($x243 (= $x51 true)))
 (let ((?x29 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x29)))
 (let (($x120 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x120 true)))
 (let (($x16 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x187 (= $x16 true)))
 (let (($x178 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x178 true)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x229)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x69)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x121)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x132 $x204)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x64 $x80)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x258 $x59)))
 (let (($x182 (not $x96)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x191 $x181)))
 (let (($x32 (and (not $x17) $x182)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x244 $x86)))
 (let (($x214 (not $x11)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x266 $x129)))
 (let (($x246 (and (not $x63) $x214)))
 (let (($x22 (and (and (and (and (and (and $x246 $x32) $x200) $x6) $x85) $x13) $x88)))
 (let (($x186 (and $x22 $x56)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x27 (or false (or false (and (and true (or $x165 $x259)) (or $x293 $x147))))))
 (let (($x193 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x27)))
 (let (($x228 (and $x193 $x186)))
 (let (($x171 (= $x228 true)))
 (let (($x269 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x269 true)))
 (let ((?x254 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x279 (= (_ bv0 2) ?x254)))
 (let (($x199 (= $x279 true)))
 (let (($x58 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (= $x58 true)))
 (let (($x222 (forall ((input.ind-%var2568X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2568X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x170))))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var2568X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2568X)))
 (=> $x261 (= ?x39 ?x54))))))))
 ))
 (let (($x100 (forall ((input.ind-%var2567X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var2567X) (bvult input.ind-%var2567X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2567X)))
 (= $x261 $x102))))
 ))
 (let (($x112 (and $x100 $x222)))
 (let (($x285 (= $x112 true)))
 (let (($x157 (forall ((input.ind-%var2558X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2558X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x170))))
 (let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2558X)))
 (let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2558X)))
 (=> $x150 (= ?x194 ?x54))))))))
 ))
 (let (($x274 (forall ((input.ind-%var2557X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var2557X) (bvult input.ind-%var2557X input.dst.llvm-%n))))
 (let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2557X)))
 (= $x150 $x102))))
 ))
 (let (($x44 (and $x274 $x157)))
 (let (($x237 (= $x44 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x10 true)))
 (let ((?x173 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x278 (bvneg ?x173)))
 (let (($x249 (= ?x278 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x113 (= $x249 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x98 (bvsub ?x14 ?x77)))
 (let (($x31 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x98) (bvult ?x14 ?x98))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x91 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x276 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x61 (bvmul (_ bv4 64) ?x276)))
 (let ((?x241 ((_ extract 63 32) ?x61)))
 (let (($x37 (= ?x241 ?x91)))
 (let (($x277 (and $x37 $x31)))
 (let (($x49 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x118 (and $x49 $x277)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (=> $x141 $x118)))
 (let (($x202 (= $x271 true)))
 (let (($x36 (= $x141 true)))
 (let (($x87 (and $x36 $x202)))
 (let (($x134 (and $x87 $x113)))
 (let (($x93 (and $x134 $x260)))
 (let (($x213 (and $x93 $x237)))
 (let (($x168 (and $x213 $x285)))
 (let (($x115 (and $x168 $x52)))
 (let (($x280 (and $x115 $x199)))
 (let (($x122 (and $x280 $x55)))
 (let (($x30 (and $x122 $x171)))
 (let (($x245 (and $x30 $x5)))
 (let (($x294 (and $x245 $x187)))
 (let (($x149 (and $x294 $x289)))
 (let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x183 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x183 (_ bv1 32))))
 (let (($x257 (and $x131 $x149)))
 (let (($x272 (forall ((input.ind-%var2578X (_ BitVec 32)) )(let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2578X)))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var2578X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2578X)))
 (=> $x261 (= ?x39 ?x194))))))
 ))
 (let (($x264 (forall ((input.ind-%var2577X (_ BitVec 32)) )(let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2577X)))
 (let (($x261 (input.spec-%var-x-1.0.1 input.ind-%var2577X)))
 (= $x261 $x150))))
 ))
 (let (($x125 (and $x264 $x272)))
 (let (($x290 (and $x125 $x257)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x230 (and $x105 $x290)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x180 (and $x94 $x230)))
 (let (($x179 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x169 (and $x179 $x180)))
 (let (($x43 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd ?x14 (_ bv3 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x240 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x119 (or false (or false (and (and true (or $x130 $x240)) (or $x75 $x43))))))
 (let (($x41 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x119)))
 (let (($x15 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x119)))
 (let (($x116 (and $x15 $x169)))
 (let (($x70 (=> $x116 $x243)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x284 (bvsge ?x212 (_ bv0 32))))
 (let (($x172 (= $x284 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x104)))
 (let (($x138 (= ?x275 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x138 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x135 true)))
 (let (($x90 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x90 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x97)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x114)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x239)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (and $x65 $x270)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x265 $x286)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x154 $x155)))
 (let (($x46 (not $x140)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x38 $x263)))
 (let (($x209 (and (not $x92) $x46)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x166 $x217)))
 (let (($x208 (not $x21)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x16 $x187)))
 (let (($x227 (and (not $x70) $x208)))
 (let (($x111 (and (and (and (and (and (and $x227 $x209) $x108) $x282) $x210) $x99) $x232)))
 (let (($x250 (and $x111 $x128)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x101 (or false (or false (and (and true (or $x120 $x289)) (or $x290 $x230))))))
 (let (($x243 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x295 (and $x243 $x250)))
 (let (($x163 (= $x295 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x30 true)))
 (let ((?x56 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x186 (= (_ bv0 2) ?x56)))
 (let (($x228 (= $x186 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x69 true)))
 (let (($x156 (forall ((input.ind-%var2603X (_ BitVec 32)) )(let ((?x233 (bvadd (bvmul input.ind-%var2603X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x234))))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var2603X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2603X)))
 (=> $x264 (= ?x36 ?x226))))))))
 ))
 (let (($x17 (forall ((input.ind-%var2602X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2602X) (bvult input.ind-%var2602X input.dst.llvm-%n))))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2602X)))
 (= $x264 $x237))))
 ))
 (let (($x195 (and $x17 $x156)))
 (let (($x13 (= $x195 true)))
 (let (($x266 (forall ((input.ind-%var2593X (_ BitVec 32)) )(let ((?x233 (bvadd (bvmul input.ind-%var2593X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x234))))
 (let ((?x49 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2593X)))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2593X)))
 (=> $x76 (= ?x49 ?x226))))))))
 ))
 (let (($x62 (forall ((input.ind-%var2592X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2592X) (bvult input.ind-%var2592X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2592X)))
 (= $x76 $x237))))
 ))
 (let (($x129 (and $x62 $x266)))
 (let (($x63 (= $x129 true)))
 (let (($x176 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x176 true)))
 (let ((?x231 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x231)))
 (let (($x236 (= ?x198 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x236 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x113 (bvsub ?x14 ?x77)))
 (let (($x260 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x113) (bvult ?x14 ?x113))))
 (let (($x173 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x267 (ite $x173 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x202 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x202)))
 (let ((?x83 ((_ extract 63 32) ?x87)))
 (let (($x249 (= ?x83 ?x267)))
 (let (($x93 (and $x249 $x260)))
 (let (($x118 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x251 (and $x118 $x93)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (=> $x141 $x251)))
 (let (($x102 (= $x268 true)))
 (let (($x159 (= $x141 true)))
 (let (($x9 (and $x159 $x102)))
 (let (($x34 (and $x9 $x50)))
 (let (($x133 (and $x34 $x218)))
 (let (($x221 (and $x133 $x63)))
 (let (($x23 (and $x221 $x13)))
 (let (($x22 (and $x23 $x88)))
 (let (($x171 (and $x22 $x228)))
 (let (($x5 (and $x171 $x178)))
 (let (($x288 (and $x5 $x163)))
 (let (($x109 (and $x288 $x73)))
 (let (($x281 (and $x109 $x19)))
 (let (($x35 (and $x281 $x161)))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x98 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x98 (_ bv1 32))))
 (let (($x126 (and $x78 $x35)))
 (let (($x205 (forall ((input.ind-%var2613X (_ BitVec 32)) )(let ((?x49 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2613X)))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var2613X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2613X)))
 (=> $x264 (= ?x36 ?x49))))))
 ))
 (let (($x24 (forall ((input.ind-%var2612X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2612X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2612X)))
 (= $x264 $x76))))
 ))
 (let (($x91 (and $x24 $x205)))
 (let (($x151 (and $x91 $x126)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x45 $x151)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x247 (and $x124 $x7)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x220 $x247)))
 (let (($x143 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x240 (bvadd ?x14 (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x240)))
 (let (($x123 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x240)))
 (let (($x15 (or false (or false (and (and true (or $x20 $x123)) (or $x127 $x143))))))
 (let (($x179 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x15)))
 (let (($x188 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x15)))
 (let (($x67 (and $x188 $x8)))
 (let (($x142 (=> $x67 $x172)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x284 (bvsge ?x212 (_ bv0 32))))
 (let (($x172 (= $x284 true)))
 (let ((?x104 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x104)))
 (let (($x138 (= ?x275 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x161 (= $x138 true)))
 (let (($x135 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x19 (= $x135 true)))
 (let (($x90 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x90 true)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x97)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x114)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x239)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (and $x65 $x270)))
 (let (($x265 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (and $x265 $x286)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x154 $x155)))
 (let (($x46 (not $x140)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x38 $x263)))
 (let (($x209 (and (not $x92) $x46)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x166 $x217)))
 (let (($x208 (not $x21)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x16 $x187)))
 (let (($x227 (and (not $x70) $x208)))
 (let (($x111 (and (and (and (and (and (and $x227 $x209) $x108) $x282) $x210) $x99) $x232)))
 (let (($x250 (and $x111 $x128)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x101 (or false (or false (and (and true (or $x120 $x289)) (or $x290 $x230))))))
 (let (($x243 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x295 (and $x243 $x250)))
 (let (($x163 (= $x295 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x30 true)))
 (let ((?x56 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x186 (= (_ bv0 2) ?x56)))
 (let (($x228 (= $x186 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x69 true)))
 (let (($x156 (forall ((input.ind-%var2603X (_ BitVec 32)) )(let ((?x233 (bvadd (bvmul input.ind-%var2603X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x234))))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var2603X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2603X)))
 (=> $x264 (= ?x36 ?x226))))))))
 ))
 (let (($x17 (forall ((input.ind-%var2602X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2602X) (bvult input.ind-%var2602X input.dst.llvm-%n))))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2602X)))
 (= $x264 $x237))))
 ))
 (let (($x195 (and $x17 $x156)))
 (let (($x13 (= $x195 true)))
 (let (($x266 (forall ((input.ind-%var2593X (_ BitVec 32)) )(let ((?x233 (bvadd (bvmul input.ind-%var2593X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem ?x233))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x233 (_ bv2 32))) ?x234))))
 (let ((?x49 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2593X)))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2593X)))
 (=> $x76 (= ?x49 ?x226))))))))
 ))
 (let (($x62 (forall ((input.ind-%var2592X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var2592X) (bvult input.ind-%var2592X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2592X)))
 (= $x76 $x237))))
 ))
 (let (($x129 (and $x62 $x266)))
 (let (($x63 (= $x129 true)))
 (let (($x176 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x218 (= $x176 true)))
 (let ((?x231 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x198 (bvneg ?x231)))
 (let (($x236 (= ?x198 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x236 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x113 (bvsub ?x14 ?x77)))
 (let (($x260 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x113) (bvult ?x14 ?x113))))
 (let (($x173 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x267 (ite $x173 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x202 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x87 (bvmul (_ bv4 64) ?x202)))
 (let ((?x83 ((_ extract 63 32) ?x87)))
 (let (($x249 (= ?x83 ?x267)))
 (let (($x93 (and $x249 $x260)))
 (let (($x118 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x251 (and $x118 $x93)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (=> $x141 $x251)))
 (let (($x102 (= $x268 true)))
 (let (($x159 (= $x141 true)))
 (let (($x9 (and $x159 $x102)))
 (let (($x34 (and $x9 $x50)))
 (let (($x133 (and $x34 $x218)))
 (let (($x221 (and $x133 $x63)))
 (let (($x23 (and $x221 $x13)))
 (let (($x22 (and $x23 $x88)))
 (let (($x171 (and $x22 $x228)))
 (let (($x5 (and $x171 $x178)))
 (let (($x288 (and $x5 $x163)))
 (let (($x109 (and $x288 $x73)))
 (let (($x281 (and $x109 $x19)))
 (let (($x35 (and $x281 $x161)))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x98 (ite $x139 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x98 (_ bv1 32))))
 (let (($x126 (and $x78 $x35)))
 (let (($x205 (forall ((input.ind-%var2613X (_ BitVec 32)) )(let ((?x49 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2613X)))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var2613X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2613X)))
 (=> $x264 (= ?x36 ?x49))))))
 ))
 (let (($x24 (forall ((input.ind-%var2612X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2612X)))
 (let (($x264 (input.spec-%var-x-1.0.1 input.ind-%var2612X)))
 (= $x264 $x76))))
 ))
 (let (($x91 (and $x24 $x205)))
 (let (($x151 (and $x91 $x126)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x45 $x151)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x247 (and $x124 $x7)))
 (let (($x220 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x8 (and $x220 $x247)))
 (let (($x143 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x240 (bvadd ?x14 (_ bv3 32))))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x240)))
 (let (($x123 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x240)))
 (let (($x15 (or false (or false (and (and true (or $x20 $x123)) (or $x127 $x143))))))
 (let (($x179 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x15)))
 (let (($x188 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x15)))
 (let (($x67 (and $x188 $x8)))
 (let (($x142 (=> $x67 $x172)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (bvule ?x204 (_ bv4294967294 32))))
 (let (($x183 (= $x276 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x42)))
 (let (($x32 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x32 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x64 true)))
 (let (($x96 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x96 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x11 (= $x244 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x115 (bvsub ?x14 ?x77)))
 (let (($x242 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x115) (bvult ?x14 ?x115))))
 (let (($x58 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x52 (ite $x58 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvmul (_ bv4 64) ?x269)))
 (let ((?x279 ((_ extract 63 32) ?x254)))
 (let (($x168 (= ?x279 ?x52)))
 (let (($x66 (and $x168 $x242)))
 (let (($x285 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x122 (and $x285 $x66)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x141 $x122)))
 (let (($x72 (= $x47 true)))
 (let (($x18 (= $x141 true)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x235)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x245)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (and $x67 $x284)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x8 $x172)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x281 $x104)))
 (let (($x138 (not $x275)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x109 $x135)))
 (let (($x35 (and (not $x19) $x138)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x250 $x295)))
 (let (($x288 (not $x163)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x207 $x282)))
 (let (($x73 (and (not $x128) $x288)))
 (let (($x48 (and (and (and (and (and (and $x73 $x35) $x151) $x247) $x142) $x177) $x197)))
 (let (($x150 (and $x48 $x39)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x232 (or false (or false (and (and true (or $x137 $x270)) (or $x248 $x239))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x232)))
 (let (($x272 (and $x97 $x150)))
 (let (($x100 (= $x272 true)))
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x144 (= (_ bv0 2) ?x209)))
 (let (($x253 (= $x144 true)))
 (let (($x153 (forall ((input.ind-%var2638X (_ BitVec 32)) )(let ((?x80 (bvadd (bvmul input.ind-%var2638X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem ?x80))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv2 32))) ?x13))))
 (let ((?x159 (input.spec-%var-x-1.1.1 input.ind-%var2638X)))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2638X)))
 (=> $x24 (= ?x159 ?x56))))))))
 ))
 (let (($x257 (forall ((input.ind-%var2637X (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) input.ind-%var2637X) (bvult input.ind-%var2637X input.dst.llvm-%n))))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2637X)))
 (= $x24 $x62))))
 ))
 (let (($x154 (and $x257 $x153)))
 (let (($x155 (= $x154 true)))
 (let (($x171 (forall ((input.ind-%var2628X (_ BitVec 32)) )(let ((?x80 (bvadd (bvmul input.ind-%var2628X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem ?x80))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv2 32))) ?x13))))
 (let ((?x118 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2628X)))
 (let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2628X)))
 (=> $x241 (= ?x118 ?x56))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2627X (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) input.ind-%var2627X) (bvult input.ind-%var2627X input.dst.llvm-%n))))
 (let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2627X)))
 (= $x241 $x62))))
 ))
 (let (($x30 (and $x215 $x171)))
 (let (($x178 (= $x30 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x50 (= $x236 true)))
 (let ((?x102 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x102)))
 (let (($x231 (= ?x9 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x231 true)))
 (let (($x260 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x93 (= $x260 true)))
 (let (($x89 (and $x93 $x198)))
 (let (($x34 (and $x89 $x50)))
 (let (($x5 (and $x34 $x178)))
 (let (($x140 (and $x5 $x155)))
 (let (($x108 (and $x140 $x253)))
 (let (($x175 (and $x108 $x100)))
 (let (($x252 (and $x175 $x18)))
 (let (($x59 (and $x252 $x72)))
 (let (($x214 (and $x59 $x11)))
 (let (($x160 (and $x214 $x182)))
 (let (($x201 (and $x160 $x145)))
 (let (($x6 (and $x201 $x200)))
 (let (($x134 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x113 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x113 (_ bv1 32))))
 (let (($x132 (and $x103 $x6)))
 (let (($x278 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let ((?x118 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2648X)))
 (let ((?x159 (input.spec-%var-x-1.1.1 input.ind-%var2648X)))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2648X)))
 (=> $x24 (= ?x159 ?x118))))))
 ))
 (let (($x37 (forall ((input.ind-%var2647X (_ BitVec 32)) )(let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2647X)))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2647X)))
 (= $x24 $x241))))
 ))
 (let (($x267 (and $x37 $x278)))
 (let (($x86 (and $x267 $x132)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x246 (and $x211 $x86)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x191 (and $x105 $x246)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x117 $x191)))
 (let (($x119 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x14 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x75 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x188 (or false (or false (and (and true (or $x40 $x75)) (or $x189 $x119))))))
 (let (($x220 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x188)))
 (let (($x225 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x188)))
 (let (($x258 (and $x225 $x121)))
 (let (($x61 (=> $x258 $x183)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x204 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (bvule ?x204 (_ bv4294967294 32))))
 (let (($x183 (= $x276 true)))
 (let ((?x42 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x42)))
 (let (($x32 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x200 (= $x32 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x64 true)))
 (let (($x96 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (= $x96 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x11 (= $x244 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x115 (bvsub ?x14 ?x77)))
 (let (($x242 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x115) (bvult ?x14 ?x115))))
 (let (($x58 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x52 (ite $x58 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x269 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvmul (_ bv4 64) ?x269)))
 (let ((?x279 ((_ extract 63 32) ?x254)))
 (let (($x168 (= ?x279 ?x52)))
 (let (($x66 (and $x168 $x242)))
 (let (($x285 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x122 (and $x285 $x66)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x47 (=> $x141 $x122)))
 (let (($x72 (= $x47 true)))
 (let (($x18 (= $x141 true)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x235)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x245)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (and $x67 $x284)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x8 $x172)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x281 $x104)))
 (let (($x138 (not $x275)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x109 $x135)))
 (let (($x35 (and (not $x19) $x138)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x250 $x295)))
 (let (($x288 (not $x163)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x207 $x282)))
 (let (($x73 (and (not $x128) $x288)))
 (let (($x48 (and (and (and (and (and (and $x73 $x35) $x151) $x247) $x142) $x177) $x197)))
 (let (($x150 (and $x48 $x39)))
 (let (($x239 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x248 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x232 (or false (or false (and (and true (or $x137 $x270)) (or $x248 $x239))))))
 (let (($x97 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x232)))
 (let (($x272 (and $x97 $x150)))
 (let (($x100 (= $x272 true)))
 (let ((?x209 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x144 (= (_ bv0 2) ?x209)))
 (let (($x253 (= $x144 true)))
 (let (($x153 (forall ((input.ind-%var2638X (_ BitVec 32)) )(let ((?x80 (bvadd (bvmul input.ind-%var2638X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem ?x80))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv2 32))) ?x13))))
 (let ((?x159 (input.spec-%var-x-1.1.1 input.ind-%var2638X)))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2638X)))
 (=> $x24 (= ?x159 ?x56))))))))
 ))
 (let (($x257 (forall ((input.ind-%var2637X (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) input.ind-%var2637X) (bvult input.ind-%var2637X input.dst.llvm-%n))))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2637X)))
 (= $x24 $x62))))
 ))
 (let (($x154 (and $x257 $x153)))
 (let (($x155 (= $x154 true)))
 (let (($x171 (forall ((input.ind-%var2628X (_ BitVec 32)) )(let ((?x80 (bvadd (bvmul input.ind-%var2628X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv1 32))) (select input.dst.llvm-mem ?x80))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x80 (_ bv2 32))) ?x13))))
 (let ((?x118 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2628X)))
 (let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2628X)))
 (=> $x241 (= ?x118 ?x56))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2627X (_ BitVec 32)) )(let (($x62 (and (bvule (_ bv0 32) input.ind-%var2627X) (bvult input.ind-%var2627X input.dst.llvm-%n))))
 (let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2627X)))
 (= $x241 $x62))))
 ))
 (let (($x30 (and $x215 $x171)))
 (let (($x178 (= $x30 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x50 (= $x236 true)))
 (let ((?x102 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x9 (bvneg ?x102)))
 (let (($x231 (= ?x9 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x231 true)))
 (let (($x260 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x93 (= $x260 true)))
 (let (($x89 (and $x93 $x198)))
 (let (($x34 (and $x89 $x50)))
 (let (($x5 (and $x34 $x178)))
 (let (($x140 (and $x5 $x155)))
 (let (($x108 (and $x140 $x253)))
 (let (($x175 (and $x108 $x100)))
 (let (($x252 (and $x175 $x18)))
 (let (($x59 (and $x252 $x72)))
 (let (($x214 (and $x59 $x11)))
 (let (($x160 (and $x214 $x182)))
 (let (($x201 (and $x160 $x145)))
 (let (($x6 (and $x201 $x200)))
 (let (($x134 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x113 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x103 (bvuge ?x113 (_ bv1 32))))
 (let (($x132 (and $x103 $x6)))
 (let (($x278 (forall ((input.ind-%var2648X (_ BitVec 32)) )(let ((?x118 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2648X)))
 (let ((?x159 (input.spec-%var-x-1.1.1 input.ind-%var2648X)))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2648X)))
 (=> $x24 (= ?x159 ?x118))))))
 ))
 (let (($x37 (forall ((input.ind-%var2647X (_ BitVec 32)) )(let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2647X)))
 (let (($x24 (input.spec-%var-x-1.0.1 input.ind-%var2647X)))
 (= $x24 $x241))))
 ))
 (let (($x267 (and $x37 $x278)))
 (let (($x86 (and $x267 $x132)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x246 (and $x211 $x86)))
 (let (($x105 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x191 (and $x105 $x246)))
 (let (($x117 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x121 (and $x117 $x191)))
 (let (($x119 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd ?x14 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x75 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x188 (or false (or false (and (and true (or $x40 $x75)) (or $x189 $x119))))))
 (let (($x220 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x188)))
 (let (($x225 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x188)))
 (let (($x258 (and $x225 $x121)))
 (let (($x61 (=> $x258 $x183)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (bvsge ?x38 (_ bv0 32))))
 (let (($x98 (= $x202 true)))
 (let ((?x243 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x243)))
 (let (($x101 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x101 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (= $x21 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x169 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x294 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x234 (bvsub ?x14 ?x77)))
 (let (($x44 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x234) (bvult ?x14 ?x234))))
 (let (($x259 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x68 (ite $x259 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x129)))
 (let ((?x27 ((_ extract 63 32) ?x226)))
 (let (($x165 (= ?x27 ?x68)))
 (let (($x157 (and $x165 $x44)))
 (let (($x293 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x221 (and $x293 $x157)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x141 $x221)))
 (let (($x181 (= $x82 true)))
 (let (($x53 (= $x141 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x271)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x167)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x258 $x276)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x121 $x183)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x201 $x42)))
 (let (($x32 (not $x273)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x160 $x64)))
 (let (($x6 (and (not $x145) $x32)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x59 $x244)))
 (let (($x214 (not $x11)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x112 $x285)))
 (let (($x182 (and (not $x72) $x214)))
 (let (($x277 (and (and (and (and (and (and $x182 $x6) $x86) $x191) $x61) $x185) $x107)))
 (let (($x76 (and $x277 $x36)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x66 (or false (or false (and (and true (or $x279 $x58)) (or $x199 $x115))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x205 (and $x47 $x76)))
 (let (($x233 (= $x205 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x175 (= (_ bv0 2) ?x100)))
 (let (($x18 (= $x175 true)))
 (let (($x48 (forall ((input.ind-%var2673X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var2673X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x114))))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var2673X)))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2673X)))
 (=> $x37 (= ?x10 ?x90))))))))
 ))
 (let (($x35 (forall ((input.ind-%var2672X (_ BitVec 32)) )(let (($x178 (and (bvule (_ bv0 32) input.ind-%var2672X) (bvult input.ind-%var2672X input.dst.llvm-%n))))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2672X)))
 (= $x37 $x178))))
 ))
 (let (($x235 (and $x35 $x48)))
 (let (($x39 (= $x235 true)))
 (let (($x163 (forall ((input.ind-%var2663X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var2663X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x114))))
 (let ((?x251 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2663X)))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2663X)))
 (=> $x83 (= ?x251 ?x90))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2662X (_ BitVec 32)) )(let (($x178 (and (bvule (_ bv0 32) input.ind-%var2662X) (bvult input.ind-%var2662X input.dst.llvm-%n))))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2662X)))
 (= $x83 $x178))))
 ))
 (let (($x288 (and $x149 $x163)))
 (let (($x73 (= $x288 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x156 (= $x69 true)))
 (let ((?x17 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x17)))
 (let (($x229 (= ?x80 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x229 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x222 (= $x62 true)))
 (let (($x23 (and $x222 $x147)))
 (let (($x195 (and $x23 $x156)))
 (let (($x109 (and $x195 $x73)))
 (let (($x150 (and $x109 $x39)))
 (let (($x252 (and $x150 $x18)))
 (let (($x238 (and $x252 $x233)))
 (let (($x218 (and $x238 $x53)))
 (let (($x180 (and $x218 $x181)))
 (let (($x74 (and $x180 $x51)))
 (let (($x217 (and $x74 $x116)))
 (let (($x71 (and $x217 $x70)))
 (let (($x166 (and $x71 $x187)))
 (let (($x50 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x34 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x34 (_ bv1 32))))
 (let (($x208 (and $x213 $x166)))
 (let (($x198 (forall ((input.ind-%var2683X (_ BitVec 32)) )(let ((?x251 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2683X)))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var2683X)))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2683X)))
 (=> $x37 (= ?x10 ?x251))))))
 ))
 (let (($x249 (forall ((input.ind-%var2682X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2682X)))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2682X)))
 (= $x37 $x83))))
 ))
 (let (($x89 (and $x249 $x198)))
 (let (($x29 (and $x89 $x208)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x125 $x29)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x289 (and $x45 $x120)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x227 (and $x94 $x289)))
 (let (($x15 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd ?x14 (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x127 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x225 (or false (or false (and (and true (or $x152 $x127)) (or $x41 $x15))))))
 (let (($x117 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x225)))
 (let (($x219 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x225)))
 (let (($x230 (and $x219 $x227)))
 (let (($x87 (=> $x230 $x98)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x38 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x202 (bvsge ?x38 (_ bv0 32))))
 (let (($x98 (= $x202 true)))
 (let ((?x243 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x243)))
 (let (($x101 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x101 true)))
 (let (($x21 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x70 (= $x21 true)))
 (let (($x169 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x116 (= $x169 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x294 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x234 (bvsub ?x14 ?x77)))
 (let (($x44 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x234) (bvult ?x14 ?x234))))
 (let (($x259 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x68 (ite $x259 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x129 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x226 (bvmul (_ bv4 64) ?x129)))
 (let ((?x27 ((_ extract 63 32) ?x226)))
 (let (($x165 (= ?x27 ?x68)))
 (let (($x157 (and $x165 $x44)))
 (let (($x293 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x221 (and $x293 $x157)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x141 $x221)))
 (let (($x181 (= $x82 true)))
 (let (($x53 (= $x141 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x271)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x167)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x204)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (and $x258 $x276)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x121 $x183)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x201 $x42)))
 (let (($x32 (not $x273)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x160 $x64)))
 (let (($x6 (and (not $x145) $x32)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x59 $x244)))
 (let (($x214 (not $x11)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x112 $x285)))
 (let (($x182 (and (not $x72) $x214)))
 (let (($x277 (and (and (and (and (and (and $x182 $x6) $x86) $x191) $x61) $x185) $x107)))
 (let (($x76 (and $x277 $x36)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x66 (or false (or false (and (and true (or $x279 $x58)) (or $x199 $x115))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x205 (and $x47 $x76)))
 (let (($x233 (= $x205 true)))
 (let ((?x100 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x175 (= (_ bv0 2) ?x100)))
 (let (($x18 (= $x175 true)))
 (let (($x48 (forall ((input.ind-%var2673X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var2673X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x114))))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var2673X)))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2673X)))
 (=> $x37 (= ?x10 ?x90))))))))
 ))
 (let (($x35 (forall ((input.ind-%var2672X (_ BitVec 32)) )(let (($x178 (and (bvule (_ bv0 32) input.ind-%var2672X) (bvult input.ind-%var2672X input.dst.llvm-%n))))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2672X)))
 (= $x37 $x178))))
 ))
 (let (($x235 (and $x35 $x48)))
 (let (($x39 (= $x235 true)))
 (let (($x163 (forall ((input.ind-%var2663X (_ BitVec 32)) )(let ((?x248 (bvadd (bvmul input.ind-%var2663X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem ?x248))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x248 (_ bv2 32))) ?x114))))
 (let ((?x251 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2663X)))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2663X)))
 (=> $x83 (= ?x251 ?x90))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2662X (_ BitVec 32)) )(let (($x178 (and (bvule (_ bv0 32) input.ind-%var2662X) (bvult input.ind-%var2662X input.dst.llvm-%n))))
 (let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2662X)))
 (= $x83 $x178))))
 ))
 (let (($x288 (and $x149 $x163)))
 (let (($x73 (= $x288 true)))
 (let (($x69 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x156 (= $x69 true)))
 (let ((?x17 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x80 (bvneg ?x17)))
 (let (($x229 (= ?x80 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x229 true)))
 (let (($x62 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x222 (= $x62 true)))
 (let (($x23 (and $x222 $x147)))
 (let (($x195 (and $x23 $x156)))
 (let (($x109 (and $x195 $x73)))
 (let (($x150 (and $x109 $x39)))
 (let (($x252 (and $x150 $x18)))
 (let (($x238 (and $x252 $x233)))
 (let (($x218 (and $x238 $x53)))
 (let (($x180 (and $x218 $x181)))
 (let (($x74 (and $x180 $x51)))
 (let (($x217 (and $x74 $x116)))
 (let (($x71 (and $x217 $x70)))
 (let (($x166 (and $x71 $x187)))
 (let (($x50 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x34 (ite $x50 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x34 (_ bv1 32))))
 (let (($x208 (and $x213 $x166)))
 (let (($x198 (forall ((input.ind-%var2683X (_ BitVec 32)) )(let ((?x251 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2683X)))
 (let ((?x10 (input.spec-%var-x-1.1.1 input.ind-%var2683X)))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2683X)))
 (=> $x37 (= ?x10 ?x251))))))
 ))
 (let (($x249 (forall ((input.ind-%var2682X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2682X)))
 (let (($x37 (input.spec-%var-x-1.0.1 input.ind-%var2682X)))
 (= $x37 $x83))))
 ))
 (let (($x89 (and $x249 $x198)))
 (let (($x29 (and $x89 $x208)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x125 $x29)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x289 (and $x45 $x120)))
 (let (($x94 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x227 (and $x94 $x289)))
 (let (($x15 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd ?x14 (_ bv3 32))))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x127 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x225 (or false (or false (and (and true (or $x152 $x127)) (or $x41 $x15))))))
 (let (($x117 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x225)))
 (let (($x219 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x225)))
 (let (($x230 (and $x219 $x227)))
 (let (($x87 (=> $x230 $x98)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x102 (bvule ?x194 input.dst.llvm-%n)))
 (let (($x113 (= $x102 true)))
 (let ((?x131 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x131)))
 (let (($x247 (= ?x8 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x247 true)))
 (let (($x261 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x212 (= $x261 true)))
 (let (($x184 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (= $x184 true)))
 (let (($x151 (forall ((input.ind-%var2708X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2708X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x202))))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var2708X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2708X)))
 (=> $x249 (= ?x237 ?x173))))))))
 ))
 (let (($x88 (forall ((input.ind-%var2707X (_ BitVec 32)) )(let (($x44 (and (bvule (_ bv0 32) input.ind-%var2707X) (bvult input.ind-%var2707X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2707X)))
 (= $x249 $x44))))
 ))
 (let (($x135 (and $x88 $x151)))
 (let (($x161 (= $x135 true)))
 (let (($x260 (forall ((input.ind-%var2698X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2698X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x202))))
 (let ((?x215 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2698X)))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2698X)))
 (=> $x274 (= ?x215 ?x173))))))))
 ))
 (let (($x221 (forall ((input.ind-%var2697X (_ BitVec 32)) )(let (($x44 (and (bvule (_ bv0 32) input.ind-%var2697X) (bvult input.ind-%var2697X input.dst.llvm-%n))))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2697X)))
 (= $x274 $x44))))
 ))
 (let (($x134 (and $x221 $x260)))
 (let (($x103 (= $x134 true)))
 (let (($x266 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x129 (= $x266 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x36 (bvsub ?x14 ?x77)))
 (let (($x238 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x36) (bvult ?x14 ?x36))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x277 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvmul (_ bv4 64) ?x185)))
 (let ((?x167 ((_ extract 63 32) ?x49)))
 (let (($x271 (= ?x167 ?x277)))
 (let (($x53 (and $x271 $x238)))
 (let (($x264 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x218 (and $x264 $x53)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (=> $x141 $x218)))
 (let (($x192 (= $x133 true)))
 (let (($x204 (= $x141 true)))
 (let ((?x273 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x273)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x201)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (and $x11 $x182)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x244 $x160)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x242 (and $x55 $x170)))
 (let (($x66 (not $x242)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x168 $x199)))
 (let (($x112 (and (not $x115) $x66)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x269 $x122)))
 (let (($x279 (not $x254)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x163 $x288)))
 (let (($x52 (and (not $x280) $x279)))
 (let (($x246 (and (and (and (and (and (and $x52 $x112) $x72) $x59) $x64) $x200) $x42)))
 (let (($x191 (and $x246 $x32)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x175 (or false (or false (and (and true (or $x35 $x245)) (or $x235 $x39))))))
 (let (($x252 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x78 (and $x252 $x191)))
 (let (($x121 (= $x78 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x207 (= (_ bv0 2) ?x114)))
 (let (($x90 (= $x207 true)))
 (let (($x97 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x97 true)))
 (let ((?x210 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x210)))
 (let (($x128 (= ?x248 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x128 true)))
 (let (($x178 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x178 true)))
 (let (($x232 (and $x5 $x253)))
 (let (($x292 (and $x232 $x99)))
 (let (($x250 (and $x292 $x90)))
 (let (($x258 (and $x250 $x121)))
 (let (($x276 (and $x258 $x204)))
 (let (($x293 (and $x276 $x192)))
 (let (($x226 (and $x293 $x129)))
 (let (($x24 (and $x226 $x103)))
 (let (($x281 (and $x24 $x161)))
 (let (($x142 (and $x281 $x7)))
 (let (($x284 (and $x142 $x212)))
 (let (($x172 (and $x284 $x67)))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x195 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x195 (_ bv1 32))))
 (let (($x33 (and $x30 $x172)))
 (let (($x147 (forall ((input.ind-%var2718X (_ BitVec 32)) )(let ((?x215 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2718X)))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var2718X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2718X)))
 (=> $x249 (= ?x237 ?x215))))))
 ))
 (let (($x236 (forall ((input.ind-%var2717X (_ BitVec 32)) )(let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2717X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2717X)))
 (= $x249 $x274))))
 ))
 (let (($x23 (and $x236 $x147)))
 (let (($x19 (and $x23 $x33)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x91 $x19)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x211 $x104)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x124 $x275)))
 (let (($x188 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd ?x14 (_ bv3 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x189 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x219 (or false (or false (and (and true (or $x43 $x189)) (or $x179 $x188))))))
 (let (($x94 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x219)))
 (let (($x240 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x219)))
 (let (($x126 (and $x240 $x177)))
 (let (($x9 (=> $x126 $x113)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x102 (bvule ?x194 input.dst.llvm-%n)))
 (let (($x113 (= $x102 true)))
 (let ((?x131 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x8 (bvneg ?x131)))
 (let (($x247 (= ?x8 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x247 true)))
 (let (($x261 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x212 (= $x261 true)))
 (let (($x184 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x7 (= $x184 true)))
 (let (($x151 (forall ((input.ind-%var2708X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2708X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x202))))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var2708X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2708X)))
 (=> $x249 (= ?x237 ?x173))))))))
 ))
 (let (($x88 (forall ((input.ind-%var2707X (_ BitVec 32)) )(let (($x44 (and (bvule (_ bv0 32) input.ind-%var2707X) (bvult input.ind-%var2707X input.dst.llvm-%n))))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2707X)))
 (= $x249 $x44))))
 ))
 (let (($x135 (and $x88 $x151)))
 (let (($x161 (= $x135 true)))
 (let (($x260 (forall ((input.ind-%var2698X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2698X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x202))))
 (let ((?x215 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2698X)))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2698X)))
 (=> $x274 (= ?x215 ?x173))))))))
 ))
 (let (($x221 (forall ((input.ind-%var2697X (_ BitVec 32)) )(let (($x44 (and (bvule (_ bv0 32) input.ind-%var2697X) (bvult input.ind-%var2697X input.dst.llvm-%n))))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2697X)))
 (= $x274 $x44))))
 ))
 (let (($x134 (and $x221 $x260)))
 (let (($x103 (= $x134 true)))
 (let (($x266 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x129 (= $x266 true)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let ((?x36 (bvsub ?x14 ?x77)))
 (let (($x238 (ite (bvsge ?x77 (_ bv0 32)) (bvuge ?x14 ?x36) (bvult ?x14 ?x36))))
 (let (($x107 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x277 (ite $x107 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x185 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x49 (bvmul (_ bv4 64) ?x185)))
 (let ((?x167 ((_ extract 63 32) ?x49)))
 (let (($x271 (= ?x167 ?x277)))
 (let (($x53 (and $x271 $x238)))
 (let (($x264 (= (bvand ?x14 (_ bv4294967292 32)) ?x14)))
 (let (($x218 (and $x264 $x53)))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (=> $x141 $x218)))
 (let (($x192 (= $x133 true)))
 (let (($x204 (= $x141 true)))
 (let ((?x273 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x273)))
 (let ((?x201 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x201)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (and $x11 $x182)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x244 $x160)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x242 (and $x55 $x170)))
 (let (($x66 (not $x242)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (and $x168 $x199)))
 (let (($x112 (and (not $x115) $x66)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x269 $x122)))
 (let (($x279 (not $x254)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (and $x163 $x288)))
 (let (($x52 (and (not $x280) $x279)))
 (let (($x246 (and (and (and (and (and (and $x52 $x112) $x72) $x59) $x64) $x200) $x42)))
 (let (($x191 (and $x246 $x32)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x175 (or false (or false (and (and true (or $x35 $x245)) (or $x235 $x39))))))
 (let (($x252 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x78 (and $x252 $x191)))
 (let (($x121 (= $x78 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x207 (= (_ bv0 2) ?x114)))
 (let (($x90 (= $x207 true)))
 (let (($x97 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x99 (= $x97 true)))
 (let ((?x210 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x248 (bvneg ?x210)))
 (let (($x128 (= ?x248 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x128 true)))
 (let (($x178 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x178 true)))
 (let (($x232 (and $x5 $x253)))
 (let (($x292 (and $x232 $x99)))
 (let (($x250 (and $x292 $x90)))
 (let (($x258 (and $x250 $x121)))
 (let (($x276 (and $x258 $x204)))
 (let (($x293 (and $x276 $x192)))
 (let (($x226 (and $x293 $x129)))
 (let (($x24 (and $x226 $x103)))
 (let (($x281 (and $x24 $x161)))
 (let (($x142 (and $x281 $x7)))
 (let (($x284 (and $x142 $x212)))
 (let (($x172 (and $x284 $x67)))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x195 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (bvuge ?x195 (_ bv1 32))))
 (let (($x33 (and $x30 $x172)))
 (let (($x147 (forall ((input.ind-%var2718X (_ BitVec 32)) )(let ((?x215 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2718X)))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var2718X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2718X)))
 (=> $x249 (= ?x237 ?x215))))))
 ))
 (let (($x236 (forall ((input.ind-%var2717X (_ BitVec 32)) )(let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2717X)))
 (let (($x249 (input.spec-%var-x-1.0.1 input.ind-%var2717X)))
 (= $x249 $x274))))
 ))
 (let (($x23 (and $x236 $x147)))
 (let (($x19 (and $x23 $x33)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x91 $x19)))
 (let (($x211 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x211 $x104)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x124 $x275)))
 (let (($x188 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x127 (bvadd ?x14 (_ bv3 32))))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x189 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x127)))
 (let (($x219 (or false (or false (and (and true (or $x43 $x189)) (or $x179 $x188))))))
 (let (($x94 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x219)))
 (let (($x240 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x219)))
 (let (($x126 (and $x240 $x177)))
 (let (($x9 (=> $x126 $x113)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (not $x141)))
 (let (($x234 (= $x193 false)))
 (let (($x208 (= $x234 true)))
 (let ((?x187 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x187)))
 (let (($x243 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x243 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x51 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x27 true)))
 (let (($x83 (forall ((input.ind-%var2743X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2743X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x88))))
 (let ((?x171 (input.spec-%var-x-1.1.1 input.ind-%var2743X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2743X)))
 (=> $x236 (= ?x171 ?x281))))))))
 ))
 (let (($x104 (forall ((input.ind-%var2742X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var2742X) (bvult input.ind-%var2742X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2742X)))
 (= $x236 $x226))))
 ))
 (let (($x198 (and $x104 $x83)))
 (let (($x82 (= $x198 true)))
 (let (($x142 (forall ((input.ind-%var2733X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2733X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x88))))
 (let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2733X)))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2733X)))
 (=> $x22 (= ?x149 ?x281))))))))
 ))
 (let (($x63 (forall ((input.ind-%var2732X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var2732X) (bvult input.ind-%var2732X input.dst.llvm-%n))))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2732X)))
 (= $x22 $x226))))
 ))
 (let (($x261 (and $x63 $x142)))
 (let (($x212 (= $x261 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x205 (= $x36 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x276)))
 (let ((?x258 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x258)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x273 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x246)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x42 $x273)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x201 $x32)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (and $x244 $x11)))
 (let (($x182 (not $x214)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x96 $x59)))
 (let (($x64 (and (not $x132) $x182)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x66 $x112)))
 (let (($x285 (not $x6)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x175 $x252)))
 (let (($x31 (and (not $x242) $x285)))
 (let (($x167 (and (and (and (and (and (and $x31 $x64) $x145) $x139) $x191) $x121) $x204)))
 (let (($x107 (and $x167 $x183)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x280)))
 (let (($x47 (or false (or false (and (and true (or $x58 $x269)) (or $x279 $x52))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x277 (and $x170 $x107)))
 (let (($x271 (= $x277 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x39 (= (_ bv0 2) ?x235)))
 (let (($x150 (= $x39 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x245 (= $x35 true)))
 (let ((?x90 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x90)))
 (let (($x109 (= ?x250 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x109 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x292 true)))
 (let (($x138 (and $x239 $x18)))
 (let (($x197 (and $x138 $x245)))
 (let (($x272 (and $x197 $x150)))
 (let (($x76 (and $x272 $x271)))
 (let (($x233 (and $x76 $x205)))
 (let (($x284 (and $x233 $x212)))
 (let (($x180 (and $x284 $x82)))
 (let (($x165 (and $x180 $x68)))
 (let (($x101 (and $x165 $x74)))
 (let (($x217 (and $x101 $x116)))
 (let (($x253 (forall ((input.ind-%var2753X (_ BitVec 32)) )(let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2753X)))
 (let ((?x171 (input.spec-%var-x-1.1.1 input.ind-%var2753X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2753X)))
 (=> $x236 (= ?x171 ?x149))))))
 ))
 (let (($x69 (forall ((input.ind-%var2752X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2752X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2752X)))
 (= $x236 $x22))))
 ))
 (let (($x232 (and $x69 $x253)))
 (let (($x169 (and $x232 $x217)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x267 $x169)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x16 (and $x125 $x21)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x105 $x16)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let (($x225 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x14 (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x41 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x240 (or false (or false (and (and true (or $x143 $x41)) (or $x220 $x225))))))
 (let (($x124 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x240)))
 (let (($x123 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x240)))
 (let (($x259 (and $x123 $x166)))
 (let (($x181 (=> $x259 $x208)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (not $x141)))
 (let (($x234 (= $x193 false)))
 (let (($x208 (= $x234 true)))
 (let ((?x187 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x71 (bvneg ?x187)))
 (let (($x243 (= ?x71 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x116 (= $x243 true)))
 (let (($x51 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x74 (= $x51 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x27 true)))
 (let (($x83 (forall ((input.ind-%var2743X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2743X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x88))))
 (let ((?x171 (input.spec-%var-x-1.1.1 input.ind-%var2743X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2743X)))
 (=> $x236 (= ?x171 ?x281))))))))
 ))
 (let (($x104 (forall ((input.ind-%var2742X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var2742X) (bvult input.ind-%var2742X input.dst.llvm-%n))))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2742X)))
 (= $x236 $x226))))
 ))
 (let (($x198 (and $x104 $x83)))
 (let (($x82 (= $x198 true)))
 (let (($x142 (forall ((input.ind-%var2733X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2733X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x88))))
 (let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2733X)))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2733X)))
 (=> $x22 (= ?x149 ?x281))))))))
 ))
 (let (($x63 (forall ((input.ind-%var2732X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var2732X) (bvult input.ind-%var2732X input.dst.llvm-%n))))
 (let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2732X)))
 (= $x22 $x226))))
 ))
 (let (($x261 (and $x63 $x142)))
 (let (($x212 (= $x261 true)))
 (let (($x36 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x205 (= $x36 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x276)))
 (let ((?x258 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x258)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x246 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x273 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x246)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (and $x42 $x273)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (and $x201 $x32)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x214 (and $x244 $x11)))
 (let (($x182 (not $x214)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (and $x96 $x59)))
 (let (($x64 (and (not $x132) $x182)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x66 $x112)))
 (let (($x285 (not $x6)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x175 $x252)))
 (let (($x31 (and (not $x242) $x285)))
 (let (($x167 (and (and (and (and (and (and $x31 $x64) $x145) $x139) $x191) $x121) $x204)))
 (let (($x107 (and $x167 $x183)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x280 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x280)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x280)))
 (let (($x47 (or false (or false (and (and true (or $x58 $x269)) (or $x279 $x52))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x277 (and $x170 $x107)))
 (let (($x271 (= $x277 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x39 (= (_ bv0 2) ?x235)))
 (let (($x150 (= $x39 true)))
 (let (($x35 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x245 (= $x35 true)))
 (let ((?x90 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x250 (bvneg ?x90)))
 (let (($x109 (= ?x250 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x18 (= $x109 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x292 true)))
 (let (($x138 (and $x239 $x18)))
 (let (($x197 (and $x138 $x245)))
 (let (($x272 (and $x197 $x150)))
 (let (($x76 (and $x272 $x271)))
 (let (($x233 (and $x76 $x205)))
 (let (($x284 (and $x233 $x212)))
 (let (($x180 (and $x284 $x82)))
 (let (($x165 (and $x180 $x68)))
 (let (($x101 (and $x165 $x74)))
 (let (($x217 (and $x101 $x116)))
 (let (($x253 (forall ((input.ind-%var2753X (_ BitVec 32)) )(let ((?x149 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2753X)))
 (let ((?x171 (input.spec-%var-x-1.1.1 input.ind-%var2753X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2753X)))
 (=> $x236 (= ?x171 ?x149))))))
 ))
 (let (($x69 (forall ((input.ind-%var2752X (_ BitVec 32)) )(let (($x22 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2752X)))
 (let (($x236 (input.spec-%var-x-1.0.1 input.ind-%var2752X)))
 (= $x236 $x22))))
 ))
 (let (($x232 (and $x69 $x253)))
 (let (($x169 (and $x232 $x217)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x267 $x169)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x16 (and $x125 $x21)))
 (let (($x105 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x105 $x16)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let (($x225 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x14 (_ bv3 32))))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x41 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x240 (or false (or false (and (and true (or $x143 $x41)) (or $x220 $x225))))))
 (let (($x124 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x240)))
 (let (($x123 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x240)))
 (let (($x259 (and $x123 $x166)))
 (let (($x181 (=> $x259 $x208)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x267f6492)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x267f6492)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x267f6492)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x267f6492 x!0)
         (ite (bvule #x267f6493 x!0) #x267f6493 #x267f6492)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x3f186986)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x3f186986)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xaabe9fa8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x830bd28c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x3f186986)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x830bd28f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xaabe9fab)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x830bd28c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xaabe9fa8)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x3f186986 x!0)
         (ite (bvule #x3f186987 x!0) #x3f186987 #x3f186986)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x210 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x210 (_ bv0 32))))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (or $x141 $x195)))
 (let (($x56 (= $x248 true)))
 (let ((?x290 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x290)))
 (let (($x174 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x174 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x295 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x10 (= $x102 true)))
 (let (($x131 (forall ((input.ind-%var2806X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var2806X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x208))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var2806X)))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2806X)))
 (=> $x69 (= ?x114 ?x153))))))))
 ))
 (let (($x133 (forall ((input.ind-%var2805X (_ BitVec 32)) )(let (($x284 (and (bvule (_ bv0 32) input.ind-%var2805X) (bvult input.ind-%var2805X input.dst.llvm-%n))))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2805X)))
 (= $x69 $x284))))
 ))
 (let (($x247 (and $x133 $x131)))
 (let (($x67 (= $x247 true)))
 (let (($x156 (forall ((input.ind-%var2796X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var2796X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x208))))
 (let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2796X)))
 (let (($x282 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2796X)))
 (=> $x282 (= ?x250 ?x153))))))))
 ))
 (let (($x104 (forall ((input.ind-%var2795X (_ BitVec 32)) )(let (($x284 (and (bvule (_ bv0 32) input.ind-%var2795X) (bvult input.ind-%var2795X input.dst.llvm-%n))))
 (let (($x282 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2795X)))
 (= $x282 $x284))))
 ))
 (let (($x30 (and $x104 $x156)))
 (let (($x249 (= $x30 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x24 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x263 (= $x87 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x135 (= $x134 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x107)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x276)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x185 $x121)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x191 $x49)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x145 $x264)))
 (let (($x139 (not $x200)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x64 $x61)))
 (let (($x201 (and (not $x86) $x139)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x132 $x160)))
 (let (($x11 (not $x244)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x279 $x52)))
 (let (($x182 (and (not $x59) $x11)))
 (let (($x129 (and (and (and (and (and (and $x182 $x201) $x246) $x32) $x258) $x167) $x183)))
 (let (($x266 (and $x129 $x277)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x285 (or false (or false (and (and true (or $x47 $x170)) (or $x242 $x72))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x285)))
 (let (($x226 (and $x96 $x266)))
 (let (($x176 (= $x226 true)))
 (let ((?x280 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x58 (= (_ bv0 2) ?x280)))
 (let (($x269 (= $x58 true)))
 (let ((?x39 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x39)))
 (let (($x163 (= ?x150 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x163 true)))
 (let (($x122 (and $x288 $x269)))
 (let (($x63 (and $x122 $x176)))
 (let (($x161 (and $x63 $x135)))
 (let (($x286 (and $x161 $x263)))
 (let (($x103 (and $x286 $x85)))
 (let (($x215 (and $x103 $x249)))
 (let (($x194 (and $x215 $x67)))
 (let (($x62 (and $x194 $x10)))
 (let (($x9 (and $x62 $x231)))
 (let (($x50 (and $x9 $x84)))
 (let (($x245 (forall ((input.ind-%var2816X (_ BitVec 32)) )(let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2816X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var2816X)))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2816X)))
 (=> $x69 (= ?x114 ?x250))))))
 ))
 (let (($x97 (forall ((input.ind-%var2815X (_ BitVec 32)) )(let (($x282 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2815X)))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2815X)))
 (= $x69 $x282))))
 ))
 (let (($x197 (and $x97 $x245)))
 (let (($x8 (and $x197 $x50)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x89 $x8)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x33 (and $x91 $x172)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x45 $x33)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let (($x219 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd ?x14 (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x179 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x123 (or false (or false (and (and true (or $x119 $x179)) (or $x117 $x219))))))
 (let (($x105 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x75 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x177 (and $x75 $x213)))
 (let (($x155 (=> $x177 $x56)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x37 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x210 (ite $x37 (_ bv1 32) (_ bv0 32))))
 (let (($x195 (= ?x210 (_ bv0 32))))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (or $x141 $x195)))
 (let (($x56 (= $x248 true)))
 (let ((?x290 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x290)))
 (let (($x174 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x174 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x231 (= $x295 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x10 (= $x102 true)))
 (let (($x131 (forall ((input.ind-%var2806X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var2806X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x208))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var2806X)))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2806X)))
 (=> $x69 (= ?x114 ?x153))))))))
 ))
 (let (($x133 (forall ((input.ind-%var2805X (_ BitVec 32)) )(let (($x284 (and (bvule (_ bv0 32) input.ind-%var2805X) (bvult input.ind-%var2805X input.dst.llvm-%n))))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2805X)))
 (= $x69 $x284))))
 ))
 (let (($x247 (and $x133 $x131)))
 (let (($x67 (= $x247 true)))
 (let (($x156 (forall ((input.ind-%var2796X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var2796X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x208))))
 (let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2796X)))
 (let (($x282 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2796X)))
 (=> $x282 (= ?x250 ?x153))))))))
 ))
 (let (($x104 (forall ((input.ind-%var2795X (_ BitVec 32)) )(let (($x284 (and (bvule (_ bv0 32) input.ind-%var2795X) (bvult input.ind-%var2795X input.dst.llvm-%n))))
 (let (($x282 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2795X)))
 (= $x282 $x284))))
 ))
 (let (($x30 (and $x104 $x156)))
 (let (($x249 (= $x30 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x85 (= $x24 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x263 (= $x87 true)))
 (let (($x134 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x135 (= $x134 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x107)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x276)))
 (let ((?x204 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x204)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (and $x185 $x121)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x191 $x49)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (and $x145 $x264)))
 (let (($x139 (not $x200)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x64 $x61)))
 (let (($x201 (and (not $x86) $x139)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (and $x132 $x160)))
 (let (($x11 (not $x244)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x279 $x52)))
 (let (($x182 (and (not $x59) $x11)))
 (let (($x129 (and (and (and (and (and (and $x182 $x201) $x246) $x32) $x258) $x167) $x183)))
 (let (($x266 (and $x129 $x277)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x285 (or false (or false (and (and true (or $x47 $x170)) (or $x242 $x72))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x285)))
 (let (($x226 (and $x96 $x266)))
 (let (($x176 (= $x226 true)))
 (let ((?x280 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x58 (= (_ bv0 2) ?x280)))
 (let (($x269 (= $x58 true)))
 (let ((?x39 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x150 (bvneg ?x39)))
 (let (($x163 (= ?x150 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x163 true)))
 (let (($x122 (and $x288 $x269)))
 (let (($x63 (and $x122 $x176)))
 (let (($x161 (and $x63 $x135)))
 (let (($x286 (and $x161 $x263)))
 (let (($x103 (and $x286 $x85)))
 (let (($x215 (and $x103 $x249)))
 (let (($x194 (and $x215 $x67)))
 (let (($x62 (and $x194 $x10)))
 (let (($x9 (and $x62 $x231)))
 (let (($x50 (and $x9 $x84)))
 (let (($x245 (forall ((input.ind-%var2816X (_ BitVec 32)) )(let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2816X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var2816X)))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2816X)))
 (=> $x69 (= ?x114 ?x250))))))
 ))
 (let (($x97 (forall ((input.ind-%var2815X (_ BitVec 32)) )(let (($x282 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2815X)))
 (let (($x69 (input.spec-%var-x-1.0.1 input.ind-%var2815X)))
 (= $x69 $x282))))
 ))
 (let (($x197 (and $x97 $x245)))
 (let (($x8 (and $x197 $x50)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x172 (and $x89 $x8)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x33 (and $x91 $x172)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x213 (and $x45 $x33)))
 (let ((?x77 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvadd input.dst.llvm-%x ?x77)))
 (let (($x219 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x41 (bvadd ?x14 (_ bv3 32))))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x41)))
 (let (($x179 (bvugt ?x14 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x41)))
 (let (($x123 (or false (or false (and (and true (or $x119 $x179)) (or $x117 $x219))))))
 (let (($x105 (=> (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32))) $x123)))
 (let (($x75 (=> (and $x141 (bvule ?x14 (bvsub (bvadd ?x14 (_ bv4 32)) (_ bv1 32)))) $x123)))
 (let (($x177 (and $x75 $x213)))
 (let (($x155 (=> $x177 $x56)))
 (not $x155))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 160 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x192 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x192 true)))
 (let ((?x169 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x169)))
 (let (($x21 (= ?x120 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x21 true)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x243)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x82)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x253)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x22 $x251)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x90 $x83)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x223 $x254)))
 (let (($x73 (not $x128)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x155 $x118)))
 (let (($x207 (and (not $x57) $x73)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x177 $x37)))
 (let (($x195 (not $x210)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x133 $x159)))
 (let (($x56 (and (not $x213) $x195)))
 (let (($x51 (and (and (and (and (and (and $x56 $x207) $x239) $x149) $x88) $x184) $x180)))
 (let (($x71 (and $x51 $x116)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x194)))
 (let (($x8 (or false (or false (and (and true (or $x102 $x10)) (or $x290 $x113))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x8)))
 (let (($x217 (and $x33 $x71)))
 (let (($x151 (= $x217 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x30 true)))
 (let ((?x153 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x153)))
 (let (($x178 (= $x237 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x234 true)))
 (let (($x74 (forall ((input.ind-%var2841X (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul input.ind-%var2841X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x36))))
 (let ((?x225 (input.spec-%var-x-1.1.1 input.ind-%var2841X)))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2841X)))
 (=> $x20 (= ?x225 ?x258))))))))
 ))
 (let (($x260 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var2840X) (bvult input.ind-%var2840X input.dst.llvm-%n))))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2840X)))
 (= $x20 $x252))))
 ))
 (let (($x181 (and $x260 $x74)))
 (let (($x29 (= $x181 true)))
 (let (($x167 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul input.ind-%var2831X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x36))))
 (let ((?x240 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2831X)))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2831X)))
 (=> $x41 (= ?x240 ?x258))))))))
 ))
 (let (($x72 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var2830X) (bvult input.ind-%var2830X input.dst.llvm-%n))))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2830X)))
 (= $x41 $x252))))
 ))
 (let (($x233 (and $x72 $x167)))
 (let (($x276 (= $x233 true)))
 (let (($x280 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x58 (= $x280 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x288 (= $x163 true)))
 (let ((?x197 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x197)))
 (let (($x39 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x39 true)))
 (let (($x250 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x250 true)))
 (let (($x282 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (not $x282)))
 (let (($x97 (= $x232 true)))
 (let (($x35 (and $x97 $x138)))
 (let (($x272 (and $x35 $x150)))
 (let (($x55 (and $x272 $x288)))
 (let (($x269 (and $x55 $x58)))
 (let (($x183 (and $x269 $x276)))
 (let (($x193 (and $x183 $x29)))
 (let (($x208 (and $x193 $x259)))
 (let (($x156 (and $x208 $x178)))
 (let (($x215 (and $x156 $x249)))
 (let (($x7 (and $x215 $x151)))
 (let (($x5 (and $x7 $x202)))
 (let (($x91 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x267 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x267 (_ bv0 32))))
 (let (($x147 (and $x89 $x5)))
 (let (($x45 (forall ((input.ind-%var2851X (_ BitVec 32)) )(let ((?x240 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2851X)))
 (let ((?x225 (input.spec-%var-x-1.1.1 input.ind-%var2851X)))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2851X)))
 (=> $x20 (= ?x225 ?x240))))))
 ))
 (let (($x15 (forall ((input.ind-%var2850X (_ BitVec 32)) )(let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2850X)))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2850X)))
 (= $x20 $x41))))
 ))
 (let (($x211 (and $x15 $x45)))
 (let (($x44 (and $x211 $x147)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x14 $x44)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x230 (and $x48 $x12)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x158 $x230)))
 (let (($x227 (=> $x53 $x98)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x192 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x192 true)))
 (let ((?x169 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x120 (bvneg ?x169)))
 (let (($x21 (= ?x120 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x202 (= $x21 true)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x243)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x180 (= (_ bv0 32) ?x82)))
 (let ((?x281 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x281)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x253)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x22 $x251)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x90 $x83)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x223 $x254)))
 (let (($x73 (not $x128)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x57 (and $x155 $x118)))
 (let (($x207 (and (not $x57) $x73)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x177 $x37)))
 (let (($x195 (not $x210)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x133 $x159)))
 (let (($x56 (and (not $x213) $x195)))
 (let (($x51 (and (and (and (and (and (and $x56 $x207) $x239) $x149) $x88) $x184) $x180)))
 (let (($x71 (and $x51 $x116)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x194)))
 (let (($x8 (or false (or false (and (and true (or $x102 $x10)) (or $x290 $x113))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x8)))
 (let (($x217 (and $x33 $x71)))
 (let (($x151 (= $x217 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x249 (= $x30 true)))
 (let ((?x153 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x153)))
 (let (($x178 (= $x237 true)))
 (let (($x234 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x234 true)))
 (let (($x74 (forall ((input.ind-%var2841X (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul input.ind-%var2841X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x36))))
 (let ((?x225 (input.spec-%var-x-1.1.1 input.ind-%var2841X)))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2841X)))
 (=> $x20 (= ?x225 ?x258))))))))
 ))
 (let (($x260 (forall ((input.ind-%var2840X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var2840X) (bvult input.ind-%var2840X input.dst.llvm-%n))))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2840X)))
 (= $x20 $x252))))
 ))
 (let (($x181 (and $x260 $x74)))
 (let (($x29 (= $x181 true)))
 (let (($x167 (forall ((input.ind-%var2831X (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul input.ind-%var2831X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x36))))
 (let ((?x240 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2831X)))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2831X)))
 (=> $x41 (= ?x240 ?x258))))))))
 ))
 (let (($x72 (forall ((input.ind-%var2830X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var2830X) (bvult input.ind-%var2830X input.dst.llvm-%n))))
 (let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2830X)))
 (= $x41 $x252))))
 ))
 (let (($x233 (and $x72 $x167)))
 (let (($x276 (= $x233 true)))
 (let (($x280 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x58 (= $x280 true)))
 (let (($x163 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x288 (= $x163 true)))
 (let ((?x197 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x197)))
 (let (($x39 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x39 true)))
 (let (($x250 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x138 (= $x250 true)))
 (let (($x282 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (not $x282)))
 (let (($x97 (= $x232 true)))
 (let (($x35 (and $x97 $x138)))
 (let (($x272 (and $x35 $x150)))
 (let (($x55 (and $x272 $x288)))
 (let (($x269 (and $x55 $x58)))
 (let (($x183 (and $x269 $x276)))
 (let (($x193 (and $x183 $x29)))
 (let (($x208 (and $x193 $x259)))
 (let (($x156 (and $x208 $x178)))
 (let (($x215 (and $x156 $x249)))
 (let (($x7 (and $x215 $x151)))
 (let (($x5 (and $x7 $x202)))
 (let (($x91 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x267 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x267 (_ bv0 32))))
 (let (($x147 (and $x89 $x5)))
 (let (($x45 (forall ((input.ind-%var2851X (_ BitVec 32)) )(let ((?x240 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2851X)))
 (let ((?x225 (input.spec-%var-x-1.1.1 input.ind-%var2851X)))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2851X)))
 (=> $x20 (= ?x225 ?x240))))))
 ))
 (let (($x15 (forall ((input.ind-%var2850X (_ BitVec 32)) )(let (($x41 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2850X)))
 (let (($x20 (input.spec-%var-x-1.0.1 input.ind-%var2850X)))
 (= $x20 $x41))))
 ))
 (let (($x211 (and $x15 $x45)))
 (let (($x44 (and $x211 $x147)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x14 $x44)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x230 (and $x48 $x12)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x158 $x230)))
 (let (($x227 (=> $x53 $x98)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (not $x158)))
 (let (($x289 (or $x158 $x268)))
 (let (($x157 (= $x289 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x105)))
 (let (($x70 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x38 (= $x70 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x123 (= $x166 true)))
 (let (($x176 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (= $x176 true)))
 (let (($x284 (forall ((input.ind-%var2876X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var2876X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x94))))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var2876X)))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2876X)))
 (=> $x55 (= ?x42 ?x199))))))))
 ))
 (let (($x168 (forall ((input.ind-%var2875X (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) input.ind-%var2875X) (bvult input.ind-%var2875X input.dst.llvm-%n))))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2875X)))
 (= $x55 $x7))))
 ))
 (let (($x198 (and $x168 $x284)))
 (let (($x107 (= $x198 true)))
 (let (($x132 (forall ((input.ind-%var2866X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var2866X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x94))))
 (let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2866X)))
 (let (($x269 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2866X)))
 (=> $x269 (= ?x145 ?x199))))))))
 ))
 (let (($x169 (forall ((input.ind-%var2865X (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) input.ind-%var2865X) (bvult input.ind-%var2865X input.dst.llvm-%n))))
 (let (($x269 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2865X)))
 (= $x269 $x7))))
 ))
 (let (($x264 (and $x169 $x132)))
 (let (($x200 (= $x264 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x281 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x239)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x101)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x171)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (and $x57 $x223)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x118 $x254)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x133 $x159)))
 (let (($x248 (not $x213)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x50 $x8)))
 (let (($x37 (and (not $x33) $x248)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x231 $x290)))
 (let (($x113 (not $x9)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x164 $x153)))
 (let (($x84 (and (not $x295) $x113)))
 (let (($x253 (and (and (and (and (and (and $x84 $x37) $x195) $x155) $x128) $x207) $x99)))
 (let (($x251 (and $x253 $x187)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x249 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x67 (or false (or false (and (and true (or $x30 $x249)) (or $x131 $x172))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x83 (and $x62 $x251)))
 (let (($x88 (= $x83 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x193 (= (_ bv0 2) ?x29)))
 (let (($x234 (= $x193 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x229 (= $x100 true)))
 (let ((?x167 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x167)))
 (let (($x183 (= ?x233 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x183 true)))
 (let (($x78 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x258 (= $x78 true)))
 (let (($x260 (and $x258 $x63)))
 (let (($x74 (and $x260 $x229)))
 (let (($x259 (and $x74 $x234)))
 (let (($x165 (and $x259 $x88)))
 (let (($x27 (and $x165 $x184)))
 (let (($x61 (and $x27 $x200)))
 (let (($x226 (and $x61 $x107)))
 (let (($x135 (and $x226 $x16)))
 (let (($x188 (and $x135 $x123)))
 (let (($x60 (and $x188 $x38)))
 (let (($x273 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2886X)))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var2886X)))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2886X)))
 (=> $x55 (= ?x42 ?x145))))))
 ))
 (let (($x242 (forall ((input.ind-%var2885X (_ BitVec 32)) )(let (($x269 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2885X)))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2885X)))
 (= $x55 $x269))))
 ))
 (let (($x32 (and $x242 $x273)))
 (let (($x173 (and $x32 $x60)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x150 $x173)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x274 (and $x235 $x293)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x35 $x274)))
 (let ((?x48 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x77 (bvadd input.dst.llvm-%x ?x48)))
 (let (($x69 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x77 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x211 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x114 (or false (or false (and (and true (or $x45 $x211)) (or $x23 $x69))))))
 (let (($x138 (=> (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32))) $x114)))
 (let (($x152 (=> (and $x158 (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32)))) $x114)))
 (let (($x238 (and $x152 $x221)))
 (let (($x109 (=> $x238 $x157)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (not $x158)))
 (let (($x289 (or $x158 $x268)))
 (let (($x157 (= $x289 true)))
 (let ((?x105 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x105)))
 (let (($x70 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x38 (= $x70 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x123 (= $x166 true)))
 (let (($x176 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x16 (= $x176 true)))
 (let (($x284 (forall ((input.ind-%var2876X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var2876X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x94))))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var2876X)))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2876X)))
 (=> $x55 (= ?x42 ?x199))))))))
 ))
 (let (($x168 (forall ((input.ind-%var2875X (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) input.ind-%var2875X) (bvult input.ind-%var2875X input.dst.llvm-%n))))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2875X)))
 (= $x55 $x7))))
 ))
 (let (($x198 (and $x168 $x284)))
 (let (($x107 (= $x198 true)))
 (let (($x132 (forall ((input.ind-%var2866X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var2866X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x94))))
 (let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2866X)))
 (let (($x269 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2866X)))
 (=> $x269 (= ?x145 ?x199))))))))
 ))
 (let (($x169 (forall ((input.ind-%var2865X (_ BitVec 32)) )(let (($x7 (and (bvule (_ bv0 32) input.ind-%var2865X) (bvult input.ind-%var2865X input.dst.llvm-%n))))
 (let (($x269 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2865X)))
 (= $x269 $x7))))
 ))
 (let (($x264 (and $x169 $x132)))
 (let (($x200 (= $x264 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x184 (= $x281 true)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x187 (= (_ bv0 32) ?x239)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x99 (= (_ bv0 32) ?x101)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x223 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x171)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (and $x57 $x223)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (and $x118 $x254)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x133 $x159)))
 (let (($x248 (not $x213)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x50 $x8)))
 (let (($x37 (and (not $x33) $x248)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x231 $x290)))
 (let (($x113 (not $x9)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x164 $x153)))
 (let (($x84 (and (not $x295) $x113)))
 (let (($x253 (and (and (and (and (and (and $x84 $x37) $x195) $x155) $x128) $x207) $x99)))
 (let (($x251 (and $x253 $x187)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x249 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x67 (or false (or false (and (and true (or $x30 $x249)) (or $x131 $x172))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x67)))
 (let (($x83 (and $x62 $x251)))
 (let (($x88 (= $x83 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x193 (= (_ bv0 2) ?x29)))
 (let (($x234 (= $x193 true)))
 (let (($x100 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x229 (= $x100 true)))
 (let ((?x167 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x167)))
 (let (($x183 (= ?x233 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x63 (= $x183 true)))
 (let (($x78 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x258 (= $x78 true)))
 (let (($x260 (and $x258 $x63)))
 (let (($x74 (and $x260 $x229)))
 (let (($x259 (and $x74 $x234)))
 (let (($x165 (and $x259 $x88)))
 (let (($x27 (and $x165 $x184)))
 (let (($x61 (and $x27 $x200)))
 (let (($x226 (and $x61 $x107)))
 (let (($x135 (and $x226 $x16)))
 (let (($x188 (and $x135 $x123)))
 (let (($x60 (and $x188 $x38)))
 (let (($x273 (forall ((input.ind-%var2886X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2886X)))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var2886X)))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2886X)))
 (=> $x55 (= ?x42 ?x145))))))
 ))
 (let (($x242 (forall ((input.ind-%var2885X (_ BitVec 32)) )(let (($x269 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2885X)))
 (let (($x55 (input.spec-%var-x-1.0.1 input.ind-%var2885X)))
 (= $x55 $x269))))
 ))
 (let (($x32 (and $x242 $x273)))
 (let (($x173 (and $x32 $x60)))
 (let (($x150 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x293 (and $x150 $x173)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x274 (and $x235 $x293)))
 (let (($x35 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x35 $x274)))
 (let ((?x48 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x77 (bvadd input.dst.llvm-%x ?x48)))
 (let (($x69 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd ?x77 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x211 (bvugt ?x77 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x114 (or false (or false (and (and true (or $x45 $x211)) (or $x23 $x69))))))
 (let (($x138 (=> (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32))) $x114)))
 (let (($x152 (=> (and $x158 (bvule ?x77 (bvsub (bvadd ?x77 (_ bv4 32)) (_ bv1 32)))) $x114)))
 (let (($x238 (and $x152 $x221)))
 (let (($x109 (=> $x238 $x157)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x220)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x202)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (and $x184 $x151)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x281 $x217)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x22 $x101)))
 (let (($x253 (not $x99)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x90 $x73)))
 (let (($x187 (and (not $x207) $x253)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x118 $x57)))
 (let (($x223 (not $x171)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x56 $x155)))
 (let (($x128 (and (not $x68) $x223)))
 (let (($x43 (and (and (and (and (and (and $x128 $x187) $x83) $x165) $x7) $x169) $x219)))
 (let (($x117 (and $x43 $x6)))
 (let (($x282 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x252 (or false (or false (and (and true (or $x91 $x152)) (or $x69 $x282))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x252)))
 (let (($x214 (and $x145 $x117)))
 (let (($x72 (= $x214 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x284 (concat ?x103 (concat ?x139 (concat ?x264 ?x59)))))
 (let (($x109 (= ?x284 input.dst.llvm-%x)))
 (let (($x292 (= $x109 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x294 (concat ?x123 (concat ?x16 ?x226)))))
 (let (($x268 (= ?x70 input.dst.llvm-%n)))
 (let (($x289 (= $x268 true)))
 (let (($x38 (= input.dst.llvm-%n ?x70)))
 (let (($x198 (= input.dst.llvm-%x ?x284)))
 (let (($x60 (and $x198 $x38)))
 (let (($x199 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x173 (and $x199 $x60)))
 (let (($x195 (forall ((input.ind-%var2896X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var2896X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x33))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var2896X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2896X)))
 (=> $x15 (= ?x67 ?x37))))))))
 ))
 (let (($x234 (forall ((input.ind-%var2895X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2895X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2895X) (bvult input.ind-%var2895X input.dst.llvm-%n)))))
 ))
 (let (($x149 (and $x234 $x195)))
 (let (($x221 (and (and (and $x145 $x149) $x117) $x173)))
 (let (($x238 (= $x221 true)))
 (let (($x157 (and $x238 $x289)))
 (let (($x279 (and $x157 $x292)))
 (let (($x242 (forall ((input.ind-%var2906X (_ BitVec 32)) )(let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2906X)))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var2906X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2906X)))
 (=> $x15 (= ?x67 ?x197))))))
 ))
 (let (($x78 (forall ((input.ind-%var2905X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2905X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2905X)))
 (= $x15 $x32))))
 ))
 (let (($x42 (and $x78 $x242)))
 (let (($x208 (and $x42 $x279)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x48 $x208)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x121 (and $x14 $x175)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x158 $x121)))
 (let (($x52 (=> $x280 $x72)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x220 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x6 (= (_ bv0 32) ?x220)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x202)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x169 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (and $x184 $x151)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x281 $x217)))
 (let (($x165 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x22 $x101)))
 (let (($x253 (not $x99)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x90 $x73)))
 (let (($x187 (and (not $x207) $x253)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x118 $x57)))
 (let (($x223 (not $x171)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x56 $x155)))
 (let (($x128 (and (not $x68) $x223)))
 (let (($x43 (and (and (and (and (and (and $x128 $x187) $x83) $x165) $x7) $x169) $x219)))
 (let (($x117 (and $x43 $x6)))
 (let (($x282 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x125 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x125)))
 (let (($x252 (or false (or false (and (and true (or $x91 $x152)) (or $x69 $x282))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x252)))
 (let (($x214 (and $x145 $x117)))
 (let (($x72 (= $x214 true)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x284 (concat ?x103 (concat ?x139 (concat ?x264 ?x59)))))
 (let (($x109 (= ?x284 input.dst.llvm-%x)))
 (let (($x292 (= $x109 true)))
 (let ((?x226 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x294 (concat ?x123 (concat ?x16 ?x226)))))
 (let (($x268 (= ?x70 input.dst.llvm-%n)))
 (let (($x289 (= $x268 true)))
 (let (($x38 (= input.dst.llvm-%n ?x70)))
 (let (($x198 (= input.dst.llvm-%x ?x284)))
 (let (($x60 (and $x198 $x38)))
 (let (($x199 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x173 (and $x199 $x60)))
 (let (($x195 (forall ((input.ind-%var2896X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var2896X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x33))))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var2896X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2896X)))
 (=> $x15 (= ?x67 ?x37))))))))
 ))
 (let (($x234 (forall ((input.ind-%var2895X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2895X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2895X) (bvult input.ind-%var2895X input.dst.llvm-%n)))))
 ))
 (let (($x149 (and $x234 $x195)))
 (let (($x221 (and (and (and $x145 $x149) $x117) $x173)))
 (let (($x238 (= $x221 true)))
 (let (($x157 (and $x238 $x289)))
 (let (($x279 (and $x157 $x292)))
 (let (($x242 (forall ((input.ind-%var2906X (_ BitVec 32)) )(let ((?x197 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2906X)))
 (let ((?x67 (input.spec-%var-x-1.1.1 input.ind-%var2906X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2906X)))
 (=> $x15 (= ?x67 ?x197))))))
 ))
 (let (($x78 (forall ((input.ind-%var2905X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2905X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2905X)))
 (= $x15 $x32))))
 ))
 (let (($x42 (and $x78 $x242)))
 (let (($x208 (and $x42 $x279)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x48 $x208)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x121 (and $x14 $x175)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x280 (and $x158 $x121)))
 (let (($x52 (=> $x280 $x72)))
 (not $x52))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x150 (= (_ bv0 2) ?x249)))
 (let (($x115 (= $x150 true)))
 (let ((?x225 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x276 (concat ?x174 (concat ?x178 ?x225)))))
 (let (($x183 (= ?x63 input.dst.llvm-%x)))
 (let (($x229 (= $x183 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x240 (concat ?x89 (concat ?x23 (concat ?x288 ?x67)))))
 (let (($x181 (= input.dst.llvm-%n ?x240)))
 (let (($x74 (= input.dst.llvm-%x ?x63)))
 (let (($x193 (and $x74 $x181)))
 (let (($x215 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x258 (and $x215 $x193)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x52)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x214)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x280 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x292 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x292)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (and $x109 $x279)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x157 $x208)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x188 $x70)))
 (let (($x60 (not $x38)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x16 $x226)))
 (let (($x221 (and (not $x135) $x60)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x198 $x105)))
 (let (($x166 (not $x294)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x200 $x168)))
 (let (($x176 (and (not $x284) $x166)))
 (let (($x235 (and (and (and (and (and (and $x176 $x221) $x238) $x289) $x175) $x280) $x72)))
 (let (($x250 (and $x235 $x272)))
 (let (($x264 (forall ((input.ind-%var2916X (_ BitVec 32)) )(let ((?x43 (bvadd (bvmul input.ind-%var2916X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x274))))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var2916X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2916X)))
 (=> $x15 (= ?x101 ?x61))))))))
 ))
 (let (($x207 (forall ((input.ind-%var2915X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2915X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2915X) (bvult input.ind-%var2915X input.dst.llvm-%n)))))
 ))
 (let (($x59 (and $x207 $x264)))
 (let (($x254 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x128 (or false (or false (and (and true (or $x37 $x99)) (or $x192 $x254))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x247 (and (and (and $x90 $x59) $x250) $x258)))
 (let (($x259 (= $x247 true)))
 (let (($x69 (= ?x240 input.dst.llvm-%n)))
 (let (($x234 (= $x69 true)))
 (let (($x75 (and $x234 $x259)))
 (let (($x237 (and $x75 $x229)))
 (let (($x62 (forall ((input.ind-%var2926X (_ BitVec 32)) )(let ((?x282 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2926X)))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var2926X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2926X)))
 (=> $x15 (= ?x101 ?x282))))))
 ))
 (let (($x100 (forall ((input.ind-%var2925X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2925X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2925X)))
 (= $x15 $x164))))
 ))
 (let (($x295 (and $x100 $x62)))
 (let (($x41 (and $x295 $x237)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x211 (and $x14 $x41)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x9 $x211)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x158 $x10)))
 (let (($x58 (=> $x30 $x115)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x150 (= (_ bv0 2) ?x249)))
 (let (($x115 (= $x150 true)))
 (let ((?x225 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x276 (concat ?x174 (concat ?x178 ?x225)))))
 (let (($x183 (= ?x63 input.dst.llvm-%x)))
 (let (($x229 (= $x183 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x240 (concat ?x89 (concat ?x23 (concat ?x288 ?x67)))))
 (let (($x181 (= input.dst.llvm-%n ?x240)))
 (let (($x74 (= input.dst.llvm-%x ?x63)))
 (let (($x193 (and $x74 $x181)))
 (let (($x215 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x258 (and $x215 $x193)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x272 (= (_ bv0 32) ?x52)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x214)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x280 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x292 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x292)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (and $x109 $x279)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x157 $x208)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (and $x188 $x70)))
 (let (($x60 (not $x38)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x16 $x226)))
 (let (($x221 (and (not $x135) $x60)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x198 $x105)))
 (let (($x166 (not $x294)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x200 $x168)))
 (let (($x176 (and (not $x284) $x166)))
 (let (($x235 (and (and (and (and (and (and $x176 $x221) $x238) $x289) $x175) $x280) $x72)))
 (let (($x250 (and $x235 $x272)))
 (let (($x264 (forall ((input.ind-%var2916X (_ BitVec 32)) )(let ((?x43 (bvadd (bvmul input.ind-%var2916X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv1 32))) (select input.dst.llvm-mem ?x43))))
 (let ((?x61 (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x43 (_ bv2 32))) ?x274))))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var2916X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2916X)))
 (=> $x15 (= ?x101 ?x61))))))))
 ))
 (let (($x207 (forall ((input.ind-%var2915X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2915X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2915X) (bvult input.ind-%var2915X input.dst.llvm-%n)))))
 ))
 (let (($x59 (and $x207 $x264)))
 (let (($x254 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x128 (or false (or false (and (and true (or $x37 $x99)) (or $x192 $x254))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x128)))
 (let (($x247 (and (and (and $x90 $x59) $x250) $x258)))
 (let (($x259 (= $x247 true)))
 (let (($x69 (= ?x240 input.dst.llvm-%n)))
 (let (($x234 (= $x69 true)))
 (let (($x75 (and $x234 $x259)))
 (let (($x237 (and $x75 $x229)))
 (let (($x62 (forall ((input.ind-%var2926X (_ BitVec 32)) )(let ((?x282 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2926X)))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var2926X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2926X)))
 (=> $x15 (= ?x101 ?x282))))))
 ))
 (let (($x100 (forall ((input.ind-%var2925X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2925X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2925X)))
 (= $x15 $x164))))
 ))
 (let (($x295 (and $x100 $x62)))
 (let (($x41 (and $x295 $x237)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x211 (and $x14 $x41)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x9 $x211)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x30 (and $x158 $x10)))
 (let (($x58 (=> $x30 $x115)))
 (not $x58)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x202 (= $x50 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x239 (concat ?x73 (concat ?x20 ?x141)))))
 (let (($x169 (= ?x143 input.dst.llvm-%n)))
 (let (($x156 (= $x169 true)))
 (let (($x142 (= input.dst.llvm-%n ?x143)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x67 (concat ?x288 (concat ?x252 ?x101)))))
 (let (($x133 (= input.dst.llvm-%x ?x185)))
 (let (($x151 (and $x133 $x142)))
 (let (($x165 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x217 (and $x165 $x151)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x150)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x249 (= (_ bv0 32) ?x39)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x229)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x183 $x237)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x75 $x41)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x114 $x205)))
 (let (($x74 (not $x63)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x245 $x178)))
 (let (($x193 (and (not $x225) $x74)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x233 $x215)))
 (let (($x276 (not $x172)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x250 $x204)))
 (let (($x174 (and (not $x113) $x276)))
 (let (($x77 (and (and (and (and (and (and $x174 $x193) $x247) $x259) $x211) $x30) $x249)))
 (let (($x131 (and $x77 $x115)))
 (let (($x52 (forall ((input.ind-%var2936X (_ BitVec 32)) )(let ((?x157 (bvadd (bvmul input.ind-%var2936X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x208))))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var2936X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2936X)))
 (=> $x15 (= ?x168 ?x214))))))))
 ))
 (let (($x207 (forall ((input.ind-%var2935X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2935X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2935X) (bvult input.ind-%var2935X input.dst.llvm-%n)))))
 ))
 (let (($x272 (and $x207 $x52)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x284 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x139 (or false (or false (and (and true (or $x155 $x284)) (or $x176 $x117))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x22 (and (and (and $x132 $x272) $x131) $x217)))
 (let (($x27 (= $x22 true)))
 (let (($x267 (= ?x185 input.dst.llvm-%x)))
 (let (($x99 (= $x267 true)))
 (let (($x7 (and $x99 $x27)))
 (let (($x149 (and $x7 $x156)))
 (let (($x8 (forall ((input.ind-%var2946X (_ BitVec 32)) )(let ((?x240 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2946X)))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var2946X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2946X)))
 (=> $x15 (= ?x168 ?x240))))))
 ))
 (let (($x254 (forall ((input.ind-%var2945X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2945X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2945X)))
 (= $x15 $x83))))
 ))
 (let (($x37 (and $x254 $x8)))
 (let (($x213 (and $x37 $x149)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x130 (and $x9 $x213)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x48 (and $x56 $x130)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x158 $x48)))
 (let (($x191 (=> $x55 $x202)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x50 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x202 (= $x50 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x143 (concat ?x239 (concat ?x73 (concat ?x20 ?x141)))))
 (let (($x169 (= ?x143 input.dst.llvm-%n)))
 (let (($x156 (= $x169 true)))
 (let (($x142 (= input.dst.llvm-%n ?x143)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x67 (concat ?x288 (concat ?x252 ?x101)))))
 (let (($x133 (= input.dst.llvm-%x ?x185)))
 (let (($x151 (and $x133 $x142)))
 (let (($x165 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x217 (and $x165 $x151)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x115 (= (_ bv0 32) ?x150)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x249 (= (_ bv0 32) ?x39)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x229)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (and $x183 $x237)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (and $x75 $x41)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x114 $x205)))
 (let (($x74 (not $x63)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x245 $x178)))
 (let (($x193 (and (not $x225) $x74)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x233 $x215)))
 (let (($x276 (not $x172)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x250 $x204)))
 (let (($x174 (and (not $x113) $x276)))
 (let (($x77 (and (and (and (and (and (and $x174 $x193) $x247) $x259) $x211) $x30) $x249)))
 (let (($x131 (and $x77 $x115)))
 (let (($x52 (forall ((input.ind-%var2936X (_ BitVec 32)) )(let ((?x157 (bvadd (bvmul input.ind-%var2936X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x208))))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var2936X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2936X)))
 (=> $x15 (= ?x168 ?x214))))))))
 ))
 (let (($x207 (forall ((input.ind-%var2935X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2935X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2935X) (bvult input.ind-%var2935X input.dst.llvm-%n)))))
 ))
 (let (($x272 (and $x207 $x52)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x284 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x139 (or false (or false (and (and true (or $x155 $x284)) (or $x176 $x117))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x139)))
 (let (($x22 (and (and (and $x132 $x272) $x131) $x217)))
 (let (($x27 (= $x22 true)))
 (let (($x267 (= ?x185 input.dst.llvm-%x)))
 (let (($x99 (= $x267 true)))
 (let (($x7 (and $x99 $x27)))
 (let (($x149 (and $x7 $x156)))
 (let (($x8 (forall ((input.ind-%var2946X (_ BitVec 32)) )(let ((?x240 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2946X)))
 (let ((?x168 (input.spec-%var-x-1.1.1 input.ind-%var2946X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2946X)))
 (=> $x15 (= ?x168 ?x240))))))
 ))
 (let (($x254 (forall ((input.ind-%var2945X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2945X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2945X)))
 (= $x15 $x83))))
 ))
 (let (($x37 (and $x254 $x8)))
 (let (($x213 (and $x37 $x149)))
 (let (($x9 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x130 (and $x9 $x213)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x48 (and $x56 $x130)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x158 $x48)))
 (let (($x191 (=> $x55 $x202)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (forall ((input.ind-%var2976X (_ BitVec 32)) )(let ((?x281 (bvadd (bvmul input.ind-%var2976X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x205))))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var2976X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2976X)))
 (=> $x15 (= ?x204 ?x247))))))))
 ))
 (let (($x163 (forall ((input.ind-%var2975X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2975X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2975X) (bvult input.ind-%var2975X input.dst.llvm-%n)))))
 ))
 (let (($x180 (and $x163 $x119)))
 (let (($x116 (= $x180 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x164 (concat ?x23 (concat ?x42 ?x191)))))
 (let (($x68 (= ?x226 input.dst.llvm-%x)))
 (let (($x88 (= $x68 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x260 (concat ?x264 (concat ?x40 ?x216)))))
 (let (($x221 (= ?x84 input.dst.llvm-%n)))
 (let (($x97 (= $x221 true)))
 (let (($x238 (= input.dst.llvm-%n ?x84)))
 (let (($x90 (= input.dst.llvm-%x ?x226)))
 (let (($x38 (and $x90 $x238)))
 (let (($x50 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x60 (and $x50 $x38)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x217)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x142)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x36)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x73 $x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x29 $x141)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x150 $x115)))
 (let (($x184 (not $x131)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x39 $x249)))
 (let (($x32 (and (not $x77) $x184)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x41 $x211)))
 (let (($x10 (not $x153)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x183 $x229)))
 (let (($x152 (and (not $x237) $x10)))
 (let (($x213 (and (and (and (and (and (and $x152 $x32) $x133) $x239) $x102) $x143) $x151)))
 (let (($x130 (and $x213 $x22)))
 (let (($x138 (forall ((input.ind-%var2956X (_ BitVec 32)) )(let ((?x281 (bvadd (bvmul input.ind-%var2956X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x205))))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var2956X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2956X)))
 (=> $x15 (= ?x204 ?x247))))))))
 ))
 (let (($x76 (forall ((input.ind-%var2955X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2955X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2955X) (bvult input.ind-%var2955X input.dst.llvm-%n)))))
 ))
 (let (($x75 (and $x76 $x138)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x43 (or false (or false (and (and true (or $x37 $x252)) (or $x45 $x67))))))
 (let (($x294 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x200 (and (and (and $x294 $x75) $x130) $x60)))
 (let (($x70 (= $x200 true)))
 (let (($x187 (and $x70 $x97)))
 (let (($x268 (and $x187 $x88)))
 (let (($x167 (forall ((input.ind-%var2966X (_ BitVec 32)) )(let ((?x185 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2966X)))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var2966X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2966X)))
 (=> $x15 (= ?x204 ?x185))))))
 ))
 (let (($x117 (forall ((input.ind-%var2965X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2965X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2965X)))
 (= $x15 $x166))))
 ))
 (let (($x155 (and $x117 $x167)))
 (let (($x14 (and $x155 $x268)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x56 $x14)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x236 (and $x66 $x145)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x158 $x236)))
 (let (($x71 (=> $x289 $x116)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (forall ((input.ind-%var2976X (_ BitVec 32)) )(let ((?x281 (bvadd (bvmul input.ind-%var2976X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x205))))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var2976X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2976X)))
 (=> $x15 (= ?x204 ?x247))))))))
 ))
 (let (($x163 (forall ((input.ind-%var2975X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2975X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2975X) (bvult input.ind-%var2975X input.dst.llvm-%n)))))
 ))
 (let (($x180 (and $x163 $x119)))
 (let (($x116 (= $x180 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x226 (concat ?x164 (concat ?x23 (concat ?x42 ?x191)))))
 (let (($x68 (= ?x226 input.dst.llvm-%x)))
 (let (($x88 (= $x68 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x260 (concat ?x264 (concat ?x40 ?x216)))))
 (let (($x221 (= ?x84 input.dst.llvm-%n)))
 (let (($x97 (= $x221 true)))
 (let (($x238 (= input.dst.llvm-%n ?x84)))
 (let (($x90 (= input.dst.llvm-%x ?x226)))
 (let (($x38 (and $x90 $x238)))
 (let (($x50 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x60 (and $x50 $x38)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x217)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x151 (= (_ bv0 32) ?x142)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x36 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x36)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x73 $x20)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x29 $x141)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x150 $x115)))
 (let (($x184 (not $x131)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x39 $x249)))
 (let (($x32 (and (not $x77) $x184)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x41 $x211)))
 (let (($x10 (not $x153)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x183 $x229)))
 (let (($x152 (and (not $x237) $x10)))
 (let (($x213 (and (and (and (and (and (and $x152 $x32) $x133) $x239) $x102) $x143) $x151)))
 (let (($x130 (and $x213 $x22)))
 (let (($x138 (forall ((input.ind-%var2956X (_ BitVec 32)) )(let ((?x281 (bvadd (bvmul input.ind-%var2956X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem ?x281))))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x281 (_ bv2 32))) ?x205))))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var2956X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2956X)))
 (=> $x15 (= ?x204 ?x247))))))))
 ))
 (let (($x76 (forall ((input.ind-%var2955X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2955X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2955X) (bvult input.ind-%var2955X input.dst.llvm-%n)))))
 ))
 (let (($x75 (and $x76 $x138)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x43 (or false (or false (and (and true (or $x37 $x252)) (or $x45 $x67))))))
 (let (($x294 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x43)))
 (let (($x200 (and (and (and $x294 $x75) $x130) $x60)))
 (let (($x70 (= $x200 true)))
 (let (($x187 (and $x70 $x97)))
 (let (($x268 (and $x187 $x88)))
 (let (($x167 (forall ((input.ind-%var2966X (_ BitVec 32)) )(let ((?x185 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2966X)))
 (let ((?x204 (input.spec-%var-x-1.1.1 input.ind-%var2966X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2966X)))
 (=> $x15 (= ?x204 ?x185))))))
 ))
 (let (($x117 (forall ((input.ind-%var2965X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2965X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2965X)))
 (= $x15 $x166))))
 ))
 (let (($x155 (and $x117 $x167)))
 (let (($x14 (and $x155 $x268)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x145 (and $x56 $x14)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x236 (and $x66 $x145)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x289 (and $x158 $x236)))
 (let (($x71 (=> $x289 $x116)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x290 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let ((?x35 (bvadd (bvmul input.ind-%var3006X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x36))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var3006X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var3006X)))
 (=> $x15 (= ?x115 ?x143))))))))
 ))
 (let (($x21 (forall ((input.ind-%var3005X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var3005X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var3005X) (bvult input.ind-%var3005X input.dst.llvm-%n)))))
 ))
 (let (($x53 (and $x21 $x290)))
 (let (($x120 (= $x53 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x176 (concat ?x295 (concat ?x71 ?x180)))))
 (let (($x272 (= ?x89 input.dst.llvm-%x)))
 (let (($x175 (= $x272 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x105 (concat ?x174 (concat ?x26 ?x132)))))
 (let (($x6 (= ?x172 input.dst.llvm-%n)))
 (let (($x253 (= $x6 true)))
 (let (($x220 (= input.dst.llvm-%n ?x172)))
 (let (($x83 (= input.dst.llvm-%x ?x89)))
 (let (($x52 (and $x83 $x220)))
 (let (($x163 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x219 (and $x163 $x52)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x70)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x60)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x216)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (and $x40 $x94)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x194 $x286)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x42 $x191)))
 (let (($x192 (not $x248)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x223 $x23)))
 (let (($x90 (and (not $x171) $x192)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x188 $x48)))
 (let (($x50 (not $x55)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x217 $x22)))
 (let (($x164 (and (not $x130) $x50)))
 (let (($x14 (and (and (and (and (and (and $x164 $x90) $x260) $x264) $x84) $x38) $x200)))
 (let (($x145 (and $x14 $x221)))
 (let (($x151 (forall ((input.ind-%var2986X (_ BitVec 32)) )(let ((?x35 (bvadd (bvmul input.ind-%var2986X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x36))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var2986X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2986X)))
 (=> $x15 (= ?x115 ?x143))))))))
 ))
 (let (($x173 (forall ((input.ind-%var2985X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2985X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2985X) (bvult input.ind-%var2985X input.dst.llvm-%n)))))
 ))
 (let (($x213 (and $x173 $x151)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x157 (or false (or false (and (and true (or $x155 $x100)) (or $x231 $x8))))))
 (let (($x276 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x107 (and (and (and $x276 $x213) $x145) $x219)))
 (let (($x280 (= $x107 true)))
 (let (($x16 (and $x280 $x253)))
 (let (($x254 (and $x16 $x175)))
 (let (($x113 (forall ((input.ind-%var2996X (_ BitVec 32)) )(let ((?x67 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2996X)))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var2996X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2996X)))
 (=> $x15 (= ?x115 ?x67))))))
 ))
 (let (($x59 (forall ((input.ind-%var2995X (_ BitVec 32)) )(let (($x273 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2995X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2995X)))
 (= $x15 $x273))))
 ))
 (let (($x215 (and $x59 $x113)))
 (let (($x210 (and $x215 $x254)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x66 $x210)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x31 (and $x245 $x207)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x158 $x31)))
 (let (($x54 (=> $x9 $x120)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x290 (forall ((input.ind-%var3006X (_ BitVec 32)) )(let ((?x35 (bvadd (bvmul input.ind-%var3006X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x36))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var3006X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var3006X)))
 (=> $x15 (= ?x115 ?x143))))))))
 ))
 (let (($x21 (forall ((input.ind-%var3005X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var3005X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var3005X) (bvult input.ind-%var3005X input.dst.llvm-%n)))))
 ))
 (let (($x53 (and $x21 $x290)))
 (let (($x120 (= $x53 true)))
 (let ((?x180 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x176 (concat ?x295 (concat ?x71 ?x180)))))
 (let (($x272 (= ?x89 input.dst.llvm-%x)))
 (let (($x175 (= $x272 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x172 (concat ?x105 (concat ?x174 (concat ?x26 ?x132)))))
 (let (($x6 (= ?x172 input.dst.llvm-%n)))
 (let (($x253 (= $x6 true)))
 (let (($x220 (= input.dst.llvm-%n ?x172)))
 (let (($x83 (= input.dst.llvm-%x ?x89)))
 (let (($x52 (and $x83 $x220)))
 (let (($x163 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x219 (and $x163 $x52)))
 (let ((?x70 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x70)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x60)))
 (let ((?x238 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x238)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x216)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (and $x40 $x94)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x194 $x286)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x42 $x191)))
 (let (($x192 (not $x248)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x223 $x23)))
 (let (($x90 (and (not $x171) $x192)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x188 $x48)))
 (let (($x50 (not $x55)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x217 $x22)))
 (let (($x164 (and (not $x130) $x50)))
 (let (($x14 (and (and (and (and (and (and $x164 $x90) $x260) $x264) $x84) $x38) $x200)))
 (let (($x145 (and $x14 $x221)))
 (let (($x151 (forall ((input.ind-%var2986X (_ BitVec 32)) )(let ((?x35 (bvadd (bvmul input.ind-%var2986X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x36))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var2986X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2986X)))
 (=> $x15 (= ?x115 ?x143))))))))
 ))
 (let (($x173 (forall ((input.ind-%var2985X (_ BitVec 32)) )(let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2985X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2985X) (bvult input.ind-%var2985X input.dst.llvm-%n)))))
 ))
 (let (($x213 (and $x173 $x151)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x157 (or false (or false (and (and true (or $x155 $x100)) (or $x231 $x8))))))
 (let (($x276 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x107 (and (and (and $x276 $x213) $x145) $x219)))
 (let (($x280 (= $x107 true)))
 (let (($x16 (and $x280 $x253)))
 (let (($x254 (and $x16 $x175)))
 (let (($x113 (forall ((input.ind-%var2996X (_ BitVec 32)) )(let ((?x67 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2996X)))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var2996X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2996X)))
 (=> $x15 (= ?x115 ?x67))))))
 ))
 (let (($x59 (forall ((input.ind-%var2995X (_ BitVec 32)) )(let (($x273 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2995X)))
 (let (($x15 (input.spec-%var-x-1.0.1 input.ind-%var2995X)))
 (= $x15 $x273))))
 ))
 (let (($x215 (and $x59 $x113)))
 (let (($x210 (and $x215 $x254)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x66 $x210)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x31 (and $x245 $x207)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x158 $x31)))
 (let (($x54 (=> $x9 $x120)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x17 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x34 (bvneg ?x17)))
 (let (($x25 (= ?x34 ?x80)))
 (let (($x287 (= $x25 true)))
 (let ((?x196 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x196)))
 (let (($x108 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x108 true)))
 (let (($x13 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x140 (= $x13 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x111 true)))
 (let (($x275 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x275 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x134 (= $x64 true)))
 (let (($x85 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x85 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x129 (bvsub ?x232 ?x245)))
 (let (($x19 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x129) (bvult ?x232 ?x129))))
 (let (($x212 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x87 (ite $x212 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x271 (bvmul (_ bv4 64) ?x112)))
 (let ((?x104 ((_ extract 63 32) ?x271)))
 (let (($x263 (= ?x104 ?x87)))
 (let (($x261 (and $x263 $x19)))
 (let (($x11 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x244 (and $x11 $x261)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x158 $x244)))
 (let (($x291 (= $x182 true)))
 (let (($x222 (= $x158 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x218)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x147)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x267)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x208 $x82)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x126 $x51)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x247 $x229)))
 (let (($x122 (not $x56)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x183 $x117)))
 (let (($x211 (and (not $x114) $x122)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x259 $x75)))
 (let (($x205 (not $x58)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x197 $x166)))
 (let (($x77 (and (not $x246) $x205)))
 (let (($x99 (and (and (and (and (and (and $x77 $x211) $x153) $x159) $x96) $x5) $x230)))
 (let (($x199 (and $x99 $x12)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x249 (or false (or false (and (and true (or $x81 $x103)) (or $x237 $x252))))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x249)))
 (let (($x234 (and $x250 $x199)))
 (let (($x269 (= $x234 true)))
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x282 (= (_ bv0 2) ?x169)))
 (let (($x178 (= $x282 true)))
 (let (($x290 (forall ((input.ind-%var3026X (_ BitVec 32)) )(let ((?x70 (bvadd (bvmul input.ind-%var3026X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x236))))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var3026X)))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3026X)))
 (=> $x131 (= ?x33 ?x295))))))))
 ))
 (let (($x132 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var3025X) (bvult input.ind-%var3025X input.dst.llvm-%n))))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3025X)))
 (= $x131 $x248))))
 ))
 (let (($x53 (and $x132 $x290)))
 (let (($x120 (= $x53 true)))
 (let (($x180 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let ((?x70 (bvadd (bvmul input.ind-%var3016X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x236))))
 (let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3016X)))
 (let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3016X)))
 (=> $x173 (= ?x141 ?x295))))))))
 ))
 (let (($x90 (forall ((input.ind-%var3015X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var3015X) (bvult input.ind-%var3015X input.dst.llvm-%n))))
 (let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3015X)))
 (= $x173 $x248))))
 ))
 (let (($x124 (and $x90 $x180)))
 (let (($x61 (= $x124 true)))
 (let ((?x130 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x130)))
 (let (($x48 (= ?x125 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x48 true)))
 (let (($x89 (and $x55 $x61)))
 (let (($x54 (and $x89 $x120)))
 (let (($x119 (and $x54 $x178)))
 (let (($x170 (and $x119 $x269)))
 (let (($x189 (and $x170 $x222)))
 (let (($x24 (and $x189 $x291)))
 (let (($x285 (and $x24 $x49)))
 (let (($x18 (and $x285 $x134)))
 (let (($x278 (and $x18 $x241)))
 (let (($x137 (and $x278 $x65)))
 (let (($x144 (and $x137 $x140)))
 (let (($x265 (and $x144 $x209)))
 (let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x213 (_ bv1 32))))
 (let (($x186 (and $x128 $x265)))
 (let (($x143 (forall ((input.ind-%var3036X (_ BitVec 32)) )(let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3036X)))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var3036X)))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3036X)))
 (=> $x131 (= ?x33 ?x141))))))
 ))
 (let (($x39 (forall ((input.ind-%var3035X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3035X)))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3035X)))
 (= $x131 $x173))))
 ))
 (let (($x149 (and $x39 $x143)))
 (let (($x93 (and $x149 $x186)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x157 $x93)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x92 (and $x76 $x257)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x78 $x92)))
 (let (($x155 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x294 (bvadd ?x232 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x215 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x294)))
 (let (($x240 (or false (or false (and (and true (or $x113 $x215)) (or $x167 $x155))))))
 (let (($x231 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x240)))
 (let (($x179 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x240)))
 (let (($x154 (and $x179 $x228)))
 (let (($x106 (=> $x154 $x287)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x17 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x34 (bvneg ?x17)))
 (let (($x25 (= ?x34 ?x80)))
 (let (($x287 (= $x25 true)))
 (let ((?x196 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x196)))
 (let (($x108 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x108 true)))
 (let (($x13 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x140 (= $x13 true)))
 (let (($x111 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x111 true)))
 (let (($x275 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x275 true)))
 (let (($x64 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x134 (= $x64 true)))
 (let (($x85 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x85 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x129 (bvsub ?x232 ?x245)))
 (let (($x19 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x129) (bvult ?x232 ?x129))))
 (let (($x212 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x87 (ite $x212 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x112 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x271 (bvmul (_ bv4 64) ?x112)))
 (let ((?x104 ((_ extract 63 32) ?x271)))
 (let (($x263 (= ?x104 ?x87)))
 (let (($x261 (and $x263 $x19)))
 (let (($x11 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x244 (and $x11 $x261)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (=> $x158 $x244)))
 (let (($x291 (= $x182 true)))
 (let (($x222 (= $x158 true)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x218)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x147)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x227)))
 (let ((?x267 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x267)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x51 (and $x208 $x82)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x126 $x51)))
 (let (($x159 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x247 $x229)))
 (let (($x122 (not $x56)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x183 $x117)))
 (let (($x211 (and (not $x114) $x122)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x259 $x75)))
 (let (($x205 (not $x58)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x197 $x166)))
 (let (($x77 (and (not $x246) $x205)))
 (let (($x99 (and (and (and (and (and (and $x77 $x211) $x153) $x159) $x96) $x5) $x230)))
 (let (($x199 (and $x99 $x12)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x237 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x249 (or false (or false (and (and true (or $x81 $x103)) (or $x237 $x252))))))
 (let (($x250 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x249)))
 (let (($x234 (and $x250 $x199)))
 (let (($x269 (= $x234 true)))
 (let ((?x169 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x282 (= (_ bv0 2) ?x169)))
 (let (($x178 (= $x282 true)))
 (let (($x290 (forall ((input.ind-%var3026X (_ BitVec 32)) )(let ((?x70 (bvadd (bvmul input.ind-%var3026X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x236))))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var3026X)))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3026X)))
 (=> $x131 (= ?x33 ?x295))))))))
 ))
 (let (($x132 (forall ((input.ind-%var3025X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var3025X) (bvult input.ind-%var3025X input.dst.llvm-%n))))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3025X)))
 (= $x131 $x248))))
 ))
 (let (($x53 (and $x132 $x290)))
 (let (($x120 (= $x53 true)))
 (let (($x180 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let ((?x70 (bvadd (bvmul input.ind-%var3016X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x236))))
 (let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3016X)))
 (let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3016X)))
 (=> $x173 (= ?x141 ?x295))))))))
 ))
 (let (($x90 (forall ((input.ind-%var3015X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var3015X) (bvult input.ind-%var3015X input.dst.llvm-%n))))
 (let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3015X)))
 (= $x173 $x248))))
 ))
 (let (($x124 (and $x90 $x180)))
 (let (($x61 (= $x124 true)))
 (let ((?x130 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x130)))
 (let (($x48 (= ?x125 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x48 true)))
 (let (($x89 (and $x55 $x61)))
 (let (($x54 (and $x89 $x120)))
 (let (($x119 (and $x54 $x178)))
 (let (($x170 (and $x119 $x269)))
 (let (($x189 (and $x170 $x222)))
 (let (($x24 (and $x189 $x291)))
 (let (($x285 (and $x24 $x49)))
 (let (($x18 (and $x285 $x134)))
 (let (($x278 (and $x18 $x241)))
 (let (($x137 (and $x278 $x65)))
 (let (($x144 (and $x137 $x140)))
 (let (($x265 (and $x144 $x209)))
 (let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x213 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x128 (bvuge ?x213 (_ bv1 32))))
 (let (($x186 (and $x128 $x265)))
 (let (($x143 (forall ((input.ind-%var3036X (_ BitVec 32)) )(let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3036X)))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var3036X)))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3036X)))
 (=> $x131 (= ?x33 ?x141))))))
 ))
 (let (($x39 (forall ((input.ind-%var3035X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3035X)))
 (let (($x131 (input.spec-%var-x-1.0.1 input.ind-%var3035X)))
 (= $x131 $x173))))
 ))
 (let (($x149 (and $x39 $x143)))
 (let (($x93 (and $x149 $x186)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x157 $x93)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x92 (and $x76 $x257)))
 (let (($x78 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x78 $x92)))
 (let (($x155 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x294 (bvadd ?x232 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x294)))
 (let (($x215 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x294)))
 (let (($x240 (or false (or false (and (and true (or $x113 $x215)) (or $x167 $x155))))))
 (let (($x231 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x240)))
 (let (($x179 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x240)))
 (let (($x154 (and $x179 $x228)))
 (let (($x106 (=> $x154 $x287)))
 (not $x106)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x214 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (bvsge ?x214 (_ bv0 32))))
 (let (($x292 (= $x207 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x254)))
 (let (($x16 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x16 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x52 (= $x220 true)))
 (let (($x83 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x83 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x40)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x84)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x223 $x195)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (and $x50 $x264)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x63 $x35)))
 (let (($x276 (not $x156)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x41 $x29)))
 (let (($x20 (and (not $x27) $x276)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x25 $x287)))
 (let (($x262 (not $x106)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x13 $x140)))
 (let (($x235 (and (not $x80) $x262)))
 (let (($x226 (and (and (and (and (and (and $x235 $x20) $x152) $x260) $x238) $x286) $x194)))
 (let (($x60 (and $x226 $x68)))
 (let (($x257 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x270 (or false (or false (and (and true (or $x108 $x209)) (or $x93 $x257))))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x270)))
 (let (($x123 (and $x34 $x60)))
 (let (($x200 (= $x123 true)))
 (let (($x278 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (= $x278 true)))
 (let ((?x134 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x18 (= (_ bv0 2) ?x134)))
 (let (($x275 (= $x18 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x85 true)))
 (let (($x182 (forall ((input.ind-%var3061X (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul input.ind-%var3061X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x159))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var3061X)))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3061X)))
 (=> $x39 (= ?x217 ?x51))))))))
 ))
 (let (($x170 (forall ((input.ind-%var3060X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var3060X) (bvult input.ind-%var3060X input.dst.llvm-%n))))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3060X)))
 (= $x39 $x165))))
 ))
 (let (($x291 (and $x170 $x182)))
 (let (($x24 (= $x291 true)))
 (let (($x227 (forall ((input.ind-%var3051X (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul input.ind-%var3051X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x159))))
 (let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3051X)))
 (let (($x36 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3051X)))
 (=> $x36 (= ?x125 ?x51))))))))
 ))
 (let (($x249 (forall ((input.ind-%var3050X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var3050X) (bvult input.ind-%var3050X input.dst.llvm-%n))))
 (let (($x36 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3050X)))
 (= $x36 $x165))))
 ))
 (let (($x5 (and $x249 $x227)))
 (let (($x121 (= $x5 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x239 true)))
 (let ((?x120 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x120)))
 (let (($x169 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x169 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x71 (bvsub ?x232 ?x245)))
 (let (($x89 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x71) (bvult ?x232 ?x71))))
 (let (($x236 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x295 (ite $x236 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x274 (bvmul (_ bv4 64) ?x145)))
 (let ((?x221 ((_ extract 63 32) ?x274)))
 (let (($x116 (= ?x221 ?x295)))
 (let (($x26 (and $x116 $x89)))
 (let (($x289 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x132 (and $x289 $x26)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x158 $x132)))
 (let (($x21 (= $x9 true)))
 (let (($x176 (= $x158 true)))
 (let (($x290 (and $x176 $x21)))
 (let (($x178 (and $x290 $x282)))
 (let (($x181 (and $x178 $x74)))
 (let (($x147 (and $x181 $x121)))
 (let (($x47 (and $x147 $x24)))
 (let (($x285 (and $x47 $x49)))
 (let (($x241 (and $x285 $x275)))
 (let (($x65 (and $x241 $x111)))
 (let (($x172 (and $x65 $x200)))
 (let (($x127 (and $x172 $x105)))
 (let (($x175 (and $x127 $x52)))
 (let (($x280 (and $x175 $x107)))
 (let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x14 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x14 (_ bv1 32))))
 (let (($x219 (and $x70 $x280)))
 (let (($x248 (forall ((input.ind-%var3071X (_ BitVec 32)) )(let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3071X)))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var3071X)))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3071X)))
 (=> $x39 (= ?x217 ?x125))))))
 ))
 (let (($x142 (forall ((input.ind-%var3070X (_ BitVec 32)) )(let (($x36 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3070X)))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3070X)))
 (= $x39 $x36))))
 ))
 (let (($x192 (and $x142 $x248)))
 (let (($x6 (and $x192 $x219)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x272 (and $x138 $x6)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x210 (and $x233 $x272)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x288 (and $x8 $x210)))
 (let (($x100 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd ?x232 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x185 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x179 (or false (or false (and (and true (or $x204 $x185)) (or $x135 $x100))))))
 (let (($x78 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x179)))
 (let (($x281 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x179)))
 (let (($x174 (and $x281 $x288)))
 (let (($x31 (=> $x174 $x292)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x214 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x207 (bvsge ?x214 (_ bv0 32))))
 (let (($x292 (= $x207 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x254)))
 (let (($x16 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x16 true)))
 (let (($x220 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x52 (= $x220 true)))
 (let (($x83 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x105 (= $x83 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x40)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x194 (= (_ bv0 32) ?x84)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x223 $x195)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (and $x50 $x264)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x152 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x63 $x35)))
 (let (($x276 (not $x156)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x41 $x29)))
 (let (($x20 (and (not $x27) $x276)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x25 $x287)))
 (let (($x262 (not $x106)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x13 $x140)))
 (let (($x235 (and (not $x80) $x262)))
 (let (($x226 (and (and (and (and (and (and $x235 $x20) $x152) $x260) $x238) $x286) $x194)))
 (let (($x60 (and $x226 $x68)))
 (let (($x257 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x270 (or false (or false (and (and true (or $x108 $x209)) (or $x93 $x257))))))
 (let (($x34 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x270)))
 (let (($x123 (and $x34 $x60)))
 (let (($x200 (= $x123 true)))
 (let (($x278 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (= $x278 true)))
 (let ((?x134 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x18 (= (_ bv0 2) ?x134)))
 (let (($x275 (= $x18 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x49 (= $x85 true)))
 (let (($x182 (forall ((input.ind-%var3061X (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul input.ind-%var3061X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x159))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var3061X)))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3061X)))
 (=> $x39 (= ?x217 ?x51))))))))
 ))
 (let (($x170 (forall ((input.ind-%var3060X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var3060X) (bvult input.ind-%var3060X input.dst.llvm-%n))))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3060X)))
 (= $x39 $x165))))
 ))
 (let (($x291 (and $x170 $x182)))
 (let (($x24 (= $x291 true)))
 (let (($x227 (forall ((input.ind-%var3051X (_ BitVec 32)) )(let ((?x284 (bvadd (bvmul input.ind-%var3051X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv1 32))) (select input.dst.llvm-mem ?x284))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x284 (_ bv2 32))) ?x159))))
 (let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3051X)))
 (let (($x36 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3051X)))
 (=> $x36 (= ?x125 ?x51))))))))
 ))
 (let (($x249 (forall ((input.ind-%var3050X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var3050X) (bvult input.ind-%var3050X input.dst.llvm-%n))))
 (let (($x36 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3050X)))
 (= $x36 $x165))))
 ))
 (let (($x5 (and $x249 $x227)))
 (let (($x121 (= $x5 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x74 (= $x239 true)))
 (let ((?x120 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x54 (bvneg ?x120)))
 (let (($x169 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x169 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x71 (bvsub ?x232 ?x245)))
 (let (($x89 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x71) (bvult ?x232 ?x71))))
 (let (($x236 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x295 (ite $x236 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x145 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x274 (bvmul (_ bv4 64) ?x145)))
 (let ((?x221 ((_ extract 63 32) ?x274)))
 (let (($x116 (= ?x221 ?x295)))
 (let (($x26 (and $x116 $x89)))
 (let (($x289 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x132 (and $x289 $x26)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (=> $x158 $x132)))
 (let (($x21 (= $x9 true)))
 (let (($x176 (= $x158 true)))
 (let (($x290 (and $x176 $x21)))
 (let (($x178 (and $x290 $x282)))
 (let (($x181 (and $x178 $x74)))
 (let (($x147 (and $x181 $x121)))
 (let (($x47 (and $x147 $x24)))
 (let (($x285 (and $x47 $x49)))
 (let (($x241 (and $x285 $x275)))
 (let (($x65 (and $x241 $x111)))
 (let (($x172 (and $x65 $x200)))
 (let (($x127 (and $x172 $x105)))
 (let (($x175 (and $x127 $x52)))
 (let (($x280 (and $x175 $x107)))
 (let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x14 (ite $x187 (_ bv1 32) (_ bv0 32))))
 (let (($x70 (bvuge ?x14 (_ bv1 32))))
 (let (($x219 (and $x70 $x280)))
 (let (($x248 (forall ((input.ind-%var3071X (_ BitVec 32)) )(let ((?x125 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3071X)))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var3071X)))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3071X)))
 (=> $x39 (= ?x217 ?x125))))))
 ))
 (let (($x142 (forall ((input.ind-%var3070X (_ BitVec 32)) )(let (($x36 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3070X)))
 (let (($x39 (input.spec-%var-x-1.0.1 input.ind-%var3070X)))
 (= $x39 $x36))))
 ))
 (let (($x192 (and $x142 $x248)))
 (let (($x6 (and $x192 $x219)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x272 (and $x138 $x6)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x210 (and $x233 $x272)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x288 (and $x8 $x210)))
 (let (($x100 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd ?x232 (_ bv3 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x185 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x179 (or false (or false (and (and true (or $x204 $x185)) (or $x135 $x100))))))
 (let (($x78 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x179)))
 (let (($x281 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x179)))
 (let (($x174 (and $x281 $x288)))
 (let (($x31 (=> $x174 $x292)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x69))))
 (let ((?x256 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x255)))
 (let ((?x19 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x48 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x19)))
 (let ((?x213 (bvmul (_ bv4294967295 32) ?x48)))
 (let ((?x55 (bvneg ?x213)))
 (let (($x283 (= ?x55 ?x256)))
 (let (($x206 (= $x283 true)))
 (let ((?x87 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x87)))
 (let (($x160 (= ?x112 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x160 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x12)))
 (let (($x11 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x277 (= $x11 true)))
 (let ((?x211 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x201 (= (_ bv0 2) ?x211)))
 (let (($x230 (= $x201 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x237 (= $x7 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x30 true)))
 (let (($x58 (forall ((input.ind-%var3096X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var3096X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x254))))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var3096X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3096X)))
 (=> $x142 (= ?x176 ?x6))))))))
 ))
 (let (($x33 (forall ((input.ind-%var3095X (_ BitVec 32)) )(let (($x260 (and (bvule (_ bv0 32) input.ind-%var3095X) (bvult input.ind-%var3095X input.dst.llvm-%n))))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3095X)))
 (= $x142 $x260))))
 ))
 (let (($x205 (and $x33 $x58)))
 (let (($x75 (= $x205 true)))
 (let (($x288 (forall ((input.ind-%var3086X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var3086X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x254))))
 (let ((?x289 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3086X)))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3086X)))
 (=> $x191 (= ?x289 ?x6))))))))
 ))
 (let (($x50 (forall ((input.ind-%var3085X (_ BitVec 32)) )(let (($x260 (and (bvule (_ bv0 32) input.ind-%var3085X) (bvult input.ind-%var3085X input.dst.llvm-%n))))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3085X)))
 (= $x191 $x260))))
 ))
 (let (($x174 (and $x50 $x288)))
 (let (($x214 (= $x174 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x133 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x41 true)))
 (let (($x106 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x262 (= $x106 true)))
 (let (($x34 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 ?x245)) (bvult ?x232 (bvsub ?x232 ?x245)))))
 (let (($x265 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x93 (ite $x265 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x46 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x108 (bvmul (_ bv4 64) ?x46)))
 (let ((?x209 ((_ extract 63 32) ?x108)))
 (let (($x257 (= ?x209 ?x93)))
 (let (($x13 (and $x257 $x34)))
 (let (($x196 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x140 (and $x196 $x13)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (=> $x158 $x140)))
 (let (($x57 (= $x80 true)))
 (let (($x278 (= $x158 true)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x291)))
 (let ((?x244 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x244)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x5)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x227 $x121)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x279 $x147)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x183 $x44)))
 (let (($x243 (not $x126)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x284 $x267)))
 (let (($x153 (and (not $x82) $x243)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x252 $x165)))
 (let (($x249 (not $x258)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x89 $x26)))
 (let (($x98 (and (not $x72) $x249)))
 (let (($x134 (and (and (and (and (and (and $x98 $x153) $x208) $x96) $x269) $x261) $x182)))
 (let (($x18 (and $x134 $x24)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x239 (or false (or false (and (and true (or $x290 $x53)) (or $x177 $x169))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x239)))
 (let (($x275 (and $x181 $x18)))
 (let (($x241 (= $x275 true)))
 (let (($x111 (and $x241 $x278)))
 (let (($x25 (and $x111 $x57)))
 (let (($x235 (and $x25 $x262)))
 (let (($x27 (and $x235 $x29)))
 (let (($x35 (and $x27 $x63)))
 (let (($x207 (and $x35 $x214)))
 (let (($x77 (and $x207 $x75)))
 (let (($x81 (and $x77 $x56)))
 (let (($x122 (and $x81 $x237)))
 (let (($x218 (and $x122 $x230)))
 (let (($x129 (and $x218 $x277)))
 (let (($x263 (and $x129 $x104)))
 (let (($x180 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x71 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x71 (_ bv1 32))))
 (let (($x161 (and $x124 $x263)))
 (let (($x202 (forall ((input.ind-%var3106X (_ BitVec 32)) )(let ((?x289 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3106X)))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var3106X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3106X)))
 (=> $x142 (= ?x176 ?x289))))))
 ))
 (let (($x90 (forall ((input.ind-%var3105X (_ BitVec 32)) )(let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3105X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3105X)))
 (= $x142 $x191))))
 ))
 (let (($x295 (and $x90 $x202)))
 (let (($x99 (and $x295 $x161)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x199 (and $x184 $x99)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x234 (and $x157 $x199)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x45 $x234)))
 (let (($x240 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x232 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x167 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x281 (or false (or false (and (and true (or $x109 $x167)) (or $x168 $x240))))))
 (let (($x8 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x281)))
 (let (($x115 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x281)))
 (let (($x189 (and $x115 $x266)))
 (let (($x95 (=> $x189 $x206)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv1 32))) (select input.dst.llvm-mem ?x232))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x232 (_ bv2 32))) ?x69))))
 (let ((?x256 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x255)))
 (let ((?x19 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x48 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x19)))
 (let ((?x213 (bvmul (_ bv4294967295 32) ?x48)))
 (let ((?x55 (bvneg ?x213)))
 (let (($x283 (= ?x55 ?x256)))
 (let (($x206 (= $x283 true)))
 (let ((?x87 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x112 (bvneg ?x87)))
 (let (($x160 (= ?x112 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x160 true)))
 (let ((?x12 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x12)))
 (let (($x11 (= ?x86 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x277 (= $x11 true)))
 (let ((?x211 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x201 (= (_ bv0 2) ?x211)))
 (let (($x230 (= $x201 true)))
 (let (($x7 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x237 (= $x7 true)))
 (let (($x30 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x30 true)))
 (let (($x58 (forall ((input.ind-%var3096X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var3096X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x254))))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var3096X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3096X)))
 (=> $x142 (= ?x176 ?x6))))))))
 ))
 (let (($x33 (forall ((input.ind-%var3095X (_ BitVec 32)) )(let (($x260 (and (bvule (_ bv0 32) input.ind-%var3095X) (bvult input.ind-%var3095X input.dst.llvm-%n))))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3095X)))
 (= $x142 $x260))))
 ))
 (let (($x205 (and $x33 $x58)))
 (let (($x75 (= $x205 true)))
 (let (($x288 (forall ((input.ind-%var3086X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var3086X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x254))))
 (let ((?x289 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3086X)))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3086X)))
 (=> $x191 (= ?x289 ?x6))))))))
 ))
 (let (($x50 (forall ((input.ind-%var3085X (_ BitVec 32)) )(let (($x260 (and (bvule (_ bv0 32) input.ind-%var3085X) (bvult input.ind-%var3085X input.dst.llvm-%n))))
 (let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3085X)))
 (= $x191 $x260))))
 ))
 (let (($x174 (and $x50 $x288)))
 (let (($x214 (= $x174 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x133 true)))
 (let (($x41 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x29 (= $x41 true)))
 (let (($x106 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x262 (= $x106 true)))
 (let (($x34 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 ?x245)) (bvult ?x232 (bvsub ?x232 ?x245)))))
 (let (($x265 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x93 (ite $x265 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x46 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x108 (bvmul (_ bv4 64) ?x46)))
 (let ((?x209 ((_ extract 63 32) ?x108)))
 (let (($x257 (= ?x209 ?x93)))
 (let (($x13 (and $x257 $x34)))
 (let (($x196 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x140 (and $x196 $x13)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (=> $x158 $x140)))
 (let (($x57 (= $x80 true)))
 (let (($x278 (= $x158 true)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x291)))
 (let ((?x244 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x182 (= (_ bv0 32) ?x244)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x261 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x5)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (and $x227 $x121)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x279 $x147)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x183 $x44)))
 (let (($x243 (not $x126)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x284 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x284 $x267)))
 (let (($x153 (and (not $x82) $x243)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x252 $x165)))
 (let (($x249 (not $x258)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x89 $x26)))
 (let (($x98 (and (not $x72) $x249)))
 (let (($x134 (and (and (and (and (and (and $x98 $x153) $x208) $x96) $x269) $x261) $x182)))
 (let (($x18 (and $x134 $x24)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x239 (or false (or false (and (and true (or $x290 $x53)) (or $x177 $x169))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x239)))
 (let (($x275 (and $x181 $x18)))
 (let (($x241 (= $x275 true)))
 (let (($x111 (and $x241 $x278)))
 (let (($x25 (and $x111 $x57)))
 (let (($x235 (and $x25 $x262)))
 (let (($x27 (and $x235 $x29)))
 (let (($x35 (and $x27 $x63)))
 (let (($x207 (and $x35 $x214)))
 (let (($x77 (and $x207 $x75)))
 (let (($x81 (and $x77 $x56)))
 (let (($x122 (and $x81 $x237)))
 (let (($x218 (and $x122 $x230)))
 (let (($x129 (and $x218 $x277)))
 (let (($x263 (and $x129 $x104)))
 (let (($x180 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x71 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x71 (_ bv1 32))))
 (let (($x161 (and $x124 $x263)))
 (let (($x202 (forall ((input.ind-%var3106X (_ BitVec 32)) )(let ((?x289 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3106X)))
 (let ((?x176 (input.spec-%var-x-1.1.1 input.ind-%var3106X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3106X)))
 (=> $x142 (= ?x176 ?x289))))))
 ))
 (let (($x90 (forall ((input.ind-%var3105X (_ BitVec 32)) )(let (($x191 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3105X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var3105X)))
 (= $x142 $x191))))
 ))
 (let (($x295 (and $x90 $x202)))
 (let (($x99 (and $x295 $x161)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x199 (and $x184 $x99)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x234 (and $x157 $x199)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x266 (and $x45 $x234)))
 (let (($x240 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x232 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x167 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x281 (or false (or false (and (and true (or $x109 $x167)) (or $x168 $x240))))))
 (let (($x8 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x281)))
 (let (($x115 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x281)))
 (let (($x189 (and $x115 $x266)))
 (let (($x95 (=> $x189 $x206)))
 (not $x95)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 183 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x166 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (bvsge ?x166 (_ bv0 32))))
 (let (($x173 (= $x10 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x22)))
 (let (($x83 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x83 true)))
 (let (($x32 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x152 (= $x32 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x68 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x171 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x156 (bvsub ?x232 ?x245)))
 (let (($x164 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x156) (bvult ?x232 ?x156))))
 (let (($x248 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x223 (ite $x248 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x94 (bvmul (_ bv4 64) ?x125)))
 (let ((?x36 ((_ extract 63 32) ?x94)))
 (let (($x195 (= ?x36 ?x223)))
 (let (($x60 (and $x195 $x164)))
 (let (($x70 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x123 (and $x70 $x60)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (=> $x158 $x123)))
 (let (($x40 (= $x226 true)))
 (let (($x163 (= $x158 true)))
 (let ((?x293 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x293)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x193)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (and $x19 $x213)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x189 $x55)))
 (let (($x266 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x112 $x271)))
 (let (($x104 (not $x160)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x129 $x212)))
 (let (($x161 (and (not $x87) $x104)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x230 $x218)))
 (let (($x86 (not $x12)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x207 $x188)))
 (let (($x277 (and (not $x201) $x86)))
 (let (($x95 (and (and (and (and (and (and $x277 $x161) $x199) $x266) $x79) $x190) $x150)))
 (let (($x136 (and $x95 $x69)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x122 (or false (or false (and (and true (or $x58 $x205)) (or $x30 $x56))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x273 (and $x211 $x136)))
 (let (($x61 (= $x273 true)))
 (let ((?x272 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x210 (= (_ bv0 2) ?x272)))
 (let (($x288 (= $x210 true)))
 (let (($x175 (forall ((input.ind-%var3132X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var3132X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x108))))
 (let ((?x9 (input.spec-%var-x-1.1.1 input.ind-%var3132X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3132X)))
 (=> $x90 (= ?x9 ?x228))))))))
 ))
 (let (($x41 (forall ((input.ind-%var3131X (_ BitVec 32)) )(let (($x96 (and (bvule (_ bv0 32) input.ind-%var3131X) (bvult input.ind-%var3131X input.dst.llvm-%n))))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3131X)))
 (= $x90 $x96))))
 ))
 (let (($x220 (and $x41 $x175)))
 (let (($x254 (= $x220 true)))
 (let (($x270 (forall ((input.ind-%var3122X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var3122X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x108))))
 (let ((?x290 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3122X)))
 (let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3122X)))
 (=> $x221 (= ?x290 ?x228))))))))
 ))
 (let (($x279 (forall ((input.ind-%var3121X (_ BitVec 32)) )(let (($x96 (and (bvule (_ bv0 32) input.ind-%var3121X) (bvult input.ind-%var3121X input.dst.llvm-%n))))
 (let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3121X)))
 (= $x221 $x96))))
 ))
 (let (($x34 (and $x279 $x270)))
 (let (($x13 (= $x34 true)))
 (let (($x118 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x183 (= $x118 true)))
 (let ((?x258 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x258)))
 (let (($x284 (= ?x249 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x284 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x246 (= $x72 true)))
 (let (($x82 (and $x246 $x267)))
 (let (($x44 (and $x82 $x183)))
 (let (($x140 (and $x44 $x13)))
 (let (($x107 (and $x140 $x254)))
 (let (($x174 (and $x107 $x288)))
 (let (($x42 (and $x174 $x61)))
 (let (($x217 (and $x42 $x163)))
 (let (($x286 (and $x217 $x40)))
 (let (($x84 (and $x286 $x38)))
 (let (($x276 (and $x84 $x200)))
 (let (($x172 (and $x276 $x152)))
 (let (($x292 (and $x172 $x128)))
 (let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x181 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x181 (_ bv1 32))))
 (let (($x73 (and $x89 $x292)))
 (let (($x282 (forall ((input.ind-%var3142X (_ BitVec 32)) )(let ((?x290 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3142X)))
 (let ((?x9 (input.spec-%var-x-1.1.1 input.ind-%var3142X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3142X)))
 (=> $x90 (= ?x9 ?x290))))))
 ))
 (let (($x180 (forall ((input.ind-%var3141X (_ BitVec 32)) )(let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3141X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3141X)))
 (= $x90 $x221))))
 ))
 (let (($x178 (and $x180 $x282)))
 (let (($x66 (and $x178 $x73)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x149 $x66)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x141 (and $x138 $x131)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x76 $x141)))
 (let (($x179 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x232 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x135 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x115 (or false (or false (and (and true (or $x251 $x135)) (or $x231 $x179))))))
 (let (($x45 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x294 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x139 (and $x294 $x101)))
 (let (($x143 (=> $x139 $x173)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x166 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x10 (bvsge ?x166 (_ bv0 32))))
 (let (($x173 (= $x10 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x23 (bvneg ?x22)))
 (let (($x83 (= ?x23 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x83 true)))
 (let (($x32 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x152 (= $x32 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x68 true)))
 (let (($x171 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x38 (= $x171 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x156 (bvsub ?x232 ?x245)))
 (let (($x164 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x156) (bvult ?x232 ?x156))))
 (let (($x248 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x223 (ite $x248 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x125 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x94 (bvmul (_ bv4 64) ?x125)))
 (let ((?x36 ((_ extract 63 32) ?x94)))
 (let (($x195 (= ?x36 ?x223)))
 (let (($x60 (and $x195 $x164)))
 (let (($x70 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x123 (and $x70 $x60)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x226 (=> $x158 $x123)))
 (let (($x40 (= $x226 true)))
 (let (($x163 (= $x158 true)))
 (let ((?x293 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x69 (= (_ bv0 32) ?x293)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x193)))
 (let ((?x148 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x48 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x48)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (and $x19 $x213)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x189 $x55)))
 (let (($x266 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x112 $x271)))
 (let (($x104 (not $x160)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x129 $x212)))
 (let (($x161 (and (not $x87) $x104)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x230 $x218)))
 (let (($x86 (not $x12)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x207 $x188)))
 (let (($x277 (and (not $x201) $x86)))
 (let (($x95 (and (and (and (and (and (and $x277 $x161) $x199) $x266) $x79) $x190) $x150)))
 (let (($x136 (and $x95 $x69)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x114 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x114)))
 (let (($x205 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x114)))
 (let (($x122 (or false (or false (and (and true (or $x58 $x205)) (or $x30 $x56))))))
 (let (($x211 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x122)))
 (let (($x273 (and $x211 $x136)))
 (let (($x61 (= $x273 true)))
 (let ((?x272 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x210 (= (_ bv0 2) ?x272)))
 (let (($x288 (= $x210 true)))
 (let (($x175 (forall ((input.ind-%var3132X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var3132X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x108))))
 (let ((?x9 (input.spec-%var-x-1.1.1 input.ind-%var3132X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3132X)))
 (=> $x90 (= ?x9 ?x228))))))))
 ))
 (let (($x41 (forall ((input.ind-%var3131X (_ BitVec 32)) )(let (($x96 (and (bvule (_ bv0 32) input.ind-%var3131X) (bvult input.ind-%var3131X input.dst.llvm-%n))))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3131X)))
 (= $x90 $x96))))
 ))
 (let (($x220 (and $x41 $x175)))
 (let (($x254 (= $x220 true)))
 (let (($x270 (forall ((input.ind-%var3122X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var3122X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x108))))
 (let ((?x290 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3122X)))
 (let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3122X)))
 (=> $x221 (= ?x290 ?x228))))))))
 ))
 (let (($x279 (forall ((input.ind-%var3121X (_ BitVec 32)) )(let (($x96 (and (bvule (_ bv0 32) input.ind-%var3121X) (bvult input.ind-%var3121X input.dst.llvm-%n))))
 (let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3121X)))
 (= $x221 $x96))))
 ))
 (let (($x34 (and $x279 $x270)))
 (let (($x13 (= $x34 true)))
 (let (($x118 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x183 (= $x118 true)))
 (let ((?x258 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x249 (bvneg ?x258)))
 (let (($x284 (= ?x249 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x267 (= $x284 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x246 (= $x72 true)))
 (let (($x82 (and $x246 $x267)))
 (let (($x44 (and $x82 $x183)))
 (let (($x140 (and $x44 $x13)))
 (let (($x107 (and $x140 $x254)))
 (let (($x174 (and $x107 $x288)))
 (let (($x42 (and $x174 $x61)))
 (let (($x217 (and $x42 $x163)))
 (let (($x286 (and $x217 $x40)))
 (let (($x84 (and $x286 $x38)))
 (let (($x276 (and $x84 $x200)))
 (let (($x172 (and $x276 $x152)))
 (let (($x292 (and $x172 $x128)))
 (let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x181 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x181 (_ bv1 32))))
 (let (($x73 (and $x89 $x292)))
 (let (($x282 (forall ((input.ind-%var3142X (_ BitVec 32)) )(let ((?x290 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3142X)))
 (let ((?x9 (input.spec-%var-x-1.1.1 input.ind-%var3142X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3142X)))
 (=> $x90 (= ?x9 ?x290))))))
 ))
 (let (($x180 (forall ((input.ind-%var3141X (_ BitVec 32)) )(let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3141X)))
 (let (($x90 (input.spec-%var-x-1.0.1 input.ind-%var3141X)))
 (= $x90 $x221))))
 ))
 (let (($x178 (and $x180 $x282)))
 (let (($x66 (and $x178 $x73)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x131 (and $x149 $x66)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x141 (and $x138 $x131)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x101 (and $x76 $x141)))
 (let (($x179 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x232 (_ bv3 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x135 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x115 (or false (or false (and (and true (or $x251 $x135)) (or $x231 $x179))))))
 (let (($x45 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x294 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x139 (and $x294 $x101)))
 (let (($x143 (=> $x139 $x173)))
 (not $x143))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (bvule ?x253 (_ bv4294967294 32))))
 (let (($x124 (= $x120 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x88)))
 (let (($x97 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x268 (= $x97 true)))
 (let (($x280 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x280 true)))
 (let (($x63 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x63 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x80 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x244 (bvsub ?x232 ?x245)))
 (let (($x159 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x244) (bvult ?x232 ?x244))))
 (let (($x261 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x64 (ite $x261 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x275 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvmul (_ bv4 64) ?x275)))
 (let ((?x291 ((_ extract 63 32) ?x134)))
 (let (($x170 (= ?x291 ?x64)))
 (let (($x208 (and $x170 $x159)))
 (let (($x285 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x278 (and $x285 $x208)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (=> $x158 $x278)))
 (let (($x111 (= $x5 true)))
 (let (($x126 (= $x158 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x53)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x214)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x139 $x10)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x101 $x173)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x172 $x22)))
 (let (($x83 (not $x23)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x276 $x32)))
 (let (($x292 (and (not $x152) $x83)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x286 $x171)))
 (let (($x84 (not $x38)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x187 $x70)))
 (let (($x200 (and (not $x40) $x84)))
 (let (($x21 (and (and (and (and (and (and $x200 $x292) $x66) $x141) $x143) $x198) $x236)))
 (let (($x191 (and $x21 $x176)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x60 (or false (or false (and (and true (or $x36 $x248)) (or $x20 $x156))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x60)))
 (let (($x202 (and $x226 $x191)))
 (let (($x227 (= $x202 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x42 (= (_ bv0 2) ?x61)))
 (let (($x163 (= $x42 true)))
 (let (($x95 (forall ((input.ind-%var3167X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var3167X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x237))))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var3167X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3167X)))
 (=> $x180 (= ?x26 ?x11))))))))
 ))
 (let (($x161 (forall ((input.ind-%var3166X (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) input.ind-%var3166X) (bvult input.ind-%var3166X input.dst.llvm-%n))))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3166X)))
 (= $x180 $x13))))
 ))
 (let (($x293 (and $x161 $x95)))
 (let (($x69 (= $x293 true)))
 (let (($x12 (forall ((input.ind-%var3157X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var3157X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x237))))
 (let ((?x252 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3157X)))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3157X)))
 (=> $x177 (= ?x252 ?x11))))))))
 ))
 (let (($x235 (forall ((input.ind-%var3156X (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) input.ind-%var3156X) (bvult input.ind-%var3156X input.dst.llvm-%n))))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3156X)))
 (= $x177 $x13))))
 ))
 (let (($x86 (and $x235 $x12)))
 (let (($x277 (= $x86 true)))
 (let (($x265 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x265 true)))
 (let ((?x65 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x65)))
 (let (($x257 (= ?x144 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x182 (= $x257 true)))
 (let (($x96 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x96 true)))
 (let (($x209 (and $x49 $x182)))
 (let (($x46 (and $x209 $x17)))
 (let (($x129 (and $x46 $x277)))
 (let (($x136 (and $x129 $x69)))
 (let (($x217 (and $x136 $x163)))
 (let (($x121 (and $x217 $x227)))
 (let (($x153 (and $x121 $x126)))
 (let (($x133 (and $x153 $x111)))
 (let (($x287 (and $x133 $x25)))
 (let (($x127 (and $x287 $x35)))
 (let (($x264 (and $x127 $x50)))
 (let (($x105 (and $x264 $x268)))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x44 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x44 (_ bv1 32))))
 (let (($x219 (and $x51 $x105)))
 (let (($x267 (forall ((input.ind-%var3177X (_ BitVec 32)) )(let ((?x252 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3177X)))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var3177X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3177X)))
 (=> $x180 (= ?x26 ?x252))))))
 ))
 (let (($x119 (forall ((input.ind-%var3176X (_ BitVec 32)) )(let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3176X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3176X)))
 (= $x180 $x177))))
 ))
 (let (($x82 (and $x119 $x267)))
 (let (($x57 (and $x82 $x219)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x192 $x57)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x262 (and $x184 $x106)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x233 $x262)))
 (let (($x281 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x232 (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x168 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x294 (or false (or false (and (and true (or $x155 $x168)) (or $x78 $x281))))))
 (let (($x76 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x294)))
 (let (($x215 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x294)))
 (let (($x27 (and $x215 $x194)))
 (let (($x54 (=> $x27 $x124)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x253 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (bvule ?x253 (_ bv4294967294 32))))
 (let (($x124 (= $x120 true)))
 (let ((?x88 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x88)))
 (let (($x97 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x268 (= $x97 true)))
 (let (($x280 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x50 (= $x280 true)))
 (let (($x63 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (= $x63 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x80 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x244 (bvsub ?x232 ?x245)))
 (let (($x159 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x244) (bvult ?x232 ?x244))))
 (let (($x261 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x64 (ite $x261 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x275 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvmul (_ bv4 64) ?x275)))
 (let ((?x291 ((_ extract 63 32) ?x134)))
 (let (($x170 (= ?x291 ?x64)))
 (let (($x208 (and $x170 $x159)))
 (let (($x285 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x278 (and $x285 $x208)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (=> $x158 $x278)))
 (let (($x111 (= $x5 true)))
 (let (($x126 (= $x158 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x53)))
 (let ((?x214 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x214)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x139 $x10)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (and $x101 $x173)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x172 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x172 $x22)))
 (let (($x83 (not $x23)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x276 $x32)))
 (let (($x292 (and (not $x152) $x83)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x286 $x171)))
 (let (($x84 (not $x38)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x187 $x70)))
 (let (($x200 (and (not $x40) $x84)))
 (let (($x21 (and (and (and (and (and (and $x200 $x292) $x66) $x141) $x143) $x198) $x236)))
 (let (($x191 (and $x21 $x176)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x60 (or false (or false (and (and true (or $x36 $x248)) (or $x20 $x156))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x60)))
 (let (($x202 (and $x226 $x191)))
 (let (($x227 (= $x202 true)))
 (let ((?x61 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x42 (= (_ bv0 2) ?x61)))
 (let (($x163 (= $x42 true)))
 (let (($x95 (forall ((input.ind-%var3167X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var3167X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x237))))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var3167X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3167X)))
 (=> $x180 (= ?x26 ?x11))))))))
 ))
 (let (($x161 (forall ((input.ind-%var3166X (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) input.ind-%var3166X) (bvult input.ind-%var3166X input.dst.llvm-%n))))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3166X)))
 (= $x180 $x13))))
 ))
 (let (($x293 (and $x161 $x95)))
 (let (($x69 (= $x293 true)))
 (let (($x12 (forall ((input.ind-%var3157X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var3157X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x237))))
 (let ((?x252 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3157X)))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3157X)))
 (=> $x177 (= ?x252 ?x11))))))))
 ))
 (let (($x235 (forall ((input.ind-%var3156X (_ BitVec 32)) )(let (($x13 (and (bvule (_ bv0 32) input.ind-%var3156X) (bvult input.ind-%var3156X input.dst.llvm-%n))))
 (let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3156X)))
 (= $x177 $x13))))
 ))
 (let (($x86 (and $x235 $x12)))
 (let (($x277 (= $x86 true)))
 (let (($x265 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x17 (= $x265 true)))
 (let ((?x65 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x144 (bvneg ?x65)))
 (let (($x257 (= ?x144 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x182 (= $x257 true)))
 (let (($x96 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x49 (= $x96 true)))
 (let (($x209 (and $x49 $x182)))
 (let (($x46 (and $x209 $x17)))
 (let (($x129 (and $x46 $x277)))
 (let (($x136 (and $x129 $x69)))
 (let (($x217 (and $x136 $x163)))
 (let (($x121 (and $x217 $x227)))
 (let (($x153 (and $x121 $x126)))
 (let (($x133 (and $x153 $x111)))
 (let (($x287 (and $x133 $x25)))
 (let (($x127 (and $x287 $x35)))
 (let (($x264 (and $x127 $x50)))
 (let (($x105 (and $x264 $x268)))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x44 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x44 (_ bv1 32))))
 (let (($x219 (and $x51 $x105)))
 (let (($x267 (forall ((input.ind-%var3177X (_ BitVec 32)) )(let ((?x252 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3177X)))
 (let ((?x26 (input.spec-%var-x-1.1.1 input.ind-%var3177X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3177X)))
 (=> $x180 (= ?x26 ?x252))))))
 ))
 (let (($x119 (forall ((input.ind-%var3176X (_ BitVec 32)) )(let (($x177 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3176X)))
 (let (($x180 (input.spec-%var-x-1.0.1 input.ind-%var3176X)))
 (= $x180 $x177))))
 ))
 (let (($x82 (and $x119 $x267)))
 (let (($x57 (and $x82 $x219)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x192 $x57)))
 (let (($x184 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x262 (and $x184 $x106)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x233 $x262)))
 (let (($x281 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x232 (_ bv3 32))))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x168 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x294 (or false (or false (and (and true (or $x155 $x168)) (or $x78 $x281))))))
 (let (($x76 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x294)))
 (let (($x215 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x294)))
 (let (($x27 (and $x215 $x194)))
 (let (($x54 (=> $x27 $x124)))
 (not $x54))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 83
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x258 (bvule ?x206 (_ bv4294967294 32))))
 (let (($x181 (= $x258 true)))
 (let ((?x256 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x256)))
 (let (($x266 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x266 true)))
 (let (($x283 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x48 (= $x283 true)))
 (let (($x255 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x255 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x117)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x107)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x254 $x114)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x220 $x174)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x90 $x290)))
 (let (($x221 (not $x246)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x72 $x239)))
 (let (($x41 (and (not $x89) $x221)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x116 $x15)))
 (let (($x169 (not $x225)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x280 $x50)))
 (let (($x9 (and (not $x54) $x169)))
 (let (($x75 (and (and (and (and (and (and $x9 $x41) $x196) $x228) $x33) $x272) $x210)))
 (let (($x199 (and $x75 $x58)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x260)))
 (let (($x253 (or false (or false (and (and true (or $x97 $x268)) (or $x57 $x106))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x253)))
 (let (($x212 (and $x124 $x199)))
 (let (($x263 (= $x212 true)))
 (let (($x287 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x63 (= $x287 true)))
 (let ((?x111 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x133 (= (_ bv0 2) ?x111)))
 (let (($x80 (= $x133 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x159 true)))
 (let (($x24 (forall ((input.ind-%var3202X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var3202X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var3202X)))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3202X)))
 (=> $x119 (= ?x85 ?x131))))))))
 ))
 (let (($x236 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x36 (and (bvule (_ bv0 32) input.ind-%var3201X) (bvult input.ind-%var3201X input.dst.llvm-%n))))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3201X)))
 (= $x119 $x36))))
 ))
 (let (($x244 (and $x236 $x24)))
 (let (($x241 (= $x244 true)))
 (let (($x101 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var3192X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3192X)))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3192X)))
 (=> $x98 (= ?x279 ?x131))))))))
 ))
 (let (($x223 (forall ((input.ind-%var3191X (_ BitVec 32)) )(let (($x36 (and (bvule (_ bv0 32) input.ind-%var3191X) (bvult input.ind-%var3191X input.dst.llvm-%n))))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3191X)))
 (= $x98 $x36))))
 ))
 (let (($x139 (and $x223 $x101)))
 (let (($x166 (= $x139 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x69 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x129)))
 (let (($x193 (= ?x104 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x193 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x81 (bvsub ?x232 ?x245)))
 (let (($x207 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x81) (bvult ?x232 ?x81))))
 (let (($x201 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x122 (ite $x201 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x77 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x30 (bvmul (_ bv4 64) ?x77)))
 (let ((?x188 ((_ extract 63 32) ?x30)))
 (let (($x211 (= ?x188 ?x122)))
 (let (($x11 (and $x211 $x207)))
 (let (($x235 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x230 (and $x235 $x11)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x158 $x230)))
 (let (($x12 (= $x218 true)))
 (let (($x270 (= $x158 true)))
 (let (($x86 (and $x270 $x12)))
 (let (($x95 (and $x86 $x150)))
 (let (($x273 (and $x95 $x136)))
 (let (($x10 (and $x273 $x166)))
 (let (($x243 (and $x10 $x241)))
 (let (($x278 (and $x243 $x208)))
 (let (($x25 (and $x278 $x80)))
 (let (($x35 (and $x25 $x63)))
 (let (($x112 (and $x35 $x263)))
 (let (($x79 (and $x112 $x234)))
 (let (($x213 (and $x79 $x48)))
 (let (($x55 (and $x213 $x19)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x46 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x46 (_ bv1 32))))
 (let (($x148 (and $x34 $x55)))
 (let (($x182 (forall ((input.ind-%var3212X (_ BitVec 32)) )(let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3212X)))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var3212X)))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3212X)))
 (=> $x119 (= ?x85 ?x279))))))
 ))
 (let (($x118 (forall ((input.ind-%var3211X (_ BitVec 32)) )(let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3211X)))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3211X)))
 (= $x119 $x98))))
 ))
 (let (($x209 (and $x118 $x182)))
 (let (($x87 (and $x209 $x148)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x295 $x87)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x160 (and $x149 $x271)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x157 $x160)))
 (let (($x115 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd ?x232 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x231 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x215 (or false (or false (and (and true (or $x100 $x231)) (or $x8 $x115))))))
 (let (($x233 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x215)))
 (let (($x185 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x215)))
 (let (($x99 (and $x185 $x190)))
 (let (($x249 (=> $x99 $x181)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x206 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x258 (bvule ?x206 (_ bv4294967294 32))))
 (let (($x181 (= $x258 true)))
 (let ((?x256 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x189 (bvneg ?x256)))
 (let (($x266 (= ?x189 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x19 (= $x266 true)))
 (let (($x283 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x48 (= $x283 true)))
 (let (($x255 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x234 (= $x255 true)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x117)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x107)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x197)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x254 $x114)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (and $x220 $x174)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x246 (and $x90 $x290)))
 (let (($x221 (not $x246)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x72 $x239)))
 (let (($x41 (and (not $x89) $x221)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x116 $x15)))
 (let (($x169 (not $x225)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x280 $x50)))
 (let (($x9 (and (not $x54) $x169)))
 (let (($x75 (and (and (and (and (and (and $x9 $x41) $x196) $x228) $x33) $x272) $x210)))
 (let (($x199 (and $x75 $x58)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x260 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x260)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x260)))
 (let (($x253 (or false (or false (and (and true (or $x97 $x268)) (or $x57 $x106))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x253)))
 (let (($x212 (and $x124 $x199)))
 (let (($x263 (= $x212 true)))
 (let (($x287 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x63 (= $x287 true)))
 (let ((?x111 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x133 (= (_ bv0 2) ?x111)))
 (let (($x80 (= $x133 true)))
 (let (($x159 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x208 (= $x159 true)))
 (let (($x24 (forall ((input.ind-%var3202X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var3202X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var3202X)))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3202X)))
 (=> $x119 (= ?x85 ?x131))))))))
 ))
 (let (($x236 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let (($x36 (and (bvule (_ bv0 32) input.ind-%var3201X) (bvult input.ind-%var3201X input.dst.llvm-%n))))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3201X)))
 (= $x119 $x36))))
 ))
 (let (($x244 (and $x236 $x24)))
 (let (($x241 (= $x244 true)))
 (let (($x101 (forall ((input.ind-%var3192X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var3192X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3192X)))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3192X)))
 (=> $x98 (= ?x279 ?x131))))))))
 ))
 (let (($x223 (forall ((input.ind-%var3191X (_ BitVec 32)) )(let (($x36 (and (bvule (_ bv0 32) input.ind-%var3191X) (bvult input.ind-%var3191X input.dst.llvm-%n))))
 (let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3191X)))
 (= $x98 $x36))))
 ))
 (let (($x139 (and $x223 $x101)))
 (let (($x166 (= $x139 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x69 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x129)))
 (let (($x193 (= ?x104 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x150 (= $x193 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x81 (bvsub ?x232 ?x245)))
 (let (($x207 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x81) (bvult ?x232 ?x81))))
 (let (($x201 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x122 (ite $x201 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x77 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x30 (bvmul (_ bv4 64) ?x77)))
 (let ((?x188 ((_ extract 63 32) ?x30)))
 (let (($x211 (= ?x188 ?x122)))
 (let (($x11 (and $x211 $x207)))
 (let (($x235 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x230 (and $x235 $x11)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x158 $x230)))
 (let (($x12 (= $x218 true)))
 (let (($x270 (= $x158 true)))
 (let (($x86 (and $x270 $x12)))
 (let (($x95 (and $x86 $x150)))
 (let (($x273 (and $x95 $x136)))
 (let (($x10 (and $x273 $x166)))
 (let (($x243 (and $x10 $x241)))
 (let (($x278 (and $x243 $x208)))
 (let (($x25 (and $x278 $x80)))
 (let (($x35 (and $x25 $x63)))
 (let (($x112 (and $x35 $x263)))
 (let (($x79 (and $x112 $x234)))
 (let (($x213 (and $x79 $x48)))
 (let (($x55 (and $x213 $x19)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x46 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x34 (bvuge ?x46 (_ bv1 32))))
 (let (($x148 (and $x34 $x55)))
 (let (($x182 (forall ((input.ind-%var3212X (_ BitVec 32)) )(let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3212X)))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var3212X)))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3212X)))
 (=> $x119 (= ?x85 ?x279))))))
 ))
 (let (($x118 (forall ((input.ind-%var3211X (_ BitVec 32)) )(let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3211X)))
 (let (($x119 (input.spec-%var-x-1.0.1 input.ind-%var3211X)))
 (= $x119 $x98))))
 ))
 (let (($x209 (and $x118 $x182)))
 (let (($x87 (and $x209 $x148)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x271 (and $x295 $x87)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x160 (and $x149 $x271)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x157 $x160)))
 (let (($x115 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd ?x232 (_ bv3 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x231 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x215 (or false (or false (and (and true (or $x100 $x231)) (or $x8 $x115))))))
 (let (($x233 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x215)))
 (let (($x185 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x215)))
 (let (($x99 (and $x185 $x190)))
 (let (($x249 (=> $x99 $x181)))
 (not $x249))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 84
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (bvule ?x261 input.dst.llvm-%n)))
 (let (($x44 (= $x65 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x121)))
 (let (($x227 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x227 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x47 (= $x275 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x191 true)))
 (let (($x176 (forall ((input.ind-%var3237X (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul input.ind-%var3237X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x258))))
 (let ((?x270 (input.spec-%var-x-1.1.1 input.ind-%var3237X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3237X)))
 (=> $x118 (= ?x270 ?x284))))))))
 ))
 (let (($x163 (forall ((input.ind-%var3236X (_ BitVec 32)) )(let (($x107 (and (bvule (_ bv0 32) input.ind-%var3236X) (bvult input.ind-%var3236X input.dst.llvm-%n))))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3236X)))
 (= $x118 $x107))))
 ))
 (let (($x173 (and $x163 $x176)))
 (let (($x142 (= $x173 true)))
 (let (($x96 (forall ((input.ind-%var3227X (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul input.ind-%var3227X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x258))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3227X)))
 (let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3227X)))
 (=> $x93 (= ?x235 ?x284))))))))
 ))
 (let (($x75 (forall ((input.ind-%var3226X (_ BitVec 32)) )(let (($x107 (and (bvule (_ bv0 32) input.ind-%var3226X) (bvult input.ind-%var3226X input.dst.llvm-%n))))
 (let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3226X)))
 (= $x93 $x107))))
 ))
 (let (($x183 (and $x75 $x96)))
 (let (($x51 (= $x183 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x154 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x290 (bvsub ?x232 ?x245)))
 (let (($x108 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x290) (bvult ?x232 ?x290))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x282 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvmul (_ bv4 64) ?x9)))
 (let ((?x239 ((_ extract 63 32) ?x72)))
 (let (($x90 (= ?x239 ?x282)))
 (let (($x52 (and $x90 $x108)))
 (let (($x225 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x196 (and $x225 $x52)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (=> $x158 $x196)))
 (let (($x186 (= $x92 true)))
 (let (($x54 (= $x158 true)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x268)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x260)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x287 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x287)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x25 $x63)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x80 $x35)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x24 $x244)))
 (let (($x243 (not $x241)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x236 $x64)))
 (let (($x208 (and (not $x170) $x243)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x132 $x101)))
 (let (($x166 (not $x139)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x36 $x248)))
 (let (($x214 (and (not $x141) $x166)))
 (let (($x27 (and (and (and (and (and (and $x214 $x208) $x5) $x133) $x264) $x120) $x97)))
 (let (($x253 (and $x27 $x105)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x83 (or false (or false (and (and true (or $x128 $x66)) (or $x292 $x74))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x124 (and $x131 $x253)))
 (let (($x280 (= $x124 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x136 (= (_ bv0 2) ?x69)))
 (let (($x273 (= $x136 true)))
 (let (($x193 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x150 (= $x193 true)))
 (let ((?x12 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x12)))
 (let (($x129 (= ?x86 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x129 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x11 (= $x207 true)))
 (let (($x161 (and $x11 $x104)))
 (let (($x95 (and $x161 $x150)))
 (let (($x94 (and $x95 $x273)))
 (let (($x50 (and $x94 $x280)))
 (let (($x165 (and $x50 $x54)))
 (let (($x228 (and $x165 $x186)))
 (let (($x254 (and $x228 $x220)))
 (let (($x180 (and $x254 $x51)))
 (let (($x130 (and $x180 $x142)))
 (let (($x18 (and $x130 $x202)))
 (let (($x269 (and $x18 $x47)))
 (let (($x285 (and $x269 $x153)))
 (let (($x7 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x81 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x81 (_ bv1 32))))
 (let (($x134 (and $x56 $x285)))
 (let (($x288 (forall ((input.ind-%var3247X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3247X)))
 (let ((?x270 (input.spec-%var-x-1.1.1 input.ind-%var3247X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3247X)))
 (=> $x118 (= ?x270 ?x235))))))
 ))
 (let (($x265 (forall ((input.ind-%var3246X (_ BitVec 32)) )(let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3246X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3246X)))
 (= $x118 $x93))))
 ))
 (let (($x122 (and $x265 $x288)))
 (let (($x143 (and $x122 $x134)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x198 (and $x178 $x143)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x289 (and $x192 $x198)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x138 $x289)))
 (let (($x294 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd ?x232 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x78 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x185 (or false (or false (and (and true (or $x240 $x78)) (or $x45 $x294))))))
 (let (($x157 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x185)))
 (let (($x167 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x185)))
 (let (($x53 (and $x167 $x291)))
 (let (($x144 (=> $x53 $x44)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x261 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x65 (bvule ?x261 input.dst.llvm-%n)))
 (let (($x44 (= $x65 true)))
 (let ((?x121 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x121)))
 (let (($x227 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x227 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x47 (= $x275 true)))
 (let (($x191 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (= $x191 true)))
 (let (($x176 (forall ((input.ind-%var3237X (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul input.ind-%var3237X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x258))))
 (let ((?x270 (input.spec-%var-x-1.1.1 input.ind-%var3237X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3237X)))
 (=> $x118 (= ?x270 ?x284))))))))
 ))
 (let (($x163 (forall ((input.ind-%var3236X (_ BitVec 32)) )(let (($x107 (and (bvule (_ bv0 32) input.ind-%var3236X) (bvult input.ind-%var3236X input.dst.llvm-%n))))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3236X)))
 (= $x118 $x107))))
 ))
 (let (($x173 (and $x163 $x176)))
 (let (($x142 (= $x173 true)))
 (let (($x96 (forall ((input.ind-%var3227X (_ BitVec 32)) )(let ((?x160 (bvadd (bvmul input.ind-%var3227X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x258))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3227X)))
 (let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3227X)))
 (=> $x93 (= ?x235 ?x284))))))))
 ))
 (let (($x75 (forall ((input.ind-%var3226X (_ BitVec 32)) )(let (($x107 (and (bvule (_ bv0 32) input.ind-%var3226X) (bvult input.ind-%var3226X input.dst.llvm-%n))))
 (let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3226X)))
 (= $x93 $x107))))
 ))
 (let (($x183 (and $x75 $x96)))
 (let (($x51 (= $x183 true)))
 (let (($x154 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x154 true)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let ((?x290 (bvsub ?x232 ?x245)))
 (let (($x108 (ite (bvsge ?x245 (_ bv0 32)) (bvuge ?x232 ?x290) (bvult ?x232 ?x290))))
 (let (($x89 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x282 (ite $x89 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x9 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvmul (_ bv4 64) ?x9)))
 (let ((?x239 ((_ extract 63 32) ?x72)))
 (let (($x90 (= ?x239 ?x282)))
 (let (($x52 (and $x90 $x108)))
 (let (($x225 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x196 (and $x225 $x52)))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (=> $x158 $x196)))
 (let (($x186 (= $x92 true)))
 (let (($x54 (= $x158 true)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x105 (= (_ bv0 32) ?x268)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x260)))
 (let ((?x88 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x88)))
 (let ((?x287 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x287)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x25 $x63)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x80 $x35)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x241 (and $x24 $x244)))
 (let (($x243 (not $x241)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x236 $x64)))
 (let (($x208 (and (not $x170) $x243)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (and $x132 $x101)))
 (let (($x166 (not $x139)))
 (let (($x248 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (and $x36 $x248)))
 (let (($x214 (and (not $x141) $x166)))
 (let (($x27 (and (and (and (and (and (and $x214 $x208) $x5) $x133) $x264) $x120) $x97)))
 (let (($x253 (and $x27 $x105)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x83 (or false (or false (and (and true (or $x128 $x66)) (or $x292 $x74))))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x124 (and $x131 $x253)))
 (let (($x280 (= $x124 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x136 (= (_ bv0 2) ?x69)))
 (let (($x273 (= $x136 true)))
 (let (($x193 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x150 (= $x193 true)))
 (let ((?x12 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x86 (bvneg ?x12)))
 (let (($x129 (= ?x86 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x104 (= $x129 true)))
 (let (($x207 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x11 (= $x207 true)))
 (let (($x161 (and $x11 $x104)))
 (let (($x95 (and $x161 $x150)))
 (let (($x94 (and $x95 $x273)))
 (let (($x50 (and $x94 $x280)))
 (let (($x165 (and $x50 $x54)))
 (let (($x228 (and $x165 $x186)))
 (let (($x254 (and $x228 $x220)))
 (let (($x180 (and $x254 $x51)))
 (let (($x130 (and $x180 $x142)))
 (let (($x18 (and $x130 $x202)))
 (let (($x269 (and $x18 $x47)))
 (let (($x285 (and $x269 $x153)))
 (let (($x7 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x81 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x56 (bvuge ?x81 (_ bv1 32))))
 (let (($x134 (and $x56 $x285)))
 (let (($x288 (forall ((input.ind-%var3247X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3247X)))
 (let ((?x270 (input.spec-%var-x-1.1.1 input.ind-%var3247X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3247X)))
 (=> $x118 (= ?x270 ?x235))))))
 ))
 (let (($x265 (forall ((input.ind-%var3246X (_ BitVec 32)) )(let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3246X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var3246X)))
 (= $x118 $x93))))
 ))
 (let (($x122 (and $x265 $x288)))
 (let (($x143 (and $x122 $x134)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x198 (and $x178 $x143)))
 (let (($x192 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x289 (and $x192 $x198)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x291 (and $x138 $x289)))
 (let (($x294 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd ?x232 (_ bv3 32))))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x78 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x185 (or false (or false (and (and true (or $x240 $x78)) (or $x45 $x294))))))
 (let (($x157 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x185)))
 (let (($x167 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x185)))
 (let (($x53 (and $x167 $x291)))
 (let (($x144 (=> $x53 $x44)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 85
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x148 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x148 (_ bv1 32))))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x205 (not $x158)))
 (let (($x87 (or $x205 $x58)))
 (let (($x164 (= $x87 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x19)))
 (let (($x256 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (= $x256 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x112 (= $x263 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x197 true)))
 (let (($x98 (forall ((input.ind-%var3272X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var3272X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x163))))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var3272X)))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3272X)))
 (=> $x265 (= ?x237 ?x130))))))))
 ))
 (let (($x198 (forall ((input.ind-%var3271X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var3271X) (bvult input.ind-%var3271X input.dst.llvm-%n))))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3271X)))
 (= $x265 $x254))))
 ))
 (let (($x182 (and $x198 $x98)))
 (let (($x117 (= $x182 true)))
 (let (($x18 (forall ((input.ind-%var3262X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var3262X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x163))))
 (let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3262X)))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3262X)))
 (=> $x188 (= ?x230 ?x130))))))))
 ))
 (let (($x272 (forall ((input.ind-%var3261X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var3261X) (bvult input.ind-%var3261X input.dst.llvm-%n))))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3261X)))
 (= $x188 $x254))))
 ))
 (let (($x275 (and $x272 $x18)))
 (let (($x47 (= $x275 true)))
 (let (($x290 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x290 true)))
 (let (($x282 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x90 (= $x282 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x72 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x27)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x260)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x35)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (and $x63 $x264)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x287 $x262)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x208 $x219)))
 (let (($x5 (not $x278)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x244 $x241)))
 (let (($x111 (and (not $x243) $x5)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x214 $x236)))
 (let (($x170 (not $x64)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x66 $x71)))
 (let (($x24 (and (not $x166) $x170)))
 (let (($x54 (and (and (and (and (and (and $x24 $x111) $x106) $x25) $x88) $x194) $x97)))
 (let (($x165 (and $x54 $x268)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x132 (or false (or false (and (and true (or $x22 $x23)) (or $x131 $x36))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x116 (and $x139 $x165)))
 (let (($x15 (= $x116 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x223)))
 (let (($x73 (= $x216 true)))
 (let ((?x95 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x293 (bvneg ?x95)))
 (let (($x136 (= ?x293 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x136 true)))
 (let (($x152 (and $x273 $x73)))
 (let (($x225 (and $x152 $x15)))
 (let (($x89 (and $x225 $x239)))
 (let (($x246 (and $x89 $x90)))
 (let (($x41 (and $x246 $x221)))
 (let (($x269 (and $x41 $x47)))
 (let (($x199 (and $x269 $x117)))
 (let (($x33 (and $x199 $x174)))
 (let (($x266 (and $x33 $x112)))
 (let (($x79 (and $x266 $x234)))
 (let (($x104 (forall ((input.ind-%var3282X (_ BitVec 32)) )(let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3282X)))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var3282X)))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3282X)))
 (=> $x265 (= ?x237 ?x230))))))
 ))
 (let (($x211 (forall ((input.ind-%var3281X (_ BitVec 32)) )(let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3281X)))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3281X)))
 (= $x265 $x188))))
 ))
 (let (($x161 (and $x211 $x104)))
 (let (($x255 (and $x161 $x79)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x283 (and $x82 $x255)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x295 $x283)))
 (let (($x184 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x184 $x189)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let (($x215 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd ?x232 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x8 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x167 (or false (or false (and (and true (or $x179 $x8)) (or $x76 $x215))))))
 (let (($x138 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x167)))
 (let (($x135 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x167)))
 (let (($x114 (and $x135 $x55)))
 (let (($x252 (=> $x114 $x164)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x6 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x148 (ite $x6 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x148 (_ bv1 32))))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x205 (not $x158)))
 (let (($x87 (or $x205 $x58)))
 (let (($x164 (= $x87 true)))
 (let ((?x19 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x213 (bvneg ?x19)))
 (let (($x256 (= ?x213 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (= $x256 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x112 (= $x263 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x174 (= $x197 true)))
 (let (($x98 (forall ((input.ind-%var3272X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var3272X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x163))))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var3272X)))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3272X)))
 (=> $x265 (= ?x237 ?x130))))))))
 ))
 (let (($x198 (forall ((input.ind-%var3271X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var3271X) (bvult input.ind-%var3271X input.dst.llvm-%n))))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3271X)))
 (= $x265 $x254))))
 ))
 (let (($x182 (and $x198 $x98)))
 (let (($x117 (= $x182 true)))
 (let (($x18 (forall ((input.ind-%var3262X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var3262X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x163))))
 (let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3262X)))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3262X)))
 (=> $x188 (= ?x230 ?x130))))))))
 ))
 (let (($x272 (forall ((input.ind-%var3261X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var3261X) (bvult input.ind-%var3261X input.dst.llvm-%n))))
 (let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3261X)))
 (= $x188 $x254))))
 ))
 (let (($x275 (and $x272 $x18)))
 (let (($x47 (= $x275 true)))
 (let (($x290 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x221 (= $x290 true)))
 (let (($x282 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x90 (= $x282 true)))
 (let (($x72 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x72 true)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x27)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x97 (= (_ bv0 32) ?x260)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let ((?x35 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x35)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (and $x63 $x264)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x287 $x262)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x208 $x219)))
 (let (($x5 (not $x278)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x244 $x241)))
 (let (($x111 (and (not $x243) $x5)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x214 $x236)))
 (let (($x170 (not $x64)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x66 $x71)))
 (let (($x24 (and (not $x166) $x170)))
 (let (($x54 (and (and (and (and (and (and $x24 $x111) $x106) $x25) $x88) $x194) $x97)))
 (let (($x165 (and $x54 $x268)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x132 (or false (or false (and (and true (or $x22 $x23)) (or $x131 $x36))))))
 (let (($x139 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x116 (and $x139 $x165)))
 (let (($x15 (= $x116 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x223)))
 (let (($x73 (= $x216 true)))
 (let ((?x95 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x293 (bvneg ?x95)))
 (let (($x136 (= ?x293 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x136 true)))
 (let (($x152 (and $x273 $x73)))
 (let (($x225 (and $x152 $x15)))
 (let (($x89 (and $x225 $x239)))
 (let (($x246 (and $x89 $x90)))
 (let (($x41 (and $x246 $x221)))
 (let (($x269 (and $x41 $x47)))
 (let (($x199 (and $x269 $x117)))
 (let (($x33 (and $x199 $x174)))
 (let (($x266 (and $x33 $x112)))
 (let (($x79 (and $x266 $x234)))
 (let (($x104 (forall ((input.ind-%var3282X (_ BitVec 32)) )(let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3282X)))
 (let ((?x237 (input.spec-%var-x-1.1.1 input.ind-%var3282X)))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3282X)))
 (=> $x265 (= ?x237 ?x230))))))
 ))
 (let (($x211 (forall ((input.ind-%var3281X (_ BitVec 32)) )(let (($x188 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3281X)))
 (let (($x265 (input.spec-%var-x-1.0.1 input.ind-%var3281X)))
 (= $x265 $x188))))
 ))
 (let (($x161 (and $x211 $x104)))
 (let (($x255 (and $x161 $x79)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x283 (and $x82 $x255)))
 (let (($x295 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x295 $x283)))
 (let (($x184 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x55 (and $x184 $x189)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let (($x215 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x78 (bvadd ?x232 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x78)))
 (let (($x8 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x78)))
 (let (($x167 (or false (or false (and (and true (or $x179 $x8)) (or $x76 $x215))))))
 (let (($x138 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x167)))
 (let (($x135 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x167)))
 (let (($x114 (and $x135 $x55)))
 (let (($x252 (=> $x114 $x164)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 161 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 86
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x34 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x34 (_ bv0 32))))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (or $x158 $x291)))
 (let (($x12 (= $x119 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x257 (bvneg ?x123)))
 (let (($x144 (= ?x257 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x144 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x85 (= $x65 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x227 true)))
 (let (($x210 (forall ((input.ind-%var3307X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var3307X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x58))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var3307X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3307X)))
 (=> $x211 (= ?x69 ?x128))))))))
 ))
 (let (($x108 (forall ((input.ind-%var3306X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var3306X) (bvult input.ind-%var3306X input.dst.llvm-%n))))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3306X)))
 (= $x211 $x143))))
 ))
 (let (($x26 (and $x108 $x210)))
 (let (($x53 (= $x26 true)))
 (let (($x270 (forall ((input.ind-%var3297X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var3297X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x58))))
 (let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3297X)))
 (let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3297X)))
 (=> $x277 (= ?x94 ?x128))))))))
 ))
 (let (($x279 (forall ((input.ind-%var3296X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var3296X) (bvult input.ind-%var3296X input.dst.llvm-%n))))
 (let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3296X)))
 (= $x277 $x143))))
 ))
 (let (($x207 (and $x279 $x270)))
 (let (($x7 (= $x207 true)))
 (let (($x61 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x61 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x20 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x173 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x282)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x239)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (and $x268 $x116)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (and $x27 $x15)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x264 $x262)))
 (let (($x280 (not $x88)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x287 $x63)))
 (let (($x194 (and (not $x35) $x280)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x133 $x106)))
 (let (($x80 (not $x253)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x71 $x166)))
 (let (($x124 (and (not $x105) $x80)))
 (let (($x154 (and (and (and (and (and (and $x124 $x194) $x260) $x54) $x225) $x72) $x89)))
 (let (($x254 (and $x154 $x90)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x236)))
 (let (($x278 (or false (or false (and (and true (or $x64 $x170)) (or $x241 $x243))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x278)))
 (let (($x16 (and $x111 $x254)))
 (let (($x272 (= $x16 true)))
 (let ((?x141 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x10 (= (_ bv0 2) ?x141)))
 (let (($x132 (= $x10 true)))
 (let ((?x23 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x23)))
 (let (($x131 (= ?x172 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x131 true)))
 (let (($x139 (and $x36 $x132)))
 (let (($x212 (and $x139 $x272)))
 (let (($x249 (and $x212 $x142)))
 (let (($x180 (and $x249 $x32)))
 (let (($x163 (and $x180 $x51)))
 (let (($x56 (and $x163 $x7)))
 (let (($x121 (and $x56 $x53)))
 (let (($x261 (and $x121 $x153)))
 (let (($x13 (and $x261 $x85)))
 (let (($x44 (and $x13 $x224)))
 (let (($x292 (forall ((input.ind-%var3317X (_ BitVec 32)) )(let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3317X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var3317X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3317X)))
 (=> $x211 (= ?x69 ?x94))))))
 ))
 (let (($x193 (forall ((input.ind-%var3316X (_ BitVec 32)) )(let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3316X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3316X)))
 (= $x211 $x277))))
 ))
 (let (($x101 (and $x193 $x292)))
 (let (($x43 (and $x101 $x44)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x209 $x43)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x17 (and $x178 $x175)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x149 $x17)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let (($x185 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x232 (_ bv3 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x45 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x135 (or false (or false (and (and true (or $x281 $x45)) (or $x233 $x185))))))
 (let (($x184 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x135)))
 (let (($x168 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x135)))
 (let (($x285 (and $x168 $x126)))
 (let (($x81 (=> $x285 $x12)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x134 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x34 (ite $x134 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (= ?x34 (_ bv0 32))))
 (let (($x158 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x119 (or $x158 $x291)))
 (let (($x12 (= $x119 true)))
 (let ((?x123 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x257 (bvneg ?x123)))
 (let (($x144 (= ?x257 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x144 true)))
 (let (($x65 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x85 (= $x65 true)))
 (let (($x227 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x153 (= $x227 true)))
 (let (($x210 (forall ((input.ind-%var3307X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var3307X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x58))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var3307X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3307X)))
 (=> $x211 (= ?x69 ?x128))))))))
 ))
 (let (($x108 (forall ((input.ind-%var3306X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var3306X) (bvult input.ind-%var3306X input.dst.llvm-%n))))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3306X)))
 (= $x211 $x143))))
 ))
 (let (($x26 (and $x108 $x210)))
 (let (($x53 (= $x26 true)))
 (let (($x270 (forall ((input.ind-%var3297X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var3297X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x58))))
 (let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3297X)))
 (let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3297X)))
 (=> $x277 (= ?x94 ?x128))))))))
 ))
 (let (($x279 (forall ((input.ind-%var3296X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var3296X) (bvult input.ind-%var3296X input.dst.llvm-%n))))
 (let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3296X)))
 (= $x277 $x143))))
 ))
 (let (($x207 (and $x279 $x270)))
 (let (($x7 (= $x207 true)))
 (let (($x61 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x51 (= $x61 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x20 true)))
 (let (($x173 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x173 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x90 (= (_ bv0 32) ?x282)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x239)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (and $x268 $x116)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (and $x27 $x15)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x264 $x262)))
 (let (($x280 (not $x88)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x287 $x63)))
 (let (($x194 (and (not $x35) $x280)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (and $x133 $x106)))
 (let (($x80 (not $x253)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (and $x71 $x166)))
 (let (($x124 (and (not $x105) $x80)))
 (let (($x154 (and (and (and (and (and (and $x124 $x194) $x260) $x54) $x225) $x72) $x89)))
 (let (($x254 (and $x154 $x90)))
 (let (($x243 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x236 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x236)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x236)))
 (let (($x278 (or false (or false (and (and true (or $x64 $x170)) (or $x241 $x243))))))
 (let (($x111 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x278)))
 (let (($x16 (and $x111 $x254)))
 (let (($x272 (= $x16 true)))
 (let ((?x141 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x10 (= (_ bv0 2) ?x141)))
 (let (($x132 (= $x10 true)))
 (let ((?x23 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x172 (bvneg ?x23)))
 (let (($x131 (= ?x172 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x131 true)))
 (let (($x139 (and $x36 $x132)))
 (let (($x212 (and $x139 $x272)))
 (let (($x249 (and $x212 $x142)))
 (let (($x180 (and $x249 $x32)))
 (let (($x163 (and $x180 $x51)))
 (let (($x56 (and $x163 $x7)))
 (let (($x121 (and $x56 $x53)))
 (let (($x261 (and $x121 $x153)))
 (let (($x13 (and $x261 $x85)))
 (let (($x44 (and $x13 $x224)))
 (let (($x292 (forall ((input.ind-%var3317X (_ BitVec 32)) )(let ((?x94 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3317X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var3317X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3317X)))
 (=> $x211 (= ?x69 ?x94))))))
 ))
 (let (($x193 (forall ((input.ind-%var3316X (_ BitVec 32)) )(let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3316X)))
 (let (($x211 (input.spec-%var-x-1.0.1 input.ind-%var3316X)))
 (= $x211 $x277))))
 ))
 (let (($x101 (and $x193 $x292)))
 (let (($x43 (and $x101 $x44)))
 (let (($x209 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x209 $x43)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x17 (and $x178 $x175)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x126 (and $x149 $x17)))
 (let ((?x245 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x232 (bvadd input.dst.llvm-%x ?x245)))
 (let (($x185 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x232 (_ bv3 32))))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x45 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x135 (or false (or false (and (and true (or $x281 $x45)) (or $x233 $x185))))))
 (let (($x184 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) $x135)))
 (let (($x168 (=> (and $x158 (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32)))) $x135)))
 (let (($x285 (and $x168 $x126)))
 (let (($x81 (=> $x285 $x12)))
 (not $x81))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 160 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
==query_number: 87
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x284 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x284 true)))
 (let ((?x283 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x283)))
 (let (($x189 (= ?x196 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x189 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x234)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x199)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x188 $x140)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x273 $x182)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x113 $x66)))
 (let (($x223 (not $x129)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x12 $x81)))
 (let (($x136 (and (not $x86) $x223)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x126 $x285)))
 (let (($x34 (not $x134)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x75 $x108)))
 (let (($x119 (and (not $x17) $x34)))
 (let (($x112 (and (and (and (and (and (and $x119 $x136) $x293) $x230) $x176) $x202) $x197)))
 (let (($x256 (and $x112 $x79)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x44 (or false (or false (and (and true (or $x121 $x227)) (or $x13 $x123))))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x255 (and $x175 $x256)))
 (let (($x130 (= $x255 true)))
 (let (($x270 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x270 true)))
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x128 (= (_ bv0 2) ?x252)))
 (let (($x201 (= $x128 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x6 true)))
 (let (($x67 (forall ((input.ind-%var3342X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var3342X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x54))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var3342X)))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3342X)))
 (=> $x251 (= ?x215 ?x15))))))))
 ))
 (let (($x212 (forall ((input.ind-%var3341X (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) input.ind-%var3341X) (bvult input.ind-%var3341X input.dst.llvm-%n))))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3341X)))
 (= $x251 $x24))))
 ))
 (let (($x266 (and $x212 $x67)))
 (let (($x87 (= $x266 true)))
 (let (($x9 (forall ((input.ind-%var3332X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var3332X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x54))))
 (let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3332X)))
 (let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3332X)))
 (=> $x8 (= ?x167 ?x15))))))))
 ))
 (let (($x241 (forall ((input.ind-%var3331X (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) input.ind-%var3331X) (bvult input.ind-%var3331X input.dst.llvm-%n))))
 (let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3331X)))
 (= $x8 $x24))))
 ))
 (let (($x72 (and $x241 $x9)))
 (let (($x220 (= $x72 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x141 (= $x248 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x131 (= $x83 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x101)))
 (let (($x22 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x22 true)))
 (let (($x94 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x94 true)))
 (let (($x277 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (not $x277)))
 (let (($x193 (= $x161 true)))
 (let (($x40 (and $x193 $x152)))
 (let (($x172 (and $x40 $x23)))
 (let (($x36 (and $x172 $x131)))
 (let (($x10 (and $x36 $x141)))
 (let (($x239 (and $x10 $x220)))
 (let (($x164 (and $x239 $x87)))
 (let (($x205 (and $x164 $x148)))
 (let (($x218 (and $x205 $x201)))
 (let (($x7 (and $x218 $x207)))
 (let (($x18 (and $x7 $x130)))
 (let (($x118 (and $x18 $x271)))
 (let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x82 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x82 (_ bv0 32))))
 (let (($x11 (and $x209 $x118)))
 (let (($x149 (forall ((input.ind-%var3352X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3352X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var3352X)))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3352X)))
 (=> $x251 (= ?x215 ?x167))))))
 ))
 (let (($x115 (forall ((input.ind-%var3351X (_ BitVec 32)) )(let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3351X)))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3351X)))
 (= $x251 $x8))))
 ))
 (let (($x192 (and $x115 $x149)))
 (let (($x93 (and $x192 $x11)))
 (let (($x232 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x232 $x93)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x258 (and $x91 $x160)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x158 $x258)))
 (let (($x59 (=> $x190 $x48)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x284 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x48 (= $x284 true)))
 (let ((?x283 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x283)))
 (let (($x189 (= ?x196 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x189 true)))
 (let ((?x234 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x234)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x199)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x188 $x140)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x273 $x182)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x113 $x66)))
 (let (($x223 (not $x129)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x12 $x81)))
 (let (($x136 (and (not $x86) $x223)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x126 $x285)))
 (let (($x34 (not $x134)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x75 $x108)))
 (let (($x119 (and (not $x17) $x34)))
 (let (($x112 (and (and (and (and (and (and $x119 $x136) $x293) $x230) $x176) $x202) $x197)))
 (let (($x256 (and $x112 $x79)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x227 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x44 (or false (or false (and (and true (or $x121 $x227)) (or $x13 $x123))))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x255 (and $x175 $x256)))
 (let (($x130 (= $x255 true)))
 (let (($x270 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x207 (= $x270 true)))
 (let ((?x252 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x128 (= (_ bv0 2) ?x252)))
 (let (($x201 (= $x128 true)))
 (let (($x6 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x148 (= $x6 true)))
 (let (($x67 (forall ((input.ind-%var3342X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var3342X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x54))))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var3342X)))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3342X)))
 (=> $x251 (= ?x215 ?x15))))))))
 ))
 (let (($x212 (forall ((input.ind-%var3341X (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) input.ind-%var3341X) (bvult input.ind-%var3341X input.dst.llvm-%n))))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3341X)))
 (= $x251 $x24))))
 ))
 (let (($x266 (and $x212 $x67)))
 (let (($x87 (= $x266 true)))
 (let (($x9 (forall ((input.ind-%var3332X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var3332X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x54))))
 (let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3332X)))
 (let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3332X)))
 (=> $x8 (= ?x167 ?x15))))))))
 ))
 (let (($x241 (forall ((input.ind-%var3331X (_ BitVec 32)) )(let (($x24 (and (bvule (_ bv0 32) input.ind-%var3331X) (bvult input.ind-%var3331X input.dst.llvm-%n))))
 (let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3331X)))
 (= $x8 $x24))))
 ))
 (let (($x72 (and $x241 $x9)))
 (let (($x220 (= $x72 true)))
 (let (($x248 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x141 (= $x248 true)))
 (let (($x83 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x131 (= $x83 true)))
 (let ((?x101 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x74 (bvneg ?x101)))
 (let (($x22 (= ?x74 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x23 (= $x22 true)))
 (let (($x94 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x94 true)))
 (let (($x277 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (not $x277)))
 (let (($x193 (= $x161 true)))
 (let (($x40 (and $x193 $x152)))
 (let (($x172 (and $x40 $x23)))
 (let (($x36 (and $x172 $x131)))
 (let (($x10 (and $x36 $x141)))
 (let (($x239 (and $x10 $x220)))
 (let (($x164 (and $x239 $x87)))
 (let (($x205 (and $x164 $x148)))
 (let (($x218 (and $x205 $x201)))
 (let (($x7 (and $x218 $x207)))
 (let (($x18 (and $x7 $x130)))
 (let (($x118 (and $x18 $x271)))
 (let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x82 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x82 (_ bv0 32))))
 (let (($x11 (and $x209 $x118)))
 (let (($x149 (forall ((input.ind-%var3352X (_ BitVec 32)) )(let ((?x167 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3352X)))
 (let ((?x215 (input.spec-%var-x-1.1.1 input.ind-%var3352X)))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3352X)))
 (=> $x251 (= ?x215 ?x167))))))
 ))
 (let (($x115 (forall ((input.ind-%var3351X (_ BitVec 32)) )(let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3351X)))
 (let (($x251 (input.spec-%var-x-1.0.1 input.ind-%var3351X)))
 (= $x251 $x8))))
 ))
 (let (($x192 (and $x115 $x149)))
 (let (($x93 (and $x192 $x11)))
 (let (($x232 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x160 (and $x232 $x93)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x258 (and $x91 $x160)))
 (let (($x158 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x190 (and $x158 $x258)))
 (let (($x59 (=> $x190 $x48)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.4087395/query
