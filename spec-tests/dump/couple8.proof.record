==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x196 (= $x195 true)))
 (let (($x188 (forall ((input.ind-%var49X (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var49X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var49X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var49X)))
 (=> $x118 (= ?x133 ?x182))))))
 ))
 (let (($x177 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var48X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var48X)))
 (= $x118 $x173))))
 ))
 (let (($x189 (and $x177 $x188)))
 (let (($x190 (= $x189 true)))
 (let (($x165 (forall ((input.ind-%var41X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var41X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x156))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var41X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var41X)))
 (=> $x118 (= ?x133 ?x162))))))))
 ))
 (let (($x128 (forall ((input.ind-%var40X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var40X) (bvult input.ind-%var40X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x128 $x165)))
 (let (($x167 (= $x166 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 (concat ?x101 ?x99)))))
 (let (($x110 (= ?x108 input.dst.llvm-%n)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x58 (concat ?x74 ?x14)))))
 (let (($x94 (= ?x92 input.dst.llvm-%x)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x28)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x84)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x50 $x80)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x72 $x71)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x68 $x81)))
 (let (($x46 (not $x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x76 $x85)))
 (let (($x56 (and (not $x22) $x46)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x38 $x52)))
 (let (($x63 (not $x15)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x12 $x37)))
 (let (($x31 (and (not $x19) $x63)))
 (let (($x47 (and (and (and (and (and (and $x31 $x56) $x45) $x42) $x32) $x73) $x11)))
 (let (($x20 (and $x47 $x65)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x23 (or false (or false (and (and true (or $x33 $x21)) (or $x79 $x86))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x16 (and $x54 $x20)))
 (let (($x26 (= $x16 true)))
 (let (($x7 (= $x26 true)))
 (let (($x75 (= $x7 true)))
 (let (($x97 (and $x75 $x96)))
 (let (($x113 (and $x97 $x112)))
 (let (($x168 (and $x113 $x167)))
 (let (($x191 (and $x168 $x190)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x6 $x191)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x193 (and $x5 $x192)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x25 $x193)))
 (let (($x197 (=> $x194 $x196)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x195 (= true false)))
 (let (($x196 (= $x195 true)))
 (let (($x188 (forall ((input.ind-%var49X (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var49X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var49X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var49X)))
 (=> $x118 (= ?x133 ?x182))))))
 ))
 (let (($x177 (forall ((input.ind-%var48X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var48X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var48X)))
 (= $x118 $x173))))
 ))
 (let (($x189 (and $x177 $x188)))
 (let (($x190 (= $x189 true)))
 (let (($x165 (forall ((input.ind-%var41X (_ BitVec 32)) )(let ((?x152 (bvadd (bvmul input.ind-%var41X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x156))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var41X)))
 (let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var41X)))
 (=> $x118 (= ?x133 ?x162))))))))
 ))
 (let (($x128 (forall ((input.ind-%var40X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (= $x118 (and (bvule (_ bv0 32) input.ind-%var40X) (bvult input.ind-%var40X input.dst.llvm-%n)))))
 ))
 (let (($x166 (and $x128 $x165)))
 (let (($x167 (= $x166 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x108 (concat ?x107 (concat ?x104 (concat ?x101 ?x99)))))
 (let (($x110 (= ?x108 input.dst.llvm-%n)))
 (let (($x111 (= $x110 true)))
 (let (($x112 (= $x111 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x91 (concat ?x58 (concat ?x74 ?x14)))))
 (let (($x94 (= ?x92 input.dst.llvm-%x)))
 (let (($x95 (= $x94 true)))
 (let (($x96 (= $x95 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x28)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x84)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x50 $x80)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (and $x72 $x71)))
 (let (($x42 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x68 $x81)))
 (let (($x46 (not $x67)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x76 $x85)))
 (let (($x56 (and (not $x22) $x46)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x38 $x52)))
 (let (($x63 (not $x15)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x12 $x37)))
 (let (($x31 (and (not $x19) $x63)))
 (let (($x47 (and (and (and (and (and (and $x31 $x56) $x45) $x42) $x32) $x73) $x11)))
 (let (($x20 (and $x47 $x65)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x23 (or false (or false (and (and true (or $x33 $x21)) (or $x79 $x86))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x16 (and $x54 $x20)))
 (let (($x26 (= $x16 true)))
 (let (($x7 (= $x26 true)))
 (let (($x75 (= $x7 true)))
 (let (($x97 (and $x75 $x96)))
 (let (($x113 (and $x97 $x112)))
 (let (($x168 (and $x113 $x167)))
 (let (($x191 (and $x168 $x190)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x192 (and $x6 $x191)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x193 (and $x5 $x192)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x194 (and $x25 $x193)))
 (let (($x197 (=> $x194 $x196)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x38023200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000000e0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x38023203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000000e3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x38023200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000000e0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x38023203)
                                   (k!0 #x38023202)
                                   (k!0 #x38023201)
                                   (k!0 #x38023200))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x000000e3)
                        (k!0 #x000000e2)
                        (k!0 #x000000e1)
                        (k!0 #x000000e0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x21548974)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7646b4c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd7646b4f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x21548977)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7646b4c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x21548974)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xd7646b4f)
                                   (k!0 #xd7646b4e)
                                   (k!0 #xd7646b4d)
                                   (k!0 #xd7646b4c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x20)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x18)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x62 $x39)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x13 $x71)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x81 $x14)))
 (let (($x77 (not $x37)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x68 $x97)))
 (let (($x49 (and (not $x58) $x77)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x53 $x91)))
 (let (($x79 (not $x15)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x40 $x32)))
 (let (($x26 (and (not $x44) $x79)))
 (let (($x95 (and (and (and (and (and (and $x26 $x49) $x23) $x50) $x84) $x9) $x57)))
 (let (($x87 (and $x95 $x74)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x83)))
 (let (($x17 (or false (or false (and (and true (or $x19 $x72)) (or $x24 $x90))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x150 (and $x86 $x87)))
 (let (($x184 (= $x150 true)))
 (let (($x179 (= $x184 true)))
 (let (($x172 (forall ((input.ind-%var77X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var77X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var77X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (=> $x136 (= ?x164 ?x145))))))
 ))
 (let (($x144 (forall ((input.ind-%var76X (_ BitVec 32)) )(let (($x138 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var76X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var76X)))
 (= $x136 $x138))))
 ))
 (let (($x181 (and $x144 $x172)))
 (let (($x123 (= $x181 true)))
 (let (($x134 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul input.ind-%var71X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x131))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var71X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var71X)))
 (=> $x136 (= ?x164 ?x174))))))))
 ))
 (let (($x156 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var70X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var70X) (bvult input.ind-%var70X input.dst.llvm-%n)))))
 ))
 (let (($x129 (and $x156 $x134)))
 (let (($x132 (= $x129 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x99 (concat ?x104 ?x107)))))
 (let (($x110 (= input.dst.llvm-%n ?x109)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x54 (concat ?x93 (concat ?x65 ?x60)))))
 (let (($x92 (= input.dst.llvm-%x ?x63)))
 (let (($x111 (and $x92 $x110)))
 (let (($x113 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x86) $x87)))
 (let (($x117 (and $x113 $x111)))
 (let (($x118 (and true $x117)))
 (let (($x125 (= $x118 true)))
 (let (($x124 (= $x125 true)))
 (let (($x126 (= $x124 true)))
 (let (($x114 (and $x126 $x132)))
 (let (($x149 (and $x114 $x123)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x25 $x149)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x48 $x170)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x52 $x175)))
 (let (($x185 (=> $x130 $x179)))
 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x20 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x74 (= (_ bv0 32) ?x20)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x18)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x62 $x39)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x13 $x71)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x81 $x14)))
 (let (($x77 (not $x37)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x68 $x97)))
 (let (($x49 (and (not $x58) $x77)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x53 $x91)))
 (let (($x79 (not $x15)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x40 $x32)))
 (let (($x26 (and (not $x44) $x79)))
 (let (($x95 (and (and (and (and (and (and $x26 $x49) $x23) $x50) $x84) $x9) $x57)))
 (let (($x87 (and $x95 $x74)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x83 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x83)))
 (let (($x17 (or false (or false (and (and true (or $x19 $x72)) (or $x24 $x90))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x150 (and $x86 $x87)))
 (let (($x184 (= $x150 true)))
 (let (($x179 (= $x184 true)))
 (let (($x172 (forall ((input.ind-%var77X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var77X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var77X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (=> $x136 (= ?x164 ?x145))))))
 ))
 (let (($x144 (forall ((input.ind-%var76X (_ BitVec 32)) )(let (($x138 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var76X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var76X)))
 (= $x136 $x138))))
 ))
 (let (($x181 (and $x144 $x172)))
 (let (($x123 (= $x181 true)))
 (let (($x134 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x196 (bvadd (bvmul input.ind-%var71X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x131))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var71X)))
 (let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var71X)))
 (=> $x136 (= ?x164 ?x174))))))))
 ))
 (let (($x156 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-1.0.1 input.ind-%var70X)))
 (= $x136 (and (bvule (_ bv0 32) input.ind-%var70X) (bvult input.ind-%var70X input.dst.llvm-%n)))))
 ))
 (let (($x129 (and $x156 $x134)))
 (let (($x132 (= $x129 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x109 (concat ?x108 (concat ?x99 (concat ?x104 ?x107)))))
 (let (($x110 (= input.dst.llvm-%n ?x109)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x54 (concat ?x93 (concat ?x65 ?x60)))))
 (let (($x92 (= input.dst.llvm-%x ?x63)))
 (let (($x111 (and $x92 $x110)))
 (let (($x113 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x86) $x87)))
 (let (($x117 (and $x113 $x111)))
 (let (($x118 (and true $x117)))
 (let (($x125 (= $x118 true)))
 (let (($x124 (= $x125 true)))
 (let (($x126 (= $x124 true)))
 (let (($x114 (and $x126 $x132)))
 (let (($x149 (and $x114 $x123)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x170 (and $x25 $x149)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x48 $x170)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x52 $x175)))
 (let (($x185 (=> $x130 $x179)))
 (not $x185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x116 (= $x194 true)))
 (let (($x161 (forall ((input.ind-%var89X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var89X)))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var89X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var89X)))
 (=> $x156 (= ?x174 ?x189))))))
 ))
 (let (($x188 (forall ((input.ind-%var88X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var88X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (= $x156 $x173))))
 ))
 (let (($x142 (and $x188 $x161)))
 (let (($x157 (= $x142 true)))
 (let (($x165 (forall ((input.ind-%var83X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var83X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x185))))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var83X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var83X)))
 (=> $x156 (= ?x174 ?x146))))))))
 ))
 (let (($x115 (forall ((input.ind-%var82X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var82X)))
 (= $x156 (and (bvule (_ bv0 32) input.ind-%var82X) (bvult input.ind-%var82X input.dst.llvm-%n)))))
 ))
 (let (($x159 (and $x115 $x165)))
 (let (($x163 (= $x159 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x107 (concat ?x99 ?x108)))))
 (let (($x111 (= input.dst.llvm-%n ?x110)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x47 (concat ?x65 (concat ?x22 ?x42)))))
 (let (($x92 (= input.dst.llvm-%x ?x63)))
 (let (($x117 (and $x92 $x111)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x64)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x84)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x50 $x62)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x96 $x38)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x37 (not $x14)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x68 $x97)))
 (let (($x49 (and (not $x58) $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x15 (not $x91)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x12 $x55)))
 (let (($x26 (and (not $x44) $x15)))
 (let (($x74 (and (and (and (and (and (and $x26 $x49) $x45) $x78) $x7) $x71) $x75)))
 (let (($x87 (and $x74 $x9)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x112 (or false (or false (and (and true (or $x70 $x11)) (or $x94 $x8))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x124 (and (and (and $x30 $x32) $x87) $x117)))
 (let (($x126 (and true $x124)))
 (let (($x133 (= $x126 true)))
 (let (($x136 (= $x133 true)))
 (let (($x154 (= $x136 true)))
 (let (($x127 (and $x154 $x163)))
 (let (($x193 (and $x127 $x157)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x10 $x193)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x147 (and $x43 $x121)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x36 $x147)))
 (let (($x141 (=> $x162 $x116)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x194 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x116 (= $x194 true)))
 (let (($x161 (forall ((input.ind-%var89X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var89X)))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var89X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var89X)))
 (=> $x156 (= ?x174 ?x189))))))
 ))
 (let (($x188 (forall ((input.ind-%var88X (_ BitVec 32)) )(let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var88X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (= $x156 $x173))))
 ))
 (let (($x142 (and $x188 $x161)))
 (let (($x157 (= $x142 true)))
 (let (($x165 (forall ((input.ind-%var83X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var83X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x185))))
 (let ((?x174 (input.spec-%var-x-1.1.1 input.ind-%var83X)))
 (let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var83X)))
 (=> $x156 (= ?x174 ?x146))))))))
 ))
 (let (($x115 (forall ((input.ind-%var82X (_ BitVec 32)) )(let (($x156 (input.spec-%var-x-1.0.1 input.ind-%var82X)))
 (= $x156 (and (bvule (_ bv0 32) input.ind-%var82X) (bvult input.ind-%var82X input.dst.llvm-%n)))))
 ))
 (let (($x159 (and $x115 $x165)))
 (let (($x163 (= $x159 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x109 (concat ?x107 (concat ?x99 ?x108)))))
 (let (($x111 (= input.dst.llvm-%n ?x110)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x63 (concat ?x47 (concat ?x65 (concat ?x22 ?x42)))))
 (let (($x92 (= input.dst.llvm-%x ?x63)))
 (let (($x117 (and $x92 $x111)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x64)))
 (let ((?x84 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x84)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x50 $x62)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x96 $x38)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x37 (not $x14)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x68 $x97)))
 (let (($x49 (and (not $x58) $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x15 (not $x91)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x12 $x55)))
 (let (($x26 (and (not $x44) $x15)))
 (let (($x74 (and (and (and (and (and (and $x26 $x49) $x45) $x78) $x7) $x71) $x75)))
 (let (($x87 (and $x74 $x9)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x112 (or false (or false (and (and true (or $x70 $x11)) (or $x94 $x8))))))
 (let (($x32 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x124 (and (and (and $x30 $x32) $x87) $x117)))
 (let (($x126 (and true $x124)))
 (let (($x133 (= $x126 true)))
 (let (($x136 (= $x133 true)))
 (let (($x154 (= $x136 true)))
 (let (($x127 (and $x154 $x163)))
 (let (($x193 (and $x127 $x157)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x121 (and $x10 $x193)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x147 (and $x43 $x121)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x162 (and $x36 $x147)))
 (let (($x141 (=> $x162 $x116)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2fbf7f30)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff14)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff17)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2fbf7f33)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff14)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2fbf7f30)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffff16) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xffffff17)
                                   (k!0 #xffffff16)
                                   (k!0 #xffffff15)
                                   (k!0 #xffffff14)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xffffff17)
                                   (k!0 #xffffff16)
                                   (k!0 #xffffff15)
                                   (k!0 #xffffff14)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xffffff17)
                                   (k!0 #xffffff16)
                                   (k!0 #xffffff15)
                                   (k!0 #xffffff14)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xffffff17)
                                   (k!0 #xffffff16)
                                   (k!0 #xffffff15)
                                   (k!0 #xffffff14))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000488c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000988)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x10011010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000488f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000098b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000488c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000988)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000488e) #x01
      #x10))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000488f)
                                   (k!0 #x0000488e)
                                   (k!0 #x0000488d)
                                   (k!0 #x0000488c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000488f)
                                   (k!0 #x0000488e)
                                   (k!0 #x0000488d)
                                   (k!0 #x0000488c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000488f)
                                   (k!0 #x0000488e)
                                   (k!0 #x0000488d)
                                   (k!0 #x0000488c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000488f)
                                   (k!0 #x0000488e)
                                   (k!0 #x0000488d)
                                   (k!0 #x0000488c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000098b)
                        (k!0 #x0000098a)
                        (k!0 #x00000989)
                        (k!0 #x00000988))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 ((_ extract 15 0) input.dst.llvm-%x)))
 (let ((?x178 (bvmul (_ bv4095 16) ?x140)))
 (let ((?x182 ((_ extract 15 0) input.dst.llvm-%n)))
 (let ((?x199 (bvadd ?x182 ?x178)))
 (let (($x200 (= (_ bv0 16) ?x199)))
 (let (($x201 (= $x200 true)))
 (let (($x196 (forall ((input.ind-%var117X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var117X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var117X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var117X)))
 (=> $x174 (= ?x148 ?x123))))))
 ))
 (let (($x138 (forall ((input.ind-%var116X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var116X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var116X)))
 (= $x174 $x172))))
 ))
 (let (($x98 (and $x138 $x196)))
 (let (($x149 (= $x98 true)))
 (let (($x197 (forall ((input.ind-%var111X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x119))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var111X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var111X)))
 (=> $x174 (= ?x148 ?x192))))))))
 ))
 (let (($x150 (forall ((input.ind-%var110X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var110X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var110X) (bvult input.ind-%var110X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x150 $x197)))
 (let (($x158 (= $x35 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x111 (concat ?x103 (concat ?x101 ?x104)))))
 (let (($x124 (= input.dst.llvm-%n ?x117)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x63 (concat ?x42 (concat ?x88 ?x47)))))
 (let (($x28 (= input.dst.llvm-%x ?x92)))
 (let (($x126 (and $x28 $x124)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x71)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x95)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x57 $x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x78 $x13)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x37 (not $x14)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x97 $x58)))
 (let (($x33 (and (not $x77) $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x15 (not $x91)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x40 $x19)))
 (let (($x68 (and (not $x79) $x15)))
 (let (($x87 (and (and (and (and (and (and $x68 $x33) $x45) $x23) $x62) $x7) $x39)))
 (let (($x125 (and $x87 $x20)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x12 (or false (or false (and (and true (or $x24 $x56)) (or $x17 $x86))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x12)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x154 (and (and (and $x30 $x44) $x125) $x126)))
 (let (($x153 (and true $x154)))
 (let (($x156 (= $x153 true)))
 (let (($x135 (= $x156 true)))
 (let (($x61 (= $x135 true)))
 (let (($x167 (and $x61 $x158)))
 (let (($x160 (and $x167 $x149)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x52 $x160)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x131 (and $x25 $x191)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x166 $x131)))
 (let (($x202 (=> $x170 $x201)))
 (not $x202)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 ((_ extract 15 0) input.dst.llvm-%x)))
 (let ((?x178 (bvmul (_ bv4095 16) ?x140)))
 (let ((?x182 ((_ extract 15 0) input.dst.llvm-%n)))
 (let ((?x199 (bvadd ?x182 ?x178)))
 (let (($x200 (= (_ bv0 16) ?x199)))
 (let (($x201 (= $x200 true)))
 (let (($x196 (forall ((input.ind-%var117X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var117X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var117X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var117X)))
 (=> $x174 (= ?x148 ?x123))))))
 ))
 (let (($x138 (forall ((input.ind-%var116X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var116X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var116X)))
 (= $x174 $x172))))
 ))
 (let (($x98 (and $x138 $x196)))
 (let (($x149 (= $x98 true)))
 (let (($x197 (forall ((input.ind-%var111X (_ BitVec 32)) )(let ((?x194 (bvadd (bvmul input.ind-%var111X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x119))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var111X)))
 (let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var111X)))
 (=> $x174 (= ?x148 ?x192))))))))
 ))
 (let (($x150 (forall ((input.ind-%var110X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-1.0.1 input.ind-%var110X)))
 (= $x174 (and (bvule (_ bv0 32) input.ind-%var110X) (bvult input.ind-%var110X input.dst.llvm-%n)))))
 ))
 (let (($x35 (and $x150 $x197)))
 (let (($x158 (= $x35 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x111 (concat ?x103 (concat ?x101 ?x104)))))
 (let (($x124 (= input.dst.llvm-%n ?x117)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x63 (concat ?x42 (concat ?x88 ?x47)))))
 (let (($x28 (= input.dst.llvm-%x ?x92)))
 (let (($x126 (and $x28 $x124)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x71)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x95)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x57 $x80)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x78 $x13)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x37 (not $x14)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (and $x97 $x58)))
 (let (($x33 (and (not $x77) $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x15 (not $x91)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x40 $x19)))
 (let (($x68 (and (not $x79) $x15)))
 (let (($x87 (and (and (and (and (and (and $x68 $x33) $x45) $x23) $x62) $x7) $x39)))
 (let (($x125 (and $x87 $x20)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x12 (or false (or false (and (and true (or $x24 $x56)) (or $x17 $x86))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x12)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x154 (and (and (and $x30 $x44) $x125) $x126)))
 (let (($x153 (and true $x154)))
 (let (($x156 (= $x153 true)))
 (let (($x135 (= $x156 true)))
 (let (($x61 (= $x135 true)))
 (let (($x167 (and $x61 $x158)))
 (let (($x160 (and $x167 $x149)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x52 $x160)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x131 (and $x25 $x191)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x170 (and $x166 $x131)))
 (let (($x202 (=> $x170 $x201)))
 (not $x202)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000000b)
                        (k!0 #x0000000a)
                        (k!0 #x00000009)
                        (k!0 #x00000008))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x440cc918)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4f2d2180)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xb733c000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4f2d2183)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x440cc91b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4f2d2180)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x440cc918)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x440cc919) #x00
    (ite (= x!0 #x4f2d2182) #x33
    (ite (= x!0 #x440cc918) #x00
    (ite (= x!0 #x440cc91b) #x00
    (ite (= x!0 #x440cc91a) #x00
    (ite (= x!0 #x4f2d2181) #xc0
    (ite (= x!0 #x4f2d2180) #x00
      #xb7))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!6 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x4f2d2183)
                                   (k!6 #x4f2d2182)
                                   (k!6 #x4f2d2181)
                                   (k!6 #x4f2d2180)))))
          (a!2 (k!6 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x4f2d2183)
                                   (k!6 #x4f2d2182)
                                   (k!6 #x4f2d2181)
                                   (k!6 #x4f2d2180)))))
          (a!3 (k!6 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x4f2d2183)
                                   (k!6 #x4f2d2182)
                                   (k!6 #x4f2d2181)
                                   (k!6 #x4f2d2180)))))
          (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!6 #x4f2d2183)
                                   (k!6 #x4f2d2182)
                                   (k!6 #x4f2d2181)
                                   (k!6 #x4f2d2180))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 ((_ extract 3 0) input.dst.llvm-%n)))
 (let (($x129 (= (_ bv0 4) ?x121)))
 (let (($x145 (= $x129 true)))
 (let (($x193 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var145X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var145X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var145X)))
 (=> $x148 (= ?x164 ?x128))))))
 ))
 (let (($x163 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var144X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (= $x148 $x146))))
 ))
 (let (($x144 (and $x163 $x193)))
 (let (($x195 (= $x144 true)))
 (let (($x109 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var139X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x178))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var139X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var139X)))
 (=> $x148 (= ?x164 ?x165))))))))
 ))
 (let (($x116 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var138X)))
 (= $x148 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X input.dst.llvm-%n)))))
 ))
 (let (($x73 (and $x116 $x109)))
 (let (($x181 (= $x73 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x124 (concat ?x99 (concat ?x107 ?x108)))))
 (let (($x154 (= input.dst.llvm-%n ?x126)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x92 (concat ?x47 (concat ?x22 ?x63)))))
 (let (($x102 (= input.dst.llvm-%x ?x28)))
 (let (($x153 (and $x102 $x154)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x7)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x64)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (and $x74 $x96)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x23 $x50)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x37 (not $x14)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x58 $x77)))
 (let (($x84 (and (not $x49) $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x15 (not $x91)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x55 $x85)))
 (let (($x97 (and (not $x26) $x15)))
 (let (($x125 (and (and (and (and (and (and $x97 $x84) $x45) $x18) $x80) $x62) $x38)))
 (let (($x136 (and $x125 $x9)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x40 (or false (or false (and (and true (or $x90 $x8)) (or $x32 $x118))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x61 (and (and (and $x30 $x79) $x136) $x153)))
 (let (($x115 (and true $x61)))
 (let (($x174 (= $x115 true)))
 (let (($x27 (= $x174 true)))
 (let (($x171 (= $x27 true)))
 (let (($x176 (and $x171 $x181)))
 (let (($x132 (and $x176 $x195)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x36 $x132)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x198 (and $x6 $x169)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x166 $x198)))
 (let (($x69 (=> $x82 $x145)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x121 ((_ extract 3 0) input.dst.llvm-%n)))
 (let (($x129 (= (_ bv0 4) ?x121)))
 (let (($x145 (= $x129 true)))
 (let (($x193 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var145X)))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var145X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var145X)))
 (=> $x148 (= ?x164 ?x128))))))
 ))
 (let (($x163 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var144X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (= $x148 $x146))))
 ))
 (let (($x144 (and $x163 $x193)))
 (let (($x195 (= $x144 true)))
 (let (($x109 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x139 (bvadd (bvmul input.ind-%var139X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv1 32))) (select input.dst.llvm-mem ?x139))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x139 (_ bv2 32))) ?x178))))
 (let ((?x164 (input.spec-%var-x-1.1.1 input.ind-%var139X)))
 (let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var139X)))
 (=> $x148 (= ?x164 ?x165))))))))
 ))
 (let (($x116 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-1.0.1 input.ind-%var138X)))
 (= $x148 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X input.dst.llvm-%n)))))
 ))
 (let (($x73 (and $x116 $x109)))
 (let (($x181 (= $x73 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x124 (concat ?x99 (concat ?x107 ?x108)))))
 (let (($x154 (= input.dst.llvm-%n ?x126)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x92 (concat ?x47 (concat ?x22 ?x63)))))
 (let (($x102 (= input.dst.llvm-%x ?x28)))
 (let (($x153 (and $x102 $x154)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x7)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x64)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x57)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (and $x74 $x96)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x23 $x50)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x37 (not $x14)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x58 $x77)))
 (let (($x84 (and (not $x49) $x37)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x15 (not $x91)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x55 $x85)))
 (let (($x97 (and (not $x26) $x15)))
 (let (($x125 (and (and (and (and (and (and $x97 $x84) $x45) $x18) $x80) $x62) $x38)))
 (let (($x136 (and $x125 $x9)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x40 (or false (or false (and (and true (or $x90 $x8)) (or $x32 $x118))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x30 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x61 (and (and (and $x30 $x79) $x136) $x153)))
 (let (($x115 (and true $x61)))
 (let (($x174 (= $x115 true)))
 (let (($x27 (= $x174 true)))
 (let (($x171 (= $x27 true)))
 (let (($x176 (and $x171 $x181)))
 (let (($x132 (and $x176 $x195)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x36 $x132)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x198 (and $x6 $x169)))
 (let (($x166 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x82 (and $x166 $x198)))
 (let (($x69 (=> $x82 $x145)))
 (not $x69))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2dd2a678)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x576d4634)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x09dd3100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x576d4637)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2dd2a67b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x576d4634)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2dd2a678)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x09dd3101) #x00
    (ite (= x!0 #x576d4636) #xdd
    (ite (= x!0 #x09dd3103) #x00
    (ite (= x!0 #x576d4635) #x31
    (ite (= x!0 #x09dd3102) #x00
    (ite (= x!0 #x09dd3100) #x00
    (ite (= x!0 #x576d4637) #x09
    (ite (= x!0 #x576d4634) #x00
      #x04)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x576d4637)
                                     (k!6 #x576d4636)
                                     (k!6 #x576d4635)
                                     (k!6 #x576d4634)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x576d4637)
                                     (k!6 #x576d4636)
                                     (k!6 #x576d4635)
                                     (k!6 #x576d4634)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x576d4637)
                                     (k!6 #x576d4636)
                                     (k!6 #x576d4635)
                                     (k!6 #x576d4634)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x576d4637)
                                     (k!6 #x576d4636)
                                     (k!6 #x576d4635)
                                     (k!6 #x576d4634))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x04040404 x!0)
         (ite (bvule #x04040405 x!0) #x04040405 #x04040404)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x188 (= (_ bv0 4) ?x131)))
 (let (($x142 (= $x188 true)))
 (let (($x137 (forall ((input.ind-%var173X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var173X)))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var173X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var173X)))
 (=> $x164 (= ?x76 ?x123))))))
 ))
 (let (($x186 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var172X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var172X)))
 (= $x164 $x158))))
 ))
 (let (($x179 (and $x186 $x137)))
 (let (($x67 (= $x179 true)))
 (let (($x159 (forall ((input.ind-%var167X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var167X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x69))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var167X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var167X)))
 (=> $x164 (= ?x76 ?x60))))))))
 ))
 (let (($x182 (forall ((input.ind-%var166X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var166X)))
 (= $x164 (and (bvule (_ bv0 32) input.ind-%var166X) (bvult input.ind-%var166X input.dst.llvm-%n)))))
 ))
 (let (($x183 (and $x182 $x159)))
 (let (($x119 (= $x183 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x154 (concat ?x101 (concat ?x103 ?x104)))))
 (let (($x61 (= input.dst.llvm-%n ?x153)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x65 (concat ?x22 (concat ?x93 ?x59)))))
 (let (($x102 (= input.dst.llvm-%x ?x28)))
 (let (($x115 (and $x102 $x61)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x13)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x80)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x18 $x74)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x75 $x78)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x58 $x77)))
 (let (($x84 (and (not $x49) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x19)))
 (let (($x97 (and (not $x26) $x91)))
 (let (($x9 (and (and (and (and (and (and $x97 $x84) $x31) $x39) $x57) $x50) $x71)))
 (let (($x136 (and $x9 $x62)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x156 (or false (or false (and (and true (or $x17 $x106)) (or $x12 $x44))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and (and (and $x5 $x85) $x136) $x115)))
 (let (($x150 (and true $x171)))
 (let (($x148 (= $x150 true)))
 (let (($x89 (= $x148 true)))
 (let (($x51 (= $x89 true)))
 (let (($x192 (and $x51 $x119)))
 (let (($x190 (and $x192 $x67)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x25 $x190)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x151 (and $x48 $x191)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x110 $x151)))
 (let (($x173 (=> $x175 $x142)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x131 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x188 (= (_ bv0 4) ?x131)))
 (let (($x142 (= $x188 true)))
 (let (($x137 (forall ((input.ind-%var173X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var173X)))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var173X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var173X)))
 (=> $x164 (= ?x76 ?x123))))))
 ))
 (let (($x186 (forall ((input.ind-%var172X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var172X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var172X)))
 (= $x164 $x158))))
 ))
 (let (($x179 (and $x186 $x137)))
 (let (($x67 (= $x179 true)))
 (let (($x159 (forall ((input.ind-%var167X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var167X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x69))))
 (let ((?x76 (input.spec-%var-x-1.1.1 input.ind-%var167X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var167X)))
 (=> $x164 (= ?x76 ?x60))))))))
 ))
 (let (($x182 (forall ((input.ind-%var166X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var166X)))
 (= $x164 (and (bvule (_ bv0 32) input.ind-%var166X) (bvult input.ind-%var166X input.dst.llvm-%n)))))
 ))
 (let (($x183 (and $x182 $x159)))
 (let (($x119 (= $x183 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x153 (concat ?x154 (concat ?x101 (concat ?x103 ?x104)))))
 (let (($x61 (= input.dst.llvm-%n ?x153)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x65 (concat ?x22 (concat ?x93 ?x59)))))
 (let (($x102 (= input.dst.llvm-%x ?x28)))
 (let (($x115 (and $x102 $x61)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x62 (= (_ bv0 32) ?x13)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x80)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x23)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x18 $x74)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x75 $x78)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x58 $x77)))
 (let (($x84 (and (not $x49) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x19)))
 (let (($x97 (and (not $x26) $x91)))
 (let (($x9 (and (and (and (and (and (and $x97 $x84) $x31) $x39) $x57) $x50) $x71)))
 (let (($x136 (and $x9 $x62)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x156 (or false (or false (and (and true (or $x17 $x106)) (or $x12 $x44))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and (and (and $x5 $x85) $x136) $x115)))
 (let (($x150 (and true $x171)))
 (let (($x148 (= $x150 true)))
 (let (($x89 (= $x148 true)))
 (let (($x51 (= $x89 true)))
 (let (($x192 (and $x51 $x119)))
 (let (($x190 (and $x192 $x67)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x25 $x190)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x151 (and $x48 $x191)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x110 $x151)))
 (let (($x173 (=> $x175 $x142)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000180)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000180)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000183)
                        (k!0 #x00000182)
                        (k!0 #x00000181)
                        (k!0 #x00000180))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc23321d4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5b0443a0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010404)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7fe79f04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5b0443a3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc23321d7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5b0443a0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc23321d4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fe79f05) #x00
    (ite (= x!0 #x5b0443a2) #xe7
    (ite (= x!0 #x7fe79f07) #x00
    (ite (= x!0 #xc23321d7) #x00
    (ite (= x!0 #xc23321d6) #x01
    (ite (= x!0 #x5b0443a1) #x9f
    (ite (= x!0 #x7fe79f06) #x00
    (ite (= x!0 #x7fe79f04) #x00
    (ite (= x!0 #x5b0443a3) #x7f
      #x04))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010404 x!0)
         (ite (bvule #x00010405 x!0) #x00010405 #x00010404)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x160 (= (_ bv0 2) ?x198)))
 (let (($x180 (= $x160 true)))
 (let (($x172 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var201X)))
 (let ((?x34 (input.spec-%var-x-1.1.1 input.ind-%var201X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var201X)))
 (=> $x76 (= ?x34 ?x128))))))
 ))
 (let (($x189 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var200X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var200X)))
 (= $x76 $x181))))
 ))
 (let (($x122 (and $x189 $x172)))
 (let (($x202 (= $x122 true)))
 (let (($x35 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var195X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x173))))
 (let ((?x34 (input.spec-%var-x-1.1.1 input.ind-%var195X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var195X)))
 (=> $x76 (= ?x34 ?x113))))))))
 ))
 (let (($x121 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var194X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X input.dst.llvm-%n)))))
 ))
 (let (($x83 (and $x121 $x35)))
 (let (($x178 (= $x83 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x61 (concat ?x107 (concat ?x99 ?x108)))))
 (let (($x171 (= input.dst.llvm-%n ?x115)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x28 (concat ?x59 (concat ?x54 ?x65)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x150 (and $x117 $x171)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x50)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x125)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x38 $x87)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x39 $x23)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x55 $x90)))
 (let (($x58 (and (not $x15) $x91)))
 (let (($x136 (and (and (and (and (and (and $x58 $x20) $x31) $x45) $x74) $x57) $x96)))
 (let (($x27 (and $x136 $x7)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x24 (or false (or false (and (and true (or $x32 $x112)) (or $x40 $x79))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x51 (and (and (and $x5 $x26) $x27) $x150)))
 (let (($x116 (and true $x51)))
 (let (($x164 (= $x116 true)))
 (let (($x200 (= $x164 true)))
 (let (($x199 (= $x200 true)))
 (let (($x165 (and $x199 $x178)))
 (let (($x203 (and $x165 $x202)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x6 $x203)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x10 $x169)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x36 $x162)))
 (let (($x157 (=> $x98 $x180)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x198 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x160 (= (_ bv0 2) ?x198)))
 (let (($x180 (= $x160 true)))
 (let (($x172 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var201X)))
 (let ((?x34 (input.spec-%var-x-1.1.1 input.ind-%var201X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var201X)))
 (=> $x76 (= ?x34 ?x128))))))
 ))
 (let (($x189 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x181 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var200X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var200X)))
 (= $x76 $x181))))
 ))
 (let (($x122 (and $x189 $x172)))
 (let (($x202 (= $x122 true)))
 (let (($x35 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var195X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x173))))
 (let ((?x34 (input.spec-%var-x-1.1.1 input.ind-%var195X)))
 (let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var195X)))
 (=> $x76 (= ?x34 ?x113))))))))
 ))
 (let (($x121 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-1.0.1 input.ind-%var194X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X input.dst.llvm-%n)))))
 ))
 (let (($x83 (and $x121 $x35)))
 (let (($x178 (= $x83 true)))
 (let ((?x108 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x61 (concat ?x107 (concat ?x99 ?x108)))))
 (let (($x171 (= input.dst.llvm-%n ?x115)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x28 (concat ?x59 (concat ?x54 ?x65)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x150 (and $x117 $x171)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x50)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x125)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x38 $x87)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x39 $x23)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x55 $x90)))
 (let (($x58 (and (not $x15) $x91)))
 (let (($x136 (and (and (and (and (and (and $x58 $x20) $x31) $x45) $x74) $x57) $x96)))
 (let (($x27 (and $x136 $x7)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x24 (or false (or false (and (and true (or $x32 $x112)) (or $x40 $x79))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x5 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x51 (and (and (and $x5 $x26) $x27) $x150)))
 (let (($x116 (and true $x51)))
 (let (($x164 (= $x116 true)))
 (let (($x200 (= $x164 true)))
 (let (($x199 (= $x200 true)))
 (let (($x165 (and $x199 $x178)))
 (let (($x203 (and $x165 $x202)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x6 $x203)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x10 $x169)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x36 $x162)))
 (let (($x157 (=> $x98 $x180)))
 (not $x157))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x132 (= $x151 true)))
 (let (($x130 (= $x132 true)))
 (let (($x146 (forall ((input.ind-%var213X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var213X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var213X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var213X)))
 (=> $x121 (= ?x113 ?x123))))))
 ))
 (let (($x134 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var212X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var212X)))
 (= $x121 $x119))))
 ))
 (let (($x140 (and $x134 $x146)))
 (let (($x70 (= $x140 true)))
 (let (($x73 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var207X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x180))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var207X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var207X)))
 (=> $x121 (= ?x113 ?x42))))))))
 ))
 (let (($x142 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (= $x121 (and (bvule (_ bv0 32) input.ind-%var206X) (bvult input.ind-%var206X input.dst.llvm-%n)))))
 ))
 (let (($x187 (and $x142 $x73)))
 (let (($x69 (= $x187 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x115 (concat ?x108 (concat ?x107 ?x61)))))
 (let (($x150 (= input.dst.llvm-%n ?x171)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x88 (concat ?x54 (concat ?x92 ?x63)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x51 (and $x117 $x150)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x78)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x74)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x45 $x38)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x64 $x75)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x81 (not $x21)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x81)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x53 (not $x41)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x17 $x19)))
 (let (($x58 (and (not $x15) $x53)))
 (let (($x7 (and (and (and (and (and (and $x58 $x20) $x95) $x71) $x18) $x23) $x13)))
 (let (($x27 (and $x7 $x57)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x148 (or false (or false (and (and true (or $x12 $x118)) (or $x156 $x85))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x148)))
 (let (($x29 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x200 (and (and (and $x29 $x90) $x27) $x51)))
 (let (($x199 (and true $x200)))
 (let (($x182 (= $x199 true)))
 (let (($x76 (= $x182 true)))
 (let (($x197 (= $x76 true)))
 (let (($x60 (and $x197 $x69)))
 (let (($x111 (and $x60 $x70)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x48 $x111)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x170 (and $x166 $x191)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x159 $x170)))
 (let (($x138 (=> $x144 $x130)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x151 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x132 (= $x151 true)))
 (let (($x130 (= $x132 true)))
 (let (($x146 (forall ((input.ind-%var213X (_ BitVec 32)) )(let ((?x123 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var213X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var213X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var213X)))
 (=> $x121 (= ?x113 ?x123))))))
 ))
 (let (($x134 (forall ((input.ind-%var212X (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var212X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var212X)))
 (= $x121 $x119))))
 ))
 (let (($x140 (and $x134 $x146)))
 (let (($x70 (= $x140 true)))
 (let (($x73 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var207X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x180))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var207X)))
 (let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var207X)))
 (=> $x121 (= ?x113 ?x42))))))))
 ))
 (let (($x142 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x121 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (= $x121 (and (bvule (_ bv0 32) input.ind-%var206X) (bvult input.ind-%var206X input.dst.llvm-%n)))))
 ))
 (let (($x187 (and $x142 $x73)))
 (let (($x69 (= $x187 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x115 (concat ?x108 (concat ?x107 ?x61)))))
 (let (($x150 (= input.dst.llvm-%n ?x171)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x88 (concat ?x54 (concat ?x92 ?x63)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x51 (and $x117 $x150)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x78)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x74)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x45 $x38)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x64 $x75)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x81 (not $x21)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x81)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x53 (not $x41)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x17 $x19)))
 (let (($x58 (and (not $x15) $x53)))
 (let (($x7 (and (and (and (and (and (and $x58 $x20) $x95) $x71) $x18) $x23) $x13)))
 (let (($x27 (and $x7 $x57)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x148 (or false (or false (and (and true (or $x12 $x118)) (or $x156 $x85))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x148)))
 (let (($x29 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x200 (and (and (and $x29 $x90) $x27) $x51)))
 (let (($x199 (and true $x200)))
 (let (($x182 (= $x199 true)))
 (let (($x76 (= $x182 true)))
 (let (($x197 (= $x76 true)))
 (let (($x60 (and $x197 $x69)))
 (let (($x111 (and $x60 $x70)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x191 (and $x48 $x111)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x170 (and $x166 $x191)))
 (let (($x159 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x144 (and $x159 $x170)))
 (let (($x138 (=> $x144 $x130)))
 (not $x138))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000034)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000128)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000037)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000012b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000034)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000128)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000034) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000012b)
                        (k!0 #x0000012a)
                        (k!0 #x00000129)
                        (k!0 #x00000128))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xebd73ecc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8139ee8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x3bcfc700)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8139eeb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xebd73ecf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8139ee8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xebd73ecc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xebd73ecd) #xff
    (ite (= x!0 #xe8139eea) #xcf
    (ite (= x!0 #xebd73ecc) #xff
    (ite (= x!0 #x3bcfc703) #x00
    (ite (= x!0 #xebd73ecf) #xff
    (ite (= x!0 #x3bcfc701) #x00
    (ite (= x!0 #xebd73ece) #xff
    (ite (= x!0 #x3bcfc702) #x00
    (ite (= x!0 #x3bcfc700) #x00
    (ite (= x!0 #xe8139eeb) #x3b
    (ite (= x!0 #xe8139ee8) #x00
      #xc7))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x169 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x190 (= $x169 true)))
 (let (($x149 (= $x190 true)))
 (let (($x158 (forall ((input.ind-%var241X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var241X)))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var241X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var241X)))
 (=> $x142 (= ?x42 ?x189))))))
 ))
 (let (($x128 (forall ((input.ind-%var240X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var240X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var240X)))
 (= $x142 $x83))))
 ))
 (let (($x129 (and $x128 $x158)))
 (let (($x105 (= $x129 true)))
 (let (($x34 (forall ((input.ind-%var235X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var235X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x130))))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var235X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var235X)))
 (=> $x142 (= ?x42 ?x135))))))))
 ))
 (let (($x160 (forall ((input.ind-%var234X (_ BitVec 32)) )(let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var234X)))
 (= $x142 (and (bvule (_ bv0 32) input.ind-%var234X) (bvult input.ind-%var234X input.dst.llvm-%n)))))
 ))
 (let (($x167 (and $x160 $x34)))
 (let (($x131 (= $x167 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x171 (concat ?x61 (concat ?x108 ?x115)))))
 (let (($x51 (= input.dst.llvm-%n ?x150)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x65 (concat ?x92 (concat ?x59 ?x22)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x200 (and $x117 $x51)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x87)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x18)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x71 $x45)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x31 $x9)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x86 $x55)))
 (let (($x58 (and (not $x15) $x41)))
 (let (($x57 (and (and (and (and (and (and $x58 $x20) $x80) $x125) $x39) $x75) $x136)))
 (let (($x27 (and $x57 $x23)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x116 (or false (or false (and (and true (or $x44 $x40)) (or $x174 $x24))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x52 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x76 (and (and (and $x52 $x19) $x27) $x200)))
 (let (($x197 (and true $x76)))
 (let (($x145 (= $x197 true)))
 (let (($x121 (= $x145 true)))
 (let (($x143 (= $x121 true)))
 (let (($x30 (and $x143 $x131)))
 (let (($x46 (and $x30 $x105)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x203 (and $x10 $x46)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x82 (and $x110 $x203)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x196 $x82)))
 (let (($x163 (=> $x179 $x149)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x169 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x190 (= $x169 true)))
 (let (($x149 (= $x190 true)))
 (let (($x158 (forall ((input.ind-%var241X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var241X)))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var241X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var241X)))
 (=> $x142 (= ?x42 ?x189))))))
 ))
 (let (($x128 (forall ((input.ind-%var240X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var240X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var240X)))
 (= $x142 $x83))))
 ))
 (let (($x129 (and $x128 $x158)))
 (let (($x105 (= $x129 true)))
 (let (($x34 (forall ((input.ind-%var235X (_ BitVec 32)) )(let ((?x144 (bvadd (bvmul input.ind-%var235X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv1 32))) (select input.dst.llvm-mem ?x144))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x144 (_ bv2 32))) ?x130))))
 (let ((?x42 (input.spec-%var-x-1.1.1 input.ind-%var235X)))
 (let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var235X)))
 (=> $x142 (= ?x42 ?x135))))))))
 ))
 (let (($x160 (forall ((input.ind-%var234X (_ BitVec 32)) )(let (($x142 (input.spec-%var-x-1.0.1 input.ind-%var234X)))
 (= $x142 (and (bvule (_ bv0 32) input.ind-%var234X) (bvult input.ind-%var234X input.dst.llvm-%n)))))
 ))
 (let (($x167 (and $x160 $x34)))
 (let (($x131 (= $x167 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x171 (concat ?x61 (concat ?x108 ?x115)))))
 (let (($x51 (= input.dst.llvm-%n ?x150)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x65 (concat ?x92 (concat ?x59 ?x22)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x200 (and $x117 $x51)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x87)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x18)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x64)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x71 $x45)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x31 $x9)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x86 $x55)))
 (let (($x58 (and (not $x15) $x41)))
 (let (($x57 (and (and (and (and (and (and $x58 $x20) $x80) $x125) $x39) $x75) $x136)))
 (let (($x27 (and $x57 $x23)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x116 (or false (or false (and (and true (or $x44 $x40)) (or $x174 $x24))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x116)))
 (let (($x52 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x76 (and (and (and $x52 $x19) $x27) $x200)))
 (let (($x197 (and true $x76)))
 (let (($x145 (= $x197 true)))
 (let (($x121 (= $x145 true)))
 (let (($x143 (= $x121 true)))
 (let (($x30 (and $x143 $x131)))
 (let (($x46 (and $x30 $x105)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x203 (and $x10 $x46)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x82 (and $x110 $x203)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x196 $x82)))
 (let (($x163 (=> $x179 $x149)))
 (not $x163))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe2546404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x511d01e8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x737e5900)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x511d01eb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe2546407)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x511d01e8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe2546404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe2546405) #x00
    (ite (= x!0 #x511d01ea) #x7e
    (ite (= x!0 #xe2546404) #x00
    (ite (= x!0 #x737e5903) #x00
    (ite (= x!0 #xe2546407) #x80
    (ite (= x!0 #x737e5901) #x00
    (ite (= x!0 #xe2546406) #x00
    (ite (= x!0 #x511d01e9) #x59
    (ite (= x!0 #x737e5902) #x00
    (ite (= x!0 #x737e5900) #x00
    (ite (= x!0 #x511d01e8) #x00
      #x73))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x191 (= $x180 true)))
 (let (($x202 (= $x191 true)))
 (let (($x165 (forall ((input.ind-%var269X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var269X)))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var269X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var269X)))
 (=> $x160 (= ?x135 ?x134))))))
 ))
 (let (($x123 (forall ((input.ind-%var268X (_ BitVec 32)) )(let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var268X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var268X)))
 (= $x160 $x187))))
 ))
 (let (($x109 (and $x123 $x165)))
 (let (($x98 (= $x109 true)))
 (let (($x113 (forall ((input.ind-%var263X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var263X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x149))))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var263X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var263X)))
 (=> $x160 (= ?x135 ?x89))))))))
 ))
 (let (($x132 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var262X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var262X) (bvult input.ind-%var262X input.dst.llvm-%n)))))
 ))
 (let (($x176 (and $x132 $x113)))
 (let (($x201 (= $x176 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x150 (concat ?x115 (concat ?x61 ?x171)))))
 (let (($x200 (= input.dst.llvm-%n ?x51)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x63 (concat ?x59 (concat ?x54 ?x93)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x76 (and $x117 $x200)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x38)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x39)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x125 $x71)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x95 $x96)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x81 $x14)))
 (let (($x33 (not $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x53 $x91)))
 (let (($x68 (not $x97)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x112 $x17)))
 (let (($x58 (and (not $x15) $x68)))
 (let (($x23 (and (and (and (and (and (and $x58 $x20) $x62) $x74) $x64) $x9) $x7)))
 (let (($x27 (and $x23 $x75)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x199 (or false (or false (and (and true (or $x133 $x156)) (or $x26 $x148))))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x199)))
 (let (($x25 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x121 (and (and (and $x25 $x55) $x27) $x76)))
 (let (($x143 (and true $x121)))
 (let (($x188 (= $x143 true)))
 (let (($x142 (= $x188 true)))
 (let (($x157 (= $x142 true)))
 (let (($x11 (and $x157 $x201)))
 (let (($x94 (and $x11 $x98)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x166 $x94)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x183 (and $x36 $x111)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x193 $x183)))
 (let (($x181 (=> $x172 $x202)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x180 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x191 (= $x180 true)))
 (let (($x202 (= $x191 true)))
 (let (($x165 (forall ((input.ind-%var269X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var269X)))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var269X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var269X)))
 (=> $x160 (= ?x135 ?x134))))))
 ))
 (let (($x123 (forall ((input.ind-%var268X (_ BitVec 32)) )(let (($x187 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var268X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var268X)))
 (= $x160 $x187))))
 ))
 (let (($x109 (and $x123 $x165)))
 (let (($x98 (= $x109 true)))
 (let (($x113 (forall ((input.ind-%var263X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var263X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x149))))
 (let ((?x135 (input.spec-%var-x-1.1.1 input.ind-%var263X)))
 (let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var263X)))
 (=> $x160 (= ?x135 ?x89))))))))
 ))
 (let (($x132 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x160 (input.spec-%var-x-1.0.1 input.ind-%var262X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var262X) (bvult input.ind-%var262X input.dst.llvm-%n)))))
 ))
 (let (($x176 (and $x132 $x113)))
 (let (($x201 (= $x176 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x150 (concat ?x115 (concat ?x61 ?x171)))))
 (let (($x200 (= input.dst.llvm-%n ?x51)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x63 (concat ?x59 (concat ?x54 ?x93)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x76 (and $x117 $x200)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x38)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x39)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x125 $x71)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x95 $x96)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x81 $x14)))
 (let (($x33 (not $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x53 $x91)))
 (let (($x68 (not $x97)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x112 $x17)))
 (let (($x58 (and (not $x15) $x68)))
 (let (($x23 (and (and (and (and (and (and $x58 $x20) $x62) $x74) $x64) $x9) $x7)))
 (let (($x27 (and $x23 $x75)))
 (let (($x148 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x40 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x40)))
 (let (($x199 (or false (or false (and (and true (or $x133 $x156)) (or $x26 $x148))))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x199)))
 (let (($x25 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x121 (and (and (and $x25 $x55) $x27) $x76)))
 (let (($x143 (and true $x121)))
 (let (($x188 (= $x143 true)))
 (let (($x142 (= $x188 true)))
 (let (($x157 (= $x142 true)))
 (let (($x11 (and $x157 $x201)))
 (let (($x94 (and $x11 $x98)))
 (let (($x166 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x166 $x94)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x183 (and $x36 $x111)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x193 $x183)))
 (let (($x181 (=> $x172 $x202)))
 (not $x181))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (forall ((input.ind-%var291X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var291X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x181))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var291X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var291X)))
 (=> $x132 (= ?x89 ?x69))))))))
 ))
 (let (($x204 (forall ((input.ind-%var290X (_ BitVec 32)) )(let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var290X)))
 (= $x132 (and (bvule (_ bv0 32) input.ind-%var290X) (bvult input.ind-%var290X (_ bv0 32))))))
 ))
 (let (($x223 (and $x204 $x222)))
 (let (($x203 (= true true)))
 (let (($x224 (and $x203 $x223)))
 (let (($x225 (= $x224 true)))
 (let (($x127 (forall ((input.ind-%var285X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var285X)))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var285X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var285X)))
 (=> $x132 (= ?x89 ?x16))))))
 ))
 (let (($x120 (forall ((input.ind-%var284X (_ BitVec 32)) )(let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var284X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var284X)))
 (= $x132 $x131))))
 ))
 (let (($x144 (and $x120 $x127)))
 (let (($x8 (= $x144 true)))
 (let (($x192 (forall ((input.ind-%var279X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var279X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x181))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var279X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var279X)))
 (=> $x132 (= ?x89 ?x69))))))))
 ))
 (let (($x190 (forall ((input.ind-%var278X (_ BitVec 32)) )(let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (= $x132 (and (bvule (_ bv0 32) input.ind-%var278X) (bvult input.ind-%var278X input.dst.llvm-%n)))))
 ))
 (let (($x72 (and $x190 $x192)))
 (let (($x5 (= $x72 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x51 (concat ?x171 (concat ?x115 ?x150)))))
 (let (($x76 (= input.dst.llvm-%n ?x200)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x22 (concat ?x54 (concat ?x92 ?x47)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x121 (and $x117 $x76)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x45)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x64)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x74 $x125)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x80 $x13)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x84 (not $x14)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x97 (not $x91)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x118 $x86)))
 (let (($x58 (and (not $x15) $x97)))
 (let (($x75 (and (and (and (and (and (and $x58 $x20) $x50) $x18) $x31) $x96) $x57)))
 (let (($x27 (and $x75 $x9)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x197 (or false (or false (and (and true (or $x79 $x174)) (or $x90 $x116))))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x197)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and (and (and $x6 $x17) $x27) $x121)))
 (let (($x157 (and true $x142)))
 (let (($x198 (= $x157 true)))
 (let (($x160 (= $x198 true)))
 (let (($x138 (= $x160 true)))
 (let (($x154 (and $x138 $x5)))
 (let (($x46 (and $x154 $x8)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x35 (and $x110 $x46)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x146 (and $x137 $x35)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x43 $x146)))
 (let (($x226 (=> $x130 $x225)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (forall ((input.ind-%var291X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var291X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x181))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var291X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var291X)))
 (=> $x132 (= ?x89 ?x69))))))))
 ))
 (let (($x204 (forall ((input.ind-%var290X (_ BitVec 32)) )(let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var290X)))
 (= $x132 (and (bvule (_ bv0 32) input.ind-%var290X) (bvult input.ind-%var290X (_ bv0 32))))))
 ))
 (let (($x223 (and $x204 $x222)))
 (let (($x203 (= true true)))
 (let (($x224 (and $x203 $x223)))
 (let (($x225 (= $x224 true)))
 (let (($x127 (forall ((input.ind-%var285X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var285X)))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var285X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var285X)))
 (=> $x132 (= ?x89 ?x16))))))
 ))
 (let (($x120 (forall ((input.ind-%var284X (_ BitVec 32)) )(let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var284X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var284X)))
 (= $x132 $x131))))
 ))
 (let (($x144 (and $x120 $x127)))
 (let (($x8 (= $x144 true)))
 (let (($x192 (forall ((input.ind-%var279X (_ BitVec 32)) )(let ((?x172 (bvadd (bvmul input.ind-%var279X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x181))))
 (let ((?x89 (input.spec-%var-x-1.1.1 input.ind-%var279X)))
 (let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var279X)))
 (=> $x132 (= ?x89 ?x69))))))))
 ))
 (let (($x190 (forall ((input.ind-%var278X (_ BitVec 32)) )(let (($x132 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (= $x132 (and (bvule (_ bv0 32) input.ind-%var278X) (bvult input.ind-%var278X input.dst.llvm-%n)))))
 ))
 (let (($x72 (and $x190 $x192)))
 (let (($x5 (= $x72 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x200 (concat ?x51 (concat ?x171 (concat ?x115 ?x150)))))
 (let (($x76 (= input.dst.llvm-%n ?x200)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x22 (concat ?x54 (concat ?x92 ?x47)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x121 (and $x117 $x76)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x45)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x64)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x74 $x125)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x80 $x13)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x84 (not $x14)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x97 (not $x91)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x118 $x86)))
 (let (($x58 (and (not $x15) $x97)))
 (let (($x75 (and (and (and (and (and (and $x58 $x20) $x50) $x18) $x31) $x96) $x57)))
 (let (($x27 (and $x75 $x9)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x197 (or false (or false (and (and true (or $x79 $x174)) (or $x90 $x116))))))
 (let (($x17 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x197)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and (and (and $x6 $x17) $x27) $x121)))
 (let (($x157 (and true $x142)))
 (let (($x198 (= $x157 true)))
 (let (($x160 (= $x198 true)))
 (let (($x138 (= $x160 true)))
 (let (($x154 (and $x138 $x5)))
 (let (($x46 (and $x154 $x8)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x35 (and $x110 $x46)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x146 (and $x137 $x35)))
 (let (($x43 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x130 (and $x43 $x146)))
 (let (($x226 (=> $x130 $x225)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var290X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var291X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000003) #x02
    (ite (= x!0 #x40000002) #xff
    (ite (= x!0 #x00000004) #xfc
    (ite (= x!0 #x40000000) #xc9
    (ite (= x!0 #x40000001) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x40000003)
                          (k!2 #x40000002)
                          (k!2 #x40000001)
                          (k!2 #x40000000))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var290X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x822f5170)
  (define-fun input.ind-%var291X!1 () (_ BitVec 32)
    #x28958000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08a70001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x08a90ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x822f5173)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x360f41df)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x822f5170)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x360f41dd) #x00
    (ite (= x!0 #x822f5172) #xa9
    (ite (= x!0 #x360f41dc) #x01
    (ite (= x!0 #x360f41df) #x08
    (ite (= x!0 #x08a90ffb) #x00
    (ite (= x!0 #x360f41de) #xa7
    (ite (= x!0 #x08a90ffa) #x00
    (ite (= x!0 #x08a90ff9) #x00
    (ite (= x!0 #x08a90ff8) #x00
    (ite (= x!0 #x822f5173) #x08
    (ite (= x!0 #x822f5170) #xf8
      #x0f))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08a70001 x!0)
         (ite (bvule #x08a70002 x!0)
              (ite (bvule #x28958000 x!0) #x28958000 #x08a70002)
              #x08a70001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x28958000) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var325X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x177))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var325X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var325X)))
 (=> $x190 (= ?x69 ?x226))))))))
 ))
 (let (($x218 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var324X)))
 (= $x190 (and (bvule (_ bv0 32) input.ind-%var324X) (bvult input.ind-%var324X (_ bv0 32))))))
 ))
 (let (($x124 (and $x218 $x122)))
 (let (($x207 (= true true)))
 (let (($x220 (and $x207 $x124)))
 (let (($x206 (= $x220 true)))
 (let (($x123 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x109 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var319X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var319X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var319X)))
 (=> $x190 (= ?x69 ?x109))))))
 ))
 (let (($x34 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var318X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var318X)))
 (= $x190 $x83))))
 ))
 (let (($x175 (and $x34 $x123)))
 (let (($x98 (= $x175 true)))
 (let (($x12 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var313X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x177))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var313X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var313X)))
 (=> $x190 (= ?x69 ?x226))))))))
 ))
 (let (($x202 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var312X)))
 (= $x190 (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X input.dst.llvm-%n)))))
 ))
 (let (($x101 (and $x202 $x12)))
 (let (($x182 (= $x101 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x200 (concat ?x150 (concat ?x171 ?x51)))))
 (let (($x121 (= input.dst.llvm-%n ?x76)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x93 (concat ?x92 (concat ?x59 ?x28)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x142 (and $x117 $x121)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x71)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x31)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x18 $x74)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x62 $x136)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x40 $x112)))
 (let (($x58 (and (not $x15) $x91)))
 (let (($x9 (and (and (and (and (and (and $x58 $x20) $x78) $x39) $x95) $x13) $x23)))
 (let (($x27 (and $x9 $x96)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x143 (or false (or false (and (and true (or $x85 $x26)) (or $x19 $x199))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x48 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and (and (and $x48 $x86) $x27) $x142)))
 (let (($x138 (and true $x160)))
 (let (($x151 (= $x138 true)))
 (let (($x132 (= $x151 true)))
 (let (($x163 (= $x132 true)))
 (let (($x158 (and $x163 $x182)))
 (let (($x30 (and $x158 $x98)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x36 $x30)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x167 (and $x196 $x73)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x66 $x167)))
 (let (($x221 (=> $x128 $x206)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var325X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x177))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var325X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var325X)))
 (=> $x190 (= ?x69 ?x226))))))))
 ))
 (let (($x218 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var324X)))
 (= $x190 (and (bvule (_ bv0 32) input.ind-%var324X) (bvult input.ind-%var324X (_ bv0 32))))))
 ))
 (let (($x124 (and $x218 $x122)))
 (let (($x207 (= true true)))
 (let (($x220 (and $x207 $x124)))
 (let (($x206 (= $x220 true)))
 (let (($x123 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x109 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var319X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var319X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var319X)))
 (=> $x190 (= ?x69 ?x109))))))
 ))
 (let (($x34 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x83 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var318X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var318X)))
 (= $x190 $x83))))
 ))
 (let (($x175 (and $x34 $x123)))
 (let (($x98 (= $x175 true)))
 (let (($x12 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var313X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x177))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var313X)))
 (let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var313X)))
 (=> $x190 (= ?x69 ?x226))))))))
 ))
 (let (($x202 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-1.0.1 input.ind-%var312X)))
 (= $x190 (and (bvule (_ bv0 32) input.ind-%var312X) (bvult input.ind-%var312X input.dst.llvm-%n)))))
 ))
 (let (($x101 (and $x202 $x12)))
 (let (($x182 (= $x101 true)))
 (let ((?x51 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x200 (concat ?x150 (concat ?x171 ?x51)))))
 (let (($x121 (= input.dst.llvm-%n ?x76)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x93 (concat ?x92 (concat ?x59 ?x28)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x142 (and $x117 $x121)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x71)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x31)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x125)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x18 $x74)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (and $x62 $x136)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x40 $x112)))
 (let (($x58 (and (not $x15) $x91)))
 (let (($x9 (and (and (and (and (and (and $x58 $x20) $x78) $x39) $x95) $x13) $x23)))
 (let (($x27 (and $x9 $x96)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x143 (or false (or false (and (and true (or $x85 $x26)) (or $x19 $x199))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x48 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and (and (and $x48 $x86) $x27) $x142)))
 (let (($x138 (and true $x160)))
 (let (($x151 (= $x138 true)))
 (let (($x132 (= $x151 true)))
 (let (($x163 (= $x132 true)))
 (let (($x158 (and $x163 $x182)))
 (let (($x30 (and $x158 $x98)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x36 $x30)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x167 (and $x196 $x73)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x66 $x167)))
 (let (($x221 (=> $x128 $x206)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var324X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var325X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000003) #x02
    (ite (= x!0 #x40000002) #xff
    (ite (= x!0 #x00000004) #xfc
    (ite (= x!0 #x40000000) #xc9
    (ite (= x!0 #x40000001) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x40000003)
                          (k!2 #x40000002)
                          (k!2 #x40000001)
                          (k!2 #x40000000))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var324X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var325X!1 () (_ BitVec 32)
    #x28958000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x822f5170)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08a70001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x08a90ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x822f5173)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x360f41df)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x822f5170)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x360f41dd) #x00
    (ite (= x!0 #x822f5172) #xa9
    (ite (= x!0 #x360f41dc) #x01
    (ite (= x!0 #x08a90ff9) #x00
    (ite (= x!0 #x360f41df) #x08
    (ite (= x!0 #x08a90ff8) #x00
    (ite (= x!0 #x08a90ffb) #x00
    (ite (= x!0 #x360f41de) #xa7
    (ite (= x!0 #x08a90ffa) #x00
    (ite (= x!0 #x822f5173) #x08
    (ite (= x!0 #x822f5170) #xf8
      #x0f))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08a70001 x!0)
         (ite (bvule #x08a70002 x!0)
              (ite (bvule #x28958000 x!0) #x28958000 #x08a70002)
              #x08a70001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x28958000) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x176 (forall ((input.ind-%var363X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var363X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x217))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var363X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var363X)))
 (=> $x202 (= ?x226 ?x221))))))))
 ))
 (let (($x149 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var362X)))
 (= $x202 (and (bvule (_ bv0 32) input.ind-%var362X) (bvult input.ind-%var362X input.dst.llvm-%x)))))
 ))
 (let (($x187 (and $x149 $x176)))
 (let (($x211 (= true true)))
 (let (($x67 (and $x211 $x187)))
 (let (($x215 (= $x67 true)))
 (let (($x120 (forall ((input.ind-%var357X (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var357X)))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var357X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var357X)))
 (=> $x202 (= ?x226 ?x144))))))
 ))
 (let (($x113 (forall ((input.ind-%var356X (_ BitVec 32)) )(let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var356X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var356X)))
 (= $x202 $x82))))
 ))
 (let (($x60 (and $x113 $x120)))
 (let (($x8 (= $x60 true)))
 (let (($x44 (forall ((input.ind-%var351X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var351X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x217))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var351X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var351X)))
 (=> $x202 (= ?x226 ?x221))))))))
 ))
 (let (($x168 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var350X)))
 (= $x202 (and (bvule (_ bv0 32) input.ind-%var350X) (bvult input.ind-%var350X input.dst.llvm-%n)))))
 ))
 (let (($x104 (and $x168 $x44)))
 (let (($x145 (= $x104 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x76 (concat ?x51 (concat ?x150 ?x200)))))
 (let (($x142 (= input.dst.llvm-%n ?x121)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x47 (concat ?x59 (concat ?x54 ?x88)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x160 (and $x117 $x142)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x125)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x95)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x39 $x18)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x50 $x7)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x81 (not $x21)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x81)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x53 (not $x41)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x156 $x118)))
 (let (($x58 (and (not $x15) $x53)))
 (let (($x96 (and (and (and (and (and (and $x58 $x20) $x87) $x64) $x80) $x136) $x75)))
 (let (($x27 (and $x96 $x13)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x157 (or false (or false (and (and true (or $x24 $x90)) (or $x55 $x197))))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x10 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x132 (and (and (and $x10 $x112) $x27) $x160)))
 (let (($x163 (and true $x132)))
 (let (($x169 (= $x163 true)))
 (let (($x190 (= $x169 true)))
 (let (($x186 (= $x190 true)))
 (let (($x173 (and $x186 $x145)))
 (let (($x201 (and $x173 $x8)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x137 $x201)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x178 (and $x42 $x105)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x165 (and $x193 $x178)))
 (let (($x152 (=> $x165 $x215)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x176 (forall ((input.ind-%var363X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var363X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x217))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var363X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var363X)))
 (=> $x202 (= ?x226 ?x221))))))))
 ))
 (let (($x149 (forall ((input.ind-%var362X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var362X)))
 (= $x202 (and (bvule (_ bv0 32) input.ind-%var362X) (bvult input.ind-%var362X input.dst.llvm-%x)))))
 ))
 (let (($x187 (and $x149 $x176)))
 (let (($x211 (= true true)))
 (let (($x67 (and $x211 $x187)))
 (let (($x215 (= $x67 true)))
 (let (($x120 (forall ((input.ind-%var357X (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var357X)))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var357X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var357X)))
 (=> $x202 (= ?x226 ?x144))))))
 ))
 (let (($x113 (forall ((input.ind-%var356X (_ BitVec 32)) )(let (($x82 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var356X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var356X)))
 (= $x202 $x82))))
 ))
 (let (($x60 (and $x113 $x120)))
 (let (($x8 (= $x60 true)))
 (let (($x44 (forall ((input.ind-%var351X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var351X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x217))))
 (let ((?x226 (input.spec-%var-x-1.1.1 input.ind-%var351X)))
 (let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var351X)))
 (=> $x202 (= ?x226 ?x221))))))))
 ))
 (let (($x168 (forall ((input.ind-%var350X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-1.0.1 input.ind-%var350X)))
 (= $x202 (and (bvule (_ bv0 32) input.ind-%var350X) (bvult input.ind-%var350X input.dst.llvm-%n)))))
 ))
 (let (($x104 (and $x168 $x44)))
 (let (($x145 (= $x104 true)))
 (let ((?x200 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x76 (concat ?x51 (concat ?x150 ?x200)))))
 (let (($x142 (= input.dst.llvm-%n ?x121)))
 (let ((?x88 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x47 (concat ?x59 (concat ?x54 ?x88)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x160 (and $x117 $x142)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x125)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x95)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x39 $x18)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x50 $x7)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x81 (not $x21)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x81)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x53 (not $x41)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x156 $x118)))
 (let (($x58 (and (not $x15) $x53)))
 (let (($x96 (and (and (and (and (and (and $x58 $x20) $x87) $x64) $x80) $x136) $x75)))
 (let (($x27 (and $x96 $x13)))
 (let (($x197 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x157 (or false (or false (and (and true (or $x24 $x90)) (or $x55 $x197))))))
 (let (($x112 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x157)))
 (let (($x10 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x132 (and (and (and $x10 $x112) $x27) $x160)))
 (let (($x163 (and true $x132)))
 (let (($x169 (= $x163 true)))
 (let (($x190 (= $x169 true)))
 (let (($x186 (= $x190 true)))
 (let (($x173 (and $x186 $x145)))
 (let (($x201 (and $x173 $x8)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x137 $x201)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x178 (and $x42 $x105)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x165 (and $x193 $x178)))
 (let (($x152 (=> $x165 $x215)))
 (not $x152)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var362X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0b042024)
  (define-fun input.ind-%var363X!1 () (_ BitVec 32)
    #x0910430c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x88002210)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0b042027)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0b042024)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000003) #x88
    (ite (= x!0 #xc0000000) #x10
    (ite (= x!0 #xc0000001) #x22
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0910430c) false
      (not (bvule (concat (k!2 #x0b042027)
                          (k!2 #x0b042026)
                          (k!2 #x0b042025)
                          (k!2 #x0b042024))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0910430c) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var362X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x862770f4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x17137c78)
  (define-fun input.ind-%var363X!1 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x17137c7b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x862770f7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x17137c78)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x862770f4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x862770f5) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000100 x!0)
         (ite (bvule #x00000101 x!0)
              (ite (bvule #x00200000 x!0) #x00200000 #x00000101)
              #x00000100)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00200000) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (forall ((input.ind-%var397X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var397X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x185))))
 (let ((?x221 (input.spec-%var-x-1.1.1 input.ind-%var397X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var397X)))
 (=> $x168 (= ?x221 ?x152))))))))
 ))
 (let (($x219 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var396X)))
 (= $x168 (and (bvule (_ bv0 32) input.ind-%var396X) (bvult input.ind-%var396X input.dst.llvm-%n)))))
 ))
 (let (($x162 (and $x219 $x73)))
 (let (($x216 (= true true)))
 (let (($x135 (and $x216 $x162)))
 (let (($x72 (= $x135 true)))
 (let (($x34 (forall ((input.ind-%var391X (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var391X)))
 (let ((?x221 (input.spec-%var-x-1.1.1 input.ind-%var391X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var391X)))
 (=> $x168 (= ?x221 ?x175))))))
 ))
 (let (($x192 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var390X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var390X)))
 (= $x168 $x183))))
 ))
 (let (($x11 (and $x192 $x34)))
 (let (($x98 (= $x11 true)))
 (let (($x133 (forall ((input.ind-%var385X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var385X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x185))))
 (let ((?x221 (input.spec-%var-x-1.1.1 input.ind-%var385X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var385X)))
 (=> $x168 (= ?x221 ?x152))))))))
 ))
 (let (($x209 (forall ((input.ind-%var384X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var384X)))
 (= $x168 (and (bvule (_ bv0 32) input.ind-%var384X) (bvult input.ind-%var384X input.dst.llvm-%n)))))
 ))
 (let (($x99 (and $x209 $x133)))
 (let (($x188 (= $x99 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x121 (concat ?x200 (concat ?x51 ?x76)))))
 (let (($x160 (= input.dst.llvm-%n ?x142)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x28 (concat ?x54 (concat ?x92 ?x65)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x132 (and $x117 $x160)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x74)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x80)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x64 $x39)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x78 $x57)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x174 $x40)))
 (let (($x58 (and (not $x15) $x41)))
 (let (($x13 (and (and (and (and (and (and $x58 $x20) $x38) $x31) $x62) $x7) $x9)))
 (let (($x27 (and $x13 $x136)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x138 (or false (or false (and (and true (or $x148 $x19)) (or $x17 $x143))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x166 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x190 (and (and (and $x166 $x118) $x27) $x132)))
 (let (($x186 (and true $x190)))
 (let (($x191 (= $x186 true)))
 (let (($x202 (= $x191 true)))
 (let (($x204 (= $x202 true)))
 (let (($x180 (and $x204 $x188)))
 (let (($x5 (and $x180 $x98)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x196 $x5)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x139 (and $x43 $x134)))
 (let (($x194 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x194 $x139)))
 (let (($x131 (=> $x127 $x72)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x73 (forall ((input.ind-%var397X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var397X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x185))))
 (let ((?x221 (input.spec-%var-x-1.1.1 input.ind-%var397X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var397X)))
 (=> $x168 (= ?x221 ?x152))))))))
 ))
 (let (($x219 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var396X)))
 (= $x168 (and (bvule (_ bv0 32) input.ind-%var396X) (bvult input.ind-%var396X input.dst.llvm-%n)))))
 ))
 (let (($x162 (and $x219 $x73)))
 (let (($x216 (= true true)))
 (let (($x135 (and $x216 $x162)))
 (let (($x72 (= $x135 true)))
 (let (($x34 (forall ((input.ind-%var391X (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var391X)))
 (let ((?x221 (input.spec-%var-x-1.1.1 input.ind-%var391X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var391X)))
 (=> $x168 (= ?x221 ?x175))))))
 ))
 (let (($x192 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var390X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var390X)))
 (= $x168 $x183))))
 ))
 (let (($x11 (and $x192 $x34)))
 (let (($x98 (= $x11 true)))
 (let (($x133 (forall ((input.ind-%var385X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var385X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x185))))
 (let ((?x221 (input.spec-%var-x-1.1.1 input.ind-%var385X)))
 (let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var385X)))
 (=> $x168 (= ?x221 ?x152))))))))
 ))
 (let (($x209 (forall ((input.ind-%var384X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-1.0.1 input.ind-%var384X)))
 (= $x168 (and (bvule (_ bv0 32) input.ind-%var384X) (bvult input.ind-%var384X input.dst.llvm-%n)))))
 ))
 (let (($x99 (and $x209 $x133)))
 (let (($x188 (= $x99 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x121 (concat ?x200 (concat ?x51 ?x76)))))
 (let (($x160 (= input.dst.llvm-%n ?x142)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x28 (concat ?x54 (concat ?x92 ?x65)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x132 (and $x117 $x160)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x74)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x80)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x64 $x39)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x78 $x57)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x174 $x40)))
 (let (($x58 (and (not $x15) $x41)))
 (let (($x13 (and (and (and (and (and (and $x58 $x20) $x38) $x31) $x62) $x7) $x9)))
 (let (($x27 (and $x13 $x136)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x138 (or false (or false (and (and true (or $x148 $x19)) (or $x17 $x143))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x166 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x190 (and (and (and $x166 $x118) $x27) $x132)))
 (let (($x186 (and true $x190)))
 (let (($x191 (= $x186 true)))
 (let (($x202 (= $x191 true)))
 (let (($x204 (= $x202 true)))
 (let (($x180 (and $x204 $x188)))
 (let (($x5 (and $x180 $x98)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x196 $x5)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x139 (and $x43 $x134)))
 (let (($x194 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x127 (and $x194 $x139)))
 (let (($x131 (=> $x127 $x72)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x101 (forall ((input.ind-%var415X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var415X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x162))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var415X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var415X)))
 (=> $x209 (= ?x152 ?x79))))))))
 ))
 (let (($x32 (forall ((input.ind-%var414X (_ BitVec 32)) )(let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var414X)))
 (= $x209 (and (bvule (_ bv0 32) input.ind-%var414X) (bvult input.ind-%var414X input.dst.llvm-%n)))))
 ))
 (let (($x83 (and $x32 $x101)))
 (let (($x52 (= true true)))
 (let (($x195 (and $x52 $x83)))
 (let (($x184 (= $x195 true)))
 (let (($x182 (forall ((input.ind-%var409X (_ BitVec 32)) )(let ((?x82 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var409X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var409X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var409X)))
 (=> $x209 (= ?x152 ?x82))))))
 ))
 (let (($x145 (forall ((input.ind-%var408X (_ BitVec 32)) )(let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var408X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var408X)))
 (= $x209 $x225))))
 ))
 (let (($x16 (and $x145 $x182)))
 (let (($x227 (= $x16 true)))
 (let (($x203 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var403X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x162))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var403X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var403X)))
 (=> $x209 (= ?x152 ?x79))))))))
 ))
 (let (($x210 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var402X)))
 (= $x209 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X input.dst.llvm-%n)))))
 ))
 (let (($x109 (and $x210 $x203)))
 (let (($x226 (= $x109 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x142 (concat ?x76 (concat ?x200 ?x121)))))
 (let (($x132 (= input.dst.llvm-%n ?x160)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x88 (concat ?x92 (concat ?x59 ?x63)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x190 (and $x117 $x132)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x18)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x62)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x31 $x64)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x87 $x23)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x81 $x14)))
 (let (($x33 (not $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x53 $x91)))
 (let (($x68 (not $x97)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x26 $x156)))
 (let (($x58 (and (not $x15) $x68)))
 (let (($x136 (and (and (and (and (and (and $x58 $x20) $x45) $x95) $x50) $x57) $x96)))
 (let (($x27 (and $x136 $x7)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x163 (or false (or false (and (and true (or $x116 $x55)) (or $x86 $x157))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x110 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x202 (and (and (and $x110 $x40) $x27) $x190)))
 (let (($x204 (and true $x202)))
 (let (($x114 (= $x204 true)))
 (let (($x168 (= $x114 true)))
 (let (($x218 (= $x168 true)))
 (let (($x141 (and $x218 $x226)))
 (let (($x123 (and $x141 $x227)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x42 $x123)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x222 (and $x159 $x181)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x66 $x222)))
 (let (($x177 (=> $x128 $x184)))
 (not $x177)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x101 (forall ((input.ind-%var415X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var415X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x162))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var415X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var415X)))
 (=> $x209 (= ?x152 ?x79))))))))
 ))
 (let (($x32 (forall ((input.ind-%var414X (_ BitVec 32)) )(let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var414X)))
 (= $x209 (and (bvule (_ bv0 32) input.ind-%var414X) (bvult input.ind-%var414X input.dst.llvm-%n)))))
 ))
 (let (($x83 (and $x32 $x101)))
 (let (($x52 (= true true)))
 (let (($x195 (and $x52 $x83)))
 (let (($x184 (= $x195 true)))
 (let (($x182 (forall ((input.ind-%var409X (_ BitVec 32)) )(let ((?x82 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var409X)))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var409X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var409X)))
 (=> $x209 (= ?x152 ?x82))))))
 ))
 (let (($x145 (forall ((input.ind-%var408X (_ BitVec 32)) )(let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var408X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var408X)))
 (= $x209 $x225))))
 ))
 (let (($x16 (and $x145 $x182)))
 (let (($x227 (= $x16 true)))
 (let (($x203 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var403X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x162))))
 (let ((?x152 (input.spec-%var-x-1.1.1 input.ind-%var403X)))
 (let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var403X)))
 (=> $x209 (= ?x152 ?x79))))))))
 ))
 (let (($x210 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x209 (input.spec-%var-x-1.0.1 input.ind-%var402X)))
 (= $x209 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X input.dst.llvm-%n)))))
 ))
 (let (($x109 (and $x210 $x203)))
 (let (($x226 (= $x109 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x200 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x160 (concat ?x142 (concat ?x76 (concat ?x200 ?x121)))))
 (let (($x132 (= input.dst.llvm-%n ?x160)))
 (let ((?x63 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x88 (concat ?x92 (concat ?x59 ?x63)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x190 (and $x117 $x132)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x18)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x62)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (and $x31 $x64)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x87 $x23)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x81 $x14)))
 (let (($x33 (not $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x53 $x91)))
 (let (($x68 (not $x97)))
 (let (($x156 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x26 $x156)))
 (let (($x58 (and (not $x15) $x68)))
 (let (($x136 (and (and (and (and (and (and $x58 $x20) $x45) $x95) $x50) $x57) $x96)))
 (let (($x27 (and $x136 $x7)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x163 (or false (or false (and (and true (or $x116 $x55)) (or $x86 $x157))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x110 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x202 (and (and (and $x110 $x40) $x27) $x190)))
 (let (($x204 (and true $x202)))
 (let (($x114 (= $x204 true)))
 (let (($x168 (= $x114 true)))
 (let (($x218 (= $x168 true)))
 (let (($x141 (and $x218 $x226)))
 (let (($x123 (and $x141 $x227)))
 (let (($x42 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x42 $x123)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x222 (and $x159 $x181)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x66 $x222)))
 (let (($x177 (=> $x128 $x184)))
 (not $x177)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x35 (spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var435X)))
 (let ((?x128 (bvadd (bvmul input.ind-%var435X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let (($x72 (and (bvule (_ bv0 32) input.ind-%var435X) (bvult input.ind-%var435X input.dst.llvm-%n))))
 (=> $x72 (= ?x85 ?x35))))))))
 ))
 (let (($x224 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x70 (spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var434X)))
 (let (($x72 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X input.dst.llvm-%n))))
 (= $x72 $x70))))
 ))
 (let (($x229 (and $x224 $x228)))
 (let (($x161 (= true true)))
 (let (($x230 (and $x161 $x229)))
 (let (($x231 (= $x230 true)))
 (let (($x144 (forall ((input.ind-%var427X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var427X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var427X)))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var427X)))
 (=> $x210 (= ?x79 ?x183))))))
 ))
 (let (($x188 (forall ((input.ind-%var426X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var426X)))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var426X)))
 (= $x210 $x206))))
 ))
 (let (($x146 (and $x188 $x144)))
 (let (($x124 (= $x146 true)))
 (let (($x12 (forall ((input.ind-%var421X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var421X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var421X)))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var421X)))
 (=> $x210 (= ?x79 ?x85))))))))
 ))
 (let (($x73 (forall ((input.ind-%var420X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var420X) (bvult input.ind-%var420X input.dst.llvm-%n))))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var420X)))
 (= $x210 $x72))))
 ))
 (let (($x100 (and $x73 $x12)))
 (let (($x221 (= $x100 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x160 (concat ?x121 (concat ?x76 ?x142)))))
 (let (($x190 (= input.dst.llvm-%n ?x132)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x65 (concat ?x59 (concat ?x54 ?x22)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x202 (and $x117 $x190)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x39)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x50)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x95 $x31)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x38 $x75)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x84 (not $x14)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x97 (not $x91)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x90 $x174)))
 (let (($x58 (and (not $x15) $x97)))
 (let (($x7 (and (and (and (and (and (and $x58 $x20) $x71) $x80) $x78) $x23) $x13)))
 (let (($x27 (and $x7 $x57)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x186 (or false (or false (and (and true (or $x199 $x17)) (or $x112 $x138))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x186)))
 (let (($x36 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x168 (and (and (and $x36 $x156) $x27) $x202)))
 (let (($x218 (and true $x168)))
 (let (($x208 (= $x218 true)))
 (let (($x209 (= $x208 true)))
 (let (($x149 (= $x209 true)))
 (let (($x205 (and $x149 $x221)))
 (let (($x189 (and $x205 $x124)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x43 $x189)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x122 (and $x193 $x111)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x165 (and $x25 $x122)))
 (let (($x232 (=> $x165 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x228 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x35 (spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var435X)))
 (let ((?x128 (bvadd (bvmul input.ind-%var435X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let (($x72 (and (bvule (_ bv0 32) input.ind-%var435X) (bvult input.ind-%var435X input.dst.llvm-%n))))
 (=> $x72 (= ?x85 ?x35))))))))
 ))
 (let (($x224 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x70 (spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var434X)))
 (let (($x72 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X input.dst.llvm-%n))))
 (= $x72 $x70))))
 ))
 (let (($x229 (and $x224 $x228)))
 (let (($x161 (= true true)))
 (let (($x230 (and $x161 $x229)))
 (let (($x231 (= $x230 true)))
 (let (($x144 (forall ((input.ind-%var427X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var427X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var427X)))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var427X)))
 (=> $x210 (= ?x79 ?x183))))))
 ))
 (let (($x188 (forall ((input.ind-%var426X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var426X)))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var426X)))
 (= $x210 $x206))))
 ))
 (let (($x146 (and $x188 $x144)))
 (let (($x124 (= $x146 true)))
 (let (($x12 (forall ((input.ind-%var421X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var421X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x83))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var421X)))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var421X)))
 (=> $x210 (= ?x79 ?x85))))))))
 ))
 (let (($x73 (forall ((input.ind-%var420X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var420X) (bvult input.ind-%var420X input.dst.llvm-%n))))
 (let (($x210 (input.spec-%var-x-1.0.1 input.ind-%var420X)))
 (= $x210 $x72))))
 ))
 (let (($x100 (and $x73 $x12)))
 (let (($x221 (= $x100 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x160 (concat ?x121 (concat ?x76 ?x142)))))
 (let (($x190 (= input.dst.llvm-%n ?x132)))
 (let ((?x22 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x65 (concat ?x59 (concat ?x54 ?x22)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x202 (and $x117 $x190)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x39)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x50)))
 (let ((?x64 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x64)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x95 $x31)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x38 $x75)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x81)))
 (let (($x84 (not $x14)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x84)))
 (let (($x53 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x53)))
 (let (($x97 (not $x91)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x90 $x174)))
 (let (($x58 (and (not $x15) $x97)))
 (let (($x7 (and (and (and (and (and (and $x58 $x20) $x71) $x80) $x78) $x23) $x13)))
 (let (($x27 (and $x7 $x57)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x186 (or false (or false (and (and true (or $x199 $x17)) (or $x112 $x138))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x186)))
 (let (($x36 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x168 (and (and (and $x36 $x156) $x27) $x202)))
 (let (($x218 (and true $x168)))
 (let (($x208 (= $x218 true)))
 (let (($x209 (= $x208 true)))
 (let (($x149 (= $x209 true)))
 (let (($x205 (and $x149 $x221)))
 (let (($x189 (and $x205 $x124)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x111 (and $x43 $x189)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x122 (and $x193 $x111)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x165 (and $x25 $x122)))
 (let (($x232 (=> $x165 $x231)))
 (not $x232)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080644)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000d40)
  (define-fun input.ind-%var435X!1 () (_ BitVec 32)
    #x00481055)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00481072)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x220020a4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080647)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000d43)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080644)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000d40)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00080647) #x22
    (ite (= x!0 #x00080644) #xa4
    (ite (= x!0 #x00000d42) #x48
    (ite (= x!0 #x232061fb) #x10
    (ite (= x!0 #x00080645) #x20
    (ite (= x!0 #x00000d40) #x72
    (ite (= x!0 #x00000d41) #x10
      #x00))))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!2 #x00000d43)
                        (k!2 #x00000d42)
                        (k!2 #x00000d41)
                        (k!2 #x00000d40))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00481055) #x10000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00080647)
                                     (k!2 #x00080646)
                                     (k!2 #x00080645)
                                     (k!2 #x00080644)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00080647)
                                     (k!2 #x00080646)
                                     (k!2 #x00080645)
                                     (k!2 #x00080644)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00080647)
                                     (k!2 #x00080646)
                                     (k!2 #x00080645)
                                     (k!2 #x00080644)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00080647)
                                     (k!2 #x00080646)
                                     (k!2 #x00080645)
                                     (k!2 #x00080644))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00481055) #x10000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var435X!1 () (_ BitVec 32)
    #x00019168)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6530bee4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00051172)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000a3a64)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6530bee7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x04000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6530bee4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x04000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x01000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x04000001) #x11
    (ite (= x!0 #x04000000) #x72
    (ite (= x!0 #x04000003) #x00
    (ite (= x!0 #x04000002) #x05
    (ite (= x!0 #x6530bee5) #x3a
    (ite (= x!0 #x000a3a66) #x00
    (ite (= x!0 #x00108005) #x00
    (ite (= x!0 #x6530bee7) #x00
    (ite (= x!0 #x6530bee4) #x64
    (ite (= x!0 #x000a3a65) #x00
    (ite (= x!0 #x000a3a64) #x00
    (ite (= x!0 #x00108007) #x00
    (ite (= x!0 #x00108004) #x00
    (ite (= x!0 #x000a3a67) #x00
    (ite (= x!0 #x00108006) #x00
      #x0a))))))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00019168) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!8 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #x6530bee7)
                                     (k!8 #x6530bee6)
                                     (k!8 #x6530bee5)
                                     (k!8 #x6530bee4)))))
            (a!2 (k!8 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #x6530bee7)
                                     (k!8 #x6530bee6)
                                     (k!8 #x6530bee5)
                                     (k!8 #x6530bee4)))))
            (a!3 (k!8 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #x6530bee7)
                                     (k!8 #x6530bee6)
                                     (k!8 #x6530bee5)
                                     (k!8 #x6530bee4)))))
            (a!4 (k!8 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!8 #x6530bee7)
                                     (k!8 #x6530bee6)
                                     (k!8 #x6530bee5)
                                     (k!8 #x6530bee4))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00051172 x!0)
         (ite (bvule #x00051173 x!0) #x00051173 #x00051172)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00019168) #x00000000
      (input.spec-%var-x-1.1.1 x!0))))
  (define-fun spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (= false true)))
 (let (($x153 (= $x187 true)))
 (let (($x104 (forall ((input.ind-%var471X (_ BitVec 32)) )(let ((?x226 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var471X)))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var471X)))
 (let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var471X)))
 (=> $x73 (= ?x85 ?x226))))))
 ))
 (let (($x131 (forall ((input.ind-%var470X (_ BitVec 32)) )(let (($x152 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var470X)))
 (let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var470X)))
 (= $x73 $x152))))
 ))
 (let (($x141 (and $x131 $x104)))
 (let (($x145 (= $x141 true)))
 (let (($x233 (forall ((input.ind-%var465X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var465X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x224))))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var465X)))
 (let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var465X)))
 (=> $x73 (= ?x85 ?x230))))))))
 ))
 (let (($x101 (forall ((input.ind-%var464X (_ BitVec 32)) )(let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var464X)))
 (= $x73 (and (bvule (_ bv0 32) input.ind-%var464X) (bvult input.ind-%var464X input.dst.llvm-%n)))))
 ))
 (let (($x110 (and $x101 $x233)))
 (let (($x24 (= $x110 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x132 (concat ?x142 (concat ?x121 ?x160)))))
 (let (($x202 (= input.dst.llvm-%n ?x190)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x63 (concat ?x54 (concat ?x92 ?x93)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x168 (and $x117 $x202)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x64)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x78)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x38)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x80 $x95)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x45 $x9)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x19 $x26)))
 (let (($x58 (and (not $x15) $x91)))
 (let (($x57 (and (and (and (and (and (and $x58 $x20) $x125) $x62) $x87) $x75) $x136)))
 (let (($x27 (and $x57 $x23)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x204 (or false (or false (and (and true (or $x197 $x86)) (or $x118 $x163))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x137 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x209 (and (and (and $x137 $x174) $x27) $x168)))
 (let (($x149 (and true $x209)))
 (let (($x212 (= $x149 true)))
 (let (($x210 (= $x212 true)))
 (let (($x135 (= $x210 true)))
 (let (($x61 (and $x135 $x24)))
 (let (($x8 (and $x61 $x145)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x227 (and $x159 $x8)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x194 $x227)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x6 $x175)))
 (let (($x217 (=> $x120 $x153)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x187 (= false true)))
 (let (($x153 (= $x187 true)))
 (let (($x104 (forall ((input.ind-%var471X (_ BitVec 32)) )(let ((?x226 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var471X)))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var471X)))
 (let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var471X)))
 (=> $x73 (= ?x85 ?x226))))))
 ))
 (let (($x131 (forall ((input.ind-%var470X (_ BitVec 32)) )(let (($x152 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var470X)))
 (let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var470X)))
 (= $x73 $x152))))
 ))
 (let (($x141 (and $x131 $x104)))
 (let (($x145 (= $x141 true)))
 (let (($x233 (forall ((input.ind-%var465X (_ BitVec 32)) )(let ((?x165 (bvadd (bvmul input.ind-%var465X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv1 32))) (select input.dst.llvm-mem ?x165))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x165 (_ bv2 32))) ?x224))))
 (let ((?x85 (input.spec-%var-x-1.1.1 input.ind-%var465X)))
 (let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var465X)))
 (=> $x73 (= ?x85 ?x230))))))))
 ))
 (let (($x101 (forall ((input.ind-%var464X (_ BitVec 32)) )(let (($x73 (input.spec-%var-x-1.0.1 input.ind-%var464X)))
 (= $x73 (and (bvule (_ bv0 32) input.ind-%var464X) (bvult input.ind-%var464X input.dst.llvm-%n)))))
 ))
 (let (($x110 (and $x101 $x233)))
 (let (($x24 (= $x110 true)))
 (let ((?x160 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x132 (concat ?x142 (concat ?x121 ?x160)))))
 (let (($x202 (= input.dst.llvm-%n ?x190)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x63 (concat ?x54 (concat ?x92 ?x93)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x168 (and $x117 $x202)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x64)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x78)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x38)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x80 $x95)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x45 $x9)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x33 $x21)))
 (let (($x14 (not $x81)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x68 $x41)))
 (let (($x91 (not $x53)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x19 $x26)))
 (let (($x58 (and (not $x15) $x91)))
 (let (($x57 (and (and (and (and (and (and $x58 $x20) $x125) $x62) $x87) $x75) $x136)))
 (let (($x27 (and $x57 $x23)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x204 (or false (or false (and (and true (or $x197 $x86)) (or $x118 $x163))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x137 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x209 (and (and (and $x137 $x174) $x27) $x168)))
 (let (($x149 (and true $x209)))
 (let (($x212 (= $x149 true)))
 (let (($x210 (= $x212 true)))
 (let (($x135 (= $x210 true)))
 (let (($x61 (and $x135 $x24)))
 (let (($x8 (and $x61 $x145)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x227 (and $x159 $x8)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x175 (and $x194 $x227)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x6 $x175)))
 (let (($x217 (=> $x120 $x153)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000884)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000080)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000887)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000083)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000884)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000080)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x80000083)
                        (k!0 #x80000082)
                        (k!0 #x80000081)
                        (k!0 #x80000080))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2f74e970)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb9383978)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb938397b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2f74e973)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb9383978)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2f74e970)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x31)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x87)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x62 $x80)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x71 $x96)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x81 (not $x21)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x81)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x53 (not $x41)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x55 $x90)))
 (let (($x58 (and (not $x15) $x53)))
 (let (($x23 (and (and (and (and (and (and $x58 $x20) $x74) $x50) $x38) $x9) $x7)))
 (let (($x27 (and $x23 $x75)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x218 (or false (or false (and (and true (or $x143 $x112)) (or $x40 $x186))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x16 (and $x26 $x27)))
 (let (($x133 (= $x16 true)))
 (let (($x82 (= $x133 true)))
 (let (($x128 (forall ((input.ind-%var510X (_ BitVec 32)) )(let ((?x124 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var510X)))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var510X)))
 (let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var510X)))
 (=> $x101 (= ?x230 ?x124))))))
 ))
 (let (($x206 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x144 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var509X)))
 (let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var509X)))
 (= $x101 $x144))))
 ))
 (let (($x94 (and $x206 $x128)))
 (let (($x189 (= $x94 true)))
 (let (($x52 (forall ((input.ind-%var504X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var504X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x176))))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var504X)))
 (let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var504X)))
 (=> $x101 (= ?x230 ?x182))))))))
 ))
 (let (($x223 (forall ((input.ind-%var503X (_ BitVec 32)) )(let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var503X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var503X) (bvult input.ind-%var503X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x223 $x52)))
 (let (($x10 (= $x177 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x190 (concat ?x160 (concat ?x142 ?x132)))))
 (let (($x168 (= input.dst.llvm-%n ?x202)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x22 (concat ?x92 (concat ?x59 ?x47)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x209 (and $x117 $x168)))
 (let (($x212 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x26) $x27)))
 (let (($x210 (and $x212 $x209)))
 (let (($x135 (and true $x210)))
 (let (($x219 (= $x135 true)))
 (let (($x73 (= $x219 true)))
 (let (($x195 (= $x73 true)))
 (let (($x203 (and $x195 $x10)))
 (let (($x44 (and $x203 $x189)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x34 (and $x193 $x44)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x83 (and $x66 $x34)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x48 $x83)))
 (let (($x172 (=> $x111 $x82)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x31)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x87)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x62 $x80)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x71 $x96)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x81 (not $x21)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x81)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x53 (not $x41)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x55 $x90)))
 (let (($x58 (and (not $x15) $x53)))
 (let (($x23 (and (and (and (and (and (and $x58 $x20) $x74) $x50) $x38) $x9) $x7)))
 (let (($x27 (and $x23 $x75)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x218 (or false (or false (and (and true (or $x143 $x112)) (or $x40 $x186))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x218)))
 (let (($x16 (and $x26 $x27)))
 (let (($x133 (= $x16 true)))
 (let (($x82 (= $x133 true)))
 (let (($x128 (forall ((input.ind-%var510X (_ BitVec 32)) )(let ((?x124 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var510X)))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var510X)))
 (let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var510X)))
 (=> $x101 (= ?x230 ?x124))))))
 ))
 (let (($x206 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x144 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var509X)))
 (let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var509X)))
 (= $x101 $x144))))
 ))
 (let (($x94 (and $x206 $x128)))
 (let (($x189 (= $x94 true)))
 (let (($x52 (forall ((input.ind-%var504X (_ BitVec 32)) )(let ((?x120 (bvadd (bvmul input.ind-%var504X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x176))))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var504X)))
 (let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var504X)))
 (=> $x101 (= ?x230 ?x182))))))))
 ))
 (let (($x223 (forall ((input.ind-%var503X (_ BitVec 32)) )(let (($x101 (input.spec-%var-x-1.0.1 input.ind-%var503X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var503X) (bvult input.ind-%var503X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x223 $x52)))
 (let (($x10 (= $x177 true)))
 (let ((?x132 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x190 (concat ?x160 (concat ?x142 ?x132)))))
 (let (($x168 (= input.dst.llvm-%n ?x202)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x22 (concat ?x92 (concat ?x59 ?x47)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x209 (and $x117 $x168)))
 (let (($x212 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x26) $x27)))
 (let (($x210 (and $x212 $x209)))
 (let (($x135 (and true $x210)))
 (let (($x219 (= $x135 true)))
 (let (($x73 (= $x219 true)))
 (let (($x195 (= $x73 true)))
 (let (($x203 (and $x195 $x10)))
 (let (($x44 (and $x203 $x189)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x34 (and $x193 $x44)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x83 (and $x66 $x34)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x111 (and $x48 $x83)))
 (let (($x172 (=> $x111 $x82)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x169 (= $x227 true)))
 (let (($x184 (forall ((input.ind-%var522X (_ BitVec 32)) )(let ((?x225 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var522X)))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var522X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var522X)))
 (=> $x223 (= ?x182 ?x225))))))
 ))
 (let (($x154 (forall ((input.ind-%var521X (_ BitVec 32)) )(let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var521X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var521X)))
 (= $x223 $x24))))
 ))
 (let (($x165 (and $x154 $x184)))
 (let (($x228 (= $x165 true)))
 (let (($x231 (forall ((input.ind-%var516X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var516X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x172))))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var516X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var516X)))
 (=> $x223 (= ?x182 ?x146))))))))
 ))
 (let (($x217 (forall ((input.ind-%var515X (_ BitVec 32)) )(let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var515X)))
 (= $x223 (and (bvule (_ bv0 32) input.ind-%var515X) (bvult input.ind-%var515X input.dst.llvm-%n)))))
 ))
 (let (($x161 (and $x217 $x231)))
 (let (($x214 (= $x161 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x202 (concat ?x132 (concat ?x160 ?x190)))))
 (let (($x209 (= input.dst.llvm-%n ?x168)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x93 (concat ?x59 (concat ?x54 ?x28)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x210 (and $x117 $x209)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x95)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x38)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x50 $x62)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x125 $x13)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x17 $x19)))
 (let (($x58 (and (not $x15) $x41)))
 (let (($x75 (and (and (and (and (and (and $x58 $x20) $x18) $x78) $x45) $x96) $x57)))
 (let (($x27 (and $x75 $x9)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x149 (or false (or false (and (and true (or $x157 $x118)) (or $x156 $x204))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x42 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x73 (and (and (and $x42 $x90) $x27) $x210)))
 (let (($x195 (and true $x73)))
 (let (($x32 (= $x195 true)))
 (let (($x101 (= $x32 true)))
 (let (($x35 (= $x101 true)))
 (let (($x166 (and $x35 $x214)))
 (let (($x8 (and $x166 $x228)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x194 $x8)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x183 (and $x25 $x100)))
 (let (($x198 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x224 (and $x198 $x183)))
 (let (($x205 (=> $x224 $x169)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x227 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x169 (= $x227 true)))
 (let (($x184 (forall ((input.ind-%var522X (_ BitVec 32)) )(let ((?x225 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var522X)))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var522X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var522X)))
 (=> $x223 (= ?x182 ?x225))))))
 ))
 (let (($x154 (forall ((input.ind-%var521X (_ BitVec 32)) )(let (($x24 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var521X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var521X)))
 (= $x223 $x24))))
 ))
 (let (($x165 (and $x154 $x184)))
 (let (($x228 (= $x165 true)))
 (let (($x231 (forall ((input.ind-%var516X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var516X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x146 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x172))))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var516X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var516X)))
 (=> $x223 (= ?x182 ?x146))))))))
 ))
 (let (($x217 (forall ((input.ind-%var515X (_ BitVec 32)) )(let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var515X)))
 (= $x223 (and (bvule (_ bv0 32) input.ind-%var515X) (bvult input.ind-%var515X input.dst.llvm-%n)))))
 ))
 (let (($x161 (and $x217 $x231)))
 (let (($x214 (= $x161 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x202 (concat ?x132 (concat ?x160 ?x190)))))
 (let (($x209 (= input.dst.llvm-%n ?x168)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x93 (concat ?x59 (concat ?x54 ?x28)))))
 (let (($x117 (= input.dst.llvm-%x ?x102)))
 (let (($x210 (and $x117 $x209)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x95)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x38)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x80)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (and $x50 $x62)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x125 $x13)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x77 $x49)))
 (let (($x20 (and (not $x37) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x17 $x19)))
 (let (($x58 (and (not $x15) $x41)))
 (let (($x75 (and (and (and (and (and (and $x58 $x20) $x18) $x78) $x45) $x96) $x57)))
 (let (($x27 (and $x75 $x9)))
 (let (($x204 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x118 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x149 (or false (or false (and (and true (or $x157 $x118)) (or $x156 $x204))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x149)))
 (let (($x42 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x73 (and (and (and $x42 $x90) $x27) $x210)))
 (let (($x195 (and true $x73)))
 (let (($x32 (= $x195 true)))
 (let (($x101 (= $x32 true)))
 (let (($x35 (= $x101 true)))
 (let (($x166 (and $x35 $x214)))
 (let (($x8 (and $x166 $x228)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x194 $x8)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x183 (and $x25 $x100)))
 (let (($x198 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x224 (and $x198 $x183)))
 (let (($x205 (=> $x224 $x169)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000006) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x51f86aec)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x43d73670)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xbbf75f00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x43d73673)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x51f86aef)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x43d73670)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x51f86aec)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x43d73672) #xf7
    (ite (= x!0 #xbbf75f01) #x00
    (ite (= x!0 #xbbf75f03) #x00
    (ite (= x!0 #x43d73671) #x5f
    (ite (= x!0 #xbbf75f02) #x00
    (ite (= x!0 #xbbf75f00) #x00
    (ite (= x!0 #x43d73673) #xbb
    (ite (= x!0 #x43d73670) #x00
      #x08)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x43d73673)
                                     (k!6 #x43d73672)
                                     (k!6 #x43d73671)
                                     (k!6 #x43d73670)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x43d73673)
                                     (k!6 #x43d73672)
                                     (k!6 #x43d73671)
                                     (k!6 #x43d73670)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x43d73673)
                                     (k!6 #x43d73672)
                                     (k!6 #x43d73671)
                                     (k!6 #x43d73670)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x43d73673)
                                     (k!6 #x43d73672)
                                     (k!6 #x43d73671)
                                     (k!6 #x43d73670))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08080808 x!0)
         (ite (bvule #x08080809 x!0) #x08080809 #x08080808)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 8) ?x188)))
 (let (($x222 (= $x216 true)))
 (let (($x120 (forall ((input.ind-%var550X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var550X)))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var550X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var550X)))
 (=> $x182 (= ?x139 ?x189))))))
 ))
 (let (($x144 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x128 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var549X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var549X)))
 (= $x182 $x128))))
 ))
 (let (($x191 (and $x144 $x120)))
 (let (($x44 (= $x191 true)))
 (let (($x187 (forall ((input.ind-%var544X (_ BitVec 32)) )(let ((?x227 (bvadd (bvmul input.ind-%var544X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x108))))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var544X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var544X)))
 (=> $x182 (= ?x139 ?x145))))))))
 ))
 (let (($x16 (forall ((input.ind-%var543X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var543X)))
 (= $x182 (and (bvule (_ bv0 32) input.ind-%var543X) (bvult input.ind-%var543X input.dst.llvm-%n)))))
 ))
 (let (($x115 (and $x16 $x187)))
 (let (($x229 (= $x115 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x209 (concat ?x76 (concat ?x121 ?x142)))))
 (let (($x73 (= input.dst.llvm-%n ?x210)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x102 (concat ?x28 (concat ?x63 ?x93)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x195 (and $x126 $x73)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x96)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x23)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x7 $x136)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x78 $x71)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x55 $x143)))
 (let (($x77 (and (not $x53) $x41)))
 (let (($x27 (and (and (and (and (and (and $x77 $x64) $x18) $x74) $x62) $x45) $x80)))
 (let (($x219 (and $x27 $x31)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x17 (or false (or false (and (and true (or $x40 $x163)) (or $x218 $x26))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x42 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x35 (and (and (and $x42 $x15) $x219) $x195)))
 (let (($x70 (and true $x35)))
 (let (($x223 (= $x70 true)))
 (let (($x36 (= $x223 true)))
 (let (($x107 (= $x36 true)))
 (let (($x233 (and $x107 $x229)))
 (let (($x122 (and $x233 $x44)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x159 $x122)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x193 $x141)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x151 $x176)))
 (let (($x99 (=> $x34 $x222)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x188 ((_ extract 7 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 8) ?x188)))
 (let (($x222 (= $x216 true)))
 (let (($x120 (forall ((input.ind-%var550X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var550X)))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var550X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var550X)))
 (=> $x182 (= ?x139 ?x189))))))
 ))
 (let (($x144 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x128 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var549X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var549X)))
 (= $x182 $x128))))
 ))
 (let (($x191 (and $x144 $x120)))
 (let (($x44 (= $x191 true)))
 (let (($x187 (forall ((input.ind-%var544X (_ BitVec 32)) )(let ((?x227 (bvadd (bvmul input.ind-%var544X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv1 32))) (select input.dst.llvm-mem ?x227))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x227 (_ bv2 32))) ?x108))))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var544X)))
 (let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var544X)))
 (=> $x182 (= ?x139 ?x145))))))))
 ))
 (let (($x16 (forall ((input.ind-%var543X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-1.0.1 input.ind-%var543X)))
 (= $x182 (and (bvule (_ bv0 32) input.ind-%var543X) (bvult input.ind-%var543X input.dst.llvm-%n)))))
 ))
 (let (($x115 (and $x16 $x187)))
 (let (($x229 (= $x115 true)))
 (let ((?x142 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x209 (concat ?x76 (concat ?x121 ?x142)))))
 (let (($x73 (= input.dst.llvm-%n ?x210)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x102 (concat ?x28 (concat ?x63 ?x93)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x195 (and $x126 $x73)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x96)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x23)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x7 $x136)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x78 $x71)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x55 $x143)))
 (let (($x77 (and (not $x53) $x41)))
 (let (($x27 (and (and (and (and (and (and $x77 $x64) $x18) $x74) $x62) $x45) $x80)))
 (let (($x219 (and $x27 $x31)))
 (let (($x26 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x17 (or false (or false (and (and true (or $x40 $x163)) (or $x218 $x26))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x17)))
 (let (($x42 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x35 (and (and (and $x42 $x15) $x219) $x195)))
 (let (($x70 (and true $x35)))
 (let (($x223 (= $x70 true)))
 (let (($x36 (= $x223 true)))
 (let (($x107 (= $x36 true)))
 (let (($x233 (and $x107 $x229)))
 (let (($x122 (and $x233 $x44)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x159 $x122)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x193 $x141)))
 (let (($x151 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x34 (and $x151 $x176)))
 (let (($x99 (=> $x34 $x222)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xaf8a029c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2fc142bc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2fc142bf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xaf8a029f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2fc142bc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xaf8a029c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x2fc142bc) #x80
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2fc142bf)
                                   (k!0 #x2fc142be)
                                   (k!0 #x2fc142bd)
                                   (k!0 #x2fc142bc)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2fc142bf)
                                   (k!0 #x2fc142be)
                                   (k!0 #x2fc142bd)
                                   (k!0 #x2fc142bc)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2fc142bf)
                                   (k!0 #x2fc142be)
                                   (k!0 #x2fc142bd)
                                   (k!0 #x2fc142bc)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x2fc142bf)
                                   (k!0 #x2fc142be)
                                   (k!0 #x2fc142bd)
                                   (k!0 #x2fc142bc))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000180)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000180)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x10)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000183)
                        (k!0 #x00000182)
                        (k!0 #x00000181)
                        (k!0 #x00000180))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x203 (= (_ bv0 3) ?x12)))
 (let (($x110 (= $x203 true)))
 (let (($x153 (forall ((input.ind-%var578X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var578X)))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var578X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var578X)))
 (=> $x139 (= ?x230 ?x184))))))
 ))
 (let (($x98 (forall ((input.ind-%var577X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var577X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var577X)))
 (= $x139 $x166))))
 ))
 (let (($x171 (and $x98 $x153)))
 (let (($x114 (= $x171 true)))
 (let (($x85 (forall ((input.ind-%var572X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var572X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x99))))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var572X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var572X)))
 (=> $x139 (= ?x230 ?x94))))))))
 ))
 (let (($x169 (forall ((input.ind-%var571X (_ BitVec 32)) )(let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var571X)))
 (= $x139 (and (bvule (_ bv0 32) input.ind-%var571X) (bvult input.ind-%var571X input.dst.llvm-%n)))))
 ))
 (let (($x172 (and $x169 $x85)))
 (let (($x146 (= $x172 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x73 (concat ?x160 (concat ?x132 ?x190)))))
 (let (($x35 (= input.dst.llvm-%n ?x195)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x65 (concat ?x63 (concat ?x22 ?x47)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x70 (and $x126 $x35)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x13)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x62)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x74 $x7)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x87 $x125)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x20 $x14)))
 (let (($x33 (not $x84)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x58 $x91)))
 (let (($x68 (not $x97)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x157 $x19)))
 (let (($x77 (and (not $x53) $x68)))
 (let (($x31 (and (and (and (and (and (and $x77 $x64) $x39) $x57) $x50) $x71) $x95)))
 (let (($x219 (and $x31 $x45)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x32 (or false (or false (and (and true (or $x156 $x186)) (or $x149 $x90))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x43 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x107 (and (and (and $x43 $x143) $x219) $x70)))
 (let (($x217 (and true $x107)))
 (let (($x182 (= $x217 true)))
 (let (($x137 (= $x182 true)))
 (let (($x127 (= $x137 true)))
 (let (($x148 (and $x127 $x146)))
 (let (($x100 (and $x148 $x114)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x194 $x100)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x124 (and $x198 $x177)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x51 $x124)))
 (let (($x152 (=> $x116 $x110)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x12 ((_ extract 2 0) input.dst.llvm-%n)))
 (let (($x203 (= (_ bv0 3) ?x12)))
 (let (($x110 (= $x203 true)))
 (let (($x153 (forall ((input.ind-%var578X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var578X)))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var578X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var578X)))
 (=> $x139 (= ?x230 ?x184))))))
 ))
 (let (($x98 (forall ((input.ind-%var577X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var577X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var577X)))
 (= $x139 $x166))))
 ))
 (let (($x171 (and $x98 $x153)))
 (let (($x114 (= $x171 true)))
 (let (($x85 (forall ((input.ind-%var572X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var572X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x99))))
 (let ((?x230 (input.spec-%var-x-1.1.1 input.ind-%var572X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var572X)))
 (=> $x139 (= ?x230 ?x94))))))))
 ))
 (let (($x169 (forall ((input.ind-%var571X (_ BitVec 32)) )(let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var571X)))
 (= $x139 (and (bvule (_ bv0 32) input.ind-%var571X) (bvult input.ind-%var571X input.dst.llvm-%n)))))
 ))
 (let (($x172 (and $x169 $x85)))
 (let (($x146 (= $x172 true)))
 (let ((?x190 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x73 (concat ?x160 (concat ?x132 ?x190)))))
 (let (($x35 (= input.dst.llvm-%n ?x195)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x65 (concat ?x63 (concat ?x22 ?x47)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x70 (and $x126 $x35)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x13)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x62)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x78)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x74 $x7)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x87 $x125)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x20 $x14)))
 (let (($x33 (not $x84)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x58 $x91)))
 (let (($x68 (not $x97)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x157 $x19)))
 (let (($x77 (and (not $x53) $x68)))
 (let (($x31 (and (and (and (and (and (and $x77 $x64) $x39) $x57) $x50) $x71) $x95)))
 (let (($x219 (and $x31 $x45)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x32 (or false (or false (and (and true (or $x156 $x186)) (or $x149 $x90))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x43 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x107 (and (and (and $x43 $x143) $x219) $x70)))
 (let (($x217 (and true $x107)))
 (let (($x182 (= $x217 true)))
 (let (($x137 (= $x182 true)))
 (let (($x127 (= $x137 true)))
 (let (($x148 (and $x127 $x146)))
 (let (($x100 (and $x148 $x114)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x177 (and $x194 $x100)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x124 (and $x198 $x177)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x51 $x124)))
 (let (($x152 (=> $x116 $x110)))
 (not $x152))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000004) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x88f5aed8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x99f76fb0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x9aafe300)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x99f76fb3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x88f5aedb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x99f76fb0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x88f5aed8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x9aafe301) #x00
    (ite (= x!0 #x99f76fb2) #xaf
    (ite (= x!0 #x9aafe303) #x00
    (ite (= x!0 #x99f76fb1) #xe3
    (ite (= x!0 #x9aafe302) #x00
    (ite (= x!0 #x9aafe300) #x00
    (ite (= x!0 #x99f76fb3) #x9a
    (ite (= x!0 #x99f76fb0) #x00
      #x04)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x99f76fb3)
                                     (k!6 #x99f76fb2)
                                     (k!6 #x99f76fb1)
                                     (k!6 #x99f76fb0)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x99f76fb3)
                                     (k!6 #x99f76fb2)
                                     (k!6 #x99f76fb1)
                                     (k!6 #x99f76fb0)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x99f76fb3)
                                     (k!6 #x99f76fb2)
                                     (k!6 #x99f76fb1)
                                     (k!6 #x99f76fb0)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x99f76fb3)
                                     (k!6 #x99f76fb2)
                                     (k!6 #x99f76fb1)
                                     (k!6 #x99f76fb0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x04040404 x!0)
         (ite (bvule #x04040405 x!0) #x04040405 #x04040404)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x206 (= (_ bv0 4) ?x176)))
 (let (($x154 (= $x206 true)))
 (let (($x225 (forall ((input.ind-%var606X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var606X)))
 (let ((?x94 (input.spec-%var-x-1.1.1 input.ind-%var606X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var606X)))
 (=> $x169 (= ?x94 ?x189))))))
 ))
 (let (($x131 (forall ((input.ind-%var605X (_ BitVec 32)) )(let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var605X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var605X)))
 (= $x169 $x229))))
 ))
 (let (($x82 (and $x131 $x225)))
 (let (($x208 (= $x82 true)))
 (let (($x161 (forall ((input.ind-%var600X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var600X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x110))))
 (let ((?x94 (input.spec-%var-x-1.1.1 input.ind-%var600X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var600X)))
 (=> $x169 (= ?x94 ?x212))))))))
 ))
 (let (($x222 (forall ((input.ind-%var599X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var599X)))
 (= $x169 (and (bvule (_ bv0 32) input.ind-%var599X) (bvult input.ind-%var599X input.dst.llvm-%n)))))
 ))
 (let (($x79 (and $x222 $x161)))
 (let (($x108 (= $x79 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x195 (concat ?x190 (concat ?x160 ?x73)))))
 (let (($x70 (= input.dst.llvm-%n ?x35)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x93 (concat ?x22 (concat ?x28 ?x59)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x107 (and $x126 $x70)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x136)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x50)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x57 $x74)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x18 $x75)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x20)))
 (let (($x84 (not $x14)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x84)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x58)))
 (let (($x97 (not $x91)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x138 $x55)))
 (let (($x77 (and (not $x53) $x97)))
 (let (($x45 (and (and (and (and (and (and $x77 $x64) $x38) $x23) $x78) $x125) $x27)))
 (let (($x219 (and $x45 $x71)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x218 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x223 (or false (or false (and (and true (or $x204 $x218)) (or $x135 $x17))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x232 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x137 (and (and (and $x232 $x19) $x219) $x107)))
 (let (($x127 (and true $x137)))
 (let (($x16 (= $x127 true)))
 (let (($x139 (= $x16 true)))
 (let (($x199 (= $x139 true)))
 (let (($x145 (and $x199 $x108)))
 (let (($x104 (and $x145 $x208)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x193 $x104)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x111 (and $x48 $x141)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x25 $x111)))
 (let (($x175 (=> $x228 $x154)))
 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x176 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x206 (= (_ bv0 4) ?x176)))
 (let (($x154 (= $x206 true)))
 (let (($x225 (forall ((input.ind-%var606X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var606X)))
 (let ((?x94 (input.spec-%var-x-1.1.1 input.ind-%var606X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var606X)))
 (=> $x169 (= ?x94 ?x189))))))
 ))
 (let (($x131 (forall ((input.ind-%var605X (_ BitVec 32)) )(let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var605X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var605X)))
 (= $x169 $x229))))
 ))
 (let (($x82 (and $x131 $x225)))
 (let (($x208 (= $x82 true)))
 (let (($x161 (forall ((input.ind-%var600X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var600X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x110))))
 (let ((?x94 (input.spec-%var-x-1.1.1 input.ind-%var600X)))
 (let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var600X)))
 (=> $x169 (= ?x94 ?x212))))))))
 ))
 (let (($x222 (forall ((input.ind-%var599X (_ BitVec 32)) )(let (($x169 (input.spec-%var-x-1.0.1 input.ind-%var599X)))
 (= $x169 (and (bvule (_ bv0 32) input.ind-%var599X) (bvult input.ind-%var599X input.dst.llvm-%n)))))
 ))
 (let (($x79 (and $x222 $x161)))
 (let (($x108 (= $x79 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x195 (concat ?x190 (concat ?x160 ?x73)))))
 (let (($x70 (= input.dst.llvm-%n ?x35)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x93 (concat ?x22 (concat ?x28 ?x59)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x107 (and $x126 $x70)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x136)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x50)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x57 $x74)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x18 $x75)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x20)))
 (let (($x84 (not $x14)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x84)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x58)))
 (let (($x97 (not $x91)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x138 $x55)))
 (let (($x77 (and (not $x53) $x97)))
 (let (($x45 (and (and (and (and (and (and $x77 $x64) $x38) $x23) $x78) $x125) $x27)))
 (let (($x219 (and $x45 $x71)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x218 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x223 (or false (or false (and (and true (or $x204 $x218)) (or $x135 $x17))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x232 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x137 (and (and (and $x232 $x19) $x219) $x107)))
 (let (($x127 (and true $x137)))
 (let (($x16 (= $x127 true)))
 (let (($x139 (= $x16 true)))
 (let (($x199 (= $x139 true)))
 (let (($x145 (and $x199 $x108)))
 (let (($x104 (and $x145 $x208)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x141 (and $x193 $x104)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x111 (and $x48 $x141)))
 (let (($x25 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x228 (and $x25 $x111)))
 (let (($x175 (=> $x228 $x154)))
 (not $x175))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000180)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000180)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x08)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000183)
                        (k!0 #x00000182)
                        (k!0 #x00000181)
                        (k!0 #x00000180))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc23321d4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x5b0443a0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010404)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7fe79f04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x5b0443a3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc23321d7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x5b0443a0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc23321d4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x7fe79f05) #x00
    (ite (= x!0 #x5b0443a2) #xe7
    (ite (= x!0 #x7fe79f07) #x00
    (ite (= x!0 #xc23321d7) #x00
    (ite (= x!0 #xc23321d6) #x01
    (ite (= x!0 #x5b0443a1) #x9f
    (ite (= x!0 #x7fe79f06) #x00
    (ite (= x!0 #x7fe79f04) #x00
    (ite (= x!0 #x5b0443a3) #x7f
      #x04))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x5b0443a3)
                                     (k!6 #x5b0443a2)
                                     (k!6 #x5b0443a1)
                                     (k!6 #x5b0443a0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010404 x!0)
         (ite (bvule #x00010405 x!0) #x00010405 #x00010404)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x122 (= (_ bv0 2) ?x177)))
 (let (($x109 (= $x122 true)))
 (let (($x128 (forall ((input.ind-%var634X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var634X)))
 (let ((?x212 (input.spec-%var-x-1.1.1 input.ind-%var634X)))
 (let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var634X)))
 (=> $x222 (= ?x212 ?x98))))))
 ))
 (let (($x184 (forall ((input.ind-%var633X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var633X)))
 (let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var633X)))
 (= $x222 $x172))))
 ))
 (let (($x205 (and $x184 $x128)))
 (let (($x231 (= $x205 true)))
 (let (($x230 (forall ((input.ind-%var628X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var628X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x154))))
 (let ((?x212 (input.spec-%var-x-1.1.1 input.ind-%var628X)))
 (let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var628X)))
 (=> $x222 (= ?x212 ?x101))))))))
 ))
 (let (($x203 (forall ((input.ind-%var627X (_ BitVec 32)) )(let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var627X)))
 (= $x222 (and (bvule (_ bv0 32) input.ind-%var627X) (bvult input.ind-%var627X input.dst.llvm-%n)))))
 ))
 (let (($x61 (and $x203 $x230)))
 (let (($x188 (= $x61 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x35 (concat ?x73 (concat ?x190 ?x195)))))
 (let (($x107 (= input.dst.llvm-%n ?x70)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x47 (concat ?x28 (concat ?x63 ?x54)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x137 (and $x126 $x107)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x7)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x78)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x23 $x57)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x39 $x80)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x33 $x21)))
 (let (($x14 (not $x20)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x68 $x41)))
 (let (($x91 (not $x58)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x163 $x157)))
 (let (($x77 (and (not $x53) $x91)))
 (let (($x71 (and (and (and (and (and (and $x77 $x64) $x9) $x62) $x87) $x75) $x31)))
 (let (($x219 (and $x71 $x125)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x217 (or false (or false (and (and true (or $x174 $x149)) (or $x15 $x32))))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x139 (and (and (and $x6 $x55) $x219) $x137)))
 (let (($x199 (and true $x139)))
 (let (($x164 (= $x199 true)))
 (let (($x169 (= $x164 true)))
 (let (($x215 (= $x169 true)))
 (let (($x86 (and $x215 $x188)))
 (let (($x202 (and $x86 $x231)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x198 $x202)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x224 (and $x151 $x100)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x66 $x224)))
 (let (($x24 (=> $x191 $x109)))
 (not $x24))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x177 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x122 (= (_ bv0 2) ?x177)))
 (let (($x109 (= $x122 true)))
 (let (($x128 (forall ((input.ind-%var634X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var634X)))
 (let ((?x212 (input.spec-%var-x-1.1.1 input.ind-%var634X)))
 (let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var634X)))
 (=> $x222 (= ?x212 ?x98))))))
 ))
 (let (($x184 (forall ((input.ind-%var633X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var633X)))
 (let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var633X)))
 (= $x222 $x172))))
 ))
 (let (($x205 (and $x184 $x128)))
 (let (($x231 (= $x205 true)))
 (let (($x230 (forall ((input.ind-%var628X (_ BitVec 32)) )(let ((?x228 (bvadd (bvmul input.ind-%var628X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv1 32))) (select input.dst.llvm-mem ?x228))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x228 (_ bv2 32))) ?x154))))
 (let ((?x212 (input.spec-%var-x-1.1.1 input.ind-%var628X)))
 (let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var628X)))
 (=> $x222 (= ?x212 ?x101))))))))
 ))
 (let (($x203 (forall ((input.ind-%var627X (_ BitVec 32)) )(let (($x222 (input.spec-%var-x-1.0.1 input.ind-%var627X)))
 (= $x222 (and (bvule (_ bv0 32) input.ind-%var627X) (bvult input.ind-%var627X input.dst.llvm-%n)))))
 ))
 (let (($x61 (and $x203 $x230)))
 (let (($x188 (= $x61 true)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x35 (concat ?x73 (concat ?x190 ?x195)))))
 (let (($x107 (= input.dst.llvm-%n ?x70)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x47 (concat ?x28 (concat ?x63 ?x54)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x137 (and $x126 $x107)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x7)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x78)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x74)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x23 $x57)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x39 $x80)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x33 $x21)))
 (let (($x14 (not $x20)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x68 $x41)))
 (let (($x91 (not $x58)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x163 $x157)))
 (let (($x77 (and (not $x53) $x91)))
 (let (($x71 (and (and (and (and (and (and $x77 $x64) $x9) $x62) $x87) $x75) $x31)))
 (let (($x219 (and $x71 $x125)))
 (let (($x32 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x217 (or false (or false (and (and true (or $x174 $x149)) (or $x15 $x32))))))
 (let (($x55 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x6 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x139 (and (and (and $x6 $x55) $x219) $x137)))
 (let (($x199 (and true $x139)))
 (let (($x164 (= $x199 true)))
 (let (($x169 (= $x164 true)))
 (let (($x215 (= $x169 true)))
 (let (($x86 (and $x215 $x188)))
 (let (($x202 (and $x86 $x231)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x198 $x202)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x224 (and $x151 $x100)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x191 (and $x66 $x224)))
 (let (($x24 (=> $x191 $x109)))
 (not $x24))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x114 (= $x141 true)))
 (let (($x166 (= $x114 true)))
 (let (($x148 (forall ((input.ind-%var646X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var646X)))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var646X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var646X)))
 (=> $x203 (= ?x101 ?x131))))))
 ))
 (let (($x189 (forall ((input.ind-%var645X (_ BitVec 32)) )(let (($x79 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var645X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var645X)))
 (= $x203 $x79))))
 ))
 (let (($x197 (and $x189 $x148)))
 (let (($x116 (= $x197 true)))
 (let (($x94 (forall ((input.ind-%var640X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var640X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x109))))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var640X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var640X)))
 (=> $x203 (= ?x101 ?x36))))))))
 ))
 (let (($x206 (forall ((input.ind-%var639X (_ BitVec 32)) )(let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var639X)))
 (= $x203 (and (bvule (_ bv0 32) input.ind-%var639X) (bvult input.ind-%var639X input.dst.llvm-%n)))))
 ))
 (let (($x165 (and $x206 $x94)))
 (let (($x183 (= $x165 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x70 (concat ?x195 (concat ?x73 ?x35)))))
 (let (($x137 (= input.dst.llvm-%n ?x107)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x59 (concat ?x63 (concat ?x22 ?x92)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x139 (and $x126 $x137)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x74)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x87)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x62 $x23)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x38 $x95)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x20 (not $x21)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x20)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x58 (not $x41)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x186 $x138)))
 (let (($x77 (and (not $x53) $x58)))
 (let (($x125 (and (and (and (and (and (and $x77 $x64) $x96) $x50) $x18) $x80) $x45)))
 (let (($x219 (and $x125 $x75)))
 (let (($x223 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x127 (or false (or false (and (and true (or $x26 $x135)) (or $x143 $x223))))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x159 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x169 (and (and (and $x159 $x157) $x219) $x139)))
 (let (($x215 (and true $x169)))
 (let (($x216 (= $x215 true)))
 (let (($x222 (= $x216 true)))
 (let (($x152 (= $x222 true)))
 (let (($x42 (and $x152 $x183)))
 (let (($x112 (and $x42 $x116)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x48 $x112)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x115 (and $x51 $x104)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x187 $x115)))
 (let (($x144 (=> $x153 $x166)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x141 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x114 (= $x141 true)))
 (let (($x166 (= $x114 true)))
 (let (($x148 (forall ((input.ind-%var646X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var646X)))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var646X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var646X)))
 (=> $x203 (= ?x101 ?x131))))))
 ))
 (let (($x189 (forall ((input.ind-%var645X (_ BitVec 32)) )(let (($x79 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var645X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var645X)))
 (= $x203 $x79))))
 ))
 (let (($x197 (and $x189 $x148)))
 (let (($x116 (= $x197 true)))
 (let (($x94 (forall ((input.ind-%var640X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var640X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x36 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x109))))
 (let ((?x101 (input.spec-%var-x-1.1.1 input.ind-%var640X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var640X)))
 (=> $x203 (= ?x101 ?x36))))))))
 ))
 (let (($x206 (forall ((input.ind-%var639X (_ BitVec 32)) )(let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var639X)))
 (= $x203 (and (bvule (_ bv0 32) input.ind-%var639X) (bvult input.ind-%var639X input.dst.llvm-%n)))))
 ))
 (let (($x165 (and $x206 $x94)))
 (let (($x183 (= $x165 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x70 (concat ?x195 (concat ?x73 ?x35)))))
 (let (($x137 (= input.dst.llvm-%n ?x107)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x59 (concat ?x63 (concat ?x22 ?x92)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x139 (and $x126 $x137)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x74)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x87)))
 (let ((?x57 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x57)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x62 $x23)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (and $x38 $x95)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x20 (not $x21)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x20)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x58 (not $x41)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x186 $x138)))
 (let (($x77 (and (not $x53) $x58)))
 (let (($x125 (and (and (and (and (and (and $x77 $x64) $x96) $x50) $x18) $x80) $x45)))
 (let (($x219 (and $x125 $x75)))
 (let (($x223 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x127 (or false (or false (and (and true (or $x26 $x135)) (or $x143 $x223))))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x159 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x169 (and (and (and $x159 $x157) $x219) $x139)))
 (let (($x215 (and true $x169)))
 (let (($x216 (= $x215 true)))
 (let (($x222 (= $x216 true)))
 (let (($x152 (= $x222 true)))
 (let (($x42 (and $x152 $x183)))
 (let (($x112 (and $x42 $x116)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x48 $x112)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x115 (and $x51 $x104)))
 (let (($x187 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x187 $x115)))
 (let (($x144 (=> $x153 $x166)))
 (not $x144))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000034)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000128)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000037)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000012b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000034)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000128)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x80000034) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000037)
                                   (k!0 #x80000036)
                                   (k!0 #x80000035)
                                   (k!0 #x80000034))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0000012b)
                        (k!0 #x0000012a)
                        (k!0 #x00000129)
                        (k!0 #x00000128))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xebd73ecc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe8139ee8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x3bcfc700)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe8139eeb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xebd73ecf)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe8139ee8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xebd73ecc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xebd73ecd) #xff
    (ite (= x!0 #xe8139eea) #xcf
    (ite (= x!0 #xebd73ecc) #xff
    (ite (= x!0 #x3bcfc703) #x00
    (ite (= x!0 #xebd73ecf) #xff
    (ite (= x!0 #x3bcfc701) #x00
    (ite (= x!0 #xebd73ece) #xff
    (ite (= x!0 #x3bcfc702) #x00
    (ite (= x!0 #x3bcfc700) #x00
    (ite (= x!0 #xe8139eeb) #x3b
    (ite (= x!0 #xe8139ee8) #x00
      #xc7))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xe8139eeb)
                                     (k!6 #xe8139eea)
                                     (k!6 #xe8139ee9)
                                     (k!6 #xe8139ee8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x208 (= $x100 true)))
 (let (($x229 (= $x208 true)))
 (let (($x145 (forall ((input.ind-%var674X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var674X)))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var674X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var674X)))
 (=> $x206 (= ?x36 ?x184))))))
 ))
 (let (($x98 (forall ((input.ind-%var673X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var673X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var673X)))
 (= $x206 $x61))))
 ))
 (let (($x211 (and $x98 $x145)))
 (let (($x228 (= $x211 true)))
 (let (($x212 (forall ((input.ind-%var668X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var668X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x166))))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var668X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var668X)))
 (=> $x206 (= ?x36 ?x182))))))))
 ))
 (let (($x122 (forall ((input.ind-%var667X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var667X)))
 (= $x206 (and (bvule (_ bv0 32) input.ind-%var667X) (bvult input.ind-%var667X input.dst.llvm-%n)))))
 ))
 (let (($x233 (and $x122 $x212)))
 (let (($x150 (= $x233 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x107 (concat ?x35 (concat ?x195 ?x70)))))
 (let (($x139 (= input.dst.llvm-%n ?x137)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x54 (concat ?x22 (concat ?x28 ?x102)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x169 (and $x126 $x139)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x57)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x18)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x38)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x50 $x62)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x9 $x27)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x218 $x163)))
 (let (($x77 (and (not $x53) $x41)))
 (let (($x75 (and (and (and (and (and (and $x77 $x64) $x13) $x78) $x39) $x95) $x71)))
 (let (($x219 (and $x75 $x80)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x199 (or false (or false (and (and true (or $x90 $x15)) (or $x19 $x217))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x199)))
 (let (($x194 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x222 (and (and (and $x194 $x138) $x219) $x169)))
 (let (($x152 (and true $x222)))
 (let (($x12 (= $x152 true)))
 (let (($x203 (= $x12 true)))
 (let (($x175 (= $x203 true)))
 (let (($x43 (and $x175 $x150)))
 (let (($x106 (and $x43 $x228)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x202 (and $x151 $x106)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x85 (and $x25 $x202)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x225 (and $x52 $x85)))
 (let (($x221 (=> $x225 $x229)))
 (not $x221))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x100 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x208 (= $x100 true)))
 (let (($x229 (= $x208 true)))
 (let (($x145 (forall ((input.ind-%var674X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var674X)))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var674X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var674X)))
 (=> $x206 (= ?x36 ?x184))))))
 ))
 (let (($x98 (forall ((input.ind-%var673X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var673X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var673X)))
 (= $x206 $x61))))
 ))
 (let (($x211 (and $x98 $x145)))
 (let (($x228 (= $x211 true)))
 (let (($x212 (forall ((input.ind-%var668X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var668X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x166))))
 (let ((?x36 (input.spec-%var-x-1.1.1 input.ind-%var668X)))
 (let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var668X)))
 (=> $x206 (= ?x36 ?x182))))))))
 ))
 (let (($x122 (forall ((input.ind-%var667X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-1.0.1 input.ind-%var667X)))
 (= $x206 (and (bvule (_ bv0 32) input.ind-%var667X) (bvult input.ind-%var667X input.dst.llvm-%n)))))
 ))
 (let (($x233 (and $x122 $x212)))
 (let (($x150 (= $x233 true)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x107 (concat ?x35 (concat ?x195 ?x70)))))
 (let (($x139 (= input.dst.llvm-%n ?x137)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x54 (concat ?x22 (concat ?x28 ?x102)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x169 (and $x126 $x139)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x57)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x18)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x62 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x38)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x50 $x62)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x9 $x27)))
 (let (($x78 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x218 $x163)))
 (let (($x77 (and (not $x53) $x41)))
 (let (($x75 (and (and (and (and (and (and $x77 $x64) $x13) $x78) $x39) $x95) $x71)))
 (let (($x219 (and $x75 $x80)))
 (let (($x217 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x199 (or false (or false (and (and true (or $x90 $x15)) (or $x19 $x217))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x199)))
 (let (($x194 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x222 (and (and (and $x194 $x138) $x219) $x169)))
 (let (($x152 (and true $x222)))
 (let (($x12 (= $x152 true)))
 (let (($x203 (= $x12 true)))
 (let (($x175 (= $x203 true)))
 (let (($x43 (and $x175 $x150)))
 (let (($x106 (and $x43 $x228)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x202 (and $x151 $x106)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x85 (and $x25 $x202)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x225 (and $x52 $x85)))
 (let (($x221 (=> $x225 $x229)))
 (not $x221))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00080003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00080003)
                                   (k!0 #x00080002)
                                   (k!0 #x00080001)
                                   (k!0 #x00080000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe2546404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x511d01e8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x737e5900)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x511d01eb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe2546407)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x511d01e8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe2546404)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe2546405) #x00
    (ite (= x!0 #x511d01ea) #x7e
    (ite (= x!0 #xe2546404) #x00
    (ite (= x!0 #x737e5903) #x00
    (ite (= x!0 #xe2546407) #x80
    (ite (= x!0 #x737e5901) #x00
    (ite (= x!0 #xe2546406) #x00
    (ite (= x!0 #x511d01e9) #x59
    (ite (= x!0 #x737e5902) #x00
    (ite (= x!0 #x737e5900) #x00
    (ite (= x!0 #x511d01e8) #x00
      #x73))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x511d01eb)
                                     (k!6 #x511d01ea)
                                     (k!6 #x511d01e9)
                                     (k!6 #x511d01e8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x104 (= $x109 true)))
 (let (($x231 (= $x104 true)))
 (let (($x86 (forall ((input.ind-%var702X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var702X)))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var702X)))
 (let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var702X)))
 (=> $x122 (= ?x182 ?x189))))))
 ))
 (let (($x131 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var701X)))
 (let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var701X)))
 (= $x122 $x165))))
 ))
 (let (($x158 (and $x131 $x86)))
 (let (($x191 (= $x158 true)))
 (let (($x101 (forall ((input.ind-%var696X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var696X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x229))))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var696X)))
 (let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var696X)))
 (=> $x122 (= ?x182 ?x16))))))))
 ))
 (let (($x114 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var695X)))
 (= $x122 (and (bvule (_ bv0 32) input.ind-%var695X) (bvult input.ind-%var695X input.dst.llvm-%n)))))
 ))
 (let (($x146 (and $x114 $x101)))
 (let (($x99 (= $x146 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x137 (concat ?x70 (concat ?x35 ?x107)))))
 (let (($x169 (= input.dst.llvm-%n ?x139)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x92 (concat ?x28 (concat ?x63 ?x65)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x222 (and $x126 $x169)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x23)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x39)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x78 $x50)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x96 $x31)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x20 $x14)))
 (let (($x33 (not $x84)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x58 $x91)))
 (let (($x68 (not $x97)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x149 $x186)))
 (let (($x77 (and (not $x53) $x68)))
 (let (($x80 (and (and (and (and (and (and $x77 $x64) $x136) $x87) $x38) $x27) $x125)))
 (let (($x219 (and $x80 $x95)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x215 (or false (or false (and (and true (or $x17 $x143)) (or $x55 $x127))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x193 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x203 (and (and (and $x193 $x163) $x219) $x222)))
 (let (($x175 (and true $x203)))
 (let (($x176 (= $x175 true)))
 (let (($x206 (= $x176 true)))
 (let (($x24 (= $x206 true)))
 (let (($x232 (and $x24 $x99)))
 (let (($x40 (and $x232 $x191)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x51 $x40)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x66 $x112)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x8 $x161)))
 (let (($x172 (=> $x128 $x231)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x104 (= $x109 true)))
 (let (($x231 (= $x104 true)))
 (let (($x86 (forall ((input.ind-%var702X (_ BitVec 32)) )(let ((?x189 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var702X)))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var702X)))
 (let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var702X)))
 (=> $x122 (= ?x182 ?x189))))))
 ))
 (let (($x131 (forall ((input.ind-%var701X (_ BitVec 32)) )(let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var701X)))
 (let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var701X)))
 (= $x122 $x165))))
 ))
 (let (($x158 (and $x131 $x86)))
 (let (($x191 (= $x158 true)))
 (let (($x101 (forall ((input.ind-%var696X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var696X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x229))))
 (let ((?x182 (input.spec-%var-x-1.1.1 input.ind-%var696X)))
 (let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var696X)))
 (=> $x122 (= ?x182 ?x16))))))))
 ))
 (let (($x114 (forall ((input.ind-%var695X (_ BitVec 32)) )(let (($x122 (input.spec-%var-x-1.0.1 input.ind-%var695X)))
 (= $x122 (and (bvule (_ bv0 32) input.ind-%var695X) (bvult input.ind-%var695X input.dst.llvm-%n)))))
 ))
 (let (($x146 (and $x114 $x101)))
 (let (($x99 (= $x146 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x139 (concat ?x137 (concat ?x70 (concat ?x35 ?x107)))))
 (let (($x169 (= input.dst.llvm-%n ?x139)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x92 (concat ?x28 (concat ?x63 ?x65)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x222 (and $x126 $x169)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x23)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x39)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x78 $x50)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (and $x96 $x31)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x20 $x14)))
 (let (($x33 (not $x84)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x58 $x91)))
 (let (($x68 (not $x97)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x149 $x186)))
 (let (($x77 (and (not $x53) $x68)))
 (let (($x80 (and (and (and (and (and (and $x77 $x64) $x136) $x87) $x38) $x27) $x125)))
 (let (($x219 (and $x80 $x95)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x215 (or false (or false (and (and true (or $x17 $x143)) (or $x55 $x127))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x193 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x203 (and (and (and $x193 $x163) $x219) $x222)))
 (let (($x175 (and true $x203)))
 (let (($x176 (= $x175 true)))
 (let (($x206 (= $x176 true)))
 (let (($x24 (= $x206 true)))
 (let (($x232 (and $x24 $x99)))
 (let (($x40 (and $x232 $x191)))
 (let (($x51 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x51 $x40)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x66 $x112)))
 (let (($x8 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x8 $x161)))
 (let (($x172 (=> $x128 $x231)))
 (not $x172))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (forall ((input.ind-%var720X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var720X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x172))))
 (let ((?x16 (input.spec-%var-x-1.1.1 input.ind-%var720X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var720X)))
 (=> $x114 (= ?x16 ?x183))))))))
 ))
 (let (($x60 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var719X)))
 (= $x114 (and (bvule (_ bv0 32) input.ind-%var719X) (bvult input.ind-%var719X (_ bv0 32))))))
 ))
 (let (($x181 (and $x60 $x56)))
 (let (($x202 (= true true)))
 (let (($x180 (and $x202 $x181)))
 (let (($x201 (= $x180 true)))
 (let (($x226 (forall ((input.ind-%var714X (_ BitVec 32)) )(let ((?x124 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var714X)))
 (let ((?x16 (input.spec-%var-x-1.1.1 input.ind-%var714X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var714X)))
 (=> $x114 (= ?x16 ?x124))))))
 ))
 (let (($x88 (forall ((input.ind-%var713X (_ BitVec 32)) )(let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var713X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var713X)))
 (= $x114 $x150))))
 ))
 (let (($x153 (and $x88 $x226)))
 (let (($x156 (= $x153 true)))
 (let (($x108 (forall ((input.ind-%var708X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var708X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x172))))
 (let ((?x16 (input.spec-%var-x-1.1.1 input.ind-%var708X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var708X)))
 (=> $x114 (= ?x16 ?x183))))))))
 ))
 (let (($x208 (forall ((input.ind-%var707X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var707X)))
 (= $x114 (and (bvule (_ bv0 32) input.ind-%var707X) (bvult input.ind-%var707X input.dst.llvm-%n)))))
 ))
 (let (($x110 (and $x208 $x108)))
 (let (($x6 (= $x110 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x139 (concat ?x107 (concat ?x70 ?x137)))))
 (let (($x222 (= input.dst.llvm-%n ?x169)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x102 (concat ?x63 (concat ?x22 ?x93)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x203 (and $x126 $x222)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x62)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x38)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (and $x87 $x78)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x13 $x45)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x20)))
 (let (($x84 (not $x14)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x84)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x58)))
 (let (($x97 (not $x91)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x135 $x218)))
 (let (($x77 (and (not $x53) $x97)))
 (let (($x95 (and (and (and (and (and (and $x77 $x64) $x7) $x18) $x9) $x31) $x75)))
 (let (($x219 (and $x95 $x27)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x152 (or false (or false (and (and true (or $x32 $x19)) (or $x157 $x199))))))
 (let (($x186 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x198 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x206 (and (and (and $x198 $x186) $x219) $x203)))
 (let (($x24 (and true $x206)))
 (let (($x177 (= $x24 true)))
 (let (($x122 (= $x177 true)))
 (let (($x144 (= $x122 true)))
 (let (($x200 (and $x144 $x6)))
 (let (($x106 (and $x200 $x156)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x230 (and $x25 $x106)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x148 (and $x187 $x230)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x120 $x148)))
 (let (($x11 (=> $x166 $x201)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (forall ((input.ind-%var720X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var720X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x172))))
 (let ((?x16 (input.spec-%var-x-1.1.1 input.ind-%var720X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var720X)))
 (=> $x114 (= ?x16 ?x183))))))))
 ))
 (let (($x60 (forall ((input.ind-%var719X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var719X)))
 (= $x114 (and (bvule (_ bv0 32) input.ind-%var719X) (bvult input.ind-%var719X (_ bv0 32))))))
 ))
 (let (($x181 (and $x60 $x56)))
 (let (($x202 (= true true)))
 (let (($x180 (and $x202 $x181)))
 (let (($x201 (= $x180 true)))
 (let (($x226 (forall ((input.ind-%var714X (_ BitVec 32)) )(let ((?x124 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var714X)))
 (let ((?x16 (input.spec-%var-x-1.1.1 input.ind-%var714X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var714X)))
 (=> $x114 (= ?x16 ?x124))))))
 ))
 (let (($x88 (forall ((input.ind-%var713X (_ BitVec 32)) )(let (($x150 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var713X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var713X)))
 (= $x114 $x150))))
 ))
 (let (($x153 (and $x88 $x226)))
 (let (($x156 (= $x153 true)))
 (let (($x108 (forall ((input.ind-%var708X (_ BitVec 32)) )(let ((?x128 (bvadd (bvmul input.ind-%var708X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x172))))
 (let ((?x16 (input.spec-%var-x-1.1.1 input.ind-%var708X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var708X)))
 (=> $x114 (= ?x16 ?x183))))))))
 ))
 (let (($x208 (forall ((input.ind-%var707X (_ BitVec 32)) )(let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var707X)))
 (= $x114 (and (bvule (_ bv0 32) input.ind-%var707X) (bvult input.ind-%var707X input.dst.llvm-%n)))))
 ))
 (let (($x110 (and $x208 $x108)))
 (let (($x6 (= $x110 true)))
 (let ((?x137 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x139 (concat ?x107 (concat ?x70 ?x137)))))
 (let (($x222 (= input.dst.llvm-%n ?x169)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x102 (concat ?x63 (concat ?x22 ?x93)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x203 (and $x126 $x222)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x62)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x75 (= (_ bv0 32) ?x38)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (and $x87 $x78)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x13 $x45)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x21 $x20)))
 (let (($x84 (not $x14)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x84)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x41 $x58)))
 (let (($x97 (not $x91)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x135 $x218)))
 (let (($x77 (and (not $x53) $x97)))
 (let (($x95 (and (and (and (and (and (and $x77 $x64) $x7) $x18) $x9) $x31) $x75)))
 (let (($x219 (and $x95 $x27)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x19 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x152 (or false (or false (and (and true (or $x32 $x19)) (or $x157 $x199))))))
 (let (($x186 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x198 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x206 (and (and (and $x198 $x186) $x219) $x203)))
 (let (($x24 (and true $x206)))
 (let (($x177 (= $x24 true)))
 (let (($x122 (= $x177 true)))
 (let (($x144 (= $x122 true)))
 (let (($x200 (and $x144 $x6)))
 (let (($x106 (and $x200 $x156)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x230 (and $x25 $x106)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x148 (and $x187 $x230)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x120 $x148)))
 (let (($x11 (=> $x166 $x201)))
 (not $x11)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var720X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.ind-%var719X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000003) #x02
    (ite (= x!0 #x40000002) #xff
    (ite (= x!0 #x00000004) #xfc
    (ite (= x!0 #x40000000) #xc9
    (ite (= x!0 #x40000001) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x40000003)
                          (k!2 #x40000002)
                          (k!2 #x40000001)
                          (k!2 #x40000000))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var719X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var720X!1 () (_ BitVec 32)
    #x28958000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x822f5170)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08a70001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x08a90ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x822f5173)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x360f41df)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x822f5170)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x360f41dd) #x00
    (ite (= x!0 #x822f5172) #xa9
    (ite (= x!0 #x360f41dc) #x01
    (ite (= x!0 #x08a90ff9) #x00
    (ite (= x!0 #x360f41df) #x08
    (ite (= x!0 #x08a90ff8) #x00
    (ite (= x!0 #x360f41de) #xa7
    (ite (= x!0 #x08a90ffa) #x00
    (ite (= x!0 #x08a90ffb) #x00
    (ite (= x!0 #x822f5173) #x08
    (ite (= x!0 #x822f5170) #xf8
      #x0f))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08a70001 x!0)
         (ite (bvule #x08a70002 x!0)
              (ite (bvule #x28958000 x!0) #x28958000 #x08a70002)
              #x08a70001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x28958000) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (forall ((input.ind-%var754X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var754X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x30))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var754X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var754X)))
 (=> $x208 (= ?x183 ?x11))))))))
 ))
 (let (($x178 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var753X)))
 (= $x208 (and (bvule (_ bv0 32) input.ind-%var753X) (bvult input.ind-%var753X input.dst.llvm-%x)))))
 ))
 (let (($x210 (and $x178 $x205)))
 (let (($x167 (= true true)))
 (let (($x46 (and $x167 $x210)))
 (let (($x134 (= $x46 true)))
 (let (($x131 (forall ((input.ind-%var748X (_ BitVec 32)) )(let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var748X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var748X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var748X)))
 (=> $x208 (= ?x183 ?x158))))))
 ))
 (let (($x212 (forall ((input.ind-%var747X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var747X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var747X)))
 (= $x208 $x61))))
 ))
 (let (($x111 (and $x212 $x131)))
 (let (($x191 (= $x111 true)))
 (let (($x26 (forall ((input.ind-%var742X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var742X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x30))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var742X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var742X)))
 (=> $x208 (= ?x183 ?x11))))))))
 ))
 (let (($x231 (forall ((input.ind-%var741X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var741X)))
 (= $x208 (and (bvule (_ bv0 32) input.ind-%var741X) (bvult input.ind-%var741X input.dst.llvm-%n)))))
 ))
 (let (($x132 (and $x231 $x26)))
 (let (($x216 (= $x132 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x169 (concat ?x137 (concat ?x107 ?x139)))))
 (let (($x203 (= input.dst.llvm-%n ?x222)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x65 (concat ?x22 (concat ?x28 ?x47)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x206 (and $x126 $x203)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x50)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x9)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x18 $x87)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x136 $x71)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x33 $x21)))
 (let (($x14 (not $x20)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x68 $x41)))
 (let (($x91 (not $x58)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x15 $x149)))
 (let (($x77 (and (not $x53) $x91)))
 (let (($x27 (and (and (and (and (and (and $x77 $x64) $x74) $x39) $x96) $x45) $x80)))
 (let (($x219 (and $x27 $x31)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x175 (or false (or false (and (and true (or $x223 $x55)) (or $x138 $x215))))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x48 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x122 (and (and (and $x48 $x218) $x219) $x206)))
 (let (($x144 (and true $x122)))
 (let (($x141 (= $x144 true)))
 (let (($x114 (= $x141 true)))
 (let (($x221 (= $x114 true)))
 (let (($x145 (and $x221 $x216)))
 (let (($x43 (and $x145 $x191)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x66 $x43)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x233 (and $x52 $x94)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x72 $x233)))
 (let (($x207 (=> $x98 $x134)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (forall ((input.ind-%var754X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var754X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x30))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var754X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var754X)))
 (=> $x208 (= ?x183 ?x11))))))))
 ))
 (let (($x178 (forall ((input.ind-%var753X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var753X)))
 (= $x208 (and (bvule (_ bv0 32) input.ind-%var753X) (bvult input.ind-%var753X input.dst.llvm-%x)))))
 ))
 (let (($x210 (and $x178 $x205)))
 (let (($x167 (= true true)))
 (let (($x46 (and $x167 $x210)))
 (let (($x134 (= $x46 true)))
 (let (($x131 (forall ((input.ind-%var748X (_ BitVec 32)) )(let ((?x158 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var748X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var748X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var748X)))
 (=> $x208 (= ?x183 ?x158))))))
 ))
 (let (($x212 (forall ((input.ind-%var747X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var747X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var747X)))
 (= $x208 $x61))))
 ))
 (let (($x111 (and $x212 $x131)))
 (let (($x191 (= $x111 true)))
 (let (($x26 (forall ((input.ind-%var742X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var742X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x30))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var742X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var742X)))
 (=> $x208 (= ?x183 ?x11))))))))
 ))
 (let (($x231 (forall ((input.ind-%var741X (_ BitVec 32)) )(let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var741X)))
 (= $x208 (and (bvule (_ bv0 32) input.ind-%var741X) (bvult input.ind-%var741X input.dst.llvm-%n)))))
 ))
 (let (($x132 (and $x231 $x26)))
 (let (($x216 (= $x132 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x222 (concat ?x169 (concat ?x137 (concat ?x107 ?x139)))))
 (let (($x203 (= input.dst.llvm-%n ?x222)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x65 (concat ?x22 (concat ?x28 ?x47)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x206 (and $x126 $x203)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x50)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x80 (= (_ bv0 32) ?x9)))
 (let ((?x78 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (and $x18 $x87)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x136 $x71)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x33 $x21)))
 (let (($x14 (not $x20)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x14)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x68 $x41)))
 (let (($x91 (not $x58)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x15 $x149)))
 (let (($x77 (and (not $x53) $x91)))
 (let (($x27 (and (and (and (and (and (and $x77 $x64) $x74) $x39) $x96) $x45) $x80)))
 (let (($x219 (and $x27 $x31)))
 (let (($x215 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x19 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x19)))
 (let (($x175 (or false (or false (and (and true (or $x223 $x55)) (or $x138 $x215))))))
 (let (($x218 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x175)))
 (let (($x48 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x122 (and (and (and $x48 $x218) $x219) $x206)))
 (let (($x144 (and true $x122)))
 (let (($x141 (= $x144 true)))
 (let (($x114 (= $x141 true)))
 (let (($x221 (= $x114 true)))
 (let (($x145 (and $x221 $x216)))
 (let (($x43 (and $x145 $x191)))
 (let (($x66 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x66 $x43)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x233 (and $x52 $x94)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x72 $x233)))
 (let (($x207 (=> $x98 $x134)))
 (not $x207)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var753X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var754X!1 () (_ BitVec 32)
    #x0910430c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0b042024)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x88002210)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0b042027)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0b042024)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0000003) #x88
    (ite (= x!0 #xc0000000) #x10
    (ite (= x!0 #xc0000001) #x22
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0910430c) false
      (not (bvule (concat (k!2 #x0b042027)
                          (k!2 #x0b042026)
                          (k!2 #x0b042025)
                          (k!2 #x0b042024))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #xc0000003)
                                   (k!2 #xc0000002)
                                   (k!2 #xc0000001)
                                   (k!2 #xc0000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0910430c) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var753X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x862770f4)
  (define-fun input.ind-%var754X!1 () (_ BitVec 32)
    #x00200000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x17137c78)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x17137c7b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x862770f7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x17137c78)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x862770f4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x862770f5) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x17137c7b)
                                     (k!2 #x17137c7a)
                                     (k!2 #x17137c79)
                                     (k!2 #x17137c78))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000100 x!0)
         (ite (bvule #x00000101 x!0)
              (ite (bvule #x00200000 x!0) #x00200000 #x00000101)
              #x00000100)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00200000) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x230 (forall ((input.ind-%var788X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var788X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x123))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var788X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var788X)))
 (=> $x231 (= ?x11 ?x207))))))))
 ))
 (let (($x113 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var787X)))
 (= $x231 (and (bvule (_ bv0 32) input.ind-%var787X) (bvult input.ind-%var787X input.dst.llvm-%n)))))
 ))
 (let (($x209 (and $x113 $x230)))
 (let (($x173 (= true true)))
 (let (($x115 (and $x173 $x209)))
 (let (($x146 (= $x115 true)))
 (let (($x88 (forall ((input.ind-%var782X (_ BitVec 32)) )(let ((?x153 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var782X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var782X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var782X)))
 (=> $x231 (= ?x11 ?x153))))))
 ))
 (let (($x101 (forall ((input.ind-%var781X (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var781X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var781X)))
 (= $x231 $x85))))
 ))
 (let (($x42 (and $x101 $x88)))
 (let (($x156 (= $x42 true)))
 (let (($x90 (forall ((input.ind-%var776X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var776X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x123))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var776X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var776X)))
 (=> $x231 (= ?x11 ?x207))))))))
 ))
 (let (($x67 (forall ((input.ind-%var775X (_ BitVec 32)) )(let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var775X)))
 (= $x231 (and (bvule (_ bv0 32) input.ind-%var775X) (bvult input.ind-%var775X input.dst.llvm-%n)))))
 ))
 (let (($x160 (and $x67 $x90)))
 (let (($x12 (= $x160 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x222 (concat ?x139 (concat ?x137 ?x169)))))
 (let (($x206 (= input.dst.llvm-%n ?x203)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x93 (concat ?x28 (concat ?x63 ?x59)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x122 (and $x126 $x206)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x78)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x96)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x39 $x18)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x7 $x125)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x20 (not $x21)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x20)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x58 (not $x41)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x143 $x135)))
 (let (($x77 (and (not $x53) $x58)))
 (let (($x31 (and (and (and (and (and (and $x77 $x64) $x57) $x38) $x13) $x71) $x95)))
 (let (($x219 (and $x31 $x45)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x24 (or false (or false (and (and true (or $x217 $x157)) (or $x163 $x152))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x151 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x114 (and (and (and $x151 $x149) $x219) $x122)))
 (let (($x221 (and true $x114)))
 (let (($x100 (= $x221 true)))
 (let (($x208 (= $x100 true)))
 (let (($x44 (= $x208 true)))
 (let (($x154 (and $x44 $x12)))
 (let (($x99 (and $x154 $x156)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x187 $x99)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x8 $x228)))
 (let (($x214 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x214 $x188)))
 (let (($x165 (=> $x86 $x146)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x230 (forall ((input.ind-%var788X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var788X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x123))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var788X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var788X)))
 (=> $x231 (= ?x11 ?x207))))))))
 ))
 (let (($x113 (forall ((input.ind-%var787X (_ BitVec 32)) )(let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var787X)))
 (= $x231 (and (bvule (_ bv0 32) input.ind-%var787X) (bvult input.ind-%var787X input.dst.llvm-%n)))))
 ))
 (let (($x209 (and $x113 $x230)))
 (let (($x173 (= true true)))
 (let (($x115 (and $x173 $x209)))
 (let (($x146 (= $x115 true)))
 (let (($x88 (forall ((input.ind-%var782X (_ BitVec 32)) )(let ((?x153 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var782X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var782X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var782X)))
 (=> $x231 (= ?x11 ?x153))))))
 ))
 (let (($x101 (forall ((input.ind-%var781X (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var781X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var781X)))
 (= $x231 $x85))))
 ))
 (let (($x42 (and $x101 $x88)))
 (let (($x156 (= $x42 true)))
 (let (($x90 (forall ((input.ind-%var776X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var776X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x123))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var776X)))
 (let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var776X)))
 (=> $x231 (= ?x11 ?x207))))))))
 ))
 (let (($x67 (forall ((input.ind-%var775X (_ BitVec 32)) )(let (($x231 (input.spec-%var-x-1.0.1 input.ind-%var775X)))
 (= $x231 (and (bvule (_ bv0 32) input.ind-%var775X) (bvult input.ind-%var775X input.dst.llvm-%n)))))
 ))
 (let (($x160 (and $x67 $x90)))
 (let (($x12 (= $x160 true)))
 (let ((?x169 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x222 (concat ?x139 (concat ?x137 ?x169)))))
 (let (($x206 (= input.dst.llvm-%n ?x203)))
 (let ((?x59 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x93 (concat ?x28 (concat ?x63 ?x59)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x122 (and $x126 $x206)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x78)))
 (let ((?x96 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x96)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x39 $x18)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x7 $x125)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x84 $x33)))
 (let (($x20 (not $x21)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x20)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x97 $x68)))
 (let (($x58 (not $x41)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x143 $x135)))
 (let (($x77 (and (not $x53) $x58)))
 (let (($x31 (and (and (and (and (and (and $x77 $x64) $x57) $x38) $x13) $x71) $x95)))
 (let (($x219 (and $x31 $x45)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x157 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x55)))
 (let (($x24 (or false (or false (and (and true (or $x217 $x157)) (or $x163 $x152))))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x151 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x114 (and (and (and $x151 $x149) $x219) $x122)))
 (let (($x221 (and true $x114)))
 (let (($x100 (= $x221 true)))
 (let (($x208 (= $x100 true)))
 (let (($x44 (= $x208 true)))
 (let (($x154 (and $x44 $x12)))
 (let (($x99 (and $x154 $x156)))
 (let (($x187 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x187 $x99)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x8 $x228)))
 (let (($x214 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x86 (and $x214 $x188)))
 (let (($x165 (=> $x86 $x146)))
 (not $x165)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x83 (forall ((input.ind-%var806X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var806X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x209))))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var806X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var806X)))
 (=> $x67 (= ?x207 ?x17))))))))
 ))
 (let (($x162 (forall ((input.ind-%var805X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var805X)))
 (= $x67 (and (bvule (_ bv0 32) input.ind-%var805X) (bvult input.ind-%var805X (_ bv0 32))))))
 ))
 (let (($x172 (and $x162 $x83)))
 (let (($x10 (= true true)))
 (let (($x119 (and $x10 $x172)))
 (let (($x140 (= $x119 true)))
 (let (($x6 (forall ((input.ind-%var800X (_ BitVec 32)) )(let ((?x61 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var800X)))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var800X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var800X)))
 (=> $x67 (= ?x207 ?x61))))))
 ))
 (let (($x216 (forall ((input.ind-%var799X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var799X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var799X)))
 (= $x67 $x164))))
 ))
 (let (($x189 (and $x216 $x6)))
 (let (($x34 (= $x189 true)))
 (let (($x109 (forall ((input.ind-%var794X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var794X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x209))))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var794X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var794X)))
 (=> $x67 (= ?x207 ?x17))))))))
 ))
 (let (($x5 (forall ((input.ind-%var793X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var793X)))
 (= $x67 (and (bvule (_ bv0 32) input.ind-%var793X) (bvult input.ind-%var793X input.dst.llvm-%n)))))
 ))
 (let (($x124 (and $x5 $x109)))
 (let (($x183 (= $x124 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x203 (concat ?x169 (concat ?x139 ?x222)))))
 (let (($x122 (= input.dst.llvm-%n ?x206)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x47 (concat ?x63 (concat ?x22 ?x54)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x114 (and $x126 $x122)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x87)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x13)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x38 $x39)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x74 $x75)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x19 $x15)))
 (let (($x77 (and (not $x53) $x41)))
 (let (($x45 (and (and (and (and (and (and $x77 $x64) $x23) $x9) $x136) $x125) $x27)))
 (let (($x219 (and $x45 $x71)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x144 (or false (or false (and (and true (or $x127 $x138)) (or $x186 $x175))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x51 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x208 (and (and (and $x51 $x135) $x219) $x114)))
 (let (($x44 (and true $x208)))
 (let (($x104 (= $x44 true)))
 (let (($x231 (= $x104 true)))
 (let (($x60 (= $x231 true)))
 (let (($x192 (and $x60 $x183)))
 (let (($x226 (and $x192 $x34)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x52 $x226)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x120 $x229)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x227 $x194)))
 (let (($x89 (=> $x166 $x140)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x83 (forall ((input.ind-%var806X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var806X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x209))))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var806X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var806X)))
 (=> $x67 (= ?x207 ?x17))))))))
 ))
 (let (($x162 (forall ((input.ind-%var805X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var805X)))
 (= $x67 (and (bvule (_ bv0 32) input.ind-%var805X) (bvult input.ind-%var805X (_ bv0 32))))))
 ))
 (let (($x172 (and $x162 $x83)))
 (let (($x10 (= true true)))
 (let (($x119 (and $x10 $x172)))
 (let (($x140 (= $x119 true)))
 (let (($x6 (forall ((input.ind-%var800X (_ BitVec 32)) )(let ((?x61 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var800X)))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var800X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var800X)))
 (=> $x67 (= ?x207 ?x61))))))
 ))
 (let (($x216 (forall ((input.ind-%var799X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var799X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var799X)))
 (= $x67 $x164))))
 ))
 (let (($x189 (and $x216 $x6)))
 (let (($x34 (= $x189 true)))
 (let (($x109 (forall ((input.ind-%var794X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var794X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x209))))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var794X)))
 (let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var794X)))
 (=> $x67 (= ?x207 ?x17))))))))
 ))
 (let (($x5 (forall ((input.ind-%var793X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-1.0.1 input.ind-%var793X)))
 (= $x67 (and (bvule (_ bv0 32) input.ind-%var793X) (bvult input.ind-%var793X input.dst.llvm-%n)))))
 ))
 (let (($x124 (and $x5 $x109)))
 (let (($x183 (= $x124 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x203 (concat ?x169 (concat ?x139 ?x222)))))
 (let (($x122 (= input.dst.llvm-%n ?x206)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x47 (concat ?x63 (concat ?x22 ?x54)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x114 (and $x126 $x122)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x87)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x13)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x38 $x39)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x74 $x75)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x14 $x84)))
 (let (($x21 (not $x33)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x21)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x91 $x97)))
 (let (($x41 (not $x68)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x19 $x15)))
 (let (($x77 (and (not $x53) $x41)))
 (let (($x45 (and (and (and (and (and (and $x77 $x64) $x23) $x9) $x136) $x125) $x27)))
 (let (($x219 (and $x45 $x71)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x144 (or false (or false (and (and true (or $x127 $x138)) (or $x186 $x175))))))
 (let (($x135 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x144)))
 (let (($x51 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x208 (and (and (and $x51 $x135) $x219) $x114)))
 (let (($x44 (and true $x208)))
 (let (($x104 (= $x44 true)))
 (let (($x231 (= $x104 true)))
 (let (($x60 (= $x231 true)))
 (let (($x192 (and $x60 $x183)))
 (let (($x226 (and $x192 $x34)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x229 (and $x52 $x226)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x120 $x229)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x227 $x194)))
 (let (($x89 (=> $x166 $x140)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var805X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var806X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02ffffc9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000003) #x02
    (ite (= x!0 #x40000002) #xff
    (ite (= x!0 #x00000004) #xfc
    (ite (= x!0 #x40000000) #xc9
    (ite (= x!0 #x40000001) #xff
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x40000003)
                          (k!2 #x40000002)
                          (k!2 #x40000001)
                          (k!2 #x40000000))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x00000007)
                                     (k!2 #x00000006)
                                     (k!2 #x00000005)
                                     (k!2 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var805X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x822f5170)
  (define-fun input.ind-%var806X!1 () (_ BitVec 32)
    #x28958000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08a70001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x08a90ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x822f5173)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x360f41df)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x822f5170)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x360f41dc)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x360f41dd) #x00
    (ite (= x!0 #x822f5172) #xa9
    (ite (= x!0 #x360f41dc) #x01
    (ite (= x!0 #x08a90ffa) #x00
    (ite (= x!0 #x360f41df) #x08
    (ite (= x!0 #x08a90ffb) #x00
    (ite (= x!0 #x08a90ff9) #x00
    (ite (= x!0 #x360f41de) #xa7
    (ite (= x!0 #x08a90ff8) #x00
    (ite (= x!0 #x822f5173) #x08
    (ite (= x!0 #x822f5170) #xf8
      #x0f))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x822f5173)
                                     (k!2 #x822f5172)
                                     (k!2 #x822f5171)
                                     (k!2 #x822f5170))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08a70001 x!0)
         (ite (bvule #x08a70002 x!0)
              (ite (bvule #x28958000 x!0) #x28958000 #x08a70002)
              #x08a70001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x28958000) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= false true)))
 (let (($x56 (= $x204 true)))
 (let (($x101 (forall ((input.ind-%var834X (_ BitVec 32)) )(let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var834X)))
 (let ((?x17 (input.spec-%var-x-1.1.1 input.ind-%var834X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var834X)))
 (=> $x5 (= ?x17 ?x42))))))
 ))
 (let (($x26 (forall ((input.ind-%var833X (_ BitVec 32)) )(let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var833X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var833X)))
 (= $x5 $x131))))
 ))
 (let (($x200 (and $x26 $x101)))
 (let (($x156 (= $x200 true)))
 (let (($x32 (forall ((input.ind-%var828X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var828X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x112))))
 (let ((?x17 (input.spec-%var-x-1.1.1 input.ind-%var828X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var828X)))
 (=> $x5 (= ?x17 ?x89))))))))
 ))
 (let (($x230 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var827X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var827X) (bvult input.ind-%var827X input.dst.llvm-%n)))))
 ))
 (let (($x73 (and $x230 $x32)))
 (let (($x177 (= $x73 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x206 (concat ?x222 (concat ?x169 ?x203)))))
 (let (($x114 (= input.dst.llvm-%n ?x122)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x59 (concat ?x22 (concat ?x28 ?x92)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x208 (and $x126 $x114)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x18)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x136)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x9 $x38)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x57 $x80)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x20 $x14)))
 (let (($x33 (not $x84)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x58 $x91)))
 (let (($x68 (not $x97)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x55 $x143)))
 (let (($x77 (and (not $x53) $x68)))
 (let (($x71 (and (and (and (and (and (and $x77 $x64) $x62) $x96) $x7) $x75) $x31)))
 (let (($x219 (and $x71 $x125)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x221 (or false (or false (and (and true (or $x199 $x163)) (or $x218 $x24))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x25 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x231 (and (and (and $x25 $x15) $x219) $x208)))
 (let (($x60 (and true $x231)))
 (let (($x105 (= $x60 true)))
 (let (($x67 (= $x105 true)))
 (let (($x178 (= $x67 true)))
 (let (($x108 (and $x178 $x177)))
 (let (($x158 (and $x108 $x156)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x161 (and $x8 $x158)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x181 (and $x72 $x161)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x36 $x181)))
 (let (($x98 (=> $x197 $x56)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= false true)))
 (let (($x56 (= $x204 true)))
 (let (($x101 (forall ((input.ind-%var834X (_ BitVec 32)) )(let ((?x42 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var834X)))
 (let ((?x17 (input.spec-%var-x-1.1.1 input.ind-%var834X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var834X)))
 (=> $x5 (= ?x17 ?x42))))))
 ))
 (let (($x26 (forall ((input.ind-%var833X (_ BitVec 32)) )(let (($x131 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var833X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var833X)))
 (= $x5 $x131))))
 ))
 (let (($x200 (and $x26 $x101)))
 (let (($x156 (= $x200 true)))
 (let (($x32 (forall ((input.ind-%var828X (_ BitVec 32)) )(let ((?x166 (bvadd (bvmul input.ind-%var828X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv1 32))) (select input.dst.llvm-mem ?x166))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x166 (_ bv2 32))) ?x112))))
 (let ((?x17 (input.spec-%var-x-1.1.1 input.ind-%var828X)))
 (let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var828X)))
 (=> $x5 (= ?x17 ?x89))))))))
 ))
 (let (($x230 (forall ((input.ind-%var827X (_ BitVec 32)) )(let (($x5 (input.spec-%var-x-1.0.1 input.ind-%var827X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var827X) (bvult input.ind-%var827X input.dst.llvm-%n)))))
 ))
 (let (($x73 (and $x230 $x32)))
 (let (($x177 (= $x73 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x206 (concat ?x222 (concat ?x169 ?x203)))))
 (let (($x114 (= input.dst.llvm-%n ?x122)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x117 (concat ?x59 (concat ?x22 (concat ?x28 ?x92)))))
 (let (($x126 (= input.dst.llvm-%x ?x117)))
 (let (($x208 (and $x126 $x114)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x18)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x31 (= (_ bv0 32) ?x136)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x75 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x39)))
 (let ((?x74 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x74)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (and $x9 $x38)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x57 $x80)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x20 $x14)))
 (let (($x33 (not $x84)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x49 $x37)))
 (let (($x64 (and (not $x81) $x33)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x58 $x91)))
 (let (($x68 (not $x97)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x55 $x143)))
 (let (($x77 (and (not $x53) $x68)))
 (let (($x71 (and (and (and (and (and (and $x77 $x64) $x62) $x96) $x7) $x75) $x31)))
 (let (($x219 (and $x71 $x125)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x138 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x138)))
 (let (($x221 (or false (or false (and (and true (or $x199 $x163)) (or $x218 $x24))))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x25 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x231 (and (and (and $x25 $x15) $x219) $x208)))
 (let (($x60 (and true $x231)))
 (let (($x105 (= $x60 true)))
 (let (($x67 (= $x105 true)))
 (let (($x178 (= $x67 true)))
 (let (($x108 (and $x178 $x177)))
 (let (($x158 (and $x108 $x156)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x161 (and $x8 $x158)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x181 (and $x72 $x161)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x197 (and $x36 $x181)))
 (let (($x98 (=> $x197 $x56)))
 (not $x98)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000884)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000080)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000887)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000083)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000884)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000080)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000887)
                                   (k!0 #x00000886)
                                   (k!0 #x00000885)
                                   (k!0 #x00000884))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x80000083)
                        (k!0 #x80000082)
                        (k!0 #x80000081)
                        (k!0 #x80000080))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2f74e970)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb9383978)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb938397b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2f74e973)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb9383978)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2f74e970)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xb938397b)
                                   (k!0 #xb938397a)
                                   (k!0 #xb9383979)
                                   (k!0 #xb9383978))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x122 false)))
 (let (($x212 (= $x111 true)))
 (let (($x148 (forall ((input.ind-%var862X (_ BitVec 32)) )(let ((?x180 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var862X)))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var862X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var862X)))
 (=> $x200 (= ?x167 ?x180))))))
 ))
 (let (($x182 (forall ((input.ind-%var861X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var861X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var861X)))
 (= $x200 $x202))))
 ))
 (let (($x116 (and $x182 $x148)))
 (let (($x211 (= $x116 true)))
 (let (($x229 (forall ((input.ind-%var856X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var856X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x196))))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var856X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var856X)))
 (=> $x200 (= ?x167 ?x11))))))))
 ))
 (let (($x51 (forall ((input.ind-%var855X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var855X)))
 (= $x200 (and (bvule (_ bv0 32) input.ind-%var855X) (bvult input.ind-%var855X input.dst.llvm-%n)))))
 ))
 (let (($x184 (and $x51 $x229)))
 (let (($x160 (= $x184 true)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x131 true)))
 (let (($x26 (= $x201 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x151 true)))
 (let (($x73 (= $x32 true)))
 (let (($x177 (= $x73 true)))
 (let (($x10 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x112 (= $x10 true)))
 (let (($x172 (= $x112 true)))
 (let (($x89 (= $x172 true)))
 (let ((?x208 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd input.dst.llvm-%x ?x208)))
 (let (($x17 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x231 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x48 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x119 (or false (or false (and (and true (or $x115 $x48)) (or $x230 $x17))))))
 (let (($x162 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) $x119)))
 (let (($x105 (=> (and $x122 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) $x119)))
 (let (($x67 (= $x105 true)))
 (let (($x83 (= $x67 true)))
 (let (($x159 (= $x83 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (= $x222 true)))
 (let (($x169 (= $x137 true)))
 (let (($x203 (= $x169 true)))
 (let (($x126 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x126 true)))
 (let (($x35 (= $x168 true)))
 (let (($x206 (= $x35 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x125)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x71)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x80 $x39)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x38 $x75)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x50 $x62)))
 (let (($x23 (not $x13)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x33 $x64)))
 (let (($x27 (and (not $x78) $x23)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x20 (not $x21)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x215 $x186)))
 (let (($x84 (and (not $x49) $x20)))
 (let (($x93 (and (and (and (and (and (and $x84 $x27) $x9) $x74) $x87) $x31) $x18)))
 (let (($x22 (and $x93 $x219)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x97 (or false (or false (and (and true (or $x144 $x135)) (or $x143 $x53))))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x47 (and $x77 $x22)))
 (let (($x28 (= $x47 true)))
 (let (($x92 (= $x28 true)))
 (let (($x65 (= $x92 true)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x19 true)))
 (let (($x138 (= $x127 true)))
 (let ((?x187 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x66 (= (_ bv0 2) ?x187)))
 (let (($x25 (= $x66 true)))
 (let (($x217 (= $x25 true)))
 (let (($x199 (and $x217 $x138)))
 (let (($x54 (and $x199 $x65)))
 (let (($x139 (and $x54 $x206)))
 (let (($x107 (and $x139 $x203)))
 (let (($x79 (and $x107 $x159)))
 (let (($x185 (and $x79 $x89)))
 (let (($x108 (and $x185 $x177)))
 (let (($x42 (and $x108 $x26)))
 (let (($x85 (and $x42 $x160)))
 (let (($x123 (and $x85 $x211)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x120 $x123)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x145 (and $x193 $x228)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x106 (and $x176 $x145)))
 (let (($x150 (=> $x106 $x212)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x122 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x122 false)))
 (let (($x212 (= $x111 true)))
 (let (($x148 (forall ((input.ind-%var862X (_ BitVec 32)) )(let ((?x180 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var862X)))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var862X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var862X)))
 (=> $x200 (= ?x167 ?x180))))))
 ))
 (let (($x182 (forall ((input.ind-%var861X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var861X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var861X)))
 (= $x200 $x202))))
 ))
 (let (($x116 (and $x182 $x148)))
 (let (($x211 (= $x116 true)))
 (let (($x229 (forall ((input.ind-%var856X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var856X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x196))))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var856X)))
 (let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var856X)))
 (=> $x200 (= ?x167 ?x11))))))))
 ))
 (let (($x51 (forall ((input.ind-%var855X (_ BitVec 32)) )(let (($x200 (input.spec-%var-x-1.0.1 input.ind-%var855X)))
 (= $x200 (and (bvule (_ bv0 32) input.ind-%var855X) (bvult input.ind-%var855X input.dst.llvm-%n)))))
 ))
 (let (($x184 (and $x51 $x229)))
 (let (($x160 (= $x184 true)))
 (let (($x131 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x201 (= $x131 true)))
 (let (($x26 (= $x201 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x32 (= $x151 true)))
 (let (($x73 (= $x32 true)))
 (let (($x177 (= $x73 true)))
 (let (($x10 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x112 (= $x10 true)))
 (let (($x172 (= $x112 true)))
 (let (($x89 (= $x172 true)))
 (let ((?x208 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd input.dst.llvm-%x ?x208)))
 (let (($x17 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd ?x231 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x48 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x119 (or false (or false (and (and true (or $x115 $x48)) (or $x230 $x17))))))
 (let (($x162 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) $x119)))
 (let (($x105 (=> (and $x122 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) $x119)))
 (let (($x67 (= $x105 true)))
 (let (($x83 (= $x67 true)))
 (let (($x159 (= $x83 true)))
 (let (($x222 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x137 (= $x222 true)))
 (let (($x169 (= $x137 true)))
 (let (($x203 (= $x169 true)))
 (let (($x126 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x168 (= $x126 true)))
 (let (($x35 (= $x168 true)))
 (let (($x206 (= $x35 true)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x219 (= (_ bv0 32) ?x125)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x71)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x136)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (and $x80 $x39)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (and $x38 $x75)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x50 $x62)))
 (let (($x23 (not $x13)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x33 $x64)))
 (let (($x27 (and (not $x78) $x23)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x20 (not $x21)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x215 $x186)))
 (let (($x84 (and (not $x49) $x20)))
 (let (($x93 (and (and (and (and (and (and $x84 $x27) $x9) $x74) $x87) $x31) $x18)))
 (let (($x22 (and $x93 $x219)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x149 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x149)))
 (let (($x135 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x149)))
 (let (($x97 (or false (or false (and (and true (or $x144 $x135)) (or $x143 $x53))))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x47 (and $x77 $x22)))
 (let (($x28 (= $x47 true)))
 (let (($x92 (= $x28 true)))
 (let (($x65 (= $x92 true)))
 (let (($x19 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x19 true)))
 (let (($x138 (= $x127 true)))
 (let ((?x187 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x66 (= (_ bv0 2) ?x187)))
 (let (($x25 (= $x66 true)))
 (let (($x217 (= $x25 true)))
 (let (($x199 (and $x217 $x138)))
 (let (($x54 (and $x199 $x65)))
 (let (($x139 (and $x54 $x206)))
 (let (($x107 (and $x139 $x203)))
 (let (($x79 (and $x107 $x159)))
 (let (($x185 (and $x79 $x89)))
 (let (($x108 (and $x185 $x177)))
 (let (($x42 (and $x108 $x26)))
 (let (($x85 (and $x42 $x160)))
 (let (($x123 (and $x85 $x211)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x228 (and $x120 $x123)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x145 (and $x193 $x228)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x106 (and $x176 $x145)))
 (let (($x150 (=> $x106 $x212)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x58600000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0440d548)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2601aa54)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0440d54b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2601aa57)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0440d548)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2601aa54)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x58600003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600001 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x58600000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x10000000 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x30c80044)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x83fb1180)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x11fd2890)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x11fd2893)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x30c80047)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x11fd2890)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x30c80044)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!6 (bvadd #x83fb1183 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1182 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1181 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x83fb1180 (bvmul #x00000004 x!0))))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000100 x!0)
         (ite (bvule #x00000101 x!0) #x00000101 #x00000100)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x45)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x80)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x104 $x100)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x27 $x95)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x20 $x84)))
 (let (($x64 (not $x33)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x64)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x97 $x77)))
 (let (($x186 (not $x215)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x217 $x19)))
 (let (($x14 (and (not $x91) $x186)))
 (let (($x63 (and (and (and (and (and (and $x14 $x96) $x62) $x23) $x74) $x38) $x7)))
 (let (($x71 (and $x63 $x39)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x53 (or false (or false (and (and true (or $x68 $x175)) (or $x221 $x15))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x53)))
 (let (($x141 (and $x58 $x71)))
 (let (($x76 (= $x141 true)))
 (let (($x158 (= $x76 true)))
 (let (($x118 (forall ((input.ind-%var890X (_ BitVec 32)) )(let ((?x106 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var890X)))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var890X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var890X)))
 (=> $x166 (= ?x32 ?x106))))))
 ))
 (let (($x116 (forall ((input.ind-%var889X (_ BitVec 32)) )(let (($x180 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var889X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var889X)))
 (= $x166 $x180))))
 ))
 (let (($x163 (and $x116 $x118)))
 (let (($x142 (= $x163 true)))
 (let (($x229 (forall ((input.ind-%var884X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var884X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x205))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var884X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var884X)))
 (=> $x166 (= ?x32 ?x11))))))))
 ))
 (let (($x172 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var883X)))
 (= $x166 (and (bvule (_ bv0 32) input.ind-%var883X) (bvult input.ind-%var883X input.dst.llvm-%n)))))
 ))
 (let (($x184 (and $x172 $x229)))
 (let (($x160 (= $x184 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x231 (concat ?x208 (concat ?x70 (concat ?x169 ?x222)))))
 (let (($x178 (= input.dst.llvm-%n ?x231)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x126 (concat ?x65 (concat ?x22 ?x125)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x155 (and $x35 $x178)))
 (let (($x5 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x58) $x71)))
 (let (($x115 (and $x5 $x155)))
 (let (($x48 (and true $x115)))
 (let (($x146 (= $x48 true)))
 (let (($x113 (= $x146 true)))
 (let (($x230 (= $x113 true)))
 (let (($x85 (and $x230 $x160)))
 (let (($x128 (and $x85 $x142)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x198 $x128)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x36 $x156)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x223 (and $x227 $x153)))
 (let (($x161 (=> $x223 $x158)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x45)))
 (let ((?x80 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x80)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x104 $x100)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (and $x27 $x95)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x20 $x84)))
 (let (($x64 (not $x33)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x64)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x97 $x77)))
 (let (($x186 (not $x215)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x217 $x19)))
 (let (($x14 (and (not $x91) $x186)))
 (let (($x63 (and (and (and (and (and (and $x14 $x96) $x62) $x23) $x74) $x38) $x7)))
 (let (($x71 (and $x63 $x39)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x53 (or false (or false (and (and true (or $x68 $x175)) (or $x221 $x15))))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x53)))
 (let (($x141 (and $x58 $x71)))
 (let (($x76 (= $x141 true)))
 (let (($x158 (= $x76 true)))
 (let (($x118 (forall ((input.ind-%var890X (_ BitVec 32)) )(let ((?x106 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var890X)))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var890X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var890X)))
 (=> $x166 (= ?x32 ?x106))))))
 ))
 (let (($x116 (forall ((input.ind-%var889X (_ BitVec 32)) )(let (($x180 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var889X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var889X)))
 (= $x166 $x180))))
 ))
 (let (($x163 (and $x116 $x118)))
 (let (($x142 (= $x163 true)))
 (let (($x229 (forall ((input.ind-%var884X (_ BitVec 32)) )(let ((?x82 (bvadd (bvmul input.ind-%var884X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv1 32))) (select input.dst.llvm-mem ?x82))))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x82 (_ bv2 32))) ?x205))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var884X)))
 (let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var884X)))
 (=> $x166 (= ?x32 ?x11))))))))
 ))
 (let (($x172 (forall ((input.ind-%var883X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-1.0.1 input.ind-%var883X)))
 (= $x166 (and (bvule (_ bv0 32) input.ind-%var883X) (bvult input.ind-%var883X input.dst.llvm-%n)))))
 ))
 (let (($x184 (and $x172 $x229)))
 (let (($x160 (= $x184 true)))
 (let ((?x222 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x231 (concat ?x208 (concat ?x70 (concat ?x169 ?x222)))))
 (let (($x178 (= input.dst.llvm-%n ?x231)))
 (let ((?x125 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x126 (concat ?x65 (concat ?x22 ?x125)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x155 (and $x35 $x178)))
 (let (($x5 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x58) $x71)))
 (let (($x115 (and $x5 $x155)))
 (let (($x48 (and true $x115)))
 (let (($x146 (= $x48 true)))
 (let (($x113 (= $x146 true)))
 (let (($x230 (= $x113 true)))
 (let (($x85 (and $x230 $x160)))
 (let (($x128 (and $x85 $x142)))
 (let (($x198 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x156 (and $x198 $x128)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x36 $x156)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x223 (and $x227 $x153)))
 (let (($x161 (=> $x223 $x158)))
 (not $x161))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x123 (= (_ bv0 2) ?x212)))
 (let (($x150 (= $x123 true)))
 (let (($x109 (forall ((input.ind-%var902X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var902X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var902X)))
 (let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var902X)))
 (=> $x172 (= ?x11 ?x98))))))
 ))
 (let (($x204 (forall ((input.ind-%var901X (_ BitVec 32)) )(let (($x201 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var901X)))
 (let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var901X)))
 (= $x172 $x201))))
 ))
 (let (($x67 (and $x204 $x109)))
 (let (($x83 (= $x67 true)))
 (let (($x73 (forall ((input.ind-%var896X (_ BitVec 32)) )(let ((?x223 (bvadd (bvmul input.ind-%var896X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x161))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var896X)))
 (let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var896X)))
 (=> $x172 (= ?x11 ?x46))))))))
 ))
 (let (($x88 (forall ((input.ind-%var895X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var895X)))
 (= $x172 (and (bvule (_ bv0 32) input.ind-%var895X) (bvult input.ind-%var895X input.dst.llvm-%n)))))
 ))
 (let (($x89 (and $x88 $x73)))
 (let (($x151 (= $x89 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x231 (concat ?x222 (concat ?x70 ?x208)))))
 (let (($x155 (= input.dst.llvm-%n ?x178)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x54 (concat ?x22 (concat ?x28 ?x117)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x115 (and $x35 $x155)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x102)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x74)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x23 $x104)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x13 $x57)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x78 $x20)))
 (let (($x33 (not $x84)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x33)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x49 $x97)))
 (let (($x215 (not $x77)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x138 $x41)))
 (let (($x14 (and (not $x91) $x215)))
 (let (($x39 (and (and (and (and (and (and $x14 $x96) $x50) $x87) $x9) $x95) $x136)))
 (let (($x71 (and $x39 $x38)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x140 (or false (or false (and (and true (or $x149 $x144)) (or $x44 $x143))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x140)))
 (let (($x52 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (and (and (and $x52 $x19) $x71) $x115)))
 (let (($x230 (and true $x113)))
 (let (($x194 (= $x230 true)))
 (let (($x166 (= $x194 true)))
 (let (($x79 (= $x166 true)))
 (let (($x17 (and $x79 $x151)))
 (let (($x207 (and $x17 $x83)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x120 $x207)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x99 (and $x214 $x224)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x72 $x99)))
 (let (($x171 (=> $x185 $x150)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x212 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x123 (= (_ bv0 2) ?x212)))
 (let (($x150 (= $x123 true)))
 (let (($x109 (forall ((input.ind-%var902X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var902X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var902X)))
 (let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var902X)))
 (=> $x172 (= ?x11 ?x98))))))
 ))
 (let (($x204 (forall ((input.ind-%var901X (_ BitVec 32)) )(let (($x201 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var901X)))
 (let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var901X)))
 (= $x172 $x201))))
 ))
 (let (($x67 (and $x204 $x109)))
 (let (($x83 (= $x67 true)))
 (let (($x73 (forall ((input.ind-%var896X (_ BitVec 32)) )(let ((?x223 (bvadd (bvmul input.ind-%var896X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem ?x223))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x223 (_ bv2 32))) ?x161))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var896X)))
 (let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var896X)))
 (=> $x172 (= ?x11 ?x46))))))))
 ))
 (let (($x88 (forall ((input.ind-%var895X (_ BitVec 32)) )(let (($x172 (input.spec-%var-x-1.0.1 input.ind-%var895X)))
 (= $x172 (and (bvule (_ bv0 32) input.ind-%var895X) (bvult input.ind-%var895X input.dst.llvm-%n)))))
 ))
 (let (($x89 (and $x88 $x73)))
 (let (($x151 (= $x89 true)))
 (let ((?x208 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x178 (concat ?x231 (concat ?x222 (concat ?x70 ?x208)))))
 (let (($x155 (= input.dst.llvm-%n ?x178)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x54 (concat ?x22 (concat ?x28 ?x117)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x115 (and $x35 $x155)))
 (let ((?x102 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x102)))
 (let ((?x74 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x74)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x23 $x104)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x13 $x57)))
 (let (($x87 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x78 $x20)))
 (let (($x33 (not $x84)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x33)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x49 $x97)))
 (let (($x215 (not $x77)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x138 $x41)))
 (let (($x14 (and (not $x91) $x215)))
 (let (($x39 (and (and (and (and (and (and $x14 $x96) $x50) $x87) $x9) $x95) $x136)))
 (let (($x71 (and $x39 $x38)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x140 (or false (or false (and (and true (or $x149 $x144)) (or $x44 $x143))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x140)))
 (let (($x52 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (and (and (and $x52 $x19) $x71) $x115)))
 (let (($x230 (and true $x113)))
 (let (($x194 (= $x230 true)))
 (let (($x166 (= $x194 true)))
 (let (($x79 (= $x166 true)))
 (let (($x17 (and $x79 $x151)))
 (let (($x207 (and $x17 $x83)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x120 $x207)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x99 (and $x214 $x224)))
 (let (($x72 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x72 $x99)))
 (let (($x171 (=> $x185 $x150)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x156 (= $x205 true)))
 (let (($x228 (= $x156 true)))
 (let (($x200 (forall ((input.ind-%var914X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var914X)))
 (let ((?x46 (input.spec-%var-x-1.1.1 input.ind-%var914X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var914X)))
 (=> $x88 (= ?x46 ?x116))))))
 ))
 (let (($x106 (forall ((input.ind-%var913X (_ BitVec 32)) )(let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var913X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var913X)))
 (= $x88 $x184))))
 ))
 (let (($x10 (and $x106 $x200)))
 (let (($x82 (= $x10 true)))
 (let (($x32 (forall ((input.ind-%var908X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var908X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x150))))
 (let ((?x46 (input.spec-%var-x-1.1.1 input.ind-%var908X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var908X)))
 (=> $x88 (= ?x46 ?x18))))))))
 ))
 (let (($x158 (forall ((input.ind-%var907X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var907X)))
 (= $x88 (and (bvule (_ bv0 32) input.ind-%var907X) (bvult input.ind-%var907X input.dst.llvm-%n)))))
 ))
 (let (($x210 (and $x158 $x32)))
 (let (($x226 (= $x210 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x178 (concat ?x208 (concat ?x222 ?x231)))))
 (let (($x115 (= input.dst.llvm-%n ?x155)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x125 (concat ?x28 (concat ?x65 ?x47)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x113 (and $x35 $x115)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x100)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x9)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x87 $x23)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x62 $x59)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x64 $x78)))
 (let (($x84 (not $x20)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x186 $x49)))
 (let (($x77 (not $x97)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x218 $x217)))
 (let (($x14 (and (not $x91) $x77)))
 (let (($x38 (and (and (and (and (and (and $x14 $x96) $x75) $x80) $x27) $x57) $x63)))
 (let (($x71 (and $x38 $x95)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x48 (or false (or false (and (and true (or $x24 $x221)) (or $x55 $x53))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x48)))
 (let (($x8 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x166 (and (and (and $x8 $x41) $x71) $x113)))
 (let (($x79 (and true $x166)))
 (let (($x112 (= $x79 true)))
 (let (($x172 (= $x112 true)))
 (let (($x12 (= $x172 true)))
 (let (($x34 (and $x12 $x226)))
 (let (($x196 (and $x34 $x82)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x36 $x196)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x105 (and $x157 $x128)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x176 $x105)))
 (let (($x101 (=> $x51 $x228)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x205 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x156 (= $x205 true)))
 (let (($x228 (= $x156 true)))
 (let (($x200 (forall ((input.ind-%var914X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var914X)))
 (let ((?x46 (input.spec-%var-x-1.1.1 input.ind-%var914X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var914X)))
 (=> $x88 (= ?x46 ?x116))))))
 ))
 (let (($x106 (forall ((input.ind-%var913X (_ BitVec 32)) )(let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var913X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var913X)))
 (= $x88 $x184))))
 ))
 (let (($x10 (and $x106 $x200)))
 (let (($x82 (= $x10 true)))
 (let (($x32 (forall ((input.ind-%var908X (_ BitVec 32)) )(let ((?x185 (bvadd (bvmul input.ind-%var908X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x150))))
 (let ((?x46 (input.spec-%var-x-1.1.1 input.ind-%var908X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var908X)))
 (=> $x88 (= ?x46 ?x18))))))))
 ))
 (let (($x158 (forall ((input.ind-%var907X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var907X)))
 (= $x88 (and (bvule (_ bv0 32) input.ind-%var907X) (bvult input.ind-%var907X input.dst.llvm-%n)))))
 ))
 (let (($x210 (and $x158 $x32)))
 (let (($x226 (= $x210 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x178 (concat ?x208 (concat ?x222 ?x231)))))
 (let (($x115 (= input.dst.llvm-%n ?x155)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x125 (concat ?x28 (concat ?x65 ?x47)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x113 (and $x35 $x115)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x100)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x9)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x23 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x87 $x23)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x62 $x59)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x64 $x78)))
 (let (($x84 (not $x20)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x84)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x186 $x49)))
 (let (($x77 (not $x97)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x218 $x217)))
 (let (($x14 (and (not $x91) $x77)))
 (let (($x38 (and (and (and (and (and (and $x14 $x96) $x75) $x80) $x27) $x57) $x63)))
 (let (($x71 (and $x38 $x95)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x221 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x48 (or false (or false (and (and true (or $x24 $x221)) (or $x55 $x53))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x48)))
 (let (($x8 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x166 (and (and (and $x8 $x41) $x71) $x113)))
 (let (($x79 (and true $x166)))
 (let (($x112 (= $x79 true)))
 (let (($x172 (= $x112 true)))
 (let (($x12 (= $x172 true)))
 (let (($x34 (and $x12 $x226)))
 (let (($x196 (and $x34 $x82)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x128 (and $x36 $x196)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x105 (and $x157 $x128)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x176 $x105)))
 (let (($x101 (=> $x51 $x228)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x225 (forall ((input.ind-%var932X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var932X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x101))))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var932X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var932X)))
 (=> $x158 (= ?x18 ?x160))))))))
 ))
 (let (($x232 (forall ((input.ind-%var931X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var931X)))
 (= $x158 (and (bvule (_ bv0 32) input.ind-%var931X) (bvult input.ind-%var931X input.dst.llvm-%n)))))
 ))
 (let (($x195 (and $x232 $x225)))
 (let (($x224 (= true true)))
 (let (($x192 (and $x224 $x195)))
 (let (($x94 (= $x192 true)))
 (let (($x121 (forall ((input.ind-%var926X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var926X)))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var926X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var926X)))
 (=> $x158 (= ?x18 ?x145))))))
 ))
 (let (($x182 (forall ((input.ind-%var925X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var925X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var925X)))
 (= $x158 $x151))))
 ))
 (let (($x223 (and $x182 $x121)))
 (let (($x139 (= $x223 true)))
 (let (($x111 (forall ((input.ind-%var920X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var920X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x101))))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var920X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var920X)))
 (=> $x158 (= ?x18 ?x160))))))))
 ))
 (let (($x123 (forall ((input.ind-%var919X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var919X)))
 (= $x158 (and (bvule (_ bv0 32) input.ind-%var919X) (bvult input.ind-%var919X input.dst.llvm-%n)))))
 ))
 (let (($x141 (and $x123 $x111)))
 (let (($x25 (= $x141 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x155 (concat ?x231 (concat ?x208 ?x178)))))
 (let (($x113 (= input.dst.llvm-%n ?x115)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x117 (concat ?x65 (concat ?x22 ?x92)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x166 (and $x35 $x113)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x104)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x27)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x80 $x87)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x50 $x7)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x33 $x64)))
 (let (($x20 (not $x78)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x20)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x215 $x186)))
 (let (($x97 (not $x49)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x175 $x138)))
 (let (($x14 (and (not $x91) $x97)))
 (let (($x95 (and (and (and (and (and (and $x14 $x96) $x31) $x74) $x13) $x59) $x39)))
 (let (($x71 (and $x95 $x57)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x221)))
 (let (($x230 (or false (or false (and (and true (or $x135 $x44)) (or $x58 $x140))))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x230)))
 (let (($x193 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x172 (and (and (and $x193 $x217) $x71) $x166)))
 (let (($x12 (and true $x172)))
 (let (($x124 (= $x12 true)))
 (let (($x88 (= $x124 true)))
 (let (($x190 (= $x88 true)))
 (let (($x86 (and $x190 $x25)))
 (let (($x207 (and $x86 $x139)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x214 $x207)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x118 (and $x227 $x108)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x177 $x118)))
 (let (($x30 (=> $x161 $x94)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x225 (forall ((input.ind-%var932X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var932X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x101))))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var932X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var932X)))
 (=> $x158 (= ?x18 ?x160))))))))
 ))
 (let (($x232 (forall ((input.ind-%var931X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var931X)))
 (= $x158 (and (bvule (_ bv0 32) input.ind-%var931X) (bvult input.ind-%var931X input.dst.llvm-%n)))))
 ))
 (let (($x195 (and $x232 $x225)))
 (let (($x224 (= true true)))
 (let (($x192 (and $x224 $x195)))
 (let (($x94 (= $x192 true)))
 (let (($x121 (forall ((input.ind-%var926X (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var926X)))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var926X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var926X)))
 (=> $x158 (= ?x18 ?x145))))))
 ))
 (let (($x182 (forall ((input.ind-%var925X (_ BitVec 32)) )(let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var925X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var925X)))
 (= $x158 $x151))))
 ))
 (let (($x223 (and $x182 $x121)))
 (let (($x139 (= $x223 true)))
 (let (($x111 (forall ((input.ind-%var920X (_ BitVec 32)) )(let ((?x51 (bvadd (bvmul input.ind-%var920X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv1 32))) (select input.dst.llvm-mem ?x51))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x51 (_ bv2 32))) ?x101))))
 (let ((?x18 (input.spec-%var-x-1.1.1 input.ind-%var920X)))
 (let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var920X)))
 (=> $x158 (= ?x18 ?x160))))))))
 ))
 (let (($x123 (forall ((input.ind-%var919X (_ BitVec 32)) )(let (($x158 (input.spec-%var-x-1.0.1 input.ind-%var919X)))
 (= $x158 (and (bvule (_ bv0 32) input.ind-%var919X) (bvult input.ind-%var919X input.dst.llvm-%n)))))
 ))
 (let (($x141 (and $x123 $x111)))
 (let (($x25 (= $x141 true)))
 (let ((?x178 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x155 (concat ?x231 (concat ?x208 ?x178)))))
 (let (($x113 (= input.dst.llvm-%n ?x115)))
 (let ((?x92 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x117 (concat ?x65 (concat ?x22 ?x92)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x166 (and $x35 $x113)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x104)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x27)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x80 $x87)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x50 $x7)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x33 $x64)))
 (let (($x20 (not $x78)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x20)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x215 $x186)))
 (let (($x97 (not $x49)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x175 $x138)))
 (let (($x14 (and (not $x91) $x97)))
 (let (($x95 (and (and (and (and (and (and $x14 $x96) $x31) $x74) $x13) $x59) $x39)))
 (let (($x71 (and $x95 $x57)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x221)))
 (let (($x230 (or false (or false (and (and true (or $x135 $x44)) (or $x58 $x140))))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x230)))
 (let (($x193 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x172 (and (and (and $x193 $x217) $x71) $x166)))
 (let (($x12 (and true $x172)))
 (let (($x124 (= $x12 true)))
 (let (($x88 (= $x124 true)))
 (let (($x190 (= $x88 true)))
 (let (($x86 (and $x190 $x25)))
 (let (($x207 (and $x86 $x139)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x214 $x207)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x118 (and $x227 $x108)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x177 $x118)))
 (let (($x30 (=> $x161 $x94)))
 (not $x30)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (forall ((input.ind-%var950X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var950X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x195))))
 (let ((?x160 (input.spec-%var-x-1.1.1 input.ind-%var950X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var950X)))
 (=> $x123 (= ?x160 ?x68))))))))
 ))
 (let (($x174 (forall ((input.ind-%var949X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var949X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var949X) (bvult input.ind-%var949X input.dst.llvm-%n)))))
 ))
 (let (($x159 (and $x174 $x56)))
 (let (($x142 (= true true)))
 (let (($x132 (and $x142 $x159)))
 (let (($x6 (= $x132 true)))
 (let (($x17 (forall ((input.ind-%var944X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var944X)))
 (let ((?x160 (input.spec-%var-x-1.1.1 input.ind-%var944X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (=> $x123 (= ?x160 ?x184))))))
 ))
 (let (($x226 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var943X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var943X)))
 (= $x123 $x93))))
 ))
 (let (($x229 (and $x226 $x17)))
 (let (($x89 (= $x229 true)))
 (let (($x109 (forall ((input.ind-%var938X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var938X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x195))))
 (let ((?x160 (input.spec-%var-x-1.1.1 input.ind-%var938X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var938X)))
 (=> $x123 (= ?x160 ?x68))))))))
 ))
 (let (($x228 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var937X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var937X) (bvult input.ind-%var937X input.dst.llvm-%n)))))
 ))
 (let (($x83 (and $x228 $x109)))
 (let (($x46 (= $x83 true)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x115 (concat ?x178 (concat ?x231 ?x155)))))
 (let (($x166 (= input.dst.llvm-%n ?x113)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x47 (concat ?x22 (concat ?x28 ?x219)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x172 (and $x35 $x166)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x23)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x13)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x74 $x80)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x75 $x136)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x84 $x33)))
 (let (($x78 (not $x64)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x78)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x77 $x215)))
 (let (($x49 (not $x186)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x144 $x218)))
 (let (($x14 (and (not $x91) $x49)))
 (let (($x57 (and (and (and (and (and (and $x14 $x96) $x45) $x9) $x62) $x7) $x38)))
 (let (($x71 (and $x57 $x59)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x79 (or false (or false (and (and true (or $x15 $x55)) (or $x19 $x48))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x198 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x88 (and (and (and $x198 $x138) $x71) $x172)))
 (let (($x190 (and true $x88)))
 (let (($x76 (= $x190 true)))
 (let (($x158 (= $x76 true)))
 (let (($x171 (= $x158 true)))
 (let (($x170 (and $x171 $x46)))
 (let (($x204 (and $x170 $x89)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x157 $x204)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x66 (and $x72 $x134)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x209 $x66)))
 (let (($x16 (=> $x185 $x6)))
 (not $x16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x56 (forall ((input.ind-%var950X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var950X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x195))))
 (let ((?x160 (input.spec-%var-x-1.1.1 input.ind-%var950X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var950X)))
 (=> $x123 (= ?x160 ?x68))))))))
 ))
 (let (($x174 (forall ((input.ind-%var949X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var949X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var949X) (bvult input.ind-%var949X input.dst.llvm-%n)))))
 ))
 (let (($x159 (and $x174 $x56)))
 (let (($x142 (= true true)))
 (let (($x132 (and $x142 $x159)))
 (let (($x6 (= $x132 true)))
 (let (($x17 (forall ((input.ind-%var944X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var944X)))
 (let ((?x160 (input.spec-%var-x-1.1.1 input.ind-%var944X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (=> $x123 (= ?x160 ?x184))))))
 ))
 (let (($x226 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var943X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var943X)))
 (= $x123 $x93))))
 ))
 (let (($x229 (and $x226 $x17)))
 (let (($x89 (= $x229 true)))
 (let (($x109 (forall ((input.ind-%var938X (_ BitVec 32)) )(let ((?x161 (bvadd (bvmul input.ind-%var938X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv1 32))) (select input.dst.llvm-mem ?x161))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x161 (_ bv2 32))) ?x195))))
 (let ((?x160 (input.spec-%var-x-1.1.1 input.ind-%var938X)))
 (let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var938X)))
 (=> $x123 (= ?x160 ?x68))))))))
 ))
 (let (($x228 (forall ((input.ind-%var937X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-1.0.1 input.ind-%var937X)))
 (= $x123 (and (bvule (_ bv0 32) input.ind-%var937X) (bvult input.ind-%var937X input.dst.llvm-%n)))))
 ))
 (let (($x83 (and $x228 $x109)))
 (let (($x46 (= $x83 true)))
 (let ((?x155 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x115 (concat ?x178 (concat ?x231 ?x155)))))
 (let (($x166 (= input.dst.llvm-%n ?x113)))
 (let ((?x219 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x47 (concat ?x22 (concat ?x28 ?x219)))))
 (let (($x35 (= input.dst.llvm-%x ?x168)))
 (let (($x172 (and $x35 $x166)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x23)))
 (let ((?x13 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x13)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x50)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x74 $x80)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x75 $x136)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x84 $x33)))
 (let (($x78 (not $x64)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x37 $x81)))
 (let (($x96 (and (not $x21) $x78)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x77 $x215)))
 (let (($x49 (not $x186)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x144 $x218)))
 (let (($x14 (and (not $x91) $x49)))
 (let (($x57 (and (and (and (and (and (and $x14 $x96) $x45) $x9) $x62) $x7) $x38)))
 (let (($x71 (and $x57 $x59)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x79 (or false (or false (and (and true (or $x15 $x55)) (or $x19 $x48))))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x198 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x88 (and (and (and $x198 $x138) $x71) $x172)))
 (let (($x190 (and true $x88)))
 (let (($x76 (= $x190 true)))
 (let (($x158 (= $x76 true)))
 (let (($x171 (= $x158 true)))
 (let (($x170 (and $x171 $x46)))
 (let (($x204 (and $x170 $x89)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x157 $x204)))
 (let (($x72 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x66 (and $x72 $x134)))
 (let (($x209 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x185 (and $x209 $x66)))
 (let (($x16 (=> $x185 $x6)))
 (not $x16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x224 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x224 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (forall ((input.ind-%var968X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var968X)))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var968X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var968X)))
 (=> $x114 (= ?x139 ?x235))))))
 ))
 (let (($x262 (forall ((input.ind-%var967X (_ BitVec 32)) )(let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var967X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var967X)))
 (= $x114 $x183))))
 ))
 (let (($x272 (and $x262 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x253 (forall ((input.ind-%var962X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var962X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x128))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var962X)))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var962X)))
 (=> $x183 (= ?x235 ?x101))))))))
 ))
 (let (($x130 (forall ((input.ind-%var961X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var961X) (bvult input.ind-%var961X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var961X)))
 (= $x183 $x191))))
 ))
 (let (($x254 (and $x130 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x40 (forall ((input.ind-%var956X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var956X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x128))))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var956X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var956X)))
 (=> $x114 (= ?x139 ?x101))))))))
 ))
 (let (($x98 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var955X) (bvult input.ind-%var955X input.dst.llvm-%n))))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var955X)))
 (= $x114 $x191))))
 ))
 (let (($x10 (and $x98 $x40)))
 (let (($x106 (= $x10 true)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x73 true)))
 (let (($x18 (= $x163 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x147 true)))
 (let (($x149 (= $x193 true)))
 (let (($x137 (= $x149 true)))
 (let (($x56 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (= $x56 true)))
 (let (($x132 (= $x159 true)))
 (let (($x6 (= $x132 true)))
 (let ((?x30 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvadd input.dst.llvm-%x ?x30)))
 (let (($x82 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x68 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x210 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x204 (or false (or false (and (and true (or $x93 $x210)) (or $x131 $x82))))))
 (let (($x66 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x146 (=> (and $x224 (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x109 (= $x146 true)))
 (let (($x185 (= $x109 true)))
 (let (($x142 (= $x185 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x110 true)))
 (let (($x192 (= $x8 true)))
 (let (($x94 (= $x192 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x160 (= $x228 true)))
 (let (($x111 (= $x160 true)))
 (let (($x118 (= $x111 true)))
 (let (($x123 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x202 (= $x123 true)))
 (let (($x5 (= $x202 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x222)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x208)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x92)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x219 $x168)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x28 $x35)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x59 $x71)))
 (let (($x112 (not $x124)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x38 $x57)))
 (let (($x47 (and (not $x23) $x112)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x62 $x95)))
 (let (($x7 (not $x87)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x37 $x81)))
 (let (($x13 (and (not $x136) $x7)))
 (let (($x172 (and (and (and (and (and (and $x13 $x47) $x125) $x117) $x206) $x115) $x178)))
 (let (($x88 (and $x172 $x231)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x63 (or false (or false (and (and true (or $x78 $x96)) (or $x31 $x9))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x190 (and $x80 $x88)))
 (let (($x76 (= $x190 true)))
 (let (($x158 (= $x76 true)))
 (let (($x171 (= $x158 true)))
 (let (($x97 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x77 (= $x97 true)))
 (let (($x215 (= $x77 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x138 true)))
 (let (($x144 (= $x12 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x48 (= $x140 true)))
 (let (($x41 (= $x48 true)))
 (let (($x230 (= $x41 true)))
 (let (($x55 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x55 true)))
 (let (($x58 (= $x143 true)))
 (let (($x53 (= $x58 true)))
 (let (($x175 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x175 true)))
 (let (($x44 (= $x135 true)))
 (let (($x15 (= $x44 true)))
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x36)))
 (let (($x198 (= $x120 true)))
 (let (($x24 (= $x198 true)))
 (let (($x152 (and $x24 $x15)))
 (let (($x19 (and $x152 $x53)))
 (let (($x217 (and $x19 $x230)))
 (let (($x218 (and $x217 $x144)))
 (let (($x186 (and $x218 $x215)))
 (let (($x212 (and $x186 $x171)))
 (let (($x52 (and $x212 $x5)))
 (let (($x161 (and $x52 $x118)))
 (let (($x232 (and $x161 $x94)))
 (let (($x174 (and $x232 $x142)))
 (let (($x16 (and $x174 $x6)))
 (let (($x194 (and $x16 $x137)))
 (let (($x60 (and $x194 $x18)))
 (let (($x148 (and $x60 $x106)))
 (let (($x256 (and $x148 $x255)))
 (let (($x274 (and $x256 $x273)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x227 $x274)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x276 (and $x11 $x275)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x176 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x224 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x278 (= $x224 false)))
 (let (($x279 (= $x278 true)))
 (let (($x271 (forall ((input.ind-%var968X (_ BitVec 32)) )(let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var968X)))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var968X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var968X)))
 (=> $x114 (= ?x139 ?x235))))))
 ))
 (let (($x262 (forall ((input.ind-%var967X (_ BitVec 32)) )(let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var967X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var967X)))
 (= $x114 $x183))))
 ))
 (let (($x272 (and $x262 $x271)))
 (let (($x273 (= $x272 true)))
 (let (($x253 (forall ((input.ind-%var962X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var962X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x128))))
 (let ((?x235 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var962X)))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var962X)))
 (=> $x183 (= ?x235 ?x101))))))))
 ))
 (let (($x130 (forall ((input.ind-%var961X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var961X) (bvult input.ind-%var961X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var961X)))
 (= $x183 $x191))))
 ))
 (let (($x254 (and $x130 $x253)))
 (let (($x255 (= $x254 true)))
 (let (($x40 (forall ((input.ind-%var956X (_ BitVec 32)) )(let ((?x197 (bvadd (bvmul input.ind-%var956X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x128))))
 (let ((?x139 (input.spec-%var-x-1.1.1 input.ind-%var956X)))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var956X)))
 (=> $x114 (= ?x139 ?x101))))))))
 ))
 (let (($x98 (forall ((input.ind-%var955X (_ BitVec 32)) )(let (($x191 (and (bvule (_ bv0 32) input.ind-%var955X) (bvult input.ind-%var955X input.dst.llvm-%n))))
 (let (($x114 (input.spec-%var-x-1.0.1 input.ind-%var955X)))
 (= $x114 $x191))))
 ))
 (let (($x10 (and $x98 $x40)))
 (let (($x106 (= $x10 true)))
 (let (($x73 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x73 true)))
 (let (($x18 (= $x163 true)))
 (let (($x147 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x193 (= $x147 true)))
 (let (($x149 (= $x193 true)))
 (let (($x137 (= $x149 true)))
 (let (($x56 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x159 (= $x56 true)))
 (let (($x132 (= $x159 true)))
 (let (($x6 (= $x132 true)))
 (let ((?x30 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x68 (bvadd input.dst.llvm-%x ?x30)))
 (let (($x82 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x68 (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x210 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x204 (or false (or false (and (and true (or $x93 $x210)) (or $x131 $x82))))))
 (let (($x66 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) $x204)))
 (let (($x146 (=> (and $x224 (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32)))) $x204)))
 (let (($x109 (= $x146 true)))
 (let (($x185 (= $x109 true)))
 (let (($x142 (= $x185 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x110 true)))
 (let (($x192 (= $x8 true)))
 (let (($x94 (= $x192 true)))
 (let (($x228 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x160 (= $x228 true)))
 (let (($x111 (= $x160 true)))
 (let (($x118 (= $x111 true)))
 (let (($x123 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x202 (= $x123 true)))
 (let (($x5 (= $x202 true)))
 (let ((?x222 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x231 (= (_ bv0 32) ?x222)))
 (let ((?x208 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x178 (= (_ bv0 32) ?x208)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x92)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (and $x219 $x168)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (and $x28 $x35)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x59 $x71)))
 (let (($x112 (not $x124)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (and $x38 $x57)))
 (let (($x47 (and (not $x23) $x112)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x62 $x95)))
 (let (($x7 (not $x87)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x37 $x81)))
 (let (($x13 (and (not $x136) $x7)))
 (let (($x172 (and (and (and (and (and (and $x13 $x47) $x125) $x117) $x206) $x115) $x178)))
 (let (($x88 (and $x172 $x231)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x78 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x63 (or false (or false (and (and true (or $x78 $x96)) (or $x31 $x9))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x190 (and $x80 $x88)))
 (let (($x76 (= $x190 true)))
 (let (($x158 (= $x76 true)))
 (let (($x171 (= $x158 true)))
 (let (($x97 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x77 (= $x97 true)))
 (let (($x215 (= $x77 true)))
 (let (($x138 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x12 (= $x138 true)))
 (let (($x144 (= $x12 true)))
 (let (($x140 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x48 (= $x140 true)))
 (let (($x41 (= $x48 true)))
 (let (($x230 (= $x41 true)))
 (let (($x55 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x143 (= $x55 true)))
 (let (($x58 (= $x143 true)))
 (let (($x53 (= $x58 true)))
 (let (($x175 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x135 (= $x175 true)))
 (let (($x44 (= $x135 true)))
 (let (($x15 (= $x44 true)))
 (let ((?x36 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x36)))
 (let (($x198 (= $x120 true)))
 (let (($x24 (= $x198 true)))
 (let (($x152 (and $x24 $x15)))
 (let (($x19 (and $x152 $x53)))
 (let (($x217 (and $x19 $x230)))
 (let (($x218 (and $x217 $x144)))
 (let (($x186 (and $x218 $x215)))
 (let (($x212 (and $x186 $x171)))
 (let (($x52 (and $x212 $x5)))
 (let (($x161 (and $x52 $x118)))
 (let (($x232 (and $x161 $x94)))
 (let (($x174 (and $x232 $x142)))
 (let (($x16 (and $x174 $x6)))
 (let (($x194 (and $x16 $x137)))
 (let (($x60 (and $x194 $x18)))
 (let (($x148 (and $x60 $x106)))
 (let (($x256 (and $x148 $x255)))
 (let (($x274 (and $x256 $x273)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x275 (and $x227 $x274)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x276 (and $x11 $x275)))
 (let (($x176 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x176 $x276)))
 (let (($x280 (=> $x277 $x279)))
 (not $x280))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x000255c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x02000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00021bc0)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x000255c7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00021bc3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x000255c4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00021bc0)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x02000000 x!0)
         (ite (bvule #x02000001 x!0) #x02000001 #x02000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00008003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008001 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00008000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00008003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008001 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00008000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9d3011c4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xb7315590)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbbeda684)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbbeda687)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9d3011c7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbbeda684)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9d3011c4)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xb7315593 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315592 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315591 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xb7315590 (bvmul #x00000004 x!0))))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000040 x!0)
         (ite (bvule #x00000041 x!0) #x00000041 #x00000040)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #xb7315593 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315592 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315591 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xb7315590 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x249 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x249 (_ bv1 32))))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (not $x72)))
 (let (($x179 (or $x182 $x260)))
 (let (($x250 (= $x179 true)))
 (let (($x267 (= $x250 true)))
 (let (($x259 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let ((?x200 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1176X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var1176X)))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1176X)))
 (=> $x18 (= ?x165 ?x200))))))
 ))
 (let (($x244 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1175X)))
 (= $x18 $x279))))
 ))
 (let (($x266 (and $x244 $x259)))
 (let (($x121 (= $x266 true)))
 (let (($x133 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1170X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x254))))
 (let ((?x200 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1170X)))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (=> $x279 (= ?x200 ?x270))))))))
 ))
 (let (($x32 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1169X) (bvult input.ind-%var1169X input.dst.llvm-%n))))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1169X)))
 (= $x279 $x98))))
 ))
 (let (($x29 (and $x32 $x133)))
 (let (($x237 (= $x29 true)))
 (let (($x273 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1164X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x254))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var1164X)))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1164X)))
 (=> $x18 (= ?x165 ?x270))))))))
 ))
 (let (($x201 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1163X) (bvult input.ind-%var1163X input.dst.llvm-%n))))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1163X)))
 (= $x18 $x98))))
 ))
 (let (($x274 (and $x201 $x273)))
 (let (($x275 (= $x274 true)))
 (let ((?x6 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x6)))
 (let (($x147 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x147 true)))
 (let (($x149 (= $x193 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x174 (= $x142 true)))
 (let (($x56 (= $x174 true)))
 (let (($x159 (= $x56 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x204 true)))
 (let (($x146 (= $x66 true)))
 (let (($x109 (= $x146 true)))
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x82 (= $x131 true)))
 (let (($x17 (= $x82 true)))
 (let (($x229 (= $x17 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x170 true)))
 (let (($x210 (= $x93 true)))
 (let (($x226 (= $x210 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x68 (= $x30 true)))
 (let (($x83 (= $x68 true)))
 (let (($x46 (= $x83 true)))
 (let (($x94 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x232 (= $x94 true)))
 (let (($x225 (= $x232 true)))
 (let (($x224 (= $x225 true)))
 (let (($x118 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x161 (= $x118 true)))
 (let (($x110 (= $x161 true)))
 (let (($x8 (= $x110 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x231)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x172)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x206 $x107)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x35 $x115)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x125 $x70)))
 (let (($x117 (not $x22)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x47 $x155)))
 (let (($x28 (and (not $x65) $x117)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x23 $x126)))
 (let (($x71 (not $x59)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x27 $x9)))
 (let (($x112 (and (not $x57) $x71)))
 (let (($x123 (and (and (and (and (and (and $x112 $x28) $x54) $x168) $x166) $x178) $x222)))
 (let (($x202 (and $x123 $x88)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x7 (or false (or false (and (and true (or $x63 $x80)) (or $x136 $x104))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x5 (and $x38 $x202)))
 (let (($x52 (= $x5 true)))
 (let (($x156 (= $x52 true)))
 (let (($x228 (= $x156 true)))
 (let ((?x33 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x96 (= (_ bv0 2) ?x33)))
 (let (($x100 (= $x96 true)))
 (let (($x102 (= $x100 true)))
 (let ((?x186 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x186)))
 (let (($x50 (= ?x21 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x50 true)))
 (let (($x64 (= $x84 true)))
 (let (($x45 (and $x64 $x102)))
 (let (($x160 (and $x45 $x228)))
 (let (($x192 (and $x160 $x8)))
 (let (($x195 (and $x192 $x224)))
 (let (($x134 (and $x195 $x46)))
 (let (($x184 (and $x134 $x226)))
 (let (($x89 (and $x184 $x229)))
 (let (($x185 (and $x89 $x109)))
 (let (($x132 (and $x185 $x159)))
 (let (($x137 (and $x132 $x149)))
 (let (($x276 (and $x137 $x275)))
 (let (($x205 (and $x276 $x237)))
 (let (($x61 (and $x205 $x121)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x213 (and $x97 $x61)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x196 (and $x218 $x213)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x258 (and $x138 $x196)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x119)))
 (let (($x19 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x203 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x15 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x230 (or false (or false (and (and true (or $x44 $x15)) (or $x53 $x19))))))
 (let (($x79 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x230)))
 (let (($x167 (=> (and $x72 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x230)))
 (let (($x103 (and $x167 $x258)))
 (let (($x264 (=> $x103 $x267)))
 (not $x264))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x249 (ite $x67 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x249 (_ bv1 32))))
 (let (($x72 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x182 (not $x72)))
 (let (($x179 (or $x182 $x260)))
 (let (($x250 (= $x179 true)))
 (let (($x267 (= $x250 true)))
 (let (($x259 (forall ((input.ind-%var1176X (_ BitVec 32)) )(let ((?x200 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1176X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var1176X)))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1176X)))
 (=> $x18 (= ?x165 ?x200))))))
 ))
 (let (($x244 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1175X)))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1175X)))
 (= $x18 $x279))))
 ))
 (let (($x266 (and $x244 $x259)))
 (let (($x121 (= $x266 true)))
 (let (($x133 (forall ((input.ind-%var1170X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1170X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x254))))
 (let ((?x200 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1170X)))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1170X)))
 (=> $x279 (= ?x200 ?x270))))))))
 ))
 (let (($x32 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1169X) (bvult input.ind-%var1169X input.dst.llvm-%n))))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1169X)))
 (= $x279 $x98))))
 ))
 (let (($x29 (and $x32 $x133)))
 (let (($x237 (= $x29 true)))
 (let (($x273 (forall ((input.ind-%var1164X (_ BitVec 32)) )(let ((?x235 (bvadd (bvmul input.ind-%var1164X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x254))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var1164X)))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1164X)))
 (=> $x18 (= ?x165 ?x270))))))))
 ))
 (let (($x201 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let (($x98 (and (bvule (_ bv0 32) input.ind-%var1163X) (bvult input.ind-%var1163X input.dst.llvm-%n))))
 (let (($x18 (input.spec-%var-x-1.0.1 input.ind-%var1163X)))
 (= $x18 $x98))))
 ))
 (let (($x274 (and $x201 $x273)))
 (let (($x275 (= $x274 true)))
 (let ((?x6 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x16 (bvneg ?x6)))
 (let (($x147 (= ?x16 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x193 (= $x147 true)))
 (let (($x149 (= $x193 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x174 (= $x142 true)))
 (let (($x56 (= $x174 true)))
 (let (($x159 (= $x56 true)))
 (let (($x204 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x66 (= $x204 true)))
 (let (($x146 (= $x66 true)))
 (let (($x109 (= $x146 true)))
 (let (($x131 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x82 (= $x131 true)))
 (let (($x17 (= $x82 true)))
 (let (($x229 (= $x17 true)))
 (let (($x170 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x93 (= $x170 true)))
 (let (($x210 (= $x93 true)))
 (let (($x226 (= $x210 true)))
 (let (($x30 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x68 (= $x30 true)))
 (let (($x83 (= $x68 true)))
 (let (($x46 (= $x83 true)))
 (let (($x94 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x232 (= $x94 true)))
 (let (($x225 (= $x232 true)))
 (let (($x224 (= $x225 true)))
 (let (($x118 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x161 (= $x118 true)))
 (let (($x110 (= $x161 true)))
 (let (($x8 (= $x110 true)))
 (let ((?x231 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x231)))
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x172)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x113 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x113)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (and $x206 $x107)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x166 (and $x35 $x115)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x125 $x70)))
 (let (($x117 (not $x22)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x47 $x155)))
 (let (($x28 (and (not $x65) $x117)))
 (let (($x126 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x23 $x126)))
 (let (($x71 (not $x59)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x27 $x9)))
 (let (($x112 (and (not $x57) $x71)))
 (let (($x123 (and (and (and (and (and (and $x112 $x28) $x54) $x168) $x166) $x178) $x222)))
 (let (($x202 (and $x123 $x88)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x7 (or false (or false (and (and true (or $x63 $x80)) (or $x136 $x104))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x5 (and $x38 $x202)))
 (let (($x52 (= $x5 true)))
 (let (($x156 (= $x52 true)))
 (let (($x228 (= $x156 true)))
 (let ((?x33 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x96 (= (_ bv0 2) ?x33)))
 (let (($x100 (= $x96 true)))
 (let (($x102 (= $x100 true)))
 (let ((?x186 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x186)))
 (let (($x50 (= ?x21 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x84 (= $x50 true)))
 (let (($x64 (= $x84 true)))
 (let (($x45 (and $x64 $x102)))
 (let (($x160 (and $x45 $x228)))
 (let (($x192 (and $x160 $x8)))
 (let (($x195 (and $x192 $x224)))
 (let (($x134 (and $x195 $x46)))
 (let (($x184 (and $x134 $x226)))
 (let (($x89 (and $x184 $x229)))
 (let (($x185 (and $x89 $x109)))
 (let (($x132 (and $x185 $x159)))
 (let (($x137 (and $x132 $x149)))
 (let (($x276 (and $x137 $x275)))
 (let (($x205 (and $x276 $x237)))
 (let (($x61 (and $x205 $x121)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x213 (and $x97 $x61)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x196 (and $x218 $x213)))
 (let (($x138 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x258 (and $x138 $x196)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x203 (bvadd input.dst.llvm-%x ?x119)))
 (let (($x19 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x135 (bvadd ?x203 (_ bv3 32))))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x135)))
 (let (($x15 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x135)))
 (let (($x230 (or false (or false (and (and true (or $x44 $x15)) (or $x53 $x19))))))
 (let (($x79 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) $x230)))
 (let (($x167 (=> (and $x72 (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32)))) $x230)))
 (let (($x103 (and $x167 $x258)))
 (let (($x264 (=> $x103 $x267)))
 (not $x264))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 188 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x303 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x303)))
 (let ((?x305 (bvneg ?x304)))
 (let (($x307 (= ?x305 ?x306)))
 (let (($x308 (= $x307 true)))
 (let (($x294 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let ((?x51 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1199X)))
 (let ((?x260 (input.spec-%var-x-1.1.1 input.ind-%var1199X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1199X)))
 (=> $x244 (= ?x260 ?x51))))))
 ))
 (let (($x285 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1198X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1198X)))
 (= $x244 $x20))))
 ))
 (let (($x295 (and $x285 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x129 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var1193X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x34))))
 (let ((?x51 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1193X)))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (=> $x20 (= ?x51 ?x148))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let (($x196 (and (bvule (_ bv0 32) input.ind-%var1192X) (bvult input.ind-%var1192X input.dst.llvm-%n))))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (= $x20 $x196))))
 ))
 (let (($x245 (and $x188 $x129)))
 (let (($x241 (= $x245 true)))
 (let (($x277 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var1187X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x34))))
 (let ((?x260 (input.spec-%var-x-1.1.1 input.ind-%var1187X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1187X)))
 (=> $x244 (= ?x260 ?x148))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x196 (and (bvule (_ bv0 32) input.ind-%var1186X) (bvult input.ind-%var1186X input.dst.llvm-%n))))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1186X)))
 (= $x244 $x196))))
 ))
 (let (($x281 (and $x103 $x277)))
 (let (($x49 (= $x281 true)))
 (let ((?x200 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x200)))
 (let (($x181 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x276 (= $x275 true)))
 (let (($x279 (= $x276 true)))
 (let (($x236 (= $x279 true)))
 (let (($x270 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x271 (= $x270 true)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x252 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x253 (= $x252 true)))
 (let (($x251 (= $x253 true)))
 (let (($x254 (= $x251 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x262 true)))
 (let (($x101 (= $x269 true)))
 (let (($x255 (= $x101 true)))
 (let (($x201 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x165 (= $x201 true)))
 (let (($x122 (= $x165 true)))
 (let (($x130 (= $x122 true)))
 (let ((?x209 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x209)))
 (let ((?x132 (bvsub ?x72 ?x209)))
 (let (($x193 (ite (bvsge ?x209 (_ bv0 32)) (bvuge ?x72 ?x132) (bvult ?x72 ?x132))))
 (let (($x174 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x56 (ite $x174 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x109 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x185 (bvmul (_ bv4 64) ?x109)))
 (let ((?x142 ((_ extract 63 32) ?x185)))
 (let (($x159 (= ?x142 ?x56)))
 (let (($x149 (and $x159 $x193)))
 (let (($x66 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x137 (and $x66 $x149)))
 (let (($x163 (= true $x137)))
 (let (($x203 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x203 $x163)))
 (let (($x151 (= $x18 true)))
 (let (($x191 (= $x151 true)))
 (let (($x98 (= $x191 true)))
 (let (($x184 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x131 (= $x184 true)))
 (let (($x82 (= $x131 true)))
 (let (($x17 (= $x82 true)))
 (let (($x134 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x170 (= $x134 true)))
 (let (($x93 (= $x170 true)))
 (let (($x210 (= $x93 true)))
 (let (($x30 (= $x203 true)))
 (let (($x68 (= $x30 true)))
 (let (($x83 (= $x68 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x52)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x202)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (and $x178 $x172)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x208 $x222)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x92 $x168)))
 (let (($x35 (not $x158)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x219 $x54)))
 (let (($x113 (and (not $x76) $x35)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x125 $x70)))
 (let (($x117 (not $x22)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x62 $x95)))
 (let (($x190 (and (not $x169) $x117)))
 (let (($x8 (and (and (and (and (and (and $x190 $x113) $x115) $x171) $x123) $x88) $x5)))
 (let (($x192 (and $x8 $x156)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x47 (or false (or false (and (and true (or $x27 $x9)) (or $x23 $x126))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x94 (and $x65 $x192)))
 (let (($x232 (= $x94 true)))
 (let (($x225 (= $x232 true)))
 (let (($x224 (= $x225 true)))
 (let ((?x63 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x80 (= (_ bv0 2) ?x63)))
 (let (($x37 (= $x80 true)))
 (let (($x81 (= $x37 true)))
 (let ((?x100 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x100)))
 (let (($x39 (= ?x102 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x39 true)))
 (let (($x13 (= $x75 true)))
 (let (($x136 (and $x13 $x81)))
 (let (($x195 (and $x136 $x224)))
 (let (($x46 (and $x195 $x83)))
 (let (($x226 (and $x46 $x210)))
 (let (($x229 (and $x226 $x17)))
 (let (($x139 (and $x229 $x98)))
 (let (($x235 (and $x139 $x130)))
 (let (($x256 (and $x235 $x255)))
 (let (($x261 (and $x256 $x254)))
 (let (($x274 (and $x261 $x273)))
 (let (($x32 (and $x274 $x236)))
 (let (($x237 (and $x32 $x29)))
 (let (($x141 (and $x237 $x49)))
 (let (($x248 (and $x141 $x241)))
 (let (($x297 (and $x248 $x296)))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x64 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x64 (_ bv1 32))))
 (let (($x298 (and $x78 $x297)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x299 (and $x215 $x298)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x300 (and $x97 $x299)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x301 (and $x144 $x300)))
 (let (($x41 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd ?x72 (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x143 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x214 (or false (or false (and (and true (or $x55 $x143)) (or $x48 $x41))))))
 (let (($x12 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x214)))
 (let (($x217 (=> (and $x203 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x214)))
 (let (($x302 (and $x217 $x301)))
 (let (($x309 (=> $x302 $x308)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x306 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x303 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x304 (bvmul (_ bv4294967295 32) ?x303)))
 (let ((?x305 (bvneg ?x304)))
 (let (($x307 (= ?x305 ?x306)))
 (let (($x308 (= $x307 true)))
 (let (($x294 (forall ((input.ind-%var1199X (_ BitVec 32)) )(let ((?x51 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1199X)))
 (let ((?x260 (input.spec-%var-x-1.1.1 input.ind-%var1199X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1199X)))
 (=> $x244 (= ?x260 ?x51))))))
 ))
 (let (($x285 (forall ((input.ind-%var1198X (_ BitVec 32)) )(let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1198X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1198X)))
 (= $x244 $x20))))
 ))
 (let (($x295 (and $x285 $x294)))
 (let (($x296 (= $x295 true)))
 (let (($x129 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var1193X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x34))))
 (let ((?x51 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1193X)))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (=> $x20 (= ?x51 ?x148))))))))
 ))
 (let (($x188 (forall ((input.ind-%var1192X (_ BitVec 32)) )(let (($x196 (and (bvule (_ bv0 32) input.ind-%var1192X) (bvult input.ind-%var1192X input.dst.llvm-%n))))
 (let (($x20 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1192X)))
 (= $x20 $x196))))
 ))
 (let (($x245 (and $x188 $x129)))
 (let (($x241 (= $x245 true)))
 (let (($x277 (forall ((input.ind-%var1187X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var1187X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x34 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x34))))
 (let ((?x260 (input.spec-%var-x-1.1.1 input.ind-%var1187X)))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1187X)))
 (=> $x244 (= ?x260 ?x148))))))))
 ))
 (let (($x103 (forall ((input.ind-%var1186X (_ BitVec 32)) )(let (($x196 (and (bvule (_ bv0 32) input.ind-%var1186X) (bvult input.ind-%var1186X input.dst.llvm-%n))))
 (let (($x244 (input.spec-%var-x-1.0.1 input.ind-%var1186X)))
 (= $x244 $x196))))
 ))
 (let (($x281 (and $x103 $x277)))
 (let (($x49 (= $x281 true)))
 (let ((?x200 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x234 (bvneg ?x200)))
 (let (($x181 (= ?x234 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x276 (= $x275 true)))
 (let (($x279 (= $x276 true)))
 (let (($x236 (= $x279 true)))
 (let (($x270 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x271 (= $x270 true)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x252 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x253 (= $x252 true)))
 (let (($x251 (= $x253 true)))
 (let (($x254 (= $x251 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x262 true)))
 (let (($x101 (= $x269 true)))
 (let (($x255 (= $x101 true)))
 (let (($x201 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x165 (= $x201 true)))
 (let (($x122 (= $x165 true)))
 (let (($x130 (= $x122 true)))
 (let ((?x209 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x72 (bvadd input.dst.llvm-%x ?x209)))
 (let ((?x132 (bvsub ?x72 ?x209)))
 (let (($x193 (ite (bvsge ?x209 (_ bv0 32)) (bvuge ?x72 ?x132) (bvult ?x72 ?x132))))
 (let (($x174 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x56 (ite $x174 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x109 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x185 (bvmul (_ bv4 64) ?x109)))
 (let ((?x142 ((_ extract 63 32) ?x185)))
 (let (($x159 (= ?x142 ?x56)))
 (let (($x149 (and $x159 $x193)))
 (let (($x66 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x137 (and $x66 $x149)))
 (let (($x163 (= true $x137)))
 (let (($x203 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x203 $x163)))
 (let (($x151 (= $x18 true)))
 (let (($x191 (= $x151 true)))
 (let (($x98 (= $x191 true)))
 (let (($x184 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x131 (= $x184 true)))
 (let (($x82 (= $x131 true)))
 (let (($x17 (= $x82 true)))
 (let (($x134 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x170 (= $x134 true)))
 (let (($x93 (= $x170 true)))
 (let (($x210 (= $x93 true)))
 (let (($x30 (= $x203 true)))
 (let (($x68 (= $x30 true)))
 (let (($x83 (= $x68 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x156 (= (_ bv0 32) ?x52)))
 (let ((?x202 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x202)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x212)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (and $x178 $x172)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x208 $x222)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x92 $x168)))
 (let (($x35 (not $x158)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x219 $x54)))
 (let (($x113 (and (not $x76) $x35)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x125 $x70)))
 (let (($x117 (not $x22)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x62 $x95)))
 (let (($x190 (and (not $x169) $x117)))
 (let (($x8 (and (and (and (and (and (and $x190 $x113) $x115) $x171) $x123) $x88) $x5)))
 (let (($x192 (and $x8 $x156)))
 (let (($x126 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x38 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x38)))
 (let (($x47 (or false (or false (and (and true (or $x27 $x9)) (or $x23 $x126))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x94 (and $x65 $x192)))
 (let (($x232 (= $x94 true)))
 (let (($x225 (= $x232 true)))
 (let (($x224 (= $x225 true)))
 (let ((?x63 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x80 (= (_ bv0 2) ?x63)))
 (let (($x37 (= $x80 true)))
 (let (($x81 (= $x37 true)))
 (let ((?x100 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x100)))
 (let (($x39 (= ?x102 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x75 (= $x39 true)))
 (let (($x13 (= $x75 true)))
 (let (($x136 (and $x13 $x81)))
 (let (($x195 (and $x136 $x224)))
 (let (($x46 (and $x195 $x83)))
 (let (($x226 (and $x46 $x210)))
 (let (($x229 (and $x226 $x17)))
 (let (($x139 (and $x229 $x98)))
 (let (($x235 (and $x139 $x130)))
 (let (($x256 (and $x235 $x255)))
 (let (($x261 (and $x256 $x254)))
 (let (($x274 (and $x261 $x273)))
 (let (($x32 (and $x274 $x236)))
 (let (($x237 (and $x32 $x29)))
 (let (($x141 (and $x237 $x49)))
 (let (($x248 (and $x141 $x241)))
 (let (($x297 (and $x248 $x296)))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x64 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x64 (_ bv1 32))))
 (let (($x298 (and $x78 $x297)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x299 (and $x215 $x298)))
 (let (($x97 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x300 (and $x97 $x299)))
 (let (($x144 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x301 (and $x144 $x300)))
 (let (($x41 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x152 (bvadd ?x72 (_ bv3 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x152)))
 (let (($x143 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x152)))
 (let (($x214 (or false (or false (and (and true (or $x55 $x143)) (or $x48 $x41))))))
 (let (($x12 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) $x214)))
 (let (($x217 (=> (and $x203 (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32)))) $x214)))
 (let (($x302 (and $x217 $x301)))
 (let (($x309 (=> $x302 $x308)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x111))))
 (let ((?x316 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x283 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x220)))
 (let ((?x162 (bvmul (_ bv4294967295 32) ?x283)))
 (let ((?x150 (bvneg ?x162)))
 (let (($x317 (= ?x150 ?x316)))
 (let (($x318 (= $x317 true)))
 (let (($x289 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x257 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1227X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1227X)))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1227X)))
 (=> $x260 (= ?x148 ?x257))))))
 ))
 (let (($x246 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1226X)))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1226X)))
 (= $x260 $x78))))
 ))
 (let (($x145 (and $x246 $x289)))
 (let (($x26 (= $x145 true)))
 (let (($x189 (forall ((input.ind-%var1221X (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul input.ind-%var1221X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x296))))
 (let ((?x257 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1221X)))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1221X)))
 (=> $x78 (= ?x257 ?x302))))))))
 ))
 (let (($x179 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1220X) (bvult input.ind-%var1220X input.dst.llvm-%n))))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1220X)))
 (= $x78 $x128))))
 ))
 (let (($x240 (and $x179 $x189)))
 (let (($x243 (= $x240 true)))
 (let (($x305 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul input.ind-%var1215X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x296))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1215X)))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1215X)))
 (=> $x260 (= ?x148 ?x302))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%n))))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1214X)))
 (= $x260 $x128))))
 ))
 (let (($x306 (and $x108 $x305)))
 (let (($x307 (= $x306 true)))
 (let ((?x237 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x237)))
 (let (($x244 (= ?x21 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let ((?x236 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x236)))
 (let (($x234 (= ?x32 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x181 (= $x234 true)))
 (let (($x133 (= $x181 true)))
 (let ((?x272 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x273 (= (_ bv0 2) ?x272)))
 (let (($x274 (= $x273 true)))
 (let (($x275 (= $x274 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x251 (= $x253 true)))
 (let (($x254 (= $x251 true)))
 (let (($x261 (= $x254 true)))
 (let (($x269 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x101 (= $x269 true)))
 (let (($x255 (= $x101 true)))
 (let (($x256 (= $x255 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x122 (= $x165 true)))
 (let (($x130 (= $x122 true)))
 (let (($x235 (= $x130 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x151 true)))
 (let (($x98 (= $x191 true)))
 (let (($x139 (= $x98 true)))
 (let (($x193 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (= $x193 true)))
 (let (($x137 (= $x149 true)))
 (let (($x163 (= $x137 true)))
 (let (($x185 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 ?x157)) (bvult ?x120 (bvsub ?x120 ?x157)))))
 (let (($x82 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x229 (ite $x82 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x226 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x184 (bvmul (_ bv4 64) ?x226)))
 (let ((?x131 ((_ extract 63 32) ?x184)))
 (let (($x89 (= ?x131 ?x229)))
 (let (($x142 (and $x89 $x185)))
 (let (($x93 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x174 (and $x93 $x142)))
 (let (($x56 (= true $x174)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (=> $x119 $x56)))
 (let (($x6 (= $x159 true)))
 (let (($x132 (= $x6 true)))
 (let (($x16 (= $x132 true)))
 (let (($x195 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x30 (= $x195 true)))
 (let (($x68 (= $x30 true)))
 (let (($x83 (= $x68 true)))
 (let (($x192 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x94 (= $x192 true)))
 (let (($x232 (= $x94 true)))
 (let (($x225 (= $x232 true)))
 (let (($x5 (= $x119 true)))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x171)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x160)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (and $x168 $x35)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (and $x92 $x113)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x28 $x125)))
 (let (($x22 (not $x70)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x62 $x95)))
 (let (($x190 (and (not $x169) $x22)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x126 $x59)))
 (let (($x112 (not $x71)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x39 $x75)))
 (let (($x65 (and (not $x23) $x112)))
 (let (($x123 (and (and (and (and (and (and $x65 $x190) $x54) $x206) $x228) $x115) $x166)))
 (let (($x161 (and $x123 $x118)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x9 (or false (or false (and (and true (or $x80 $x37)) (or $x87 $x7))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x231 (and $x124 $x161)))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let (($x202 (= $x110 true)))
 (let (($x156 (and $x202 $x52)))
 (let (($x224 (and $x156 $x225)))
 (let (($x46 (and $x224 $x83)))
 (let (($x147 (and $x46 $x16)))
 (let (($x18 (and $x147 $x163)))
 (let (($x201 (and $x18 $x139)))
 (let (($x262 (and $x201 $x235)))
 (let (($x252 (and $x262 $x256)))
 (let (($x270 (and $x252 $x261)))
 (let (($x276 (and $x270 $x275)))
 (let (($x29 (and $x276 $x133)))
 (let (($x196 (and $x29 $x61)))
 (let (($x308 (and $x196 $x307)))
 (let (($x266 (and $x308 $x243)))
 (let (($x121 (and $x266 $x26)))
 (let (($x96 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x100 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x100 (_ bv1 32))))
 (let (($x199 (and $x102 $x121)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x186 $x199)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x216 (and $x77 $x154)))
 (let (($x218 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x218 $x216)))
 (let (($x79 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd ?x120 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x58 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x217 (or false (or false (and (and true (or $x53 $x58)) (or $x230 $x79))))))
 (let (($x144 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x217)))
 (let (($x135 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x217)))
 (let (($x114 (and $x135 $x67)))
 (let (($x319 (=> $x114 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x111))))
 (let ((?x316 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x315)))
 (let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x283 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x220)))
 (let ((?x162 (bvmul (_ bv4294967295 32) ?x283)))
 (let ((?x150 (bvneg ?x162)))
 (let (($x317 (= ?x150 ?x316)))
 (let (($x318 (= $x317 true)))
 (let (($x289 (forall ((input.ind-%var1227X (_ BitVec 32)) )(let ((?x257 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1227X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1227X)))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1227X)))
 (=> $x260 (= ?x148 ?x257))))))
 ))
 (let (($x246 (forall ((input.ind-%var1226X (_ BitVec 32)) )(let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1226X)))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1226X)))
 (= $x260 $x78))))
 ))
 (let (($x145 (and $x246 $x289)))
 (let (($x26 (= $x145 true)))
 (let (($x189 (forall ((input.ind-%var1221X (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul input.ind-%var1221X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x296))))
 (let ((?x257 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1221X)))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1221X)))
 (=> $x78 (= ?x257 ?x302))))))))
 ))
 (let (($x179 (forall ((input.ind-%var1220X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1220X) (bvult input.ind-%var1220X input.dst.llvm-%n))))
 (let (($x78 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1220X)))
 (= $x78 $x128))))
 ))
 (let (($x240 (and $x179 $x189)))
 (let (($x243 (= $x240 true)))
 (let (($x305 (forall ((input.ind-%var1215X (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul input.ind-%var1215X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x296))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var1215X)))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1215X)))
 (=> $x260 (= ?x148 ?x302))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var1214X) (bvult input.ind-%var1214X input.dst.llvm-%n))))
 (let (($x260 (input.spec-%var-x-1.0.1 input.ind-%var1214X)))
 (= $x260 $x128))))
 ))
 (let (($x306 (and $x108 $x305)))
 (let (($x307 (= $x306 true)))
 (let ((?x237 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x237)))
 (let (($x244 (= ?x21 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let ((?x236 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x236)))
 (let (($x234 (= ?x32 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x181 (= $x234 true)))
 (let (($x133 (= $x181 true)))
 (let ((?x272 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x273 (= (_ bv0 2) ?x272)))
 (let (($x274 (= $x273 true)))
 (let (($x275 (= $x274 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x251 (= $x253 true)))
 (let (($x254 (= $x251 true)))
 (let (($x261 (= $x254 true)))
 (let (($x269 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x101 (= $x269 true)))
 (let (($x255 (= $x101 true)))
 (let (($x256 (= $x255 true)))
 (let (($x165 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x122 (= $x165 true)))
 (let (($x130 (= $x122 true)))
 (let (($x235 (= $x130 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x191 (= $x151 true)))
 (let (($x98 (= $x191 true)))
 (let (($x139 (= $x98 true)))
 (let (($x193 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x149 (= $x193 true)))
 (let (($x137 (= $x149 true)))
 (let (($x163 (= $x137 true)))
 (let (($x185 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 ?x157)) (bvult ?x120 (bvsub ?x120 ?x157)))))
 (let (($x82 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x229 (ite $x82 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x226 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x184 (bvmul (_ bv4 64) ?x226)))
 (let ((?x131 ((_ extract 63 32) ?x184)))
 (let (($x89 (= ?x131 ?x229)))
 (let (($x142 (and $x89 $x185)))
 (let (($x93 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x174 (and $x93 $x142)))
 (let (($x56 (= true $x174)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (=> $x119 $x56)))
 (let (($x6 (= $x159 true)))
 (let (($x132 (= $x6 true)))
 (let (($x16 (= $x132 true)))
 (let (($x195 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x30 (= $x195 true)))
 (let (($x68 (= $x30 true)))
 (let (($x83 (= $x68 true)))
 (let (($x192 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x94 (= $x192 true)))
 (let (($x232 (= $x94 true)))
 (let (($x225 (= $x232 true)))
 (let (($x5 (= $x119 true)))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x118 (= (_ bv0 32) ?x171)))
 (let ((?x160 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x160)))
 (let ((?x107 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x107)))
 (let ((?x158 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x158)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (and $x168 $x35)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (and $x92 $x113)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x28 $x125)))
 (let (($x22 (not $x70)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x62 $x95)))
 (let (($x190 (and (not $x169) $x22)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x126 $x59)))
 (let (($x112 (not $x71)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x39 $x75)))
 (let (($x65 (and (not $x23) $x112)))
 (let (($x123 (and (and (and (and (and (and $x65 $x190) $x54) $x206) $x228) $x115) $x166)))
 (let (($x161 (and $x123 $x118)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x9 (or false (or false (and (and true (or $x80 $x37)) (or $x87 $x7))))))
 (let (($x124 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x9)))
 (let (($x231 (and $x124 $x161)))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let (($x202 (= $x110 true)))
 (let (($x156 (and $x202 $x52)))
 (let (($x224 (and $x156 $x225)))
 (let (($x46 (and $x224 $x83)))
 (let (($x147 (and $x46 $x16)))
 (let (($x18 (and $x147 $x163)))
 (let (($x201 (and $x18 $x139)))
 (let (($x262 (and $x201 $x235)))
 (let (($x252 (and $x262 $x256)))
 (let (($x270 (and $x252 $x261)))
 (let (($x276 (and $x270 $x275)))
 (let (($x29 (and $x276 $x133)))
 (let (($x196 (and $x29 $x61)))
 (let (($x308 (and $x196 $x307)))
 (let (($x266 (and $x308 $x243)))
 (let (($x121 (and $x266 $x26)))
 (let (($x96 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x100 (ite $x96 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x100 (_ bv1 32))))
 (let (($x199 (and $x102 $x121)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x154 (and $x186 $x199)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x216 (and $x77 $x154)))
 (let (($x218 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x218 $x216)))
 (let (($x79 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd ?x120 (_ bv3 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x58 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x217 (or false (or false (and (and true (or $x53 $x58)) (or $x230 $x79))))))
 (let (($x144 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x217)))
 (let (($x135 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x217)))
 (let (($x114 (and $x135 $x67)))
 (let (($x319 (=> $x114 $x318)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 214 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x183 (bvule ?x233 (_ bv3 32))))
 (let (($x40 (= $x183 true)))
 (let (($x310 (= $x40 true)))
 (let (($x176 (forall ((input.ind-%var1251X (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1251X)))
 (let ((?x303 (input.spec-%var-x-1.1.1 input.ind-%var1251X)))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1251X)))
 (=> $x85 (= ?x303 ?x209))))))
 ))
 (let (($x36 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1250X)))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1250X)))
 (= $x85 $x13))))
 ))
 (let (($x42 (and $x36 $x176)))
 (let (($x105 (= $x42 true)))
 (let (($x141 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1245X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem ?x282))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv2 32))) ?x121))))
 (let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1245X)))
 (let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x13 (= ?x209 ?x220))))))))
 ))
 (let (($x317 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1244X) (bvult input.ind-%var1244X input.dst.llvm-%n))))
 (let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x13 $x294))))
 ))
 (let (($x20 (and $x317 $x141)))
 (let (($x49 (= $x20 true)))
 (let (($x150 (forall ((input.ind-%var1239X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1239X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem ?x282))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv2 32))) ?x121))))
 (let ((?x303 (input.spec-%var-x-1.1.1 input.ind-%var1239X)))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1239X)))
 (=> $x85 (= ?x303 ?x220))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1238X) (bvult input.ind-%var1238X input.dst.llvm-%n))))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1238X)))
 (= $x85 $x294))))
 ))
 (let (($x314 (and $x293 $x150)))
 (let (($x311 (= $x314 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x64)))
 (let (($x43 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x21 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x21 true)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x181 (= $x234 true)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x276 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x279 (= $x276 true)))
 (let (($x236 (= $x279 true)))
 (let (($x32 (= $x236 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x101)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x262)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x98 $x201)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x191 $x165)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x6 $x132)))
 (let (($x147 (not $x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x174 $x56)))
 (let (($x149 (and (not $x159) $x147)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x66 $x204)))
 (let (($x109 (not $x146)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x225 $x224)))
 (let (($x142 (and (not $x89) $x109)))
 (let (($x261 (and (and (and (and (and (and $x142 $x149) $x163) $x151) $x122) $x235) $x269)))
 (let (($x270 (and $x261 $x255)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x82 (or false (or false (and (and true (or $x83 $x46)) (or $x93 $x210))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x271 (and $x229 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x274 (= $x273 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x52 (= $x8 true)))
 (let (($x156 (= $x52 true)))
 (let (($x192 (= $x156 true)))
 (let (($x231 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let (($x202 (= $x110 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (= $x166 true)))
 (let (($x171 (= $x123 true)))
 (let (($x118 (= $x171 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x172 true)))
 (let (($x115 (= $x107 true)))
 (let (($x222 (= $x115 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x208 (bvsub ?x120 ?x157)))
 (let (($x76 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x208) (bvult ?x120 ?x208))))
 (let (($x70 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x70 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x117 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvmul (_ bv4 64) ?x117)))
 (let ((?x125 ((_ extract 63 32) ?x28)))
 (let (($x190 (= ?x125 ?x22)))
 (let (($x206 (and $x190 $x76)))
 (let (($x95 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x212 (and $x95 $x206)))
 (let (($x92 (= true $x212)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (=> $x119 $x92)))
 (let (($x158 (= $x168 true)))
 (let (($x35 (= $x158 true)))
 (let (($x113 (= $x35 true)))
 (let ((?x47 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x126 (= (_ bv0 2) ?x47)))
 (let (($x59 (= $x126 true)))
 (let (($x71 (= $x59 true)))
 (let ((?x155 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x155)))
 (let (($x9 (= ?x38 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x9 true)))
 (let (($x39 (= $x124 true)))
 (let (($x37 (= $x119 true)))
 (let (($x81 (= $x37 true)))
 (let (($x136 (= $x81 true)))
 (let (($x75 (and $x136 $x39)))
 (let (($x112 (and $x75 $x71)))
 (let (($x228 (and $x112 $x113)))
 (let (($x160 (and $x228 $x222)))
 (let (($x161 (and $x160 $x118)))
 (let (($x5 (and $x161 $x202)))
 (let (($x94 (and $x5 $x192)))
 (let (($x275 (and $x94 $x274)))
 (let (($x200 (and $x275 $x32)))
 (let (($x237 (and $x200 $x29)))
 (let (($x196 (and $x237 $x61)))
 (let (($x106 (and $x196 $x128)))
 (let (($x312 (and $x106 $x311)))
 (let (($x173 (and $x312 $x49)))
 (let (($x69 (and $x173 $x105)))
 (let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x63 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x63 (_ bv1 32))))
 (let (($x60 (and $x80 $x69)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x96 $x60)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x215 $x268)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x91 $x194)))
 (let (($x214 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd ?x120 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x48 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x135 (or false (or false (and (and true (or $x19 $x48)) (or $x167 $x214))))))
 (let (($x218 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x135)))
 (let (($x198 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x135)))
 (let (($x239 (and $x198 $x14)))
 (let (($x50 (=> $x239 $x310)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x233 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x183 (bvule ?x233 (_ bv3 32))))
 (let (($x40 (= $x183 true)))
 (let (($x310 (= $x40 true)))
 (let (($x176 (forall ((input.ind-%var1251X (_ BitVec 32)) )(let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1251X)))
 (let ((?x303 (input.spec-%var-x-1.1.1 input.ind-%var1251X)))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1251X)))
 (=> $x85 (= ?x303 ?x209))))))
 ))
 (let (($x36 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1250X)))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1250X)))
 (= $x85 $x13))))
 ))
 (let (($x42 (and $x36 $x176)))
 (let (($x105 (= $x42 true)))
 (let (($x141 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1245X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem ?x282))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv2 32))) ?x121))))
 (let ((?x209 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1245X)))
 (let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1245X)))
 (=> $x13 (= ?x209 ?x220))))))))
 ))
 (let (($x317 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1244X) (bvult input.ind-%var1244X input.dst.llvm-%n))))
 (let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1244X)))
 (= $x13 $x294))))
 ))
 (let (($x20 (and $x317 $x141)))
 (let (($x49 (= $x20 true)))
 (let (($x150 (forall ((input.ind-%var1239X (_ BitVec 32)) )(let ((?x282 (bvadd (bvmul input.ind-%var1239X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x121 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv1 32))) (select input.dst.llvm-mem ?x282))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x282 (_ bv2 32))) ?x121))))
 (let ((?x303 (input.spec-%var-x-1.1.1 input.ind-%var1239X)))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1239X)))
 (=> $x85 (= ?x303 ?x220))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1238X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1238X) (bvult input.ind-%var1238X input.dst.llvm-%n))))
 (let (($x85 (input.spec-%var-x-1.0.1 input.ind-%var1238X)))
 (= $x85 $x294))))
 ))
 (let (($x314 (and $x293 $x150)))
 (let (($x311 (= $x314 true)))
 (let ((?x64 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x260 (bvneg ?x64)))
 (let (($x43 (= ?x260 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x21 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x21 true)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x234 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x181 (= $x234 true)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x276 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x279 (= $x276 true)))
 (let (($x236 (= $x279 true)))
 (let (($x32 (= $x236 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x255 (= (_ bv0 32) ?x101)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x262)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x98 $x201)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x191 $x165)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x6 $x132)))
 (let (($x147 (not $x16)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x174 $x56)))
 (let (($x149 (and (not $x159) $x147)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x66 $x204)))
 (let (($x109 (not $x146)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x225 $x224)))
 (let (($x142 (and (not $x89) $x109)))
 (let (($x261 (and (and (and (and (and (and $x142 $x149) $x163) $x151) $x122) $x235) $x269)))
 (let (($x270 (and $x261 $x255)))
 (let (($x210 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x82 (or false (or false (and (and true (or $x83 $x46)) (or $x93 $x210))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x271 (and $x229 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x273 (= $x272 true)))
 (let (($x274 (= $x273 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x52 (= $x8 true)))
 (let (($x156 (= $x52 true)))
 (let (($x192 (= $x156 true)))
 (let (($x231 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let (($x202 (= $x110 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x123 (= $x166 true)))
 (let (($x171 (= $x123 true)))
 (let (($x118 (= $x171 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x172 true)))
 (let (($x115 (= $x107 true)))
 (let (($x222 (= $x115 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x208 (bvsub ?x120 ?x157)))
 (let (($x76 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x208) (bvult ?x120 ?x208))))
 (let (($x70 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x70 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x117 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvmul (_ bv4 64) ?x117)))
 (let ((?x125 ((_ extract 63 32) ?x28)))
 (let (($x190 (= ?x125 ?x22)))
 (let (($x206 (and $x190 $x76)))
 (let (($x95 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x212 (and $x95 $x206)))
 (let (($x92 (= true $x212)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x168 (=> $x119 $x92)))
 (let (($x158 (= $x168 true)))
 (let (($x35 (= $x158 true)))
 (let (($x113 (= $x35 true)))
 (let ((?x47 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x126 (= (_ bv0 2) ?x47)))
 (let (($x59 (= $x126 true)))
 (let (($x71 (= $x59 true)))
 (let ((?x155 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x155)))
 (let (($x9 (= ?x38 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x124 (= $x9 true)))
 (let (($x39 (= $x124 true)))
 (let (($x37 (= $x119 true)))
 (let (($x81 (= $x37 true)))
 (let (($x136 (= $x81 true)))
 (let (($x75 (and $x136 $x39)))
 (let (($x112 (and $x75 $x71)))
 (let (($x228 (and $x112 $x113)))
 (let (($x160 (and $x228 $x222)))
 (let (($x161 (and $x160 $x118)))
 (let (($x5 (and $x161 $x202)))
 (let (($x94 (and $x5 $x192)))
 (let (($x275 (and $x94 $x274)))
 (let (($x200 (and $x275 $x32)))
 (let (($x237 (and $x200 $x29)))
 (let (($x196 (and $x237 $x61)))
 (let (($x106 (and $x196 $x128)))
 (let (($x312 (and $x106 $x311)))
 (let (($x173 (and $x312 $x49)))
 (let (($x69 (and $x173 $x105)))
 (let (($x57 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x63 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x63 (_ bv1 32))))
 (let (($x60 (and $x80 $x69)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x268 (and $x96 $x60)))
 (let (($x215 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x215 $x268)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x91 $x194)))
 (let (($x214 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x58 (bvadd ?x120 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x58)))
 (let (($x48 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x58)))
 (let (($x135 (or false (or false (and (and true (or $x19 $x48)) (or $x167 $x214))))))
 (let (($x218 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x135)))
 (let (($x198 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x135)))
 (let (($x239 (and $x198 $x14)))
 (let (($x50 (=> $x239 $x310)))
 (not $x50))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00800004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00800003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00800007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00800004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0d4b1400)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0b75da00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbaf4a008)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbaf4a00b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0d4b1403)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbaf4a008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0d4b1400)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x0b75da03 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x0b75da02 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x0b75da01 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x0b75da00 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x0b75da03 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x0b75da02 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x0b75da01 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x0b75da00 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x245 (bvule ?x319 (_ bv4 32))))
 (let (($x264 (= $x245 true)))
 (let (($x267 (= $x264 true)))
 (let (($x291 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1320X)))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var1320X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1320X)))
 (=> $x303 (= ?x220 ?x306))))))
 ))
 (let (($x250 (forall ((input.ind-%var1319X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1319X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1319X)))
 (= $x303 $x80))))
 ))
 (let (($x313 (and $x250 $x291)))
 (let (($x223 (= $x313 true)))
 (let (($x148 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1314X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x105))))
 (let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1314X)))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (=> $x80 (= ?x306 ?x239))))))))
 ))
 (let (($x302 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1313X) (bvult input.ind-%var1313X input.dst.llvm-%n))))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1313X)))
 (= $x80 $x154))))
 ))
 (let (($x301 (and $x302 $x148)))
 (let (($x259 (= $x301 true)))
 (let (($x40 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1308X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x105))))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var1308X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1308X)))
 (=> $x303 (= ?x220 ?x239))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1307X) (bvult input.ind-%var1307X input.dst.llvm-%n))))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1307X)))
 (= $x303 $x154))))
 ))
 (let (($x310 (and $x26 $x40)))
 (let (($x50 (= $x310 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x106)))
 (let (($x85 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x85 true)))
 (let (($x297 (= $x298 true)))
 (let (($x64 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x260 (= $x64 true)))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x21 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x244 (= $x21 true)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x234 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x181 (= $x234 true)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x261)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x262)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (and $x201 $x122)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x139 $x251)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x149 $x256)))
 (let (($x163 (not $x137)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x132 $x16)))
 (let (($x18 (and (not $x147) $x163)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x142 $x174)))
 (let (($x159 (not $x56)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x46 $x134)))
 (let (($x6 (and (not $x109) $x159)))
 (let (($x274 (and (and (and (and (and (and $x6 $x18) $x253) $x98) $x130) $x254) $x269)))
 (let (($x275 (and $x274 $x101)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x210 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x210)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x210)))
 (let (($x66 (or false (or false (and (and true (or $x226 $x184)) (or $x229 $x225))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x276 (and $x146 $x275)))
 (let (($x279 (= $x276 true)))
 (let (($x236 (= $x279 true)))
 (let (($x32 (= $x236 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x30 (= $x195 true)))
 (let (($x17 (= $x30 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let (($x156 (= $x52 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x107 (bvsub ?x120 ?x157)))
 (let (($x166 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x107) (bvult ?x120 ?x107))))
 (let (($x113 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x228 (ite $x113 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x168 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x168)))
 (let ((?x35 ((_ extract 63 32) ?x158)))
 (let (($x172 (= ?x35 ?x228)))
 (let (($x123 (and $x172 $x166)))
 (let (($x212 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x171 (and $x212 $x123)))
 (let (($x118 (= true $x171)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (=> $x119 $x118)))
 (let (($x231 (= $x161 true)))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x219 (= (_ bv0 2) ?x190)))
 (let (($x208 (= $x219 true)))
 (let (($x54 (= $x208 true)))
 (let ((?x62 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x62)))
 (let (($x117 (= ?x95 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x117 true)))
 (let (($x125 (= $x28 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x47 (= $x23 true)))
 (let (($x126 (= $x47 true)))
 (let (($x59 (= $x126 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x9 (= $x27 true)))
 (let (($x124 (= $x9 true)))
 (let (($x39 (= $x124 true)))
 (let (($x7 (= $x119 true)))
 (let (($x155 (= $x7 true)))
 (let (($x38 (= $x155 true)))
 (let (($x75 (and $x38 $x39)))
 (let (($x71 (and $x75 $x59)))
 (let (($x70 (and $x71 $x125)))
 (let (($x178 (and $x70 $x54)))
 (let (($x202 (and $x178 $x110)))
 (let (($x192 (and $x202 $x156)))
 (let (($x68 (and $x192 $x17)))
 (let (($x200 (and $x68 $x32)))
 (let (($x237 (and $x200 $x29)))
 (let (($x196 (and $x237 $x61)))
 (let (($x128 (and $x196 $x280)))
 (let (($x294 (and $x128 $x297)))
 (let (($x248 (and $x294 $x50)))
 (let (($x127 (and $x248 $x259)))
 (let (($x241 (and $x127 $x223)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x136 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x136 (_ bv1 32))))
 (let (($x315 (and $x87 $x241)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x299 (and $x100 $x315)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x246 (and $x186 $x299)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x97 $x246)))
 (let (($x217 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd ?x120 (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x230 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x198 (or false (or false (and (and true (or $x140 $x230)) (or $x12 $x217))))))
 (let (($x91 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x198)))
 (let (($x152 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x198)))
 (let (($x205 (and $x152 $x129)))
 (let (($x31 (=> $x205 $x267)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x319 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x245 (bvule ?x319 (_ bv4 32))))
 (let (($x264 (= $x245 true)))
 (let (($x267 (= $x264 true)))
 (let (($x291 (forall ((input.ind-%var1320X (_ BitVec 32)) )(let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1320X)))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var1320X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1320X)))
 (=> $x303 (= ?x220 ?x306))))))
 ))
 (let (($x250 (forall ((input.ind-%var1319X (_ BitVec 32)) )(let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1319X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1319X)))
 (= $x303 $x80))))
 ))
 (let (($x313 (and $x250 $x291)))
 (let (($x223 (= $x313 true)))
 (let (($x148 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1314X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x105))))
 (let ((?x306 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1314X)))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1314X)))
 (=> $x80 (= ?x306 ?x239))))))))
 ))
 (let (($x302 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1313X) (bvult input.ind-%var1313X input.dst.llvm-%n))))
 (let (($x80 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1313X)))
 (= $x80 $x154))))
 ))
 (let (($x301 (and $x302 $x148)))
 (let (($x259 (= $x301 true)))
 (let (($x40 (forall ((input.ind-%var1308X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1308X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x105))))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var1308X)))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1308X)))
 (=> $x303 (= ?x220 ?x239))))))))
 ))
 (let (($x26 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let (($x154 (and (bvule (_ bv0 32) input.ind-%var1307X) (bvult input.ind-%var1307X input.dst.llvm-%n))))
 (let (($x303 (input.spec-%var-x-1.0.1 input.ind-%var1307X)))
 (= $x303 $x154))))
 ))
 (let (($x310 (and $x26 $x40)))
 (let (($x50 (= $x310 true)))
 (let ((?x106 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x102 (bvneg ?x106)))
 (let (($x85 (= ?x102 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x298 (= $x85 true)))
 (let (($x297 (= $x298 true)))
 (let (($x64 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x260 (= $x64 true)))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x21 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x244 (= $x21 true)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x234 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x181 (= $x234 true)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let ((?x261 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x261)))
 (let ((?x262 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x262)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (and $x201 $x122)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x139 $x251)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x149 $x256)))
 (let (($x163 (not $x137)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x132 $x16)))
 (let (($x18 (and (not $x147) $x163)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x142 $x174)))
 (let (($x159 (not $x56)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x46 $x134)))
 (let (($x6 (and (not $x109) $x159)))
 (let (($x274 (and (and (and (and (and (and $x6 $x18) $x253) $x98) $x130) $x254) $x269)))
 (let (($x275 (and $x274 $x101)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x210 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x210)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x210)))
 (let (($x66 (or false (or false (and (and true (or $x226 $x184)) (or $x229 $x225))))))
 (let (($x146 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x276 (and $x146 $x275)))
 (let (($x279 (= $x276 true)))
 (let (($x236 (= $x279 true)))
 (let (($x32 (= $x236 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x30 (= $x195 true)))
 (let (($x17 (= $x30 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let (($x156 (= $x52 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x107 (bvsub ?x120 ?x157)))
 (let (($x166 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x107) (bvult ?x120 ?x107))))
 (let (($x113 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x228 (ite $x113 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x168 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x168)))
 (let ((?x35 ((_ extract 63 32) ?x158)))
 (let (($x172 (= ?x35 ?x228)))
 (let (($x123 (and $x172 $x166)))
 (let (($x212 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x171 (and $x212 $x123)))
 (let (($x118 (= true $x171)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (=> $x119 $x118)))
 (let (($x231 (= $x161 true)))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x219 (= (_ bv0 2) ?x190)))
 (let (($x208 (= $x219 true)))
 (let (($x54 (= $x208 true)))
 (let ((?x62 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x62)))
 (let (($x117 (= ?x95 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x117 true)))
 (let (($x125 (= $x28 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x47 (= $x23 true)))
 (let (($x126 (= $x47 true)))
 (let (($x59 (= $x126 true)))
 (let (($x27 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x9 (= $x27 true)))
 (let (($x124 (= $x9 true)))
 (let (($x39 (= $x124 true)))
 (let (($x7 (= $x119 true)))
 (let (($x155 (= $x7 true)))
 (let (($x38 (= $x155 true)))
 (let (($x75 (and $x38 $x39)))
 (let (($x71 (and $x75 $x59)))
 (let (($x70 (and $x71 $x125)))
 (let (($x178 (and $x70 $x54)))
 (let (($x202 (and $x178 $x110)))
 (let (($x192 (and $x202 $x156)))
 (let (($x68 (and $x192 $x17)))
 (let (($x200 (and $x68 $x32)))
 (let (($x237 (and $x200 $x29)))
 (let (($x196 (and $x237 $x61)))
 (let (($x128 (and $x196 $x280)))
 (let (($x294 (and $x128 $x297)))
 (let (($x248 (and $x294 $x50)))
 (let (($x127 (and $x248 $x259)))
 (let (($x241 (and $x127 $x223)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x136 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x136 (_ bv1 32))))
 (let (($x315 (and $x87 $x241)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x299 (and $x100 $x315)))
 (let (($x186 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x246 (and $x186 $x299)))
 (let (($x97 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x129 (and $x97 $x246)))
 (let (($x217 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd ?x120 (_ bv3 32))))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x230 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x198 (or false (or false (and (and true (or $x140 $x230)) (or $x12 $x217))))))
 (let (($x91 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x198)))
 (let (($x152 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x198)))
 (let (($x205 (and $x152 $x129)))
 (let (($x31 (=> $x205 $x267)))
 (not $x31))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd0165ad4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40350d58)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x18165620)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x18165623)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd0165ad7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x18165620)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd0165ad4)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x40350d5b (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x40350d5a (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x40350d59 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x40350d58 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x40350d5b (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x40350d5a (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x40350d59 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x40350d58 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000f010)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000001)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000f013)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000f010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000001 x!0)
         (ite (bvule #x80000002 x!0) #x80000002 #x80000001)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x114 (bvule ?x285 (_ bv4294967294 32))))
 (let (($x173 (= $x114 true)))
 (let (($x180 (= $x173 true)))
 (let (($x73 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1389X)))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1389X)))
 (=> $x297 (= ?x14 ?x37))))))
 ))
 (let (($x293 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1388X)))
 (= $x297 $x87))))
 ))
 (let (($x265 (and $x293 $x73)))
 (let (($x189 (= $x265 true)))
 (let (($x316 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1383X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x301))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1383X)))
 (let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1383X)))
 (=> $x87 (= ?x37 ?x188))))))))
 ))
 (let (($x31 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1382X) (bvult input.ind-%var1382X input.dst.llvm-%n))))
 (let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (= $x87 $x26))))
 ))
 (let (($x247 (and $x31 $x316)))
 (let (($x49 (= $x247 true)))
 (let (($x223 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1377X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x301))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1377X)))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1377X)))
 (=> $x297 (= ?x14 ?x188))))))))
 ))
 (let (($x162 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1376X) (bvult input.ind-%var1376X input.dst.llvm-%n))))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1376X)))
 (= $x297 $x26))))
 ))
 (let (($x241 (and $x162 $x223)))
 (let (($x315 (= $x241 true)))
 (let ((?x260 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x260)))
 (let (($x280 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x280 true)))
 (let (($x106 (= $x128 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let (($x181 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x237 (= $x29 true)))
 (let ((?x254 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x254)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x272)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x271 $x201)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x98 $x165)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x149 $x256)))
 (let (($x163 (not $x137)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x16 $x147)))
 (let (($x255 (and (not $x252) $x163)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x142 $x174)))
 (let (($x159 (not $x56)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x93 $x204)))
 (let (($x132 (and (not $x193) $x159)))
 (let (($x275 (and (and (and (and (and (and $x132 $x255) $x253) $x191) $x122) $x130) $x235)))
 (let (($x276 (and $x275 $x273)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x46 (or false (or false (and (and true (or $x131 $x82)) (or $x224 $x89))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x279 (and $x109 $x276)))
 (let (($x236 (= $x279 true)))
 (let (($x32 (= $x236 true)))
 (let (($x200 (= $x32 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x30 (= $x195 true)))
 (let (($x17 (= $x30 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let (($x156 (= $x52 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x115 (bvsub ?x120 ?x157)))
 (let (($x166 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x115) (bvult ?x120 ?x115))))
 (let (($x113 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x228 (ite $x113 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x168 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x168)))
 (let ((?x35 ((_ extract 63 32) ?x158)))
 (let (($x172 (= ?x35 ?x228)))
 (let (($x123 (and $x172 $x166)))
 (let (($x212 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x171 (and $x212 $x123)))
 (let (($x118 (= true $x171)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (=> $x119 $x118)))
 (let (($x231 (= $x161 true)))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x219 (= (_ bv0 2) ?x190)))
 (let (($x208 (= $x219 true)))
 (let (($x54 (= $x208 true)))
 (let ((?x62 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x62)))
 (let (($x117 (= ?x95 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x117 true)))
 (let (($x125 (= $x28 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x23 true)))
 (let (($x126 (= $x47 true)))
 (let (($x59 (= $x126 true)))
 (let (($x9 (= $x119 true)))
 (let (($x124 (= $x9 true)))
 (let (($x39 (= $x124 true)))
 (let (($x71 (and $x39 $x59)))
 (let (($x70 (and $x71 $x125)))
 (let (($x178 (and $x70 $x54)))
 (let (($x202 (and $x178 $x110)))
 (let (($x192 (and $x202 $x156)))
 (let (($x68 (and $x192 $x17)))
 (let (($x234 (and $x68 $x200)))
 (let (($x21 (and $x234 $x237)))
 (let (($x64 (and $x21 $x196)))
 (let (($x102 (and $x64 $x106)))
 (let (($x299 (and $x102 $x315)))
 (let (($x108 (and $x299 $x49)))
 (let (($x320 (and $x108 $x189)))
 (let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x38 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x38 (_ bv1 32))))
 (let (($x281 (and $x27 $x320)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x277 (and $x57 $x281)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x258 (and $x96 $x277)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x77 $x258)))
 (let (($x135 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x120 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x167 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x152 (or false (or false (and (and true (or $x41 $x167)) (or $x144 $x135))))))
 (let (($x97 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x152)))
 (let (($x143 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x152)))
 (let (($x232 (and $x143 $x103)))
 (let (($x304 (=> $x232 $x180)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x114 (bvule ?x285 (_ bv4294967294 32))))
 (let (($x173 (= $x114 true)))
 (let (($x180 (= $x173 true)))
 (let (($x73 (forall ((input.ind-%var1389X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1389X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1389X)))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1389X)))
 (=> $x297 (= ?x14 ?x37))))))
 ))
 (let (($x293 (forall ((input.ind-%var1388X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1388X)))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1388X)))
 (= $x297 $x87))))
 ))
 (let (($x265 (and $x293 $x73)))
 (let (($x189 (= $x265 true)))
 (let (($x316 (forall ((input.ind-%var1383X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1383X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x301))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1383X)))
 (let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1383X)))
 (=> $x87 (= ?x37 ?x188))))))))
 ))
 (let (($x31 (forall ((input.ind-%var1382X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1382X) (bvult input.ind-%var1382X input.dst.llvm-%n))))
 (let (($x87 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1382X)))
 (= $x87 $x26))))
 ))
 (let (($x247 (and $x31 $x316)))
 (let (($x49 (= $x247 true)))
 (let (($x223 (forall ((input.ind-%var1377X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1377X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x301))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var1377X)))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1377X)))
 (=> $x297 (= ?x14 ?x188))))))))
 ))
 (let (($x162 (forall ((input.ind-%var1376X (_ BitVec 32)) )(let (($x26 (and (bvule (_ bv0 32) input.ind-%var1376X) (bvult input.ind-%var1376X input.dst.llvm-%n))))
 (let (($x297 (input.spec-%var-x-1.0.1 input.ind-%var1376X)))
 (= $x297 $x26))))
 ))
 (let (($x241 (and $x162 $x223)))
 (let (($x315 (= $x241 true)))
 (let ((?x260 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x43 (bvneg ?x260)))
 (let (($x280 (= ?x43 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x128 (= $x280 true)))
 (let (($x106 (= $x128 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let (($x181 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x237 (= $x29 true)))
 (let ((?x254 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x254)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x272)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x130 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x271 $x201)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x98 $x165)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x149 $x256)))
 (let (($x163 (not $x137)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (and $x16 $x147)))
 (let (($x255 (and (not $x252) $x163)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x142 $x174)))
 (let (($x159 (not $x56)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (and $x93 $x204)))
 (let (($x132 (and (not $x193) $x159)))
 (let (($x275 (and (and (and (and (and (and $x132 $x255) $x253) $x191) $x122) $x130) $x235)))
 (let (($x276 (and $x275 $x273)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x46 (or false (or false (and (and true (or $x131 $x82)) (or $x224 $x89))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x46)))
 (let (($x279 (and $x109 $x276)))
 (let (($x236 (= $x279 true)))
 (let (($x32 (= $x236 true)))
 (let (($x200 (= $x32 true)))
 (let (($x94 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x195 (= $x94 true)))
 (let (($x30 (= $x195 true)))
 (let (($x17 (= $x30 true)))
 (let (($x5 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let (($x156 (= $x52 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x115 (bvsub ?x120 ?x157)))
 (let (($x166 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x115) (bvult ?x120 ?x115))))
 (let (($x113 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x228 (ite $x113 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x168 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvmul (_ bv4 64) ?x168)))
 (let ((?x35 ((_ extract 63 32) ?x158)))
 (let (($x172 (= ?x35 ?x228)))
 (let (($x123 (and $x172 $x166)))
 (let (($x212 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x171 (and $x212 $x123)))
 (let (($x118 (= true $x171)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x161 (=> $x119 $x118)))
 (let (($x231 (= $x161 true)))
 (let (($x88 (= $x231 true)))
 (let (($x110 (= $x88 true)))
 (let ((?x190 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x219 (= (_ bv0 2) ?x190)))
 (let (($x208 (= $x219 true)))
 (let (($x54 (= $x208 true)))
 (let ((?x62 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x95 (bvneg ?x62)))
 (let (($x117 (= ?x95 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x28 (= $x117 true)))
 (let (($x125 (= $x28 true)))
 (let (($x23 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x23 true)))
 (let (($x126 (= $x47 true)))
 (let (($x59 (= $x126 true)))
 (let (($x9 (= $x119 true)))
 (let (($x124 (= $x9 true)))
 (let (($x39 (= $x124 true)))
 (let (($x71 (and $x39 $x59)))
 (let (($x70 (and $x71 $x125)))
 (let (($x178 (and $x70 $x54)))
 (let (($x202 (and $x178 $x110)))
 (let (($x192 (and $x202 $x156)))
 (let (($x68 (and $x192 $x17)))
 (let (($x234 (and $x68 $x200)))
 (let (($x21 (and $x234 $x237)))
 (let (($x64 (and $x21 $x196)))
 (let (($x102 (and $x64 $x106)))
 (let (($x299 (and $x102 $x315)))
 (let (($x108 (and $x299 $x49)))
 (let (($x320 (and $x108 $x189)))
 (let (($x155 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x38 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x27 (bvuge ?x38 (_ bv1 32))))
 (let (($x281 (and $x27 $x320)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x277 (and $x57 $x281)))
 (let (($x96 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x258 (and $x96 $x277)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x77 $x258)))
 (let (($x135 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x120 (_ bv3 32))))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x167 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x152 (or false (or false (and (and true (or $x41 $x167)) (or $x144 $x135))))))
 (let (($x97 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x152)))
 (let (($x143 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x152)))
 (let (($x232 (and $x143 $x103)))
 (let (($x304 (=> $x232 $x180)))
 (not $x304))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x312 (bvsge ?x227 (_ bv0 32))))
 (let (($x308 (= $x312 true)))
 (let (($x243 (= $x308 true)))
 (let (($x129 (forall ((input.ind-%var1412X (_ BitVec 32)) )(let ((?x60 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1412X)))
 (let ((?x188 (input.spec-%var-x-1.1.1 input.ind-%var1412X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1412X)))
 (=> $x14 (= ?x188 ?x60))))))
 ))
 (let (($x289 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1411X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1411X)))
 (= $x14 $x27))))
 ))
 (let (($x245 (and $x289 $x129)))
 (let (($x80 (= $x245 true)))
 (let (($x298 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul input.ind-%var1406X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x189))))
 (let ((?x60 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1406X)))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1406X)))
 (=> $x27 (= ?x60 ?x232))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1405X) (bvult input.ind-%var1405X input.dst.llvm-%n))))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (= $x27 $x127))))
 ))
 (let (($x199 (and $x194 $x298)))
 (let (($x283 (= $x199 true)))
 (let (($x173 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul input.ind-%var1400X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x189))))
 (let ((?x188 (input.spec-%var-x-1.1.1 input.ind-%var1400X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1400X)))
 (=> $x14 (= ?x188 ?x232))))))))
 ))
 (let (($x148 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1399X) (bvult input.ind-%var1399X input.dst.llvm-%n))))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1399X)))
 (= $x14 $x127))))
 ))
 (let (($x180 (and $x148 $x173)))
 (let (($x304 (= $x180 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x102)))
 (let (($x297 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x297 true)))
 (let (($x154 (= $x145 true)))
 (let (($x260 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x244 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x275)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x272)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (and $x201 $x122)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x139 $x261)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x255 $x262)))
 (let (($x253 (not $x151)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x256 $x137)))
 (let (($x270 (and (not $x163) $x253)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x132 $x16)))
 (let (($x252 (not $x147)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x82 $x229)))
 (let (($x149 (and (not $x159) $x252)))
 (let (($x200 (and (and (and (and (and (and $x149 $x270) $x274) $x271) $x251) $x101) $x235)))
 (let (($x234 (and $x200 $x254)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x142 (or false (or false (and (and true (or $x185 $x66)) (or $x109 $x93))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x142)))
 (let (($x181 (and $x56 $x234)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x237 (= $x29 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x68 true)))
 (let (($x226 (= $x210 true)))
 (let (($x134 (= $x226 true)))
 (let (($x192 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (= $x192 true)))
 (let (($x195 (= $x94 true)))
 (let (($x30 (= $x195 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x166 (bvsub ?x120 ?x157)))
 (let (($x161 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x166) (bvult ?x120 ?x166))))
 (let (($x115 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x222 (ite $x115 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x228 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x172 (bvmul (_ bv4 64) ?x228)))
 (let ((?x107 ((_ extract 63 32) ?x172)))
 (let (($x160 (= ?x107 ?x222)))
 (let (($x231 (and $x160 $x161)))
 (let (($x35 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x88 (and $x35 $x231)))
 (let (($x110 (= true $x88)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (=> $x119 $x110)))
 (let (($x5 (= $x202 true)))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x178 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x76 (= (_ bv0 2) ?x178)))
 (let (($x206 (= $x76 true)))
 (let (($x212 (= $x206 true)))
 (let ((?x28 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x28)))
 (let (($x22 (= ?x125 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x22 true)))
 (let (($x219 (= $x190 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x71 true)))
 (let (($x65 (= $x112 true)))
 (let (($x62 (= $x65 true)))
 (let (($x23 (= $x119 true)))
 (let (($x47 (= $x23 true)))
 (let (($x126 (= $x47 true)))
 (let (($x95 (and $x126 $x62)))
 (let (($x208 (and $x95 $x219)))
 (let (($x92 (and $x208 $x212)))
 (let (($x156 (and $x92 $x52)))
 (let (($x17 (and $x156 $x30)))
 (let (($x184 (and $x17 $x134)))
 (let (($x21 (and $x184 $x237)))
 (let (($x64 (and $x21 $x196)))
 (let (($x106 (and $x64 $x128)))
 (let (($x26 (and $x106 $x154)))
 (let (($x121 (and $x26 $x304)))
 (let (($x141 (and $x121 $x283)))
 (let (($x72 (and $x141 $x80)))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x39 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x39 (_ bv1 32))))
 (let (($x264 (and $x75 $x72)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x81 $x264)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x296 (and $x100 $x153)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x215 $x296)))
 (let (($x198 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x120 (_ bv3 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x12 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x143 (or false (or false (and (and true (or $x79 $x12)) (or $x218 $x198))))))
 (let (($x77 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x58 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x45 (and $x58 $x51)))
 (let (($x179 (=> $x45 $x243)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x227 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x312 (bvsge ?x227 (_ bv0 32))))
 (let (($x308 (= $x312 true)))
 (let (($x243 (= $x308 true)))
 (let (($x129 (forall ((input.ind-%var1412X (_ BitVec 32)) )(let ((?x60 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1412X)))
 (let ((?x188 (input.spec-%var-x-1.1.1 input.ind-%var1412X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1412X)))
 (=> $x14 (= ?x188 ?x60))))))
 ))
 (let (($x289 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1411X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1411X)))
 (= $x14 $x27))))
 ))
 (let (($x245 (and $x289 $x129)))
 (let (($x80 (= $x245 true)))
 (let (($x298 (forall ((input.ind-%var1406X (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul input.ind-%var1406X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x189))))
 (let ((?x60 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1406X)))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1406X)))
 (=> $x27 (= ?x60 ?x232))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1405X) (bvult input.ind-%var1405X input.dst.llvm-%n))))
 (let (($x27 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1405X)))
 (= $x27 $x127))))
 ))
 (let (($x199 (and $x194 $x298)))
 (let (($x283 (= $x199 true)))
 (let (($x173 (forall ((input.ind-%var1400X (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul input.ind-%var1400X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x189))))
 (let ((?x188 (input.spec-%var-x-1.1.1 input.ind-%var1400X)))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1400X)))
 (=> $x14 (= ?x188 ?x232))))))))
 ))
 (let (($x148 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let (($x127 (and (bvule (_ bv0 32) input.ind-%var1399X) (bvult input.ind-%var1399X input.dst.llvm-%n))))
 (let (($x14 (input.spec-%var-x-1.0.1 input.ind-%var1399X)))
 (= $x14 $x127))))
 ))
 (let (($x180 (and $x148 $x173)))
 (let (($x304 (= $x180 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x136 (bvneg ?x102)))
 (let (($x297 (= ?x136 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x297 true)))
 (let (($x154 (= $x145 true)))
 (let (($x260 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x244 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x275)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x272)))
 (let ((?x130 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let ((?x165 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x165)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (and $x201 $x122)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (and $x139 $x261)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (and $x255 $x262)))
 (let (($x253 (not $x151)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x256 $x137)))
 (let (($x270 (and (not $x163) $x253)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x132 $x16)))
 (let (($x252 (not $x147)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x82 $x229)))
 (let (($x149 (and (not $x159) $x252)))
 (let (($x200 (and (and (and (and (and (and $x149 $x270) $x274) $x271) $x251) $x101) $x235)))
 (let (($x234 (and $x200 $x254)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x89 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x89)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x89)))
 (let (($x142 (or false (or false (and (and true (or $x185 $x66)) (or $x109 $x93))))))
 (let (($x56 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x142)))
 (let (($x181 (and $x56 $x234)))
 (let (($x133 (= $x181 true)))
 (let (($x29 (= $x133 true)))
 (let (($x237 (= $x29 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x68 true)))
 (let (($x226 (= $x210 true)))
 (let (($x134 (= $x226 true)))
 (let (($x192 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x94 (= $x192 true)))
 (let (($x195 (= $x94 true)))
 (let (($x30 (= $x195 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x166 (bvsub ?x120 ?x157)))
 (let (($x161 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x166) (bvult ?x120 ?x166))))
 (let (($x115 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x222 (ite $x115 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x228 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x172 (bvmul (_ bv4 64) ?x228)))
 (let ((?x107 ((_ extract 63 32) ?x172)))
 (let (($x160 (= ?x107 ?x222)))
 (let (($x231 (and $x160 $x161)))
 (let (($x35 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x88 (and $x35 $x231)))
 (let (($x110 (= true $x88)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x202 (=> $x119 $x110)))
 (let (($x5 (= $x202 true)))
 (let (($x8 (= $x5 true)))
 (let (($x52 (= $x8 true)))
 (let ((?x178 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x76 (= (_ bv0 2) ?x178)))
 (let (($x206 (= $x76 true)))
 (let (($x212 (= $x206 true)))
 (let ((?x28 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x28)))
 (let (($x22 (= ?x125 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x22 true)))
 (let (($x219 (= $x190 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x112 (= $x71 true)))
 (let (($x65 (= $x112 true)))
 (let (($x62 (= $x65 true)))
 (let (($x23 (= $x119 true)))
 (let (($x47 (= $x23 true)))
 (let (($x126 (= $x47 true)))
 (let (($x95 (and $x126 $x62)))
 (let (($x208 (and $x95 $x219)))
 (let (($x92 (and $x208 $x212)))
 (let (($x156 (and $x92 $x52)))
 (let (($x17 (and $x156 $x30)))
 (let (($x184 (and $x17 $x134)))
 (let (($x21 (and $x184 $x237)))
 (let (($x64 (and $x21 $x196)))
 (let (($x106 (and $x64 $x128)))
 (let (($x26 (and $x106 $x154)))
 (let (($x121 (and $x26 $x304)))
 (let (($x141 (and $x121 $x283)))
 (let (($x72 (and $x141 $x80)))
 (let (($x124 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x39 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x39 (_ bv1 32))))
 (let (($x264 (and $x75 $x72)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x81 $x264)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x296 (and $x100 $x153)))
 (let (($x215 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x51 (and $x215 $x296)))
 (let (($x198 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x120 (_ bv3 32))))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x12 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x143 (or false (or false (and (and true (or $x79 $x12)) (or $x218 $x198))))))
 (let (($x77 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x143)))
 (let (($x58 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x143)))
 (let (($x45 (and $x58 $x51)))
 (let (($x179 (=> $x45 $x243)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (bvule ?x63 (_ bv4294967294 32))))
 (let (($x300 (= $x205 true)))
 (let (($x314 (= $x300 true)))
 (let (($x170 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1435X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1435X)))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1435X)))
 (=> $x188 (= ?x232 ?x223))))))
 ))
 (let (($x233 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let (($x75 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1434X)))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1434X)))
 (= $x188 $x75))))
 ))
 (let (($x294 (and $x233 $x170)))
 (let (($x108 (= $x294 true)))
 (let (($x162 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1429X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x80))))
 (let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let (($x75 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x75 (= ?x223 ?x45))))))))
 ))
 (let (($x278 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1428X) (bvult input.ind-%var1428X input.dst.llvm-%n))))
 (let (($x75 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x75 $x281))))
 ))
 (let (($x250 (and $x278 $x162)))
 (let (($x50 (= $x250 true)))
 (let (($x308 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1423X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x80))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1423X)))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1423X)))
 (=> $x188 (= ?x232 ?x45))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1422X) (bvult input.ind-%var1422X input.dst.llvm-%n))))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1422X)))
 (= $x188 $x281))))
 ))
 (let (($x243 (and $x265 $x308)))
 (let (($x179 (= $x243 true)))
 (let ((?x26 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x26)))
 (let (($x14 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x14 true)))
 (let (($x239 (= $x259 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x260 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x275 (bvsub ?x120 ?x157)))
 (let (($x133 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x275) (bvult ?x120 ?x275))))
 (let (($x272 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x235 (ite $x272 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x130)))
 (let ((?x32 ((_ extract 63 32) ?x101)))
 (let (($x200 (= ?x32 ?x235)))
 (let (($x29 (and $x200 $x133)))
 (let (($x251 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x237 (and $x251 $x29)))
 (let (($x21 (= true $x237)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x119 $x21)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let (($x271 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x279 (= $x271 true)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let (($x191 (= $x119 true)))
 (let (($x274 (= $x191 true)))
 (let (($x276 (= $x274 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x16)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x18)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x6)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (and $x193 $x142)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x204 $x56)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x225 $x224)))
 (let (($x89 (not $x174)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x226 $x134)))
 (let (($x66 (and (not $x184) $x89)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x94 $x195)))
 (let (($x17 (not $x30)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x107 $x115)))
 (let (($x210 (and (not $x192) $x17)))
 (let (($x269 (and (and (and (and (and (and $x210 $x66) $x46) $x93) $x82) $x159) $x132)))
 (let (($x255 (and $x269 $x147)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x8 (or false (or false (and (and true (or $x166 $x171)) (or $x231 $x88))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x8)))
 (let (($x262 (and $x156 $x255)))
 (let (($x151 (= $x262 true)))
 (let (($x253 (= $x151 true)))
 (let (($x270 (= $x253 true)))
 (let (($x168 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x168 true)))
 (let (($x35 (= $x158 true)))
 (let (($x113 (= $x35 true)))
 (let ((?x178 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x76 (= (_ bv0 2) ?x178)))
 (let (($x206 (= $x76 true)))
 (let (($x212 (= $x206 true)))
 (let ((?x28 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x28)))
 (let (($x22 (= ?x125 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x22 true)))
 (let (($x219 (= $x190 true)))
 (let (($x112 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x112 true)))
 (let (($x62 (= $x65 true)))
 (let (($x95 (= $x62 true)))
 (let (($x208 (and $x95 $x219)))
 (let (($x92 (and $x208 $x212)))
 (let (($x228 (and $x92 $x113)))
 (let (($x273 (and $x228 $x270)))
 (let (($x98 (and $x273 $x276)))
 (let (($x165 (and $x98 $x201)))
 (let (($x64 (and $x165 $x196)))
 (let (($x106 (and $x64 $x128)))
 (let (($x154 (and $x106 $x145)))
 (let (($x127 (and $x154 $x239)))
 (let (($x10 (and $x127 $x179)))
 (let (($x248 (and $x10 $x50)))
 (let (($x282 (and $x248 $x108)))
 (let (($x47 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x126 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x126 (_ bv1 32))))
 (let (($x317 (and $x59 $x282)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x301 (and $x155 $x317)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x240 (and $x57 $x301)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x246 (and $x186 $x240)))
 (let (($x152 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd ?x120 (_ bv3 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x144 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x58 (or false (or false (and (and true (or $x214 $x144)) (or $x91 $x152))))))
 (let (($x215 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x58)))
 (let (($x48 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x58)))
 (let (($x216 (and $x48 $x246)))
 (let (($x74 (=> $x216 $x314)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x63 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x205 (bvule ?x63 (_ bv4294967294 32))))
 (let (($x300 (= $x205 true)))
 (let (($x314 (= $x300 true)))
 (let (($x170 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1435X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1435X)))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1435X)))
 (=> $x188 (= ?x232 ?x223))))))
 ))
 (let (($x233 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let (($x75 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1434X)))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1434X)))
 (= $x188 $x75))))
 ))
 (let (($x294 (and $x233 $x170)))
 (let (($x108 (= $x294 true)))
 (let (($x162 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1429X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x80))))
 (let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1429X)))
 (let (($x75 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1429X)))
 (=> $x75 (= ?x223 ?x45))))))))
 ))
 (let (($x278 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1428X) (bvult input.ind-%var1428X input.dst.llvm-%n))))
 (let (($x75 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1428X)))
 (= $x75 $x281))))
 ))
 (let (($x250 (and $x278 $x162)))
 (let (($x50 (= $x250 true)))
 (let (($x308 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let ((?x318 (bvadd (bvmul input.ind-%var1423X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x80))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1423X)))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1423X)))
 (=> $x188 (= ?x232 ?x45))))))))
 ))
 (let (($x265 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var1422X) (bvult input.ind-%var1422X input.dst.llvm-%n))))
 (let (($x188 (input.spec-%var-x-1.0.1 input.ind-%var1422X)))
 (= $x188 $x281))))
 ))
 (let (($x243 (and $x265 $x308)))
 (let (($x179 (= $x243 true)))
 (let ((?x26 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x38 (bvneg ?x26)))
 (let (($x14 (= ?x38 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x259 (= $x14 true)))
 (let (($x239 (= $x259 true)))
 (let (($x102 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x260 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x275 (bvsub ?x120 ?x157)))
 (let (($x133 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x275) (bvult ?x120 ?x275))))
 (let (($x272 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x235 (ite $x272 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x130)))
 (let ((?x32 ((_ extract 63 32) ?x101)))
 (let (($x200 (= ?x32 ?x235)))
 (let (($x29 (and $x200 $x133)))
 (let (($x251 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x237 (and $x251 $x29)))
 (let (($x21 (= true $x237)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x244 (=> $x119 $x21)))
 (let (($x213 (= $x244 true)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let (($x271 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x279 (= $x271 true)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let (($x191 (= $x119 true)))
 (let (($x274 (= $x191 true)))
 (let (($x276 (= $x274 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x16)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x18)))
 (let ((?x229 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x229)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x6)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (and $x193 $x142)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x82 (and $x204 $x56)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x225 $x224)))
 (let (($x89 (not $x174)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x226 $x134)))
 (let (($x66 (and (not $x184) $x89)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x94 $x195)))
 (let (($x17 (not $x30)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x107 $x115)))
 (let (($x210 (and (not $x192) $x17)))
 (let (($x269 (and (and (and (and (and (and $x210 $x66) $x46) $x93) $x82) $x159) $x132)))
 (let (($x255 (and $x269 $x147)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x123 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x123)))
 (let (($x8 (or false (or false (and (and true (or $x166 $x171)) (or $x231 $x88))))))
 (let (($x156 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x8)))
 (let (($x262 (and $x156 $x255)))
 (let (($x151 (= $x262 true)))
 (let (($x253 (= $x151 true)))
 (let (($x270 (= $x253 true)))
 (let (($x168 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x158 (= $x168 true)))
 (let (($x35 (= $x158 true)))
 (let (($x113 (= $x35 true)))
 (let ((?x178 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x76 (= (_ bv0 2) ?x178)))
 (let (($x206 (= $x76 true)))
 (let (($x212 (= $x206 true)))
 (let ((?x28 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x125 (bvneg ?x28)))
 (let (($x22 (= ?x125 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x190 (= $x22 true)))
 (let (($x219 (= $x190 true)))
 (let (($x112 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x65 (= $x112 true)))
 (let (($x62 (= $x65 true)))
 (let (($x95 (= $x62 true)))
 (let (($x208 (and $x95 $x219)))
 (let (($x92 (and $x208 $x212)))
 (let (($x228 (and $x92 $x113)))
 (let (($x273 (and $x228 $x270)))
 (let (($x98 (and $x273 $x276)))
 (let (($x165 (and $x98 $x201)))
 (let (($x64 (and $x165 $x196)))
 (let (($x106 (and $x64 $x128)))
 (let (($x154 (and $x106 $x145)))
 (let (($x127 (and $x154 $x239)))
 (let (($x10 (and $x127 $x179)))
 (let (($x248 (and $x10 $x50)))
 (let (($x282 (and $x248 $x108)))
 (let (($x47 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x126 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x126 (_ bv1 32))))
 (let (($x317 (and $x59 $x282)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x301 (and $x155 $x317)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x240 (and $x57 $x301)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x246 (and $x186 $x240)))
 (let (($x152 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x12 (bvadd ?x120 (_ bv3 32))))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x12)))
 (let (($x144 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x12)))
 (let (($x58 (or false (or false (and (and true (or $x214 $x144)) (or $x91 $x152))))))
 (let (($x215 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x58)))
 (let (($x48 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x58)))
 (let (($x216 (and $x48 $x246)))
 (let (($x74 (=> $x216 $x314)))
 (not $x74))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x302 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (bvsge ?x302 (_ bv0 32))))
 (let (($x20 (= $x7 true)))
 (let (($x40 (= $x20 true)))
 (let (($x131 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1458X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1458X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1458X)))
 (=> $x232 (= ?x45 ?x173))))))
 ))
 (let (($x37 (forall ((input.ind-%var1457X (_ BitVec 32)) )(let (($x59 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1457X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1457X)))
 (= $x232 $x59))))
 ))
 (let (($x69 (and $x37 $x131)))
 (let (($x141 (= $x69 true)))
 (let (($x148 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var1452X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x108))))
 (let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1452X)))
 (let (($x59 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1452X)))
 (=> $x59 (= ?x173 ?x216))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var1451X) (bvult input.ind-%var1451X input.dst.llvm-%n))))
 (let (($x59 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (= $x59 $x264))))
 ))
 (let (($x258 (and $x277 $x148)))
 (let (($x247 (= $x258 true)))
 (let (($x300 (forall ((input.ind-%var1446X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var1446X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x108))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1446X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1446X)))
 (=> $x232 (= ?x45 ?x216))))))))
 ))
 (let (($x245 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var1445X) (bvult input.ind-%var1445X input.dst.llvm-%n))))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1445X)))
 (= $x232 $x264))))
 ))
 (let (($x314 (and $x245 $x300)))
 (let (($x74 (= $x314 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x127)))
 (let (($x188 (= ?x39 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x320 (= $x188 true)))
 (let (($x31 (= $x320 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x26 true)))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let (($x102 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x29 (bvsub ?x120 ?x157)))
 (let (($x213 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x29) (bvult ?x120 ?x29))))
 (let (($x234 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x181 (ite $x234 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvmul (_ bv4 64) ?x200)))
 (let ((?x275 ((_ extract 63 32) ?x254)))
 (let (($x133 (= ?x275 ?x181)))
 (let (($x61 (and $x133 $x213)))
 (let (($x272 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x196 (and $x272 $x61)))
 (let (($x64 (= true $x196)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (=> $x119 $x64)))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x122 true)))
 (let (($x251 (= $x261 true)))
 (let (($x236 (= $x251 true)))
 (let (($x279 (= $x119 true)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x269)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x18)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x142 $x82)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x6 $x137)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x66 $x252)))
 (let (($x46 (not $x146)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x224 $x174)))
 (let (($x109 (and (not $x89) $x46)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x210 $x226)))
 (let (($x184 (not $x134)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x171 $x118)))
 (let (($x225 (and (not $x17) $x184)))
 (let (($x270 (and (and (and (and (and (and $x225 $x109) $x256) $x193) $x229) $x163) $x132)))
 (let (($x273 (and $x270 $x16)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x94 (or false (or false (and (and true (or $x110 $x202)) (or $x156 $x107))))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x94)))
 (let (($x191 (and $x30 $x273)))
 (let (($x274 (= $x191 true)))
 (let (($x276 (= $x274 true)))
 (let (($x98 (= $x276 true)))
 (let (($x228 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x228 true)))
 (let (($x160 (= $x222 true)))
 (let (($x52 (= $x160 true)))
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x168 (= (_ bv0 2) ?x92)))
 (let (($x158 (= $x168 true)))
 (let (($x35 (= $x158 true)))
 (let ((?x190 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x190)))
 (let (($x54 (= ?x219 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x54 true)))
 (let (($x76 (= $x178 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x169 true)))
 (let (($x28 (= $x117 true)))
 (let (($x125 (= $x28 true)))
 (let (($x206 (and $x125 $x76)))
 (let (($x113 (and $x206 $x35)))
 (let (($x123 (and $x113 $x52)))
 (let (($x271 (and $x123 $x98)))
 (let (($x165 (and $x271 $x201)))
 (let (($x130 (and $x165 $x236)))
 (let (($x106 (and $x130 $x128)))
 (let (($x154 (and $x106 $x145)))
 (let (($x239 (and $x154 $x259)))
 (let (($x281 (and $x239 $x31)))
 (let (($x67 (and $x281 $x74)))
 (let (($x49 (and $x67 $x247)))
 (let (($x42 (and $x49 $x141)))
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x65 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x65 (_ bv1 32))))
 (let (($x291 (and $x62 $x42)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x124 $x291)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x81 $x189)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x96 $x295)))
 (let (($x143 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd ?x120 (_ bv3 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x218 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x48 (or false (or false (and (and true (or $x217 $x218)) (or $x97 $x143))))))
 (let (($x186 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x230 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x183 (and $x230 $x175)))
 (let (($x150 (=> $x183 $x40)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x302 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x7 (bvsge ?x302 (_ bv0 32))))
 (let (($x20 (= $x7 true)))
 (let (($x40 (= $x20 true)))
 (let (($x131 (forall ((input.ind-%var1458X (_ BitVec 32)) )(let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1458X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1458X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1458X)))
 (=> $x232 (= ?x45 ?x173))))))
 ))
 (let (($x37 (forall ((input.ind-%var1457X (_ BitVec 32)) )(let (($x59 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1457X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1457X)))
 (= $x232 $x59))))
 ))
 (let (($x69 (and $x37 $x131)))
 (let (($x141 (= $x69 true)))
 (let (($x148 (forall ((input.ind-%var1452X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var1452X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x108))))
 (let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1452X)))
 (let (($x59 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1452X)))
 (=> $x59 (= ?x173 ?x216))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1451X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var1451X) (bvult input.ind-%var1451X input.dst.llvm-%n))))
 (let (($x59 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1451X)))
 (= $x59 $x264))))
 ))
 (let (($x258 (and $x277 $x148)))
 (let (($x247 (= $x258 true)))
 (let (($x300 (forall ((input.ind-%var1446X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var1446X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x108))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1446X)))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1446X)))
 (=> $x232 (= ?x45 ?x216))))))))
 ))
 (let (($x245 (forall ((input.ind-%var1445X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var1445X) (bvult input.ind-%var1445X input.dst.llvm-%n))))
 (let (($x232 (input.spec-%var-x-1.0.1 input.ind-%var1445X)))
 (= $x232 $x264))))
 ))
 (let (($x314 (and $x245 $x300)))
 (let (($x74 (= $x314 true)))
 (let ((?x127 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x39 (bvneg ?x127)))
 (let (($x188 (= ?x39 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x320 (= $x188 true)))
 (let (($x31 (= $x320 true)))
 (let (($x26 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x38 (= $x26 true)))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let (($x102 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x29 (bvsub ?x120 ?x157)))
 (let (($x213 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x29) (bvult ?x120 ?x29))))
 (let (($x234 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x181 (ite $x234 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x200 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x254 (bvmul (_ bv4 64) ?x200)))
 (let ((?x275 ((_ extract 63 32) ?x254)))
 (let (($x133 (= ?x275 ?x181)))
 (let (($x61 (and $x133 $x213)))
 (let (($x272 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x196 (and $x272 $x61)))
 (let (($x64 (= true $x196)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (=> $x119 $x64)))
 (let (($x43 (= $x260 true)))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x122 true)))
 (let (($x251 (= $x261 true)))
 (let (($x236 (= $x251 true)))
 (let (($x279 (= $x119 true)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x269)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x18)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x56 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (and $x142 $x82)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x6 $x137)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (and $x66 $x252)))
 (let (($x46 (not $x146)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x224 $x174)))
 (let (($x109 (and (not $x89) $x46)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x210 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x210 $x226)))
 (let (($x184 (not $x134)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x171 $x118)))
 (let (($x225 (and (not $x17) $x184)))
 (let (($x270 (and (and (and (and (and (and $x225 $x109) $x256) $x193) $x229) $x163) $x132)))
 (let (($x273 (and $x270 $x16)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x94 (or false (or false (and (and true (or $x110 $x202)) (or $x156 $x107))))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x94)))
 (let (($x191 (and $x30 $x273)))
 (let (($x274 (= $x191 true)))
 (let (($x276 (= $x274 true)))
 (let (($x98 (= $x276 true)))
 (let (($x228 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x222 (= $x228 true)))
 (let (($x160 (= $x222 true)))
 (let (($x52 (= $x160 true)))
 (let ((?x92 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x168 (= (_ bv0 2) ?x92)))
 (let (($x158 (= $x168 true)))
 (let (($x35 (= $x158 true)))
 (let ((?x190 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x219 (bvneg ?x190)))
 (let (($x54 (= ?x219 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x178 (= $x54 true)))
 (let (($x76 (= $x178 true)))
 (let (($x169 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x169 true)))
 (let (($x28 (= $x117 true)))
 (let (($x125 (= $x28 true)))
 (let (($x206 (and $x125 $x76)))
 (let (($x113 (and $x206 $x35)))
 (let (($x123 (and $x113 $x52)))
 (let (($x271 (and $x123 $x98)))
 (let (($x165 (and $x271 $x201)))
 (let (($x130 (and $x165 $x236)))
 (let (($x106 (and $x130 $x128)))
 (let (($x154 (and $x106 $x145)))
 (let (($x239 (and $x154 $x259)))
 (let (($x281 (and $x239 $x31)))
 (let (($x67 (and $x281 $x74)))
 (let (($x49 (and $x67 $x247)))
 (let (($x42 (and $x49 $x141)))
 (let (($x112 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x65 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x65 (_ bv1 32))))
 (let (($x291 (and $x62 $x42)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x189 (and $x124 $x291)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x81 $x189)))
 (let (($x96 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x175 (and $x96 $x295)))
 (let (($x143 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x144 (bvadd ?x120 (_ bv3 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x144)))
 (let (($x218 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x144)))
 (let (($x48 (or false (or false (and (and true (or $x217 $x218)) (or $x97 $x143))))))
 (let (($x186 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x48)))
 (let (($x230 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x48)))
 (let (($x183 (and $x230 $x175)))
 (let (($x150 (=> $x183 $x40)))
 (not $x150))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x293 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x9 (bvule ?x293 input.dst.llvm-%n)))
 (let (($x84 (= $x9 true)))
 (let (($x311 (= $x84 true)))
 (let (($x172 (forall ((input.ind-%var1481X (_ BitVec 32)) )(let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1481X)))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var1481X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1481X)))
 (=> $x45 (= ?x216 ?x308))))))
 ))
 (let (($x60 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1480X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1480X)))
 (= $x45 $x62))))
 ))
 (let (($x313 (and $x60 $x172)))
 (let (($x248 (= $x313 true)))
 (let (($x265 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul input.ind-%var1475X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x141))))
 (let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1475X)))
 (let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1475X)))
 (=> $x62 (= ?x308 ?x183))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1474X) (bvult input.ind-%var1474X input.dst.llvm-%n))))
 (let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1474X)))
 (= $x62 $x317))))
 ))
 (let (($x296 (and $x153 $x265)))
 (let (($x199 (= $x296 true)))
 (let (($x20 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul input.ind-%var1469X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x141))))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var1469X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1469X)))
 (=> $x45 (= ?x216 ?x183))))))))
 ))
 (let (($x294 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1468X) (bvult input.ind-%var1468X input.dst.llvm-%n))))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1468X)))
 (= $x45 $x317))))
 ))
 (let (($x40 (and $x294 $x20)))
 (let (($x150 (= $x40 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x281)))
 (let (($x232 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x232 true)))
 (let (($x194 (= $x72 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x127 true)))
 (let (($x188 (= $x39 true)))
 (let (($x320 (= $x188 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x26 true)))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x61 (bvsub ?x120 ?x157)))
 (let (($x43 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x61) (bvult ?x120 ?x61))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x244 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x133)))
 (let ((?x29 ((_ extract 63 32) ?x237)))
 (let (($x213 (= ?x29 ?x244)))
 (let (($x280 (and $x213 $x43)))
 (let (($x234 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x128 (and $x234 $x280)))
 (let (($x106 (= true $x128)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x119 $x106)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x101 true)))
 (let (($x272 (= $x32 true)))
 (let (($x235 (= $x272 true)))
 (let (($x261 (= $x119 true)))
 (let (($x251 (= $x261 true)))
 (let (($x236 (= $x251 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x270)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x18)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x82 $x229)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x56 $x151)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x109 $x147)))
 (let (($x256 (not $x93)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x252 $x146)))
 (let (($x204 (and (not $x46) $x256)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x225 $x224)))
 (let (($x89 (not $x174)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x202 $x5)))
 (let (($x66 (and (not $x184) $x89)))
 (let (($x98 (and (and (and (and (and (and $x66 $x204) $x262) $x142) $x159) $x253) $x132)))
 (let (($x271 (and $x98 $x269)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x210 (or false (or false (and (and true (or $x115 $x192)) (or $x30 $x171))))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x279 (and $x134 $x271)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let (($x165 (= $x201 true)))
 (let (($x123 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x161 (= $x123 true)))
 (let (($x231 (= $x161 true)))
 (let (($x195 (= $x231 true)))
 (let ((?x113 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x228 (= (_ bv0 2) ?x113)))
 (let (($x222 (= $x228 true)))
 (let (($x160 (= $x222 true)))
 (let ((?x178 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x178)))
 (let (($x212 (= ?x76 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x212 true)))
 (let (($x168 (= $x92 true)))
 (let (($x70 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x70 true)))
 (let (($x190 (= $x22 true)))
 (let (($x219 (= $x190 true)))
 (let (($x158 (and $x219 $x168)))
 (let (($x52 (and $x158 $x160)))
 (let (($x88 (and $x52 $x195)))
 (let (($x122 (and $x88 $x165)))
 (let (($x130 (and $x122 $x236)))
 (let (($x200 (and $x130 $x235)))
 (let (($x154 (and $x200 $x145)))
 (let (($x239 (and $x154 $x259)))
 (let (($x31 (and $x239 $x320)))
 (let (($x264 (and $x31 $x194)))
 (let (($x263 (and $x264 $x150)))
 (let (($x283 (and $x263 $x199)))
 (let (($x315 (and $x283 $x248)))
 (let (($x169 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x117 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x117 (_ bv1 32))))
 (let (($x285 (and $x28 $x315)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x80 (and $x47 $x285)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x177 (and $x155 $x80)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x44 (and $x100 $x177)))
 (let (($x58 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd ?x120 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x91 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x230 (or false (or false (and (and true (or $x135 $x91)) (or $x77 $x58))))))
 (let (($x96 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x230)))
 (let (($x167 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x230)))
 (let (($x13 (and $x167 $x44)))
 (let (($x268 (=> $x13 $x311)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x293 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x9 (bvule ?x293 input.dst.llvm-%n)))
 (let (($x84 (= $x9 true)))
 (let (($x311 (= $x84 true)))
 (let (($x172 (forall ((input.ind-%var1481X (_ BitVec 32)) )(let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1481X)))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var1481X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1481X)))
 (=> $x45 (= ?x216 ?x308))))))
 ))
 (let (($x60 (forall ((input.ind-%var1480X (_ BitVec 32)) )(let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1480X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1480X)))
 (= $x45 $x62))))
 ))
 (let (($x313 (and $x60 $x172)))
 (let (($x248 (= $x313 true)))
 (let (($x265 (forall ((input.ind-%var1475X (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul input.ind-%var1475X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x141))))
 (let ((?x308 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1475X)))
 (let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1475X)))
 (=> $x62 (= ?x308 ?x183))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1474X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1474X) (bvult input.ind-%var1474X input.dst.llvm-%n))))
 (let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1474X)))
 (= $x62 $x317))))
 ))
 (let (($x296 (and $x153 $x265)))
 (let (($x199 (= $x296 true)))
 (let (($x20 (forall ((input.ind-%var1469X (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul input.ind-%var1469X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x141))))
 (let ((?x216 (input.spec-%var-x-1.1.1 input.ind-%var1469X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1469X)))
 (=> $x45 (= ?x216 ?x183))))))))
 ))
 (let (($x294 (forall ((input.ind-%var1468X (_ BitVec 32)) )(let (($x317 (and (bvule (_ bv0 32) input.ind-%var1468X) (bvult input.ind-%var1468X input.dst.llvm-%n))))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var1468X)))
 (= $x45 $x317))))
 ))
 (let (($x40 (and $x294 $x20)))
 (let (($x150 (= $x40 true)))
 (let ((?x281 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x281)))
 (let (($x232 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x72 (= $x232 true)))
 (let (($x194 (= $x72 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x127 true)))
 (let (($x188 (= $x39 true)))
 (let (($x320 (= $x188 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x26 true)))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x61 (bvsub ?x120 ?x157)))
 (let (($x43 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x61) (bvult ?x120 ?x61))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x244 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x133)))
 (let ((?x29 ((_ extract 63 32) ?x237)))
 (let (($x213 (= ?x29 ?x244)))
 (let (($x280 (and $x213 $x43)))
 (let (($x234 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x128 (and $x234 $x280)))
 (let (($x106 (= true $x128)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x119 $x106)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x101 true)))
 (let (($x272 (= $x32 true)))
 (let (($x235 (= $x272 true)))
 (let (($x261 (= $x119 true)))
 (let (($x251 (= $x261 true)))
 (let (($x236 (= $x251 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x269 (= (_ bv0 32) ?x270)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x18)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (and $x82 $x229)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (and $x56 $x151)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x262 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x109 $x147)))
 (let (($x256 (not $x93)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x252 $x146)))
 (let (($x204 (and (not $x46) $x256)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (and $x225 $x224)))
 (let (($x89 (not $x174)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x202 $x5)))
 (let (($x66 (and (not $x184) $x89)))
 (let (($x98 (and (and (and (and (and (and $x66 $x204) $x262) $x142) $x159) $x253) $x132)))
 (let (($x271 (and $x98 $x269)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x210 (or false (or false (and (and true (or $x115 $x192)) (or $x30 $x171))))))
 (let (($x134 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x210)))
 (let (($x279 (and $x134 $x271)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let (($x165 (= $x201 true)))
 (let (($x123 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x161 (= $x123 true)))
 (let (($x231 (= $x161 true)))
 (let (($x195 (= $x231 true)))
 (let ((?x113 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x228 (= (_ bv0 2) ?x113)))
 (let (($x222 (= $x228 true)))
 (let (($x160 (= $x222 true)))
 (let ((?x178 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x76 (bvneg ?x178)))
 (let (($x212 (= ?x76 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x212 true)))
 (let (($x168 (= $x92 true)))
 (let (($x70 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x70 true)))
 (let (($x190 (= $x22 true)))
 (let (($x219 (= $x190 true)))
 (let (($x158 (and $x219 $x168)))
 (let (($x52 (and $x158 $x160)))
 (let (($x88 (and $x52 $x195)))
 (let (($x122 (and $x88 $x165)))
 (let (($x130 (and $x122 $x236)))
 (let (($x200 (and $x130 $x235)))
 (let (($x154 (and $x200 $x145)))
 (let (($x239 (and $x154 $x259)))
 (let (($x31 (and $x239 $x320)))
 (let (($x264 (and $x31 $x194)))
 (let (($x263 (and $x264 $x150)))
 (let (($x283 (and $x263 $x199)))
 (let (($x315 (and $x283 $x248)))
 (let (($x169 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x117 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x28 (bvuge ?x117 (_ bv1 32))))
 (let (($x285 (and $x28 $x315)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x80 (and $x47 $x285)))
 (let (($x155 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x177 (and $x155 $x80)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x44 (and $x100 $x177)))
 (let (($x58 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x218 (bvadd ?x120 (_ bv3 32))))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x218)))
 (let (($x91 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x218)))
 (let (($x230 (or false (or false (and (and true (or $x135 $x91)) (or $x77 $x58))))))
 (let (($x96 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x230)))
 (let (($x167 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x230)))
 (let (($x13 (and $x167 $x44)))
 (let (($x268 (=> $x13 $x311)))
 (not $x268))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x23 (bvmul (_ bv4294967295 32) ?x289)))
 (let ((?x85 (bvneg ?x23)))
 (let (($x267 (= ?x85 ?x305)))
 (let (($x87 (= $x267 true)))
 (let (($x166 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let ((?x300 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1504X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1504X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1504X)))
 (=> $x216 (= ?x183 ?x300))))))
 ))
 (let (($x223 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1503X)))
 (= $x216 $x28))))
 ))
 (let (($x114 (and $x223 $x166)))
 (let (($x49 (= $x114 true)))
 (let (($x245 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1498X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x248))))
 (let ((?x300 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1498X)))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (=> $x28 (= ?x300 ?x13))))))))
 ))
 (let (($x301 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let (($x291 (and (bvule (_ bv0 32) input.ind-%var1497X) (bvult input.ind-%var1497X input.dst.llvm-%n))))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1497X)))
 (= $x28 $x291))))
 ))
 (let (($x240 (and $x301 $x245)))
 (let (($x250 (= $x240 true)))
 (let (($x84 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1492X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x248))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1492X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1492X)))
 (=> $x216 (= ?x183 ?x13))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x291 (and (bvule (_ bv0 32) input.ind-%var1491X) (bvult input.ind-%var1491X input.dst.llvm-%n))))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1491X)))
 (= $x216 $x291))))
 ))
 (let (($x311 (and $x69 $x84)))
 (let (($x268 (= $x311 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x264)))
 (let (($x45 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x45 true)))
 (let (($x278 (= $x282 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x126 (= $x281 true)))
 (let (($x232 (= $x126 true)))
 (let (($x72 (= $x232 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x127 true)))
 (let (($x188 (= $x39 true)))
 (let (($x320 (= $x188 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x26 true)))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x196 (bvsub ?x120 ?x157)))
 (let (($x43 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x196) (bvult ?x120 ?x196))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x244 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x133)))
 (let ((?x29 ((_ extract 63 32) ?x237)))
 (let (($x213 (= ?x29 ?x244)))
 (let (($x280 (and $x213 $x43)))
 (let (($x234 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x128 (and $x234 $x280)))
 (let (($x106 (= true $x128)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x119 $x106)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x101 true)))
 (let (($x272 (= $x32 true)))
 (let (($x235 (= $x272 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x122 true)))
 (let (($x251 (= $x261 true)))
 (let (($x236 (= $x251 true)))
 (let (($x271 (= $x119 true)))
 (let (($x279 (= $x271 true)))
 (let (($x139 (= $x279 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x82)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x191)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (and $x204 $x193)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (and $x256 $x262)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x174 $x89)))
 (let (($x252 (not $x66)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x149 $x225)))
 (let (($x46 (and (not $x224) $x252)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x185 $x210)))
 (let (($x202 (not $x134)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x52 $x123)))
 (let (($x184 (and (not $x17) $x202)))
 (let (($x253 (and (and (and (and (and (and $x184 $x46) $x109) $x93) $x273) $x142) $x56)))
 (let (($x276 (and $x253 $x137)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x195)))
 (let (($x30 (or false (or false (and (and true (or $x88 $x8)) (or $x107 $x115))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x18 (and $x118 $x276)))
 (let (($x132 (= $x18 true)))
 (let (($x98 (= $x132 true)))
 (let (($x270 (= $x98 true)))
 (let ((?x158 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x35 (= (_ bv0 2) ?x158)))
 (let (($x113 (= $x35 true)))
 (let (($x228 (= $x113 true)))
 (let ((?x54 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x54)))
 (let (($x206 (= ?x178 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x206 true)))
 (let (($x92 (= $x212 true)))
 (let (($x222 (and $x92 $x228)))
 (let (($x269 (and $x222 $x270)))
 (let (($x201 (and $x269 $x139)))
 (let (($x130 (and $x201 $x236)))
 (let (($x200 (and $x130 $x235)))
 (let (($x154 (and $x200 $x145)))
 (let (($x239 (and $x154 $x259)))
 (let (($x31 (and $x239 $x320)))
 (let (($x194 (and $x31 $x72)))
 (let (($x317 (and $x194 $x278)))
 (let (($x105 (and $x317 $x268)))
 (let (($x50 (and $x105 $x250)))
 (let (($x304 (and $x50 $x49)))
 (let (($x70 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x22 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x22 (_ bv1 32))))
 (let (($x227 (and $x190 $x304)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x112 $x227)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x299 (and $x124 $x108)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x57 $x299)))
 (let (($x48 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd ?x120 (_ bv3 32))))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x97 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x167 (or false (or false (and (and true (or $x198 $x97)) (or $x215 $x48))))))
 (let (($x100 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x167)))
 (let (($x12 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x167)))
 (let (($x319 (and $x12 $x24)))
 (let (($x309 (=> $x319 $x87)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x289 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x23 (bvmul (_ bv4294967295 32) ?x289)))
 (let ((?x85 (bvneg ?x23)))
 (let (($x267 (= ?x85 ?x305)))
 (let (($x87 (= $x267 true)))
 (let (($x166 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let ((?x300 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1504X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1504X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1504X)))
 (=> $x216 (= ?x183 ?x300))))))
 ))
 (let (($x223 (forall ((input.ind-%var1503X (_ BitVec 32)) )(let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1503X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1503X)))
 (= $x216 $x28))))
 ))
 (let (($x114 (and $x223 $x166)))
 (let (($x49 (= $x114 true)))
 (let (($x245 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1498X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x248))))
 (let ((?x300 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1498X)))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1498X)))
 (=> $x28 (= ?x300 ?x13))))))))
 ))
 (let (($x301 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let (($x291 (and (bvule (_ bv0 32) input.ind-%var1497X) (bvult input.ind-%var1497X input.dst.llvm-%n))))
 (let (($x28 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1497X)))
 (= $x28 $x291))))
 ))
 (let (($x240 (and $x301 $x245)))
 (let (($x250 (= $x240 true)))
 (let (($x84 (forall ((input.ind-%var1492X (_ BitVec 32)) )(let ((?x83 (bvadd (bvmul input.ind-%var1492X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv1 32))) (select input.dst.llvm-mem ?x83))))
 (let ((?x13 (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x83 (_ bv2 32))) ?x248))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1492X)))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1492X)))
 (=> $x216 (= ?x183 ?x13))))))))
 ))
 (let (($x69 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let (($x291 (and (bvule (_ bv0 32) input.ind-%var1491X) (bvult input.ind-%var1491X input.dst.llvm-%n))))
 (let (($x216 (input.spec-%var-x-1.0.1 input.ind-%var1491X)))
 (= $x216 $x291))))
 ))
 (let (($x311 (and $x69 $x84)))
 (let (($x268 (= $x311 true)))
 (let ((?x264 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x65 (bvneg ?x264)))
 (let (($x45 (= ?x65 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x282 (= $x45 true)))
 (let (($x278 (= $x282 true)))
 (let (($x281 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x126 (= $x281 true)))
 (let (($x232 (= $x126 true)))
 (let (($x72 (= $x232 true)))
 (let (($x127 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x127 true)))
 (let (($x188 (= $x39 true)))
 (let (($x320 (= $x188 true)))
 (let (($x26 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x38 (= $x26 true)))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x196 (bvsub ?x120 ?x157)))
 (let (($x43 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x196) (bvult ?x120 ?x196))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x244 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x133)))
 (let ((?x29 ((_ extract 63 32) ?x237)))
 (let (($x213 (= ?x29 ?x244)))
 (let (($x280 (and $x213 $x43)))
 (let (($x234 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x128 (and $x234 $x280)))
 (let (($x106 (= true $x128)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x102 (=> $x119 $x106)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x101 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x32 (= $x101 true)))
 (let (($x272 (= $x32 true)))
 (let (($x235 (= $x272 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x261 (= $x122 true)))
 (let (($x251 (= $x261 true)))
 (let (($x236 (= $x251 true)))
 (let (($x271 (= $x119 true)))
 (let (($x279 (= $x271 true)))
 (let (($x139 (= $x279 true)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x137 (= (_ bv0 32) ?x82)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x191)))
 (let ((?x6 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x142 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x6)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (and $x204 $x193)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (and $x256 $x262)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x174 $x89)))
 (let (($x252 (not $x66)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x149 $x225)))
 (let (($x46 (and (not $x224) $x252)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (and $x185 $x210)))
 (let (($x202 (not $x134)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x52 $x123)))
 (let (($x184 (and (not $x17) $x202)))
 (let (($x253 (and (and (and (and (and (and $x184 $x46) $x109) $x93) $x273) $x142) $x56)))
 (let (($x276 (and $x253 $x137)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x195)))
 (let (($x30 (or false (or false (and (and true (or $x88 $x8)) (or $x107 $x115))))))
 (let (($x118 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x30)))
 (let (($x18 (and $x118 $x276)))
 (let (($x132 (= $x18 true)))
 (let (($x98 (= $x132 true)))
 (let (($x270 (= $x98 true)))
 (let ((?x158 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x35 (= (_ bv0 2) ?x158)))
 (let (($x113 (= $x35 true)))
 (let (($x228 (= $x113 true)))
 (let ((?x54 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x54)))
 (let (($x206 (= ?x178 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x206 true)))
 (let (($x92 (= $x212 true)))
 (let (($x222 (and $x92 $x228)))
 (let (($x269 (and $x222 $x270)))
 (let (($x201 (and $x269 $x139)))
 (let (($x130 (and $x201 $x236)))
 (let (($x200 (and $x130 $x235)))
 (let (($x154 (and $x200 $x145)))
 (let (($x239 (and $x154 $x259)))
 (let (($x31 (and $x239 $x320)))
 (let (($x194 (and $x31 $x72)))
 (let (($x317 (and $x194 $x278)))
 (let (($x105 (and $x317 $x268)))
 (let (($x50 (and $x105 $x250)))
 (let (($x304 (and $x50 $x49)))
 (let (($x70 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x22 (ite $x70 (_ bv1 32) (_ bv0 32))))
 (let (($x190 (bvuge ?x22 (_ bv1 32))))
 (let (($x227 (and $x190 $x304)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x112 $x227)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x299 (and $x124 $x108)))
 (let (($x57 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x24 (and $x57 $x299)))
 (let (($x48 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x91 (bvadd ?x120 (_ bv3 32))))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x97 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x91)))
 (let (($x167 (or false (or false (and (and true (or $x198 $x97)) (or $x215 $x48))))))
 (let (($x100 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x167)))
 (let (($x12 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x167)))
 (let (($x319 (and $x12 $x24)))
 (let (($x309 (=> $x319 $x87)))
 (not $x309))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x27))))
 (let ((?x182 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x207)))
 (let ((?x138 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x307 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x138)))
 (let ((?x233 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x71 (bvneg ?x233)))
 (let (($x104 (= ?x71 ?x182)))
 (let (($x238 (= $x104 true)))
 (let (($x306 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1527X)))
 (let ((?x13 (input.spec-%var-x-1.1.1 input.ind-%var1527X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1527X)))
 (=> $x183 (= ?x13 ?x37))))))
 ))
 (let (($x176 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1526X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1526X)))
 (= $x183 $x190))))
 ))
 (let (($x175 (and $x176 $x306)))
 (let (($x110 (= $x175 true)))
 (let (($x243 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1521X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x49))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1521X)))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x190 (= ?x37 ?x319))))))))
 ))
 (let (($x302 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X input.dst.llvm-%n))))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x190 $x285))))
 ))
 (let (($x148 (and $x302 $x243)))
 (let (($x294 (= $x148 true)))
 (let (($x85 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1515X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x49))))
 (let ((?x13 (input.spec-%var-x-1.1.1 input.ind-%var1515X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1515X)))
 (=> $x183 (= ?x13 ?x319))))))))
 ))
 (let (($x313 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var1514X) (bvult input.ind-%var1514X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1514X)))
 (= $x183 $x285))))
 ))
 (let (($x305 (and $x313 $x85)))
 (let (($x267 (= $x305 true)))
 (let ((?x317 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x317)))
 (let (($x216 (= ?x117 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let ((?x72 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x72)))
 (let (($x65 (= ?x194 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x65 true)))
 (let (($x282 (= $x45 true)))
 (let ((?x188 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x320 (= (_ bv0 2) ?x188)))
 (let (($x31 (= $x320 true)))
 (let (($x281 (= $x31 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let (($x239 (= $x259 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x154 (= $x145 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x106 (= $x128 true)))
 (let (($x237 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 ?x157)) (bvult ?x120 (bvsub ?x120 ?x157)))))
 (let (($x272 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x200 (ite $x272 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x130)))
 (let ((?x32 ((_ extract 63 32) ?x101)))
 (let (($x254 (= ?x32 ?x200)))
 (let (($x29 (and $x254 $x237)))
 (let (($x251 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x21 (and $x251 $x29)))
 (let (($x244 (= true $x21)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x119 $x244)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let (($x64 (= $x196 true)))
 (let (($x271 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x279 (= $x271 true)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x18 true)))
 (let (($x98 (= $x132 true)))
 (let (($x270 (= $x98 true)))
 (let (($x56 (= $x119 true)))
 (let (($x253 (= $x56 true)))
 (let (($x82 (= $x253 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x93)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x151)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x252 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x89 $x252)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x174 $x46)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x5 $x185)))
 (let (($x134 (not $x210)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x52 $x123)))
 (let (($x184 (and (not $x17) $x134)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x115 $x192)))
 (let (($x94 (not $x68)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x206 $x212)))
 (let (($x118 (and (not $x107) $x94)))
 (let (($x273 (and (and (and (and (and (and $x118 $x184) $x225) $x146) $x229) $x109) $x147)))
 (let (($x274 (and $x273 $x159)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x8 (or false (or false (and (and true (or $x35 $x113)) (or $x161 $x231))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x8)))
 (let (($x6 (and $x226 $x274)))
 (let (($x142 (= $x6 true)))
 (let (($x163 (= $x142 true)))
 (let (($x191 (= $x163 true)))
 (let (($x137 (and $x191 $x82)))
 (let (($x269 (and $x137 $x270)))
 (let (($x165 (and $x269 $x201)))
 (let (($x260 (and $x165 $x64)))
 (let (($x102 (and $x260 $x106)))
 (let (($x26 (and $x102 $x154)))
 (let (($x127 (and $x26 $x239)))
 (let (($x126 (and $x127 $x281)))
 (let (($x278 (and $x126 $x282)))
 (let (($x291 (and $x278 $x277)))
 (let (($x87 (and $x291 $x267)))
 (let (($x295 (and $x87 $x294)))
 (let (($x312 (and $x295 $x110)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x54 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x54 (_ bv1 32))))
 (let (($x283 (and $x178 $x312)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x169 $x283)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x63 (and $x47 $x179)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x81 $x63)))
 (let (($x230 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd ?x120 (_ bv3 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x77 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x12 (or false (or false (and (and true (or $x152 $x77)) (or $x186 $x230))))))
 (let (($x57 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x12)))
 (let (($x144 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x12)))
 (let (($x121 (and $x144 $x141)))
 (let (($x164 (=> $x121 $x238)))
 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x27))))
 (let ((?x182 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x207)))
 (let ((?x138 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x307 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x138)))
 (let ((?x233 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x71 (bvneg ?x233)))
 (let (($x104 (= ?x71 ?x182)))
 (let (($x238 (= $x104 true)))
 (let (($x306 (forall ((input.ind-%var1527X (_ BitVec 32)) )(let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1527X)))
 (let ((?x13 (input.spec-%var-x-1.1.1 input.ind-%var1527X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1527X)))
 (=> $x183 (= ?x13 ?x37))))))
 ))
 (let (($x176 (forall ((input.ind-%var1526X (_ BitVec 32)) )(let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1526X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1526X)))
 (= $x183 $x190))))
 ))
 (let (($x175 (and $x176 $x306)))
 (let (($x110 (= $x175 true)))
 (let (($x243 (forall ((input.ind-%var1521X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1521X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x49))))
 (let ((?x37 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1521X)))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1521X)))
 (=> $x190 (= ?x37 ?x319))))))))
 ))
 (let (($x302 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var1520X) (bvult input.ind-%var1520X input.dst.llvm-%n))))
 (let (($x190 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1520X)))
 (= $x190 $x285))))
 ))
 (let (($x148 (and $x302 $x243)))
 (let (($x294 (= $x148 true)))
 (let (($x85 (forall ((input.ind-%var1515X (_ BitVec 32)) )(let ((?x303 (bvadd (bvmul input.ind-%var1515X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv1 32))) (select input.dst.llvm-mem ?x303))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x303 (_ bv2 32))) ?x49))))
 (let ((?x13 (input.spec-%var-x-1.1.1 input.ind-%var1515X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1515X)))
 (=> $x183 (= ?x13 ?x319))))))))
 ))
 (let (($x313 (forall ((input.ind-%var1514X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var1514X) (bvult input.ind-%var1514X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1514X)))
 (= $x183 $x285))))
 ))
 (let (($x305 (and $x313 $x85)))
 (let (($x267 (= $x305 true)))
 (let ((?x317 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x317)))
 (let (($x216 (= ?x117 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let ((?x72 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x194 (bvneg ?x72)))
 (let (($x65 (= ?x194 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x45 (= $x65 true)))
 (let (($x282 (= $x45 true)))
 (let ((?x188 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x320 (= (_ bv0 2) ?x188)))
 (let (($x31 (= $x320 true)))
 (let (($x281 (= $x31 true)))
 (let (($x38 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x14 (= $x38 true)))
 (let (($x259 (= $x14 true)))
 (let (($x239 (= $x259 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x297 (= $x136 true)))
 (let (($x145 (= $x297 true)))
 (let (($x154 (= $x145 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x280 (= $x43 true)))
 (let (($x128 (= $x280 true)))
 (let (($x106 (= $x128 true)))
 (let (($x237 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 ?x157)) (bvult ?x120 (bvsub ?x120 ?x157)))))
 (let (($x272 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x200 (ite $x272 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x130 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x101 (bvmul (_ bv4 64) ?x130)))
 (let ((?x32 ((_ extract 63 32) ?x101)))
 (let (($x254 (= ?x32 ?x200)))
 (let (($x29 (and $x254 $x237)))
 (let (($x251 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x21 (and $x251 $x29)))
 (let (($x244 (= true $x21)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x119 $x244)))
 (let (($x61 (= $x213 true)))
 (let (($x196 (= $x61 true)))
 (let (($x64 (= $x196 true)))
 (let (($x271 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x279 (= $x271 true)))
 (let (($x139 (= $x279 true)))
 (let (($x201 (= $x139 true)))
 (let (($x18 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x18 true)))
 (let (($x98 (= $x132 true)))
 (let (($x270 (= $x98 true)))
 (let (($x56 (= $x119 true)))
 (let (($x253 (= $x56 true)))
 (let (($x82 (= $x253 true)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x93)))
 (let ((?x151 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x151)))
 (let ((?x255 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x109 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x255)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x252 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x89 $x252)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (and $x174 $x46)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x5 $x185)))
 (let (($x134 (not $x210)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x52 $x123)))
 (let (($x184 (and (not $x17) $x134)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x115 $x192)))
 (let (($x94 (not $x68)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x206 $x212)))
 (let (($x118 (and (not $x107) $x94)))
 (let (($x273 (and (and (and (and (and (and $x118 $x184) $x225) $x146) $x229) $x109) $x147)))
 (let (($x274 (and $x273 $x159)))
 (let (($x231 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x8 (or false (or false (and (and true (or $x35 $x113)) (or $x161 $x231))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x8)))
 (let (($x6 (and $x226 $x274)))
 (let (($x142 (= $x6 true)))
 (let (($x163 (= $x142 true)))
 (let (($x191 (= $x163 true)))
 (let (($x137 (and $x191 $x82)))
 (let (($x269 (and $x137 $x270)))
 (let (($x165 (and $x269 $x201)))
 (let (($x260 (and $x165 $x64)))
 (let (($x102 (and $x260 $x106)))
 (let (($x26 (and $x102 $x154)))
 (let (($x127 (and $x26 $x239)))
 (let (($x126 (and $x127 $x281)))
 (let (($x278 (and $x126 $x282)))
 (let (($x291 (and $x278 $x277)))
 (let (($x87 (and $x291 $x267)))
 (let (($x295 (and $x87 $x294)))
 (let (($x312 (and $x295 $x110)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x54 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x54 (_ bv1 32))))
 (let (($x283 (and $x178 $x312)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x179 (and $x169 $x283)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x63 (and $x47 $x179)))
 (let (($x81 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x141 (and $x81 $x63)))
 (let (($x230 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd ?x120 (_ bv3 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x77 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x12 (or false (or false (and (and true (or $x152 $x77)) (or $x186 $x230))))))
 (let (($x57 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x12)))
 (let (($x144 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x12)))
 (let (($x121 (and $x144 $x141)))
 (let (($x164 (=> $x121 $x238)))
 (not $x164))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x316 (bvule ?x73 (_ bv4294967294 32))))
 (let (($x44 (= $x316 true)))
 (let (($x287 (= $x44 true)))
 (let (($x62 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let ((?x55 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1551X)))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var1551X)))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1551X)))
 (=> $x9 (= ?x289 ?x55))))))
 ))
 (let (($x221 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x92 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1550X)))
 (= $x9 $x92))))
 ))
 (let (($x296 (and $x221 $x62)))
 (let (($x308 (= $x296 true)))
 (let (($x105 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var1545X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x312))))
 (let ((?x55 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1545X)))
 (let (($x92 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1545X)))
 (=> $x92 (= ?x55 ?x138))))))))
 ))
 (let (($x104 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) input.ind-%var1544X) (bvult input.ind-%var1544X input.dst.llvm-%n))))
 (let (($x92 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (= $x92 $x166))))
 ))
 (let (($x28 (and $x104 $x105)))
 (let (($x268 (= $x28 true)))
 (let (($x71 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var1539X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x312))))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var1539X)))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1539X)))
 (=> $x9 (= ?x289 ?x138))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) input.ind-%var1538X) (bvult input.ind-%var1538X input.dst.llvm-%n))))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1538X)))
 (= $x9 $x166))))
 ))
 (let (($x86 (and $x246 $x71)))
 (let (($x116 (= $x86 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x22)))
 (let (($x315 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x315 true)))
 (let (($x285 (= $x153 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x216 (= $x117 true)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let (($x65 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x45 (= $x65 true)))
 (let (($x282 (= $x45 true)))
 (let (($x278 (= $x282 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x14)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x26)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x128 $x102)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x280 $x136)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x237 $x29)))
 (let (($x244 (not $x21)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x275 $x181)))
 (let (($x61 (and (not $x133) $x244)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x32 $x272)))
 (let (($x200 (not $x235)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x137 $x276)))
 (let (($x234 (and (not $x101) $x200)))
 (let (($x31 (and (and (and (and (and (and $x234 $x61) $x64) $x43) $x297) $x154) $x38)))
 (let (($x281 (and $x31 $x259)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x251 (or false (or false (and (and true (or $x270 $x269)) (or $x139 $x201))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x251)))
 (let (($x126 (and $x130 $x281)))
 (let (($x232 (= $x126 true)))
 (let (($x72 (= $x232 true)))
 (let (($x194 (= $x72 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x142 true)))
 (let (($x191 (= $x163 true)))
 (let (($x56 (= $x191 true)))
 (let (($x273 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x93 (= $x273 true)))
 (let (($x159 (= $x93 true)))
 (let (($x274 (= $x159 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x16 (bvsub ?x120 ?x157)))
 (let (($x252 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x16) (bvult ?x120 ?x16))))
 (let (($x204 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x224 (ite $x204 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x256 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x256)))
 (let ((?x225 ((_ extract 63 32) ?x149)))
 (let (($x146 (= ?x225 ?x224)))
 (let (($x46 (and $x146 $x252)))
 (let (($x134 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x229 (and $x134 $x46)))
 (let (($x193 (= true $x229)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (=> $x119 $x193)))
 (let (($x109 (= $x255 true)))
 (let (($x262 (= $x109 true)))
 (let (($x151 (= $x262 true)))
 (let ((?x52 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x123 (= (_ bv0 2) ?x52)))
 (let (($x17 (= $x123 true)))
 (let (($x202 (= $x17 true)))
 (let ((?x212 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x212)))
 (let (($x115 (= ?x107 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x115 true)))
 (let (($x68 (= $x192 true)))
 (let (($x231 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x171 (= $x231 true)))
 (let (($x195 (= $x171 true)))
 (let (($x88 (= $x195 true)))
 (let (($x113 (= $x119 true)))
 (let (($x228 (= $x113 true)))
 (let (($x222 (= $x228 true)))
 (let (($x8 (and $x222 $x88)))
 (let (($x94 (and $x8 $x68)))
 (let (($x5 (and $x94 $x202)))
 (let (($x147 (and $x5 $x151)))
 (let (($x6 (and $x147 $x274)))
 (let (($x253 (and $x6 $x56)))
 (let (($x264 (and $x253 $x194)))
 (let (($x317 (and $x264 $x278)))
 (let (($x291 (and $x317 $x277)))
 (let (($x172 (and $x291 $x285)))
 (let (($x292 (and $x172 $x116)))
 (let (($x99 (and $x292 $x268)))
 (let (($x265 (and $x99 $x308)))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x158 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x158 (_ bv1 32))))
 (let (($x241 (and $x35 $x265)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x208 $x241)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x199 (and $x112 $x150)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x59 (and $x155 $x199)))
 (let (($x167 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd ?x120 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x215 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x144 (or false (or false (and (and true (or $x143 $x215)) (or $x96 $x167))))))
 (let (($x81 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x144)))
 (let (($x218 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x144)))
 (let (($x258 (and $x218 $x59)))
 (let (($x125 (=> $x258 $x287)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x73 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x316 (bvule ?x73 (_ bv4294967294 32))))
 (let (($x44 (= $x316 true)))
 (let (($x287 (= $x44 true)))
 (let (($x62 (forall ((input.ind-%var1551X (_ BitVec 32)) )(let ((?x55 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1551X)))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var1551X)))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1551X)))
 (=> $x9 (= ?x289 ?x55))))))
 ))
 (let (($x221 (forall ((input.ind-%var1550X (_ BitVec 32)) )(let (($x92 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1550X)))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1550X)))
 (= $x9 $x92))))
 ))
 (let (($x296 (and $x221 $x62)))
 (let (($x308 (= $x296 true)))
 (let (($x105 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var1545X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x312))))
 (let ((?x55 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1545X)))
 (let (($x92 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1545X)))
 (=> $x92 (= ?x55 ?x138))))))))
 ))
 (let (($x104 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) input.ind-%var1544X) (bvult input.ind-%var1544X input.dst.llvm-%n))))
 (let (($x92 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1544X)))
 (= $x92 $x166))))
 ))
 (let (($x28 (and $x104 $x105)))
 (let (($x268 (= $x28 true)))
 (let (($x71 (forall ((input.ind-%var1539X (_ BitVec 32)) )(let ((?x111 (bvadd (bvmul input.ind-%var1539X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem ?x111))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x111 (_ bv2 32))) ?x312))))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var1539X)))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1539X)))
 (=> $x9 (= ?x289 ?x138))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1538X (_ BitVec 32)) )(let (($x166 (and (bvule (_ bv0 32) input.ind-%var1538X) (bvult input.ind-%var1538X input.dst.llvm-%n))))
 (let (($x9 (input.spec-%var-x-1.0.1 input.ind-%var1538X)))
 (= $x9 $x166))))
 ))
 (let (($x86 (and $x246 $x71)))
 (let (($x116 (= $x86 true)))
 (let ((?x22 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x22)))
 (let (($x315 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x315 true)))
 (let (($x285 (= $x153 true)))
 (let (($x117 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x216 (= $x117 true)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let (($x65 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x45 (= $x65 true)))
 (let (($x282 (= $x45 true)))
 (let (($x278 (= $x282 true)))
 (let ((?x14 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x14)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x26)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (and $x128 $x102)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x280 $x136)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x237 $x29)))
 (let (($x244 (not $x21)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x275 $x181)))
 (let (($x61 (and (not $x133) $x244)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x32 $x272)))
 (let (($x200 (not $x235)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x137 $x276)))
 (let (($x234 (and (not $x101) $x200)))
 (let (($x31 (and (and (and (and (and (and $x234 $x61) $x64) $x43) $x297) $x154) $x38)))
 (let (($x281 (and $x31 $x259)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x251 (or false (or false (and (and true (or $x270 $x269)) (or $x139 $x201))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x251)))
 (let (($x126 (and $x130 $x281)))
 (let (($x232 (= $x126 true)))
 (let (($x72 (= $x232 true)))
 (let (($x194 (= $x72 true)))
 (let (($x142 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x163 (= $x142 true)))
 (let (($x191 (= $x163 true)))
 (let (($x56 (= $x191 true)))
 (let (($x273 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x93 (= $x273 true)))
 (let (($x159 (= $x93 true)))
 (let (($x274 (= $x159 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x16 (bvsub ?x120 ?x157)))
 (let (($x252 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x16) (bvult ?x120 ?x16))))
 (let (($x204 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x224 (ite $x204 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x256 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x149 (bvmul (_ bv4 64) ?x256)))
 (let ((?x225 ((_ extract 63 32) ?x149)))
 (let (($x146 (= ?x225 ?x224)))
 (let (($x46 (and $x146 $x252)))
 (let (($x134 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x229 (and $x134 $x46)))
 (let (($x193 (= true $x229)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x255 (=> $x119 $x193)))
 (let (($x109 (= $x255 true)))
 (let (($x262 (= $x109 true)))
 (let (($x151 (= $x262 true)))
 (let ((?x52 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x123 (= (_ bv0 2) ?x52)))
 (let (($x17 (= $x123 true)))
 (let (($x202 (= $x17 true)))
 (let ((?x212 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x107 (bvneg ?x212)))
 (let (($x115 (= ?x107 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x115 true)))
 (let (($x68 (= $x192 true)))
 (let (($x231 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x171 (= $x231 true)))
 (let (($x195 (= $x171 true)))
 (let (($x88 (= $x195 true)))
 (let (($x113 (= $x119 true)))
 (let (($x228 (= $x113 true)))
 (let (($x222 (= $x228 true)))
 (let (($x8 (and $x222 $x88)))
 (let (($x94 (and $x8 $x68)))
 (let (($x5 (and $x94 $x202)))
 (let (($x147 (and $x5 $x151)))
 (let (($x6 (and $x147 $x274)))
 (let (($x253 (and $x6 $x56)))
 (let (($x264 (and $x253 $x194)))
 (let (($x317 (and $x264 $x278)))
 (let (($x291 (and $x317 $x277)))
 (let (($x172 (and $x291 $x285)))
 (let (($x292 (and $x172 $x116)))
 (let (($x99 (and $x292 $x268)))
 (let (($x265 (and $x99 $x308)))
 (let (($x156 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x158 (ite $x156 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x158 (_ bv1 32))))
 (let (($x241 (and $x35 $x265)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x208 $x241)))
 (let (($x112 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x199 (and $x112 $x150)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x59 (and $x155 $x199)))
 (let (($x167 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd ?x120 (_ bv3 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x215 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x144 (or false (or false (and (and true (or $x143 $x215)) (or $x96 $x167))))))
 (let (($x81 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x144)))
 (let (($x218 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x144)))
 (let (($x258 (and $x218 $x59)))
 (let (($x125 (=> $x258 $x287)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvsge ?x164 (_ bv0 32))))
 (let (($x40 (= $x240 true)))
 (let (($x20 (= $x40 true)))
 (let (($x36 (forall ((input.ind-%var1574X (_ BitVec 32)) )(let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1574X)))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1574X)))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1574X)))
 (=> $x289 (= ?x138 ?x305))))))
 ))
 (let (($x7 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1573X)))
 (= $x289 $x35))))
 ))
 (let (($x290 (and $x7 $x36)))
 (let (($x78 (= $x290 true)))
 (let (($x13 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul input.ind-%var1568X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x308))))
 (let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1568X)))
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1568X)))
 (=> $x35 (= ?x305 ?x258))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1567X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var1567X) (bvult input.ind-%var1567X input.dst.llvm-%n))))
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1567X)))
 (= $x35 $x179))))
 ))
 (let (($x24 (and $x319 $x13)))
 (let (($x209 (= $x24 true)))
 (let (($x44 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul input.ind-%var1562X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x308))))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1562X)))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1562X)))
 (=> $x289 (= ?x138 ?x258))))))))
 ))
 (let (($x110 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var1561X) (bvult input.ind-%var1561X input.dst.llvm-%n))))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1561X)))
 (= $x289 $x179))))
 ))
 (let (($x287 (and $x110 $x44)))
 (let (($x125 (= $x287 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x172)))
 (let (($x9 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x9 true)))
 (let (($x304 (= $x227 true)))
 (let (($x22 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x183 (= $x22 true)))
 (let (($x315 (= $x183 true)))
 (let (($x153 (= $x315 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x117 true)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x31)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x26)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x297 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x102 $x297)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x106 $x188)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x61 $x239)))
 (let (($x64 (not $x196)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (and $x29 $x21)))
 (let (($x260 (and (not $x244) $x64)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x234 $x275)))
 (let (($x133 (not $x181)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x269 $x271)))
 (let (($x237 (and (not $x200) $x133)))
 (let (($x194 (and (and (and (and (and (and $x237 $x260) $x39) $x128) $x145) $x320) $x38)))
 (let (($x264 (and $x194 $x14)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x32 (or false (or false (and (and true (or $x165 $x122)) (or $x130 $x137))))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x65 (and $x235 $x264)))
 (let (($x45 (= $x65 true)))
 (let (($x282 (= $x45 true)))
 (let (($x278 (= $x282 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x253 true)))
 (let (($x132 (= $x18 true)))
 (let (($x236 (= $x132 true)))
 (let (($x6 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x6 true)))
 (let (($x163 (= $x142 true)))
 (let (($x191 (= $x163 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x252 (bvsub ?x120 ?x157)))
 (let (($x255 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x252) (bvult ?x120 ?x252))))
 (let (($x16 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x16 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x224 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x146 (bvmul (_ bv4 64) ?x224)))
 (let ((?x174 ((_ extract 63 32) ?x146)))
 (let (($x66 (= ?x174 ?x89)))
 (let (($x109 (and $x66 $x255)))
 (let (($x225 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x262 (and $x225 $x109)))
 (let (($x151 (= true $x262)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (=> $x119 $x151)))
 (let (($x273 (= $x147 true)))
 (let (($x93 (= $x273 true)))
 (let (($x159 (= $x93 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x185 (= (_ bv0 2) ?x5)))
 (let (($x210 (= $x185 true)))
 (let (($x134 (= $x210 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x192)))
 (let (($x118 (= ?x68 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x8 true)))
 (let (($x206 (= $x226 true)))
 (let (($x212 (= $x206 true)))
 (let (($x231 (= $x119 true)))
 (let (($x171 (= $x231 true)))
 (let (($x195 (= $x171 true)))
 (let (($x107 (and $x195 $x212)))
 (let (($x17 (and $x107 $x123)))
 (let (($x184 (and $x17 $x134)))
 (let (($x274 (and $x184 $x159)))
 (let (($x56 (and $x274 $x191)))
 (let (($x98 (and $x56 $x236)))
 (let (($x317 (and $x98 $x278)))
 (let (($x291 (and $x317 $x277)))
 (let (($x285 (and $x291 $x153)))
 (let (($x166 (and $x285 $x304)))
 (let (($x50 (and $x166 $x125)))
 (let (($x83 (and $x50 $x209)))
 (let (($x250 (and $x83 $x78)))
 (let (($x228 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x222 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x222 (_ bv1 32))))
 (let (($x207 (and $x161 $x250)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x54 $x207)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x169 $x108)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x124 $x176)))
 (let (($x12 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd ?x120 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x186 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x218 (or false (or false (and (and true (or $x58 $x186)) (or $x100 $x12))))))
 (let (($x155 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x218)))
 (let (($x91 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x218)))
 (let (($x170 (and $x91 $x245)))
 (let (($x257 (=> $x170 $x20)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x240 (bvsge ?x164 (_ bv0 32))))
 (let (($x40 (= $x240 true)))
 (let (($x20 (= $x40 true)))
 (let (($x36 (forall ((input.ind-%var1574X (_ BitVec 32)) )(let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1574X)))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1574X)))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1574X)))
 (=> $x289 (= ?x138 ?x305))))))
 ))
 (let (($x7 (forall ((input.ind-%var1573X (_ BitVec 32)) )(let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1573X)))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1573X)))
 (= $x289 $x35))))
 ))
 (let (($x290 (and $x7 $x36)))
 (let (($x78 (= $x290 true)))
 (let (($x13 (forall ((input.ind-%var1568X (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul input.ind-%var1568X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x308))))
 (let ((?x305 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1568X)))
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1568X)))
 (=> $x35 (= ?x305 ?x258))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1567X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var1567X) (bvult input.ind-%var1567X input.dst.llvm-%n))))
 (let (($x35 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1567X)))
 (= $x35 $x179))))
 ))
 (let (($x24 (and $x319 $x13)))
 (let (($x209 (= $x24 true)))
 (let (($x44 (forall ((input.ind-%var1562X (_ BitVec 32)) )(let ((?x298 (bvadd (bvmul input.ind-%var1562X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv1 32))) (select input.dst.llvm-mem ?x298))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x298 (_ bv2 32))) ?x308))))
 (let ((?x138 (input.spec-%var-x-1.1.1 input.ind-%var1562X)))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1562X)))
 (=> $x289 (= ?x138 ?x258))))))))
 ))
 (let (($x110 (forall ((input.ind-%var1561X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var1561X) (bvult input.ind-%var1561X input.dst.llvm-%n))))
 (let (($x289 (input.spec-%var-x-1.0.1 input.ind-%var1561X)))
 (= $x289 $x179))))
 ))
 (let (($x287 (and $x110 $x44)))
 (let (($x125 (= $x287 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x178 (bvneg ?x172)))
 (let (($x9 (= ?x178 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (= $x9 true)))
 (let (($x304 (= $x227 true)))
 (let (($x22 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x183 (= $x22 true)))
 (let (($x315 (= $x183 true)))
 (let (($x153 (= $x315 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x117 true)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x31)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x26)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x297 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x102 $x297)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x106 $x188)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x61 $x239)))
 (let (($x64 (not $x196)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x244 (and $x29 $x21)))
 (let (($x260 (and (not $x244) $x64)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x234 $x275)))
 (let (($x133 (not $x181)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x269 $x271)))
 (let (($x237 (and (not $x200) $x133)))
 (let (($x194 (and (and (and (and (and (and $x237 $x260) $x39) $x128) $x145) $x320) $x38)))
 (let (($x264 (and $x194 $x14)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x32 (or false (or false (and (and true (or $x165 $x122)) (or $x130 $x137))))))
 (let (($x235 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x32)))
 (let (($x65 (and $x235 $x264)))
 (let (($x45 (= $x65 true)))
 (let (($x282 (= $x45 true)))
 (let (($x278 (= $x282 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (= $x253 true)))
 (let (($x132 (= $x18 true)))
 (let (($x236 (= $x132 true)))
 (let (($x6 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (= $x6 true)))
 (let (($x163 (= $x142 true)))
 (let (($x191 (= $x163 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x252 (bvsub ?x120 ?x157)))
 (let (($x255 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x252) (bvult ?x120 ?x252))))
 (let (($x16 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x89 (ite $x16 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x224 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x146 (bvmul (_ bv4 64) ?x224)))
 (let ((?x174 ((_ extract 63 32) ?x146)))
 (let (($x66 (= ?x174 ?x89)))
 (let (($x109 (and $x66 $x255)))
 (let (($x225 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x262 (and $x225 $x109)))
 (let (($x151 (= true $x262)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x147 (=> $x119 $x151)))
 (let (($x273 (= $x147 true)))
 (let (($x93 (= $x273 true)))
 (let (($x159 (= $x93 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x185 (= (_ bv0 2) ?x5)))
 (let (($x210 (= $x185 true)))
 (let (($x134 (= $x210 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x192)))
 (let (($x118 (= ?x68 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x226 (= $x8 true)))
 (let (($x206 (= $x226 true)))
 (let (($x212 (= $x206 true)))
 (let (($x231 (= $x119 true)))
 (let (($x171 (= $x231 true)))
 (let (($x195 (= $x171 true)))
 (let (($x107 (and $x195 $x212)))
 (let (($x17 (and $x107 $x123)))
 (let (($x184 (and $x17 $x134)))
 (let (($x274 (and $x184 $x159)))
 (let (($x56 (and $x274 $x191)))
 (let (($x98 (and $x56 $x236)))
 (let (($x317 (and $x98 $x278)))
 (let (($x291 (and $x317 $x277)))
 (let (($x285 (and $x291 $x153)))
 (let (($x166 (and $x285 $x304)))
 (let (($x50 (and $x166 $x125)))
 (let (($x83 (and $x50 $x209)))
 (let (($x250 (and $x83 $x78)))
 (let (($x228 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x222 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x161 (bvuge ?x222 (_ bv1 32))))
 (let (($x207 (and $x161 $x250)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x54 $x207)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x176 (and $x169 $x108)))
 (let (($x124 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x245 (and $x124 $x176)))
 (let (($x12 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd ?x120 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x186 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x218 (or false (or false (and (and true (or $x58 $x186)) (or $x100 $x12))))))
 (let (($x155 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x218)))
 (let (($x91 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x218)))
 (let (($x170 (and $x91 $x245)))
 (let (($x257 (=> $x170 $x20)))
 (not $x257))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x220 (bvule ?x303 (_ bv4294967294 32))))
 (let (($x162 (= $x220 true)))
 (let (($x60 (= $x162 true)))
 (let (($x82 (forall ((input.ind-%var1597X (_ BitVec 32)) )(let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1597X)))
 (let ((?x258 (input.spec-%var-x-1.1.1 input.ind-%var1597X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1597X)))
 (=> $x138 (= ?x258 ?x71))))))
 ))
 (let (($x15 (forall ((input.ind-%var1596X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1596X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1596X)))
 (= $x138 $x161))))
 ))
 (let (($x223 (and $x15 $x82)))
 (let (($x99 (= $x223 true)))
 (let (($x246 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var1591X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x78))))
 (let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1591X)))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1591X)))
 (=> $x161 (= ?x71 ?x170))))))))
 ))
 (let (($x63 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1590X) (bvult input.ind-%var1590X input.dst.llvm-%n))))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (= $x161 $x241))))
 ))
 (let (($x141 (and $x63 $x246)))
 (let (($x294 (= $x141 true)))
 (let (($x40 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var1585X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x78))))
 (let ((?x258 (input.spec-%var-x-1.1.1 input.ind-%var1585X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1585X)))
 (=> $x138 (= ?x258 ?x170))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1584X) (bvult input.ind-%var1584X input.dst.llvm-%n))))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1584X)))
 (= $x138 $x241))))
 ))
 (let (($x20 (and $x296 $x40)))
 (let (($x257 (= $x20 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x166)))
 (let (($x289 (= ?x158 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x283 (= $x289 true)))
 (let (($x37 (= $x283 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x172 true)))
 (let (($x9 (= $x178 true)))
 (let (($x227 (= $x9 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x183 (= $x22 true)))
 (let (($x315 (= $x183 true)))
 (let (($x153 (= $x315 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x31 (bvsub ?x120 ?x157)))
 (let (($x45 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x31) (bvult ?x120 ?x31))))
 (let (($x26 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x38 (ite $x26 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x154 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x320 (bvmul (_ bv4 64) ?x154)))
 (let ((?x72 ((_ extract 63 32) ?x320)))
 (let (($x194 (= ?x72 ?x38)))
 (let (($x282 (and $x194 $x45)))
 (let (($x145 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x278 (and $x145 $x282)))
 (let (($x317 (= true $x278)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (=> $x119 $x317)))
 (let (($x216 (= $x117 true)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let (($x128 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x128 true)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let (($x43 (= $x119 true)))
 (let (($x39 (= $x43 true)))
 (let (($x281 (= $x39 true)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x275)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x213)))
 (let ((?x271 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x271)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (and $x101 $x32)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x276 $x235)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (and $x279 $x139)))
 (let (($x201 (not $x272)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x132 $x236)))
 (let (($x122 (and (not $x98) $x201)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x142 $x163)))
 (let (($x56 (not $x191)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x174 $x16)))
 (let (($x18 (and (not $x6) $x56)))
 (let (($x127 (and (and (and (and (and (and $x18 $x122) $x251) $x137) $x269) $x200) $x234)))
 (let (($x61 (and $x127 $x181)))
 (let (($x262 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x93 (or false (or false (and (and true (or $x252 $x229)) (or $x109 $x262))))))
 (let (($x274 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x239 (and $x274 $x61)))
 (let (($x196 (= $x239 true)))
 (let (($x64 (= $x196 true)))
 (let (($x260 (= $x64 true)))
 (let (($x256 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x256 true)))
 (let (($x225 (= $x149 true)))
 (let (($x204 (= $x225 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x185 (= (_ bv0 2) ?x5)))
 (let (($x210 (= $x185 true)))
 (let (($x134 (= $x210 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x192)))
 (let (($x118 (= ?x68 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x226 true)))
 (let (($x212 (= $x206 true)))
 (let (($x107 (= $x212 true)))
 (let (($x17 (and $x107 $x123)))
 (let (($x184 (and $x17 $x134)))
 (let (($x224 (and $x184 $x204)))
 (let (($x259 (and $x224 $x260)))
 (let (($x280 (and $x259 $x281)))
 (let (($x136 (and $x280 $x102)))
 (let (($x291 (and $x136 $x277)))
 (let (($x285 (and $x291 $x153)))
 (let (($x304 (and $x285 $x227)))
 (let (($x179 (and $x304 $x37)))
 (let (($x70 (and $x179 $x257)))
 (let (($x295 (and $x70 $x294)))
 (let (($x80 (and $x295 $x99)))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x195 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x195 (_ bv1 32))))
 (let (($x23 (and $x88 $x80)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x156 $x23)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x208 $x312)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x47 $x309)))
 (let (($x144 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x120 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x96 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x91 (or false (or false (and (and true (or $x48 $x96)) (or $x57 $x144))))))
 (let (($x124 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x91)))
 (let (($x97 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x91)))
 (let (($x293 (and $x97 $x310)))
 (let (($x103 (=> $x293 $x60)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x303 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x220 (bvule ?x303 (_ bv4294967294 32))))
 (let (($x162 (= $x220 true)))
 (let (($x60 (= $x162 true)))
 (let (($x82 (forall ((input.ind-%var1597X (_ BitVec 32)) )(let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1597X)))
 (let ((?x258 (input.spec-%var-x-1.1.1 input.ind-%var1597X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1597X)))
 (=> $x138 (= ?x258 ?x71))))))
 ))
 (let (($x15 (forall ((input.ind-%var1596X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1596X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1596X)))
 (= $x138 $x161))))
 ))
 (let (($x223 (and $x15 $x82)))
 (let (($x99 (= $x223 true)))
 (let (($x246 (forall ((input.ind-%var1591X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var1591X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x78))))
 (let ((?x71 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1591X)))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1591X)))
 (=> $x161 (= ?x71 ?x170))))))))
 ))
 (let (($x63 (forall ((input.ind-%var1590X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1590X) (bvult input.ind-%var1590X input.dst.llvm-%n))))
 (let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1590X)))
 (= $x161 $x241))))
 ))
 (let (($x141 (and $x63 $x246)))
 (let (($x294 (= $x141 true)))
 (let (($x40 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var1585X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x78))))
 (let ((?x258 (input.spec-%var-x-1.1.1 input.ind-%var1585X)))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1585X)))
 (=> $x138 (= ?x258 ?x170))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x241 (and (bvule (_ bv0 32) input.ind-%var1584X) (bvult input.ind-%var1584X input.dst.llvm-%n))))
 (let (($x138 (input.spec-%var-x-1.0.1 input.ind-%var1584X)))
 (= $x138 $x241))))
 ))
 (let (($x20 (and $x296 $x40)))
 (let (($x257 (= $x20 true)))
 (let ((?x166 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x158 (bvneg ?x166)))
 (let (($x289 (= ?x158 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x283 (= $x289 true)))
 (let (($x37 (= $x283 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x172 true)))
 (let (($x9 (= $x178 true)))
 (let (($x227 (= $x9 true)))
 (let (($x22 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x183 (= $x22 true)))
 (let (($x315 (= $x183 true)))
 (let (($x153 (= $x315 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x31 (bvsub ?x120 ?x157)))
 (let (($x45 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x31) (bvult ?x120 ?x31))))
 (let (($x26 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x38 (ite $x26 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x154 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x320 (bvmul (_ bv4 64) ?x154)))
 (let ((?x72 ((_ extract 63 32) ?x320)))
 (let (($x194 (= ?x72 ?x38)))
 (let (($x282 (and $x194 $x45)))
 (let (($x145 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x278 (and $x145 $x282)))
 (let (($x317 (= true $x278)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x117 (=> $x119 $x317)))
 (let (($x216 (= $x117 true)))
 (let (($x42 (= $x216 true)))
 (let (($x277 (= $x42 true)))
 (let (($x128 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x128 true)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let (($x43 (= $x119 true)))
 (let (($x39 (= $x43 true)))
 (let (($x281 (= $x39 true)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x181 (= (_ bv0 32) ?x275)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x213)))
 (let ((?x271 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x271)))
 (let ((?x254 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x254)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (and $x101 $x32)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x276 $x235)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (and $x279 $x139)))
 (let (($x201 (not $x272)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x132 $x236)))
 (let (($x122 (and (not $x98) $x201)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x142 $x163)))
 (let (($x56 (not $x191)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x174 $x16)))
 (let (($x18 (and (not $x6) $x56)))
 (let (($x127 (and (and (and (and (and (and $x18 $x122) $x251) $x137) $x269) $x200) $x234)))
 (let (($x61 (and $x127 $x181)))
 (let (($x262 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x46 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x46)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x252 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x46)))
 (let (($x93 (or false (or false (and (and true (or $x252 $x229)) (or $x109 $x262))))))
 (let (($x274 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x239 (and $x274 $x61)))
 (let (($x196 (= $x239 true)))
 (let (($x64 (= $x196 true)))
 (let (($x260 (= $x64 true)))
 (let (($x256 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x256 true)))
 (let (($x225 (= $x149 true)))
 (let (($x204 (= $x225 true)))
 (let ((?x5 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x185 (= (_ bv0 2) ?x5)))
 (let (($x210 (= $x185 true)))
 (let (($x134 (= $x210 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x192)))
 (let (($x118 (= ?x68 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x226 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x226 true)))
 (let (($x212 (= $x206 true)))
 (let (($x107 (= $x212 true)))
 (let (($x17 (and $x107 $x123)))
 (let (($x184 (and $x17 $x134)))
 (let (($x224 (and $x184 $x204)))
 (let (($x259 (and $x224 $x260)))
 (let (($x280 (and $x259 $x281)))
 (let (($x136 (and $x280 $x102)))
 (let (($x291 (and $x136 $x277)))
 (let (($x285 (and $x291 $x153)))
 (let (($x304 (and $x285 $x227)))
 (let (($x179 (and $x304 $x37)))
 (let (($x70 (and $x179 $x257)))
 (let (($x295 (and $x70 $x294)))
 (let (($x80 (and $x295 $x99)))
 (let (($x171 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x195 (ite $x171 (_ bv1 32) (_ bv0 32))))
 (let (($x88 (bvuge ?x195 (_ bv1 32))))
 (let (($x23 (and $x88 $x80)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x312 (and $x156 $x23)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x208 $x312)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x310 (and $x47 $x309)))
 (let (($x144 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd ?x120 (_ bv3 32))))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x96 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x91 (or false (or false (and (and true (or $x48 $x96)) (or $x57 $x144))))))
 (let (($x124 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x91)))
 (let (($x97 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x91)))
 (let (($x293 (and $x97 $x310)))
 (let (($x103 (=> $x293 $x60)))
 (not $x103))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (bvsge ?x33 (_ bv0 32))))
 (let (($x84 (= $x168 true)))
 (let (($x243 (= $x84 true)))
 (let (($x270 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1620X)))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1620X)))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1620X)))
 (=> $x258 (= ?x170 ?x44))))))
 ))
 (let (($x55 (forall ((input.ind-%var1619X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1619X)))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1619X)))
 (= $x258 $x88))))
 ))
 (let (($x85 (and $x55 $x270)))
 (let (($x83 (= $x85 true)))
 (let (($x110 (forall ((input.ind-%var1614X (_ BitVec 32)) )(let ((?x69 (bvadd (bvmul input.ind-%var1614X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x99))))
 (let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1614X)))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1614X)))
 (=> $x88 (= ?x44 ?x293))))))))
 ))
 (let (($x150 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1613X) (bvult input.ind-%var1613X input.dst.llvm-%n))))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1613X)))
 (= $x88 $x207))))
 ))
 (let (($x199 (and $x150 $x110)))
 (let (($x28 (= $x199 true)))
 (let (($x162 (forall ((input.ind-%var1608X (_ BitVec 32)) )(let ((?x69 (bvadd (bvmul input.ind-%var1608X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x99))))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1608X)))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1608X)))
 (=> $x258 (= ?x170 ?x293))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1607X) (bvult input.ind-%var1607X input.dst.llvm-%n))))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1607X)))
 (= $x258 $x207))))
 ))
 (let (($x60 (and $x290 $x162)))
 (let (($x103 (= $x60 true)))
 (let ((?x179 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x179)))
 (let (($x138 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x138 true)))
 (let (($x104 (= $x265 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x166 true)))
 (let (($x289 (= $x158 true)))
 (let (($x283 (= $x289 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x172 true)))
 (let (($x9 (= $x178 true)))
 (let (($x227 (= $x9 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x282 (bvsub ?x120 ?x157)))
 (let (($x216 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x282) (bvult ?x120 ?x282))))
 (let (($x264 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x65 (ite $x264 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x194 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvmul (_ bv4 64) ?x194)))
 (let ((?x31 ((_ extract 63 32) ?x14)))
 (let (($x45 (= ?x31 ?x65)))
 (let (($x42 (and $x45 $x216)))
 (let (($x26 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x277 (and $x26 $x42)))
 (let (($x291 (= true $x277)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x119 $x291)))
 (let (($x183 (= $x22 true)))
 (let (($x315 (= $x183 true)))
 (let (($x153 (= $x315 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x297 true)))
 (let (($x145 (= $x188 true)))
 (let (($x232 (= $x145 true)))
 (let (($x126 (= $x119 true)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x275 (= (_ bv0 32) ?x127)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x213)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x244 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x235)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x32 $x269)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x254 $x21)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x122 $x133)))
 (let (($x251 (not $x261)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x139 $x272)))
 (let (($x130 (and (not $x201) $x251)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x18 $x132)))
 (let (($x98 (not $x236)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x229 $x193)))
 (let (($x279 (and (not $x56) $x98)))
 (let (($x260 (and (and (and (and (and (and $x279 $x130) $x29) $x101) $x271) $x244) $x234)))
 (let (($x259 (and $x260 $x275)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x142 (or false (or false (and (and true (or $x151 $x147)) (or $x274 $x174))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x142)))
 (let (($x43 (and $x191 $x259)))
 (let (($x39 (= $x43 true)))
 (let (($x281 (= $x39 true)))
 (let (($x280 (= $x281 true)))
 (let (($x224 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x224 true)))
 (let (($x66 (= $x89 true)))
 (let (($x159 (= $x66 true)))
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x256 (= (_ bv0 2) ?x184)))
 (let (($x149 (= $x256 true)))
 (let (($x225 (= $x149 true)))
 (let ((?x52 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x52)))
 (let (($x202 (= ?x123 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x202 true)))
 (let (($x185 (= $x5 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x115 (= $x30 true)))
 (let (($x192 (= $x115 true)))
 (let (($x68 (= $x192 true)))
 (let (($x210 (and $x68 $x185)))
 (let (($x204 (and $x210 $x225)))
 (let (($x46 (and $x204 $x159)))
 (let (($x128 (and $x46 $x280)))
 (let (($x136 (and $x128 $x102)))
 (let (($x154 (and $x136 $x232)))
 (let (($x285 (and $x154 $x153)))
 (let (($x304 (and $x285 $x227)))
 (let (($x37 (and $x304 $x283)))
 (let (($x241 (and $x37 $x104)))
 (let (($x160 (and $x241 $x103)))
 (let (($x268 (and $x160 $x28)))
 (let (($x87 (and $x268 $x83)))
 (let (($x226 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x206 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x206 (_ bv1 32))))
 (let (($x307 (and $x212 $x87)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x308 (and $x228 $x307)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x67 (and $x54 $x308)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x112 $x67)))
 (let (($x218 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd ?x120 (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x100 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x97 (or false (or false (and (and true (or $x230 $x100)) (or $x81 $x218))))))
 (let (($x47 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x97)))
 (let (($x77 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x97)))
 (let (($x95 (and $x77 $x203)))
 (let (($x131 (=> $x95 $x243)))
 (not $x131))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x33 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x168 (bvsge ?x33 (_ bv0 32))))
 (let (($x84 (= $x168 true)))
 (let (($x243 (= $x84 true)))
 (let (($x270 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1620X)))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1620X)))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1620X)))
 (=> $x258 (= ?x170 ?x44))))))
 ))
 (let (($x55 (forall ((input.ind-%var1619X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1619X)))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1619X)))
 (= $x258 $x88))))
 ))
 (let (($x85 (and $x55 $x270)))
 (let (($x83 (= $x85 true)))
 (let (($x110 (forall ((input.ind-%var1614X (_ BitVec 32)) )(let ((?x69 (bvadd (bvmul input.ind-%var1614X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x99))))
 (let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1614X)))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1614X)))
 (=> $x88 (= ?x44 ?x293))))))))
 ))
 (let (($x150 (forall ((input.ind-%var1613X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1613X) (bvult input.ind-%var1613X input.dst.llvm-%n))))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1613X)))
 (= $x88 $x207))))
 ))
 (let (($x199 (and $x150 $x110)))
 (let (($x28 (= $x199 true)))
 (let (($x162 (forall ((input.ind-%var1608X (_ BitVec 32)) )(let ((?x69 (bvadd (bvmul input.ind-%var1608X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x99))))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1608X)))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1608X)))
 (=> $x258 (= ?x170 ?x293))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1607X (_ BitVec 32)) )(let (($x207 (and (bvule (_ bv0 32) input.ind-%var1607X) (bvult input.ind-%var1607X input.dst.llvm-%n))))
 (let (($x258 (input.spec-%var-x-1.0.1 input.ind-%var1607X)))
 (= $x258 $x207))))
 ))
 (let (($x60 (and $x290 $x162)))
 (let (($x103 (= $x60 true)))
 (let ((?x179 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x222 (bvneg ?x179)))
 (let (($x138 (= ?x222 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x138 true)))
 (let (($x104 (= $x265 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x158 (= $x166 true)))
 (let (($x289 (= $x158 true)))
 (let (($x283 (= $x289 true)))
 (let (($x172 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x178 (= $x172 true)))
 (let (($x9 (= $x178 true)))
 (let (($x227 (= $x9 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x282 (bvsub ?x120 ?x157)))
 (let (($x216 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x282) (bvult ?x120 ?x282))))
 (let (($x264 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x65 (ite $x264 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x194 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x14 (bvmul (_ bv4 64) ?x194)))
 (let ((?x31 ((_ extract 63 32) ?x14)))
 (let (($x45 (= ?x31 ?x65)))
 (let (($x42 (and $x45 $x216)))
 (let (($x26 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x277 (and $x26 $x42)))
 (let (($x291 (= true $x277)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x22 (=> $x119 $x291)))
 (let (($x183 (= $x22 true)))
 (let (($x315 (= $x183 true)))
 (let (($x153 (= $x315 true)))
 (let (($x297 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x188 (= $x297 true)))
 (let (($x145 (= $x188 true)))
 (let (($x232 (= $x145 true)))
 (let (($x126 (= $x119 true)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x275 (= (_ bv0 32) ?x127)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x213)))
 (let ((?x200 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x244 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x200)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x235)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x32 $x269)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x254 $x21)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x122 $x133)))
 (let (($x251 (not $x261)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x139 $x272)))
 (let (($x130 (and (not $x201) $x251)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x18 $x132)))
 (let (($x98 (not $x236)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x229 $x193)))
 (let (($x279 (and (not $x56) $x98)))
 (let (($x260 (and (and (and (and (and (and $x279 $x130) $x29) $x101) $x271) $x244) $x234)))
 (let (($x259 (and $x260 $x275)))
 (let (($x174 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x262 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x147 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x262)))
 (let (($x142 (or false (or false (and (and true (or $x151 $x147)) (or $x274 $x174))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x142)))
 (let (($x43 (and $x191 $x259)))
 (let (($x39 (= $x43 true)))
 (let (($x281 (= $x39 true)))
 (let (($x280 (= $x281 true)))
 (let (($x224 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x89 (= $x224 true)))
 (let (($x66 (= $x89 true)))
 (let (($x159 (= $x66 true)))
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x256 (= (_ bv0 2) ?x184)))
 (let (($x149 (= $x256 true)))
 (let (($x225 (= $x149 true)))
 (let ((?x52 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x123 (bvneg ?x52)))
 (let (($x202 (= ?x123 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x202 true)))
 (let (($x185 (= $x5 true)))
 (let (($x30 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x115 (= $x30 true)))
 (let (($x192 (= $x115 true)))
 (let (($x68 (= $x192 true)))
 (let (($x210 (and $x68 $x185)))
 (let (($x204 (and $x210 $x225)))
 (let (($x46 (and $x204 $x159)))
 (let (($x128 (and $x46 $x280)))
 (let (($x136 (and $x128 $x102)))
 (let (($x154 (and $x136 $x232)))
 (let (($x285 (and $x154 $x153)))
 (let (($x304 (and $x285 $x227)))
 (let (($x37 (and $x304 $x283)))
 (let (($x241 (and $x37 $x104)))
 (let (($x160 (and $x241 $x103)))
 (let (($x268 (and $x160 $x28)))
 (let (($x87 (and $x268 $x83)))
 (let (($x226 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x206 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x206 (_ bv1 32))))
 (let (($x307 (and $x212 $x87)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x308 (and $x228 $x307)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x67 (and $x54 $x308)))
 (let (($x112 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x203 (and $x112 $x67)))
 (let (($x218 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x96 (bvadd ?x120 (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x96)))
 (let (($x100 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x96)))
 (let (($x97 (or false (or false (and (and true (or $x230 $x100)) (or $x81 $x218))))))
 (let (($x47 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x97)))
 (let (($x77 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x97)))
 (let (($x95 (and $x77 $x203)))
 (let (($x131 (=> $x95 $x243)))
 (not $x131))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (bvule ?x221 input.dst.llvm-%n)))
 (let (($x238 (= $x113 true)))
 (let (($x180 (= $x238 true)))
 (let (($x146 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let ((?x40 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1643X)))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var1643X)))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1643X)))
 (=> $x170 (= ?x293 ?x40))))))
 ))
 (let (($x305 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1642X)))
 (= $x170 $x212))))
 ))
 (let (($x233 (and $x305 $x146)))
 (let (($x295 (= $x233 true)))
 (let (($x296 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1637X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x83))))
 (let ((?x40 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1637X)))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1637X)))
 (=> $x212 (= ?x40 ?x95))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let (($x23 (and (bvule (_ bv0 32) input.ind-%var1636X) (bvult input.ind-%var1636X input.dst.llvm-%n))))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (= $x212 $x23))))
 ))
 (let (($x176 (and $x108 $x296)))
 (let (($x24 (= $x176 true)))
 (let (($x84 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1631X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x83))))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var1631X)))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1631X)))
 (=> $x170 (= ?x293 ?x95))))))))
 ))
 (let (($x223 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x23 (and (bvule (_ bv0 32) input.ind-%var1630X) (bvult input.ind-%var1630X input.dst.llvm-%n))))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1630X)))
 (= $x170 $x23))))
 ))
 (let (($x243 (and $x223 $x84)))
 (let (($x131 (= $x243 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x241)))
 (let (($x258 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x258 true)))
 (let (($x319 (= $x250 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (= $x179 true)))
 (let (($x138 (= $x222 true)))
 (let (($x265 (= $x138 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x158 (= $x166 true)))
 (let (($x289 (= $x158 true)))
 (let (($x283 (= $x289 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x42 (bvsub ?x120 ?x157)))
 (let (($x183 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x42) (bvult ?x120 ?x42))))
 (let (($x317 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x117 (ite $x317 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvmul (_ bv4 64) ?x45)))
 (let ((?x282 ((_ extract 63 32) ?x278)))
 (let (($x216 (= ?x282 ?x117)))
 (let (($x315 (and $x216 $x183)))
 (let (($x264 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x153 (and $x264 $x315)))
 (let (($x285 (= true $x153)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (=> $x119 $x285)))
 (let (($x178 (= $x172 true)))
 (let (($x9 (= $x178 true)))
 (let (($x227 (= $x9 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x320 true)))
 (let (($x26 (= $x72 true)))
 (let (($x38 (= $x26 true)))
 (let (($x188 (= $x119 true)))
 (let (($x145 (= $x188 true)))
 (let (($x232 (= $x145 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x260)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x213)))
 (let ((?x244 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (and $x269 $x271)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x235 $x196)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x130 $x181)))
 (let (($x29 (not $x137)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x251 (and $x133 $x261)))
 (let (($x276 (and (not $x251) $x29)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x279 $x139)))
 (let (($x201 (not $x272)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x147 $x273)))
 (let (($x122 (and (not $x98) $x201)))
 (let (($x280 (and (and (and (and (and (and $x122 $x276) $x239) $x32) $x200) $x64) $x234)))
 (let (($x128 (and $x280 $x127)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x18 (or false (or false (and (and true (or $x16 $x6)) (or $x191 $x229))))))
 (let (($x236 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x126 (and $x236 $x128)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let (($x136 (= $x102 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x46 true)))
 (let (($x109 (= $x255 true)))
 (let (($x163 (= $x109 true)))
 (let ((?x204 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x224 (= (_ bv0 2) ?x204)))
 (let (($x89 (= $x224 true)))
 (let (($x66 (= $x89 true)))
 (let ((?x5 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x5)))
 (let (($x134 (= ?x185 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x184 (= $x134 true)))
 (let (($x256 (= $x184 true)))
 (let (($x94 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x118 (= $x94 true)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x149 (and $x123 $x256)))
 (let (($x159 (and $x149 $x66)))
 (let (($x262 (and $x159 $x163)))
 (let (($x297 (and $x262 $x136)))
 (let (($x154 (and $x297 $x232)))
 (let (($x194 (and $x154 $x38)))
 (let (($x304 (and $x194 $x227)))
 (let (($x37 (and $x304 $x283)))
 (let (($x104 (and $x37 $x265)))
 (let (($x207 (and $x104 $x319)))
 (let (($x51 (and $x207 $x131)))
 (let (($x209 (and $x51 $x24)))
 (let (($x116 (and $x209 $x295)))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x115 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x115 (_ bv1 32))))
 (let (($x73 (and $x192 $x116)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x171 $x73)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x190 (and $x156 $x78)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x169 $x190)))
 (let (($x91 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd ?x120 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x57 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x77 (or false (or false (and (and true (or $x167 $x57)) (or $x155 $x91))))))
 (let (($x112 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x215 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x300 (and $x215 $x11)))
 (let (($x302 (=> $x300 $x180)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x221 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x113 (bvule ?x221 input.dst.llvm-%n)))
 (let (($x238 (= $x113 true)))
 (let (($x180 (= $x238 true)))
 (let (($x146 (forall ((input.ind-%var1643X (_ BitVec 32)) )(let ((?x40 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1643X)))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var1643X)))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1643X)))
 (=> $x170 (= ?x293 ?x40))))))
 ))
 (let (($x305 (forall ((input.ind-%var1642X (_ BitVec 32)) )(let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1642X)))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1642X)))
 (= $x170 $x212))))
 ))
 (let (($x233 (and $x305 $x146)))
 (let (($x295 (= $x233 true)))
 (let (($x296 (forall ((input.ind-%var1637X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1637X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x83))))
 (let ((?x40 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1637X)))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1637X)))
 (=> $x212 (= ?x40 ?x95))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1636X (_ BitVec 32)) )(let (($x23 (and (bvule (_ bv0 32) input.ind-%var1636X) (bvult input.ind-%var1636X input.dst.llvm-%n))))
 (let (($x212 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1636X)))
 (= $x212 $x23))))
 ))
 (let (($x176 (and $x108 $x296)))
 (let (($x24 (= $x176 true)))
 (let (($x84 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul input.ind-%var1631X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x95 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x83))))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var1631X)))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1631X)))
 (=> $x170 (= ?x293 ?x95))))))))
 ))
 (let (($x223 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x23 (and (bvule (_ bv0 32) input.ind-%var1630X) (bvult input.ind-%var1630X input.dst.llvm-%n))))
 (let (($x170 (input.spec-%var-x-1.0.1 input.ind-%var1630X)))
 (= $x170 $x23))))
 ))
 (let (($x243 (and $x223 $x84)))
 (let (($x131 (= $x243 true)))
 (let ((?x241 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x195 (bvneg ?x241)))
 (let (($x258 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x258 true)))
 (let (($x319 (= $x250 true)))
 (let (($x179 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x222 (= $x179 true)))
 (let (($x138 (= $x222 true)))
 (let (($x265 (= $x138 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x158 (= $x166 true)))
 (let (($x289 (= $x158 true)))
 (let (($x283 (= $x289 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x42 (bvsub ?x120 ?x157)))
 (let (($x183 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x42) (bvult ?x120 ?x42))))
 (let (($x317 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x117 (ite $x317 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvmul (_ bv4 64) ?x45)))
 (let ((?x282 ((_ extract 63 32) ?x278)))
 (let (($x216 (= ?x282 ?x117)))
 (let (($x315 (and $x216 $x183)))
 (let (($x264 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x153 (and $x264 $x315)))
 (let (($x285 (= true $x153)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x172 (=> $x119 $x285)))
 (let (($x178 (= $x172 true)))
 (let (($x9 (= $x178 true)))
 (let (($x227 (= $x9 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x320 true)))
 (let (($x26 (= $x72 true)))
 (let (($x38 (= $x26 true)))
 (let (($x188 (= $x119 true)))
 (let (($x145 (= $x188 true)))
 (let (($x232 (= $x145 true)))
 (let ((?x260 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x260)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x234 (= (_ bv0 32) ?x213)))
 (let ((?x244 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x64 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (and $x269 $x271)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x235 $x196)))
 (let (($x32 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x130 $x181)))
 (let (($x29 (not $x137)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x251 (and $x133 $x261)))
 (let (($x276 (and (not $x251) $x29)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x279 $x139)))
 (let (($x201 (not $x272)))
 (let (($x273 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x147 $x273)))
 (let (($x122 (and (not $x98) $x201)))
 (let (($x280 (and (and (and (and (and (and $x122 $x276) $x239) $x32) $x200) $x64) $x234)))
 (let (($x128 (and $x280 $x127)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x18 (or false (or false (and (and true (or $x16 $x6)) (or $x191 $x229))))))
 (let (($x236 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x126 (and $x236 $x128)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let (($x136 (= $x102 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x255 (= $x46 true)))
 (let (($x109 (= $x255 true)))
 (let (($x163 (= $x109 true)))
 (let ((?x204 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x224 (= (_ bv0 2) ?x204)))
 (let (($x89 (= $x224 true)))
 (let (($x66 (= $x89 true)))
 (let ((?x5 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x5)))
 (let (($x134 (= ?x185 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x184 (= $x134 true)))
 (let (($x256 (= $x184 true)))
 (let (($x94 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x118 (= $x94 true)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x149 (and $x123 $x256)))
 (let (($x159 (and $x149 $x66)))
 (let (($x262 (and $x159 $x163)))
 (let (($x297 (and $x262 $x136)))
 (let (($x154 (and $x297 $x232)))
 (let (($x194 (and $x154 $x38)))
 (let (($x304 (and $x194 $x227)))
 (let (($x37 (and $x304 $x283)))
 (let (($x104 (and $x37 $x265)))
 (let (($x207 (and $x104 $x319)))
 (let (($x51 (and $x207 $x131)))
 (let (($x209 (and $x51 $x24)))
 (let (($x116 (and $x209 $x295)))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x115 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x115 (_ bv1 32))))
 (let (($x73 (and $x192 $x116)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x171 $x73)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x190 (and $x156 $x78)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x11 (and $x169 $x190)))
 (let (($x91 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd ?x120 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x57 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x77 (or false (or false (and (and true (or $x167 $x57)) (or $x155 $x91))))))
 (let (($x112 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x77)))
 (let (($x215 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x77)))
 (let (($x300 (and $x215 $x11)))
 (let (($x302 (=> $x300 $x180)))
 (not $x302))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x287 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x287 (_ bv1 32))))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (not $x119)))
 (let (($x290 (or $x19 $x246)))
 (let (($x309 (= $x290 true)))
 (let (($x141 (= $x309 true)))
 (let (($x160 (forall ((input.ind-%var1666X (_ BitVec 32)) )(let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1666X)))
 (let ((?x179 (input.spec-%var-x-1.1.1 input.ind-%var1666X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1666X)))
 (=> $x183 (= ?x179 ?x50))))))
 ))
 (let (($x36 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1665X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1665X)))
 (= $x183 $x51))))
 ))
 (let (($x88 (and $x36 $x160)))
 (let (($x103 (= $x88 true)))
 (let (($x205 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var1660X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x203))))
 (let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1660X)))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1660X)))
 (=> $x51 (= ?x50 ?x59))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1659X (_ BitVec 32)) )(let (($x304 (and (bvule (_ bv0 32) input.ind-%var1659X) (bvult input.ind-%var1659X input.dst.llvm-%n))))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1659X)))
 (= $x51 $x304))))
 ))
 (let (($x140 (and $x296 $x205)))
 (let (($x151 (= $x140 true)))
 (let (($x95 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var1654X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x203))))
 (let ((?x179 (input.spec-%var-x-1.1.1 input.ind-%var1654X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1654X)))
 (=> $x183 (= ?x179 ?x59))))))))
 ))
 (let (($x158 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x304 (and (bvule (_ bv0 32) input.ind-%var1653X) (bvult input.ind-%var1653X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1653X)))
 (= $x183 $x304))))
 ))
 (let (($x33 (and $x158 $x95)))
 (let (($x168 (= $x33 true)))
 (let ((?x278 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x278)))
 (let (($x317 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x317 true)))
 (let (($x216 (= $x117 true)))
 (let (($x14 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x31 (= $x14 true)))
 (let (($x264 (= $x31 true)))
 (let (($x65 (= $x264 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x320 true)))
 (let (($x26 (= $x72 true)))
 (let (($x38 (= $x26 true)))
 (let (($x297 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x297 true)))
 (let (($x145 (= $x188 true)))
 (let (($x232 (= $x145 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x128 true)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x281 true)))
 (let (($x234 (= $x213 true)))
 (let (($x280 (= $x234 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x101)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x275 (= (_ bv0 32) ?x276)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x251)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x261 $x61)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x133 $x130)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x236 $x147)))
 (let (($x98 (not $x273)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x56 $x165)))
 (let (($x279 (and (not $x18) $x98)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x6 $x253)))
 (let (($x191 (not $x142)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x256 $x149)))
 (let (($x193 (and (not $x16) $x191)))
 (let (($x269 (and (and (and (and (and (and $x193 $x279) $x272) $x122) $x181) $x29) $x275)))
 (let (($x21 (and $x269 $x239)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x274 (or false (or false (and (and true (or $x89 $x66)) (or $x255 $x109))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x274)))
 (let (($x271 (and $x174 $x21)))
 (let (($x196 (= $x271 true)))
 (let (($x200 (= $x196 true)))
 (let (($x39 (= $x200 true)))
 (let ((?x202 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x5 (= (_ bv0 2) ?x202)))
 (let (($x185 (= $x5 true)))
 (let (($x210 (= $x185 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x192)))
 (let (($x118 (= ?x68 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x134 (and $x123 $x210)))
 (let (($x244 (and $x134 $x39)))
 (let (($x260 (and $x244 $x280)))
 (let (($x136 (and $x260 $x102)))
 (let (($x154 (and $x136 $x232)))
 (let (($x194 (and $x154 $x38)))
 (let (($x45 (and $x194 $x65)))
 (let (($x277 (and $x45 $x216)))
 (let (($x84 (and $x277 $x168)))
 (let (($x107 (and $x84 $x151)))
 (let (($x263 (and $x107 $x103)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x226 $x263)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x228 $x105)))
 (let (($x208 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x62 (and $x208 $x28)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let (($x97 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd ?x120 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x81 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x215 (or false (or false (and (and true (or $x12 $x81)) (or $x124 $x97))))))
 (let (($x169 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x215)))
 (let (($x186 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x215)))
 (let (($x177 (and $x186 $x62)))
 (let (($x294 (=> $x177 $x141)))
 (not $x294))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x8 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x287 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x287 (_ bv1 32))))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x19 (not $x119)))
 (let (($x290 (or $x19 $x246)))
 (let (($x309 (= $x290 true)))
 (let (($x141 (= $x309 true)))
 (let (($x160 (forall ((input.ind-%var1666X (_ BitVec 32)) )(let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1666X)))
 (let ((?x179 (input.spec-%var-x-1.1.1 input.ind-%var1666X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1666X)))
 (=> $x183 (= ?x179 ?x50))))))
 ))
 (let (($x36 (forall ((input.ind-%var1665X (_ BitVec 32)) )(let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1665X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1665X)))
 (= $x183 $x51))))
 ))
 (let (($x88 (and $x36 $x160)))
 (let (($x103 (= $x88 true)))
 (let (($x205 (forall ((input.ind-%var1660X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var1660X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x203))))
 (let ((?x50 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1660X)))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1660X)))
 (=> $x51 (= ?x50 ?x59))))))))
 ))
 (let (($x296 (forall ((input.ind-%var1659X (_ BitVec 32)) )(let (($x304 (and (bvule (_ bv0 32) input.ind-%var1659X) (bvult input.ind-%var1659X input.dst.llvm-%n))))
 (let (($x51 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1659X)))
 (= $x51 $x304))))
 ))
 (let (($x140 (and $x296 $x205)))
 (let (($x151 (= $x140 true)))
 (let (($x95 (forall ((input.ind-%var1654X (_ BitVec 32)) )(let ((?x220 (bvadd (bvmul input.ind-%var1654X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv1 32))) (select input.dst.llvm-mem ?x220))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x220 (_ bv2 32))) ?x203))))
 (let ((?x179 (input.spec-%var-x-1.1.1 input.ind-%var1654X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1654X)))
 (=> $x183 (= ?x179 ?x59))))))))
 ))
 (let (($x158 (forall ((input.ind-%var1653X (_ BitVec 32)) )(let (($x304 (and (bvule (_ bv0 32) input.ind-%var1653X) (bvult input.ind-%var1653X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var1653X)))
 (= $x183 $x304))))
 ))
 (let (($x33 (and $x158 $x95)))
 (let (($x168 (= $x33 true)))
 (let ((?x278 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x278)))
 (let (($x317 (= ?x282 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x317 true)))
 (let (($x216 (= $x117 true)))
 (let (($x14 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x31 (= $x14 true)))
 (let (($x264 (= $x31 true)))
 (let (($x65 (= $x264 true)))
 (let (($x320 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x72 (= $x320 true)))
 (let (($x26 (= $x72 true)))
 (let (($x38 (= $x26 true)))
 (let (($x297 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x188 (= $x297 true)))
 (let (($x145 (= $x188 true)))
 (let (($x232 (= $x145 true)))
 (let (($x128 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x126 (= $x128 true)))
 (let (($x106 (= $x126 true)))
 (let (($x102 (= $x106 true)))
 (let (($x281 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x213 (= $x281 true)))
 (let (($x234 (= $x213 true)))
 (let (($x280 (= $x234 true)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x101)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x275 (= (_ bv0 32) ?x276)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x251)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x261 $x61)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x133 $x130)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x236 $x147)))
 (let (($x98 (not $x273)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x56 $x165)))
 (let (($x279 (and (not $x18) $x98)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x6 $x253)))
 (let (($x191 (not $x142)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x256 $x149)))
 (let (($x193 (and (not $x16) $x191)))
 (let (($x269 (and (and (and (and (and (and $x193 $x279) $x272) $x122) $x181) $x29) $x275)))
 (let (($x21 (and $x269 $x239)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x274 (or false (or false (and (and true (or $x89 $x66)) (or $x255 $x109))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x274)))
 (let (($x271 (and $x174 $x21)))
 (let (($x196 (= $x271 true)))
 (let (($x200 (= $x196 true)))
 (let (($x39 (= $x200 true)))
 (let ((?x202 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x5 (= (_ bv0 2) ?x202)))
 (let (($x185 (= $x5 true)))
 (let (($x210 (= $x185 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x68 (bvneg ?x192)))
 (let (($x118 (= ?x68 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x52 (= $x118 true)))
 (let (($x123 (= $x52 true)))
 (let (($x134 (and $x123 $x210)))
 (let (($x244 (and $x134 $x39)))
 (let (($x260 (and $x244 $x280)))
 (let (($x136 (and $x260 $x102)))
 (let (($x154 (and $x136 $x232)))
 (let (($x194 (and $x154 $x38)))
 (let (($x45 (and $x194 $x65)))
 (let (($x277 (and $x45 $x216)))
 (let (($x84 (and $x277 $x168)))
 (let (($x107 (and $x84 $x151)))
 (let (($x263 (and $x107 $x103)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x105 (and $x226 $x263)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x228 $x105)))
 (let (($x208 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x62 (and $x208 $x28)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let (($x97 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x57 (bvadd ?x120 (_ bv3 32))))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x57)))
 (let (($x81 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x57)))
 (let (($x215 (or false (or false (and (and true (or $x12 $x81)) (or $x124 $x97))))))
 (let (($x169 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x215)))
 (let (($x186 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x215)))
 (let (($x177 (and $x186 $x62)))
 (let (($x294 (=> $x177 $x141)))
 (not $x294))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x219 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x231 (bvmul (_ bv4294967295 32) ?x7)))
 (let ((?x313 (bvneg ?x231)))
 (let (($x182 (= ?x313 ?x219)))
 (let (($x92 (= $x182 true)))
 (let (($x252 (forall ((input.ind-%var1689X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1689X)))
 (let ((?x287 (input.spec-%var-x-1.1.1 input.ind-%var1689X)))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1689X)))
 (=> $x312 (= ?x287 ?x116))))))
 ))
 (let (($x71 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1688X)))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1688X)))
 (= $x312 $x68))))
 ))
 (let (($x316 (and $x71 $x252)))
 (let (($x268 (= $x316 true)))
 (let (($x238 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x265 (bvadd (bvmul input.ind-%var1683X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x207))))
 (let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1683X)))
 (let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x68 (= ?x116 ?x170))))))))
 ))
 (let (($x78 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1682X) (bvult input.ind-%var1682X input.dst.llvm-%n))))
 (let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x68 $x105))))
 ))
 (let (($x110 (and $x78 $x238)))
 (let (($x69 (= $x110 true)))
 (let (($x209 (forall ((input.ind-%var1677X (_ BitVec 32)) )(let ((?x265 (bvadd (bvmul input.ind-%var1677X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x207))))
 (let ((?x287 (input.spec-%var-x-1.1.1 input.ind-%var1677X)))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1677X)))
 (=> $x312 (= ?x287 ?x170))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1676X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1676X) (bvult input.ind-%var1676X input.dst.llvm-%n))))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1676X)))
 (= $x312 $x105))))
 ))
 (let (($x243 (and $x62 $x209)))
 (let (($x301 (= $x243 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x296)))
 (let (($x180 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x180 true)))
 (let (($x205 (= $x302 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x168 (= $x33 true)))
 (let (($x84 (= $x168 true)))
 (let (($x51 (= $x84 true)))
 (let (($x307 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x307 true)))
 (let (($x83 (= $x59 true)))
 (let (($x308 (= $x83 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x311 (= $x87 true)))
 (let (($x67 (= $x311 true)))
 (let (($x55 (= $x67 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x227 (bvsub ?x120 ?x157)))
 (let (($x158 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x227) (bvult ?x120 ?x227))))
 (let (($x277 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x277 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x117 (bvmul (_ bv4 64) ?x317)))
 (let ((?x216 ((_ extract 63 32) ?x117)))
 (let (($x183 (= ?x216 ?x22)))
 (let (($x179 (and $x183 $x158)))
 (let (($x278 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x138 (and $x278 $x179)))
 (let (($x293 (= true $x138)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (=> $x119 $x293)))
 (let (($x270 (= $x220 true)))
 (let (($x85 (= $x270 true)))
 (let (($x319 (= $x85 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x38 true)))
 (let (($x14 (= $x194 true)))
 (let (($x31 (= $x14 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x154 (= $x232 true)))
 (let (($x320 (= $x154 true)))
 (let (($x72 (= $x320 true)))
 (let (($x102 (= $x119 true)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x271)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x239)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (and $x137 $x235)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x43 $x276)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x254 $x201)))
 (let (($x32 (not $x122)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (and $x259 $x139)))
 (let (($x261 (and (not $x272) $x32)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x237 $x236)))
 (let (($x273 (not $x147)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x109 $x163)))
 (let (($x279 (and (not $x18) $x273)))
 (let (($x213 (and (and (and (and (and (and $x279 $x261) $x61) $x181) $x275) $x101) $x21)))
 (let (($x234 (and $x213 $x196)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x274)))
 (let (($x193 (or false (or false (and (and true (or $x174 $x256)) (or $x229 $x6))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x193)))
 (let (($x280 (and $x165 $x234)))
 (let (($x260 (= $x280 true)))
 (let (($x128 (= $x260 true)))
 (let (($x126 (= $x128 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x89 (= (_ bv0 2) ?x224)))
 (let (($x66 (= $x89 true)))
 (let (($x159 (= $x66 true)))
 (let ((?x5 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x5)))
 (let (($x134 (= ?x185 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x134 true)))
 (let (($x204 (= $x225 true)))
 (let (($x46 (and $x204 $x159)))
 (let (($x106 (and $x46 $x126)))
 (let (($x188 (and $x106 $x297)))
 (let (($x26 (and $x188 $x72)))
 (let (($x264 (and $x26 $x31)))
 (let (($x150 (and $x264 $x319)))
 (let (($x203 (and $x150 $x55)))
 (let (($x95 (and $x203 $x308)))
 (let (($x13 (and $x95 $x51)))
 (let (($x140 (and $x13 $x205)))
 (let (($x108 (and $x140 $x301)))
 (let (($x199 (and $x108 $x69)))
 (let (($x125 (and $x199 $x268)))
 (let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x52 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x52 (_ bv1 32))))
 (let (($x164 (and $x123 $x125)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x99 (and $x30 $x164)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x292 (and $x171 $x99)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x54 $x292)))
 (let (($x77 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd ?x120 (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x155 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x186 (or false (or false (and (and true (or $x144 $x155)) (or $x47 $x77))))))
 (let (($x208 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x186)))
 (let (($x96 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x186)))
 (let (($x27 (and $x96 $x53)))
 (let (($x247 (=> $x27 $x92)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x219 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x7 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x231 (bvmul (_ bv4294967295 32) ?x7)))
 (let ((?x313 (bvneg ?x231)))
 (let (($x182 (= ?x313 ?x219)))
 (let (($x92 (= $x182 true)))
 (let (($x252 (forall ((input.ind-%var1689X (_ BitVec 32)) )(let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1689X)))
 (let ((?x287 (input.spec-%var-x-1.1.1 input.ind-%var1689X)))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1689X)))
 (=> $x312 (= ?x287 ?x116))))))
 ))
 (let (($x71 (forall ((input.ind-%var1688X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1688X)))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1688X)))
 (= $x312 $x68))))
 ))
 (let (($x316 (and $x71 $x252)))
 (let (($x268 (= $x316 true)))
 (let (($x238 (forall ((input.ind-%var1683X (_ BitVec 32)) )(let ((?x265 (bvadd (bvmul input.ind-%var1683X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x207))))
 (let ((?x116 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1683X)))
 (let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1683X)))
 (=> $x68 (= ?x116 ?x170))))))))
 ))
 (let (($x78 (forall ((input.ind-%var1682X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1682X) (bvult input.ind-%var1682X input.dst.llvm-%n))))
 (let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1682X)))
 (= $x68 $x105))))
 ))
 (let (($x110 (and $x78 $x238)))
 (let (($x69 (= $x110 true)))
 (let (($x209 (forall ((input.ind-%var1677X (_ BitVec 32)) )(let ((?x265 (bvadd (bvmul input.ind-%var1677X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem ?x265))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x265 (_ bv2 32))) ?x207))))
 (let ((?x287 (input.spec-%var-x-1.1.1 input.ind-%var1677X)))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1677X)))
 (=> $x312 (= ?x287 ?x170))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1676X (_ BitVec 32)) )(let (($x105 (and (bvule (_ bv0 32) input.ind-%var1676X) (bvult input.ind-%var1676X input.dst.llvm-%n))))
 (let (($x312 (input.spec-%var-x-1.0.1 input.ind-%var1676X)))
 (= $x312 $x105))))
 ))
 (let (($x243 (and $x62 $x209)))
 (let (($x301 (= $x243 true)))
 (let ((?x296 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x296)))
 (let (($x180 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x302 (= $x180 true)))
 (let (($x205 (= $x302 true)))
 (let (($x33 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x168 (= $x33 true)))
 (let (($x84 (= $x168 true)))
 (let (($x51 (= $x84 true)))
 (let (($x307 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x307 true)))
 (let (($x83 (= $x59 true)))
 (let (($x308 (= $x83 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x311 (= $x87 true)))
 (let (($x67 (= $x311 true)))
 (let (($x55 (= $x67 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x227 (bvsub ?x120 ?x157)))
 (let (($x158 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x227) (bvult ?x120 ?x227))))
 (let (($x277 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x277 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x317 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x117 (bvmul (_ bv4 64) ?x317)))
 (let ((?x216 ((_ extract 63 32) ?x117)))
 (let (($x183 (= ?x216 ?x22)))
 (let (($x179 (and $x183 $x158)))
 (let (($x278 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x138 (and $x278 $x179)))
 (let (($x293 (= true $x138)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (=> $x119 $x293)))
 (let (($x270 (= $x220 true)))
 (let (($x85 (= $x270 true)))
 (let (($x319 (= $x85 true)))
 (let (($x38 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x194 (= $x38 true)))
 (let (($x14 (= $x194 true)))
 (let (($x31 (= $x14 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x154 (= $x232 true)))
 (let (($x320 (= $x154 true)))
 (let (($x72 (= $x320 true)))
 (let (($x102 (= $x119 true)))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x196 (= (_ bv0 32) ?x271)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x239)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x269)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (and $x137 $x235)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (and $x43 $x276)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x254 $x201)))
 (let (($x32 (not $x122)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (and $x259 $x139)))
 (let (($x261 (and (not $x272) $x32)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x147 (and $x237 $x236)))
 (let (($x273 (not $x147)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x109 $x163)))
 (let (($x279 (and (not $x18) $x273)))
 (let (($x213 (and (and (and (and (and (and $x279 $x261) $x61) $x181) $x275) $x101) $x21)))
 (let (($x234 (and $x213 $x196)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x274)))
 (let (($x193 (or false (or false (and (and true (or $x174 $x256)) (or $x229 $x6))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x193)))
 (let (($x280 (and $x165 $x234)))
 (let (($x260 (= $x280 true)))
 (let (($x128 (= $x260 true)))
 (let (($x126 (= $x128 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x89 (= (_ bv0 2) ?x224)))
 (let (($x66 (= $x89 true)))
 (let (($x159 (= $x66 true)))
 (let ((?x5 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x5)))
 (let (($x134 (= ?x185 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x134 true)))
 (let (($x204 (= $x225 true)))
 (let (($x46 (and $x204 $x159)))
 (let (($x106 (and $x46 $x126)))
 (let (($x188 (and $x106 $x297)))
 (let (($x26 (and $x188 $x72)))
 (let (($x264 (and $x26 $x31)))
 (let (($x150 (and $x264 $x319)))
 (let (($x203 (and $x150 $x55)))
 (let (($x95 (and $x203 $x308)))
 (let (($x13 (and $x95 $x51)))
 (let (($x140 (and $x13 $x205)))
 (let (($x108 (and $x140 $x301)))
 (let (($x199 (and $x108 $x69)))
 (let (($x125 (and $x199 $x268)))
 (let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x52 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x52 (_ bv1 32))))
 (let (($x164 (and $x123 $x125)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x99 (and $x30 $x164)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x292 (and $x171 $x99)))
 (let (($x54 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x53 (and $x54 $x292)))
 (let (($x77 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd ?x120 (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x155 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x81)))
 (let (($x186 (or false (or false (and (and true (or $x144 $x155)) (or $x47 $x77))))))
 (let (($x208 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x186)))
 (let (($x96 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x186)))
 (let (($x27 (and $x96 $x53)))
 (let (($x247 (=> $x27 $x92)))
 (not $x247))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x127))))
 (let ((?x266 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x189)))
 (let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x76 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x223)))
 (let ((?x295 (bvmul (_ bv4294967295 32) ?x76)))
 (let ((?x113 (bvneg ?x295)))
 (let (($x318 (= ?x113 ?x266)))
 (let (($x173 (= $x318 true)))
 (let (($x111 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1712X)))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1712X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1712X)))
 (=> $x287 (= ?x170 ?x44))))))
 ))
 (let (($x303 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1711X)))
 (= $x287 $x123))))
 ))
 (let (($x88 (and $x303 $x111)))
 (let (($x291 (= $x88 true)))
 (let (($x245 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1706X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x268))))
 (let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1706X)))
 (let (($x123 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1706X)))
 (=> $x123 (= ?x44 ?x27))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let (($x195 (and (bvule (_ bv0 32) input.ind-%var1705X) (bvult input.ind-%var1705X input.dst.llvm-%n))))
 (let (($x123 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1705X)))
 (= $x123 $x195))))
 ))
 (let (($x221 (and $x246 $x245)))
 (let (($x107 (= $x221 true)))
 (let (($x313 (forall ((input.ind-%var1700X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1700X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x268))))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1700X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1700X)))
 (=> $x287 (= ?x170 ?x27))))))))
 ))
 (let (($x63 (forall ((input.ind-%var1699X (_ BitVec 32)) )(let (($x195 (and (bvule (_ bv0 32) input.ind-%var1699X) (bvult input.ind-%var1699X input.dst.llvm-%n))))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1699X)))
 (= $x287 $x195))))
 ))
 (let (($x219 (and $x63 $x313)))
 (let (($x182 (= $x219 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x140)))
 (let (($x312 (= ?x192 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let ((?x51 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x51)))
 (let (($x50 (= ?x13 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x50 true)))
 (let (($x302 (= $x180 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x308 (= (_ bv0 2) ?x83)))
 (let (($x95 (= $x308 true)))
 (let (($x33 (= $x95 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x67 (= $x311 true)))
 (let (($x55 (= $x67 true)))
 (let (($x203 (= $x55 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (= $x270 true)))
 (let (($x319 (= $x85 true)))
 (let (($x150 (= $x319 true)))
 (let (($x158 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x158 true)))
 (let (($x138 (= $x179 true)))
 (let (($x293 (= $x138 true)))
 (let (($x117 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 ?x157)) (bvult ?x120 (bvsub ?x120 ?x157)))))
 (let (($x14 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x264 (ite $x14 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x26 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvmul (_ bv4 64) ?x26)))
 (let ((?x194 ((_ extract 63 32) ?x38)))
 (let (($x65 (= ?x194 ?x264)))
 (let (($x216 (and $x65 $x117)))
 (let (($x320 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x277 (and $x320 $x216)))
 (let (($x22 (= true $x277)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x119 $x22)))
 (let (($x9 (= $x183 true)))
 (let (($x227 (= $x9 true)))
 (let (($x304 (= $x227 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x188 (= $x297 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x280 true)))
 (let (($x128 (= $x260 true)))
 (let (($x126 (= $x128 true)))
 (let (($x21 (= $x119 true)))
 (let (($x213 (= $x21 true)))
 (let (($x271 (= $x213 true)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x181)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x39)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (and $x201 $x32)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x254 $x261)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x98 $x237)))
 (let (($x147 (not $x236)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x109 $x163)))
 (let (($x279 (and (not $x18) $x147)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x6 $x253)))
 (let (($x191 (not $x142)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x134 $x225)))
 (let (($x165 (and (not $x229) $x191)))
 (let (($x275 (and (and (and (and (and (and $x165 $x279) $x139) $x133) $x200) $x61) $x130)))
 (let (($x64 (and $x275 $x244)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x256 (or false (or false (and (and true (or $x89 $x66)) (or $x262 $x93))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x256)))
 (let (($x269 (and $x16 $x64)))
 (let (($x101 (= $x269 true)))
 (let (($x281 (= $x101 true)))
 (let (($x239 (= $x281 true)))
 (let (($x196 (and $x239 $x271)))
 (let (($x106 (and $x196 $x126)))
 (let (($x145 (and $x106 $x188)))
 (let (($x166 (and $x145 $x304)))
 (let (($x220 (and $x166 $x293)))
 (let (($x87 (and $x220 $x150)))
 (let (($x307 (and $x87 $x203)))
 (let (($x168 (and $x307 $x33)))
 (let (($x205 (and $x168 $x302)))
 (let (($x105 (and $x205 $x103)))
 (let (($x92 (and $x105 $x182)))
 (let (($x160 (and $x92 $x107)))
 (let (($x11 (and $x160 $x291)))
 (let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x5 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x5 (_ bv1 32))))
 (let (($x42 (and $x185 $x11)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x115 $x42)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x300 (and $x226 $x257)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x156 $x300)))
 (let (($x215 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x120 (_ bv3 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x124 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x96 (or false (or false (and (and true (or $x218 $x124)) (or $x112 $x215))))))
 (let (($x54 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x96)))
 (let (($x100 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x96)))
 (let (($x153 (and $x100 $x19)))
 (let (($x187 (=> $x153 $x173)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x127))))
 (let ((?x266 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x189)))
 (let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x76 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x223)))
 (let ((?x295 (bvmul (_ bv4294967295 32) ?x76)))
 (let ((?x113 (bvneg ?x295)))
 (let (($x318 (= ?x113 ?x266)))
 (let (($x173 (= $x318 true)))
 (let (($x111 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1712X)))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1712X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1712X)))
 (=> $x287 (= ?x170 ?x44))))))
 ))
 (let (($x303 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let (($x123 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1711X)))
 (= $x287 $x123))))
 ))
 (let (($x88 (and $x303 $x111)))
 (let (($x291 (= $x88 true)))
 (let (($x245 (forall ((input.ind-%var1706X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1706X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x268))))
 (let ((?x44 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1706X)))
 (let (($x123 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1706X)))
 (=> $x123 (= ?x44 ?x27))))))))
 ))
 (let (($x246 (forall ((input.ind-%var1705X (_ BitVec 32)) )(let (($x195 (and (bvule (_ bv0 32) input.ind-%var1705X) (bvult input.ind-%var1705X input.dst.llvm-%n))))
 (let (($x123 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1705X)))
 (= $x123 $x195))))
 ))
 (let (($x221 (and $x246 $x245)))
 (let (($x107 (= $x221 true)))
 (let (($x313 (forall ((input.ind-%var1700X (_ BitVec 32)) )(let ((?x299 (bvadd (bvmul input.ind-%var1700X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x268))))
 (let ((?x170 (input.spec-%var-x-1.1.1 input.ind-%var1700X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1700X)))
 (=> $x287 (= ?x170 ?x27))))))))
 ))
 (let (($x63 (forall ((input.ind-%var1699X (_ BitVec 32)) )(let (($x195 (and (bvule (_ bv0 32) input.ind-%var1699X) (bvult input.ind-%var1699X input.dst.llvm-%n))))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1699X)))
 (= $x287 $x195))))
 ))
 (let (($x219 (and $x63 $x313)))
 (let (($x182 (= $x219 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x140)))
 (let (($x312 (= ?x192 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let ((?x51 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x13 (bvneg ?x51)))
 (let (($x50 (= ?x13 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x180 (= $x50 true)))
 (let (($x302 (= $x180 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x308 (= (_ bv0 2) ?x83)))
 (let (($x95 (= $x308 true)))
 (let (($x33 (= $x95 true)))
 (let (($x311 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x67 (= $x311 true)))
 (let (($x55 (= $x67 true)))
 (let (($x203 (= $x55 true)))
 (let (($x270 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (= $x270 true)))
 (let (($x319 (= $x85 true)))
 (let (($x150 (= $x319 true)))
 (let (($x158 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x179 (= $x158 true)))
 (let (($x138 (= $x179 true)))
 (let (($x293 (= $x138 true)))
 (let (($x117 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 ?x157)) (bvult ?x120 (bvsub ?x120 ?x157)))))
 (let (($x14 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x264 (ite $x14 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x26 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x38 (bvmul (_ bv4 64) ?x26)))
 (let ((?x194 ((_ extract 63 32) ?x38)))
 (let (($x65 (= ?x194 ?x264)))
 (let (($x216 (and $x65 $x117)))
 (let (($x320 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x277 (and $x320 $x216)))
 (let (($x22 (= true $x277)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (=> $x119 $x22)))
 (let (($x9 (= $x183 true)))
 (let (($x227 (= $x9 true)))
 (let (($x304 (= $x227 true)))
 (let (($x102 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x102 true)))
 (let (($x297 (= $x136 true)))
 (let (($x188 (= $x297 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x260 (= $x280 true)))
 (let (($x128 (= $x260 true)))
 (let (($x126 (= $x128 true)))
 (let (($x21 (= $x119 true)))
 (let (($x213 (= $x21 true)))
 (let (($x271 (= $x213 true)))
 (let ((?x181 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x244 (= (_ bv0 32) ?x181)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x39)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x261 (and $x201 $x32)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (and $x254 $x261)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x139 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x98 $x237)))
 (let (($x147 (not $x236)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x109 $x163)))
 (let (($x279 (and (not $x18) $x147)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x6 $x253)))
 (let (($x191 (not $x142)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x134 $x225)))
 (let (($x165 (and (not $x229) $x191)))
 (let (($x275 (and (and (and (and (and (and $x165 $x279) $x139) $x133) $x200) $x61) $x130)))
 (let (($x64 (and $x275 $x244)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x224 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x224)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x224)))
 (let (($x256 (or false (or false (and (and true (or $x89 $x66)) (or $x262 $x93))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x256)))
 (let (($x269 (and $x16 $x64)))
 (let (($x101 (= $x269 true)))
 (let (($x281 (= $x101 true)))
 (let (($x239 (= $x281 true)))
 (let (($x196 (and $x239 $x271)))
 (let (($x106 (and $x196 $x126)))
 (let (($x145 (and $x106 $x188)))
 (let (($x166 (and $x145 $x304)))
 (let (($x220 (and $x166 $x293)))
 (let (($x87 (and $x220 $x150)))
 (let (($x307 (and $x87 $x203)))
 (let (($x168 (and $x307 $x33)))
 (let (($x205 (and $x168 $x302)))
 (let (($x105 (and $x205 $x103)))
 (let (($x92 (and $x105 $x182)))
 (let (($x160 (and $x92 $x107)))
 (let (($x11 (and $x160 $x291)))
 (let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x5 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x185 (bvuge ?x5 (_ bv1 32))))
 (let (($x42 (and $x185 $x11)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x115 $x42)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x300 (and $x226 $x257)))
 (let (($x156 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x19 (and $x156 $x300)))
 (let (($x215 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x120 (_ bv3 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x124 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x96 (or false (or false (and (and true (or $x218 $x124)) (or $x112 $x215))))))
 (let (($x54 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x96)))
 (let (($x100 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x96)))
 (let (($x153 (and $x100 $x19)))
 (let (($x187 (=> $x153 $x173)))
 (not $x187))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x82 (bvule ?x86 (_ bv4294967294 32))))
 (let (($x250 (= $x82 true)))
 (let (($x314 (= $x250 true)))
 (let (($x41 (forall ((input.ind-%var1736X (_ BitVec 32)) )(let ((?x214 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1736X)))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1736X)))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1736X)))
 (=> $x176 (= ?x7 ?x214))))))
 ))
 (let (($x79 (forall ((input.ind-%var1735X (_ BitVec 32)) )(let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1735X)))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1735X)))
 (= $x176 $x204))))
 ))
 (let (($x289 (and $x79 $x41)))
 (let (($x305 (= $x289 true)))
 (let (($x108 (forall ((input.ind-%var1730X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1730X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x11))))
 (let ((?x214 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1730X)))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1730X)))
 (=> $x204 (= ?x214 ?x223))))))))
 ))
 (let (($x318 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1729X) (bvult input.ind-%var1729X input.dst.llvm-%n))))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1729X)))
 (= $x204 $x252))))
 ))
 (let (($x68 (and $x318 $x108)))
 (let (($x301 (= $x68 true)))
 (let (($x113 (forall ((input.ind-%var1724X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1724X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x11))))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1724X)))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1724X)))
 (=> $x176 (= ?x7 ?x223))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1723X) (bvult input.ind-%var1723X input.dst.llvm-%n))))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1723X)))
 (= $x176 $x252))))
 ))
 (let (($x74 (and $x310 $x113)))
 (let (($x248 (= $x74 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x52)))
 (let (($x206 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x206 true)))
 (let (($x195 (= $x212 true)))
 (let (($x192 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x312 (= $x192 true)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x50 true)))
 (let (($x302 (= $x180 true)))
 (let (($x205 (= $x302 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x67)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x87)))
 (let ((?x319 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x293)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x270 (and $x138 $x220)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x179 $x270)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x117 $x216)))
 (let (($x22 (not $x277)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x45 $x282)))
 (let (($x9 (and (not $x317) $x22)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x194 $x14)))
 (let (($x264 (not $x31)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x196 $x234)))
 (let (($x278 (and (not $x38) $x264)))
 (let (($x95 (and (and (and (and (and (and $x278 $x9) $x304) $x158) $x85) $x150) $x311)))
 (let (($x33 (and $x95 $x55)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x320 (or false (or false (and (and true (or $x126 $x106)) (or $x297 $x188))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x320)))
 (let (($x168 (and $x26 $x33)))
 (let (($x84 (= $x168 true)))
 (let (($x51 (= $x84 true)))
 (let (($x13 (= $x51 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x101 true)))
 (let (($x239 (= $x281 true)))
 (let (($x21 (= $x239 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x181 (= $x275 true)))
 (let (($x244 (= $x181 true)))
 (let (($x64 (= $x244 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x29 (bvsub ?x120 ?x157)))
 (let (($x32 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x29) (bvult ?x120 ?x29))))
 (let (($x137 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x272 (ite $x137 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x43 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x43)))
 (let ((?x139 ((_ extract 63 32) ?x259)))
 (let (($x133 (= ?x139 ?x272)))
 (let (($x261 (and $x133 $x32)))
 (let (($x147 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x200 (and $x147 $x261)))
 (let (($x235 (= true $x200)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x119 $x235)))
 (let (($x61 (= $x251 true)))
 (let (($x276 (= $x61 true)))
 (let (($x39 (= $x276 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x163 (= (_ bv0 2) ?x109)))
 (let (($x18 (= $x163 true)))
 (let (($x273 (= $x18 true)))
 (let ((?x225 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x225)))
 (let (($x6 (= ?x229 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x6 true)))
 (let (($x142 (= $x253 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x93 true)))
 (let (($x274 (= $x56 true)))
 (let (($x174 (= $x274 true)))
 (let (($x66 (= $x119 true)))
 (let (($x159 (= $x66 true)))
 (let (($x46 (= $x159 true)))
 (let (($x256 (and $x46 $x174)))
 (let (($x191 (and $x256 $x142)))
 (let (($x98 (and $x191 $x273)))
 (let (($x130 (and $x98 $x39)))
 (let (($x269 (and $x130 $x64)))
 (let (($x213 (and $x269 $x21)))
 (let (($x296 (and $x213 $x13)))
 (let (($x140 (and $x296 $x205)))
 (let (($x105 (and $x140 $x103)))
 (let (($x80 (and $x105 $x195)))
 (let (($x10 (and $x80 $x248)))
 (let (($x73 (and $x10 $x301)))
 (let (($x15 (and $x73 $x305)))
 (let (($x149 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x224 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x224 (_ bv1 32))))
 (let (($x315 (and $x89 $x15)))
 (let (($x202 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x202 $x315)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x30 $x294)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x228 $x37)))
 (let (($x186 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd ?x120 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x47 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x100 (or false (or false (and (and true (or $x91 $x47)) (or $x169 $x186))))))
 (let (($x156 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x100)))
 (let (($x57 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x100)))
 (let (($x162 (and $x57 $x178)))
 (let (($x94 (=> $x162 $x314)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x82 (bvule ?x86 (_ bv4294967294 32))))
 (let (($x250 (= $x82 true)))
 (let (($x314 (= $x250 true)))
 (let (($x41 (forall ((input.ind-%var1736X (_ BitVec 32)) )(let ((?x214 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1736X)))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1736X)))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1736X)))
 (=> $x176 (= ?x7 ?x214))))))
 ))
 (let (($x79 (forall ((input.ind-%var1735X (_ BitVec 32)) )(let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1735X)))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1735X)))
 (= $x176 $x204))))
 ))
 (let (($x289 (and $x79 $x41)))
 (let (($x305 (= $x289 true)))
 (let (($x108 (forall ((input.ind-%var1730X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1730X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x11))))
 (let ((?x214 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1730X)))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1730X)))
 (=> $x204 (= ?x214 ?x223))))))))
 ))
 (let (($x318 (forall ((input.ind-%var1729X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1729X) (bvult input.ind-%var1729X input.dst.llvm-%n))))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1729X)))
 (= $x204 $x252))))
 ))
 (let (($x68 (and $x318 $x108)))
 (let (($x301 (= $x68 true)))
 (let (($x113 (forall ((input.ind-%var1724X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var1724X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x11 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x11))))
 (let ((?x7 (input.spec-%var-x-1.1.1 input.ind-%var1724X)))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1724X)))
 (=> $x176 (= ?x7 ?x223))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1723X (_ BitVec 32)) )(let (($x252 (and (bvule (_ bv0 32) input.ind-%var1723X) (bvult input.ind-%var1723X input.dst.llvm-%n))))
 (let (($x176 (input.spec-%var-x-1.0.1 input.ind-%var1723X)))
 (= $x176 $x252))))
 ))
 (let (($x74 (and $x310 $x113)))
 (let (($x248 (= $x74 true)))
 (let ((?x52 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x287 (bvneg ?x52)))
 (let (($x206 (= ?x287 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x206 true)))
 (let (($x195 (= $x212 true)))
 (let (($x192 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x312 (= $x192 true)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let (($x50 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x180 (= $x50 true)))
 (let (($x302 (= $x180 true)))
 (let (($x205 (= $x302 true)))
 (let ((?x67 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x67)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x87)))
 (let ((?x319 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x293)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x270 (and $x138 $x220)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x179 $x270)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x304 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x117 $x216)))
 (let (($x22 (not $x277)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (and $x45 $x282)))
 (let (($x9 (and (not $x317) $x22)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x194 $x14)))
 (let (($x264 (not $x31)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x196 $x234)))
 (let (($x278 (and (not $x38) $x264)))
 (let (($x95 (and (and (and (and (and (and $x278 $x9) $x304) $x158) $x85) $x150) $x311)))
 (let (($x33 (and $x95 $x55)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x128 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x297 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x128)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x128)))
 (let (($x320 (or false (or false (and (and true (or $x126 $x106)) (or $x297 $x188))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x320)))
 (let (($x168 (and $x26 $x33)))
 (let (($x84 (= $x168 true)))
 (let (($x51 (= $x84 true)))
 (let (($x13 (= $x51 true)))
 (let (($x101 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x281 (= $x101 true)))
 (let (($x239 (= $x281 true)))
 (let (($x21 (= $x239 true)))
 (let (($x275 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x181 (= $x275 true)))
 (let (($x244 (= $x181 true)))
 (let (($x64 (= $x244 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x29 (bvsub ?x120 ?x157)))
 (let (($x32 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x29) (bvult ?x120 ?x29))))
 (let (($x137 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x272 (ite $x137 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x43 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x259 (bvmul (_ bv4 64) ?x43)))
 (let ((?x139 ((_ extract 63 32) ?x259)))
 (let (($x133 (= ?x139 ?x272)))
 (let (($x261 (and $x133 $x32)))
 (let (($x147 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x200 (and $x147 $x261)))
 (let (($x235 (= true $x200)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x119 $x235)))
 (let (($x61 (= $x251 true)))
 (let (($x276 (= $x61 true)))
 (let (($x39 (= $x276 true)))
 (let ((?x109 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x163 (= (_ bv0 2) ?x109)))
 (let (($x18 (= $x163 true)))
 (let (($x273 (= $x18 true)))
 (let ((?x225 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x229 (bvneg ?x225)))
 (let (($x6 (= ?x229 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x253 (= $x6 true)))
 (let (($x142 (= $x253 true)))
 (let (($x93 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x56 (= $x93 true)))
 (let (($x274 (= $x56 true)))
 (let (($x174 (= $x274 true)))
 (let (($x66 (= $x119 true)))
 (let (($x159 (= $x66 true)))
 (let (($x46 (= $x159 true)))
 (let (($x256 (and $x46 $x174)))
 (let (($x191 (and $x256 $x142)))
 (let (($x98 (and $x191 $x273)))
 (let (($x130 (and $x98 $x39)))
 (let (($x269 (and $x130 $x64)))
 (let (($x213 (and $x269 $x21)))
 (let (($x296 (and $x213 $x13)))
 (let (($x140 (and $x296 $x205)))
 (let (($x105 (and $x140 $x103)))
 (let (($x80 (and $x105 $x195)))
 (let (($x10 (and $x80 $x248)))
 (let (($x73 (and $x10 $x301)))
 (let (($x15 (and $x73 $x305)))
 (let (($x149 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x224 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x89 (bvuge ?x224 (_ bv1 32))))
 (let (($x315 (and $x89 $x15)))
 (let (($x202 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x202 $x315)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x30 $x294)))
 (let (($x228 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x178 (and $x228 $x37)))
 (let (($x186 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd ?x120 (_ bv3 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x47 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x100 (or false (or false (and (and true (or $x91 $x47)) (or $x169 $x186))))))
 (let (($x156 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x100)))
 (let (($x57 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x100)))
 (let (($x162 (and $x57 $x178)))
 (let (($x94 (=> $x162 $x314)))
 (not $x94))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x187 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x110 (bvsge ?x187 (_ bv0 32))))
 (let (($x141 (= $x110 true)))
 (let (($x309 (= $x141 true)))
 (let (($x49 (forall ((input.ind-%var1759X (_ BitVec 32)) )(let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1759X)))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1759X)))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1759X)))
 (=> $x7 (= ?x223 ?x219))))))
 ))
 (let (($x290 (forall ((input.ind-%var1758X (_ BitVec 32)) )(let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1758X)))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1758X)))
 (= $x7 $x89))))
 ))
 (let (($x129 (and $x290 $x49)))
 (let (($x40 (= $x129 true)))
 (let (($x170 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1753X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x305))))
 (let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1753X)))
 (let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1753X)))
 (=> $x89 (= ?x219 ?x162))))))))
 ))
 (let (($x27 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1752X) (bvult input.ind-%var1752X input.dst.llvm-%n))))
 (let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1752X)))
 (= $x89 $x257))))
 ))
 (let (($x53 (and $x27 $x170)))
 (let (($x267 (= $x53 true)))
 (let (($x250 (forall ((input.ind-%var1747X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1747X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x305))))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1747X)))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1747X)))
 (=> $x7 (= ?x223 ?x162))))))))
 ))
 (let (($x291 (forall ((input.ind-%var1746X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1746X) (bvult input.ind-%var1746X input.dst.llvm-%n))))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1746X)))
 (= $x7 $x257))))
 ))
 (let (($x314 (and $x291 $x250)))
 (let (($x94 (= $x314 true)))
 (let ((?x80 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x80)))
 (let (($x176 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x176 true)))
 (let (($x125 (= $x164 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x287 (= $x52 true)))
 (let (($x206 (= $x287 true)))
 (let (($x212 (= $x206 true)))
 (let (($x192 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x312 (= $x192 true)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x95)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x87)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x308 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x270 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x270)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x220 $x85)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (and $x293 $x83)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (and $x9 $x203)))
 (let (($x304 (not $x227)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x216 $x277)))
 (let (($x166 (and (not $x22) $x304)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x278 $x45)))
 (let (($x317 (not $x282)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x106 $x102)))
 (let (($x117 (and (not $x264) $x317)))
 (let (($x13 (and (and (and (and (and (and $x117 $x166) $x59) $x138) $x319) $x308) $x311)))
 (let (($x296 (and $x13 $x67)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x194 (or false (or false (and (and true (or $x145 $x232)) (or $x26 $x196))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x194)))
 (let (($x50 (and $x31 $x296)))
 (let (($x180 (= $x50 true)))
 (let (($x302 (= $x180 true)))
 (let (($x205 (= $x302 true)))
 (let (($x213 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x280 (= $x213 true)))
 (let (($x260 (= $x280 true)))
 (let (($x72 (= $x260 true)))
 (let (($x269 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x269 true)))
 (let (($x281 (= $x101 true)))
 (let (($x239 (= $x281 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x32 (bvsub ?x120 ?x157)))
 (let (($x251 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x32) (bvult ?x120 ?x32))))
 (let (($x29 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x201 (ite $x29 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x272 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x133 (bvmul (_ bv4 64) ?x272)))
 (let ((?x254 ((_ extract 63 32) ?x133)))
 (let (($x122 (= ?x254 ?x201)))
 (let (($x61 (and $x122 $x251)))
 (let (($x139 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x276 (and $x139 $x61)))
 (let (($x39 (= true $x276)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x119 $x39)))
 (let (($x275 (= $x130 true)))
 (let (($x181 (= $x275 true)))
 (let (($x244 (= $x181 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x98)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let ((?x253 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x253)))
 (let (($x165 (= ?x142 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x165 true)))
 (let (($x163 (= $x109 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x256 true)))
 (let (($x134 (= $x16 true)))
 (let (($x225 (= $x134 true)))
 (let (($x93 (= $x119 true)))
 (let (($x56 (= $x93 true)))
 (let (($x274 (= $x56 true)))
 (let (($x229 (and $x274 $x225)))
 (let (($x18 (and $x229 $x163)))
 (let (($x279 (and $x18 $x147)))
 (let (($x64 (and $x279 $x244)))
 (let (($x21 (and $x64 $x239)))
 (let (($x128 (and $x21 $x72)))
 (let (($x140 (and $x128 $x205)))
 (let (($x105 (and $x140 $x103)))
 (let (($x195 (and $x105 $x212)))
 (let (($x252 (and $x195 $x125)))
 (let (($x199 (and $x252 $x94)))
 (let (($x265 (and $x199 $x267)))
 (let (($x69 (and $x265 $x40)))
 (let (($x159 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x46 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x46 (_ bv1 32))))
 (let (($x189 (and $x262 $x69)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x99 (and $x5 $x189)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x303 (and $x115 $x99)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x238 (and $x171 $x303)))
 (let (($x96 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd ?x120 (_ bv3 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x112 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x57 (or false (or false (and (and true (or $x97 $x112)) (or $x208 $x96))))))
 (let (($x228 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x57)))
 (let (($x81 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x57)))
 (let (($x151 (and $x81 $x238)))
 (let (($x184 (=> $x151 $x309)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x187 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x110 (bvsge ?x187 (_ bv0 32))))
 (let (($x141 (= $x110 true)))
 (let (($x309 (= $x141 true)))
 (let (($x49 (forall ((input.ind-%var1759X (_ BitVec 32)) )(let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1759X)))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1759X)))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1759X)))
 (=> $x7 (= ?x223 ?x219))))))
 ))
 (let (($x290 (forall ((input.ind-%var1758X (_ BitVec 32)) )(let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1758X)))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1758X)))
 (= $x7 $x89))))
 ))
 (let (($x129 (and $x290 $x49)))
 (let (($x40 (= $x129 true)))
 (let (($x170 (forall ((input.ind-%var1753X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1753X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x305))))
 (let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1753X)))
 (let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1753X)))
 (=> $x89 (= ?x219 ?x162))))))))
 ))
 (let (($x27 (forall ((input.ind-%var1752X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1752X) (bvult input.ind-%var1752X input.dst.llvm-%n))))
 (let (($x89 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1752X)))
 (= $x89 $x257))))
 ))
 (let (($x53 (and $x27 $x170)))
 (let (($x267 (= $x53 true)))
 (let (($x250 (forall ((input.ind-%var1747X (_ BitVec 32)) )(let ((?x222 (bvadd (bvmul input.ind-%var1747X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv1 32))) (select input.dst.llvm-mem ?x222))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x222 (_ bv2 32))) ?x305))))
 (let ((?x223 (input.spec-%var-x-1.1.1 input.ind-%var1747X)))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1747X)))
 (=> $x7 (= ?x223 ?x162))))))))
 ))
 (let (($x291 (forall ((input.ind-%var1746X (_ BitVec 32)) )(let (($x257 (and (bvule (_ bv0 32) input.ind-%var1746X) (bvult input.ind-%var1746X input.dst.llvm-%n))))
 (let (($x7 (input.spec-%var-x-1.0.1 input.ind-%var1746X)))
 (= $x7 $x257))))
 ))
 (let (($x314 (and $x291 $x250)))
 (let (($x94 (= $x314 true)))
 (let ((?x80 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x80)))
 (let (($x176 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x164 (= $x176 true)))
 (let (($x125 (= $x164 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x287 (= $x52 true)))
 (let (($x206 (= $x287 true)))
 (let (($x212 (= $x206 true)))
 (let (($x192 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x312 (= $x192 true)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let ((?x95 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x95)))
 (let ((?x87 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x87)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x308 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x270 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x270)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (and $x220 $x85)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (and $x293 $x83)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x227 (and $x9 $x203)))
 (let (($x304 (not $x227)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x216 $x277)))
 (let (($x166 (and (not $x22) $x304)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (and $x278 $x45)))
 (let (($x317 (not $x282)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x106 $x102)))
 (let (($x117 (and (not $x264) $x317)))
 (let (($x13 (and (and (and (and (and (and $x117 $x166) $x59) $x138) $x319) $x308) $x311)))
 (let (($x296 (and $x13 $x67)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x232 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x194 (or false (or false (and (and true (or $x145 $x232)) (or $x26 $x196))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x194)))
 (let (($x50 (and $x31 $x296)))
 (let (($x180 (= $x50 true)))
 (let (($x302 (= $x180 true)))
 (let (($x205 (= $x302 true)))
 (let (($x213 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x280 (= $x213 true)))
 (let (($x260 (= $x280 true)))
 (let (($x72 (= $x260 true)))
 (let (($x269 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x101 (= $x269 true)))
 (let (($x281 (= $x101 true)))
 (let (($x239 (= $x281 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x32 (bvsub ?x120 ?x157)))
 (let (($x251 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x32) (bvult ?x120 ?x32))))
 (let (($x29 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x201 (ite $x29 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x272 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x133 (bvmul (_ bv4 64) ?x272)))
 (let ((?x254 ((_ extract 63 32) ?x133)))
 (let (($x122 (= ?x254 ?x201)))
 (let (($x61 (and $x122 $x251)))
 (let (($x139 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x276 (and $x139 $x61)))
 (let (($x39 (= true $x276)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x130 (=> $x119 $x39)))
 (let (($x275 (= $x130 true)))
 (let (($x181 (= $x275 true)))
 (let (($x244 (= $x181 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x98)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let ((?x253 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x253)))
 (let (($x165 (= ?x142 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x165 true)))
 (let (($x163 (= $x109 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x16 (= $x256 true)))
 (let (($x134 (= $x16 true)))
 (let (($x225 (= $x134 true)))
 (let (($x93 (= $x119 true)))
 (let (($x56 (= $x93 true)))
 (let (($x274 (= $x56 true)))
 (let (($x229 (and $x274 $x225)))
 (let (($x18 (and $x229 $x163)))
 (let (($x279 (and $x18 $x147)))
 (let (($x64 (and $x279 $x244)))
 (let (($x21 (and $x64 $x239)))
 (let (($x128 (and $x21 $x72)))
 (let (($x140 (and $x128 $x205)))
 (let (($x105 (and $x140 $x103)))
 (let (($x195 (and $x105 $x212)))
 (let (($x252 (and $x195 $x125)))
 (let (($x199 (and $x252 $x94)))
 (let (($x265 (and $x199 $x267)))
 (let (($x69 (and $x265 $x40)))
 (let (($x159 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x46 (ite $x159 (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x46 (_ bv1 32))))
 (let (($x189 (and $x262 $x69)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x99 (and $x5 $x189)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x303 (and $x115 $x99)))
 (let (($x171 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x238 (and $x171 $x303)))
 (let (($x96 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd ?x120 (_ bv3 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x112 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x57 (or false (or false (and (and true (or $x97 $x112)) (or $x208 $x96))))))
 (let (($x228 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x57)))
 (let (($x81 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x57)))
 (let (($x151 (and $x81 $x238)))
 (let (($x184 (=> $x151 $x309)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (bvule ?x299 (_ bv4294967294 32))))
 (let (($x24 (= $x114 true)))
 (let (($x285 (= $x24 true)))
 (let (($x271 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1782X)))
 (let ((?x162 (input.spec-%var-x-1.1.1 input.ind-%var1782X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1782X)))
 (=> $x223 (= ?x162 ?x113))))))
 ))
 (let (($x34 (forall ((input.ind-%var1781X (_ BitVec 32)) )(let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1781X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1781X)))
 (= $x223 $x262))))
 ))
 (let (($x71 (and $x34 $x271)))
 (let (($x73 (= $x71 true)))
 (let (($x310 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var1776X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x40))))
 (let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1776X)))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1776X)))
 (=> $x262 (= ?x113 ?x151))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1775X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1775X) (bvult input.ind-%var1775X input.dst.llvm-%n))))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1775X)))
 (= $x262 $x315))))
 ))
 (let (($x19 (and $x300 $x310)))
 (let (($x107 (= $x19 true)))
 (let (($x141 (forall ((input.ind-%var1770X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var1770X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x40))))
 (let ((?x162 (input.spec-%var-x-1.1.1 input.ind-%var1770X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1770X)))
 (=> $x223 (= ?x162 ?x151))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1769X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1769X) (bvult input.ind-%var1769X input.dst.llvm-%n))))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1769X)))
 (= $x223 $x315))))
 ))
 (let (($x309 (and $x289 $x141)))
 (let (($x184 (= $x309 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x252)))
 (let (($x7 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x7 true)))
 (let (($x44 (= $x42 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x80 true)))
 (let (($x176 (= $x185 true)))
 (let (($x164 (= $x176 true)))
 (let (($x52 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x287 (= $x52 true)))
 (let (($x206 (= $x287 true)))
 (let (($x212 (= $x206 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x95 (bvsub ?x120 ?x157)))
 (let (($x180 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x95) (bvult ?x120 ?x95))))
 (let (($x87 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x311 (ite $x87 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x150 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x308 (bvmul (_ bv4 64) ?x150)))
 (let ((?x51 ((_ extract 63 32) ?x308)))
 (let (($x13 (= ?x51 ?x311)))
 (let (($x302 (and $x13 $x180)))
 (let (($x319 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x205 (and $x319 $x302)))
 (let (($x140 (= true $x205)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x192 (=> $x119 $x140)))
 (let (($x312 (= $x192 true)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let (($x138 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x138 true)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let (($x158 (= $x119 true)))
 (let (($x59 (= $x158 true)))
 (let (($x33 (= $x59 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x282 (= (_ bv0 32) ?x45)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x183)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x38 $x194)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x234 $x31)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x136 $x297)))
 (let (($x188 (not $x14)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x260 $x72)))
 (let (($x232 (and (not $x128) $x188)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x101 $x281)))
 (let (($x21 (not $x239)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x254 $x29)))
 (let (($x280 (and (not $x269) $x21)))
 (let (($x307 (and (and (and (and (and (and $x280 $x232) $x320) $x196) $x106) $x264) $x278)))
 (let (($x9 (and $x307 $x282)))
 (let (($x276 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x181 (or false (or false (and (and true (or $x32 $x200)) (or $x61 $x276))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x203 (and $x64 $x9)))
 (let (($x227 (= $x203 true)))
 (let (($x304 (= $x227 true)))
 (let (($x166 (= $x304 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x259 (= $x43 true)))
 (let (($x139 (= $x259 true)))
 (let (($x137 (= $x139 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x98)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let ((?x253 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x253)))
 (let (($x165 (= ?x142 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x165 true)))
 (let (($x163 (= $x109 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x134 (= $x16 true)))
 (let (($x225 (= $x134 true)))
 (let (($x229 (= $x225 true)))
 (let (($x18 (and $x229 $x163)))
 (let (($x279 (and $x18 $x147)))
 (let (($x272 (and $x279 $x137)))
 (let (($x55 (and $x272 $x166)))
 (let (($x179 (and $x55 $x33)))
 (let (($x270 (and $x179 $x220)))
 (let (($x105 (and $x270 $x103)))
 (let (($x195 (and $x105 $x212)))
 (let (($x125 (and $x195 $x164)))
 (let (($x257 (and $x125 $x44)))
 (let (($x118 (and $x257 $x184)))
 (let (($x160 (and $x118 $x107)))
 (let (($x258 (and $x160 $x73)))
 (let (($x56 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x274 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x274 (_ bv1 32))))
 (let (($x231 (and $x174 $x258)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x149 $x231)))
 (let (($x202 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x247 (and $x202 $x11)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x226 $x247)))
 (let (($x100 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd ?x120 (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x169 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x81 (or false (or false (and (and true (or $x77 $x169)) (or $x54 $x100))))))
 (let (($x171 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x81)))
 (let (($x155 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x81)))
 (let (($x23 (and $x155 $x148)))
 (let (($x177 (=> $x23 $x285)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x114 (bvule ?x299 (_ bv4294967294 32))))
 (let (($x24 (= $x114 true)))
 (let (($x285 (= $x24 true)))
 (let (($x271 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1782X)))
 (let ((?x162 (input.spec-%var-x-1.1.1 input.ind-%var1782X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1782X)))
 (=> $x223 (= ?x162 ?x113))))))
 ))
 (let (($x34 (forall ((input.ind-%var1781X (_ BitVec 32)) )(let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1781X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1781X)))
 (= $x223 $x262))))
 ))
 (let (($x71 (and $x34 $x271)))
 (let (($x73 (= $x71 true)))
 (let (($x310 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var1776X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x40))))
 (let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1776X)))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1776X)))
 (=> $x262 (= ?x113 ?x151))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1775X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1775X) (bvult input.ind-%var1775X input.dst.llvm-%n))))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1775X)))
 (= $x262 $x315))))
 ))
 (let (($x19 (and $x300 $x310)))
 (let (($x107 (= $x19 true)))
 (let (($x141 (forall ((input.ind-%var1770X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var1770X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x40))))
 (let ((?x162 (input.spec-%var-x-1.1.1 input.ind-%var1770X)))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1770X)))
 (=> $x223 (= ?x162 ?x151))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1769X (_ BitVec 32)) )(let (($x315 (and (bvule (_ bv0 32) input.ind-%var1769X) (bvult input.ind-%var1769X input.dst.llvm-%n))))
 (let (($x223 (input.spec-%var-x-1.0.1 input.ind-%var1769X)))
 (= $x223 $x315))))
 ))
 (let (($x309 (and $x289 $x141)))
 (let (($x184 (= $x309 true)))
 (let ((?x252 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x224 (bvneg ?x252)))
 (let (($x7 (= ?x224 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x7 true)))
 (let (($x44 (= $x42 true)))
 (let (($x80 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x185 (= $x80 true)))
 (let (($x176 (= $x185 true)))
 (let (($x164 (= $x176 true)))
 (let (($x52 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x287 (= $x52 true)))
 (let (($x206 (= $x287 true)))
 (let (($x212 (= $x206 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x95 (bvsub ?x120 ?x157)))
 (let (($x180 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x95) (bvult ?x120 ?x95))))
 (let (($x87 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x311 (ite $x87 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x150 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x308 (bvmul (_ bv4 64) ?x150)))
 (let ((?x51 ((_ extract 63 32) ?x308)))
 (let (($x13 (= ?x51 ?x311)))
 (let (($x302 (and $x13 $x180)))
 (let (($x319 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x205 (and $x319 $x302)))
 (let (($x140 (= true $x205)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x192 (=> $x119 $x140)))
 (let (($x312 (= $x192 true)))
 (let (($x263 (= $x312 true)))
 (let (($x103 (= $x263 true)))
 (let (($x138 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x168 (= $x138 true)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let (($x158 (= $x119 true)))
 (let (($x59 (= $x158 true)))
 (let (($x33 (= $x59 true)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x282 (= (_ bv0 32) ?x45)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x183)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x102)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x65)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x38 $x194)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x234 $x31)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (and $x136 $x297)))
 (let (($x188 (not $x14)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x260 $x72)))
 (let (($x232 (and (not $x128) $x188)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x101 $x281)))
 (let (($x21 (not $x239)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x254 $x29)))
 (let (($x280 (and (not $x269) $x21)))
 (let (($x307 (and (and (and (and (and (and $x280 $x232) $x320) $x196) $x106) $x264) $x278)))
 (let (($x9 (and $x307 $x282)))
 (let (($x276 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x261 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x261)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x261)))
 (let (($x181 (or false (or false (and (and true (or $x32 $x200)) (or $x61 $x276))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x181)))
 (let (($x203 (and $x64 $x9)))
 (let (($x227 (= $x203 true)))
 (let (($x304 (= $x227 true)))
 (let (($x166 (= $x304 true)))
 (let (($x43 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x259 (= $x43 true)))
 (let (($x139 (= $x259 true)))
 (let (($x137 (= $x139 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x98)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let ((?x253 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x142 (bvneg ?x253)))
 (let (($x165 (= ?x142 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x109 (= $x165 true)))
 (let (($x163 (= $x109 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x134 (= $x16 true)))
 (let (($x225 (= $x134 true)))
 (let (($x229 (= $x225 true)))
 (let (($x18 (and $x229 $x163)))
 (let (($x279 (and $x18 $x147)))
 (let (($x272 (and $x279 $x137)))
 (let (($x55 (and $x272 $x166)))
 (let (($x179 (and $x55 $x33)))
 (let (($x270 (and $x179 $x220)))
 (let (($x105 (and $x270 $x103)))
 (let (($x195 (and $x105 $x212)))
 (let (($x125 (and $x195 $x164)))
 (let (($x257 (and $x125 $x44)))
 (let (($x118 (and $x257 $x184)))
 (let (($x160 (and $x118 $x107)))
 (let (($x258 (and $x160 $x73)))
 (let (($x56 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x274 (ite $x56 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x274 (_ bv1 32))))
 (let (($x231 (and $x174 $x258)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x11 (and $x149 $x231)))
 (let (($x202 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x247 (and $x202 $x11)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x226 $x247)))
 (let (($x100 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd ?x120 (_ bv3 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x169 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x81 (or false (or false (and (and true (or $x77 $x169)) (or $x54 $x100))))))
 (let (($x171 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x81)))
 (let (($x155 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x81)))
 (let (($x23 (and $x155 $x148)))
 (let (($x177 (=> $x23 $x285)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x132 (bvsge ?x35 (_ bv0 32))))
 (let (($x209 (= $x132 true)))
 (let (($x245 (= $x209 true)))
 (let (($x126 (forall ((input.ind-%var1805X (_ BitVec 32)) )(let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1805X)))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var1805X)))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1805X)))
 (=> $x162 (= ?x151 ?x250))))))
 ))
 (let (($x214 (forall ((input.ind-%var1804X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1804X)))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1804X)))
 (= $x162 $x174))))
 ))
 (let (($x313 (and $x214 $x126)))
 (let (($x265 (= $x313 true)))
 (let (($x291 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1799X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x73))))
 (let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1799X)))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x174 (= ?x250 ?x23))))))))
 ))
 (let (($x294 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x189 (and (bvule (_ bv0 32) input.ind-%var1798X) (bvult input.ind-%var1798X input.dst.llvm-%n))))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x174 $x189))))
 ))
 (let (($x37 (and $x294 $x291)))
 (let (($x68 (= $x37 true)))
 (let (($x24 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1793X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x73))))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var1793X)))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1793X)))
 (=> $x162 (= ?x151 ?x23))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x189 (and (bvule (_ bv0 32) input.ind-%var1792X) (bvult input.ind-%var1792X input.dst.llvm-%n))))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1792X)))
 (= $x162 $x189))))
 ))
 (let (($x285 (and $x129 $x24)))
 (let (($x177 (= $x285 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x257)))
 (let (($x223 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x223 true)))
 (let (($x318 (= $x15 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x224 (= $x252 true)))
 (let (($x7 (= $x224 true)))
 (let (($x42 (= $x7 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x80 true)))
 (let (($x176 (= $x185 true)))
 (let (($x164 (= $x176 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x302 (bvsub ?x120 ?x157)))
 (let (($x312 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x302) (bvult ?x120 ?x302))))
 (let (($x296 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x50 (ite $x296 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x67 (bvmul (_ bv4 64) ?x13)))
 (let ((?x95 ((_ extract 63 32) ?x67)))
 (let (($x180 (= ?x95 ?x50)))
 (let (($x263 (and $x180 $x312)))
 (let (($x87 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x103 (and $x87 $x263)))
 (let (($x105 (= true $x103)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x119 $x105)))
 (let (($x287 (= $x52 true)))
 (let (($x206 (= $x287 true)))
 (let (($x212 (= $x206 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x85 true)))
 (let (($x319 (= $x83 true)))
 (let (($x84 (= $x319 true)))
 (let (($x168 (= $x119 true)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let ((?x307 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x307)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x183)))
 (let ((?x264 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x264)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x194 $x106)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x65 $x277)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x232 $x317)))
 (let (($x320 (not $x154)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x297 $x14)))
 (let (($x26 (and (not $x188) $x320)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x280 $x260)))
 (let (($x128 (not $x72)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x200 $x235)))
 (let (($x136 (and (not $x21) $x128)))
 (let (($x166 (and (and (and (and (and (and $x136 $x26) $x216) $x38) $x102) $x22) $x278)))
 (let (($x55 (and $x166 $x45)))
 (let (($x254 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x276 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x276)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x276)))
 (let (($x101 (or false (or false (and (and true (or $x39 $x130)) (or $x64 $x254))))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x158 (and $x239 $x55)))
 (let (($x59 (= $x158 true)))
 (let (($x33 (= $x59 true)))
 (let (($x179 (= $x33 true)))
 (let (($x272 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x201 (= $x272 true)))
 (let (($x122 (= $x201 true)))
 (let (($x244 (= $x122 true)))
 (let ((?x279 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x43 (= (_ bv0 2) ?x279)))
 (let (($x259 (= $x43 true)))
 (let (($x139 (= $x259 true)))
 (let ((?x109 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x109)))
 (let (($x273 (= ?x163 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x273 true)))
 (let (($x237 (= $x98 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x6 (= $x193 true)))
 (let (($x253 (= $x6 true)))
 (let (($x142 (= $x253 true)))
 (let (($x236 (and $x142 $x237)))
 (let (($x137 (and $x236 $x139)))
 (let (($x261 (and $x137 $x244)))
 (let (($x138 (and $x261 $x179)))
 (let (($x270 (and $x138 $x220)))
 (let (($x150 (and $x270 $x84)))
 (let (($x195 (and $x150 $x212)))
 (let (($x125 (and $x195 $x164)))
 (let (($x44 (and $x125 $x42)))
 (let (($x315 (and $x44 $x318)))
 (let (($x255 (and $x315 $x177)))
 (let (($x301 (and $x255 $x68)))
 (let (($x92 (and $x301 $x265)))
 (let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x134 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x134 (_ bv1 32))))
 (let (($x76 (and $x225 $x92)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x305 (and $x159 $x76)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x60 (and $x5 $x305)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x217 (and $x30 $x60)))
 (let (($x57 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x120 (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x208 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x155 (or false (or false (and (and true (or $x215 $x208)) (or $x156 $x57))))))
 (let (($x226 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x155)))
 (let (($x124 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x155)))
 (let (($x172 (and $x124 $x217)))
 (let (($x28 (=> $x172 $x245)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x35 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x132 (bvsge ?x35 (_ bv0 32))))
 (let (($x209 (= $x132 true)))
 (let (($x245 (= $x209 true)))
 (let (($x126 (forall ((input.ind-%var1805X (_ BitVec 32)) )(let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1805X)))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var1805X)))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1805X)))
 (=> $x162 (= ?x151 ?x250))))))
 ))
 (let (($x214 (forall ((input.ind-%var1804X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1804X)))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1804X)))
 (= $x162 $x174))))
 ))
 (let (($x313 (and $x214 $x126)))
 (let (($x265 (= $x313 true)))
 (let (($x291 (forall ((input.ind-%var1799X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1799X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x73))))
 (let ((?x250 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1799X)))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1799X)))
 (=> $x174 (= ?x250 ?x23))))))))
 ))
 (let (($x294 (forall ((input.ind-%var1798X (_ BitVec 32)) )(let (($x189 (and (bvule (_ bv0 32) input.ind-%var1798X) (bvult input.ind-%var1798X input.dst.llvm-%n))))
 (let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1798X)))
 (= $x174 $x189))))
 ))
 (let (($x37 (and $x294 $x291)))
 (let (($x68 (= $x37 true)))
 (let (($x24 (forall ((input.ind-%var1793X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var1793X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x73))))
 (let ((?x151 (input.spec-%var-x-1.1.1 input.ind-%var1793X)))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1793X)))
 (=> $x162 (= ?x151 ?x23))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1792X (_ BitVec 32)) )(let (($x189 (and (bvule (_ bv0 32) input.ind-%var1792X) (bvult input.ind-%var1792X input.dst.llvm-%n))))
 (let (($x162 (input.spec-%var-x-1.0.1 input.ind-%var1792X)))
 (= $x162 $x189))))
 ))
 (let (($x285 (and $x129 $x24)))
 (let (($x177 (= $x285 true)))
 (let ((?x257 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x257)))
 (let (($x223 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x223 true)))
 (let (($x318 (= $x15 true)))
 (let (($x252 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x224 (= $x252 true)))
 (let (($x7 (= $x224 true)))
 (let (($x42 (= $x7 true)))
 (let (($x80 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x185 (= $x80 true)))
 (let (($x176 (= $x185 true)))
 (let (($x164 (= $x176 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x302 (bvsub ?x120 ?x157)))
 (let (($x312 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x302) (bvult ?x120 ?x302))))
 (let (($x296 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x50 (ite $x296 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x13 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x67 (bvmul (_ bv4 64) ?x13)))
 (let ((?x95 ((_ extract 63 32) ?x67)))
 (let (($x180 (= ?x95 ?x50)))
 (let (($x263 (and $x180 $x312)))
 (let (($x87 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x103 (and $x87 $x263)))
 (let (($x105 (= true $x103)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x52 (=> $x119 $x105)))
 (let (($x287 (= $x52 true)))
 (let (($x206 (= $x287 true)))
 (let (($x212 (= $x206 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x85 true)))
 (let (($x319 (= $x83 true)))
 (let (($x84 (= $x319 true)))
 (let (($x168 (= $x119 true)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let ((?x307 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x307)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x183)))
 (let ((?x264 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x264)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x194 $x106)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x65 $x277)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x232 $x317)))
 (let (($x320 (not $x154)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x297 $x14)))
 (let (($x26 (and (not $x188) $x320)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x280 $x260)))
 (let (($x128 (not $x72)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x200 $x235)))
 (let (($x136 (and (not $x21) $x128)))
 (let (($x166 (and (and (and (and (and (and $x136 $x26) $x216) $x38) $x102) $x22) $x278)))
 (let (($x55 (and $x166 $x45)))
 (let (($x254 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x276 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x276)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x276)))
 (let (($x101 (or false (or false (and (and true (or $x39 $x130)) (or $x64 $x254))))))
 (let (($x239 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x101)))
 (let (($x158 (and $x239 $x55)))
 (let (($x59 (= $x158 true)))
 (let (($x33 (= $x59 true)))
 (let (($x179 (= $x33 true)))
 (let (($x272 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x201 (= $x272 true)))
 (let (($x122 (= $x201 true)))
 (let (($x244 (= $x122 true)))
 (let ((?x279 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x43 (= (_ bv0 2) ?x279)))
 (let (($x259 (= $x43 true)))
 (let (($x139 (= $x259 true)))
 (let ((?x109 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x109)))
 (let (($x273 (= ?x163 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x98 (= $x273 true)))
 (let (($x237 (= $x98 true)))
 (let (($x193 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x6 (= $x193 true)))
 (let (($x253 (= $x6 true)))
 (let (($x142 (= $x253 true)))
 (let (($x236 (and $x142 $x237)))
 (let (($x137 (and $x236 $x139)))
 (let (($x261 (and $x137 $x244)))
 (let (($x138 (and $x261 $x179)))
 (let (($x270 (and $x138 $x220)))
 (let (($x150 (and $x270 $x84)))
 (let (($x195 (and $x150 $x212)))
 (let (($x125 (and $x195 $x164)))
 (let (($x44 (and $x125 $x42)))
 (let (($x315 (and $x44 $x318)))
 (let (($x255 (and $x315 $x177)))
 (let (($x301 (and $x255 $x68)))
 (let (($x92 (and $x301 $x265)))
 (let (($x16 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x134 (ite $x16 (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x134 (_ bv1 32))))
 (let (($x76 (and $x225 $x92)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x305 (and $x159 $x76)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x60 (and $x5 $x305)))
 (let (($x30 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x217 (and $x30 $x60)))
 (let (($x57 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x169 (bvadd ?x120 (_ bv3 32))))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x169)))
 (let (($x208 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x169)))
 (let (($x155 (or false (or false (and (and true (or $x215 $x208)) (or $x156 $x57))))))
 (let (($x226 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x155)))
 (let (($x124 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x155)))
 (let (($x172 (and $x124 $x217)))
 (let (($x28 (=> $x172 $x245)))
 (not $x28))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (bvule ?x79 input.dst.llvm-%n)))
 (let (($x173 (= $x66 true)))
 (let (($x121 (= $x173 true)))
 (let (($x133 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1828X)))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var1828X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1828X)))
 (=> $x151 (= ?x23 ?x141))))))
 ))
 (let (($x219 (forall ((input.ind-%var1827X (_ BitVec 32)) )(let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1827X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1827X)))
 (= $x151 $x225))))
 ))
 (let (($x295 (and $x219 $x133)))
 (let (($x160 (= $x295 true)))
 (let (($x289 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1822X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x265))))
 (let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1822X)))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (=> $x225 (= ?x141 ?x172))))))))
 ))
 (let (($x99 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var1821X) (bvult input.ind-%var1821X input.dst.llvm-%n))))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (= $x225 $x231))))
 ))
 (let (($x303 (and $x99 $x289)))
 (let (($x53 (= $x303 true)))
 (let (($x209 (forall ((input.ind-%var1816X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1816X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x265))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var1816X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1816X)))
 (=> $x151 (= ?x23 ?x172))))))))
 ))
 (let (($x71 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var1815X) (bvult input.ind-%var1815X input.dst.llvm-%n))))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1815X)))
 (= $x151 $x231))))
 ))
 (let (($x245 (and $x71 $x209)))
 (let (($x28 (= $x245 true)))
 (let ((?x315 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x315)))
 (let (($x162 (= ?x274 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x162 true)))
 (let (($x27 (= $x69 true)))
 (let (($x257 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x46 (= $x257 true)))
 (let (($x223 (= $x46 true)))
 (let (($x15 (= $x223 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x224 (= $x252 true)))
 (let (($x7 (= $x224 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x263 (bvsub ?x120 ?x157)))
 (let (($x287 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x263) (bvult ?x120 ?x263))))
 (let (($x140 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x192 (ite $x140 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x180 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvmul (_ bv4 64) ?x180)))
 (let ((?x302 ((_ extract 63 32) ?x205)))
 (let (($x312 (= ?x302 ?x192)))
 (let (($x206 (and $x312 $x287)))
 (let (($x296 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x212 (and $x296 $x206)))
 (let (($x195 (= true $x212)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (=> $x119 $x195)))
 (let (($x185 (= $x80 true)))
 (let (($x176 (= $x185 true)))
 (let (($x164 (= $x176 true)))
 (let (($x308 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x83 (= $x119 true)))
 (let (($x319 (= $x83 true)))
 (let (($x84 (= $x319 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x166)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x183)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x277)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x106 $x102)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x31 $x227)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x26 $x282)))
 (let (($x216 (not $x196)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x317 $x154)))
 (let (($x234 (and (not $x320) $x216)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x136 $x297)))
 (let (($x188 (not $x14)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x130 $x275)))
 (let (($x232 (and (not $x128) $x188)))
 (let (($x179 (and (and (and (and (and (and $x232 $x234) $x203) $x194) $x264) $x304) $x278)))
 (let (($x138 (and $x179 $x307)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x280 (or false (or false (and (and true (or $x29 $x269)) (or $x239 $x200))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x168 (and $x72 $x138)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let (($x270 (= $x220 true)))
 (let (($x261 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x261 true)))
 (let (($x61 (= $x251 true)))
 (let (($x281 (= $x61 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x272 (= (_ bv0 2) ?x137)))
 (let (($x201 (= $x272 true)))
 (let (($x122 (= $x201 true)))
 (let ((?x98 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x237 (bvneg ?x98)))
 (let (($x147 (= ?x237 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x279 (= $x147 true)))
 (let (($x43 (= $x279 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x191 true)))
 (let (($x109 (= $x165 true)))
 (let (($x163 (= $x109 true)))
 (let (($x259 (and $x163 $x43)))
 (let (($x244 (and $x259 $x122)))
 (let (($x276 (and $x244 $x281)))
 (let (($x85 (and $x276 $x270)))
 (let (($x150 (and $x85 $x84)))
 (let (($x13 (and $x150 $x311)))
 (let (($x125 (and $x13 $x164)))
 (let (($x44 (and $x125 $x42)))
 (let (($x318 (and $x44 $x15)))
 (let (($x189 (and $x318 $x27)))
 (let (($x104 (and $x189 $x28)))
 (let (($x267 (and $x104 $x53)))
 (let (($x248 (and $x267 $x160)))
 (let (($x193 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x6 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x6 (_ bv1 32))))
 (let (($x86 (and $x253 $x248)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x40 (and $x56 $x86)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x149 $x40)))
 (let (($x115 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x135 (and $x115 $x123)))
 (let (($x81 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd ?x120 (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x54 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x208)))
 (let (($x124 (or false (or false (and (and true (or $x186 $x54)) (or $x228 $x81))))))
 (let (($x30 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x124)))
 (let (($x47 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x124)))
 (let (($x116 (and $x47 $x135)))
 (let (($x246 (=> $x116 $x121)))
 (not $x246))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x66 (bvule ?x79 input.dst.llvm-%n)))
 (let (($x173 (= $x66 true)))
 (let (($x121 (= $x173 true)))
 (let (($x133 (forall ((input.ind-%var1828X (_ BitVec 32)) )(let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1828X)))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var1828X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1828X)))
 (=> $x151 (= ?x23 ?x141))))))
 ))
 (let (($x219 (forall ((input.ind-%var1827X (_ BitVec 32)) )(let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1827X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1827X)))
 (= $x151 $x225))))
 ))
 (let (($x295 (and $x219 $x133)))
 (let (($x160 (= $x295 true)))
 (let (($x289 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1822X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x265))))
 (let ((?x141 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1822X)))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1822X)))
 (=> $x225 (= ?x141 ?x172))))))))
 ))
 (let (($x99 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var1821X) (bvult input.ind-%var1821X input.dst.llvm-%n))))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (= $x225 $x231))))
 ))
 (let (($x303 (and $x99 $x289)))
 (let (($x53 (= $x303 true)))
 (let (($x209 (forall ((input.ind-%var1816X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var1816X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x265))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var1816X)))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1816X)))
 (=> $x151 (= ?x23 ?x172))))))))
 ))
 (let (($x71 (forall ((input.ind-%var1815X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var1815X) (bvult input.ind-%var1815X input.dst.llvm-%n))))
 (let (($x151 (input.spec-%var-x-1.0.1 input.ind-%var1815X)))
 (= $x151 $x231))))
 ))
 (let (($x245 (and $x71 $x209)))
 (let (($x28 (= $x245 true)))
 (let ((?x315 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x274 (bvneg ?x315)))
 (let (($x162 (= ?x274 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x162 true)))
 (let (($x27 (= $x69 true)))
 (let (($x257 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x46 (= $x257 true)))
 (let (($x223 (= $x46 true)))
 (let (($x15 (= $x223 true)))
 (let (($x252 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x224 (= $x252 true)))
 (let (($x7 (= $x224 true)))
 (let (($x42 (= $x7 true)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let ((?x263 (bvsub ?x120 ?x157)))
 (let (($x287 (ite (bvsge ?x157 (_ bv0 32)) (bvuge ?x120 ?x263) (bvult ?x120 ?x263))))
 (let (($x140 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x192 (ite $x140 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x180 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x205 (bvmul (_ bv4 64) ?x180)))
 (let ((?x302 ((_ extract 63 32) ?x205)))
 (let (($x312 (= ?x302 ?x192)))
 (let (($x206 (and $x312 $x287)))
 (let (($x296 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x212 (and $x296 $x206)))
 (let (($x195 (= true $x212)))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x80 (=> $x119 $x195)))
 (let (($x185 (= $x80 true)))
 (let (($x176 (= $x185 true)))
 (let (($x164 (= $x176 true)))
 (let (($x308 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x83 (= $x119 true)))
 (let (($x319 (= $x83 true)))
 (let (($x84 (= $x319 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x166)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x278 (= (_ bv0 32) ?x183)))
 (let ((?x22 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x304 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x22)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x277)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x106 $x102)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x31 $x227)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x26 $x282)))
 (let (($x216 (not $x196)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x320 (and $x317 $x154)))
 (let (($x234 (and (not $x320) $x216)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (and $x136 $x297)))
 (let (($x188 (not $x14)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x130 $x275)))
 (let (($x232 (and (not $x128) $x188)))
 (let (($x179 (and (and (and (and (and (and $x232 $x234) $x203) $x194) $x264) $x304) $x278)))
 (let (($x138 (and $x179 $x307)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x280 (or false (or false (and (and true (or $x29 $x269)) (or $x239 $x200))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x168 (and $x72 $x138)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let (($x270 (= $x220 true)))
 (let (($x261 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x251 (= $x261 true)))
 (let (($x61 (= $x251 true)))
 (let (($x281 (= $x61 true)))
 (let ((?x137 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x272 (= (_ bv0 2) ?x137)))
 (let (($x201 (= $x272 true)))
 (let (($x122 (= $x201 true)))
 (let ((?x98 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x237 (bvneg ?x98)))
 (let (($x147 (= ?x237 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x279 (= $x147 true)))
 (let (($x43 (= $x279 true)))
 (let (($x191 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x165 (= $x191 true)))
 (let (($x109 (= $x165 true)))
 (let (($x163 (= $x109 true)))
 (let (($x259 (and $x163 $x43)))
 (let (($x244 (and $x259 $x122)))
 (let (($x276 (and $x244 $x281)))
 (let (($x85 (and $x276 $x270)))
 (let (($x150 (and $x85 $x84)))
 (let (($x13 (and $x150 $x311)))
 (let (($x125 (and $x13 $x164)))
 (let (($x44 (and $x125 $x42)))
 (let (($x318 (and $x44 $x15)))
 (let (($x189 (and $x318 $x27)))
 (let (($x104 (and $x189 $x28)))
 (let (($x267 (and $x104 $x53)))
 (let (($x248 (and $x267 $x160)))
 (let (($x193 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x6 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x6 (_ bv1 32))))
 (let (($x86 (and $x253 $x248)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x40 (and $x56 $x86)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x149 $x40)))
 (let (($x115 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x135 (and $x115 $x123)))
 (let (($x81 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd ?x120 (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x54 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x208)))
 (let (($x124 (or false (or false (and (and true (or $x186 $x54)) (or $x228 $x81))))))
 (let (($x30 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x124)))
 (let (($x47 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x124)))
 (let (($x116 (and $x47 $x135)))
 (let (($x246 (=> $x116 $x121)))
 (not $x246))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (not $x119)))
 (let (($x256 (= $x152 false)))
 (let (($x314 (= $x256 true)))
 (let (($x255 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1851X)))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1851X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1851X)))
 (=> $x287 (= ?x257 ?x199))))))
 ))
 (let (($x49 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1850X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1850X)))
 (= $x287 $x104))))
 ))
 (let (($x174 (and $x49 $x255)))
 (let (($x177 (= $x174 true)))
 (let (($x36 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var1845X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x217))))
 (let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1845X)))
 (let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1845X)))
 (=> $x104 (= ?x199 ?x178))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1844X (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) input.ind-%var1844X) (bvult input.ind-%var1844X input.dst.llvm-%n))))
 (let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1844X)))
 (= $x104 $x125))))
 ))
 (let (($x143 (and $x289 $x36)))
 (let (($x39 (= $x143 true)))
 (let (($x172 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var1839X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x217))))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1839X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1839X)))
 (=> $x287 (= ?x257 ?x178))))))))
 ))
 (let (($x224 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) input.ind-%var1838X) (bvult input.ind-%var1838X input.dst.llvm-%n))))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1838X)))
 (= $x287 $x125))))
 ))
 (let (($x35 (and $x224 $x172)))
 (let (($x132 (= $x35 true)))
 (let ((?x205 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x205)))
 (let (($x140 (= ?x302 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x140 true)))
 (let (($x312 (= $x192 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x67 true)))
 (let (($x296 (= $x95 true)))
 (let (($x50 (= $x296 true)))
 (let (($x308 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x85 true)))
 (let (($x319 (= $x83 true)))
 (let (($x84 (= $x319 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x59)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x264 (= (_ bv0 32) ?x227)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x277)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x194)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x65 $x158)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x55 $x31)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x320 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x320 $x9)))
 (let (($x282 (not $x26)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x232 $x317)))
 (let (($x216 (and (not $x154) $x282)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x128 $x117)))
 (let (($x297 (not $x136)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x276 $x181)))
 (let (($x188 (and (not $x275) $x297)))
 (let (($x166 (and (and (and (and (and (and $x188 $x216) $x45) $x203) $x106) $x102) $x264)))
 (let (($x307 (and $x166 $x22)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x280 (or false (or false (and (and true (or $x29 $x269)) (or $x239 $x200))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x138 (and $x130 $x307)))
 (let (($x168 (= $x138 true)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let (($x122 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x122 true)))
 (let (($x261 (= $x244 true)))
 (let (($x251 (= $x261 true)))
 (let ((?x259 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x139 (= (_ bv0 2) ?x259)))
 (let (($x137 (= $x139 true)))
 (let (($x272 (= $x137 true)))
 (let ((?x18 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x18)))
 (let (($x237 (= ?x273 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x253 true)))
 (let (($x191 (= $x142 true)))
 (let (($x165 (= $x191 true)))
 (let (($x279 (and $x165 $x147)))
 (let (($x201 (and $x279 $x272)))
 (let (($x61 (and $x201 $x251)))
 (let (($x270 (and $x61 $x220)))
 (let (($x150 (and $x270 $x84)))
 (let (($x13 (and $x150 $x311)))
 (let (($x180 (and $x13 $x50)))
 (let (($x103 (and $x180 $x312)))
 (let (($x209 (and $x103 $x132)))
 (let (($x229 (and $x209 $x39)))
 (let (($x175 (and $x229 $x177)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x16 $x175)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x68 (and $x159 $x108)))
 (let (($x202 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x202 $x68)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let (($x155 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x120 (_ bv3 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x156 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x47 (or false (or false (and (and true (or $x96 $x156)) (or $x171 $x155))))))
 (let (($x115 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x47)))
 (let (($x112 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x47)))
 (let (($x241 (and $x112 $x41)))
 (let (($x310 (=> $x241 $x314)))
 (not $x310))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (not $x119)))
 (let (($x256 (= $x152 false)))
 (let (($x314 (= $x256 true)))
 (let (($x255 (forall ((input.ind-%var1851X (_ BitVec 32)) )(let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1851X)))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1851X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1851X)))
 (=> $x287 (= ?x257 ?x199))))))
 ))
 (let (($x49 (forall ((input.ind-%var1850X (_ BitVec 32)) )(let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1850X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1850X)))
 (= $x287 $x104))))
 ))
 (let (($x174 (and $x49 $x255)))
 (let (($x177 (= $x174 true)))
 (let (($x36 (forall ((input.ind-%var1845X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var1845X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x217))))
 (let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1845X)))
 (let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1845X)))
 (=> $x104 (= ?x199 ?x178))))))))
 ))
 (let (($x289 (forall ((input.ind-%var1844X (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) input.ind-%var1844X) (bvult input.ind-%var1844X input.dst.llvm-%n))))
 (let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1844X)))
 (= $x104 $x125))))
 ))
 (let (($x143 (and $x289 $x36)))
 (let (($x39 (= $x143 true)))
 (let (($x172 (forall ((input.ind-%var1839X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var1839X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x217))))
 (let ((?x257 (input.spec-%var-x-1.1.1 input.ind-%var1839X)))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1839X)))
 (=> $x287 (= ?x257 ?x178))))))))
 ))
 (let (($x224 (forall ((input.ind-%var1838X (_ BitVec 32)) )(let (($x125 (and (bvule (_ bv0 32) input.ind-%var1838X) (bvult input.ind-%var1838X input.dst.llvm-%n))))
 (let (($x287 (input.spec-%var-x-1.0.1 input.ind-%var1838X)))
 (= $x287 $x125))))
 ))
 (let (($x35 (and $x224 $x172)))
 (let (($x132 (= $x35 true)))
 (let ((?x205 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x302 (bvneg ?x205)))
 (let (($x140 (= ?x302 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x192 (= $x140 true)))
 (let (($x312 (= $x192 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x95 (= $x67 true)))
 (let (($x296 (= $x95 true)))
 (let (($x50 (= $x296 true)))
 (let (($x308 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x85 true)))
 (let (($x319 (= $x83 true)))
 (let (($x84 (= $x319 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x59)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x264 (= (_ bv0 32) ?x227)))
 (let ((?x277 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x277)))
 (let ((?x194 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x194)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x65 $x158)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (and $x55 $x31)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x320 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x320 $x9)))
 (let (($x282 (not $x26)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x232 $x317)))
 (let (($x216 (and (not $x154) $x282)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x128 $x117)))
 (let (($x297 (not $x136)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x276 $x181)))
 (let (($x188 (and (not $x275) $x297)))
 (let (($x166 (and (and (and (and (and (and $x188 $x216) $x45) $x203) $x106) $x102) $x264)))
 (let (($x307 (and $x166 $x22)))
 (let (($x200 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x280 (or false (or false (and (and true (or $x29 $x269)) (or $x239 $x200))))))
 (let (($x130 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x138 (and $x130 $x307)))
 (let (($x168 (= $x138 true)))
 (let (($x293 (= $x168 true)))
 (let (($x220 (= $x293 true)))
 (let (($x122 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x244 (= $x122 true)))
 (let (($x261 (= $x244 true)))
 (let (($x251 (= $x261 true)))
 (let ((?x259 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x139 (= (_ bv0 2) ?x259)))
 (let (($x137 (= $x139 true)))
 (let (($x272 (= $x137 true)))
 (let ((?x18 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x18)))
 (let (($x237 (= ?x273 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let (($x253 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x142 (= $x253 true)))
 (let (($x191 (= $x142 true)))
 (let (($x165 (= $x191 true)))
 (let (($x279 (and $x165 $x147)))
 (let (($x201 (and $x279 $x272)))
 (let (($x61 (and $x201 $x251)))
 (let (($x270 (and $x61 $x220)))
 (let (($x150 (and $x270 $x84)))
 (let (($x13 (and $x150 $x311)))
 (let (($x180 (and $x13 $x50)))
 (let (($x103 (and $x180 $x312)))
 (let (($x209 (and $x103 $x132)))
 (let (($x229 (and $x209 $x39)))
 (let (($x175 (and $x229 $x177)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x108 (and $x16 $x175)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x68 (and $x159 $x108)))
 (let (($x202 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x202 $x68)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let (($x155 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x120 (_ bv3 32))))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x156 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x47 (or false (or false (and (and true (or $x96 $x156)) (or $x171 $x155))))))
 (let (($x115 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x47)))
 (let (($x112 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x47)))
 (let (($x241 (and $x112 $x41)))
 (let (($x310 (=> $x241 $x314)))
 (not $x310))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x6146f8e2)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6146f8e2 x!0)
         (ite (bvule #x6146f8e3 x!0) #x6146f8e3 #x6146f8e2)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0) (input.spec-%var-x-1.1.1 x!0) a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x66df8d98)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8b12ae9c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x6c68937c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8b12ae9f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x66df8d9b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8b12ae9c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x66df8d98)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x6c68937c x!0)
         (ite (bvule #x6c68937d x!0) #x6c68937d #x6c68937c)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x291 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x291 (_ bv0 32))))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (or $x119 $x62)))
 (let (($x89 (= $x37 true)))
 (let (($x247 (= $x89 true)))
 (let (($x271 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let ((?x258 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1902X)))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var1902X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1902X)))
 (=> $x252 (= ?x217 ?x258))))))
 ))
 (let (($x123 (forall ((input.ind-%var1901X (_ BitVec 32)) )(let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1901X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1901X)))
 (= $x252 $x225))))
 ))
 (let (($x110 (and $x123 $x271)))
 (let (($x74 (= $x110 true)))
 (let (($x238 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let ((?x11 (bvadd (bvmul input.ind-%var1896X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x255))))
 (let ((?x258 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1896X)))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1896X)))
 (=> $x225 (= ?x258 ?x41))))))))
 ))
 (let (($x212 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1895X) (bvult input.ind-%var1895X input.dst.llvm-%n))))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1895X)))
 (= $x225 $x27))))
 ))
 (let (($x135 (and $x212 $x238)))
 (let (($x116 (= $x135 true)))
 (let (($x256 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let ((?x11 (bvadd (bvmul input.ind-%var1890X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x255))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var1890X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1890X)))
 (=> $x252 (= ?x217 ?x41))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1889X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1889X) (bvult input.ind-%var1889X input.dst.llvm-%n))))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1889X)))
 (= $x252 $x27))))
 ))
 (let (($x314 (and $x92 $x256)))
 (let (($x310 (= $x314 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x140)))
 (let (($x312 (= ?x192 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x312 true)))
 (let (($x52 (= $x103 true)))
 (let (($x296 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x50 (= $x296 true)))
 (let (($x180 (= $x50 true)))
 (let (($x205 (= $x180 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (= $x87 true)))
 (let (($x13 (= $x311 true)))
 (let (($x67 (= $x13 true)))
 (let (($x319 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x319 true)))
 (let (($x150 (= $x84 true)))
 (let (($x308 (= $x150 true)))
 (let (($x293 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x293 true)))
 (let (($x270 (= $x220 true)))
 (let (($x85 (= $x270 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x59 (= $x166 true)))
 (let (($x22 (= $x59 true)))
 (let (($x307 (= $x22 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x38)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x45)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x304)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (and $x320 $x26)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x196 $x282)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x275 $x14)))
 (let (($x117 (not $x128)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x130 $x276)))
 (let (($x297 (and (not $x181) $x117)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x239 $x200)))
 (let (($x21 (not $x235)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x259 $x139)))
 (let (($x280 (and (not $x101) $x21)))
 (let (($x31 (and (and (and (and (and (and $x280 $x297) $x232) $x154) $x216) $x234) $x33)))
 (let (($x106 (and $x31 $x203)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x29 (or false (or false (and (and true (or $x122 $x244)) (or $x61 $x64))))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x278 (and $x213 $x106)))
 (let (($x277 (= $x278 true)))
 (let (($x102 (= $x277 true)))
 (let (($x179 (= $x102 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x98)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let ((?x142 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x142)))
 (let (($x109 (= ?x191 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x109 true)))
 (let (($x18 (= $x163 true)))
 (let (($x279 (and $x18 $x147)))
 (let (($x227 (and $x279 $x179)))
 (let (($x138 (and $x227 $x307)))
 (let (($x83 (and $x138 $x85)))
 (let (($x51 (and $x83 $x308)))
 (let (($x95 (and $x51 $x67)))
 (let (($x302 (and $x95 $x205)))
 (let (($x287 (and $x302 $x52)))
 (let (($x129 (and $x287 $x310)))
 (let (($x86 (and $x129 $x116)))
 (let (($x42 (and $x86 $x74)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x193 $x42)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x66 (and $x56 $x71)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x5 $x66)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let (($x124 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd ?x120 (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x228 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x112 (or false (or false (and (and true (or $x100 $x228)) (or $x226 $x124))))))
 (let (($x202 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x112)))
 (let (($x169 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x112)))
 (let (($x53 (and $x169 $x153)))
 (let (($x19 (=> $x53 $x247)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x173 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x291 (ite $x173 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (= ?x291 (_ bv0 32))))
 (let (($x119 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x37 (or $x119 $x62)))
 (let (($x89 (= $x37 true)))
 (let (($x247 (= $x89 true)))
 (let (($x271 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let ((?x258 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1902X)))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var1902X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1902X)))
 (=> $x252 (= ?x217 ?x258))))))
 ))
 (let (($x123 (forall ((input.ind-%var1901X (_ BitVec 32)) )(let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1901X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1901X)))
 (= $x252 $x225))))
 ))
 (let (($x110 (and $x123 $x271)))
 (let (($x74 (= $x110 true)))
 (let (($x238 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let ((?x11 (bvadd (bvmul input.ind-%var1896X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x255))))
 (let ((?x258 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1896X)))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1896X)))
 (=> $x225 (= ?x258 ?x41))))))))
 ))
 (let (($x212 (forall ((input.ind-%var1895X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1895X) (bvult input.ind-%var1895X input.dst.llvm-%n))))
 (let (($x225 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1895X)))
 (= $x225 $x27))))
 ))
 (let (($x135 (and $x212 $x238)))
 (let (($x116 (= $x135 true)))
 (let (($x256 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let ((?x11 (bvadd (bvmul input.ind-%var1890X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv1 32))) (select input.dst.llvm-mem ?x11))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x11 (_ bv2 32))) ?x255))))
 (let ((?x217 (input.spec-%var-x-1.1.1 input.ind-%var1890X)))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1890X)))
 (=> $x252 (= ?x217 ?x41))))))))
 ))
 (let (($x92 (forall ((input.ind-%var1889X (_ BitVec 32)) )(let (($x27 (and (bvule (_ bv0 32) input.ind-%var1889X) (bvult input.ind-%var1889X input.dst.llvm-%n))))
 (let (($x252 (input.spec-%var-x-1.0.1 input.ind-%var1889X)))
 (= $x252 $x27))))
 ))
 (let (($x314 (and $x92 $x256)))
 (let (($x310 (= $x314 true)))
 (let ((?x140 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x192 (bvneg ?x140)))
 (let (($x312 (= ?x192 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x103 (= $x312 true)))
 (let (($x52 (= $x103 true)))
 (let (($x296 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x50 (= $x296 true)))
 (let (($x180 (= $x50 true)))
 (let (($x205 (= $x180 true)))
 (let (($x87 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (= $x87 true)))
 (let (($x13 (= $x311 true)))
 (let (($x67 (= $x13 true)))
 (let (($x319 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x84 (= $x319 true)))
 (let (($x150 (= $x84 true)))
 (let (($x308 (= $x150 true)))
 (let (($x293 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x220 (= $x293 true)))
 (let (($x270 (= $x220 true)))
 (let (($x85 (= $x270 true)))
 (let (($x166 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x59 (= $x166 true)))
 (let (($x22 (= $x59 true)))
 (let (($x307 (= $x22 true)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x38)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x45)))
 (let ((?x304 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x304)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x26 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x9)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (and $x320 $x26)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x196 $x282)))
 (let (($x154 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x275 $x14)))
 (let (($x117 (not $x128)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x130 $x276)))
 (let (($x297 (and (not $x181) $x117)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x239 $x200)))
 (let (($x21 (not $x235)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x259 $x139)))
 (let (($x280 (and (not $x101) $x21)))
 (let (($x31 (and (and (and (and (and (and $x280 $x297) $x232) $x154) $x216) $x234) $x33)))
 (let (($x106 (and $x31 $x203)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x29 (or false (or false (and (and true (or $x122 $x244)) (or $x61 $x64))))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x278 (and $x213 $x106)))
 (let (($x277 (= $x278 true)))
 (let (($x102 (= $x277 true)))
 (let (($x179 (= $x102 true)))
 (let ((?x98 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x237 (= (_ bv0 2) ?x98)))
 (let (($x236 (= $x237 true)))
 (let (($x147 (= $x236 true)))
 (let ((?x142 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x191 (bvneg ?x142)))
 (let (($x109 (= ?x191 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x109 true)))
 (let (($x18 (= $x163 true)))
 (let (($x279 (and $x18 $x147)))
 (let (($x227 (and $x279 $x179)))
 (let (($x138 (and $x227 $x307)))
 (let (($x83 (and $x138 $x85)))
 (let (($x51 (and $x83 $x308)))
 (let (($x95 (and $x51 $x67)))
 (let (($x302 (and $x95 $x205)))
 (let (($x287 (and $x302 $x52)))
 (let (($x129 (and $x287 $x310)))
 (let (($x86 (and $x129 $x116)))
 (let (($x42 (and $x86 $x74)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x193 $x42)))
 (let (($x56 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x66 (and $x56 $x71)))
 (let (($x5 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x153 (and $x5 $x66)))
 (let ((?x157 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x120 (bvadd input.dst.llvm-%x ?x157)))
 (let (($x124 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd ?x120 (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x228 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x112 (or false (or false (and (and true (or $x100 $x228)) (or $x226 $x124))))))
 (let (($x202 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) $x112)))
 (let (($x169 (=> (and $x119 (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32)))) $x112)))
 (let (($x53 (and $x169 $x153)))
 (let (($x19 (=> $x53 $x247)))
 (not $x19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x299 (= $x160 true)))
 (let (($x114 (= $x299 true)))
 (let (($x162 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1925X)))
 (let ((?x108 (input.spec-%var-x-1.1.1 input.ind-%var1925X)))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1925X)))
 (=> $x103 (= ?x108 ?x43))))))
 ))
 (let (($x46 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1924X)))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1924X)))
 (= $x103 $x215))))
 ))
 (let (($x315 (and $x46 $x162)))
 (let (($x274 (= $x315 true)))
 (let (($x132 (forall ((input.ind-%var1919X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var1919X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x116))))
 (let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1919X)))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1919X)))
 (=> $x215 (= ?x43 ?x271))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1918X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1918X) (bvult input.ind-%var1918X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1918X)))
 (= $x215 $x294))))
 ))
 (let (($x172 (and $x19 $x132)))
 (let (($x209 (= $x172 true)))
 (let (($x42 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var1913X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x116))))
 (let ((?x108 (input.spec-%var-x-1.1.1 input.ind-%var1913X)))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1913X)))
 (=> $x103 (= ?x108 ?x271))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X input.dst.llvm-%n))))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1912X)))
 (= $x103 $x294))))
 ))
 (let (($x71 (and $x217 $x42)))
 (let (($x66 (= $x71 true)))
 (let ((?x95 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x296 (bvneg ?x95)))
 (let (($x180 (= ?x296 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x180 true)))
 (let (($x302 (= $x205 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x138)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x22)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x278 $x179)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x106 $x227)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (and $x216 $x194)))
 (let (($x234 (not $x304)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (and $x9 $x26)))
 (let (($x45 (and (not $x282) $x234)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x55 $x317)))
 (let (($x65 (not $x154)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (and $x213 $x259)))
 (let (($x320 (and (not $x232) $x65)))
 (let (($x84 (and (and (and (and (and (and $x320 $x45) $x31) $x203) $x264) $x59) $x307)))
 (let (($x150 (and $x84 $x293)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x200 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x200)))
 (let (($x297 (or false (or false (and (and true (or $x235 $x21)) (or $x136 $x275))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x297)))
 (let (($x308 (and $x188 $x150)))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x61 (= $x251 true)))
 (let (($x64 (= $x61 true)))
 (let (($x260 (= $x64 true)))
 (let (($x269 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x269 true)))
 (let (($x122 (= $x201 true)))
 (let (($x244 (= $x122 true)))
 (let (($x236 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (= $x236 true)))
 (let (($x279 (= $x147 true)))
 (let (($x137 (= $x279 true)))
 (let ((?x163 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x18 (= (_ bv0 2) ?x163)))
 (let (($x273 (= $x18 true)))
 (let (($x98 (= $x273 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x16 true)))
 (let (($x253 (= $x193 true)))
 (let (($x142 (= $x253 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x77 true)))
 (let (($x149 (= $x5 true)))
 (let (($x159 (= $x149 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x124)))
 (let (($x47 (= ?x30 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x47 true)))
 (let (($x112 (= $x115 true)))
 (let (($x228 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (not $x228)))
 (let (($x171 (= $x57 true)))
 (let (($x81 (= $x171 true)))
 (let (($x226 (= $x81 true)))
 (let (($x202 (and $x226 $x112)))
 (let (($x56 (and $x202 $x159)))
 (let (($x191 (and $x56 $x142)))
 (let (($x237 (and $x191 $x98)))
 (let (($x272 (and $x237 $x137)))
 (let (($x261 (and $x272 $x244)))
 (let (($x72 (and $x261 $x260)))
 (let (($x13 (and $x72 $x311)))
 (let (($x140 (and $x13 $x302)))
 (let (($x153 (and $x140 $x66)))
 (let (($x199 (and $x153 $x209)))
 (let (($x69 (and $x199 $x274)))
 (let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x186 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x186 (_ bv0 32))))
 (let (($x303 (and $x156 $x69)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x120 $x303)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x167 $x78)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x40 (and $x12 $x309)))
 (let (($x281 (=> $x40 $x114)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x160 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x299 (= $x160 true)))
 (let (($x114 (= $x299 true)))
 (let (($x162 (forall ((input.ind-%var1925X (_ BitVec 32)) )(let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1925X)))
 (let ((?x108 (input.spec-%var-x-1.1.1 input.ind-%var1925X)))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1925X)))
 (=> $x103 (= ?x108 ?x43))))))
 ))
 (let (($x46 (forall ((input.ind-%var1924X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1924X)))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1924X)))
 (= $x103 $x215))))
 ))
 (let (($x315 (and $x46 $x162)))
 (let (($x274 (= $x315 true)))
 (let (($x132 (forall ((input.ind-%var1919X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var1919X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x116))))
 (let ((?x43 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1919X)))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1919X)))
 (=> $x215 (= ?x43 ?x271))))))))
 ))
 (let (($x19 (forall ((input.ind-%var1918X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1918X) (bvult input.ind-%var1918X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1918X)))
 (= $x215 $x294))))
 ))
 (let (($x172 (and $x19 $x132)))
 (let (($x209 (= $x172 true)))
 (let (($x42 (forall ((input.ind-%var1913X (_ BitVec 32)) )(let ((?x105 (bvadd (bvmul input.ind-%var1913X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem ?x105))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x105 (_ bv2 32))) ?x116))))
 (let ((?x108 (input.spec-%var-x-1.1.1 input.ind-%var1913X)))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1913X)))
 (=> $x103 (= ?x108 ?x271))))))))
 ))
 (let (($x217 (forall ((input.ind-%var1912X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var1912X) (bvult input.ind-%var1912X input.dst.llvm-%n))))
 (let (($x103 (input.spec-%var-x-1.0.1 input.ind-%var1912X)))
 (= $x103 $x294))))
 ))
 (let (($x71 (and $x217 $x42)))
 (let (($x66 (= $x71 true)))
 (let ((?x95 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x296 (bvneg ?x95)))
 (let (($x180 (= ?x296 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x205 (= $x180 true)))
 (let (($x302 (= $x205 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x138)))
 (let ((?x22 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x307 (= (_ bv0 32) ?x22)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x166)))
 (let ((?x102 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x102)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x227 (and $x278 $x179)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x106 $x227)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (and $x216 $x194)))
 (let (($x234 (not $x304)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (and $x9 $x26)))
 (let (($x45 (and (not $x282) $x234)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x55 $x317)))
 (let (($x65 (not $x154)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (and $x213 $x259)))
 (let (($x320 (and (not $x232) $x65)))
 (let (($x84 (and (and (and (and (and (and $x320 $x45) $x31) $x203) $x264) $x59) $x307)))
 (let (($x150 (and $x84 $x293)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x200 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x200)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x200)))
 (let (($x297 (or false (or false (and (and true (or $x235 $x21)) (or $x136 $x275))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x297)))
 (let (($x308 (and $x188 $x150)))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x251 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x61 (= $x251 true)))
 (let (($x64 (= $x61 true)))
 (let (($x260 (= $x64 true)))
 (let (($x269 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (= $x269 true)))
 (let (($x122 (= $x201 true)))
 (let (($x244 (= $x122 true)))
 (let (($x236 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (= $x236 true)))
 (let (($x279 (= $x147 true)))
 (let (($x137 (= $x279 true)))
 (let ((?x163 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x18 (= (_ bv0 2) ?x163)))
 (let (($x273 (= $x18 true)))
 (let (($x98 (= $x273 true)))
 (let (($x16 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x193 (= $x16 true)))
 (let (($x253 (= $x193 true)))
 (let (($x142 (= $x253 true)))
 (let (($x77 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x5 (= $x77 true)))
 (let (($x149 (= $x5 true)))
 (let (($x159 (= $x149 true)))
 (let ((?x124 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x30 (bvneg ?x124)))
 (let (($x47 (= ?x30 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x47 true)))
 (let (($x112 (= $x115 true)))
 (let (($x228 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (not $x228)))
 (let (($x171 (= $x57 true)))
 (let (($x81 (= $x171 true)))
 (let (($x226 (= $x81 true)))
 (let (($x202 (and $x226 $x112)))
 (let (($x56 (and $x202 $x159)))
 (let (($x191 (and $x56 $x142)))
 (let (($x237 (and $x191 $x98)))
 (let (($x272 (and $x237 $x137)))
 (let (($x261 (and $x272 $x244)))
 (let (($x72 (and $x261 $x260)))
 (let (($x13 (and $x72 $x311)))
 (let (($x140 (and $x13 $x302)))
 (let (($x153 (and $x140 $x66)))
 (let (($x199 (and $x153 $x209)))
 (let (($x69 (and $x199 $x274)))
 (let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x186 (ite $x54 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x186 (_ bv0 32))))
 (let (($x303 (and $x156 $x69)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x120 $x303)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x309 (and $x167 $x78)))
 (let (($x12 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x40 (and $x12 $x309)))
 (let (($x281 (=> $x40 $x114)))
 (not $x281))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (not $x12)))
 (let (($x133 (or $x12 $x99)))
 (let (($x15 (= $x133 true)))
 (let (($x75 (= $x15 true)))
 (let (($x176 (forall ((input.ind-%var1948X (_ BitVec 32)) )(let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1948X)))
 (let ((?x247 (input.spec-%var-x-1.1.1 input.ind-%var1948X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1948X)))
 (=> $x248 (= ?x247 ?x107))))))
 ))
 (let (($x195 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1947X)))
 (= $x248 $x182))))
 ))
 (let (($x245 (and $x195 $x176)))
 (let (($x168 (= $x245 true)))
 (let (($x121 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1942X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x114))))
 (let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1942X)))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (=> $x182 (= ?x107 ?x219))))))))
 ))
 (let (($x49 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1941X) (bvult input.ind-%var1941X input.dst.llvm-%n))))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (= $x182 $x74))))
 ))
 (let (($x23 (and $x49 $x121)))
 (let (($x36 (= $x23 true)))
 (let (($x178 (forall ((input.ind-%var1936X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1936X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x114))))
 (let ((?x247 (input.spec-%var-x-1.1.1 input.ind-%var1936X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1936X)))
 (=> $x248 (= ?x247 ?x219))))))))
 ))
 (let (($x71 (forall ((input.ind-%var1935X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1935X) (bvult input.ind-%var1935X input.dst.llvm-%n))))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1935X)))
 (= $x248 $x74))))
 ))
 (let (($x11 (and $x71 $x178)))
 (let (($x192 (= $x11 true)))
 (let ((?x108 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x108)))
 (let (($x177 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x177 true)))
 (let (($x105 (= $x258 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x27 true)))
 (let (($x294 (= $x126 true)))
 (let (($x92 (= $x294 true)))
 (let (($x205 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (= $x205 true)))
 (let (($x140 (= $x302 true)))
 (let (($x208 (= $x140 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x95 (= $x67 true)))
 (let (($x296 (= $x95 true)))
 (let (($x50 (= $x296 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x166)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x264)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x85 $x278)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x203 $x277)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (and $x216 $x194)))
 (let (($x234 (not $x304)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x26 $x282)))
 (let (($x220 (and (not $x158) $x234)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x55 $x317)))
 (let (($x65 (not $x154)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x235 $x239)))
 (let (($x9 (and (not $x196) $x65)))
 (let (($x293 (and (and (and (and (and (and $x9 $x220) $x31) $x38) $x102) $x227) $x83)))
 (let (($x150 (and $x293 $x59)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x213 (or false (or false (and (and true (or $x276 $x136)) (or $x14 $x128))))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x308 (and $x232 $x150)))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x139 (= $x72 true)))
 (let (($x101 (= $x139 true)))
 (let (($x183 (= $x101 true)))
 (let ((?x261 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x251 (= (_ bv0 2) ?x261)))
 (let (($x61 (= $x251 true)))
 (let (($x64 (= $x61 true)))
 (let ((?x147 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x147)))
 (let (($x272 (= ?x279 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x272 true)))
 (let (($x201 (= $x269 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x18 (= $x163 true)))
 (let (($x273 (= $x18 true)))
 (let (($x98 (= $x273 true)))
 (let (($x122 (and $x98 $x201)))
 (let (($x260 (and $x122 $x64)))
 (let (($x145 (and $x260 $x183)))
 (let (($x13 (and $x145 $x311)))
 (let (($x180 (and $x13 $x50)))
 (let (($x103 (and $x180 $x208)))
 (let (($x217 (and $x103 $x92)))
 (let (($x28 (and $x217 $x105)))
 (let (($x287 (and $x28 $x192)))
 (let (($x318 (and $x287 $x36)))
 (let (($x143 (and $x318 $x168)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x295 (and $x191 $x143)))
 (let (($x253 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x44 (and $x253 $x295)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x56 $x44)))
 (let ((?x167 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvadd input.dst.llvm-%x ?x167)))
 (let (($x112 (bvugt ?x157 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd ?x157 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x226 (bvugt ?x157 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x5 (or false (or false (and (and true (or $x81 $x226)) (or $x115 $x112))))))
 (let (($x159 (=> (bvule ?x157 (bvsub (bvadd ?x157 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x91 (=> (and $x12 (bvule ?x157 (bvsub (bvadd ?x157 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x39 (and $x91 $x60)))
 (let (($x285 (=> $x39 $x75)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x99 (not $x12)))
 (let (($x133 (or $x12 $x99)))
 (let (($x15 (= $x133 true)))
 (let (($x75 (= $x15 true)))
 (let (($x176 (forall ((input.ind-%var1948X (_ BitVec 32)) )(let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1948X)))
 (let ((?x247 (input.spec-%var-x-1.1.1 input.ind-%var1948X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1948X)))
 (=> $x248 (= ?x247 ?x107))))))
 ))
 (let (($x195 (forall ((input.ind-%var1947X (_ BitVec 32)) )(let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1947X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1947X)))
 (= $x248 $x182))))
 ))
 (let (($x245 (and $x195 $x176)))
 (let (($x168 (= $x245 true)))
 (let (($x121 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1942X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x114))))
 (let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1942X)))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (=> $x182 (= ?x107 ?x219))))))))
 ))
 (let (($x49 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1941X) (bvult input.ind-%var1941X input.dst.llvm-%n))))
 (let (($x182 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (= $x182 $x74))))
 ))
 (let (($x23 (and $x49 $x121)))
 (let (($x36 (= $x23 true)))
 (let (($x178 (forall ((input.ind-%var1936X (_ BitVec 32)) )(let ((?x309 (bvadd (bvmul input.ind-%var1936X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x114))))
 (let ((?x247 (input.spec-%var-x-1.1.1 input.ind-%var1936X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1936X)))
 (=> $x248 (= ?x247 ?x219))))))))
 ))
 (let (($x71 (forall ((input.ind-%var1935X (_ BitVec 32)) )(let (($x74 (and (bvule (_ bv0 32) input.ind-%var1935X) (bvult input.ind-%var1935X input.dst.llvm-%n))))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1935X)))
 (= $x248 $x74))))
 ))
 (let (($x11 (and $x71 $x178)))
 (let (($x192 (= $x11 true)))
 (let ((?x108 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x104 (bvneg ?x108)))
 (let (($x177 (= ?x104 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x177 true)))
 (let (($x105 (= $x258 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x126 (= $x27 true)))
 (let (($x294 (= $x126 true)))
 (let (($x92 (= $x294 true)))
 (let (($x205 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (= $x205 true)))
 (let (($x140 (= $x302 true)))
 (let (($x208 (= $x140 true)))
 (let (($x67 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x95 (= $x67 true)))
 (let (($x296 (= $x95 true)))
 (let (($x50 (= $x296 true)))
 (let ((?x166 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x166)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x264)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x179)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x278 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x85 $x278)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x102 (and $x203 $x277)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x304 (and $x216 $x194)))
 (let (($x234 (not $x304)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x26 $x282)))
 (let (($x220 (and (not $x158) $x234)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x55 $x317)))
 (let (($x65 (not $x154)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (and $x235 $x239)))
 (let (($x9 (and (not $x196) $x65)))
 (let (($x293 (and (and (and (and (and (and $x9 $x220) $x31) $x38) $x102) $x227) $x83)))
 (let (($x150 (and $x293 $x59)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x130 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x130)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x130)))
 (let (($x213 (or false (or false (and (and true (or $x276 $x136)) (or $x14 $x128))))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x213)))
 (let (($x308 (and $x232 $x150)))
 (let (($x51 (= $x308 true)))
 (let (($x87 (= $x51 true)))
 (let (($x311 (= $x87 true)))
 (let (($x72 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x139 (= $x72 true)))
 (let (($x101 (= $x139 true)))
 (let (($x183 (= $x101 true)))
 (let ((?x261 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x251 (= (_ bv0 2) ?x261)))
 (let (($x61 (= $x251 true)))
 (let (($x64 (= $x61 true)))
 (let ((?x147 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x279 (bvneg ?x147)))
 (let (($x272 (= ?x279 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x269 (= $x272 true)))
 (let (($x201 (= $x269 true)))
 (let (($x163 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x18 (= $x163 true)))
 (let (($x273 (= $x18 true)))
 (let (($x98 (= $x273 true)))
 (let (($x122 (and $x98 $x201)))
 (let (($x260 (and $x122 $x64)))
 (let (($x145 (and $x260 $x183)))
 (let (($x13 (and $x145 $x311)))
 (let (($x180 (and $x13 $x50)))
 (let (($x103 (and $x180 $x208)))
 (let (($x217 (and $x103 $x92)))
 (let (($x28 (and $x217 $x105)))
 (let (($x287 (and $x28 $x192)))
 (let (($x318 (and $x287 $x36)))
 (let (($x143 (and $x318 $x168)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x295 (and $x191 $x143)))
 (let (($x253 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x44 (and $x253 $x295)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x56 $x44)))
 (let ((?x167 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x157 (bvadd input.dst.llvm-%x ?x167)))
 (let (($x112 (bvugt ?x157 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x171 (bvadd ?x157 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x171)))
 (let (($x226 (bvugt ?x157 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x171)))
 (let (($x5 (or false (or false (and (and true (or $x81 $x226)) (or $x115 $x112))))))
 (let (($x159 (=> (bvule ?x157 (bvsub (bvadd ?x157 (_ bv4 32)) (_ bv1 32))) $x5)))
 (let (($x91 (=> (and $x12 (bvule ?x157 (bvsub (bvadd ?x157 (_ bv4 32)) (_ bv1 32)))) $x5)))
 (let (($x39 (and $x91 $x60)))
 (let (($x285 (=> $x39 $x75)))
 (not $x285)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x130)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x64 $x139)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x61 $x101)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x147 $x279)))
 (let (($x272 (not $x137)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x98 $x237)))
 (let (($x201 (and (not $x236) $x272)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x191 $x165)))
 (let (($x163 (not $x109)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x171 $x81)))
 (let (($x273 (and (not $x142) $x163)))
 (let (($x117 (and (and (and (and (and (and $x273 $x201) $x244) $x251) $x183) $x21) $x259)))
 (let (($x297 (and $x117 $x276)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x16 (or false (or false (and (and true (or $x115 $x47)) (or $x5 $x159))))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x133 (and $x253 $x297)))
 (let (($x15 (= $x133 true)))
 (let (($x75 (= $x15 true)))
 (let (($x168 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let ((?x263 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1960X)))
 (let ((?x126 (input.spec-%var-x-1.1.1 input.ind-%var1960X)))
 (let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1960X)))
 (=> $x87 (= ?x126 ?x263))))))
 ))
 (let (($x223 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1959X)))
 (= $x87 $x175))))
 ))
 (let (($x143 (and $x223 $x168)))
 (let (($x295 (= $x143 true)))
 (let (($x52 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var1954X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x206))))
 (let ((?x126 (input.spec-%var-x-1.1.1 input.ind-%var1954X)))
 (let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1954X)))
 (=> $x87 (= ?x126 ?x114))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1953X)))
 (= $x87 (and (bvule (_ bv0 32) input.ind-%var1953X) (bvult input.ind-%var1953X input.dst.llvm-%n)))))
 ))
 (let (($x68 (and $x140 $x52)))
 (let (($x178 (= $x68 true)))
 (let ((?x232 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x9 (concat ?x317 (concat ?x239 ?x232)))))
 (let (($x83 (= ?x26 input.dst.llvm-%x)))
 (let (($x293 (= $x83 true)))
 (let (($x166 (= $x293 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x270 (concat ?x22 (concat ?x319 (concat ?x304 ?x216)))))
 (let (($x179 (= ?x270 input.dst.llvm-%n)))
 (let (($x227 (= $x179 true)))
 (let (($x138 (= $x227 true)))
 (let (($x38 (= input.dst.llvm-%n ?x270)))
 (let (($x282 (= input.dst.llvm-%x ?x26)))
 (let (($x307 (and $x282 $x38)))
 (let (($x85 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x253) $x297)))
 (let (($x106 (and $x85 $x307)))
 (let (($x278 (and true $x106)))
 (let (($x277 (= $x278 true)))
 (let (($x102 (= $x277 true)))
 (let (($x84 (= $x102 true)))
 (let (($x264 (and $x84 $x138)))
 (let (($x59 (and $x264 $x166)))
 (let (($x11 (and $x59 $x178)))
 (let (($x44 (and $x11 $x295)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x157 $x44)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x39 (and $x174 $x60)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x6 $x39)))
 (let (($x285 (=> $x99 $x75)))
 (not $x285))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x276 (= (_ bv0 32) ?x130)))
 (let ((?x280 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x259 (= (_ bv0 32) ?x280)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x64 $x139)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x61 $x101)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (and $x147 $x279)))
 (let (($x272 (not $x137)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x236 (and $x98 $x237)))
 (let (($x201 (and (not $x236) $x272)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x191 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x191 $x165)))
 (let (($x163 (not $x109)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x171 $x81)))
 (let (($x273 (and (not $x142) $x163)))
 (let (($x117 (and (and (and (and (and (and $x273 $x201) $x244) $x251) $x183) $x21) $x259)))
 (let (($x297 (and $x117 $x276)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x16 (or false (or false (and (and true (or $x115 $x47)) (or $x5 $x159))))))
 (let (($x253 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x16)))
 (let (($x133 (and $x253 $x297)))
 (let (($x15 (= $x133 true)))
 (let (($x75 (= $x15 true)))
 (let (($x168 (forall ((input.ind-%var1960X (_ BitVec 32)) )(let ((?x263 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1960X)))
 (let ((?x126 (input.spec-%var-x-1.1.1 input.ind-%var1960X)))
 (let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1960X)))
 (=> $x87 (= ?x126 ?x263))))))
 ))
 (let (($x223 (forall ((input.ind-%var1959X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1959X)))
 (let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1959X)))
 (= $x87 $x175))))
 ))
 (let (($x143 (and $x223 $x168)))
 (let (($x295 (= $x143 true)))
 (let (($x52 (forall ((input.ind-%var1954X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var1954X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x206))))
 (let ((?x126 (input.spec-%var-x-1.1.1 input.ind-%var1954X)))
 (let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1954X)))
 (=> $x87 (= ?x126 ?x114))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1953X (_ BitVec 32)) )(let (($x87 (input.spec-%var-x-1.0.1 input.ind-%var1953X)))
 (= $x87 (and (bvule (_ bv0 32) input.ind-%var1953X) (bvult input.ind-%var1953X input.dst.llvm-%n)))))
 ))
 (let (($x68 (and $x140 $x52)))
 (let (($x178 (= $x68 true)))
 (let ((?x232 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x9 (concat ?x317 (concat ?x239 ?x232)))))
 (let (($x83 (= ?x26 input.dst.llvm-%x)))
 (let (($x293 (= $x83 true)))
 (let (($x166 (= $x293 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x270 (concat ?x22 (concat ?x319 (concat ?x304 ?x216)))))
 (let (($x179 (= ?x270 input.dst.llvm-%n)))
 (let (($x227 (= $x179 true)))
 (let (($x138 (= $x227 true)))
 (let (($x38 (= input.dst.llvm-%n ?x270)))
 (let (($x282 (= input.dst.llvm-%x ?x26)))
 (let (($x307 (and $x282 $x38)))
 (let (($x85 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x253) $x297)))
 (let (($x106 (and $x85 $x307)))
 (let (($x278 (and true $x106)))
 (let (($x277 (= $x278 true)))
 (let (($x102 (= $x277 true)))
 (let (($x84 (= $x102 true)))
 (let (($x264 (and $x84 $x138)))
 (let (($x59 (and $x264 $x166)))
 (let (($x11 (and $x59 $x178)))
 (let (($x44 (and $x11 $x295)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x60 (and $x157 $x44)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x39 (and $x174 $x60)))
 (let (($x6 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x6 $x39)))
 (let (($x285 (=> $x99 $x75)))
 (not $x285))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x23 (= (_ bv0 2) ?x170)))
 (let (($x267 (= $x23 true)))
 (let (($x308 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let ((?x110 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1972X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1972X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1972X)))
 (=> $x140 (= ?x114 ?x110))))))
 ))
 (let (($x248 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1971X)))
 (= $x140 $x104))))
 ))
 (let (($x95 (and $x248 $x308)))
 (let (($x296 (= $x95 true)))
 (let (($x294 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let ((?x99 (bvadd (bvmul input.ind-%var1966X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x285))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1966X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1966X)))
 (=> $x140 (= ?x114 ?x49))))))))
 ))
 (let (($x97 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1965X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var1965X) (bvult input.ind-%var1965X input.dst.llvm-%n)))))
 ))
 (let (($x208 (and $x97 $x294)))
 (let (($x27 (= $x208 true)))
 (let ((?x319 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x307 (concat ?x33 (concat ?x304 ?x319)))))
 (let (($x59 (= ?x106 input.dst.llvm-%x)))
 (let (($x51 (= $x59 true)))
 (let (($x87 (= $x51 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x202 (concat ?x115 (concat ?x226 ?x149)))))
 (let (($x277 (= input.dst.llvm-%n ?x169)))
 (let (($x278 (= input.dst.llvm-%x ?x106)))
 (let (($x102 (and $x278 $x277)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x239)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x317)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x297 $x188)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x276 $x65)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x183 $x14)))
 (let (($x21 (not $x145)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x72 $x139)))
 (let (($x280 (and (not $x101) $x21)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x261 $x251)))
 (let (($x61 (not $x275)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x171 $x81)))
 (let (($x260 (and (not $x181) $x61)))
 (let (($x31 (and (and (and (and (and (and $x260 $x280) $x259) $x130) $x9) $x55) $x235)))
 (let (($x22 (and $x31 $x232)))
 (let (($x279 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x136 (or false (or false (and (and true (or $x163 $x273)) (or $x147 $x279))))))
 (let (($x244 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x253 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x227 (and (and (and $x253 $x244) $x22) $x102)))
 (let (($x138 (and true $x227)))
 (let (($x264 (= $x138 true)))
 (let (($x83 (= $x264 true)))
 (let (($x293 (= $x83 true)))
 (let (($x77 (= ?x169 input.dst.llvm-%n)))
 (let (($x159 (= $x77 true)))
 (let (($x91 (= $x159 true)))
 (let (($x166 (and $x91 $x293)))
 (let (($x180 (and $x166 $x87)))
 (let (($x150 (and $x180 $x27)))
 (let (($x71 (and $x150 $x296)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x167 $x71)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x144 $x287)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x119 $x107)))
 (let (($x89 (=> $x103 $x267)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x170 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x23 (= (_ bv0 2) ?x170)))
 (let (($x267 (= $x23 true)))
 (let (($x308 (forall ((input.ind-%var1972X (_ BitVec 32)) )(let ((?x110 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1972X)))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1972X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1972X)))
 (=> $x140 (= ?x114 ?x110))))))
 ))
 (let (($x248 (forall ((input.ind-%var1971X (_ BitVec 32)) )(let (($x104 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1971X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1971X)))
 (= $x140 $x104))))
 ))
 (let (($x95 (and $x248 $x308)))
 (let (($x296 (= $x95 true)))
 (let (($x294 (forall ((input.ind-%var1966X (_ BitVec 32)) )(let ((?x99 (bvadd (bvmul input.ind-%var1966X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x285))))
 (let ((?x114 (input.spec-%var-x-1.1.1 input.ind-%var1966X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1966X)))
 (=> $x140 (= ?x114 ?x49))))))))
 ))
 (let (($x97 (forall ((input.ind-%var1965X (_ BitVec 32)) )(let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var1965X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var1965X) (bvult input.ind-%var1965X input.dst.llvm-%n)))))
 ))
 (let (($x208 (and $x97 $x294)))
 (let (($x27 (= $x208 true)))
 (let ((?x319 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x106 (concat ?x307 (concat ?x33 (concat ?x304 ?x319)))))
 (let (($x59 (= ?x106 input.dst.llvm-%x)))
 (let (($x51 (= $x59 true)))
 (let (($x87 (= $x51 true)))
 (let ((?x149 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x169 (concat ?x202 (concat ?x115 (concat ?x226 ?x149)))))
 (let (($x277 (= input.dst.llvm-%n ?x169)))
 (let (($x278 (= input.dst.llvm-%x ?x106)))
 (let (($x102 (and $x278 $x277)))
 (let ((?x239 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x232 (= (_ bv0 32) ?x239)))
 (let ((?x317 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x317)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x297 $x188)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x276 $x65)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x183 $x14)))
 (let (($x21 (not $x145)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x72 $x139)))
 (let (($x280 (and (not $x101) $x21)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x261 $x251)))
 (let (($x61 (not $x275)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x171 $x81)))
 (let (($x260 (and (not $x181) $x61)))
 (let (($x31 (and (and (and (and (and (and $x260 $x280) $x259) $x130) $x9) $x55) $x235)))
 (let (($x22 (and $x31 $x232)))
 (let (($x279 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x109 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x109)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x109)))
 (let (($x136 (or false (or false (and (and true (or $x163 $x273)) (or $x147 $x279))))))
 (let (($x244 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x136)))
 (let (($x253 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x227 (and (and (and $x253 $x244) $x22) $x102)))
 (let (($x138 (and true $x227)))
 (let (($x264 (= $x138 true)))
 (let (($x83 (= $x264 true)))
 (let (($x293 (= $x83 true)))
 (let (($x77 (= ?x169 input.dst.llvm-%n)))
 (let (($x159 (= $x77 true)))
 (let (($x91 (= $x159 true)))
 (let (($x166 (and $x91 $x293)))
 (let (($x180 (and $x166 $x87)))
 (let (($x150 (and $x180 $x27)))
 (let (($x71 (and $x150 $x296)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x167 $x71)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x107 (and $x144 $x287)))
 (let (($x119 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x103 (and $x119 $x107)))
 (let (($x89 (=> $x103 $x267)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (forall ((input.ind-%var1990X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1990X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x267))))
 (let ((?x49 (input.spec-%var-x-1.1.1 input.ind-%var1990X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1990X)))
 (=> $x97 (= ?x49 ?x220))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1989X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var1989X) (bvult input.ind-%var1989X input.dst.llvm-%n)))))
 ))
 (let (($x231 (and $x310 $x199)))
 (let (($x206 (= true true)))
 (let (($x274 (and $x206 $x231)))
 (let (($x41 (= $x274 true)))
 (let (($x28 (forall ((input.ind-%var1984X (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1984X)))
 (let ((?x49 (input.spec-%var-x-1.1.1 input.ind-%var1984X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1984X)))
 (=> $x97 (= ?x49 ?x223))))))
 ))
 (let (($x263 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1983X)))
 (= $x97 $x68))))
 ))
 (let (($x205 (and $x263 $x28)))
 (let (($x78 (= $x205 true)))
 (let (($x126 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1978X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x267))))
 (let ((?x49 (input.spec-%var-x-1.1.1 input.ind-%var1978X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1978X)))
 (=> $x97 (= ?x49 ?x220))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1977X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var1977X) (bvult input.ind-%var1977X input.dst.llvm-%n)))))
 ))
 (let (($x254 (and $x75 $x126)))
 (let (($x309 (= $x254 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x235 (concat ?x55 (concat ?x65 ?x85)))))
 (let (($x180 (= ?x31 input.dst.llvm-%x)))
 (let (($x302 (= $x180 true)))
 (let (($x140 (= $x302 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x270 (concat ?x216 (concat ?x194 (concat ?x307 ?x179)))))
 (let (($x166 (= ?x270 input.dst.llvm-%n)))
 (let (($x59 (= $x166 true)))
 (let (($x51 (= $x59 true)))
 (let (($x106 (= input.dst.llvm-%n ?x270)))
 (let (($x239 (= input.dst.llvm-%x ?x31)))
 (let (($x278 (and $x239 $x106)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x145)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x183)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x251 $x260)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x261 $x72)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x137 $x272)))
 (let (($x136 (not $x201)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x147 $x269)))
 (let (($x84 (and (not $x279) $x136)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x163 $x165)))
 (let (($x98 (not $x273)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x155 $x30)))
 (let (($x236 (and (not $x109) $x98)))
 (let (($x130 (and (and (and (and (and (and $x236 $x84) $x81) $x64) $x139) $x128) $x14)))
 (let (($x26 (and $x130 $x21)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x18 (or false (or false (and (and true (or $x124 $x169)) (or $x54 $x56))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x47 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x227 (and (and (and $x47 $x191) $x26) $x278)))
 (let (($x138 (and true $x227)))
 (let (($x264 (= $x138 true)))
 (let (($x83 (= $x264 true)))
 (let (($x293 (= $x83 true)))
 (let (($x87 (and $x293 $x51)))
 (let (($x281 (and $x87 $x140)))
 (let (($x160 (and $x281 $x309)))
 (let (($x299 (and $x160 $x78)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x174 $x299)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x67 (and $x12 $x44)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x74 (and $x120 $x67)))
 (let (($x225 (=> $x74 $x41)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (forall ((input.ind-%var1990X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1990X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x267))))
 (let ((?x49 (input.spec-%var-x-1.1.1 input.ind-%var1990X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1990X)))
 (=> $x97 (= ?x49 ?x220))))))))
 ))
 (let (($x310 (forall ((input.ind-%var1989X (_ BitVec 32)) )(let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1989X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var1989X) (bvult input.ind-%var1989X input.dst.llvm-%n)))))
 ))
 (let (($x231 (and $x310 $x199)))
 (let (($x206 (= true true)))
 (let (($x274 (and $x206 $x231)))
 (let (($x41 (= $x274 true)))
 (let (($x28 (forall ((input.ind-%var1984X (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1984X)))
 (let ((?x49 (input.spec-%var-x-1.1.1 input.ind-%var1984X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1984X)))
 (=> $x97 (= ?x49 ?x223))))))
 ))
 (let (($x263 (forall ((input.ind-%var1983X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1983X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1983X)))
 (= $x97 $x68))))
 ))
 (let (($x205 (and $x263 $x28)))
 (let (($x78 (= $x205 true)))
 (let (($x126 (forall ((input.ind-%var1978X (_ BitVec 32)) )(let ((?x103 (bvadd (bvmul input.ind-%var1978X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv1 32))) (select input.dst.llvm-mem ?x103))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x103 (_ bv2 32))) ?x267))))
 (let ((?x49 (input.spec-%var-x-1.1.1 input.ind-%var1978X)))
 (let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1978X)))
 (=> $x97 (= ?x49 ?x220))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let (($x97 (input.spec-%var-x-1.0.1 input.ind-%var1977X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var1977X) (bvult input.ind-%var1977X input.dst.llvm-%n)))))
 ))
 (let (($x254 (and $x75 $x126)))
 (let (($x309 (= $x254 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x235 (concat ?x55 (concat ?x65 ?x85)))))
 (let (($x180 (= ?x31 input.dst.llvm-%x)))
 (let (($x302 (= $x180 true)))
 (let (($x140 (= $x302 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x270 (concat ?x216 (concat ?x194 (concat ?x307 ?x179)))))
 (let (($x166 (= ?x270 input.dst.llvm-%n)))
 (let (($x59 (= $x166 true)))
 (let (($x51 (= $x59 true)))
 (let (($x106 (= input.dst.llvm-%n ?x270)))
 (let (($x239 (= input.dst.llvm-%x ?x31)))
 (let (($x278 (and $x239 $x106)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x145)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x183)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x260 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x61)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x251 $x260)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x261 $x72)))
 (let (($x64 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x137 $x272)))
 (let (($x136 (not $x201)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x147 $x269)))
 (let (($x84 (and (not $x279) $x136)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x163 $x165)))
 (let (($x98 (not $x273)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x109 (and $x155 $x30)))
 (let (($x236 (and (not $x109) $x98)))
 (let (($x130 (and (and (and (and (and (and $x236 $x84) $x81) $x64) $x139) $x128) $x14)))
 (let (($x26 (and $x130 $x21)))
 (let (($x56 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x193 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x169 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x193)))
 (let (($x18 (or false (or false (and (and true (or $x124 $x169)) (or $x54 $x56))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x18)))
 (let (($x47 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x227 (and (and (and $x47 $x191) $x26) $x278)))
 (let (($x138 (and true $x227)))
 (let (($x264 (= $x138 true)))
 (let (($x83 (= $x264 true)))
 (let (($x293 (= $x83 true)))
 (let (($x87 (and $x293 $x51)))
 (let (($x281 (and $x87 $x140)))
 (let (($x160 (and $x281 $x309)))
 (let (($x299 (and $x160 $x78)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x174 $x299)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x67 (and $x12 $x44)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x74 (and $x120 $x67)))
 (let (($x225 (=> $x74 $x41)))
 (not $x225)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x105 (= $x60 true)))
 (let (($x192 (= $x105 true)))
 (let (($x214 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let ((?x104 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2002X)))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var2002X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var2002X)))
 (=> $x75 (= ?x220 ?x104))))))
 ))
 (let (($x27 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let (($x40 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var2001X)))
 (= $x75 $x40))))
 ))
 (let (($x50 (and $x27 $x214)))
 (let (($x43 (= $x50 true)))
 (let (($x178 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul input.ind-%var1996X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x231))))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var1996X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1996X)))
 (=> $x75 (= ?x220 ?x202))))))))
 ))
 (let (($x23 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1995X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var1995X) (bvult input.ind-%var1995X input.dst.llvm-%n)))))
 ))
 (let (($x245 (and $x23 $x178)))
 (let (($x114 (= $x245 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x227 (concat ?x270 (concat ?x179 ?x38)))))
 (let (($x281 (= ?x138 input.dst.llvm-%n)))
 (let (($x29 (= $x281 true)))
 (let (($x97 (= $x29 true)))
 (let (($x264 (= input.dst.llvm-%n ?x138)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x77 (concat ?x124 (concat ?x228 ?x47)))))
 (let (($x216 (= input.dst.llvm-%x ?x159)))
 (let (($x83 (and $x216 $x264)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x188)))
 (let ((?x320 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x320)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (and $x21 $x102)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (and $x145 $x276)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x72 $x139)))
 (let (($x101 (not $x154)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x275 $x61)))
 (let (($x117 (and (not $x260) $x101)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x196 $x181)))
 (let (($x259 (not $x64)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x277 $x155)))
 (let (($x251 (and (not $x81) $x259)))
 (let (($x232 (and (and (and (and (and (and $x251 $x117) $x14) $x130) $x317) $x282) $x55)))
 (let (($x319 (and $x232 $x65)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x84 (or false (or false (and (and true (or $x273 $x98)) (or $x244 $x137))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x18 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x59 (and (and (and $x18 $x171) $x319) $x83)))
 (let (($x51 (and true $x59)))
 (let (($x87 (= $x51 true)))
 (let (($x180 (= $x87 true)))
 (let (($x302 (= $x180 true)))
 (let (($x91 (= ?x159 input.dst.llvm-%x)))
 (let (($x56 (= $x91 true)))
 (let (($x16 (= $x56 true)))
 (let (($x140 (and $x16 $x302)))
 (let (($x24 (and $x140 $x97)))
 (let (($x195 (and $x24 $x114)))
 (let (($x11 (and $x195 $x43)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x144 $x11)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x7 (and $x6 $x19)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x92 $x7)))
 (let (($x217 (=> $x99 $x192)))
 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x60 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x105 (= $x60 true)))
 (let (($x192 (= $x105 true)))
 (let (($x214 (forall ((input.ind-%var2002X (_ BitVec 32)) )(let ((?x104 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2002X)))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var2002X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var2002X)))
 (=> $x75 (= ?x220 ?x104))))))
 ))
 (let (($x27 (forall ((input.ind-%var2001X (_ BitVec 32)) )(let (($x40 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2001X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var2001X)))
 (= $x75 $x40))))
 ))
 (let (($x50 (and $x27 $x214)))
 (let (($x43 (= $x50 true)))
 (let (($x178 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let ((?x74 (bvadd (bvmul input.ind-%var1996X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x231))))
 (let ((?x220 (input.spec-%var-x-1.1.1 input.ind-%var1996X)))
 (let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1996X)))
 (=> $x75 (= ?x220 ?x202))))))))
 ))
 (let (($x23 (forall ((input.ind-%var1995X (_ BitVec 32)) )(let (($x75 (input.spec-%var-x-1.0.1 input.ind-%var1995X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var1995X) (bvult input.ind-%var1995X input.dst.llvm-%n)))))
 ))
 (let (($x245 (and $x23 $x178)))
 (let (($x114 (= $x245 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x227 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x138 (concat ?x227 (concat ?x270 (concat ?x179 ?x38)))))
 (let (($x281 (= ?x138 input.dst.llvm-%n)))
 (let (($x29 (= $x281 true)))
 (let (($x97 (= $x29 true)))
 (let (($x264 (= input.dst.llvm-%n ?x138)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x77 (concat ?x124 (concat ?x228 ?x47)))))
 (let (($x216 (= input.dst.llvm-%x ?x159)))
 (let (($x83 (and $x216 $x264)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x188)))
 (let ((?x320 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x55 (= (_ bv0 32) ?x320)))
 (let ((?x235 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x26 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x26)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x276 (and $x21 $x102)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x317 (and $x145 $x276)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x14 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (and $x72 $x139)))
 (let (($x101 (not $x154)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x260 (and $x275 $x61)))
 (let (($x117 (and (not $x260) $x101)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x64 (and $x196 $x181)))
 (let (($x259 (not $x64)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x277 $x155)))
 (let (($x251 (and (not $x81) $x259)))
 (let (($x232 (and (and (and (and (and (and $x251 $x117) $x14) $x130) $x317) $x282) $x55)))
 (let (($x319 (and $x232 $x65)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x84 (or false (or false (and (and true (or $x273 $x98)) (or $x244 $x137))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x18 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x59 (and (and (and $x18 $x171) $x319) $x83)))
 (let (($x51 (and true $x59)))
 (let (($x87 (= $x51 true)))
 (let (($x180 (= $x87 true)))
 (let (($x302 (= $x180 true)))
 (let (($x91 (= ?x159 input.dst.llvm-%x)))
 (let (($x56 (= $x91 true)))
 (let (($x16 (= $x56 true)))
 (let (($x140 (and $x16 $x302)))
 (let (($x24 (and $x140 $x97)))
 (let (($x195 (and $x24 $x114)))
 (let (($x11 (and $x195 $x43)))
 (let (($x144 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x144 $x11)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x7 (and $x6 $x19)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x99 (and $x92 $x7)))
 (let (($x217 (=> $x99 $x192)))
 (not $x217))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (forall ((input.ind-%var2020X (_ BitVec 32)) )(let ((?x99 (bvadd (bvmul input.ind-%var2020X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x217))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2020X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2020X)))
 (=> $x23 (= ?x202 ?x52))))))))
 ))
 (let (($x151 (forall ((input.ind-%var2019X (_ BitVec 32)) )(let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2019X)))
 (= $x23 (and (bvule (_ bv0 32) input.ind-%var2019X) (bvult input.ind-%var2019X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x151 $x175)))
 (let (($x44 (= true true)))
 (let (($x209 (and $x44 $x177)))
 (let (($x238 (= $x209 true)))
 (let (($x96 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2014X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2014X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2014X)))
 (=> $x23 (= ?x202 ?x108))))))
 ))
 (let (($x13 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let (($x309 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2013X)))
 (= $x23 $x309))))
 ))
 (let (($x103 (and $x13 $x96)))
 (let (($x203 (= $x103 true)))
 (let (($x271 (forall ((input.ind-%var2008X (_ BitVec 32)) )(let ((?x99 (bvadd (bvmul input.ind-%var2008X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x217))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2008X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2008X)))
 (=> $x23 (= ?x202 ?x52))))))))
 ))
 (let (($x199 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2007X)))
 (= $x23 (and (bvule (_ bv0 32) input.ind-%var2007X) (bvult input.ind-%var2007X input.dst.llvm-%n)))))
 ))
 (let (($x247 (and $x199 $x271)))
 (let (($x186 (= $x247 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x188 (concat ?x232 (concat ?x239 (concat ?x317 ?x102)))))
 (let (($x24 (= ?x188 input.dst.llvm-%x)))
 (let (($x15 (= $x24 true)))
 (let (($x75 (= $x15 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x234 (concat ?x38 (concat ?x270 (concat ?x278 ?x216)))))
 (let (($x140 (= ?x234 input.dst.llvm-%n)))
 (let (($x281 (= $x140 true)))
 (let (($x29 (= $x281 true)))
 (let (($x106 (= input.dst.llvm-%n ?x234)))
 (let (($x65 (= input.dst.llvm-%x ?x188)))
 (let (($x138 (and $x65 $x106)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x101)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x139)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x251)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x64 $x275)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x181 $x61)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x201 $x136)))
 (let (($x171 (not $x84)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (and $x279 $x137)))
 (let (($x277 (and (not $x272) $x171)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x163 $x98)))
 (let (($x147 (not $x236)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x226 $x193)))
 (let (($x244 (and (not $x273) $x147)))
 (let (($x158 (and (and (and (and (and (and $x244 $x277) $x81) $x196) $x260) $x72) $x154)))
 (let (($x145 (and $x158 $x117)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x280 (or false (or false (and (and true (or $x149 $x159)) (or $x253 $x142))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x169 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x59 (and (and (and $x169 $x165) $x145) $x138)))
 (let (($x51 (and true $x59)))
 (let (($x87 (= $x51 true)))
 (let (($x180 (= $x87 true)))
 (let (($x302 (= $x180 true)))
 (let (($x97 (and $x302 $x29)))
 (let (($x89 (and $x97 $x75)))
 (let (($x213 (and $x89 $x186)))
 (let (($x299 (and $x213 $x203)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x12 $x299)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x39 (and $x119 $x133)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x267 (and $x219 $x39)))
 (let (($x132 (=> $x267 $x238)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x175 (forall ((input.ind-%var2020X (_ BitVec 32)) )(let ((?x99 (bvadd (bvmul input.ind-%var2020X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x217))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2020X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2020X)))
 (=> $x23 (= ?x202 ?x52))))))))
 ))
 (let (($x151 (forall ((input.ind-%var2019X (_ BitVec 32)) )(let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2019X)))
 (= $x23 (and (bvule (_ bv0 32) input.ind-%var2019X) (bvult input.ind-%var2019X input.dst.llvm-%n)))))
 ))
 (let (($x177 (and $x151 $x175)))
 (let (($x44 (= true true)))
 (let (($x209 (and $x44 $x177)))
 (let (($x238 (= $x209 true)))
 (let (($x96 (forall ((input.ind-%var2014X (_ BitVec 32)) )(let ((?x108 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2014X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2014X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2014X)))
 (=> $x23 (= ?x202 ?x108))))))
 ))
 (let (($x13 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let (($x309 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2013X)))
 (= $x23 $x309))))
 ))
 (let (($x103 (and $x13 $x96)))
 (let (($x203 (= $x103 true)))
 (let (($x271 (forall ((input.ind-%var2008X (_ BitVec 32)) )(let ((?x99 (bvadd (bvmul input.ind-%var2008X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x217 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem ?x99))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x99 (_ bv2 32))) ?x217))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2008X)))
 (let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2008X)))
 (=> $x23 (= ?x202 ?x52))))))))
 ))
 (let (($x199 (forall ((input.ind-%var2007X (_ BitVec 32)) )(let (($x23 (input.spec-%var-x-1.0.1 input.ind-%var2007X)))
 (= $x23 (and (bvule (_ bv0 32) input.ind-%var2007X) (bvult input.ind-%var2007X input.dst.llvm-%n)))))
 ))
 (let (($x247 (and $x199 $x271)))
 (let (($x186 (= $x247 true)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x232 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x188 (concat ?x232 (concat ?x239 (concat ?x317 ?x102)))))
 (let (($x24 (= ?x188 input.dst.llvm-%x)))
 (let (($x15 (= $x24 true)))
 (let (($x75 (= $x15 true)))
 (let ((?x216 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x270 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x234 (concat ?x38 (concat ?x270 (concat ?x278 ?x216)))))
 (let (($x140 (= ?x234 input.dst.llvm-%n)))
 (let (($x281 (= $x140 true)))
 (let (($x29 (= $x281 true)))
 (let (($x106 (= input.dst.llvm-%n ?x234)))
 (let (($x65 (= input.dst.llvm-%x ?x188)))
 (let (($x138 (and $x65 $x106)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x101)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x154 (= (_ bv0 32) ?x139)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x251)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (and $x64 $x275)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x181 $x61)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x201 $x136)))
 (let (($x171 (not $x84)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (and $x279 $x137)))
 (let (($x277 (and (not $x272) $x171)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x163 $x98)))
 (let (($x147 (not $x236)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x226 $x193)))
 (let (($x244 (and (not $x273) $x147)))
 (let (($x158 (and (and (and (and (and (and $x244 $x277) $x81) $x196) $x260) $x72) $x154)))
 (let (($x145 (and $x158 $x117)))
 (let (($x142 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x159 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x280 (or false (or false (and (and true (or $x149 $x159)) (or $x253 $x142))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x280)))
 (let (($x169 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x59 (and (and (and $x169 $x165) $x145) $x138)))
 (let (($x51 (and true $x59)))
 (let (($x87 (= $x51 true)))
 (let (($x180 (= $x87 true)))
 (let (($x302 (= $x180 true)))
 (let (($x97 (and $x302 $x29)))
 (let (($x89 (and $x97 $x75)))
 (let (($x213 (and $x89 $x186)))
 (let (($x299 (and $x213 $x203)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x133 (and $x12 $x299)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x39 (and $x119 $x133)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x267 (and $x219 $x39)))
 (let (($x132 (=> $x267 $x238)))
 (not $x132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 135 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem ?x6))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv2 32))) ?x190))))
 (let ((?x146 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x8)))
 (let ((?x290 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x93 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x290)))
 (let ((?x63 (bvmul (_ bv4294967295 32) ?x93)))
 (let ((?x17 (bvneg ?x63)))
 (let (($x283 (= ?x17 ?x146)))
 (let (($x20 (= $x283 true)))
 (let (($x32 (forall ((input.ind-%var2038X (_ BitVec 32)) )(let ((?x212 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2038X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2038X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2038X)))
 (=> $x318 (= ?x150 ?x212))))))
 ))
 (let (($x113 (forall ((input.ind-%var2037X (_ BitVec 32)) )(let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2037X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2037X)))
 (= $x318 $x147))))
 ))
 (let (($x82 (and $x113 $x32)))
 (let (($x301 (= $x82 true)))
 (let (($x218 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var2032X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x110))))
 (let ((?x212 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2032X)))
 (let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (=> $x147 (= ?x212 ?x200))))))))
 ))
 (let (($x62 (forall ((input.ind-%var2031X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var2031X) (bvult input.ind-%var2031X input.dst.llvm-%n))))
 (let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2031X)))
 (= $x147 $x294))))
 ))
 (let (($x189 (and $x62 $x218)))
 (let (($x185 (= $x189 true)))
 (let (($x152 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var2026X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x110))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2026X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2026X)))
 (=> $x318 (= ?x150 ?x200))))))))
 ))
 (let (($x263 (forall ((input.ind-%var2025X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var2025X) (bvult input.ind-%var2025X input.dst.llvm-%n))))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2025X)))
 (= $x318 $x294))))
 ))
 (let (($x53 (and $x263 $x152)))
 (let (($x241 (= $x53 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x156)))
 (let (($x67 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let ((?x28 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x28)))
 (let (($x22 (= ?x78 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x22 true)))
 (let (($x206 (= $x68 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x258 (= (_ bv0 2) ?x132)))
 (let (($x5 (= $x258 true)))
 (let (($x77 (= $x5 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x44 true)))
 (let (($x175 (= $x151 true)))
 (let (($x177 (= $x175 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (= $x203 true)))
 (let (($x133 (= $x299 true)))
 (let (($x39 (= $x133 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (= $x108 true)))
 (let (($x182 (= $x57 true)))
 (let (($x96 (= $x182 true)))
 (let (($x86 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 ?x119)) (bvult ?x6 (bvsub ?x6 ?x119)))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x105 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x99 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x99)))
 (let ((?x157 ((_ extract 63 32) ?x194)))
 (let (($x192 (= ?x157 ?x105)))
 (let (($x49 (and $x192 $x86)))
 (let (($x178 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x271 (and $x178 $x49)))
 (let (($x247 (= true $x271)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x219 $x247)))
 (let (($x213 (= $x186 true)))
 (let (($x309 (= $x213 true)))
 (let (($x223 (= $x309 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x23 true)))
 (let (($x112 (= $x274 true)))
 (let (($x41 (= $x112 true)))
 (let (($x24 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x24 true)))
 (let (($x75 (= $x15 true)))
 (let (($x89 (= $x75 true)))
 (let (($x302 (= $x219 true)))
 (let (($x140 (= $x302 true)))
 (let (($x281 (= $x140 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x270)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x38)))
 (let ((?x319 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x102 $x320)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x317 $x188)))
 (let (($x276 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x117 $x145)))
 (let (($x21 (not $x83)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x154 $x158)))
 (let (($x232 (and (not $x101) $x21)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x260 $x9)))
 (let (($x72 (not $x128)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x201 $x136)))
 (let (($x139 (and (not $x61) $x72)))
 (let (($x106 (and (and (and (and (and (and $x139 $x232) $x282) $x276) $x65) $x179) $x304)))
 (let (($x138 (and $x106 $x33)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x259 (or false (or false (and (and true (or $x85 $x155)) (or $x261 $x196))))))
 (let (($x275 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x259)))
 (let (($x59 (and $x275 $x138)))
 (let (($x51 (= $x59 true)))
 (let (($x87 (= $x51 true)))
 (let (($x180 (= $x87 true)))
 (let (($x29 (and $x180 $x281)))
 (let (($x170 (and $x29 $x89)))
 (let (($x310 (and $x170 $x41)))
 (let (($x13 (and $x310 $x223)))
 (let (($x103 (and $x13 $x96)))
 (let (($x267 (and $x103 $x39)))
 (let (($x209 (and $x267 $x177)))
 (let (($x166 (and $x209 $x77)))
 (let (($x225 (and $x166 $x206)))
 (let (($x214 (and $x225 $x114)))
 (let (($x116 (and $x214 $x241)))
 (let (($x34 (and $x116 $x185)))
 (let (($x94 (and $x34 $x301)))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x137 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x137 (_ bv1 32))))
 (let (($x187 (and $x272 $x94)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x163 $x187)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x273 $x73)))
 (let (($x264 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x264 $x10)))
 (let (($x16 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd ?x6 (_ bv3 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x47 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x109 (or false (or false (and (and true (or $x149 $x47)) (or $x253 $x16))))))
 (let (($x165 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x109)))
 (let (($x144 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x109)))
 (let (($x127 (and $x144 $x198)))
 (let (($x298 (=> $x127 $x20)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem ?x6))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x6 (_ bv2 32))) ?x190))))
 (let ((?x146 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x8)))
 (let ((?x290 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x93 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x290)))
 (let ((?x63 (bvmul (_ bv4294967295 32) ?x93)))
 (let ((?x17 (bvneg ?x63)))
 (let (($x283 (= ?x17 ?x146)))
 (let (($x20 (= $x283 true)))
 (let (($x32 (forall ((input.ind-%var2038X (_ BitVec 32)) )(let ((?x212 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2038X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2038X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2038X)))
 (=> $x318 (= ?x150 ?x212))))))
 ))
 (let (($x113 (forall ((input.ind-%var2037X (_ BitVec 32)) )(let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2037X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2037X)))
 (= $x318 $x147))))
 ))
 (let (($x82 (and $x113 $x32)))
 (let (($x301 (= $x82 true)))
 (let (($x218 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var2032X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x110))))
 (let ((?x212 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2032X)))
 (let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (=> $x147 (= ?x212 ?x200))))))))
 ))
 (let (($x62 (forall ((input.ind-%var2031X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var2031X) (bvult input.ind-%var2031X input.dst.llvm-%n))))
 (let (($x147 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2031X)))
 (= $x147 $x294))))
 ))
 (let (($x189 (and $x62 $x218)))
 (let (($x185 (= $x189 true)))
 (let (($x152 (forall ((input.ind-%var2026X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var2026X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x110))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2026X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2026X)))
 (=> $x318 (= ?x150 ?x200))))))))
 ))
 (let (($x263 (forall ((input.ind-%var2025X (_ BitVec 32)) )(let (($x294 (and (bvule (_ bv0 32) input.ind-%var2025X) (bvult input.ind-%var2025X input.dst.llvm-%n))))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2025X)))
 (= $x318 $x294))))
 ))
 (let (($x53 (and $x263 $x152)))
 (let (($x241 (= $x53 true)))
 (let ((?x156 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x126 (bvneg ?x156)))
 (let (($x67 (= ?x126 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let ((?x28 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x28)))
 (let (($x22 (= ?x78 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x68 (= $x22 true)))
 (let (($x206 (= $x68 true)))
 (let ((?x132 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x258 (= (_ bv0 2) ?x132)))
 (let (($x5 (= $x258 true)))
 (let (($x77 (= $x5 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x151 (= $x44 true)))
 (let (($x175 (= $x151 true)))
 (let (($x177 (= $x175 true)))
 (let (($x203 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x299 (= $x203 true)))
 (let (($x133 (= $x299 true)))
 (let (($x39 (= $x133 true)))
 (let (($x108 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (= $x108 true)))
 (let (($x182 (= $x57 true)))
 (let (($x96 (= $x182 true)))
 (let (($x86 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 ?x119)) (bvult ?x6 (bvsub ?x6 ?x119)))))
 (let (($x66 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x105 (ite $x66 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x99 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x194 (bvmul (_ bv4 64) ?x99)))
 (let ((?x157 ((_ extract 63 32) ?x194)))
 (let (($x192 (= ?x157 ?x105)))
 (let (($x49 (and $x192 $x86)))
 (let (($x178 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x271 (and $x178 $x49)))
 (let (($x247 (= true $x271)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (=> $x219 $x247)))
 (let (($x213 (= $x186 true)))
 (let (($x309 (= $x213 true)))
 (let (($x223 (= $x309 true)))
 (let (($x23 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x274 (= $x23 true)))
 (let (($x112 (= $x274 true)))
 (let (($x41 (= $x112 true)))
 (let (($x24 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x24 true)))
 (let (($x75 (= $x15 true)))
 (let (($x89 (= $x75 true)))
 (let (($x302 (= $x219 true)))
 (let (($x140 (= $x302 true)))
 (let (($x281 (= $x140 true)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x33 (= (_ bv0 32) ?x270)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x304 (= (_ bv0 32) ?x38)))
 (let ((?x319 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x320 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x102 $x320)))
 (let (($x317 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (and $x317 $x188)))
 (let (($x276 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x117 $x145)))
 (let (($x21 (not $x83)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x154 $x158)))
 (let (($x232 (and (not $x101) $x21)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x260 $x9)))
 (let (($x72 (not $x128)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x201 $x136)))
 (let (($x139 (and (not $x61) $x72)))
 (let (($x106 (and (and (and (and (and (and $x139 $x232) $x282) $x276) $x65) $x179) $x304)))
 (let (($x138 (and $x106 $x33)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x261 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x259 (or false (or false (and (and true (or $x85 $x155)) (or $x261 $x196))))))
 (let (($x275 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x259)))
 (let (($x59 (and $x275 $x138)))
 (let (($x51 (= $x59 true)))
 (let (($x87 (= $x51 true)))
 (let (($x180 (= $x87 true)))
 (let (($x29 (and $x180 $x281)))
 (let (($x170 (and $x29 $x89)))
 (let (($x310 (and $x170 $x41)))
 (let (($x13 (and $x310 $x223)))
 (let (($x103 (and $x13 $x96)))
 (let (($x267 (and $x103 $x39)))
 (let (($x209 (and $x267 $x177)))
 (let (($x166 (and $x209 $x77)))
 (let (($x225 (and $x166 $x206)))
 (let (($x214 (and $x225 $x114)))
 (let (($x116 (and $x214 $x241)))
 (let (($x34 (and $x116 $x185)))
 (let (($x94 (and $x34 $x301)))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x137 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x137 (_ bv1 32))))
 (let (($x187 (and $x272 $x94)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x73 (and $x163 $x187)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x273 $x73)))
 (let (($x264 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x198 (and $x264 $x10)))
 (let (($x16 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x122 (bvadd ?x6 (_ bv3 32))))
 (let (($x253 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x122)))
 (let (($x47 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x122)))
 (let (($x109 (or false (or false (and (and true (or $x149 $x47)) (or $x253 $x16))))))
 (let (($x165 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x109)))
 (let (($x144 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x109)))
 (let (($x127 (and $x144 $x198)))
 (let (($x298 (=> $x127 $x20)))
 (not $x298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 204 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x111 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x306 (bvmul (_ bv4294967295 32) ?x111)))
 (let ((?x296 (bvneg ?x306)))
 (let (($x265 (= ?x296 ?x164)))
 (let (($x125 (= $x265 true)))
 (let (($x255 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let ((?x92 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2062X)))
 (let ((?x308 (input.spec-%var-x-1.1.1 input.ind-%var2062X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2062X)))
 (=> $x48 (= ?x308 ?x92))))))
 ))
 (let (($x257 (forall ((input.ind-%var2061X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2061X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2061X)))
 (= $x48 $x84))))
 ))
 (let (($x250 (and $x257 $x255)))
 (let (($x256 (= $x250 true)))
 (let (($x121 (forall ((input.ind-%var2056X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2056X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x94))))
 (let ((?x92 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2056X)))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2056X)))
 (=> $x84 (= ?x92 ?x290))))))))
 ))
 (let (($x283 (forall ((input.ind-%var2055X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2055X) (bvult input.ind-%var2055X input.dst.llvm-%n))))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2055X)))
 (= $x84 $x231))))
 ))
 (let (($x285 (and $x283 $x121)))
 (let (($x141 (= $x285 true)))
 (let (($x17 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2050X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x94))))
 (let ((?x308 (input.spec-%var-x-1.1.1 input.ind-%var2050X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2050X)))
 (=> $x48 (= ?x308 ?x290))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2049X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2049X) (bvult input.ind-%var2049X input.dst.llvm-%n))))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2049X)))
 (= $x48 $x231))))
 ))
 (let (($x131 (and $x215 $x17)))
 (let (($x207 (= $x131 true)))
 (let ((?x236 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x318 (bvneg ?x236)))
 (let (($x160 (= ?x318 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x160 true)))
 (let (($x294 (= $x43 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x67 (= $x126 true)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x22 true)))
 (let (($x206 (= $x68 true)))
 (let (($x225 (= $x206 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x166 true)))
 (let (($x28 (= $x26 true)))
 (let (($x78 (= $x28 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x133 (bvsub ?x6 ?x119)))
 (let (($x151 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x133) (bvult ?x6 ?x133))))
 (let (($x103 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x203 (ite $x103 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x57 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvmul (_ bv4 64) ?x57)))
 (let ((?x96 ((_ extract 63 32) ?x182)))
 (let (($x299 (= ?x96 ?x203)))
 (let (($x175 (and $x299 $x151)))
 (let (($x13 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x177 (and $x13 $x175)))
 (let (($x209 (= true $x177)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (=> $x219 $x209)))
 (let (($x132 (= $x238 true)))
 (let (($x258 (= $x132 true)))
 (let (($x5 (= $x258 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x271 (= $x49 true)))
 (let (($x247 (= $x271 true)))
 (let (($x186 (= $x247 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x60 (= $x217 true)))
 (let (($x191 (= $x60 true)))
 (let (($x52 (= $x191 true)))
 (let (($x157 (= $x219 true)))
 (let (($x66 (= $x157 true)))
 (let (($x167 (= $x66 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x75)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x24)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x87 $x302)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x51 $x140)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x319 $x179)))
 (let (($x38 (not $x234)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x307 (and $x188 $x65)))
 (let (($x106 (and (not $x307) $x38)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x276 $x227)))
 (let (($x102 (not $x317)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x9 $x128)))
 (let (($x320 (and (not $x239) $x102)))
 (let (($x310 (and (and (and (and (and (and $x320 $x106) $x33) $x59) $x281) $x97) $x15)))
 (let (($x199 (and $x310 $x89)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x235 (or false (or false (and (and true (or $x158 $x101)) (or $x145 $x83))))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x235)))
 (let (($x202 (and $x216 $x199)))
 (let (($x178 (= $x202 true)))
 (let (($x7 (= $x178 true)))
 (let (($x99 (= $x7 true)))
 (let ((?x275 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x201 (= (_ bv0 2) ?x275)))
 (let (($x136 (= $x201 true)))
 (let (($x61 (= $x136 true)))
 (let ((?x183 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x183)))
 (let (($x14 (= ?x261 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x181 (= $x14 true)))
 (let (($x64 (= $x181 true)))
 (let (($x130 (and $x64 $x61)))
 (let (($x194 (and $x130 $x99)))
 (let (($x105 (and $x194 $x167)))
 (let (($x86 (and $x105 $x52)))
 (let (($x213 (and $x86 $x186)))
 (let (($x77 (and $x213 $x5)))
 (let (($x220 (and $x77 $x78)))
 (let (($x156 (and $x220 $x225)))
 (let (($x214 (and $x156 $x114)))
 (let (($x254 (and $x214 $x294)))
 (let (($x70 (and $x254 $x207)))
 (let (($x71 (and $x70 $x141)))
 (let (($x123 (and $x71 $x256)))
 (let (($x251 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x277 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x277 (_ bv1 32))))
 (let (($x69 (and $x85 $x123)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x279 $x69)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x269 $x153)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x222 (and $x226 $x37)))
 (let (($x18 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd ?x6 (_ bv3 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x54 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x144 (or false (or false (and (and true (or $x159 $x54)) (or $x142 $x18))))))
 (let (($x264 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x144)))
 (let (($x169 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x144)))
 (let (($x88 (and $x169 $x222)))
 (let (($x184 (=> $x88 $x125)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x111 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x306 (bvmul (_ bv4294967295 32) ?x111)))
 (let ((?x296 (bvneg ?x306)))
 (let (($x265 (= ?x296 ?x164)))
 (let (($x125 (= $x265 true)))
 (let (($x255 (forall ((input.ind-%var2062X (_ BitVec 32)) )(let ((?x92 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2062X)))
 (let ((?x308 (input.spec-%var-x-1.1.1 input.ind-%var2062X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2062X)))
 (=> $x48 (= ?x308 ?x92))))))
 ))
 (let (($x257 (forall ((input.ind-%var2061X (_ BitVec 32)) )(let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2061X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2061X)))
 (= $x48 $x84))))
 ))
 (let (($x250 (and $x257 $x255)))
 (let (($x256 (= $x250 true)))
 (let (($x121 (forall ((input.ind-%var2056X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2056X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x94))))
 (let ((?x92 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2056X)))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2056X)))
 (=> $x84 (= ?x92 ?x290))))))))
 ))
 (let (($x283 (forall ((input.ind-%var2055X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2055X) (bvult input.ind-%var2055X input.dst.llvm-%n))))
 (let (($x84 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2055X)))
 (= $x84 $x231))))
 ))
 (let (($x285 (and $x283 $x121)))
 (let (($x141 (= $x285 true)))
 (let (($x17 (forall ((input.ind-%var2050X (_ BitVec 32)) )(let ((?x148 (bvadd (bvmul input.ind-%var2050X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x94))))
 (let ((?x308 (input.spec-%var-x-1.1.1 input.ind-%var2050X)))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2050X)))
 (=> $x48 (= ?x308 ?x290))))))))
 ))
 (let (($x215 (forall ((input.ind-%var2049X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2049X) (bvult input.ind-%var2049X input.dst.llvm-%n))))
 (let (($x48 (input.spec-%var-x-1.0.1 input.ind-%var2049X)))
 (= $x48 $x231))))
 ))
 (let (($x131 (and $x215 $x17)))
 (let (($x207 (= $x131 true)))
 (let ((?x236 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x318 (bvneg ?x236)))
 (let (($x160 (= ?x318 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x160 true)))
 (let (($x294 (= $x43 true)))
 (let (($x126 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x67 (= $x126 true)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let (($x22 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x68 (= $x22 true)))
 (let (($x206 (= $x68 true)))
 (let (($x225 (= $x206 true)))
 (let (($x166 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x166 true)))
 (let (($x28 (= $x26 true)))
 (let (($x78 (= $x28 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x133 (bvsub ?x6 ?x119)))
 (let (($x151 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x133) (bvult ?x6 ?x133))))
 (let (($x103 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x203 (ite $x103 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x57 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x182 (bvmul (_ bv4 64) ?x57)))
 (let ((?x96 ((_ extract 63 32) ?x182)))
 (let (($x299 (= ?x96 ?x203)))
 (let (($x175 (and $x299 $x151)))
 (let (($x13 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x177 (and $x13 $x175)))
 (let (($x209 (= true $x177)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (=> $x219 $x209)))
 (let (($x132 (= $x238 true)))
 (let (($x258 (= $x132 true)))
 (let (($x5 (= $x258 true)))
 (let (($x49 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x271 (= $x49 true)))
 (let (($x247 (= $x271 true)))
 (let (($x186 (= $x247 true)))
 (let (($x217 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x60 (= $x217 true)))
 (let (($x191 (= $x60 true)))
 (let (($x52 (= $x191 true)))
 (let (($x157 (= $x219 true)))
 (let (($x66 (= $x157 true)))
 (let (($x167 (= $x66 true)))
 (let ((?x75 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x89 (= (_ bv0 32) ?x75)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x15 (= (_ bv0 32) ?x24)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x87 $x302)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x51 $x140)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x319 $x179)))
 (let (($x38 (not $x234)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x307 (and $x188 $x65)))
 (let (($x106 (and (not $x307) $x38)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x276 $x227)))
 (let (($x102 (not $x317)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x239 (and $x9 $x128)))
 (let (($x320 (and (not $x239) $x102)))
 (let (($x310 (and (and (and (and (and (and $x320 $x106) $x33) $x59) $x281) $x97) $x15)))
 (let (($x199 (and $x310 $x89)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x235 (or false (or false (and (and true (or $x158 $x101)) (or $x145 $x83))))))
 (let (($x216 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x235)))
 (let (($x202 (and $x216 $x199)))
 (let (($x178 (= $x202 true)))
 (let (($x7 (= $x178 true)))
 (let (($x99 (= $x7 true)))
 (let ((?x275 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x201 (= (_ bv0 2) ?x275)))
 (let (($x136 (= $x201 true)))
 (let (($x61 (= $x136 true)))
 (let ((?x183 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x261 (bvneg ?x183)))
 (let (($x14 (= ?x261 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x181 (= $x14 true)))
 (let (($x64 (= $x181 true)))
 (let (($x130 (and $x64 $x61)))
 (let (($x194 (and $x130 $x99)))
 (let (($x105 (and $x194 $x167)))
 (let (($x86 (and $x105 $x52)))
 (let (($x213 (and $x86 $x186)))
 (let (($x77 (and $x213 $x5)))
 (let (($x220 (and $x77 $x78)))
 (let (($x156 (and $x220 $x225)))
 (let (($x214 (and $x156 $x114)))
 (let (($x254 (and $x214 $x294)))
 (let (($x70 (and $x254 $x207)))
 (let (($x71 (and $x70 $x141)))
 (let (($x123 (and $x71 $x256)))
 (let (($x251 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x277 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x277 (_ bv1 32))))
 (let (($x69 (and $x85 $x123)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x153 (and $x279 $x69)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x269 $x153)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x222 (and $x226 $x37)))
 (let (($x18 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd ?x6 (_ bv3 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x54 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x144 (or false (or false (and (and true (or $x159 $x54)) (or $x142 $x18))))))
 (let (($x264 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x144)))
 (let (($x169 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x144)))
 (let (($x88 (and $x169 $x222)))
 (let (($x184 (=> $x88 $x125)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (bvule ?x45 (_ bv4294967294 32))))
 (let (($x298 (= $x79 true)))
 (let (($x36 (= $x298 true)))
 (let (($x27 (forall ((input.ind-%var2085X (_ BitVec 32)) )(let ((?x95 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2085X)))
 (let ((?x290 (input.spec-%var-x-1.1.1 input.ind-%var2085X)))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2085X)))
 (=> $x308 (= ?x290 ?x95))))))
 ))
 (let (($x248 (forall ((input.ind-%var2084X (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2084X)))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2084X)))
 (= $x308 $x85))))
 ))
 (let (($x168 (and $x248 $x27)))
 (let (($x240 (= $x168 true)))
 (let (($x190 (forall ((input.ind-%var2079X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var2079X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x256))))
 (let ((?x95 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2079X)))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2079X)))
 (=> $x85 (= ?x95 ?x88))))))))
 ))
 (let (($x129 (forall ((input.ind-%var2078X (_ BitVec 32)) )(let (($x73 (and (bvule (_ bv0 32) input.ind-%var2078X) (bvult input.ind-%var2078X input.dst.llvm-%n))))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2078X)))
 (= $x85 $x73))))
 ))
 (let (($x244 (and $x129 $x190)))
 (let (($x150 (= $x244 true)))
 (let (($x296 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var2073X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x256))))
 (let ((?x290 (input.spec-%var-x-1.1.1 input.ind-%var2073X)))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2073X)))
 (=> $x308 (= ?x290 ?x88))))))))
 ))
 (let (($x301 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x73 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X input.dst.llvm-%n))))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2072X)))
 (= $x308 $x73))))
 ))
 (let (($x164 (and $x301 $x296)))
 (let (($x265 (= $x164 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x272 (bvneg ?x254)))
 (let (($x48 (= ?x272 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x48 true)))
 (let (($x46 (= $x143 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x318 (= $x236 true)))
 (let (($x160 (= $x318 true)))
 (let (($x43 (= $x160 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x67 (= $x126 true)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x258 (= (_ bv0 32) ?x132)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x209)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x39 $x267)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x299 $x44)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x213 $x309)))
 (let (($x13 (not $x223)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x271 $x247)))
 (let (($x57 (and (not $x186) $x13)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x217 $x60)))
 (let (($x52 (not $x191)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x97 $x41)))
 (let (($x49 (and (not $x192) $x52)))
 (let (($x78 (and (and (and (and (and (and $x49 $x57) $x96) $x203) $x151) $x177) $x238)))
 (let (($x220 (and $x78 $x258)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x310 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x310)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x310)))
 (let (($x66 (or false (or false (and (and true (or $x75 $x89)) (or $x178 $x7))))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x22 (and $x105 $x220)))
 (let (($x68 (= $x22 true)))
 (let (($x206 (= $x68 true)))
 (let (($x225 (= $x206 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x302 (= $x180 true)))
 (let (($x140 (= $x302 true)))
 (let (($x281 (= $x140 true)))
 (let (($x138 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x138 true)))
 (let (($x274 (= $x59 true)))
 (let (($x51 (= $x274 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x188 (bvsub ?x6 ?x119)))
 (let (($x319 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x188) (bvult ?x6 ?x188))))
 (let (($x317 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x102 (ite $x317 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x31 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x276 (bvmul (_ bv4 64) ?x31)))
 (let ((?x227 ((_ extract 63 32) ?x276)))
 (let (($x320 (= ?x227 ?x102)))
 (let (($x179 (and $x320 $x319)))
 (let (($x128 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x234 (and $x128 $x179)))
 (let (($x38 (= true $x234)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (=> $x219 $x38)))
 (let (($x170 (= $x106 true)))
 (let (($x270 (= $x170 true)))
 (let (($x33 (= $x270 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x21 (= (_ bv0 2) ?x83)))
 (let (($x232 (= $x21 true)))
 (let (($x278 (= $x232 true)))
 (let ((?x139 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x139)))
 (let (($x158 (= ?x282 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x158 true)))
 (let (($x55 (= $x101 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x275 (= $x259 true)))
 (let (($x201 (= $x275 true)))
 (let (($x136 (= $x201 true)))
 (let (($x196 (= $x219 true)))
 (let (($x14 (= $x196 true)))
 (let (($x181 (= $x14 true)))
 (let (($x61 (and $x181 $x136)))
 (let (($x117 (and $x61 $x55)))
 (let (($x235 (and $x117 $x278)))
 (let (($x23 (and $x235 $x33)))
 (let (($x87 (and $x23 $x51)))
 (let (($x112 (and $x87 $x281)))
 (let (($x156 (and $x112 $x225)))
 (let (($x214 (and $x156 $x114)))
 (let (($x294 (and $x214 $x43)))
 (let (($x231 (and $x294 $x46)))
 (let (($x125 (and $x231 $x265)))
 (let (($x162 (and $x125 $x150)))
 (let (($x233 (and $x162 $x240)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x183 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x183 (_ bv1 32))))
 (let (($x118 (and $x261 $x233)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x137 $x118)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x8 (and $x163 $x287)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x193 $x8)))
 (let (($x109 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x6 (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x253 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x169 (or false (or false (and (and true (or $x91 $x253)) (or $x30 $x109))))))
 (let (($x226 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x169)))
 (let (($x115 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x169)))
 (let (($x113 (and $x115 $x176)))
 (let (($x246 (=> $x113 $x36)))
 (not $x246))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x45 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x79 (bvule ?x45 (_ bv4294967294 32))))
 (let (($x298 (= $x79 true)))
 (let (($x36 (= $x298 true)))
 (let (($x27 (forall ((input.ind-%var2085X (_ BitVec 32)) )(let ((?x95 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2085X)))
 (let ((?x290 (input.spec-%var-x-1.1.1 input.ind-%var2085X)))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2085X)))
 (=> $x308 (= ?x290 ?x95))))))
 ))
 (let (($x248 (forall ((input.ind-%var2084X (_ BitVec 32)) )(let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2084X)))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2084X)))
 (= $x308 $x85))))
 ))
 (let (($x168 (and $x248 $x27)))
 (let (($x240 (= $x168 true)))
 (let (($x190 (forall ((input.ind-%var2079X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var2079X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x256))))
 (let ((?x95 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2079X)))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2079X)))
 (=> $x85 (= ?x95 ?x88))))))))
 ))
 (let (($x129 (forall ((input.ind-%var2078X (_ BitVec 32)) )(let (($x73 (and (bvule (_ bv0 32) input.ind-%var2078X) (bvult input.ind-%var2078X input.dst.llvm-%n))))
 (let (($x85 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2078X)))
 (= $x85 $x73))))
 ))
 (let (($x244 (and $x129 $x190)))
 (let (($x150 (= $x244 true)))
 (let (($x296 (forall ((input.ind-%var2073X (_ BitVec 32)) )(let ((?x243 (bvadd (bvmul input.ind-%var2073X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv1 32))) (select input.dst.llvm-mem ?x243))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x243 (_ bv2 32))) ?x256))))
 (let ((?x290 (input.spec-%var-x-1.1.1 input.ind-%var2073X)))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2073X)))
 (=> $x308 (= ?x290 ?x88))))))))
 ))
 (let (($x301 (forall ((input.ind-%var2072X (_ BitVec 32)) )(let (($x73 (and (bvule (_ bv0 32) input.ind-%var2072X) (bvult input.ind-%var2072X input.dst.llvm-%n))))
 (let (($x308 (input.spec-%var-x-1.0.1 input.ind-%var2072X)))
 (= $x308 $x73))))
 ))
 (let (($x164 (and $x301 $x296)))
 (let (($x265 (= $x164 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x272 (bvneg ?x254)))
 (let (($x48 (= ?x272 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x48 true)))
 (let (($x46 (= $x143 true)))
 (let (($x236 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x318 (= $x236 true)))
 (let (($x160 (= $x318 true)))
 (let (($x43 (= $x160 true)))
 (let (($x126 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x67 (= $x126 true)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let ((?x132 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x258 (= (_ bv0 32) ?x132)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x209)))
 (let ((?x175 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x133)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x39 $x267)))
 (let (($x299 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x299 $x44)))
 (let (($x203 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x309 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x213 $x309)))
 (let (($x13 (not $x223)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x271 $x247)))
 (let (($x57 (and (not $x186) $x13)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x191 (and $x217 $x60)))
 (let (($x52 (not $x191)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (and $x97 $x41)))
 (let (($x49 (and (not $x192) $x52)))
 (let (($x78 (and (and (and (and (and (and $x49 $x57) $x96) $x203) $x151) $x177) $x238)))
 (let (($x220 (and $x78 $x258)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x310 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x310)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x310)))
 (let (($x66 (or false (or false (and (and true (or $x75 $x89)) (or $x178 $x7))))))
 (let (($x105 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x66)))
 (let (($x22 (and $x105 $x220)))
 (let (($x68 (= $x22 true)))
 (let (($x206 (= $x68 true)))
 (let (($x225 (= $x206 true)))
 (let (($x180 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x302 (= $x180 true)))
 (let (($x140 (= $x302 true)))
 (let (($x281 (= $x140 true)))
 (let (($x138 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x59 (= $x138 true)))
 (let (($x274 (= $x59 true)))
 (let (($x51 (= $x274 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x188 (bvsub ?x6 ?x119)))
 (let (($x319 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x188) (bvult ?x6 ?x188))))
 (let (($x317 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x102 (ite $x317 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x31 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x276 (bvmul (_ bv4 64) ?x31)))
 (let ((?x227 ((_ extract 63 32) ?x276)))
 (let (($x320 (= ?x227 ?x102)))
 (let (($x179 (and $x320 $x319)))
 (let (($x128 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x234 (and $x128 $x179)))
 (let (($x38 (= true $x234)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x106 (=> $x219 $x38)))
 (let (($x170 (= $x106 true)))
 (let (($x270 (= $x170 true)))
 (let (($x33 (= $x270 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x21 (= (_ bv0 2) ?x83)))
 (let (($x232 (= $x21 true)))
 (let (($x278 (= $x232 true)))
 (let ((?x139 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x282 (bvneg ?x139)))
 (let (($x158 (= ?x282 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x101 (= $x158 true)))
 (let (($x55 (= $x101 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x275 (= $x259 true)))
 (let (($x201 (= $x275 true)))
 (let (($x136 (= $x201 true)))
 (let (($x196 (= $x219 true)))
 (let (($x14 (= $x196 true)))
 (let (($x181 (= $x14 true)))
 (let (($x61 (and $x181 $x136)))
 (let (($x117 (and $x61 $x55)))
 (let (($x235 (and $x117 $x278)))
 (let (($x23 (and $x235 $x33)))
 (let (($x87 (and $x23 $x51)))
 (let (($x112 (and $x87 $x281)))
 (let (($x156 (and $x112 $x225)))
 (let (($x214 (and $x156 $x114)))
 (let (($x294 (and $x214 $x43)))
 (let (($x231 (and $x294 $x46)))
 (let (($x125 (and $x231 $x265)))
 (let (($x162 (and $x125 $x150)))
 (let (($x233 (and $x162 $x240)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x183 (ite $x81 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x183 (_ bv1 32))))
 (let (($x118 (and $x261 $x233)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x287 (and $x137 $x118)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x8 (and $x163 $x287)))
 (let (($x193 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x193 $x8)))
 (let (($x109 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd ?x6 (_ bv3 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x253 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x169 (or false (or false (and (and true (or $x91 $x253)) (or $x30 $x109))))))
 (let (($x226 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x169)))
 (let (($x115 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x169)))
 (let (($x113 (and $x115 $x176)))
 (let (($x246 (=> $x113 $x36)))
 (not $x246))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x200 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x161 (bvsge ?x200 (_ bv0 32))))
 (let (($x80 (= $x161 true)))
 (let (($x40 (= $x80 true)))
 (let (($x300 (forall ((input.ind-%var2108X (_ BitVec 32)) )(let ((?x17 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2108X)))
 (let ((?x88 (input.spec-%var-x-1.1.1 input.ind-%var2108X)))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2108X)))
 (=> $x290 (= ?x88 ?x17))))))
 ))
 (let (($x189 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let (($x261 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2107X)))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2107X)))
 (= $x290 $x261))))
 ))
 (let (($x171 (and $x189 $x300)))
 (let (($x71 (= $x171 true)))
 (let (($x215 (forall ((input.ind-%var2102X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2102X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x240))))
 (let ((?x17 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2102X)))
 (let (($x261 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2102X)))
 (=> $x261 (= ?x17 ?x113))))))))
 ))
 (let (($x10 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let (($x69 (and (bvule (_ bv0 32) input.ind-%var2101X) (bvult input.ind-%var2101X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2101X)))
 (= $x261 $x69))))
 ))
 (let (($x198 (and $x10 $x215)))
 (let (($x241 (= $x198 true)))
 (let (($x298 (forall ((input.ind-%var2096X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2096X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x240))))
 (let ((?x88 (input.spec-%var-x-1.1.1 input.ind-%var2096X)))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2096X)))
 (=> $x290 (= ?x88 ?x113))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2095X (_ BitVec 32)) )(let (($x69 (and (bvule (_ bv0 32) input.ind-%var2095X) (bvult input.ind-%var2095X input.dst.llvm-%n))))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2095X)))
 (= $x290 $x69))))
 ))
 (let (($x36 (and $x250 $x298)))
 (let (($x246 (= $x36 true)))
 (let ((?x231 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x231)))
 (let (($x308 (= ?x277 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x308 true)))
 (let (($x212 (= $x187 true)))
 (let (($x254 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x272 (= $x254 true)))
 (let (($x48 (= $x272 true)))
 (let (($x143 (= $x48 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x318 (= $x236 true)))
 (let (($x160 (= $x318 true)))
 (let (($x43 (= $x160 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x78)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x209)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x267 $x151)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x133 $x26)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x57 $x5)))
 (let (($x96 (not $x182)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x309 $x223)))
 (let (($x103 (and (not $x13) $x96)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x49 $x271)))
 (let (($x186 (not $x247)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x89 $x199)))
 (let (($x213 (and (not $x52) $x186)))
 (let (($x225 (and (and (and (and (and (and $x213 $x103) $x166) $x39) $x175) $x28) $x238)))
 (let (($x156 (and $x225 $x132)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x217 (or false (or false (and (and true (or $x99 $x194)) (or $x105 $x97))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x126 (and $x191 $x156)))
 (let (($x67 (= $x126 true)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (= $x112 true)))
 (let (($x15 (= $x24 true)))
 (let (($x167 (= $x15 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (= $x87 true)))
 (let (($x302 (= $x180 true)))
 (let (($x140 (= $x302 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x319 (bvsub ?x6 ?x119)))
 (let (($x106 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x319) (bvult ?x6 ?x319))))
 (let (($x188 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x307 (ite $x188 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x320 (bvmul (_ bv4 64) ?x102)))
 (let ((?x65 ((_ extract 63 32) ?x320)))
 (let (($x304 (= ?x65 ?x307)))
 (let (($x170 (and $x304 $x106)))
 (let (($x227 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x270 (and $x227 $x170)))
 (let (($x33 (= true $x270)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (=> $x219 $x33)))
 (let (($x138 (= $x23 true)))
 (let (($x59 (= $x138 true)))
 (let (($x274 (= $x59 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x235)))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let ((?x101 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x101)))
 (let (($x145 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x61 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x130 (= $x61 true)))
 (let (($x72 (= $x130 true)))
 (let (($x139 (= $x72 true)))
 (let (($x259 (= $x219 true)))
 (let (($x275 (= $x259 true)))
 (let (($x201 (= $x275 true)))
 (let (($x282 (and $x201 $x139)))
 (let (($x232 (and $x282 $x21)))
 (let (($x239 (and $x232 $x128)))
 (let (($x51 (and $x239 $x274)))
 (let (($x281 (and $x51 $x140)))
 (let (($x310 (and $x281 $x167)))
 (let (($x214 (and $x310 $x114)))
 (let (($x294 (and $x214 $x43)))
 (let (($x46 (and $x294 $x143)))
 (let (($x73 (and $x46 $x212)))
 (let (($x173 (and $x73 $x246)))
 (let (($x62 (and $x173 $x241)))
 (let (($x195 (and $x62 $x71)))
 (let (($x14 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x181 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x181 (_ bv1 32))))
 (let (($x293 (and $x64 $x195)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x251 $x293)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x291 (and $x279 $x94)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x273 $x291)))
 (let (($x144 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x253 (bvadd ?x6 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x142 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x253)))
 (let (($x115 (or false (or false (and (and true (or $x56 $x142)) (or $x165 $x144))))))
 (let (($x193 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x122 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x74 (and $x122 $x20)))
 (let (($x104 (=> $x74 $x40)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x200 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x161 (bvsge ?x200 (_ bv0 32))))
 (let (($x80 (= $x161 true)))
 (let (($x40 (= $x80 true)))
 (let (($x300 (forall ((input.ind-%var2108X (_ BitVec 32)) )(let ((?x17 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2108X)))
 (let ((?x88 (input.spec-%var-x-1.1.1 input.ind-%var2108X)))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2108X)))
 (=> $x290 (= ?x88 ?x17))))))
 ))
 (let (($x189 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let (($x261 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2107X)))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2107X)))
 (= $x290 $x261))))
 ))
 (let (($x171 (and $x189 $x300)))
 (let (($x71 (= $x171 true)))
 (let (($x215 (forall ((input.ind-%var2102X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2102X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x240))))
 (let ((?x17 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2102X)))
 (let (($x261 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2102X)))
 (=> $x261 (= ?x17 ?x113))))))))
 ))
 (let (($x10 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let (($x69 (and (bvule (_ bv0 32) input.ind-%var2101X) (bvult input.ind-%var2101X input.dst.llvm-%n))))
 (let (($x261 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2101X)))
 (= $x261 $x69))))
 ))
 (let (($x198 (and $x10 $x215)))
 (let (($x241 (= $x198 true)))
 (let (($x298 (forall ((input.ind-%var2096X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2096X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x240))))
 (let ((?x88 (input.spec-%var-x-1.1.1 input.ind-%var2096X)))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2096X)))
 (=> $x290 (= ?x88 ?x113))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2095X (_ BitVec 32)) )(let (($x69 (and (bvule (_ bv0 32) input.ind-%var2095X) (bvult input.ind-%var2095X input.dst.llvm-%n))))
 (let (($x290 (input.spec-%var-x-1.0.1 input.ind-%var2095X)))
 (= $x290 $x69))))
 ))
 (let (($x36 (and $x250 $x298)))
 (let (($x246 (= $x36 true)))
 (let ((?x231 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x277 (bvneg ?x231)))
 (let (($x308 (= ?x277 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x187 (= $x308 true)))
 (let (($x212 (= $x187 true)))
 (let (($x254 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x272 (= $x254 true)))
 (let (($x48 (= $x272 true)))
 (let (($x143 (= $x48 true)))
 (let (($x236 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x318 (= $x236 true)))
 (let (($x160 (= $x318 true)))
 (let (($x43 (= $x160 true)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x78)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x238 (= (_ bv0 32) ?x209)))
 (let ((?x177 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x177)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (and $x267 $x151)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x133 $x26)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x57 $x5)))
 (let (($x96 (not $x182)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x309 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (and $x309 $x223)))
 (let (($x103 (and (not $x13) $x96)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (and $x49 $x271)))
 (let (($x186 (not $x247)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x89 $x199)))
 (let (($x213 (and (not $x52) $x186)))
 (let (($x225 (and (and (and (and (and (and $x213 $x103) $x166) $x39) $x175) $x28) $x238)))
 (let (($x156 (and $x225 $x132)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x194 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x217 (or false (or false (and (and true (or $x99 $x194)) (or $x105 $x97))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x126 (and $x191 $x156)))
 (let (($x67 (= $x126 true)))
 (let (($x245 (= $x67 true)))
 (let (($x114 (= $x245 true)))
 (let (($x112 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x24 (= $x112 true)))
 (let (($x15 (= $x24 true)))
 (let (($x167 (= $x15 true)))
 (let (($x87 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (= $x87 true)))
 (let (($x302 (= $x180 true)))
 (let (($x140 (= $x302 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x319 (bvsub ?x6 ?x119)))
 (let (($x106 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x319) (bvult ?x6 ?x319))))
 (let (($x188 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x307 (ite $x188 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x102 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x320 (bvmul (_ bv4 64) ?x102)))
 (let ((?x65 ((_ extract 63 32) ?x320)))
 (let (($x304 (= ?x65 ?x307)))
 (let (($x170 (and $x304 $x106)))
 (let (($x227 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x270 (and $x227 $x170)))
 (let (($x33 (= true $x270)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x23 (=> $x219 $x33)))
 (let (($x138 (= $x23 true)))
 (let (($x59 (= $x138 true)))
 (let (($x274 (= $x59 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x235)))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let ((?x101 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x101)))
 (let (($x145 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x61 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x130 (= $x61 true)))
 (let (($x72 (= $x130 true)))
 (let (($x139 (= $x72 true)))
 (let (($x259 (= $x219 true)))
 (let (($x275 (= $x259 true)))
 (let (($x201 (= $x275 true)))
 (let (($x282 (and $x201 $x139)))
 (let (($x232 (and $x282 $x21)))
 (let (($x239 (and $x232 $x128)))
 (let (($x51 (and $x239 $x274)))
 (let (($x281 (and $x51 $x140)))
 (let (($x310 (and $x281 $x167)))
 (let (($x214 (and $x310 $x114)))
 (let (($x294 (and $x214 $x43)))
 (let (($x46 (and $x294 $x143)))
 (let (($x73 (and $x46 $x212)))
 (let (($x173 (and $x73 $x246)))
 (let (($x62 (and $x173 $x241)))
 (let (($x195 (and $x62 $x71)))
 (let (($x14 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x181 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x64 (bvuge ?x181 (_ bv1 32))))
 (let (($x293 (and $x64 $x195)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x94 (and $x251 $x293)))
 (let (($x279 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x291 (and $x279 $x94)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x273 $x291)))
 (let (($x144 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x253 (bvadd ?x6 (_ bv3 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x253)))
 (let (($x142 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x253)))
 (let (($x115 (or false (or false (and (and true (or $x56 $x142)) (or $x165 $x144))))))
 (let (($x193 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x122 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x74 (and $x122 $x20)))
 (let (($x104 (=> $x74 $x40)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 200 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (bvule ?x292 (_ bv4294967294 32))))
 (let (($x134 (= $x42 true)))
 (let (($x116 (= $x134 true)))
 (let (($x29 (forall ((input.ind-%var2131X (_ BitVec 32)) )(let ((?x296 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2131X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var2131X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2131X)))
 (=> $x88 (= ?x113 ?x296))))))
 ))
 (let (($x92 (forall ((input.ind-%var2130X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2130X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2130X)))
 (= $x88 $x64))))
 ))
 (let (($x152 (and $x92 $x29)))
 (let (($x162 (= $x152 true)))
 (let (($x301 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x208 (bvadd (bvmul input.ind-%var2125X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x71))))
 (let ((?x296 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2125X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2125X)))
 (=> $x64 (= ?x296 ?x74))))))))
 ))
 (let (($x153 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x118 (and (bvule (_ bv0 32) input.ind-%var2124X) (bvult input.ind-%var2124X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2124X)))
 (= $x64 $x118))))
 ))
 (let (($x37 (and $x153 $x301)))
 (let (($x285 (= $x37 true)))
 (let (($x80 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x208 (bvadd (bvmul input.ind-%var2119X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x71))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var2119X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2119X)))
 (=> $x88 (= ?x113 ?x74))))))))
 ))
 (let (($x168 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x118 (and (bvule (_ bv0 32) input.ind-%var2118X) (bvult input.ind-%var2118X input.dst.llvm-%n))))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2118X)))
 (= $x88 $x118))))
 ))
 (let (($x40 (and $x168 $x80)))
 (let (($x104 (= $x40 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x73)))
 (let (($x290 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x290 true)))
 (let (($x283 (= $x123 true)))
 (let (($x231 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x231 true)))
 (let (($x308 (= $x277 true)))
 (let (($x187 (= $x308 true)))
 (let (($x254 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x272 (= $x254 true)))
 (let (($x48 (= $x272 true)))
 (let (($x143 (= $x48 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x78 (bvsub ?x6 ?x119)))
 (let (($x67 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x78) (bvult ?x6 ?x78))))
 (let (($x209 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x238 (ite $x209 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x177 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvmul (_ bv4 64) ?x177)))
 (let ((?x206 ((_ extract 63 32) ?x28)))
 (let (($x225 (= ?x206 ?x238)))
 (let (($x245 (and $x225 $x67)))
 (let (($x175 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x114 (and $x175 $x245)))
 (let (($x214 (= true $x114)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (=> $x219 $x214)))
 (let (($x318 (= $x236 true)))
 (let (($x160 (= $x318 true)))
 (let (($x43 (= $x160 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x39 true)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let (($x203 (= $x219 true)))
 (let (($x166 (= $x203 true)))
 (let (($x220 (= $x166 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x271)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x108)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x217 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x192 $x217)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x41 $x191)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x202 $x178)))
 (let (($x7 (not $x60)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x15 $x167)))
 (let (($x194 (and (not $x310) $x7)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x180 $x302)))
 (let (($x281 (not $x140)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x65 $x188)))
 (let (($x24 (and (not $x87) $x281)))
 (let (($x77 (and (and (and (and (and (and $x24 $x194) $x66) $x97) $x89) $x52) $x49)))
 (let (($x57 (and $x77 $x247)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x59 (or false (or false (and (and true (or $x319 $x234)) (or $x170 $x270))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x5 (and $x51 $x57)))
 (let (($x182 (= $x5 true)))
 (let (($x96 (= $x182 true)))
 (let (($x103 (= $x96 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x31 true)))
 (let (($x227 (= $x276 true)))
 (let (($x317 (= $x227 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x235)))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let ((?x101 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x101)))
 (let (($x145 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x130 true)))
 (let (($x139 (= $x72 true)))
 (let (($x282 (= $x139 true)))
 (let (($x232 (and $x282 $x21)))
 (let (($x239 (and $x232 $x128)))
 (let (($x102 (and $x239 $x317)))
 (let (($x258 (and $x102 $x103)))
 (let (($x299 (and $x258 $x220)))
 (let (($x44 (and $x299 $x267)))
 (let (($x294 (and $x44 $x43)))
 (let (($x46 (and $x294 $x143)))
 (let (($x212 (and $x46 $x187)))
 (let (($x69 (and $x212 $x283)))
 (let (($x224 (and $x69 $x104)))
 (let (($x141 (and $x224 $x285)))
 (let (($x147 (and $x141 $x162)))
 (let (($x275 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x201 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x201 (_ bv1 32))))
 (let (($x93 (and $x136 $x147)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x256 (and $x81 $x93)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x50 (and $x137 $x256)))
 (let (($x269 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x184 (and $x269 $x50)))
 (let (($x169 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd ?x6 (_ bv3 32))))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x30 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x122 (or false (or false (and (and true (or $x16 $x30)) (or $x264 $x169))))))
 (let (($x273 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x122)))
 (let (($x47 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x122)))
 (let (($x185 (and $x47 $x184)))
 (let (($x107 (=> $x185 $x116)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (bvule ?x292 (_ bv4294967294 32))))
 (let (($x134 (= $x42 true)))
 (let (($x116 (= $x134 true)))
 (let (($x29 (forall ((input.ind-%var2131X (_ BitVec 32)) )(let ((?x296 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2131X)))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var2131X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2131X)))
 (=> $x88 (= ?x113 ?x296))))))
 ))
 (let (($x92 (forall ((input.ind-%var2130X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2130X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2130X)))
 (= $x88 $x64))))
 ))
 (let (($x152 (and $x92 $x29)))
 (let (($x162 (= $x152 true)))
 (let (($x301 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x208 (bvadd (bvmul input.ind-%var2125X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x71))))
 (let ((?x296 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2125X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2125X)))
 (=> $x64 (= ?x296 ?x74))))))))
 ))
 (let (($x153 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x118 (and (bvule (_ bv0 32) input.ind-%var2124X) (bvult input.ind-%var2124X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2124X)))
 (= $x64 $x118))))
 ))
 (let (($x37 (and $x153 $x301)))
 (let (($x285 (= $x37 true)))
 (let (($x80 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x208 (bvadd (bvmul input.ind-%var2119X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv1 32))) (select input.dst.llvm-mem ?x208))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x208 (_ bv2 32))) ?x71))))
 (let ((?x113 (input.spec-%var-x-1.1.1 input.ind-%var2119X)))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2119X)))
 (=> $x88 (= ?x113 ?x74))))))))
 ))
 (let (($x168 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x118 (and (bvule (_ bv0 32) input.ind-%var2118X) (bvult input.ind-%var2118X input.dst.llvm-%n))))
 (let (($x88 (input.spec-%var-x-1.0.1 input.ind-%var2118X)))
 (= $x88 $x118))))
 ))
 (let (($x40 (and $x168 $x80)))
 (let (($x104 (= $x40 true)))
 (let ((?x73 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x183 (bvneg ?x73)))
 (let (($x290 (= ?x183 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x123 (= $x290 true)))
 (let (($x283 (= $x123 true)))
 (let (($x231 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x231 true)))
 (let (($x308 (= $x277 true)))
 (let (($x187 (= $x308 true)))
 (let (($x254 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x272 (= $x254 true)))
 (let (($x48 (= $x272 true)))
 (let (($x143 (= $x48 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x78 (bvsub ?x6 ?x119)))
 (let (($x67 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x78) (bvult ?x6 ?x78))))
 (let (($x209 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x238 (ite $x209 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x177 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvmul (_ bv4 64) ?x177)))
 (let ((?x206 ((_ extract 63 32) ?x28)))
 (let (($x225 (= ?x206 ?x238)))
 (let (($x245 (and $x225 $x67)))
 (let (($x175 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x114 (and $x175 $x245)))
 (let (($x214 (= true $x114)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x236 (=> $x219 $x214)))
 (let (($x318 (= $x236 true)))
 (let (($x160 (= $x318 true)))
 (let (($x43 (= $x160 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x39 true)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let (($x203 (= $x219 true)))
 (let (($x166 (= $x203 true)))
 (let (($x220 (= $x166 true)))
 (let ((?x271 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x247 (= (_ bv0 32) ?x271)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x108)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x217 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x191 (and $x192 $x217)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x41 $x191)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x202 $x178)))
 (let (($x7 (not $x60)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x15 $x167)))
 (let (($x194 (and (not $x310) $x7)))
 (let (($x302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x180 $x302)))
 (let (($x281 (not $x140)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x65 $x188)))
 (let (($x24 (and (not $x87) $x281)))
 (let (($x77 (and (and (and (and (and (and $x24 $x194) $x66) $x97) $x89) $x52) $x49)))
 (let (($x57 (and $x77 $x247)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x59 (or false (or false (and (and true (or $x319 $x234)) (or $x170 $x270))))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x59)))
 (let (($x5 (and $x51 $x57)))
 (let (($x182 (= $x5 true)))
 (let (($x96 (= $x182 true)))
 (let (($x103 (= $x96 true)))
 (let (($x31 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x276 (= $x31 true)))
 (let (($x227 (= $x276 true)))
 (let (($x317 (= $x227 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x235)))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let ((?x101 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x101)))
 (let (($x145 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x72 (= $x130 true)))
 (let (($x139 (= $x72 true)))
 (let (($x282 (= $x139 true)))
 (let (($x232 (and $x282 $x21)))
 (let (($x239 (and $x232 $x128)))
 (let (($x102 (and $x239 $x317)))
 (let (($x258 (and $x102 $x103)))
 (let (($x299 (and $x258 $x220)))
 (let (($x44 (and $x299 $x267)))
 (let (($x294 (and $x44 $x43)))
 (let (($x46 (and $x294 $x143)))
 (let (($x212 (and $x46 $x187)))
 (let (($x69 (and $x212 $x283)))
 (let (($x224 (and $x69 $x104)))
 (let (($x141 (and $x224 $x285)))
 (let (($x147 (and $x141 $x162)))
 (let (($x275 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x201 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x136 (bvuge ?x201 (_ bv1 32))))
 (let (($x93 (and $x136 $x147)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x256 (and $x81 $x93)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x50 (and $x137 $x256)))
 (let (($x269 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x184 (and $x269 $x50)))
 (let (($x169 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x142 (bvadd ?x6 (_ bv3 32))))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x30 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x142)))
 (let (($x122 (or false (or false (and (and true (or $x16 $x30)) (or $x264 $x169))))))
 (let (($x273 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x122)))
 (let (($x47 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x122)))
 (let (($x185 (and $x47 $x184)))
 (let (($x107 (=> $x185 $x116)))
 (not $x107))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (bvsge ?x257 (_ bv0 32))))
 (let (($x218 (= $x155 true)))
 (let (($x172 (= $x218 true)))
 (let (($x75 (forall ((input.ind-%var2154X (_ BitVec 32)) )(let ((?x298 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2154X)))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var2154X)))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2154X)))
 (=> $x113 (= ?x74 ?x298))))))
 ))
 (let (($x95 (forall ((input.ind-%var2153X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2153X)))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2153X)))
 (= $x113 $x136))))
 ))
 (let (($x63 (and $x95 $x75)))
 (let (($x62 (= $x63 true)))
 (let (($x250 (forall ((input.ind-%var2148X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2148X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x162))))
 (let ((?x298 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2148X)))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2148X)))
 (=> $x136 (= ?x298 ?x185))))))))
 ))
 (let (($x287 (forall ((input.ind-%var2147X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2147X) (bvult input.ind-%var2147X input.dst.llvm-%n))))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2147X)))
 (= $x136 $x293))))
 ))
 (let (($x8 (and $x287 $x250)))
 (let (($x244 (= $x8 true)))
 (let (($x134 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2142X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x162))))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var2142X)))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2142X)))
 (=> $x113 (= ?x74 ?x185))))))))
 ))
 (let (($x171 (forall ((input.ind-%var2141X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2141X) (bvult input.ind-%var2141X input.dst.llvm-%n))))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2141X)))
 (= $x113 $x293))))
 ))
 (let (($x116 (and $x171 $x134)))
 (let (($x107 (= $x116 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x69)))
 (let (($x88 (= ?x181 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x88 true)))
 (let (($x129 (= $x233 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (= $x73 true)))
 (let (($x290 (= $x183 true)))
 (let (($x123 (= $x290 true)))
 (let (($x231 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x277 (= $x231 true)))
 (let (($x308 (= $x277 true)))
 (let (($x187 (= $x308 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x245 (bvsub ?x6 ?x119)))
 (let (($x318 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x245) (bvult ?x6 ?x245))))
 (let (($x156 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x126 (ite $x156 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x225 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x132 (bvmul (_ bv4 64) ?x225)))
 (let ((?x78 ((_ extract 63 32) ?x132)))
 (let (($x67 (= ?x78 ?x126)))
 (let (($x160 (and $x67 $x318)))
 (let (($x209 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x43 (and $x209 $x160)))
 (let (($x294 (= true $x43)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (=> $x219 $x294)))
 (let (($x272 (= $x254 true)))
 (let (($x48 (= $x272 true)))
 (let (($x143 (= $x48 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x151 true)))
 (let (($x175 (= $x26 true)))
 (let (($x68 (= $x175 true)))
 (let (($x22 (= $x219 true)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x77)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x108)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x217 $x89)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x86 $x223)))
 (let (($x192 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x194 $x186)))
 (let (($x66 (not $x157)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x178 $x60)))
 (let (($x105 (and (not $x7) $x66)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x24 $x15)))
 (let (($x310 (not $x167)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x234 $x38)))
 (let (($x202 (and (not $x281) $x310)))
 (let (($x103 (and (and (and (and (and (and $x202 $x105) $x309) $x192) $x199) $x13) $x49)))
 (let (($x258 (and $x103 $x271)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x270 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x270)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x270)))
 (let (($x180 (or false (or false (and (and true (or $x33 $x23)) (or $x51 $x65))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x203 (and $x140 $x258)))
 (let (($x166 (= $x203 true)))
 (let (($x220 (= $x166 true)))
 (let (($x299 (= $x220 true)))
 (let (($x102 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x307 (= $x102 true)))
 (let (($x304 (= $x307 true)))
 (let (($x274 (= $x304 true)))
 (let ((?x239 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x31 (= (_ bv0 2) ?x239)))
 (let (($x276 (= $x31 true)))
 (let (($x227 (= $x276 true)))
 (let ((?x83 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x83)))
 (let (($x278 (= ?x21 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x278 true)))
 (let (($x216 (= $x235 true)))
 (let (($x154 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x158 (= $x154 true)))
 (let (($x101 (= $x158 true)))
 (let (($x55 (= $x101 true)))
 (let (($x9 (and $x55 $x216)))
 (let (($x317 (and $x9 $x227)))
 (let (($x179 (and $x317 $x274)))
 (let (($x39 (and $x179 $x299)))
 (let (($x44 (and $x39 $x267)))
 (let (($x177 (and $x44 $x68)))
 (let (($x46 (and $x177 $x143)))
 (let (($x212 (and $x46 $x187)))
 (let (($x283 (and $x212 $x123)))
 (let (($x118 (and $x283 $x129)))
 (let (($x262 (and $x118 $x107)))
 (let (($x150 (and $x262 $x244)))
 (let (($x207 (and $x150 $x62)))
 (let (($x130 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x72 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x72 (_ bv1 32))))
 (let (($x111 (and $x139 $x207)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x240 (and $x14 $x111)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x58 (and $x251 $x240)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x311 (and $x163 $x58)))
 (let (($x115 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd ?x6 (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x165 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x47 (or false (or false (and (and true (or $x18 $x165)) (or $x226 $x115))))))
 (let (($x269 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x47)))
 (let (($x54 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x47)))
 (let (($x315 (and $x54 $x311)))
 (let (($x312 (=> $x315 $x172)))
 (not $x312))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x155 (bvsge ?x257 (_ bv0 32))))
 (let (($x218 (= $x155 true)))
 (let (($x172 (= $x218 true)))
 (let (($x75 (forall ((input.ind-%var2154X (_ BitVec 32)) )(let ((?x298 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2154X)))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var2154X)))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2154X)))
 (=> $x113 (= ?x74 ?x298))))))
 ))
 (let (($x95 (forall ((input.ind-%var2153X (_ BitVec 32)) )(let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2153X)))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2153X)))
 (= $x113 $x136))))
 ))
 (let (($x63 (and $x95 $x75)))
 (let (($x62 (= $x63 true)))
 (let (($x250 (forall ((input.ind-%var2148X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2148X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x162))))
 (let ((?x298 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2148X)))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2148X)))
 (=> $x136 (= ?x298 ?x185))))))))
 ))
 (let (($x287 (forall ((input.ind-%var2147X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2147X) (bvult input.ind-%var2147X input.dst.llvm-%n))))
 (let (($x136 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2147X)))
 (= $x136 $x293))))
 ))
 (let (($x8 (and $x287 $x250)))
 (let (($x244 (= $x8 true)))
 (let (($x134 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2142X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x162))))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var2142X)))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2142X)))
 (=> $x113 (= ?x74 ?x185))))))))
 ))
 (let (($x171 (forall ((input.ind-%var2141X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2141X) (bvult input.ind-%var2141X input.dst.llvm-%n))))
 (let (($x113 (input.spec-%var-x-1.0.1 input.ind-%var2141X)))
 (= $x113 $x293))))
 ))
 (let (($x116 (and $x171 $x134)))
 (let (($x107 (= $x116 true)))
 (let ((?x69 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x181 (bvneg ?x69)))
 (let (($x88 (= ?x181 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x233 (= $x88 true)))
 (let (($x129 (= $x233 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x183 (= $x73 true)))
 (let (($x290 (= $x183 true)))
 (let (($x123 (= $x290 true)))
 (let (($x231 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x277 (= $x231 true)))
 (let (($x308 (= $x277 true)))
 (let (($x187 (= $x308 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x245 (bvsub ?x6 ?x119)))
 (let (($x318 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x245) (bvult ?x6 ?x245))))
 (let (($x156 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x126 (ite $x156 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x225 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x132 (bvmul (_ bv4 64) ?x225)))
 (let ((?x78 ((_ extract 63 32) ?x132)))
 (let (($x67 (= ?x78 ?x126)))
 (let (($x160 (and $x67 $x318)))
 (let (($x209 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x43 (and $x209 $x160)))
 (let (($x294 (= true $x43)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (=> $x219 $x294)))
 (let (($x272 (= $x254 true)))
 (let (($x48 (= $x272 true)))
 (let (($x143 (= $x48 true)))
 (let (($x151 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x26 (= $x151 true)))
 (let (($x175 (= $x26 true)))
 (let (($x68 (= $x175 true)))
 (let (($x22 (= $x219 true)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x77)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x108)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x191)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x217 $x89)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x199 (and $x86 $x223)))
 (let (($x192 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (and $x194 $x186)))
 (let (($x66 (not $x157)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x178 $x60)))
 (let (($x105 (and (not $x7) $x66)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x24 $x15)))
 (let (($x310 (not $x167)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x234 $x38)))
 (let (($x202 (and (not $x281) $x310)))
 (let (($x103 (and (and (and (and (and (and $x202 $x105) $x309) $x192) $x199) $x13) $x49)))
 (let (($x258 (and $x103 $x271)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x270 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x270)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x270)))
 (let (($x180 (or false (or false (and (and true (or $x33 $x23)) (or $x51 $x65))))))
 (let (($x140 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x180)))
 (let (($x203 (and $x140 $x258)))
 (let (($x166 (= $x203 true)))
 (let (($x220 (= $x166 true)))
 (let (($x299 (= $x220 true)))
 (let (($x102 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x307 (= $x102 true)))
 (let (($x304 (= $x307 true)))
 (let (($x274 (= $x304 true)))
 (let ((?x239 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x31 (= (_ bv0 2) ?x239)))
 (let (($x276 (= $x31 true)))
 (let (($x227 (= $x276 true)))
 (let ((?x83 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x83)))
 (let (($x278 (= ?x21 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x235 (= $x278 true)))
 (let (($x216 (= $x235 true)))
 (let (($x154 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x158 (= $x154 true)))
 (let (($x101 (= $x158 true)))
 (let (($x55 (= $x101 true)))
 (let (($x9 (and $x55 $x216)))
 (let (($x317 (and $x9 $x227)))
 (let (($x179 (and $x317 $x274)))
 (let (($x39 (and $x179 $x299)))
 (let (($x44 (and $x39 $x267)))
 (let (($x177 (and $x44 $x68)))
 (let (($x46 (and $x177 $x143)))
 (let (($x212 (and $x46 $x187)))
 (let (($x283 (and $x212 $x123)))
 (let (($x118 (and $x283 $x129)))
 (let (($x262 (and $x118 $x107)))
 (let (($x150 (and $x262 $x244)))
 (let (($x207 (and $x150 $x62)))
 (let (($x130 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x72 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x72 (_ bv1 32))))
 (let (($x111 (and $x139 $x207)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x240 (and $x14 $x111)))
 (let (($x251 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x58 (and $x251 $x240)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x311 (and $x163 $x58)))
 (let (($x115 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd ?x6 (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x165 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x47 (or false (or false (and (and true (or $x18 $x165)) (or $x226 $x115))))))
 (let (($x269 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x47)))
 (let (($x54 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x47)))
 (let (($x315 (and $x54 $x311)))
 (let (($x312 (=> $x315 $x172)))
 (not $x312))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (bvule ?x248 input.dst.llvm-%n)))
 (let (($x110 (= $x196 true)))
 (let (($x266 (= $x110 true)))
 (let (($x320 (forall ((input.ind-%var2177X (_ BitVec 32)) )(let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2177X)))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var2177X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2177X)))
 (=> $x74 (= ?x185 ?x80))))))
 ))
 (let (($x17 (forall ((input.ind-%var2176X (_ BitVec 32)) )(let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2176X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2176X)))
 (= $x74 $x139))))
 ))
 (let (($x306 (and $x17 $x320)))
 (let (($x141 (= $x306 true)))
 (let (($x168 (forall ((input.ind-%var2171X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var2171X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x62))))
 (let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2171X)))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2171X)))
 (=> $x139 (= ?x80 ?x315))))))))
 ))
 (let (($x94 (forall ((input.ind-%var2170X (_ BitVec 32)) )(let (($x93 (and (bvule (_ bv0 32) input.ind-%var2170X) (bvult input.ind-%var2170X input.dst.llvm-%n))))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2170X)))
 (= $x139 $x93))))
 ))
 (let (($x291 (and $x94 $x168)))
 (let (($x198 (= $x291 true)))
 (let (($x218 (forall ((input.ind-%var2165X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var2165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x62))))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var2165X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2165X)))
 (=> $x74 (= ?x185 ?x315))))))))
 ))
 (let (($x152 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x93 (and (bvule (_ bv0 32) input.ind-%var2164X) (bvult input.ind-%var2164X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2164X)))
 (= $x74 $x93))))
 ))
 (let (($x172 (and $x152 $x218)))
 (let (($x312 (= $x172 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x118)))
 (let (($x113 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x113 true)))
 (let (($x10 (= $x195 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x69 true)))
 (let (($x88 (= $x181 true)))
 (let (($x233 (= $x88 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x183 (= $x73 true)))
 (let (($x290 (= $x183 true)))
 (let (($x123 (= $x290 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x160 (bvsub ?x6 ?x119)))
 (let (($x272 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x160) (bvult ?x6 ?x160))))
 (let (($x214 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x236 (ite $x214 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x67)))
 (let ((?x245 ((_ extract 63 32) ?x114)))
 (let (($x318 (= ?x245 ?x236)))
 (let (($x48 (and $x318 $x272)))
 (let (($x156 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x143 (and $x156 $x48)))
 (let (($x46 (= true $x143)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x219 $x46)))
 (let (($x277 (= $x231 true)))
 (let (($x308 (= $x277 true)))
 (let (($x187 (= $x308 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x28 true)))
 (let (($x209 (= $x206 true)))
 (let (($x238 (= $x209 true)))
 (let (($x26 (= $x219 true)))
 (let (($x175 (= $x26 true)))
 (let (($x68 (= $x175 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x103)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x108)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x89 $x199)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x191 $x182)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x105 $x247)))
 (let (($x309 (not $x97)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x186 $x157)))
 (let (($x41 (and (not $x66) $x309)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x202 $x178)))
 (let (($x7 (not $x60)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x23 $x138)))
 (let (($x194 (and (not $x310) $x7)))
 (let (($x299 (and (and (and (and (and (and $x194 $x41) $x5) $x217) $x52) $x96) $x49)))
 (let (($x39 (and $x299 $x77)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x24 (or false (or false (and (and true (or $x188 $x87)) (or $x140 $x234))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x22 (and $x167 $x39)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let (($x44 (= $x267 true)))
 (let (($x179 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x106 (= $x179 true)))
 (let (($x170 (= $x106 true)))
 (let (($x302 (= $x170 true)))
 (let ((?x317 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x102 (= (_ bv0 2) ?x317)))
 (let (($x307 (= $x102 true)))
 (let (($x304 (= $x307 true)))
 (let ((?x235 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x235)))
 (let (($x128 (= ?x216 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x128 true)))
 (let (($x31 (= $x239 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x145 (= $x117 true)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x276 (and $x21 $x31)))
 (let (($x274 (and $x276 $x304)))
 (let (($x270 (and $x274 $x302)))
 (let (($x151 (and $x270 $x44)))
 (let (($x177 (and $x151 $x68)))
 (let (($x225 (and $x177 $x238)))
 (let (($x212 (and $x225 $x187)))
 (let (($x283 (and $x212 $x123)))
 (let (($x129 (and $x283 $x233)))
 (let (($x293 (and $x129 $x10)))
 (let (($x229 (and $x293 $x312)))
 (let (($x241 (and $x229 $x198)))
 (let (($x265 (and $x241 $x141)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x158 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x158 (_ bv1 32))))
 (let (($x45 (and $x101 $x265)))
 (let (($x275 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x275 $x45)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x70 (and $x81 $x71)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x279 $x70)))
 (let (($x122 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd ?x6 (_ bv3 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x264 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x54 (or false (or false (and (and true (or $x109 $x264)) (or $x193 $x122))))))
 (let (($x163 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x54)))
 (let (($x253 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x54)))
 (let (($x204 (and $x253 $x120)))
 (let (($x146 (=> $x204 $x266)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x248 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (bvule ?x248 input.dst.llvm-%n)))
 (let (($x110 (= $x196 true)))
 (let (($x266 (= $x110 true)))
 (let (($x320 (forall ((input.ind-%var2177X (_ BitVec 32)) )(let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2177X)))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var2177X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2177X)))
 (=> $x74 (= ?x185 ?x80))))))
 ))
 (let (($x17 (forall ((input.ind-%var2176X (_ BitVec 32)) )(let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2176X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2176X)))
 (= $x74 $x139))))
 ))
 (let (($x306 (and $x17 $x320)))
 (let (($x141 (= $x306 true)))
 (let (($x168 (forall ((input.ind-%var2171X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var2171X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x62))))
 (let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2171X)))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2171X)))
 (=> $x139 (= ?x80 ?x315))))))))
 ))
 (let (($x94 (forall ((input.ind-%var2170X (_ BitVec 32)) )(let (($x93 (and (bvule (_ bv0 32) input.ind-%var2170X) (bvult input.ind-%var2170X input.dst.llvm-%n))))
 (let (($x139 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2170X)))
 (= $x139 $x93))))
 ))
 (let (($x291 (and $x94 $x168)))
 (let (($x198 (= $x291 true)))
 (let (($x218 (forall ((input.ind-%var2165X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var2165X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x62))))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var2165X)))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2165X)))
 (=> $x74 (= ?x185 ?x315))))))))
 ))
 (let (($x152 (forall ((input.ind-%var2164X (_ BitVec 32)) )(let (($x93 (and (bvule (_ bv0 32) input.ind-%var2164X) (bvult input.ind-%var2164X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-1.0.1 input.ind-%var2164X)))
 (= $x74 $x93))))
 ))
 (let (($x172 (and $x152 $x218)))
 (let (($x312 (= $x172 true)))
 (let ((?x118 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x201 (bvneg ?x118)))
 (let (($x113 (= ?x201 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x195 (= $x113 true)))
 (let (($x10 (= $x195 true)))
 (let (($x69 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x181 (= $x69 true)))
 (let (($x88 (= $x181 true)))
 (let (($x233 (= $x88 true)))
 (let (($x73 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x183 (= $x73 true)))
 (let (($x290 (= $x183 true)))
 (let (($x123 (= $x290 true)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let ((?x160 (bvsub ?x6 ?x119)))
 (let (($x272 (ite (bvsge ?x119 (_ bv0 32)) (bvuge ?x6 ?x160) (bvult ?x6 ?x160))))
 (let (($x214 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x236 (ite $x214 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x67 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x67)))
 (let ((?x245 ((_ extract 63 32) ?x114)))
 (let (($x318 (= ?x245 ?x236)))
 (let (($x48 (and $x318 $x272)))
 (let (($x156 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x143 (and $x156 $x48)))
 (let (($x46 (= true $x143)))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x219 $x46)))
 (let (($x277 (= $x231 true)))
 (let (($x308 (= $x277 true)))
 (let (($x187 (= $x308 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x206 (= $x28 true)))
 (let (($x209 (= $x206 true)))
 (let (($x238 (= $x209 true)))
 (let (($x26 (= $x219 true)))
 (let (($x175 (= $x26 true)))
 (let (($x68 (= $x175 true)))
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x103)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x108)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x223 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x199 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (and $x89 $x199)))
 (let (($x191 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x191 $x182)))
 (let (($x217 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x105 $x247)))
 (let (($x309 (not $x97)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x186 $x157)))
 (let (($x41 (and (not $x66) $x309)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x202 $x178)))
 (let (($x7 (not $x60)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x23 $x138)))
 (let (($x194 (and (not $x310) $x7)))
 (let (($x299 (and (and (and (and (and (and $x194 $x41) $x5) $x217) $x52) $x96) $x49)))
 (let (($x39 (and $x299 $x77)))
 (let (($x234 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x65 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x65)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x65)))
 (let (($x24 (or false (or false (and (and true (or $x188 $x87)) (or $x140 $x234))))))
 (let (($x167 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x22 (and $x167 $x39)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let (($x44 (= $x267 true)))
 (let (($x179 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x106 (= $x179 true)))
 (let (($x170 (= $x106 true)))
 (let (($x302 (= $x170 true)))
 (let ((?x317 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x102 (= (_ bv0 2) ?x317)))
 (let (($x307 (= $x102 true)))
 (let (($x304 (= $x307 true)))
 (let ((?x235 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x216 (bvneg ?x235)))
 (let (($x128 (= ?x216 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x128 true)))
 (let (($x31 (= $x239 true)))
 (let (($x117 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x145 (= $x117 true)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x276 (and $x21 $x31)))
 (let (($x274 (and $x276 $x304)))
 (let (($x270 (and $x274 $x302)))
 (let (($x151 (and $x270 $x44)))
 (let (($x177 (and $x151 $x68)))
 (let (($x225 (and $x177 $x238)))
 (let (($x212 (and $x225 $x187)))
 (let (($x283 (and $x212 $x123)))
 (let (($x129 (and $x283 $x233)))
 (let (($x293 (and $x129 $x10)))
 (let (($x229 (and $x293 $x312)))
 (let (($x241 (and $x229 $x198)))
 (let (($x265 (and $x241 $x141)))
 (let (($x154 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x158 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x101 (bvuge ?x158 (_ bv1 32))))
 (let (($x45 (and $x101 $x265)))
 (let (($x275 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x71 (and $x275 $x45)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x70 (and $x81 $x71)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x120 (and $x279 $x70)))
 (let (($x122 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd ?x6 (_ bv3 32))))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x264 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x54 (or false (or false (and (and true (or $x109 $x264)) (or $x193 $x122))))))
 (let (($x163 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x54)))
 (let (($x253 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x54)))
 (let (($x204 (and $x253 $x120)))
 (let (($x146 (=> $x204 $x266)))
 (not $x146))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x36 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x36 (_ bv1 32))))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (not $x219)))
 (let (($x171 (or $x12 $x301)))
 (let (($x50 (= $x171 true)))
 (let (($x37 (= $x50 true)))
 (let (($x262 (forall ((input.ind-%var2200X (_ BitVec 32)) )(let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2200X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var2200X)))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2200X)))
 (=> $x272 (= ?x69 ?x173))))))
 ))
 (let (($x300 (forall ((input.ind-%var2199X (_ BitVec 32)) )(let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2199X)))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2199X)))
 (= $x272 $x229))))
 ))
 (let (($x136 (and $x300 $x262)))
 (let (($x107 (= $x136 true)))
 (let (($x84 (forall ((input.ind-%var2194X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2194X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x311))))
 (let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2194X)))
 (let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2194X)))
 (=> $x229 (= ?x173 ?x176))))))))
 ))
 (let (($x168 (forall ((input.ind-%var2193X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var2193X) (bvult input.ind-%var2193X input.dst.llvm-%n))))
 (let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2193X)))
 (= $x229 $x212))))
 ))
 (let (($x100 (and $x168 $x84)))
 (let (($x33 (= $x100 true)))
 (let (($x315 (forall ((input.ind-%var2188X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2188X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x311))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var2188X)))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2188X)))
 (=> $x272 (= ?x69 ?x176))))))))
 ))
 (let (($x183 (forall ((input.ind-%var2187X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var2187X) (bvult input.ind-%var2187X input.dst.llvm-%n))))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2187X)))
 (= $x272 $x212))))
 ))
 (let (($x257 (and $x183 $x315)))
 (let (($x155 (= $x257 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x114)))
 (let (($x214 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x214 true)))
 (let (($x318 (= $x236 true)))
 (let (($x132 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x132 true)))
 (let (($x156 (= $x78 true)))
 (let (($x126 (= $x156 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (= $x28 true)))
 (let (($x209 (= $x206 true)))
 (let (($x238 (= $x209 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x151 true)))
 (let (($x175 (= $x26 true)))
 (let (($x68 (= $x175 true)))
 (let (($x39 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x39 true)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x220 true)))
 (let (($x49 (= $x108 true)))
 (let (($x299 (= $x49 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x192)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x41)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x309 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x157 $x57)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x186 $x105)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x167 $x23)))
 (let (($x310 (not $x138)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x281 $x99)))
 (let (($x202 (and (not $x24) $x310)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x87 $x112)))
 (let (($x140 (not $x180)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x31 $x276)))
 (let (($x38 (and (not $x188) $x140)))
 (let (($x89 (and (and (and (and (and (and $x38 $x202) $x60) $x194) $x247) $x309) $x271)))
 (let (($x223 (and $x89 $x5)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x307 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x51 (or false (or false (and (and true (or $x307 $x304)) (or $x106 $x170))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x199 (and $x65 $x223)))
 (let (($x182 (= $x199 true)))
 (let (($x52 (= $x182 true)))
 (let (($x166 (= $x52 true)))
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x235 (= (_ bv0 2) ?x278)))
 (let (($x216 (= $x235 true)))
 (let (($x9 (= $x216 true)))
 (let ((?x101 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x101)))
 (let (($x145 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x128 (and $x21 $x9)))
 (let (($x13 (and $x128 $x166)))
 (let (($x103 (and $x13 $x299)))
 (let (($x44 (and $x103 $x267)))
 (let (($x177 (and $x44 $x68)))
 (let (($x225 (and $x177 $x238)))
 (let (($x67 (and $x225 $x126)))
 (let (($x43 (and $x67 $x318)))
 (let (($x218 (and $x43 $x155)))
 (let (($x282 (and $x218 $x33)))
 (let (($x252 (and $x282 $x107)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x130 $x252)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x244 (and $x14 $x190)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x27 (and $x137 $x244)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let (($x47 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x264 (bvadd ?x6 (_ bv3 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x226 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x264)))
 (let (($x253 (or false (or false (and (and true (or $x144 $x226)) (or $x273 $x47))))))
 (let (($x279 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x253)))
 (let (($x142 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x253)))
 (let (($x208 (and $x142 $x27)))
 (let (($x285 (=> $x208 $x37)))
 (not $x285))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x36 (ite $x61 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x36 (_ bv1 32))))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (not $x219)))
 (let (($x171 (or $x12 $x301)))
 (let (($x50 (= $x171 true)))
 (let (($x37 (= $x50 true)))
 (let (($x262 (forall ((input.ind-%var2200X (_ BitVec 32)) )(let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2200X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var2200X)))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2200X)))
 (=> $x272 (= ?x69 ?x173))))))
 ))
 (let (($x300 (forall ((input.ind-%var2199X (_ BitVec 32)) )(let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2199X)))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2199X)))
 (= $x272 $x229))))
 ))
 (let (($x136 (and $x300 $x262)))
 (let (($x107 (= $x136 true)))
 (let (($x84 (forall ((input.ind-%var2194X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2194X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x311))))
 (let ((?x173 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2194X)))
 (let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2194X)))
 (=> $x229 (= ?x173 ?x176))))))))
 ))
 (let (($x168 (forall ((input.ind-%var2193X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var2193X) (bvult input.ind-%var2193X input.dst.llvm-%n))))
 (let (($x229 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2193X)))
 (= $x229 $x212))))
 ))
 (let (($x100 (and $x168 $x84)))
 (let (($x33 (= $x100 true)))
 (let (($x315 (forall ((input.ind-%var2188X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2188X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x311))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var2188X)))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2188X)))
 (=> $x272 (= ?x69 ?x176))))))))
 ))
 (let (($x183 (forall ((input.ind-%var2187X (_ BitVec 32)) )(let (($x212 (and (bvule (_ bv0 32) input.ind-%var2187X) (bvult input.ind-%var2187X input.dst.llvm-%n))))
 (let (($x272 (input.spec-%var-x-1.0.1 input.ind-%var2187X)))
 (= $x272 $x212))))
 ))
 (let (($x257 (and $x183 $x315)))
 (let (($x155 (= $x257 true)))
 (let ((?x114 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x245 (bvneg ?x114)))
 (let (($x214 (= ?x245 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x236 (= $x214 true)))
 (let (($x318 (= $x236 true)))
 (let (($x132 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x78 (= $x132 true)))
 (let (($x156 (= $x78 true)))
 (let (($x126 (= $x156 true)))
 (let (($x28 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x206 (= $x28 true)))
 (let (($x209 (= $x206 true)))
 (let (($x238 (= $x209 true)))
 (let (($x151 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x26 (= $x151 true)))
 (let (($x175 (= $x26 true)))
 (let (($x68 (= $x175 true)))
 (let (($x39 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x39 true)))
 (let (($x133 (= $x22 true)))
 (let (($x267 (= $x133 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x108 (= $x220 true)))
 (let (($x49 (= $x108 true)))
 (let (($x299 (= $x49 true)))
 (let ((?x192 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x192)))
 (let ((?x41 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x41)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x309 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x157 $x57)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x247 (and $x186 $x105)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (and $x167 $x23)))
 (let (($x310 (not $x138)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x281 $x99)))
 (let (($x202 (and (not $x24) $x310)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x87 $x112)))
 (let (($x140 (not $x180)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x31 $x276)))
 (let (($x38 (and (not $x188) $x140)))
 (let (($x89 (and (and (and (and (and (and $x38 $x202) $x60) $x194) $x247) $x309) $x271)))
 (let (($x223 (and $x89 $x5)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x304 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x307 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x51 (or false (or false (and (and true (or $x307 $x304)) (or $x106 $x170))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x199 (and $x65 $x223)))
 (let (($x182 (= $x199 true)))
 (let (($x52 (= $x182 true)))
 (let (($x166 (= $x52 true)))
 (let ((?x278 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x235 (= (_ bv0 2) ?x278)))
 (let (($x216 (= $x235 true)))
 (let (($x9 (= $x216 true)))
 (let ((?x101 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x55 (bvneg ?x101)))
 (let (($x145 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x145 true)))
 (let (($x21 (= $x83 true)))
 (let (($x128 (and $x21 $x9)))
 (let (($x13 (and $x128 $x166)))
 (let (($x103 (and $x13 $x299)))
 (let (($x44 (and $x103 $x267)))
 (let (($x177 (and $x44 $x68)))
 (let (($x225 (and $x177 $x238)))
 (let (($x67 (and $x225 $x126)))
 (let (($x43 (and $x67 $x318)))
 (let (($x218 (and $x43 $x155)))
 (let (($x282 (and $x218 $x33)))
 (let (($x252 (and $x282 $x107)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x190 (and $x130 $x252)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x244 (and $x14 $x190)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x27 (and $x137 $x244)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let (($x47 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x264 (bvadd ?x6 (_ bv3 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x226 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x264)))
 (let (($x253 (or false (or false (and (and true (or $x144 $x226)) (or $x273 $x47))))))
 (let (($x279 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x253)))
 (let (($x142 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x253)))
 (let (($x208 (and $x142 $x27)))
 (let (($x285 (=> $x208 $x37)))
 (not $x285))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x196 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x196 (_ bv0 32))))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (or $x219 $x222)))
 (let (($x110 (= $x198 true)))
 (let (($x250 (= $x110 true)))
 (let (($x116 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2223X)))
 (let ((?x111 (input.spec-%var-x-1.1.1 input.ind-%var2223X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2223X)))
 (=> $x183 (= ?x111 ?x143))))))
 ))
 (let (($x306 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x255 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2222X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2222X)))
 (= $x183 $x255))))
 ))
 (let (($x277 (and $x306 $x116)))
 (let (($x312 (= $x277 true)))
 (let (($x94 (forall ((input.ind-%var2217X (_ BitVec 32)) )(let ((?x300 (bvadd (bvmul input.ind-%var2217X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x136))))
 (let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2217X)))
 (let (($x255 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2217X)))
 (=> $x255 (= ?x143 ?x208))))))))
 ))
 (let (($x92 (forall ((input.ind-%var2216X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2216X) (bvult input.ind-%var2216X input.dst.llvm-%n))))
 (let (($x255 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2216X)))
 (= $x255 $x287))))
 ))
 (let (($x263 (and $x92 $x94)))
 (let (($x294 (= $x263 true)))
 (let (($x36 (forall ((input.ind-%var2211X (_ BitVec 32)) )(let ((?x300 (bvadd (bvmul input.ind-%var2211X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x136))))
 (let ((?x111 (input.spec-%var-x-1.1.1 input.ind-%var2211X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2211X)))
 (=> $x183 (= ?x111 ?x208))))))))
 ))
 (let (($x34 (forall ((input.ind-%var2210X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2210X) (bvult input.ind-%var2210X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2210X)))
 (= $x183 $x287))))
 ))
 (let (($x301 (and $x34 $x36)))
 (let (($x171 (= $x301 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x214)))
 (let (($x318 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x318 true)))
 (let (($x254 (= $x43 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x126 (= $x156 true)))
 (let (($x67 (= $x126 true)))
 (let (($x114 (= $x67 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x209 true)))
 (let (($x225 (= $x238 true)))
 (let (($x132 (= $x225 true)))
 (let (($x175 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x68 (= $x175 true)))
 (let (($x177 (= $x68 true)))
 (let (($x28 (= $x177 true)))
 (let (($x133 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x133 true)))
 (let (($x44 (= $x267 true)))
 (let (($x151 (= $x44 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x299 (= $x49 true)))
 (let (($x103 (= $x299 true)))
 (let (($x39 (= $x103 true)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x191)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x97)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x157)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x186 $x66)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x217 $x57)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x23 $x138)))
 (let (($x202 (not $x310)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x24 $x213)))
 (let (($x178 (and (not $x167) $x202)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x112 $x180)))
 (let (($x38 (not $x140)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x15 $x102)))
 (let (($x99 (and (not $x87) $x38)))
 (let (($x199 (and (and (and (and (and (and $x99 $x178) $x86) $x194) $x105) $x203) $x309)))
 (let (($x182 (and $x199 $x41)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x274)))
 (let (($x276 (or false (or false (and (and true (or $x179 $x106)) (or $x270 $x59))))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x276)))
 (let (($x52 (and $x234 $x182)))
 (let (($x166 (= $x52 true)))
 (let (($x13 (= $x166 true)))
 (let (($x96 (= $x13 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x235)))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let ((?x55 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x55)))
 (let (($x83 (= ?x117 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x83 true)))
 (let (($x232 (= $x21 true)))
 (let (($x227 (and $x232 $x128)))
 (let (($x220 (and $x227 $x96)))
 (let (($x22 (and $x220 $x39)))
 (let (($x26 (and $x22 $x151)))
 (let (($x206 (and $x26 $x28)))
 (let (($x78 (and $x206 $x132)))
 (let (($x245 (and $x78 $x114)))
 (let (($x272 (and $x245 $x254)))
 (let (($x50 (and $x272 $x171)))
 (let (($x231 (and $x50 $x294)))
 (let (($x80 (and $x231 $x312)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x29 (and $x154 $x80)))
 (let (($x275 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x275 $x29)))
 (let (($x251 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x251 $x161)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let (($x54 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd ?x6 (_ bv3 32))))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x193 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x226)))
 (let (($x142 (or false (or false (and (and true (or $x169 $x193)) (or $x269 $x54))))))
 (let (($x137 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x142)))
 (let (($x30 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x142)))
 (let (($x123 (and $x30 $x164)))
 (let (($x135 (=> $x123 $x250)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x196 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (= ?x196 (_ bv0 32))))
 (let (($x219 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (or $x219 $x222)))
 (let (($x110 (= $x198 true)))
 (let (($x250 (= $x110 true)))
 (let (($x116 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2223X)))
 (let ((?x111 (input.spec-%var-x-1.1.1 input.ind-%var2223X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2223X)))
 (=> $x183 (= ?x111 ?x143))))))
 ))
 (let (($x306 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x255 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2222X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2222X)))
 (= $x183 $x255))))
 ))
 (let (($x277 (and $x306 $x116)))
 (let (($x312 (= $x277 true)))
 (let (($x94 (forall ((input.ind-%var2217X (_ BitVec 32)) )(let ((?x300 (bvadd (bvmul input.ind-%var2217X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x136))))
 (let ((?x143 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2217X)))
 (let (($x255 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2217X)))
 (=> $x255 (= ?x143 ?x208))))))))
 ))
 (let (($x92 (forall ((input.ind-%var2216X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2216X) (bvult input.ind-%var2216X input.dst.llvm-%n))))
 (let (($x255 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2216X)))
 (= $x255 $x287))))
 ))
 (let (($x263 (and $x92 $x94)))
 (let (($x294 (= $x263 true)))
 (let (($x36 (forall ((input.ind-%var2211X (_ BitVec 32)) )(let ((?x300 (bvadd (bvmul input.ind-%var2211X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x208 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x136))))
 (let ((?x111 (input.spec-%var-x-1.1.1 input.ind-%var2211X)))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2211X)))
 (=> $x183 (= ?x111 ?x208))))))))
 ))
 (let (($x34 (forall ((input.ind-%var2210X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2210X) (bvult input.ind-%var2210X input.dst.llvm-%n))))
 (let (($x183 (input.spec-%var-x-1.0.1 input.ind-%var2210X)))
 (= $x183 $x287))))
 ))
 (let (($x301 (and $x34 $x36)))
 (let (($x171 (= $x301 true)))
 (let ((?x214 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x236 (bvneg ?x214)))
 (let (($x318 (= ?x236 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x318 true)))
 (let (($x254 (= $x43 true)))
 (let (($x156 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x126 (= $x156 true)))
 (let (($x67 (= $x126 true)))
 (let (($x114 (= $x67 true)))
 (let (($x209 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x238 (= $x209 true)))
 (let (($x225 (= $x238 true)))
 (let (($x132 (= $x225 true)))
 (let (($x175 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x68 (= $x175 true)))
 (let (($x177 (= $x68 true)))
 (let (($x28 (= $x177 true)))
 (let (($x133 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x267 (= $x133 true)))
 (let (($x44 (= $x267 true)))
 (let (($x151 (= $x44 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x299 (= $x49 true)))
 (let (($x103 (= $x299 true)))
 (let (($x39 (= $x103 true)))
 (let ((?x191 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x191)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x97)))
 (let ((?x247 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x247)))
 (let ((?x157 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x157)))
 (let (($x186 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x186 $x66)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x217 $x57)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x310 (and $x23 $x138)))
 (let (($x202 (not $x310)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x167 (and $x24 $x213)))
 (let (($x178 (and (not $x167) $x202)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x112 $x180)))
 (let (($x38 (not $x140)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x15 $x102)))
 (let (($x99 (and (not $x87) $x38)))
 (let (($x199 (and (and (and (and (and (and $x99 $x178) $x86) $x194) $x105) $x203) $x309)))
 (let (($x182 (and $x199 $x41)))
 (let (($x59 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x274 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x274)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x274)))
 (let (($x276 (or false (or false (and (and true (or $x179 $x106)) (or $x270 $x59))))))
 (let (($x234 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x276)))
 (let (($x52 (and $x234 $x182)))
 (let (($x166 (= $x52 true)))
 (let (($x13 (= $x166 true)))
 (let (($x96 (= $x13 true)))
 (let ((?x235 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x216 (= (_ bv0 2) ?x235)))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let ((?x55 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x117 (bvneg ?x55)))
 (let (($x83 (= ?x117 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x83 true)))
 (let (($x232 (= $x21 true)))
 (let (($x227 (and $x232 $x128)))
 (let (($x220 (and $x227 $x96)))
 (let (($x22 (and $x220 $x39)))
 (let (($x26 (and $x22 $x151)))
 (let (($x206 (and $x26 $x28)))
 (let (($x78 (and $x206 $x132)))
 (let (($x245 (and $x78 $x114)))
 (let (($x272 (and $x245 $x254)))
 (let (($x50 (and $x272 $x171)))
 (let (($x231 (and $x50 $x294)))
 (let (($x80 (and $x231 $x312)))
 (let (($x154 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x29 (and $x154 $x80)))
 (let (($x275 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x161 (and $x275 $x29)))
 (let (($x251 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x164 (and $x251 $x161)))
 (let ((?x119 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x119)))
 (let (($x54 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd ?x6 (_ bv3 32))))
 (let (($x269 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x193 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x226)))
 (let (($x142 (or false (or false (and (and true (or $x169 $x193)) (or $x269 $x54))))))
 (let (($x137 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x142)))
 (let (($x30 (=> (and $x219 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x142)))
 (let (($x123 (and $x30 $x164)))
 (let (($x135 (=> $x123 $x250)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 177 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x204 true)))
 (let (($x75 (= $x70 true)))
 (let (($x153 (forall ((input.ind-%var2246X (_ BitVec 32)) )(let ((?x317 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2246X)))
 (let ((?x300 (input.spec-%var-x-1.1.1 input.ind-%var2246X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2246X)))
 (=> $x318 (= ?x300 ?x317))))))
 ))
 (let (($x139 (forall ((input.ind-%var2245X (_ BitVec 32)) )(let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2245X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2245X)))
 (= $x318 $x18))))
 ))
 (let (($x293 (and $x139 $x153)))
 (let (($x147 (= $x293 true)))
 (let (($x218 (forall ((input.ind-%var2240X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var2240X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x263))))
 (let ((?x317 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2240X)))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2240X)))
 (=> $x18 (= ?x317 ?x292))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2239X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2239X) (bvult input.ind-%var2239X input.dst.llvm-%n))))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2239X)))
 (= $x18 $x287))))
 ))
 (let (($x257 (and $x250 $x218)))
 (let (($x229 (= $x257 true)))
 (let (($x312 (forall ((input.ind-%var2234X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var2234X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x263))))
 (let ((?x300 (input.spec-%var-x-1.1.1 input.ind-%var2234X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2234X)))
 (=> $x318 (= ?x300 ?x292))))))))
 ))
 (let (($x34 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2233X) (bvult input.ind-%var2233X input.dst.llvm-%n))))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2233X)))
 (= $x318 $x287))))
 ))
 (let (($x80 (and $x34 $x312)))
 (let (($x29 (= $x80 true)))
 (let ((?x132 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x132)))
 (let (($x126 (= ?x78 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x126 true)))
 (let (($x114 (= $x67 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x39)))
 (let ((?x299 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x299)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x182 $x13)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x41 $x96)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x57 $x105)))
 (let (($x247 (not $x5)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x186 $x157)))
 (let (($x223 (and (not $x66) $x247)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x86 $x89)))
 (let (($x194 (not $x7)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x276 $x234)))
 (let (($x217 (and (not $x60) $x194)))
 (let (($x175 (and (and (and (and (and (and $x217 $x223) $x309) $x191) $x220) $x49) $x103)))
 (let (($x68 (and $x175 $x22)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x202 (or false (or false (and (and true (or $x180 $x140)) (or $x167 $x258))))))
 (let (($x271 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x202)))
 (let (($x177 (and $x271 $x68)))
 (let (($x28 (= $x177 true)))
 (let (($x206 (= $x28 true)))
 (let (($x209 (= $x206 true)))
 (let (($x170 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x302 (= $x170 true)))
 (let (($x270 (= $x302 true)))
 (let (($x59 (= $x270 true)))
 (let (($x304 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x188 (= $x304 true)))
 (let (($x274 (= $x188 true)))
 (let (($x179 (= $x274 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let (($x227 (= $x128 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x21 (= (_ bv0 2) ?x83)))
 (let (($x232 (= $x21 true)))
 (let (($x278 (= $x232 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x154 (= $x130 true)))
 (let (($x158 (= $x154 true)))
 (let (($x101 (= $x158 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x251 (= $x16 true)))
 (let (($x81 (= $x251 true)))
 (let (($x14 (= $x81 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x54)))
 (let (($x253 (= ?x163 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (= $x253 true)))
 (let (($x142 (= $x279 true)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (not $x193)))
 (let (($x273 (= $x115 true)))
 (let (($x122 (= $x273 true)))
 (let (($x269 (= $x122 true)))
 (let (($x137 (and $x269 $x142)))
 (let (($x275 (and $x137 $x14)))
 (let (($x55 (and $x275 $x101)))
 (let (($x235 (and $x55 $x278)))
 (let (($x307 (and $x235 $x227)))
 (let (($x106 (and $x307 $x179)))
 (let (($x51 (and $x106 $x59)))
 (let (($x238 (and $x51 $x209)))
 (let (($x245 (and $x238 $x114)))
 (let (($x161 (and $x245 $x29)))
 (let (($x266 (and $x161 $x229)))
 (let (($x72 (and $x266 $x147)))
 (let (($x264 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (= ?x109 (_ bv0 32))))
 (let (($x118 (and $x226 $x72)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x6 $x118)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x265 (and $x237 $x93)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x219 $x265)))
 (let (($x285 (=> $x20 $x75)))
 (not $x285))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x204 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x70 (= $x204 true)))
 (let (($x75 (= $x70 true)))
 (let (($x153 (forall ((input.ind-%var2246X (_ BitVec 32)) )(let ((?x317 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2246X)))
 (let ((?x300 (input.spec-%var-x-1.1.1 input.ind-%var2246X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2246X)))
 (=> $x318 (= ?x300 ?x317))))))
 ))
 (let (($x139 (forall ((input.ind-%var2245X (_ BitVec 32)) )(let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2245X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2245X)))
 (= $x318 $x18))))
 ))
 (let (($x293 (and $x139 $x153)))
 (let (($x147 (= $x293 true)))
 (let (($x218 (forall ((input.ind-%var2240X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var2240X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x263))))
 (let ((?x317 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2240X)))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2240X)))
 (=> $x18 (= ?x317 ?x292))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2239X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2239X) (bvult input.ind-%var2239X input.dst.llvm-%n))))
 (let (($x18 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2239X)))
 (= $x18 $x287))))
 ))
 (let (($x257 (and $x250 $x218)))
 (let (($x229 (= $x257 true)))
 (let (($x312 (forall ((input.ind-%var2234X (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul input.ind-%var2234X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x263))))
 (let ((?x300 (input.spec-%var-x-1.1.1 input.ind-%var2234X)))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2234X)))
 (=> $x318 (= ?x300 ?x292))))))))
 ))
 (let (($x34 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let (($x287 (and (bvule (_ bv0 32) input.ind-%var2233X) (bvult input.ind-%var2233X input.dst.llvm-%n))))
 (let (($x318 (input.spec-%var-x-1.0.1 input.ind-%var2233X)))
 (= $x318 $x287))))
 ))
 (let (($x80 (and $x34 $x312)))
 (let (($x29 (= $x80 true)))
 (let ((?x132 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x78 (bvneg ?x132)))
 (let (($x126 (= ?x78 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x126 true)))
 (let (($x114 (= $x67 true)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x22 (= (_ bv0 32) ?x39)))
 (let ((?x299 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x299)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x49 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x182 $x13)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x41 $x96)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x57 $x105)))
 (let (($x247 (not $x5)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x186 $x157)))
 (let (($x223 (and (not $x66) $x247)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x86 $x89)))
 (let (($x194 (not $x7)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x276 $x234)))
 (let (($x217 (and (not $x60) $x194)))
 (let (($x175 (and (and (and (and (and (and $x217 $x223) $x309) $x191) $x220) $x49) $x103)))
 (let (($x68 (and $x175 $x22)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x202 (or false (or false (and (and true (or $x180 $x140)) (or $x167 $x258))))))
 (let (($x271 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x202)))
 (let (($x177 (and $x271 $x68)))
 (let (($x28 (= $x177 true)))
 (let (($x206 (= $x28 true)))
 (let (($x209 (= $x206 true)))
 (let (($x170 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x302 (= $x170 true)))
 (let (($x270 (= $x302 true)))
 (let (($x59 (= $x270 true)))
 (let (($x304 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x188 (= $x304 true)))
 (let (($x274 (= $x188 true)))
 (let (($x179 (= $x274 true)))
 (let (($x216 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x9 (= $x216 true)))
 (let (($x128 (= $x9 true)))
 (let (($x227 (= $x128 true)))
 (let ((?x83 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x21 (= (_ bv0 2) ?x83)))
 (let (($x232 (= $x21 true)))
 (let (($x278 (= $x232 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x154 (= $x130 true)))
 (let (($x158 (= $x154 true)))
 (let (($x101 (= $x158 true)))
 (let (($x16 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x251 (= $x16 true)))
 (let (($x81 (= $x251 true)))
 (let (($x14 (= $x81 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x163 (bvneg ?x54)))
 (let (($x253 (= ?x163 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x279 (= $x253 true)))
 (let (($x142 (= $x279 true)))
 (let (($x193 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x115 (not $x193)))
 (let (($x273 (= $x115 true)))
 (let (($x122 (= $x273 true)))
 (let (($x269 (= $x122 true)))
 (let (($x137 (and $x269 $x142)))
 (let (($x275 (and $x137 $x14)))
 (let (($x55 (and $x275 $x101)))
 (let (($x235 (and $x55 $x278)))
 (let (($x307 (and $x235 $x227)))
 (let (($x106 (and $x307 $x179)))
 (let (($x51 (and $x106 $x59)))
 (let (($x238 (and $x51 $x209)))
 (let (($x245 (and $x238 $x114)))
 (let (($x161 (and $x245 $x29)))
 (let (($x266 (and $x161 $x229)))
 (let (($x72 (and $x266 $x147)))
 (let (($x264 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (ite $x264 (_ bv1 32) (_ bv0 32))))
 (let (($x226 (= ?x109 (_ bv0 32))))
 (let (($x118 (and $x226 $x72)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x93 (and $x6 $x118)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x265 (and $x237 $x93)))
 (let (($x219 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x20 (and $x219 $x265)))
 (let (($x285 (=> $x20 $x75)))
 (not $x285))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2676096/query
