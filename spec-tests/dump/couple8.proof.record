==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x9 $x10)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x9 $x10)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv1661363587 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3191897543 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x299 (= true false)))
 (let (($x300 (= $x299 true)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x290 (concat ?x289 (concat ?x286 (concat ?x283 ?x281)))))
 (let (($x291 (= ?x290 input.dst.llvm-%n)))
 (let (($x292 (= $x291 true)))
 (let (($x293 (= $x292 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x275 (concat ?x274 (concat ?x271 (concat ?x268 ?x266)))))
 (let (($x276 (= ?x275 input.dst.llvm-%x)))
 (let (($x277 (= $x276 true)))
 (let (($x278 (= $x277 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x250))))
 (let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 ?x256)))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge ?x213 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (=> $x43 $x70)))))
 ))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= ?x213 (_ bv0 32)))))))
 ))
 (let (($x217 (and $x216 $x71)))
 (let (($x229 (and $x217 $x228)))
 (let (($x260 (and $x229 $x259)))
 (let (($x261 (= $x260 true)))
 (let (($x262 (= $x261 true)))
 (let (($x263 (= $x262 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x126)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x118 $x121)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x117 $x122)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x108)))
 (let (($x110 (not $x109)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x104 $x105)))
 (let (($x112 (and (not $x106) $x110)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x98 $x99)))
 (let (($x101 (not $x100)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x93 $x95)))
 (let (($x103 (and (not $x96) $x101)))
 (let (($x135 (and (and (and (and (and (and $x103 $x112) $x114) $x116) $x123) $x125) $x127)))
 (let (($x136 (and $x135 $x129)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x264 (and $x139 $x263)))
 (let (($x279 (and $x264 $x278)))
 (let (($x294 (and $x279 $x293)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x58 (and $x56 $x71)))
 (let (($x60 (and $x58 $x77)))
 (let (($x90 (and $x60 $x89)))
 (let (($x295 (and $x90 $x294)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x296 (and $x33 $x295)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x297 (and $x12 $x296)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x298 (and $x36 $x297)))
 (let (($x301 (=> $x298 $x300)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x299 (= true false)))
 (let (($x300 (= $x299 true)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x290 (concat ?x289 (concat ?x286 (concat ?x283 ?x281)))))
 (let (($x291 (= ?x290 input.dst.llvm-%n)))
 (let (($x292 (= $x291 true)))
 (let (($x293 (= $x292 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x275 (concat ?x274 (concat ?x271 (concat ?x268 ?x266)))))
 (let (($x276 (= ?x275 input.dst.llvm-%x)))
 (let (($x277 (= $x276 true)))
 (let (($x278 (= $x277 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x250))))
 (let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 ?x256)))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge ?x213 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (=> $x43 $x70)))))
 ))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= ?x213 (_ bv0 32)))))))
 ))
 (let (($x217 (and $x216 $x71)))
 (let (($x229 (and $x217 $x228)))
 (let (($x260 (and $x229 $x259)))
 (let (($x261 (= $x260 true)))
 (let (($x262 (= $x261 true)))
 (let (($x263 (= $x262 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x126)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x118 $x121)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x117 $x122)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x108)))
 (let (($x110 (not $x109)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x104 $x105)))
 (let (($x112 (and (not $x106) $x110)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x98 $x99)))
 (let (($x101 (not $x100)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x93 $x95)))
 (let (($x103 (and (not $x96) $x101)))
 (let (($x135 (and (and (and (and (and (and $x103 $x112) $x114) $x116) $x123) $x125) $x127)))
 (let (($x136 (and $x135 $x129)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x264 (and $x139 $x263)))
 (let (($x279 (and $x264 $x278)))
 (let (($x294 (and $x279 $x293)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x58 (and $x56 $x71)))
 (let (($x60 (and $x58 $x77)))
 (let (($x90 (and $x60 $x89)))
 (let (($x295 (and $x90 $x294)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x296 (and $x33 $x295)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x297 (and $x12 $x296)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x298 (and $x36 $x297)))
 (let (($x301 (=> $x298 $x300)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86c61180)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x54ce1320)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x54ce1323)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86c61183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x54ce1320)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86c61180)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000084)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000087)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000084)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x11)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x5 $x204)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x73 $x206)))
 (let (($x258 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x251 $x252)))
 (let (($x249 (not $x248)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x254 $x255)))
 (let (($x250 (and (not $x156) $x249)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x122 $x215)))
 (let (($x245 (not $x217)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x133 $x227)))
 (let (($x246 (and (not $x130) $x245)))
 (let (($x75 (and (and (and $x246 $x250) $x256) $x258)))
 (let (($x65 (and (and (and (and $x75 $x207) $x209) $x57) $x13)))
 (let (($x40 (= $x65 true)))
 (let (($x83 (= $x40 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x242 (concat ?x233 (concat ?x238 ?x241)))))
 (let (($x243 (= input.dst.llvm-%n ?x69)))
 (let ((?x221 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x231 (concat ?x230 (concat ?x225 (concat ?x223 ?x221)))))
 (let (($x232 (= input.dst.llvm-%x ?x231)))
 (let (($x244 (and $x232 $x243)))
 (let (($x220 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x16 (and $x220 $x244)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x188))))
 (let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 ?x199)))))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge ?x166 (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x210 (= false false)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (=> $x129 $x210)))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= ?x166 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x169 $x99)))
 (let (($x29 (and $x177 $x23)))
 (let (($x37 (and $x29 $x203)))
 (let (($x81 (and (and (and (and (and (and $x75 $x37) $x207) $x209) $x57) $x13) $x16)))
 (let (($x25 (= $x81 true)))
 (let (($x7 (= $x25 true)))
 (let (($x19 (= $x7 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x228 (and $x88 $x99)))
 (let (($x123 (and $x228 $x115)))
 (let (($x135 (and $x123 $x124)))
 (let (($x80 (and $x135 $x19)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x17 (and $x52 $x80)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x72 (and $x31 $x17)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x14 $x72)))
 (let (($x84 (=> $x15 $x83)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x11)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x5 $x204)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x73 $x206)))
 (let (($x258 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x251 $x252)))
 (let (($x249 (not $x248)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x254 $x255)))
 (let (($x250 (and (not $x156) $x249)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x122 $x215)))
 (let (($x245 (not $x217)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x133 $x227)))
 (let (($x246 (and (not $x130) $x245)))
 (let (($x75 (and (and (and $x246 $x250) $x256) $x258)))
 (let (($x65 (and (and (and (and $x75 $x207) $x209) $x57) $x13)))
 (let (($x40 (= $x65 true)))
 (let (($x83 (= $x40 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x242 (concat ?x233 (concat ?x238 ?x241)))))
 (let (($x243 (= input.dst.llvm-%n ?x69)))
 (let ((?x221 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x231 (concat ?x230 (concat ?x225 (concat ?x223 ?x221)))))
 (let (($x232 (= input.dst.llvm-%x ?x231)))
 (let (($x244 (and $x232 $x243)))
 (let (($x220 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x16 (and $x220 $x244)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x188))))
 (let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 ?x199)))))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge ?x166 (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x210 (= false false)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (=> $x129 $x210)))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= ?x166 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x169 $x99)))
 (let (($x29 (and $x177 $x23)))
 (let (($x37 (and $x29 $x203)))
 (let (($x81 (and (and (and (and (and (and $x75 $x37) $x207) $x209) $x57) $x13) $x16)))
 (let (($x25 (= $x81 true)))
 (let (($x7 (= $x25 true)))
 (let (($x19 (= $x7 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x228 (and $x88 $x99)))
 (let (($x123 (and $x228 $x115)))
 (let (($x135 (and $x123 $x124)))
 (let (($x80 (and $x135 $x19)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x17 (and $x52 $x80)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x72 (and $x31 $x17)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x14 $x72)))
 (let (($x84 (=> $x15 $x83)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x212 (= $x125 true)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x181 (concat ?x68 (concat ?x180 ?x183)))))
 (let (($x32 (= input.dst.llvm-%n ?x186)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x106 (concat ?x173 (concat ?x172 ?x174)))))
 (let (($x22 (= input.dst.llvm-%x ?x55)))
 (let (($x187 (and $x22 $x32)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x195 (and $x178 $x187)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x108)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x162)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x131 $x154)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x74 $x153)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x280))))
 (let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 ?x160)))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge ?x283 (_ bv1 32)))))))
 ))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x252 (= false false)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (=> $x156 $x252)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= ?x283 (_ bv0 32)))))))
 ))
 (let (($x291 (and $x290 $x250)))
 (let (($x58 (and $x291 $x92)))
 (let (($x158 (and $x58 $x157)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x207 $x28)))
 (let (($x209 (not $x208)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x205 $x204)))
 (let (($x11 (and (not $x206) $x209)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x202 $x203)))
 (let (($x66 (not $x37)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x193 $x197)))
 (let (($x5 (and (not $x199) $x66)))
 (let (($x101 (and (and (and (and (and (and $x5 $x11) $x47) $x13) $x158) $x152) $x159)))
 (let (($x148 (and (and (and $x101 $x95) $x56) $x195)))
 (let (($x105 (= $x148 true)))
 (let (($x110 (= $x105 true)))
 (let (($x86 (= $x110 true)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x39 (and $x251 $x250)))
 (let (($x179 (and $x39 $x177)))
 (let (($x194 (and $x179 $x191)))
 (let (($x128 (and $x194 $x86)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x60 (and $x12 $x128)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x10 $x60)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x127 (and $x53 $x126)))
 (let (($x116 (=> $x127 $x212)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x212 (= $x125 true)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x181 (concat ?x68 (concat ?x180 ?x183)))))
 (let (($x32 (= input.dst.llvm-%n ?x186)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x106 (concat ?x173 (concat ?x172 ?x174)))))
 (let (($x22 (= input.dst.llvm-%x ?x55)))
 (let (($x187 (and $x22 $x32)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x195 (and $x178 $x187)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x108)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x162)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x131 $x154)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x74 $x153)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x280))))
 (let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 ?x160)))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge ?x283 (_ bv1 32)))))))
 ))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x252 (= false false)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (=> $x156 $x252)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= ?x283 (_ bv0 32)))))))
 ))
 (let (($x291 (and $x290 $x250)))
 (let (($x58 (and $x291 $x92)))
 (let (($x158 (and $x58 $x157)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x207 $x28)))
 (let (($x209 (not $x208)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x205 $x204)))
 (let (($x11 (and (not $x206) $x209)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x202 $x203)))
 (let (($x66 (not $x37)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x193 $x197)))
 (let (($x5 (and (not $x199) $x66)))
 (let (($x101 (and (and (and (and (and (and $x5 $x11) $x47) $x13) $x158) $x152) $x159)))
 (let (($x148 (and (and (and $x101 $x95) $x56) $x195)))
 (let (($x105 (= $x148 true)))
 (let (($x110 (= $x105 true)))
 (let (($x86 (= $x110 true)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x39 (and $x251 $x250)))
 (let (($x179 (and $x39 $x177)))
 (let (($x194 (and $x179 $x191)))
 (let (($x128 (and $x194 $x86)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x60 (and $x12 $x128)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x10 $x60)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x127 (and $x53 $x126)))
 (let (($x116 (=> $x127 $x212)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5ffbfad4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffab0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffab3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5ffbfad7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffab0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5ffbfad4)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffab0) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000e04)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002b00)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000e07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002b03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000e04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002b00)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000e04) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x267 (= (_ bv0 4) ?x196)))
 (let (($x192 (= $x267 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x141 (concat ?x38 (concat ?x20 ?x113)))))
 (let (($x123 (= input.dst.llvm-%n ?x61)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x35 (concat ?x90 (concat ?x295 ?x163)))))
 (let (($x59 (= input.dst.llvm-%x ?x21)))
 (let (($x26 (and $x59 $x123)))
 (let (($x293 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x213 (and $x293 $x26)))
 (let ((?x299 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x299)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x257 (= (_ bv0 32) ?x6)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x266)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x272 $x275)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x278 $x279)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x274))))
 (let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 ?x277)))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge ?x7 (_ bv1 32)))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x208 (= false false)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (=> $x48 $x208)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= ?x7 (_ bv0 32)))))))
 ))
 (let (($x49 (and $x15 $x145)))
 (let (($x210 (and $x49 $x88)))
 (let (($x269 (and $x210 $x227)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x27 $x155)))
 (let (($x101 (not $x159)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x154 $x153)))
 (let (($x95 (and (not $x152) $x101)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x157 $x158)))
 (let (($x74 (not $x78)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x280 $x160)))
 (let (($x34 (and (not $x151) $x74)))
 (let (($x130 (and (and (and (and (and (and $x34 $x95) $x108) $x107) $x269) $x248) $x256)))
 (let (($x122 (and (and (and $x130 $x257) $x296) $x213)))
 (let (($x258 (= $x122 true)))
 (let (($x75 (= $x258 true)))
 (let (($x165 (= $x75 true)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x57 (and $x28 $x145)))
 (let (($x301 (and $x57 $x298)))
 (let (($x8 (and $x301 $x265)))
 (let (($x261 (and $x8 $x165)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x164 (and $x12 $x261)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x166 (and $x10 $x164)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x29 (and $x64 $x166)))
 (let (($x226 (=> $x29 $x192)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x267 (= (_ bv0 4) ?x196)))
 (let (($x192 (= $x267 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x141 (concat ?x38 (concat ?x20 ?x113)))))
 (let (($x123 (= input.dst.llvm-%n ?x61)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x35 (concat ?x90 (concat ?x295 ?x163)))))
 (let (($x59 (= input.dst.llvm-%x ?x21)))
 (let (($x26 (and $x59 $x123)))
 (let (($x293 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x213 (and $x293 $x26)))
 (let ((?x299 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x299)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x257 (= (_ bv0 32) ?x6)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x266)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x272 $x275)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x278 $x279)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x274))))
 (let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 ?x277)))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge ?x7 (_ bv1 32)))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x208 (= false false)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (=> $x48 $x208)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= ?x7 (_ bv0 32)))))))
 ))
 (let (($x49 (and $x15 $x145)))
 (let (($x210 (and $x49 $x88)))
 (let (($x269 (and $x210 $x227)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x27 $x155)))
 (let (($x101 (not $x159)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x154 $x153)))
 (let (($x95 (and (not $x152) $x101)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x157 $x158)))
 (let (($x74 (not $x78)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x280 $x160)))
 (let (($x34 (and (not $x151) $x74)))
 (let (($x130 (and (and (and (and (and (and $x34 $x95) $x108) $x107) $x269) $x248) $x256)))
 (let (($x122 (and (and (and $x130 $x257) $x296) $x213)))
 (let (($x258 (= $x122 true)))
 (let (($x75 (= $x258 true)))
 (let (($x165 (= $x75 true)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x57 (and $x28 $x145)))
 (let (($x301 (and $x57 $x298)))
 (let (($x8 (and $x301 $x265)))
 (let (($x261 (and $x8 $x165)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x164 (and $x12 $x261)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x166 (and $x10 $x164)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x29 (and $x64 $x166)))
 (let (($x226 (=> $x29 $x192)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0639e000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe614c604)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xded5ff04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe614c607)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0639e003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe614c604)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0639e000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0639e001) #x00
    (ite (= x!0 #x0639e000) #x00
    (ite (= x!0 #x0639e003) #x00
    (ite (= x!0 #x0639e002) #x00
    (ite (= x!0 #xe614c605) #xff
    (ite (= x!0 #xe614c607) #xde
    (ite (= x!0 #xe614c604) #x04
      #xd5))))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!7 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604)))))
          (a!2 (k!7 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604)))))
          (a!3 (k!7 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604)))))
          (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00021490)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000644)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00021493)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000647)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00021490)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000644)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00021490) #x08
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!7 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490)))))
          (a!2 (k!7 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490)))))
          (a!3 (k!7 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490)))))
          (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x222 (= (_ bv0 2) ?x230)))
 (let (($x221 (= $x222 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x45 (concat ?x84 (concat ?x83 ?x33)))))
 (let (($x121 (= input.dst.llvm-%n ?x219)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x99 (concat ?x92 (concat ?x281 ?x62)))))
 (let (($x259 (= input.dst.llvm-%x ?x228)))
 (let (($x276 (and $x259 $x121)))
 (let (($x17 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x198 (and $x17 $x276)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x47)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x237 $x236)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x199 $x69)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x136))))
 (let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 ?x231)))))))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge ?x105 (_ bv1 32)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x159 (= false false)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (=> $x162 $x159)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= ?x105 (_ bv0 32)))))))
 ))
 (let (($x52 (and $x120 $x104)))
 (let (($x247 (and $x52 $x246)))
 (let (($x197 (and $x247 $x188)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x118 $x253)))
 (let (($x130 (not $x256)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x275 $x279)))
 (let (($x257 (and (not $x248) $x130)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x227 $x269)))
 (let (($x278 (not $x97)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x274 $x277)))
 (let (($x266 (and (not $x133) $x278)))
 (let (($x190 (and (and (and (and (and (and $x266 $x257) $x299) $x112) $x197) $x244) $x209)))
 (let (($x201 (and (and (and $x190 $x98) $x13) $x198)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x100 (= $x203 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x70 (and $x155 $x104)))
 (let (($x117 (and $x70 $x103)))
 (let (($x240 (and $x117 $x268)))
 (let (($x282 (and $x240 $x100)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x218 (and $x12 $x282)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x286 (and $x10 $x218)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x283 (and $x109 $x286)))
 (let (($x147 (=> $x283 $x221)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x222 (= (_ bv0 2) ?x230)))
 (let (($x221 (= $x222 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x45 (concat ?x84 (concat ?x83 ?x33)))))
 (let (($x121 (= input.dst.llvm-%n ?x219)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x99 (concat ?x92 (concat ?x281 ?x62)))))
 (let (($x259 (= input.dst.llvm-%x ?x228)))
 (let (($x276 (and $x259 $x121)))
 (let (($x17 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x198 (and $x17 $x276)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x47)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x237 $x236)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x199 $x69)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x136))))
 (let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 ?x231)))))))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge ?x105 (_ bv1 32)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x159 (= false false)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (=> $x162 $x159)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= ?x105 (_ bv0 32)))))))
 ))
 (let (($x52 (and $x120 $x104)))
 (let (($x247 (and $x52 $x246)))
 (let (($x197 (and $x247 $x188)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x118 $x253)))
 (let (($x130 (not $x256)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x275 $x279)))
 (let (($x257 (and (not $x248) $x130)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x227 $x269)))
 (let (($x278 (not $x97)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x274 $x277)))
 (let (($x266 (and (not $x133) $x278)))
 (let (($x190 (and (and (and (and (and (and $x266 $x257) $x299) $x112) $x197) $x244) $x209)))
 (let (($x201 (and (and (and $x190 $x98) $x13) $x198)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x100 (= $x203 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x70 (and $x155 $x104)))
 (let (($x117 (and $x70 $x103)))
 (let (($x240 (and $x117 $x268)))
 (let (($x282 (and $x240 $x100)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x218 (and $x12 $x282)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x286 (and $x10 $x218)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x283 (and $x109 $x286)))
 (let (($x147 (=> $x283 $x221)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x132 (= $x76 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x271 (concat ?x139 (concat ?x168 ?x129)))))
 (let (($x30 (= input.dst.llvm-%n ?x50)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x249 (concat ?x88 (concat ?x25 ?x128)))))
 (let (($x79 (= input.dst.llvm-%x ?x250)))
 (let (($x149 (and $x79 $x30)))
 (let (($x212 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x144 (and $x212 $x149)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x56)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x108)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x55 $x181)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x151 $x180)))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x167))))
 (let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 ?x68)))))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge ?x258 (_ bv1 32)))))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x253 (= false false)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (=> $x248 $x253)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= ?x258 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x192 $x257)))
 (let (($x207 (and $x226 $x205)))
 (let (($x160 (and $x207 $x24)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x244 $x189)))
 (let (($x209 (not $x243)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x239 $x236)))
 (let (($x47 (and (not $x69) $x209)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x42 $x188)))
 (let (($x194 (not $x197)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x137 $x234)))
 (let (($x237 (and (not $x231) $x194)))
 (let (($x82 (and (and (and (and (and (and $x237 $x47) $x193) $x13) $x160) $x186) $x101)))
 (let (($x161 (and (and (and $x82 $x124) $x107) $x144)))
 (let (($x157 (= $x161 true)))
 (let (($x158 (= $x157 true)))
 (let (($x135 (= $x158 true)))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x288 (and $x118 $x257)))
 (let (($x251 (and $x288 $x52)))
 (let (($x241 (and $x251 $x220)))
 (let (($x81 (and $x241 $x135)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x178 (and $x31 $x81)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x16 (and $x36 $x178)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x7 (and $x53 $x16)))
 (let (($x172 (=> $x7 $x132)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x132 (= $x76 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x271 (concat ?x139 (concat ?x168 ?x129)))))
 (let (($x30 (= input.dst.llvm-%n ?x50)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x249 (concat ?x88 (concat ?x25 ?x128)))))
 (let (($x79 (= input.dst.llvm-%x ?x250)))
 (let (($x149 (and $x79 $x30)))
 (let (($x212 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x144 (and $x212 $x149)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x56)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x108)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x55 $x181)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x151 $x180)))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x167))))
 (let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 ?x68)))))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge ?x258 (_ bv1 32)))))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x253 (= false false)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (=> $x248 $x253)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= ?x258 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x192 $x257)))
 (let (($x207 (and $x226 $x205)))
 (let (($x160 (and $x207 $x24)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x244 $x189)))
 (let (($x209 (not $x243)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x239 $x236)))
 (let (($x47 (and (not $x69) $x209)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x42 $x188)))
 (let (($x194 (not $x197)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x137 $x234)))
 (let (($x237 (and (not $x231) $x194)))
 (let (($x82 (and (and (and (and (and (and $x237 $x47) $x193) $x13) $x160) $x186) $x101)))
 (let (($x161 (and (and (and $x82 $x124) $x107) $x144)))
 (let (($x157 (= $x161 true)))
 (let (($x158 (= $x157 true)))
 (let (($x135 (= $x158 true)))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x288 (and $x118 $x257)))
 (let (($x251 (and $x288 $x52)))
 (let (($x241 (and $x251 $x220)))
 (let (($x81 (and $x241 $x135)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x178 (and $x31 $x81)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x16 (and $x36 $x178)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x7 (and $x53 $x16)))
 (let (($x172 (=> $x7 $x132)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000807)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000804)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000804) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5f88fd88)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdf21fb84)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7fcff900)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdf21fb87)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5f88fd8b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdf21fb84)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5f88fd88)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdf21fb86) #xcf
    (ite (= x!0 #x5f88fd8a) #x01
    (ite (= x!0 #xdf21fb85) #xf9
    (ite (= x!0 #xdf21fb87) #x7f
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010000 x!0)
         (ite (bvule #x00010001 x!0) #x00010001 #x00010000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x41 (= $x115 true)))
 (let (($x225 (= $x41 true)))
 (let ((?x290 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x211 (concat ?x174 (concat ?x57 ?x290)))))
 (let (($x117 (= input.dst.llvm-%n ?x54)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x217 (concat ?x208 (concat ?x89 ?x195)))))
 (let (($x255 (= input.dst.llvm-%x ?x77)))
 (let (($x285 (and $x255 $x117)))
 (let (($x261 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x289 (and $x261 $x285)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x264)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x200)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x141 $x61)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x140 $x123)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x35))))
 (let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 ?x59)))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge ?x203 (_ bv1 32)))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (=> $x190 $x243)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= ?x203 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x283 $x143)))
 (let (($x159 (and $x284 $x155)))
 (let (($x21 (and $x159 $x277)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x146 $x32)))
 (let (($x82 (not $x101)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x181 $x180)))
 (let (($x124 (and (not $x186) $x82)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x160)))
 (let (($x151 (not $x8)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x167 $x68)))
 (let (($x185 (and (not $x184) $x151)))
 (let (($x133 (and (and (and (and (and (and $x185 $x124) $x56) $x131) $x21) $x256) $x299)))
 (let (($x227 (and (and (and $x133 $x296) $x164) $x289)))
 (let (($x112 (= $x227 true)))
 (let (($x191 (= $x112 true)))
 (let (($x187 (= $x191 true)))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x98 (and $x189 $x143)))
 (let (($x5 (and $x98 $x28)))
 (let (($x294 (and $x5 $x106)))
 (let (($x293 (and $x294 $x187)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x148 (and $x31 $x293)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x36 $x148)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x247 (and $x53 $x105)))
 (let (($x273 (=> $x247 $x225)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x41 (= $x115 true)))
 (let (($x225 (= $x41 true)))
 (let ((?x290 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x211 (concat ?x174 (concat ?x57 ?x290)))))
 (let (($x117 (= input.dst.llvm-%n ?x54)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x217 (concat ?x208 (concat ?x89 ?x195)))))
 (let (($x255 (= input.dst.llvm-%x ?x77)))
 (let (($x285 (and $x255 $x117)))
 (let (($x261 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x289 (and $x261 $x285)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x264)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x200)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x141 $x61)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x140 $x123)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x35))))
 (let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 ?x59)))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge ?x203 (_ bv1 32)))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (=> $x190 $x243)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= ?x203 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x283 $x143)))
 (let (($x159 (and $x284 $x155)))
 (let (($x21 (and $x159 $x277)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x146 $x32)))
 (let (($x82 (not $x101)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x181 $x180)))
 (let (($x124 (and (not $x186) $x82)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x160)))
 (let (($x151 (not $x8)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x167 $x68)))
 (let (($x185 (and (not $x184) $x151)))
 (let (($x133 (and (and (and (and (and (and $x185 $x124) $x56) $x131) $x21) $x256) $x299)))
 (let (($x227 (and (and (and $x133 $x296) $x164) $x289)))
 (let (($x112 (= $x227 true)))
 (let (($x191 (= $x112 true)))
 (let (($x187 (= $x191 true)))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x98 (and $x189 $x143)))
 (let (($x5 (and $x98 $x28)))
 (let (($x294 (and $x5 $x106)))
 (let (($x293 (and $x294 $x187)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x148 (and $x31 $x293)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x36 $x148)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x247 (and $x53 $x105)))
 (let (($x273 (=> $x247 $x225)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40410000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000003) #xff
    (ite (= x!0 #x40000002) #xff
    (ite (= x!0 #x00000007) #x40
    (ite (= x!0 #x40000000) #xff
    (ite (= x!0 #x00000006) #x41
    (ite (= x!0 #x40000001) #xff
      #x00)))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #xffffffff) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x52a0219c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4a2108d8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa7d21100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4a2108db)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x52a0219f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4a2108d8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x52a0219c)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x52a0219d) #xff
    (ite (= x!0 #x4a2108da) #xd2
    (ite (= x!0 #x52a0219c) #xff
    (ite (= x!0 #x52a0219f) #xff
    (ite (= x!0 #x52a0219e) #xff
    (ite (= x!0 #x4a2108d9) #x11
    (ite (= x!0 #x4a2108db) #xa7
      #x00))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #xffffffff) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x40 (= $x99 true)))
 (let (($x62 (= $x40 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x291 (concat ?x169 (concat ?x204 (concat ?x238 ?x48)))))
 (let (($x298 (= input.dst.llvm-%n ?x291)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x104 (concat ?x205 (concat ?x122 ?x230)))))
 (let (($x163 (= input.dst.llvm-%x ?x70)))
 (let (($x44 (and $x163 $x298)))
 (let (($x218 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x233 (and $x218 $x44)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x193)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (and $x18 $x43)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x231 $x219)))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x49))))
 (let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 ?x228)))))))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge ?x157 (_ bv1 32)))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x101 (= false false)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (=> $x108 $x101)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= ?x157 (_ bv0 32)))))))
 ))
 (let (($x12 (and $x170 $x262)))
 (let (($x6 (and $x12 $x266)))
 (let (($x234 (and $x6 $x136)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x260 $x150)))
 (let (($x133 (not $x299)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x61 $x123)))
 (let (($x296 (and (not $x256) $x133)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x277 $x21)))
 (let (($x140 (not $x91)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (and $x35 $x59)))
 (let (($x20 (and (not $x274) $x140)))
 (let (($x175 (and (and (and (and (and (and $x20 $x296) $x264) $x216) $x234) $x276) $x209)))
 (let (($x232 (and (and (and $x175 $x242) $x13) $x233)))
 (let (($x42 (= $x232 true)))
 (let (($x188 (= $x42 true)))
 (let (($x265 (= $x188 true)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x280 (and $x32 $x262)))
 (let (($x154 (and $x280 $x34)))
 (let (($x287 (and $x154 $x270)))
 (let (($x26 (and $x287 $x265)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x31 $x26)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x213 (and $x36 $x19)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x258 (and $x53 $x213)))
 (let (($x177 (=> $x258 $x62)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x40 (= $x99 true)))
 (let (($x62 (= $x40 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x291 (concat ?x169 (concat ?x204 (concat ?x238 ?x48)))))
 (let (($x298 (= input.dst.llvm-%n ?x291)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x104 (concat ?x205 (concat ?x122 ?x230)))))
 (let (($x163 (= input.dst.llvm-%x ?x70)))
 (let (($x44 (and $x163 $x298)))
 (let (($x218 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x233 (and $x218 $x44)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x193)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (and $x18 $x43)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x231 $x219)))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x49))))
 (let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 ?x228)))))))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge ?x157 (_ bv1 32)))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x101 (= false false)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (=> $x108 $x101)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= ?x157 (_ bv0 32)))))))
 ))
 (let (($x12 (and $x170 $x262)))
 (let (($x6 (and $x12 $x266)))
 (let (($x234 (and $x6 $x136)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x260 $x150)))
 (let (($x133 (not $x299)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x61 $x123)))
 (let (($x296 (and (not $x256) $x133)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x277 $x21)))
 (let (($x140 (not $x91)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (and $x35 $x59)))
 (let (($x20 (and (not $x274) $x140)))
 (let (($x175 (and (and (and (and (and (and $x20 $x296) $x264) $x216) $x234) $x276) $x209)))
 (let (($x232 (and (and (and $x175 $x242) $x13) $x233)))
 (let (($x42 (= $x232 true)))
 (let (($x188 (= $x42 true)))
 (let (($x265 (= $x188 true)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x280 (and $x32 $x262)))
 (let (($x154 (and $x280 $x34)))
 (let (($x287 (and $x154 $x270)))
 (let (($x26 (and $x287 $x265)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x31 $x26)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x213 (and $x36 $x19)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x258 (and $x53 $x213)))
 (let (($x177 (=> $x258 $x62)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7abcc000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x80040200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7abcc003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7abcc000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
    (ite (= x!0 #x7abcc003) #x80
    (ite (= x!0 #x00000006) #x04
    (ite (= x!0 #x00000005) #x02
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xba501028)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb2619098)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffdfbe00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb261909b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xba50102b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb2619098)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xba501028)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xba501029) #x00
    (ite (= x!0 #xba501028) #x00
    (ite (= x!0 #xffdfbe03) #x00
    (ite (= x!0 #xba50102b) #x80
    (ite (= x!0 #xffdfbe01) #x00
    (ite (= x!0 #xba50102a) #x00
    (ite (= x!0 #xb2619099) #xbe
    (ite (= x!0 #xffdfbe02) #x00
    (ite (= x!0 #xffdfbe00) #x00
    (ite (= x!0 #xb261909b) #xff
    (ite (= x!0 #xb2619098) #x00
      #xdf))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x111 (= $x222 true)))
 (let (($x25 (= $x111 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x93 (concat ?x153 (concat ?x86 ?x162)))))
 (let (($x85 (= input.dst.llvm-%n ?x229)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x130 (concat ?x155 (concat ?x202 ?x81)))))
 (let (($x80 (= input.dst.llvm-%x ?x257)))
 (let (($x179 (and $x80 $x85)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x182 (and $x132 $x179)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x107)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x56)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x250 $x271)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x184 $x168)))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x110))))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 ?x139)))))))))
 ))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge ?x112 (_ bv1 32)))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (=> $x200 $x299)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= ?x112 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x225 $x113)))
 (let (($x244 (and $x273 $x239)))
 (let (($x68 (and $x244 $x176)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x134 $x121)))
 (let (($x175 (not $x209)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x43 $x219)))
 (let (($x242 (and (not $x276) $x175)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x136 $x234)))
 (let (($x231 (not $x241)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x49 $x228)))
 (let (($x96 (and (not $x259) $x231)))
 (let (($x302 (and (and (and (and (and (and $x96 $x242) $x9) $x199) $x68) $x50) $x82)))
 (let (($x22 (and (and (and $x302 $x268) $x131) $x182)))
 (let (($x24 (= $x22 true)))
 (let (($x160 (= $x24 true)))
 (let (($x240 (= $x160 true)))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x272 (and $x150 $x113)))
 (let (($x278 (and $x272 $x118)))
 (let (($x65 (and $x278 $x33)))
 (let (($x201 (and $x65 $x240)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x212 (and $x31 $x201)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x198 (and $x36 $x212)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x203 (and $x53 $x198)))
 (let (($x116 (=> $x203 $x25)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x111 (= $x222 true)))
 (let (($x25 (= $x111 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x93 (concat ?x153 (concat ?x86 ?x162)))))
 (let (($x85 (= input.dst.llvm-%n ?x229)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x130 (concat ?x155 (concat ?x202 ?x81)))))
 (let (($x80 (= input.dst.llvm-%x ?x257)))
 (let (($x179 (and $x80 $x85)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x182 (and $x132 $x179)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x107)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x56)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x250 $x271)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x184 $x168)))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x110))))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 ?x139)))))))))
 ))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge ?x112 (_ bv1 32)))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (=> $x200 $x299)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= ?x112 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x225 $x113)))
 (let (($x244 (and $x273 $x239)))
 (let (($x68 (and $x244 $x176)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x134 $x121)))
 (let (($x175 (not $x209)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x43 $x219)))
 (let (($x242 (and (not $x276) $x175)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x136 $x234)))
 (let (($x231 (not $x241)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x49 $x228)))
 (let (($x96 (and (not $x259) $x231)))
 (let (($x302 (and (and (and (and (and (and $x96 $x242) $x9) $x199) $x68) $x50) $x82)))
 (let (($x22 (and (and (and $x302 $x268) $x131) $x182)))
 (let (($x24 (= $x22 true)))
 (let (($x160 (= $x24 true)))
 (let (($x240 (= $x160 true)))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x272 (and $x150 $x113)))
 (let (($x278 (and $x272 $x118)))
 (let (($x65 (and $x278 $x33)))
 (let (($x201 (and $x65 $x240)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x212 (and $x31 $x201)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x198 (and $x36 $x212)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x203 (and $x53 $x198)))
 (let (($x116 (=> $x203 $x25)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x5))))
 (let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 ?x71)))))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x346 (_ bv1 32)))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x209 (= false false)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (=> $x193 $x209)))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x350 (and $x349 $x46)))
 (let (($x362 (and $x350 $x361)))
 (let (($x376 (and $x362 $x59)))
 (let (($x377 (= $x376 true)))
 (let (($x378 (= $x377 true)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x127 (concat ?x248 (concat ?x125 ?x275)))))
 (let (($x87 (= input.dst.llvm-%n ?x252)))
 (let ((?x247 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x143 (concat ?x6 (concat ?x41 ?x247)))))
 (let (($x60 (= input.dst.llvm-%x ?x97)))
 (let (($x119 (and $x60 $x87)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (and $x105 $x119)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x216)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x235)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x211)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x171 $x57)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x77 $x54)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x188 (_ bv1 32)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= ?x188 (_ bv0 32)))))))
 ))
 (let (($x75 (and $x177 $x46)))
 (let (($x101 (and $x75 $x146)))
 (let (($x274 (and $x101 $x59)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x173 $x30)))
 (let (($x302 (not $x82)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x271 $x168)))
 (let (($x268 (and (not $x50) $x302)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x176 $x68)))
 (let (($x184 (not $x294)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x110 $x139)))
 (let (($x51 (and (not $x142) $x184)))
 (let (($x35 (and (and (and (and (and (and $x51 $x268) $x107) $x55) $x274) $x117) $x264)))
 (let (($x277 (and (and (and $x35 $x164) $x23) $x38)))
 (let (($x21 (= $x277 true)))
 (let (($x220 (= $x21 true)))
 (let (($x149 (= $x220 true)))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x137 (and $x121 $x46)))
 (let (($x237 (and $x137 $x189)))
 (let (($x29 (and $x237 $x249)))
 (let (($x261 (and $x29 $x149)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x144 (and $x31 $x261)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x157 (and $x36 $x144)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x158 (and $x64 $x157)))
 (let (($x379 (=> $x158 $x378)))
 (not $x379))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x5))))
 (let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 ?x71)))))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x346 (_ bv1 32)))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x209 (= false false)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (=> $x193 $x209)))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x350 (and $x349 $x46)))
 (let (($x362 (and $x350 $x361)))
 (let (($x376 (and $x362 $x59)))
 (let (($x377 (= $x376 true)))
 (let (($x378 (= $x377 true)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x127 (concat ?x248 (concat ?x125 ?x275)))))
 (let (($x87 (= input.dst.llvm-%n ?x252)))
 (let ((?x247 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x143 (concat ?x6 (concat ?x41 ?x247)))))
 (let (($x60 (= input.dst.llvm-%x ?x97)))
 (let (($x119 (and $x60 $x87)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (and $x105 $x119)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x216)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x235)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x211)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x171 $x57)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x77 $x54)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x188 (_ bv1 32)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= ?x188 (_ bv0 32)))))))
 ))
 (let (($x75 (and $x177 $x46)))
 (let (($x101 (and $x75 $x146)))
 (let (($x274 (and $x101 $x59)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x173 $x30)))
 (let (($x302 (not $x82)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x271 $x168)))
 (let (($x268 (and (not $x50) $x302)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x176 $x68)))
 (let (($x184 (not $x294)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x110 $x139)))
 (let (($x51 (and (not $x142) $x184)))
 (let (($x35 (and (and (and (and (and (and $x51 $x268) $x107) $x55) $x274) $x117) $x264)))
 (let (($x277 (and (and (and $x35 $x164) $x23) $x38)))
 (let (($x21 (= $x277 true)))
 (let (($x220 (= $x21 true)))
 (let (($x149 (= $x220 true)))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x137 (and $x121 $x46)))
 (let (($x237 (and $x137 $x189)))
 (let (($x29 (and $x237 $x249)))
 (let (($x261 (and $x29 $x149)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x144 (and $x31 $x261)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x157 (and $x36 $x144)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x158 (and $x64 $x157)))
 (let (($x379 (=> $x158 $x378)))
 (not $x379))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0fffefcc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0fffef9c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x14220700)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0fffefcf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0fffef9f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0fffefcc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0fffef9c)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0fffefcf) #x14
    (ite (= x!0 #x0fffefce) #x22
    (ite (= x!0 #x0fffefcd) #x07
    (ite (= x!0 #x0fffef9c) #x01
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4fe74b98)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42eb9694)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x6b1eff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42eb9697)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4fe74b9b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42eb9694)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4fe74b98)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x4fe74b99) #x00
    (ite (= x!0 #x42eb9696) #x1e
    (ite (= x!0 #x4fe74b98) #x01
    (ite (= x!0 #x6b1eff02) #x00
    (ite (= x!0 #x4fe74b9b) #x00
    (ite (= x!0 #x6b1eff03) #x00
    (ite (= x!0 #x6b1eff01) #x00
    (ite (= x!0 #x4fe74b9a) #x00
    (ite (= x!0 #x6b1eff00) #x00
    (ite (= x!0 #x42eb9695) #xff
    (ite (= x!0 #x42eb9694) #x00
      #x6b))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x282))))
 (let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 ?x154)))))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge ?x326 (_ bv1 32)))))))
 ))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x82 (= false false)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (=> $x56 $x82)))))
 ))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= ?x326 (_ bv0 32)))))))
 ))
 (let (($x335 (and $x333 $x39)))
 (let (($x352 (and $x335 $x353)))
 (let (($x368 (and $x352 $x138)))
 (let (($x366 (= $x368 true)))
 (let (($x369 (= $x366 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x166 (concat ?x124 (concat ?x32 ?x227)))))
 (let (($x236 (= input.dst.llvm-%n ?x195)))
 (let ((?x233 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x19 (concat ?x199 (concat ?x9 ?x233)))))
 (let (($x258 (= input.dst.llvm-%x ?x26)))
 (let (($x190 (and $x258 $x236)))
 (let (($x291 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x196 (and $x291 $x190)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x259)))
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x303)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x206)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (and $x207 $x204)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x147 $x297)))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge ?x80 (_ bv1 32)))))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= ?x80 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x93 $x39)))
 (let (($x111 (and $x86 $x222)))
 (let (($x284 (and $x111 $x138)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x90 $x133)))
 (let (($x35 (not $x264)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x57 $x54)))
 (let (($x164 (and (not $x117) $x35)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x59 $x274)))
 (let (($x77 (not $x301)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x5 $x71)))
 (let (($x211 (and (not $x255) $x77)))
 (let (($x120 (and (and (and (and (and (and $x211 $x164) $x216) $x263) $x284) $x66) $x94)))
 (let (($x17 (and (and (and $x120 $x228) $x169) $x196)))
 (let (($x63 (= $x17 true)))
 (let (($x84 (= $x63 true)))
 (let (($x156 (= $x84 true)))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x167 (and $x30 $x39)))
 (let (($x181 (and $x167 $x185)))
 (let (($x208 (and $x181 $x11)))
 (let (($x33 (and $x208 $x156)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x65 (and $x31 $x33)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x36 $x65)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x37 $x126)))
 (let (($x372 (=> $x15 $x369)))
 (not $x372))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x282))))
 (let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 ?x154)))))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge ?x326 (_ bv1 32)))))))
 ))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x82 (= false false)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (=> $x56 $x82)))))
 ))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x326 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= ?x326 (_ bv0 32)))))))
 ))
 (let (($x335 (and $x333 $x39)))
 (let (($x352 (and $x335 $x353)))
 (let (($x368 (and $x352 $x138)))
 (let (($x366 (= $x368 true)))
 (let (($x369 (= $x366 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x166 (concat ?x124 (concat ?x32 ?x227)))))
 (let (($x236 (= input.dst.llvm-%n ?x195)))
 (let ((?x233 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x19 (concat ?x199 (concat ?x9 ?x233)))))
 (let (($x258 (= input.dst.llvm-%x ?x26)))
 (let (($x190 (and $x258 $x236)))
 (let (($x291 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x196 (and $x291 $x190)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x259)))
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x303)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x206)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (and $x207 $x204)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x147 $x297)))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge ?x80 (_ bv1 32)))))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= ?x80 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x93 $x39)))
 (let (($x111 (and $x86 $x222)))
 (let (($x284 (and $x111 $x138)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x90 $x133)))
 (let (($x35 (not $x264)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x57 $x54)))
 (let (($x164 (and (not $x117) $x35)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x59 $x274)))
 (let (($x77 (not $x301)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x5 $x71)))
 (let (($x211 (and (not $x255) $x77)))
 (let (($x120 (and (and (and (and (and (and $x211 $x164) $x216) $x263) $x284) $x66) $x94)))
 (let (($x17 (and (and (and $x120 $x228) $x169) $x196)))
 (let (($x63 (= $x17 true)))
 (let (($x84 (= $x63 true)))
 (let (($x156 (= $x84 true)))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x167 (and $x30 $x39)))
 (let (($x181 (and $x167 $x185)))
 (let (($x208 (and $x181 $x11)))
 (let (($x33 (and $x208 $x156)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x65 (and $x31 $x33)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x36 $x65)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x37 $x126)))
 (let (($x372 (=> $x15 $x369)))
 (not $x372))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf565e360)
  (define-fun Lambda1Var!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa1d99184)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa1d99187)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf565e363)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa1d99184)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf565e360)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf565e361) #x00
    (ite (= x!0 #xa1d99186) #x00
    (ite (= x!0 #xf565e360) #x00
    (ite (= x!0 #xf565e363) #x00
    (ite (= x!0 #xf565e362) #x00
    (ite (= x!0 #xa1d99185) #x00
    (ite (= x!0 #xa1d99187) #x00
      #x04))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14201888)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x30205184)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1420188b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x30205187)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14201888)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x30205184)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14201888) #x04
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x355 (bvadd ?x376 input.dst.llvm-%n)))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem ?x355))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv2 32))) ?x365))))
 (let ((?x34 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (=> $x93 (= ?x34 ?x374))))))))))
 ))
 (let (($x344 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (= $x93 (bvuge ?x60 (_ bv1 32)))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x117 (_ bv0 32))))
 (=> $x235 $x264)))))
 ))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x117 (_ bv0 32))))
 (= $x235 (= ?x60 (_ bv0 32)))))))
 ))
 (let (($x125 (and $x127 $x197)))
 (let (($x345 (and $x125 $x344)))
 (let (($x383 (and $x345 $x382)))
 (let (($x384 (= $x383 true)))
 (let (($x385 (= $x384 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x296 (concat ?x299 (concat ?x212 (concat ?x240 ?x42)))))
 (let (($x20 (= input.dst.llvm-%n ?x296)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x85 (concat ?x55 (concat ?x107 ?x281)))))
 (let (($x22 (= input.dst.llvm-%x ?x179)))
 (let (($x61 (and $x22 $x20)))
 (let (($x130 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x25 (and $x130 $x61)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x142)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x210)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x81 $x293)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x140 $x279)))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x350 (bvadd ?x376 input.dst.llvm-%x)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem ?x350))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x350 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x350 (_ bv2 32))) ?x362))))
 (let ((?x34 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (=> $x93 (= ?x34 ?x200))))))))))
 ))
 (let (($x123 (and $x345 $x379)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x267 $x163)))
 (let (($x120 (not $x94)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x204 $x297)))
 (let (($x228 (and (not $x66) $x120)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x138 $x284)))
 (let (($x147 (not $x194)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x282 $x154)))
 (let (($x206 (and (not $x16) $x147)))
 (let (($x28 (and (and (and (and (and (and $x206 $x228) $x259) $x226) $x123) $x135) $x118)))
 (let (($x251 (and (and (and $x28 $x139) $x7) $x25)))
 (let (($x223 (= $x251 true)))
 (let (($x67 (= $x223 true)))
 (let (($x300 (= $x67 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x34 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (=> $x93 (= ?x34 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (= $x93 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x117 (_ bv0 32))))
 (= $x235 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x141 (and $x133 $x197)))
 (let (($x72 (and $x141 $x116)))
 (let (($x186 (and $x72 $x205)))
 (let (($x249 (and $x186 $x300)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x29 (and $x31 $x249)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x88 (and $x37 $x29)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x254 (and $x36 $x88)))
 (let (($x386 (=> $x254 $x385)))
 (not $x386)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x355 (bvadd ?x376 input.dst.llvm-%n)))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem ?x355))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv2 32))) ?x365))))
 (let ((?x34 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (=> $x93 (= ?x34 ?x374))))))))))
 ))
 (let (($x344 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (= $x93 (bvuge ?x60 (_ bv1 32)))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x264 (= false false)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x117 (_ bv0 32))))
 (=> $x235 $x264)))))
 ))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x117 (_ bv0 32))))
 (= $x235 (= ?x60 (_ bv0 32)))))))
 ))
 (let (($x125 (and $x127 $x197)))
 (let (($x345 (and $x125 $x344)))
 (let (($x383 (and $x345 $x382)))
 (let (($x384 (= $x383 true)))
 (let (($x385 (= $x384 true)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x296 (concat ?x299 (concat ?x212 (concat ?x240 ?x42)))))
 (let (($x20 (= input.dst.llvm-%n ?x296)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x179 (concat ?x85 (concat ?x55 (concat ?x107 ?x281)))))
 (let (($x22 (= input.dst.llvm-%x ?x179)))
 (let (($x61 (and $x22 $x20)))
 (let (($x130 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x25 (and $x130 $x61)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x142)))
 (let ((?x210 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x139 (= (_ bv0 32) ?x210)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x118 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x81 $x293)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x140 $x279)))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x350 (bvadd ?x376 input.dst.llvm-%x)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x350 (_ bv1 32))) (select input.dst.llvm-mem ?x350))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x350 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x350 (_ bv2 32))) ?x362))))
 (let ((?x34 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (=> $x93 (= ?x34 ?x200))))))))))
 ))
 (let (($x123 (and $x345 $x379)))
 (let (($x226 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x267 $x163)))
 (let (($x120 (not $x94)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x204 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x204 $x297)))
 (let (($x228 (and (not $x66) $x120)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x138 $x284)))
 (let (($x147 (not $x194)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x282 $x154)))
 (let (($x206 (and (not $x16) $x147)))
 (let (($x28 (and (and (and (and (and (and $x206 $x228) $x259) $x226) $x123) $x135) $x118)))
 (let (($x251 (and (and (and $x28 $x139) $x7) $x25)))
 (let (($x223 (= $x251 true)))
 (let (($x67 (= $x223 true)))
 (let (($x300 (= $x67 true)))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x34 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (=> $x93 (= ?x34 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x117 (_ bv1 32))))
 (= $x93 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x117 (_ bv0 32))))
 (= $x235 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x141 (and $x133 $x197)))
 (let (($x72 (and $x141 $x116)))
 (let (($x186 (and $x72 $x205)))
 (let (($x249 (and $x186 $x300)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x29 (and $x31 $x249)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x88 (and $x37 $x29)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x254 (and $x36 $x88)))
 (let (($x386 (=> $x254 $x385)))
 (not $x386)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1000003c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x3029f000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40224000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00002600)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1000003f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1000003c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0a7e603) #x40
    (ite (= x!0 #x1000003d) #x26
    (ite (= x!0 #x00000001) #x40
    (ite (= x!0 #x00000003) #x40
    (ite (= x!0 #x00000002) #x22
      #x00))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x3029f000) #x40000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x3029f000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x40224000 x!0)
         (ite (bvule #x40224001 x!0) #x40224001 #x40224000)
         #x3029f000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x3029f000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x3029f000) #x40000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0c8ffffe)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0dc00006)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0b800000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #x7ffffffe) #x80
    (ite (= x!0 #xfffffff8) #x06
    (ite (= x!0 #xfffffffb) #x0d
    (ite (= x!0 #x40000000) #x00
    (ite (= x!0 #x40000001) #x00
    (ite (= x!0 #xfffffffa) #xc0
    (ite (= x!0 #x7ffffffd) #x00
    (ite (= x!0 #x3fffffff) #x00
    (ite (= x!0 #x7fffffff) #x0b
    (ite (= x!0 #x7ffffffc) #x00
    (ite (= x!0 #x3dbffff9) #x00
    (ite (= x!0 #x3dbffffa) #x00
    (ite (= x!0 #x3dbffffb) #x00
    (ite (= x!0 #x3dbffff8) #x00
      #x40))))))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0c8ffffe) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0c8ffffe) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0dc00006 x!0)
         (ite (bvule #x0dc00007 x!0) #x0dc00007 #x0dc00006)
         #x0c8ffffe))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0c8ffffe) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0c8ffffe) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x351))))
 (let ((?x178 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (=> $x97 (= ?x178 ?x148)))))))))
 ))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (= $x97 (bvuge ?x262 (_ bv1 32)))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x163 (= false false)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x297 (_ bv0 32))))
 (=> $x66 $x163)))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x297 (_ bv0 32))))
 (= $x66 (= ?x262 (_ bv0 32)))))))
 ))
 (let (($x280 (and $x258 $x228)))
 (let (($x329 (and $x280 $x156)))
 (let (($x375 (and $x329 $x193)))
 (let (($x208 (= $x375 true)))
 (let (($x165 (= $x208 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x144 (concat ?x149 (concat ?x21 ?x119)))))
 (let (($x261 (= input.dst.llvm-%n ?x157)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x263 (concat ?x216 (concat ?x243 ?x47)))))
 (let (($x38 (= input.dst.llvm-%x ?x252)))
 (let (($x209 (and $x38 $x261)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x242 (and $x161 $x209)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x189)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x187)))
 (let ((?x298 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x298)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (and $x372 $x231)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x241 $x247)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x135 $x113)))
 (let (($x118 (not $x12)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x155 $x293)))
 (let (($x210 (and (not $x279) $x118)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x91 $x379)))
 (let (($x260 (not $x123)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x360 $x76)))
 (let (($x81 (and (not $x200) $x260)))
 (let (($x121 (and (and (and (and (and (and $x81 $x210) $x272) $x7) $x375) $x6) $x40)))
 (let (($x100 (and (and (and $x121 $x273) $x295) $x242)))
 (let (($x137 (= $x100 true)))
 (let (($x225 (= $x137 true)))
 (let (($x217 (= $x225 true)))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (=> $x97 (= ?x178 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (= $x97 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x297 (_ bv0 32))))
 (= $x66 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x8 (and $x267 $x228)))
 (let (($x347 (and $x8 $x125)))
 (let (($x378 (and $x347 $x377)))
 (let (($x174 (and $x378 $x217)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x215 (and $x14 $x174)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x288 (and $x10 $x215)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x11 (and $x109 $x288)))
 (let (($x286 (=> $x11 $x165)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x351))))
 (let ((?x178 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (=> $x97 (= ?x178 ?x148)))))))))
 ))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (= $x97 (bvuge ?x262 (_ bv1 32)))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x163 (= false false)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x297 (_ bv0 32))))
 (=> $x66 $x163)))))
 ))
 (let (($x258 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x297 (_ bv0 32))))
 (= $x66 (= ?x262 (_ bv0 32)))))))
 ))
 (let (($x280 (and $x258 $x228)))
 (let (($x329 (and $x280 $x156)))
 (let (($x375 (and $x329 $x193)))
 (let (($x208 (= $x375 true)))
 (let (($x165 (= $x208 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x157 (concat ?x144 (concat ?x149 (concat ?x21 ?x119)))))
 (let (($x261 (= input.dst.llvm-%n ?x157)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x243 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x263 (concat ?x216 (concat ?x243 ?x47)))))
 (let (($x38 (= input.dst.llvm-%x ?x252)))
 (let (($x209 (and $x38 $x261)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x242 (and $x161 $x209)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x295 (= (_ bv0 32) ?x189)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x273 (= (_ bv0 32) ?x187)))
 (let ((?x298 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x298)))
 (let ((?x219 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x231 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x372 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x247 (and $x372 $x231)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (and $x241 $x247)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x135 $x113)))
 (let (($x118 (not $x12)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x155 $x293)))
 (let (($x210 (and (not $x279) $x118)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x91 $x379)))
 (let (($x260 (not $x123)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x360 $x76)))
 (let (($x81 (and (not $x200) $x260)))
 (let (($x121 (and (and (and (and (and (and $x81 $x210) $x272) $x7) $x375) $x6) $x40)))
 (let (($x100 (and (and (and $x121 $x273) $x295) $x242)))
 (let (($x137 (= $x100 true)))
 (let (($x225 (= $x137 true)))
 (let (($x217 (= $x225 true)))
 (let (($x377 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (=> $x97 (= ?x178 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x297 (_ bv1 32))))
 (= $x97 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x66 (= ?x297 (_ bv0 32))))
 (= $x66 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x8 (and $x267 $x228)))
 (let (($x347 (and $x8 $x125)))
 (let (($x378 (and $x347 $x377)))
 (let (($x174 (and $x378 $x217)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x215 (and $x14 $x174)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x288 (and $x10 $x215)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x11 (and $x109 $x288)))
 (let (($x286 (=> $x11 $x165)))
 (not $x286)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (= false true)))
 (let (($x376 (= $x13 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x269 (concat ?x268 (concat ?x173 (concat ?x65 ?x126)))))
 (let (($x72 (= input.dst.llvm-%n ?x269)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x271 (concat ?x51 (concat ?x332 (concat ?x17 ?x128)))))
 (let (($x326 (= input.dst.llvm-%x ?x271)))
 (let (($x34 (and $x326 $x72)))
 (let (($x236 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (and $x236 $x34)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x26)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x203)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (and $x185 $x175)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x62 $x213)))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x184))))
 (let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (=> $x83 (= ?x366 ?x159)))))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (= $x83 (bvuge ?x67 (_ bv1 32)))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x113 (= false false)))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x293 (_ bv0 32))))
 (=> $x279 $x113)))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x293 (_ bv0 32))))
 (= $x279 (= ?x67 (_ bv0 32)))))))
 ))
 (let (($x355 (and $x254 $x210)))
 (let (($x264 (and $x355 $x133)))
 (let (($x75 (and $x264 $x154)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x298 (and $x6 $x158)))
 (let (($x40 (not $x298)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (and $x219 $x231)))
 (let (($x187 (and (not $x247) $x40)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x276 $x193)))
 (let (($x349 (not $x375)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x177 $x352)))
 (let (($x372 (and (not $x148) $x349)))
 (let (($x16 (and (and (and (and (and (and $x372 $x187) $x134) $x295) $x75) $x94) $x259)))
 (let (($x138 (and (and (and $x16 $x169) $x32) $x104)))
 (let (($x226 (= $x138 true)))
 (let (($x150 (= $x226 true)))
 (let (($x248 (= $x150 true)))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (=> $x83 (= ?x366 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (= $x83 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x293 (_ bv0 32))))
 (= $x279 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x96 (and $x135 $x210)))
 (let (($x63 (and $x96 $x280)))
 (let (($x353 (and $x63 $x343)))
 (let (($x291 (and $x353 $x248)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x192 (and $x37 $x291)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x60 (and $x64 $x192)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x345 (and $x294 $x60)))
 (let (($x45 (=> $x345 $x376)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (= false true)))
 (let (($x376 (= $x13 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x269 (concat ?x268 (concat ?x173 (concat ?x65 ?x126)))))
 (let (($x72 (= input.dst.llvm-%n ?x269)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x332 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x271 (concat ?x51 (concat ?x332 (concat ?x17 ?x128)))))
 (let (($x326 (= input.dst.llvm-%x ?x271)))
 (let (($x34 (and $x326 $x72)))
 (let (($x236 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x104 (and $x236 $x34)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x26)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x203)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x175 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (and $x185 $x175)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x62 $x213)))
 (let (($x154 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x184))))
 (let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (=> $x83 (= ?x366 ?x159)))))))))
 ))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (= $x83 (bvuge ?x67 (_ bv1 32)))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x113 (= false false)))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x293 (_ bv0 32))))
 (=> $x279 $x113)))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x293 (_ bv0 32))))
 (= $x279 (= ?x67 (_ bv0 32)))))))
 ))
 (let (($x355 (and $x254 $x210)))
 (let (($x264 (and $x355 $x133)))
 (let (($x75 (and $x264 $x154)))
 (let (($x295 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x298 (and $x6 $x158)))
 (let (($x40 (not $x298)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (and $x219 $x231)))
 (let (($x187 (and (not $x247) $x40)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x276 $x193)))
 (let (($x349 (not $x375)))
 (let (($x352 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x177 $x352)))
 (let (($x372 (and (not $x148) $x349)))
 (let (($x16 (and (and (and (and (and (and $x372 $x187) $x134) $x295) $x75) $x94) $x259)))
 (let (($x138 (and (and (and $x16 $x169) $x32) $x104)))
 (let (($x226 (= $x138 true)))
 (let (($x150 (= $x226 true)))
 (let (($x248 (= $x150 true)))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (=> $x83 (= ?x366 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x83 (bvuge ?x293 (_ bv1 32))))
 (= $x83 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x293 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x279 (= ?x293 (_ bv0 32))))
 (= $x279 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x96 (and $x135 $x210)))
 (let (($x63 (and $x96 $x280)))
 (let (($x353 (and $x63 $x343)))
 (let (($x291 (and $x353 $x248)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x192 (and $x37 $x291)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x60 (and $x64 $x192)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x345 (and $x294 $x60)))
 (let (($x45 (=> $x345 $x376)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2cd631b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2c691638)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2c69163b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2cd631bb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2c691638)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2cd631b8)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000054)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000057)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000054)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x330 (= $x48 false)))
 (let (($x331 (= $x330 true)))
 (let (($x311 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x315 (= $x311 true)))
 (let (($x318 (= $x315 true)))
 (let ((?x52 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvadd input.dst.llvm-%x ?x52)))
 (let (($x92 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x304 (bvadd ?x74 (_ bv3 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x320 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x304)))
 (let (($x305 (or false (or false (and (and true (or $x314 $x320)) (or $x129 $x92))))))
 (let (($x306 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) $x305)))
 (let (($x191 (=> (and $x48 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) $x305)))
 (let (($x112 (= $x191 true)))
 (let (($x310 (= $x112 true)))
 (let (($x309 (= $x310 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x136 true)))
 (let (($x106 (= $x58 true)))
 (let (($x289 (= $x106 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x246 true)))
 (let (($x285 (= $x89 true)))
 (let (($x218 (= $x285 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x292 (= $x202 true)))
 (let (($x162 (= $x292 true)))
 (let (($x49 (= $x162 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x68 true)))
 (let (($x265 (= $x132 true)))
 (let (($x78 (= $x265 true)))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x7))))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (=> $x254 (= ?x24 ?x329)))))))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x249 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (= $x254 $x365))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x247 (_ bv0 32))))
 (=> $x121 $x298)))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x249 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x247 (_ bv0 32))))
 (= $x121 $x300))))))
 ))
 (let (($x73 (and $x105 $x230)))
 (let (($x41 (and $x73 $x266)))
 (let (($x188 (and $x41 $x44)))
 (let (($x287 (= $x188 true)))
 (let (($x232 (= $x287 true)))
 (let (($x79 (= $x232 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x7))))
 (let ((?x199 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x372 (_ bv1 32))))
 (=> $x373 (= ?x199 ?x329)))))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x249 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x372 (_ bv1 32))))
 (= $x373 $x365))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x372 (_ bv0 32))))
 (=> $x219 $x298)))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x249 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x372 (_ bv0 32))))
 (= $x219 $x300))))))
 ))
 (let (($x90 (and $x88 $x19)))
 (let (($x356 (and $x90 $x370)))
 (let (($x167 (and $x356 $x281)))
 (let (($x171 (= $x167 true)))
 (let (($x114 (= $x171 true)))
 (let (($x59 (= $x114 true)))
 (let (($x23 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x98 (= $x23 true)))
 (let (($x119 (= $x98 true)))
 (let (($x127 (= (_ bv0 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let (($x125 (= $x127 true)))
 (let (($x216 (= $x125 true)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x350)))
 (let ((?x376 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x376)))
 (let ((?x345 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x345)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x291 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (and $x226 $x291)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x138 $x192)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x173 $x33)))
 (let (($x126 (not $x65)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x82 $x268)))
 (let (($x9 (and (not $x30) $x126)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x17 $x128)))
 (let (($x325 (not $x348)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x323 $x344)))
 (let (($x326 (and (not $x332) $x325)))
 (let (($x71 (and (and (and (and (and (and $x326 $x9) $x72) $x104) $x60) $x13) $x45)))
 (let (($x243 (and $x71 $x14)))
 (let (($x35 (= $x243 true)))
 (let (($x333 (= $x35 true)))
 (let (($x196 (= $x333 true)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x26 true)))
 (let (($x221 (= $x32 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x259 (= $x145 true)))
 (let (($x16 (= $x259 true)))
 (let (($x203 (= $x16 true)))
 (let (($x181 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x175 (= $x181 true)))
 (let (($x213 (= $x175 true)))
 (let (($x94 (= $x213 true)))
 (let (($x154 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x75 (= $x154 true)))
 (let (($x151 (= $x75 true)))
 (let (($x62 (= $x151 true)))
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x238 (= (_ bv0 2) ?x184)))
 (let (($x159 (= $x238 true)))
 (let (($x282 (= $x159 true)))
 (let (($x185 (and $x282 $x62)))
 (let (($x108 (and $x185 $x94)))
 (let (($x169 (and $x108 $x203)))
 (let (($x166 (and $x169 $x221)))
 (let (($x97 (and $x166 $x196)))
 (let (($x161 (and $x97 $x216)))
 (let (($x152 (and $x161 $x119)))
 (let (($x274 (and $x152 $x59)))
 (let (($x176 (and $x274 $x79)))
 (let (($x172 (and $x176 $x78)))
 (let (($x18 (and $x172 $x49)))
 (let (($x234 (and $x18 $x218)))
 (let (($x27 (and $x234 $x289)))
 (let (($x307 (and $x27 $x309)))
 (let (($x317 (and $x307 $x318)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x199 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (=> $x254 (= ?x24 ?x199)))))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x372 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (= $x254 $x373))))))
 ))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x372 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x247 (_ bv0 32))))
 (= $x121 $x219))))))
 ))
 (let (($x273 (and $x158 $x230)))
 (let (($x57 (and $x273 $x211)))
 (let (($x385 (and $x57 $x233)))
 (let (($x316 (and $x385 $x317)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x319 (and $x37 $x316)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x321 (and $x31 $x319)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x322 (and $x294 $x321)))
 (let (($x339 (=> $x322 $x331)))
 (not $x339))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x48 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x330 (= $x48 false)))
 (let (($x331 (= $x330 true)))
 (let (($x311 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x315 (= $x311 true)))
 (let (($x318 (= $x315 true)))
 (let ((?x52 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvadd input.dst.llvm-%x ?x52)))
 (let (($x92 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x304 (bvadd ?x74 (_ bv3 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x320 (bvugt ?x74 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x304)))
 (let (($x305 (or false (or false (and (and true (or $x314 $x320)) (or $x129 $x92))))))
 (let (($x306 (=> (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32))) $x305)))
 (let (($x191 (=> (and $x48 (bvule ?x74 (bvsub (bvadd ?x74 (_ bv4 32)) (_ bv1 32)))) $x305)))
 (let (($x112 (= $x191 true)))
 (let (($x310 (= $x112 true)))
 (let (($x309 (= $x310 true)))
 (let (($x136 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x136 true)))
 (let (($x106 (= $x58 true)))
 (let (($x289 (= $x106 true)))
 (let (($x246 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x89 (= $x246 true)))
 (let (($x285 (= $x89 true)))
 (let (($x218 (= $x285 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x292 (= $x202 true)))
 (let (($x162 (= $x292 true)))
 (let (($x49 (= $x162 true)))
 (let (($x68 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x132 (= $x68 true)))
 (let (($x265 (= $x132 true)))
 (let (($x78 (= $x265 true)))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x7))))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (=> $x254 (= ?x24 ?x329)))))))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x249 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (= $x254 $x365))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x247 (_ bv0 32))))
 (=> $x121 $x298)))))
 ))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x249 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x247 (_ bv0 32))))
 (= $x121 $x300))))))
 ))
 (let (($x73 (and $x105 $x230)))
 (let (($x41 (and $x73 $x266)))
 (let (($x188 (and $x41 $x44)))
 (let (($x287 (= $x188 true)))
 (let (($x232 (= $x287 true)))
 (let (($x79 (= $x232 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x200 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv1 32))) (select input.dst.llvm-mem ?x200))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x200 (_ bv2 32))) ?x7))))
 (let ((?x199 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x372 (_ bv1 32))))
 (=> $x373 (= ?x199 ?x329)))))))))
 ))
 (let (($x370 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x365 (bvuge ?x249 (_ bv1 32))))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x372 (_ bv1 32))))
 (= $x373 $x365))))))
 ))
 (let (($x19 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x298 (= false false)))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x372 (_ bv0 32))))
 (=> $x219 $x298)))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x249 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x300 (= ?x249 (_ bv0 32))))
 (let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x372 (_ bv0 32))))
 (= $x219 $x300))))))
 ))
 (let (($x90 (and $x88 $x19)))
 (let (($x356 (and $x90 $x370)))
 (let (($x167 (and $x356 $x281)))
 (let (($x171 (= $x167 true)))
 (let (($x114 (= $x171 true)))
 (let (($x59 (= $x114 true)))
 (let (($x23 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x98 (= $x23 true)))
 (let (($x119 (= $x98 true)))
 (let (($x127 (= (_ bv0 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let (($x125 (= $x127 true)))
 (let (($x216 (= $x125 true)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x350)))
 (let ((?x376 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x376)))
 (let ((?x345 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x345)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x291 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (and $x226 $x291)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x138 $x192)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (and $x173 $x33)))
 (let (($x126 (not $x65)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x82 $x268)))
 (let (($x9 (and (not $x30) $x126)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (and $x17 $x128)))
 (let (($x325 (not $x348)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (and $x323 $x344)))
 (let (($x326 (and (not $x332) $x325)))
 (let (($x71 (and (and (and (and (and (and $x326 $x9) $x72) $x104) $x60) $x13) $x45)))
 (let (($x243 (and $x71 $x14)))
 (let (($x35 (= $x243 true)))
 (let (($x333 (= $x35 true)))
 (let (($x196 (= $x333 true)))
 (let (($x26 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x32 (= $x26 true)))
 (let (($x221 (= $x32 true)))
 (let (($x145 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x259 (= $x145 true)))
 (let (($x16 (= $x259 true)))
 (let (($x203 (= $x16 true)))
 (let (($x181 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x175 (= $x181 true)))
 (let (($x213 (= $x175 true)))
 (let (($x94 (= $x213 true)))
 (let (($x154 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x75 (= $x154 true)))
 (let (($x151 (= $x75 true)))
 (let (($x62 (= $x151 true)))
 (let ((?x184 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x238 (= (_ bv0 2) ?x184)))
 (let (($x159 (= $x238 true)))
 (let (($x282 (= $x159 true)))
 (let (($x185 (and $x282 $x62)))
 (let (($x108 (and $x185 $x94)))
 (let (($x169 (and $x108 $x203)))
 (let (($x166 (and $x169 $x221)))
 (let (($x97 (and $x166 $x196)))
 (let (($x161 (and $x97 $x216)))
 (let (($x152 (and $x161 $x119)))
 (let (($x274 (and $x152 $x59)))
 (let (($x176 (and $x274 $x79)))
 (let (($x172 (and $x176 $x78)))
 (let (($x18 (and $x172 $x49)))
 (let (($x234 (and $x18 $x218)))
 (let (($x27 (and $x234 $x289)))
 (let (($x307 (and $x27 $x309)))
 (let (($x317 (and $x307 $x318)))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x199 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x24 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (=> $x254 (= ?x24 ?x199)))))))
 ))
 (let (($x211 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x373 (bvuge ?x372 (_ bv1 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x254 (bvuge ?x247 (_ bv1 32))))
 (= $x254 $x373))))))
 ))
 (let (($x158 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x219 (= ?x372 (_ bv0 32))))
 (let ((?x247 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x121 (= ?x247 (_ bv0 32))))
 (= $x121 $x219))))))
 ))
 (let (($x273 (and $x158 $x230)))
 (let (($x57 (and $x273 $x211)))
 (let (($x385 (and $x57 $x233)))
 (let (($x316 (and $x385 $x317)))
 (let (($x37 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x319 (and $x37 $x316)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x321 (and $x31 $x319)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x322 (and $x294 $x321)))
 (let (($x339 (=> $x322 $x331)))
 (not $x339))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x283b6420)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x8a16aa88)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdc106d64)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdc106d67)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x283b6423)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdc106d64)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x283b6420)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x8a16aa8b (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x8a16aa8a (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x8a16aa89 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x8a16aa88 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x8a16aa8b (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x8a16aa8a (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x8a16aa89 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x8a16aa88 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x66000500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x07fee200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40002404)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x07fee203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40002407)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x07fee200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40002404)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00080000 x!0)
         (ite (bvule #x00080001 x!0) #x00080001 #x00080000)
         #x00000000))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x66000503 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x66000502 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x66000501 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x66000500 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x66000503 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x66000502 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x66000501 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x66000500 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x336 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (not $x379)))
 (let (($x324 (or $x263 (bvuge ?x336 (_ bv1 32)))))
 (let (($x327 (= $x324 true)))
 (let (($x334 (= $x327 true)))
 (let ((?x177 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x241 (bvneg ?x177)))
 (let (($x115 (= ?x241 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x115 true)))
 (let (($x193 (= $x276 true)))
 (let (($x369 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x343 (= $x369 true)))
 (let (($x353 (= $x343 true)))
 (let (($x368 (= $x353 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (= $x183 true)))
 (let (($x299 (= $x180 true)))
 (let (($x366 (= $x299 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x387 (= $x56 true)))
 (let (($x178 (= $x387 true)))
 (let (($x377 (= $x178 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x244 true)))
 (let (($x347 (= $x256 true)))
 (let (($x302 (= $x347 true)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x360))))
 (let ((?x125 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (=> $x46 (= ?x125 ?x148)))))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x206 (_ bv1 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (= $x46 $x118))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x33 (_ bv0 32))))
 (=> $x65 $x284)))))
 ))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x206 (_ bv0 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x33 (_ bv0 32))))
 (= $x65 $x235))))))
 ))
 (let (($x77 (and $x295 $x204)))
 (let (($x197 (and $x77 $x164)))
 (let (($x264 (and $x197 $x133)))
 (let (($x374 (= $x264 true)))
 (let (($x371 (= $x374 true)))
 (let (($x367 (= $x371 true)))
 (let (($x61 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x360))))
 (let ((?x127 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x30 (_ bv1 32))))
 (=> $x13 (= ?x127 ?x148)))))))))
 ))
 (let (($x96 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x206 (_ bv1 32))))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x30 (_ bv1 32))))
 (= $x13 $x118))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x30 (_ bv0 32))))
 (=> $x15 $x284)))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x206 (_ bv0 32))))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x30 (_ bv0 32))))
 (= $x15 $x235))))))
 ))
 (let (($x267 (and $x8 $x120)))
 (let (($x83 (and $x267 $x96)))
 (let (($x20 (and $x83 $x61)))
 (let (($x12 (= $x20 true)))
 (let (($x69 (= $x12 true)))
 (let (($x40 (= $x69 true)))
 (let (($x136 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x58 (= $x136 true)))
 (let (($x106 (= $x58 true)))
 (let (($x289 (= $x106 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x89 (= $x246 true)))
 (let (($x285 (= $x89 true)))
 (let (($x218 (= $x285 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x202 (= $x172 true)))
 (let (($x292 (= $x202 true)))
 (let (($x162 (= $x292 true)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x275)))
 (let ((?x266 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x266)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x114 $x274)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x171 $x153)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x380 $x91)))
 (let (($x7 (not $x140)))
 (let (($x346 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x286 $x346)))
 (let (($x329 (and (not $x99) $x7)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x361 (and $x111 $x157)))
 (let (($x200 (not $x361)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (and $x363 $x370)))
 (let (($x262 (and (not $x356) $x200)))
 (let (($x176 (and (and (and (and (and (and $x262 $x329) $x39) $x167) $x105) $x224) $x41)))
 (let (($x250 (and $x176 $x110)))
 (let (($x68 (= $x250 true)))
 (let (($x132 (= $x68 true)))
 (let (($x265 (= $x132 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x358 (= (_ bv0 2) ?x88)))
 (let (($x19 (= $x358 true)))
 (let (($x90 (= $x19 true)))
 (let ((?x43 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x252 (bvneg ?x43)))
 (let (($x142 (= ?x252 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x142 true)))
 (let (($x300 (= $x249 true)))
 (let (($x365 (and $x300 $x90)))
 (let (($x78 (and $x365 $x265)))
 (let (($x49 (and $x78 $x162)))
 (let (($x234 (and $x49 $x218)))
 (let (($x27 (and $x234 $x289)))
 (let (($x134 (and $x27 $x40)))
 (let (($x227 (and $x134 $x367)))
 (let (($x386 (and $x227 $x302)))
 (let (($x383 (and $x386 $x377)))
 (let (($x240 (and $x383 $x366)))
 (let (($x335 (and $x240 $x368)))
 (let (($x186 (and $x335 $x193)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x127 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x125 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (=> $x46 (= ?x125 ?x127)))))))
 ))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x30 (_ bv1 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (= $x46 $x13))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x30 (_ bv0 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x33 (_ bv0 32))))
 (= $x65 $x15))))))
 ))
 (let (($x34 (and $x9 $x204)))
 (let (($x71 (and $x34 $x45)))
 (let (($x98 (and $x71 $x23)))
 (let (($x251 (and $x98 $x186)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x255 (and $x282 $x251)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x25 (and $x238 $x255)))
 (let (($x168 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x67 (and $x168 $x25)))
 (let ((?x53 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvadd input.dst.llvm-%x ?x53)))
 (let (($x57 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd ?x155 (_ bv3 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x230 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x298)))
 (let (($x70 (or false (or false (and (and true (or $x187 $x230)) (or $x211 $x57))))))
 (let (($x385 (=> (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32))) $x70)))
 (let (($x231 (=> (and $x379 (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32)))) $x70)))
 (let (($x364 (and $x231 $x67)))
 (let (($x338 (=> $x364 $x334)))
 (not $x338))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x336 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x263 (not $x379)))
 (let (($x324 (or $x263 (bvuge ?x336 (_ bv1 32)))))
 (let (($x327 (= $x324 true)))
 (let (($x334 (= $x327 true)))
 (let ((?x177 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x241 (bvneg ?x177)))
 (let (($x115 (= ?x241 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (= $x115 true)))
 (let (($x193 (= $x276 true)))
 (let (($x369 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x343 (= $x369 true)))
 (let (($x353 (= $x343 true)))
 (let (($x368 (= $x353 true)))
 (let (($x183 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x180 (= $x183 true)))
 (let (($x299 (= $x180 true)))
 (let (($x366 (= $x299 true)))
 (let (($x56 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x387 (= $x56 true)))
 (let (($x178 (= $x387 true)))
 (let (($x377 (= $x178 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x256 (= $x244 true)))
 (let (($x347 (= $x256 true)))
 (let (($x302 (= $x347 true)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x360))))
 (let ((?x125 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (=> $x46 (= ?x125 ?x148)))))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x206 (_ bv1 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (= $x46 $x118))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x33 (_ bv0 32))))
 (=> $x65 $x284)))))
 ))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x206 (_ bv0 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x33 (_ bv0 32))))
 (= $x65 $x235))))))
 ))
 (let (($x77 (and $x295 $x204)))
 (let (($x197 (and $x77 $x164)))
 (let (($x264 (and $x197 $x133)))
 (let (($x374 (= $x264 true)))
 (let (($x371 (= $x374 true)))
 (let (($x367 (= $x371 true)))
 (let (($x61 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x212 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x360))))
 (let ((?x127 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x30 (_ bv1 32))))
 (=> $x13 (= ?x127 ?x148)))))))))
 ))
 (let (($x96 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x206 (_ bv1 32))))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x30 (_ bv1 32))))
 (= $x13 $x118))))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x30 (_ bv0 32))))
 (=> $x15 $x284)))))
 ))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x235 (= ?x206 (_ bv0 32))))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x30 (_ bv0 32))))
 (= $x15 $x235))))))
 ))
 (let (($x267 (and $x8 $x120)))
 (let (($x83 (and $x267 $x96)))
 (let (($x20 (and $x83 $x61)))
 (let (($x12 (= $x20 true)))
 (let (($x69 (= $x12 true)))
 (let (($x40 (= $x69 true)))
 (let (($x136 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x58 (= $x136 true)))
 (let (($x106 (= $x58 true)))
 (let (($x289 (= $x106 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x89 (= $x246 true)))
 (let (($x285 (= $x89 true)))
 (let (($x218 (= $x285 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x202 (= $x172 true)))
 (let (($x292 (= $x202 true)))
 (let (($x162 (= $x292 true)))
 (let ((?x275 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x275)))
 (let ((?x266 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x266)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x73)))
 (let ((?x59 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x114 $x274)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (and $x171 $x153)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x380 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x140 (and $x380 $x91)))
 (let (($x7 (not $x140)))
 (let (($x346 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x286 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (and $x286 $x346)))
 (let (($x329 (and (not $x99) $x7)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x361 (and $x111 $x157)))
 (let (($x200 (not $x361)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (and $x363 $x370)))
 (let (($x262 (and (not $x356) $x200)))
 (let (($x176 (and (and (and (and (and (and $x262 $x329) $x39) $x167) $x105) $x224) $x41)))
 (let (($x250 (and $x176 $x110)))
 (let (($x68 (= $x250 true)))
 (let (($x132 (= $x68 true)))
 (let (($x265 (= $x132 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x358 (= (_ bv0 2) ?x88)))
 (let (($x19 (= $x358 true)))
 (let (($x90 (= $x19 true)))
 (let ((?x43 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x252 (bvneg ?x43)))
 (let (($x142 (= ?x252 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x249 (= $x142 true)))
 (let (($x300 (= $x249 true)))
 (let (($x365 (and $x300 $x90)))
 (let (($x78 (and $x365 $x265)))
 (let (($x49 (and $x78 $x162)))
 (let (($x234 (and $x49 $x218)))
 (let (($x27 (and $x234 $x289)))
 (let (($x134 (and $x27 $x40)))
 (let (($x227 (and $x134 $x367)))
 (let (($x386 (and $x227 $x302)))
 (let (($x383 (and $x386 $x377)))
 (let (($x240 (and $x383 $x366)))
 (let (($x335 (and $x240 $x368)))
 (let (($x186 (and $x335 $x193)))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x127 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x125 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (=> $x46 (= ?x125 ?x127)))))))
 ))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x30 (_ bv1 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x33 (_ bv1 32))))
 (= $x46 $x13))))))
 ))
 (let (($x9 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x30 (_ bv0 32))))
 (let ((?x33 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x33 (_ bv0 32))))
 (= $x65 $x15))))))
 ))
 (let (($x34 (and $x9 $x204)))
 (let (($x71 (and $x34 $x45)))
 (let (($x98 (and $x71 $x23)))
 (let (($x251 (and $x98 $x186)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x255 (and $x282 $x251)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x25 (and $x238 $x255)))
 (let (($x168 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x67 (and $x168 $x25)))
 (let ((?x53 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x155 (bvadd input.dst.llvm-%x ?x53)))
 (let (($x57 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x298 (bvadd ?x155 (_ bv3 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x298)))
 (let (($x230 (bvugt ?x155 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x298)))
 (let (($x70 (or false (or false (and (and true (or $x187 $x230)) (or $x211 $x57))))))
 (let (($x385 (=> (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32))) $x70)))
 (let (($x231 (=> (and $x379 (bvule ?x155 (bvsub (bvadd ?x155 (_ bv4 32)) (_ bv1 32)))) $x70)))
 (let (($x364 (and $x231 $x67)))
 (let (($x338 (=> $x364 $x334)))
 (not $x338))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 224 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x408 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x409 (bvmul (_ bv4294967295 32) ?x408)))
 (let ((?x410 (bvneg ?x409)))
 (let (($x412 (= ?x410 ?x411)))
 (let (($x413 (= $x412 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x394 (bvneg ?x393)))
 (let (($x395 (= ?x394 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x396 (= $x395 true)))
 (let (($x397 (= $x396 true)))
 (let (($x388 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x389 (= $x388 true)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let (($x113 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (= $x113 true)))
 (let (($x257 (= $x86 true)))
 (let (($x342 (= $x257 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x378 (= $x50 true)))
 (let (($x359 (= $x378 true)))
 (let (($x165 (= $x359 true)))
 (let ((?x349 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvadd input.dst.llvm-%x ?x349)))
 (let ((?x326 (bvsub ?x121 ?x349)))
 (let (($x192 (ite (bvsge ?x349 (_ bv0 32)) (bvuge ?x121 ?x326) (bvult ?x121 ?x326))))
 (let (($x128 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x348 (ite $x128 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x51 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x344 (bvmul (_ bv4 64) ?x51)))
 (let ((?x332 ((_ extract 63 32) ?x344)))
 (let (($x325 (= ?x332 ?x348)))
 (let (($x66 (and $x325 $x192)))
 (let (($x236 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x345 (and $x236 $x66)))
 (let (($x243 (= true $x345)))
 (let (($x155 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x155 $x243)))
 (let (($x196 (= $x35 true)))
 (let (($x97 (= $x196 true)))
 (let (($x103 (= $x97 true)))
 (let (($x333 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x333 true)))
 (let (($x223 (= $x141 true)))
 (let (($x195 (= $x223 true)))
 (let (($x270 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x131 (= $x270 true)))
 (let (($x55 (= $x131 true)))
 (let (($x179 (= $x55 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x146 (= $x42 true)))
 (let (($x93 (= $x146 true)))
 (let (($x101 (= $x93 true)))
 (let (($x350 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x14 (= $x350 true)))
 (let (($x116 (= $x14 true)))
 (let (($x278 (= $x116 true)))
 (let (($x81 (= $x155 true)))
 (let (($x60 (= $x81 true)))
 (let (($x28 (= $x60 true)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x288)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x225)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (and $x100 $x242)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x5 $x271)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x63 $x222)))
 (let (($x258 (not $x124)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x209 $x283)))
 (let (($x280 (and (not $x261) $x258)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x10 $x279)))
 (let (($x123 (not $x293)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x259 $x16)))
 (let (($x149 (and (not $x36) $x123)))
 (let (($x226 (and (and (and (and (and (and $x149 $x280) $x174) $x11) $x190) $x208) $x217)))
 (let (($x228 (and $x226 $x301)))
 (let (($x170 (= $x228 true)))
 (let (($x54 (= $x170 true)))
 (let (($x135 (= $x54 true)))
 (let ((?x181 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x175 (= (_ bv0 2) ?x181)))
 (let (($x94 (= $x175 true)))
 (let (($x108 (= $x94 true)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x139))))
 (let ((?x41 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (=> $x167 (= ?x41 ?x305)))))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x353 (_ bv1 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (= $x167 $x336))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x361 (= false false)))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x356 (_ bv0 32))))
 (=> $x239 $x361)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x368 (= ?x353 (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x356 (_ bv0 32))))
 (= $x239 $x368))))))
 ))
 (let (($x309 (and $x112 $x286)))
 (let (($x331 (and $x309 $x315)))
 (let (($x318 (and $x331 $x316)))
 (let (($x319 (= $x318 true)))
 (let (($x330 (= $x319 true)))
 (let (($x340 (= $x330 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x139))))
 (let ((?x266 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x365 (_ bv1 32))))
 (=> $x281 (= ?x266 ?x305)))))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x353 (_ bv1 32))))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x365 (_ bv1 32))))
 (= $x281 $x336))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x361 (= false false)))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x365 (_ bv0 32))))
 (=> $x363 $x361)))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x368 (= ?x353 (_ bv0 32))))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x365 (_ bv0 32))))
 (= $x363 $x368))))))
 ))
 (let (($x193 (and $x177 $x276)))
 (let (($x327 (and $x193 $x324)))
 (let (($x214 (and $x327 $x320)))
 (let (($x314 (= $x214 true)))
 (let (($x312 (= $x314 true)))
 (let (($x102 (= $x312 true)))
 (let ((?x218 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x234 (bvneg ?x218)))
 (let (($x58 (= ?x234 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x106 (= $x58 true)))
 (let (($x289 (= $x106 true)))
 (let (($x306 (and $x289 $x102)))
 (let (($x213 (and $x306 $x340)))
 (let (($x145 (and $x213 $x108)))
 (let (($x260 (and $x145 $x135)))
 (let (($x156 (and $x260 $x28)))
 (let (($x87 (and $x156 $x278)))
 (let (($x182 (and $x87 $x101)))
 (let (($x237 (and $x182 $x179)))
 (let (($x32 (and $x237 $x195)))
 (let (($x357 (and $x32 $x103)))
 (let (($x107 (and $x357 $x165)))
 (let (($x354 (and $x107 $x342)))
 (let (($x392 (and $x354 $x391)))
 (let (($x398 (and $x392 $x397)))
 (let ((?x400 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (and (bvuge ?x400 (_ bv1 32)) $x398)))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x266 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x41 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (=> $x167 (= ?x41 ?x266)))))))
 ))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x365 (_ bv1 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (= $x167 $x281))))))
 ))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x365 (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x356 (_ bv0 32))))
 (= $x239 $x363))))))
 ))
 (let (($x346 (and $x157 $x286)))
 (let (($x114 (and $x346 $x171)))
 (let (($x250 (and $x114 $x110)))
 (let (($x403 (and $x250 $x402)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x404 (and $x82 $x403)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x405 (and $x159 $x404)))
 (let (($x382 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x406 (and $x382 $x405)))
 (let (($x199 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x121 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x254 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x231 (or false (or false (and (and true (or $x273 $x254)) (or $x24 $x199))))))
 (let (($x168 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) $x231)))
 (let (($x53 (=> (and $x155 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) $x231)))
 (let (($x407 (and $x53 $x406)))
 (let (($x414 (=> $x407 $x413)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x408 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x409 (bvmul (_ bv4294967295 32) ?x408)))
 (let ((?x410 (bvneg ?x409)))
 (let (($x412 (= ?x410 ?x411)))
 (let (($x413 (= $x412 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x394 (bvneg ?x393)))
 (let (($x395 (= ?x394 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x396 (= $x395 true)))
 (let (($x397 (= $x396 true)))
 (let (($x388 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x389 (= $x388 true)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let (($x113 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (= $x113 true)))
 (let (($x257 (= $x86 true)))
 (let (($x342 (= $x257 true)))
 (let (($x50 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x378 (= $x50 true)))
 (let (($x359 (= $x378 true)))
 (let (($x165 (= $x359 true)))
 (let ((?x349 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x121 (bvadd input.dst.llvm-%x ?x349)))
 (let ((?x326 (bvsub ?x121 ?x349)))
 (let (($x192 (ite (bvsge ?x349 (_ bv0 32)) (bvuge ?x121 ?x326) (bvult ?x121 ?x326))))
 (let (($x128 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x348 (ite $x128 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x51 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x344 (bvmul (_ bv4 64) ?x51)))
 (let ((?x332 ((_ extract 63 32) ?x344)))
 (let (($x325 (= ?x332 ?x348)))
 (let (($x66 (and $x325 $x192)))
 (let (($x236 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x345 (and $x236 $x66)))
 (let (($x243 (= true $x345)))
 (let (($x155 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x155 $x243)))
 (let (($x196 (= $x35 true)))
 (let (($x97 (= $x196 true)))
 (let (($x103 (= $x97 true)))
 (let (($x333 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x141 (= $x333 true)))
 (let (($x223 (= $x141 true)))
 (let (($x195 (= $x223 true)))
 (let (($x270 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x131 (= $x270 true)))
 (let (($x55 (= $x131 true)))
 (let (($x179 (= $x55 true)))
 (let (($x42 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x146 (= $x42 true)))
 (let (($x93 (= $x146 true)))
 (let (($x101 (= $x93 true)))
 (let (($x350 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x14 (= $x350 true)))
 (let (($x116 (= $x14 true)))
 (let (($x278 (= $x116 true)))
 (let (($x81 (= $x155 true)))
 (let (($x60 (= $x81 true)))
 (let (($x28 (= $x60 true)))
 (let ((?x288 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x301 (= (_ bv0 32) ?x288)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x225)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let ((?x137 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x137)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (and $x100 $x242)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x5 $x271)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x222 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x124 (and $x63 $x222)))
 (let (($x258 (not $x124)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (and $x209 $x283)))
 (let (($x280 (and (not $x261) $x258)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x293 (and $x10 $x279)))
 (let (($x123 (not $x293)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x259 $x16)))
 (let (($x149 (and (not $x36) $x123)))
 (let (($x226 (and (and (and (and (and (and $x149 $x280) $x174) $x11) $x190) $x208) $x217)))
 (let (($x228 (and $x226 $x301)))
 (let (($x170 (= $x228 true)))
 (let (($x54 (= $x170 true)))
 (let (($x135 (= $x54 true)))
 (let ((?x181 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x175 (= (_ bv0 2) ?x181)))
 (let (($x94 (= $x175 true)))
 (let (($x108 (= $x94 true)))
 (let (($x316 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x139))))
 (let ((?x41 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (=> $x167 (= ?x41 ?x305)))))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x353 (_ bv1 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (= $x167 $x336))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x361 (= false false)))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x356 (_ bv0 32))))
 (=> $x239 $x361)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x368 (= ?x353 (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x356 (_ bv0 32))))
 (= $x239 $x368))))))
 ))
 (let (($x309 (and $x112 $x286)))
 (let (($x331 (and $x309 $x315)))
 (let (($x318 (and $x331 $x316)))
 (let (($x319 (= $x318 true)))
 (let (($x330 (= $x319 true)))
 (let (($x340 (= $x330 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x21 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x305 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x139))))
 (let ((?x266 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x365 (_ bv1 32))))
 (=> $x281 (= ?x266 ?x305)))))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x353 (_ bv1 32))))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x365 (_ bv1 32))))
 (= $x281 $x336))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x361 (= false false)))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x365 (_ bv0 32))))
 (=> $x363 $x361)))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x353 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x368 (= ?x353 (_ bv0 32))))
 (let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x365 (_ bv0 32))))
 (= $x363 $x368))))))
 ))
 (let (($x193 (and $x177 $x276)))
 (let (($x327 (and $x193 $x324)))
 (let (($x214 (and $x327 $x320)))
 (let (($x314 (= $x214 true)))
 (let (($x312 (= $x314 true)))
 (let (($x102 (= $x312 true)))
 (let ((?x218 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x234 (bvneg ?x218)))
 (let (($x58 (= ?x234 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x106 (= $x58 true)))
 (let (($x289 (= $x106 true)))
 (let (($x306 (and $x289 $x102)))
 (let (($x213 (and $x306 $x340)))
 (let (($x145 (and $x213 $x108)))
 (let (($x260 (and $x145 $x135)))
 (let (($x156 (and $x260 $x28)))
 (let (($x87 (and $x156 $x278)))
 (let (($x182 (and $x87 $x101)))
 (let (($x237 (and $x182 $x179)))
 (let (($x32 (and $x237 $x195)))
 (let (($x357 (and $x32 $x103)))
 (let (($x107 (and $x357 $x165)))
 (let (($x354 (and $x107 $x342)))
 (let (($x392 (and $x354 $x391)))
 (let (($x398 (and $x392 $x397)))
 (let ((?x400 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (and (bvuge ?x400 (_ bv1 32)) $x398)))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x266 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x41 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (=> $x167 (= ?x41 ?x266)))))))
 ))
 (let (($x171 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x365 (_ bv1 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x167 (bvuge ?x356 (_ bv1 32))))
 (= $x167 $x281))))))
 ))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x363 (= ?x365 (_ bv0 32))))
 (let ((?x356 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x356 (_ bv0 32))))
 (= $x239 $x363))))))
 ))
 (let (($x346 (and $x157 $x286)))
 (let (($x114 (and $x346 $x171)))
 (let (($x250 (and $x114 $x110)))
 (let (($x403 (and $x250 $x402)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x404 (and $x82 $x403)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x405 (and $x159 $x404)))
 (let (($x382 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x406 (and $x382 $x405)))
 (let (($x199 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x121 (_ bv3 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x254 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x231 (or false (or false (and (and true (or $x273 $x254)) (or $x24 $x199))))))
 (let (($x168 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) $x231)))
 (let (($x53 (=> (and $x155 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) $x231)))
 (let (($x407 (and $x53 $x406)))
 (let (($x414 (=> $x407 $x413)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x247 (bvadd input.dst.llvm-%x ?x155)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x417))))
 (let ((?x423 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x422)))
 (let ((?x366 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x241 (bvmul (_ bv4294967295 32) ?x366)))
 (let ((?x337 (bvneg ?x241)))
 (let (($x424 (= ?x337 ?x423)))
 (let (($x425 (= $x424 true)))
 (let ((?x29 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x88 (bvneg ?x29)))
 (let (($x358 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x358 true)))
 (let (($x7 (= $x140 true)))
 (let ((?x161 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x98 (bvneg ?x161)))
 (let (($x152 (= ?x98 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x152 true)))
 (let (($x252 (= $x43 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x339 (= (_ bv0 2) ?x232)))
 (let (($x321 (= $x339 true)))
 (let (($x23 (= $x321 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x151 (= $x75 true)))
 (let (($x154 (= $x151 true)))
 (let (($x62 (= $x154 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x308 (= $x341 true)))
 (let (($x375 (= $x308 true)))
 (let (($x48 (= $x375 true)))
 (let (($x307 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x59 (= $x307 true)))
 (let (($x274 (= $x59 true)))
 (let (($x334 (= $x274 true)))
 (let (($x91 (ite (bvsge ?x155 (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 ?x155)) (bvult ?x247 (bvsub ?x247 ?x155)))))
 (let (($x183 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x299 (ite $x183 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x383 (bvmul (_ bv4 64) ?x249)))
 (let ((?x377 ((_ extract 63 32) ?x383)))
 (let (($x191 (= ?x377 ?x299)))
 (let (($x186 (and $x191 $x91)))
 (let (($x272 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x255 (and $x272 $x186)))
 (let (($x251 (= true $x255)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x294 $x251)))
 (let (($x67 (= $x25 true)))
 (let (($x364 (= $x67 true)))
 (let (($x85 (= $x364 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x347 (= $x256 true)))
 (let (($x386 (= $x347 true)))
 (let (($x302 (= $x386 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv1 32))) (select input.dst.llvm-mem ?x362))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv2 32))) ?x198))))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (=> $x122 (= ?x311 ?x69)))))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x268 (_ bv1 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (= $x122 $x379))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x193 (= false false)))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x335 (_ bv0 32))))
 (=> $x177 $x193)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x268 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x335 (_ bv0 32))))
 (= $x177 $x30))))))
 ))
 (let (($x189 (and $x40 $x324)))
 (let (($x164 (and $x189 $x77)))
 (let (($x80 (and $x164 $x371)))
 (let (($x133 (= $x80 true)))
 (let (($x381 (= $x133 true)))
 (let (($x264 (= $x381 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv1 32))) (select input.dst.llvm-mem ?x362))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv2 32))) ?x198))))
 (let ((?x309 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x343 (_ bv1 32))))
 (=> $x139 (= ?x309 ?x69)))))))))
 ))
 (let (($x147 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x268 (_ bv1 32))))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x343 (_ bv1 32))))
 (= $x139 $x379))))))
 ))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x193 (= false false)))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x343 (_ bv0 32))))
 (=> $x353 $x193)))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x268 (_ bv0 32))))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x343 (_ bv0 32))))
 (= $x353 $x30))))))
 ))
 (let (($x376 (and $x173 $x37)))
 (let (($x117 (and $x376 $x147)))
 (let (($x9 (and $x117 $x126)))
 (let (($x72 (= $x9 true)))
 (let (($x204 (= $x72 true)))
 (let (($x34 (= $x204 true)))
 (let (($x93 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x101 (= $x93 true)))
 (let (($x182 (= $x101 true)))
 (let (($x270 (= $x182 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x278 (= $x116 true)))
 (let (($x87 (= $x278 true)))
 (let (($x42 (= $x87 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x28 (= $x60 true)))
 (let (($x156 (= $x28 true)))
 (let (($x350 (= $x156 true)))
 (let (($x54 (= $x294 true)))
 (let (($x135 (= $x54 true)))
 (let (($x260 (= $x135 true)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x190)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x242)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x215)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x269 $x11)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x174 $x104)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x283 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x283 $x261)))
 (let (($x63 (not $x277)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x123 $x149)))
 (let (($x124 (and (not $x209) $x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x16 $x36)))
 (let (($x10 (not $x220)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x108 $x145)))
 (let (($x293 (and (not $x259) $x10)))
 (let (($x226 (and (and (and (and (and (and $x293 $x124) $x280) $x38) $x5) $x137) $x271)))
 (let (($x288 (and $x226 $x297)))
 (let (($x301 (= $x288 true)))
 (let (($x228 (= $x301 true)))
 (let (($x170 (= $x228 true)))
 (let (($x81 (and $x170 $x260)))
 (let (($x14 (and $x81 $x350)))
 (let (($x146 (and $x14 $x42)))
 (let (($x131 (and $x146 $x270)))
 (let (($x46 (and $x131 $x34)))
 (let (($x367 (and $x46 $x264)))
 (let (($x56 (and $x367 $x302)))
 (let (($x263 (and $x56 $x85)))
 (let (($x338 (and $x263 $x334)))
 (let (($x95 (and $x338 $x48)))
 (let (($x52 (and $x95 $x62)))
 (let (($x127 (and $x52 $x23)))
 (let (($x300 (and $x127 $x252)))
 (let (($x329 (and $x300 $x7)))
 (let ((?x39 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (and (bvuge ?x39 (_ bv1 32)) $x329)))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (=> $x122 (= ?x311 ?x309)))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x343 (_ bv1 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (= $x122 $x139))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x343 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x335 (_ bv0 32))))
 (= $x177 $x353))))))
 ))
 (let (($x327 (and $x276 $x324)))
 (let (($x290 (and $x327 $x92)))
 (let (($x317 (and $x290 $x322)))
 (let (($x105 (and $x317 $x153)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x73 (and $x370 $x105)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x224 (and $x82 $x73)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x79 (and $x238 $x224)))
 (let (($x385 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x373 (bvadd ?x247 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x373)))
 (let (($x355 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x373)))
 (let (($x233 (or false (or false (and (and true (or $x211 $x355)) (or $x70 $x385))))))
 (let (($x184 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) $x233)))
 (let (($x298 (=> (and $x294 (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32)))) $x233)))
 (let (($x292 (and $x298 $x79)))
 (let (($x426 (=> $x292 $x425)))
 (not $x426)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x155 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x247 (bvadd input.dst.llvm-%x ?x155)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv1 32))) (select input.dst.llvm-mem ?x247))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x247 (_ bv2 32))) ?x417))))
 (let ((?x423 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x422)))
 (let ((?x366 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x241 (bvmul (_ bv4294967295 32) ?x366)))
 (let ((?x337 (bvneg ?x241)))
 (let (($x424 (= ?x337 ?x423)))
 (let (($x425 (= $x424 true)))
 (let ((?x29 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x88 (bvneg ?x29)))
 (let (($x358 (= ?x88 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x358 true)))
 (let (($x7 (= $x140 true)))
 (let ((?x161 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x98 (bvneg ?x161)))
 (let (($x152 (= ?x98 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x43 (= $x152 true)))
 (let (($x252 (= $x43 true)))
 (let ((?x232 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x339 (= (_ bv0 2) ?x232)))
 (let (($x321 (= $x339 true)))
 (let (($x23 (= $x321 true)))
 (let (($x75 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x151 (= $x75 true)))
 (let (($x154 (= $x151 true)))
 (let (($x62 (= $x154 true)))
 (let (($x341 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x308 (= $x341 true)))
 (let (($x375 (= $x308 true)))
 (let (($x48 (= $x375 true)))
 (let (($x307 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x59 (= $x307 true)))
 (let (($x274 (= $x59 true)))
 (let (($x334 (= $x274 true)))
 (let (($x91 (ite (bvsge ?x155 (_ bv0 32)) (bvuge ?x247 (bvsub ?x247 ?x155)) (bvult ?x247 (bvsub ?x247 ?x155)))))
 (let (($x183 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x299 (ite $x183 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x383 (bvmul (_ bv4 64) ?x249)))
 (let ((?x377 ((_ extract 63 32) ?x383)))
 (let (($x191 (= ?x377 ?x299)))
 (let (($x186 (and $x191 $x91)))
 (let (($x272 (= (bvand ?x247 (_ bv4294967292 32)) ?x247)))
 (let (($x255 (and $x272 $x186)))
 (let (($x251 (= true $x255)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x294 $x251)))
 (let (($x67 (= $x25 true)))
 (let (($x364 (= $x67 true)))
 (let (($x85 (= $x364 true)))
 (let (($x256 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x347 (= $x256 true)))
 (let (($x386 (= $x347 true)))
 (let (($x302 (= $x386 true)))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv1 32))) (select input.dst.llvm-mem ?x362))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv2 32))) ?x198))))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (=> $x122 (= ?x311 ?x69)))))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x268 (_ bv1 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (= $x122 $x379))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x193 (= false false)))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x335 (_ bv0 32))))
 (=> $x177 $x193)))))
 ))
 (let (($x40 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x268 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x335 (_ bv0 32))))
 (= $x177 $x30))))))
 ))
 (let (($x189 (and $x40 $x324)))
 (let (($x164 (and $x189 $x77)))
 (let (($x80 (and $x164 $x371)))
 (let (($x133 (= $x80 true)))
 (let (($x381 (= $x133 true)))
 (let (($x264 (= $x381 true)))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv1 32))) (select input.dst.llvm-mem ?x362))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x362 (_ bv2 32))) ?x198))))
 (let ((?x309 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x343 (_ bv1 32))))
 (=> $x139 (= ?x309 ?x69)))))))))
 ))
 (let (($x147 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x268 (_ bv1 32))))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x343 (_ bv1 32))))
 (= $x139 $x379))))))
 ))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x193 (= false false)))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x343 (_ bv0 32))))
 (=> $x353 $x193)))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x268 (_ bv0 32))))
 (let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x343 (_ bv0 32))))
 (= $x353 $x30))))))
 ))
 (let (($x376 (and $x173 $x37)))
 (let (($x117 (and $x376 $x147)))
 (let (($x9 (and $x117 $x126)))
 (let (($x72 (= $x9 true)))
 (let (($x204 (= $x72 true)))
 (let (($x34 (= $x204 true)))
 (let (($x93 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x101 (= $x93 true)))
 (let (($x182 (= $x101 true)))
 (let (($x270 (= $x182 true)))
 (let (($x116 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x278 (= $x116 true)))
 (let (($x87 (= $x278 true)))
 (let (($x42 (= $x87 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x28 (= $x60 true)))
 (let (($x156 (= $x28 true)))
 (let (($x350 (= $x156 true)))
 (let (($x54 (= $x294 true)))
 (let (($x135 (= $x54 true)))
 (let (($x260 (= $x135 true)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x190)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x242)))
 (let ((?x100 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x215 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x215)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (and $x269 $x11)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x174 $x104)))
 (let (($x38 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x280 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x283 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x277 (and $x283 $x261)))
 (let (($x63 (not $x277)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x123 $x149)))
 (let (($x124 (and (not $x209) $x63)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x16 $x36)))
 (let (($x10 (not $x220)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x108 $x145)))
 (let (($x293 (and (not $x259) $x10)))
 (let (($x226 (and (and (and (and (and (and $x293 $x124) $x280) $x38) $x5) $x137) $x271)))
 (let (($x288 (and $x226 $x297)))
 (let (($x301 (= $x288 true)))
 (let (($x228 (= $x301 true)))
 (let (($x170 (= $x228 true)))
 (let (($x81 (and $x170 $x260)))
 (let (($x14 (and $x81 $x350)))
 (let (($x146 (and $x14 $x42)))
 (let (($x131 (and $x146 $x270)))
 (let (($x46 (and $x131 $x34)))
 (let (($x367 (and $x46 $x264)))
 (let (($x56 (and $x367 $x302)))
 (let (($x263 (and $x56 $x85)))
 (let (($x338 (and $x263 $x334)))
 (let (($x95 (and $x338 $x48)))
 (let (($x52 (and $x95 $x62)))
 (let (($x127 (and $x52 $x23)))
 (let (($x300 (and $x127 $x252)))
 (let (($x329 (and $x300 $x7)))
 (let ((?x39 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x153 (and (bvuge ?x39 (_ bv1 32)) $x329)))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (=> $x122 (= ?x311 ?x309)))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x343 (_ bv1 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x122 (bvuge ?x335 (_ bv1 32))))
 (= $x122 $x139))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x343 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (= ?x343 (_ bv0 32))))
 (let ((?x335 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (= ?x335 (_ bv0 32))))
 (= $x177 $x353))))))
 ))
 (let (($x327 (and $x276 $x324)))
 (let (($x290 (and $x327 $x92)))
 (let (($x317 (and $x290 $x322)))
 (let (($x105 (and $x317 $x153)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x73 (and $x370 $x105)))
 (let (($x82 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x224 (and $x82 $x73)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x79 (and $x238 $x224)))
 (let (($x385 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x373 (bvadd ?x247 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x373)))
 (let (($x355 (bvugt ?x247 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x373)))
 (let (($x233 (or false (or false (and (and true (or $x211 $x355)) (or $x70 $x385))))))
 (let (($x184 (=> (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32))) $x233)))
 (let (($x298 (=> (and $x294 (bvule ?x247 (bvsub (bvadd ?x247 (_ bv4 32)) (_ bv1 32)))) $x233)))
 (let (($x292 (and $x298 $x79)))
 (let (($x426 (=> $x292 $x425)))
 (not $x426)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 249 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x74 (bvule ?x64 (_ bv3 32))))
 (let (($x384 (= $x74 true)))
 (let (($x143 (= $x384 true)))
 (let ((?x250 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x176 (bvneg ?x250)))
 (let (($x275 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x275 true)))
 (let (($x68 (= $x110 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x352 (= $x212 true)))
 (let (($x102 (= $x352 true)))
 (let (($x197 (= $x102 true)))
 (let (($x83 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x163 (= $x83 true)))
 (let (($x120 (= $x163 true)))
 (let (($x96 (= $x120 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x210 (= $x130 true)))
 (let (($x351 (= $x210 true)))
 (let (($x129 (= $x351 true)))
 (let ((?x304 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x304)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x26)))
 (let ((?x336 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x336)))
 (let ((?x411 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x412 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x411)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x413 (and $x409 $x412)))
 (let (($x410 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x410 $x413)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x402 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x405 (and $x402 $x403)))
 (let (($x404 (not $x405)))
 (let (($x393 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x390 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (and $x390 $x393)))
 (let (($x407 (and (not $x396) $x404)))
 (let (($x398 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x397 $x398)))
 (let (($x395 (not $x394)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x389 (and $x342 $x388)))
 (let (($x392 (and (not $x389) $x395)))
 (let (($x47 (and (and (and (and (and (and $x392 $x407) $x285) $x234) $x13) $x206) $x21)))
 (let (($x78 (and $x47 $x45)))
 (let (($x134 (= $x78 true)))
 (let (($x320 (= $x134 true)))
 (let (($x214 (= $x320 true)))
 (let (($x354 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x354 true)))
 (let (($x86 (= $x107 true)))
 (let (($x113 (= $x86 true)))
 (let (($x286 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x346 (= $x286 true)))
 (let (($x167 (= $x346 true)))
 (let (($x281 (= $x167 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x262 (= (_ bv0 2) ?x165)))
 (let (($x111 (= $x262 true)))
 (let (($x157 (= $x111 true)))
 (let ((?x247 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvadd input.dst.llvm-%x ?x247)))
 (let ((?x326 (bvsub ?x158 ?x247)))
 (let (($x345 (ite (bvsge ?x247 (_ bv0 32)) (bvuge ?x158 ?x326) (bvult ?x158 ?x326))))
 (let (($x325 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x150 (ite $x325 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x32 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x236 (bvmul (_ bv4 64) ?x32)))
 (let ((?x332 ((_ extract 63 32) ?x236)))
 (let (($x248 (= ?x332 ?x150)))
 (let (($x378 (and $x248 $x345)))
 (let (($x221 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x359 (and $x221 $x378)))
 (let (($x103 (= true $x359)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x357 (=> $x294 $x103)))
 (let (($x35 (= $x357 true)))
 (let (($x196 (= $x35 true)))
 (let (($x243 (= $x196 true)))
 (let (($x237 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x333 (= $x237 true)))
 (let (($x195 (= $x333 true)))
 (let (($x128 (= $x195 true)))
 (let (($x340 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x421))))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (=> $x217 (= ?x81 ?x417)))))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x341 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (= $x217 $x216))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x124 (= false false)))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x283 (_ bv0 32))))
 (=> $x261 $x124)))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x341 (_ bv0 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x283 (_ bv0 32))))
 (= $x261 $x308))))))
 ))
 (let (($x55 (and $x363 $x280)))
 (let (($x109 (and $x55 $x223)))
 (let (($x318 (and $x109 $x340)))
 (let (($x319 (= $x318 true)))
 (let (($x330 (= $x319 true)))
 (let (($x213 (= $x330 true)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x421))))
 (let ((?x260 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (=> $x137 (= ?x260 ?x417)))))))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x341 (_ bv1 32))))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (= $x137 $x216))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x124 (= false false)))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x149 (_ bv0 32))))
 (=> $x209 $x124)))))
 ))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x341 (_ bv0 32))))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x149 (_ bv0 32))))
 (= $x209 $x308))))))
 ))
 (let (($x154 (and $x48 $x151)))
 (let (($x119 (and $x154 $x98)))
 (let (($x424 (and $x119 $x423)))
 (let (($x425 (= $x424 true)))
 (let (($x426 (= $x425 true)))
 (let (($x427 (= $x426 true)))
 (let ((?x376 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x379 (bvneg ?x376)))
 (let (($x147 (= ?x379 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x147 true)))
 (let (($x141 (= $x117 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x268 (= $x65 true)))
 (let (($x30 (= $x268 true)))
 (let (($x27 (= $x30 true)))
 (let (($x131 (= $x294 true)))
 (let (($x33 (= $x131 true)))
 (let (($x415 (= $x33 true)))
 (let (($x173 (and $x415 $x27)))
 (let (($x229 (and $x173 $x141)))
 (let (($x239 (and $x229 $x427)))
 (let (($x31 (and $x239 $x213)))
 (let (($x348 (and $x31 $x128)))
 (let (($x97 (and $x348 $x243)))
 (let (($x361 (and $x97 $x157)))
 (let (($x287 (and $x361 $x281)))
 (let (($x257 (and $x287 $x113)))
 (let (($x245 (and $x257 $x214)))
 (let (($x267 (and $x245 $x129)))
 (let (($x8 (and $x267 $x96)))
 (let (($x227 (and $x8 $x197)))
 (let (($x399 (and $x227 $x68)))
 (let ((?x401 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (and (bvuge ?x401 (_ bv1 32)) $x399)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (=> $x217 (= ?x81 ?x260)))))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (= $x217 $x137))))))
 ))
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x149 (_ bv0 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x283 (_ bv0 32))))
 (= $x261 $x209))))))
 ))
 (let (($x208 (and $x63 $x280)))
 (let (($x226 (and $x208 $x271)))
 (let (($x350 (and $x226 $x156)))
 (let (($x58 (and $x350 $x136)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x106 (and $x368 $x58)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x289 (and $x370 $x106)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x313 (and $x282 $x289)))
 (let (($x53 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x158 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x199 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x6 (or false (or false (and (and true (or $x57 $x199)) (or $x168 $x53))))))
 (let (($x159 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) $x6)))
 (let (($x230 (=> (and $x294 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) $x6)))
 (let (($x118 (and $x230 $x313)))
 (let (($x314 (=> $x118 $x143)))
 (not $x314))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x64 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x74 (bvule ?x64 (_ bv3 32))))
 (let (($x384 (= $x74 true)))
 (let (($x143 (= $x384 true)))
 (let ((?x250 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x176 (bvneg ?x250)))
 (let (($x275 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x110 (= $x275 true)))
 (let (($x68 (= $x110 true)))
 (let (($x212 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x352 (= $x212 true)))
 (let (($x102 (= $x352 true)))
 (let (($x197 (= $x102 true)))
 (let (($x83 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x163 (= $x83 true)))
 (let (($x120 (= $x163 true)))
 (let (($x96 (= $x120 true)))
 (let (($x130 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x210 (= $x130 true)))
 (let (($x351 (= $x210 true)))
 (let (($x129 (= $x351 true)))
 (let ((?x304 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x45 (= (_ bv0 32) ?x304)))
 (let ((?x26 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x26)))
 (let ((?x336 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x206 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x336)))
 (let ((?x411 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x412 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x411)))
 (let (($x409 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x413 (and $x409 $x412)))
 (let (($x410 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (and $x410 $x413)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x403 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x402 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x405 (and $x402 $x403)))
 (let (($x404 (not $x405)))
 (let (($x393 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x390 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x396 (and $x390 $x393)))
 (let (($x407 (and (not $x396) $x404)))
 (let (($x398 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x397 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x394 (and $x397 $x398)))
 (let (($x395 (not $x394)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x342 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x389 (and $x342 $x388)))
 (let (($x392 (and (not $x389) $x395)))
 (let (($x47 (and (and (and (and (and (and $x392 $x407) $x285) $x234) $x13) $x206) $x21)))
 (let (($x78 (and $x47 $x45)))
 (let (($x134 (= $x78 true)))
 (let (($x320 (= $x134 true)))
 (let (($x214 (= $x320 true)))
 (let (($x354 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x107 (= $x354 true)))
 (let (($x86 (= $x107 true)))
 (let (($x113 (= $x86 true)))
 (let (($x286 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x346 (= $x286 true)))
 (let (($x167 (= $x346 true)))
 (let (($x281 (= $x167 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x262 (= (_ bv0 2) ?x165)))
 (let (($x111 (= $x262 true)))
 (let (($x157 (= $x111 true)))
 (let ((?x247 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x158 (bvadd input.dst.llvm-%x ?x247)))
 (let ((?x326 (bvsub ?x158 ?x247)))
 (let (($x345 (ite (bvsge ?x247 (_ bv0 32)) (bvuge ?x158 ?x326) (bvult ?x158 ?x326))))
 (let (($x325 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x150 (ite $x325 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x32 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x236 (bvmul (_ bv4 64) ?x32)))
 (let ((?x332 ((_ extract 63 32) ?x236)))
 (let (($x248 (= ?x332 ?x150)))
 (let (($x378 (and $x248 $x345)))
 (let (($x221 (= (bvand ?x158 (_ bv4294967292 32)) ?x158)))
 (let (($x359 (and $x221 $x378)))
 (let (($x103 (= true $x359)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x357 (=> $x294 $x103)))
 (let (($x35 (= $x357 true)))
 (let (($x196 (= $x35 true)))
 (let (($x243 (= $x196 true)))
 (let (($x237 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x333 (= $x237 true)))
 (let (($x195 (= $x333 true)))
 (let (($x128 (= $x195 true)))
 (let (($x340 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x421))))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (=> $x217 (= ?x81 ?x417)))))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x341 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (= $x217 $x216))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x124 (= false false)))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x283 (_ bv0 32))))
 (=> $x261 $x124)))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x341 (_ bv0 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x283 (_ bv0 32))))
 (= $x261 $x308))))))
 ))
 (let (($x55 (and $x363 $x280)))
 (let (($x109 (and $x55 $x223)))
 (let (($x318 (and $x109 $x340)))
 (let (($x319 (= $x318 true)))
 (let (($x330 (= $x319 true)))
 (let (($x213 (= $x330 true)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x421))))
 (let ((?x260 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (=> $x137 (= ?x260 ?x417)))))))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x341 (_ bv1 32))))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (= $x137 $x216))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x124 (= false false)))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x149 (_ bv0 32))))
 (=> $x209 $x124)))))
 ))
 (let (($x48 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x341 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x341 (_ bv0 32))))
 (let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x149 (_ bv0 32))))
 (= $x209 $x308))))))
 ))
 (let (($x154 (and $x48 $x151)))
 (let (($x119 (and $x154 $x98)))
 (let (($x424 (and $x119 $x423)))
 (let (($x425 (= $x424 true)))
 (let (($x426 (= $x425 true)))
 (let (($x427 (= $x426 true)))
 (let ((?x376 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x379 (bvneg ?x376)))
 (let (($x147 (= ?x379 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x147 true)))
 (let (($x141 (= $x117 true)))
 (let (($x65 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x268 (= $x65 true)))
 (let (($x30 (= $x268 true)))
 (let (($x27 (= $x30 true)))
 (let (($x131 (= $x294 true)))
 (let (($x33 (= $x131 true)))
 (let (($x415 (= $x33 true)))
 (let (($x173 (and $x415 $x27)))
 (let (($x229 (and $x173 $x141)))
 (let (($x239 (and $x229 $x427)))
 (let (($x31 (and $x239 $x213)))
 (let (($x348 (and $x31 $x128)))
 (let (($x97 (and $x348 $x243)))
 (let (($x361 (and $x97 $x157)))
 (let (($x287 (and $x361 $x281)))
 (let (($x257 (and $x287 $x113)))
 (let (($x245 (and $x257 $x214)))
 (let (($x267 (and $x245 $x129)))
 (let (($x8 (and $x267 $x96)))
 (let (($x227 (and $x8 $x197)))
 (let (($x399 (and $x227 $x68)))
 (let ((?x401 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x136 (and (bvuge ?x401 (_ bv1 32)) $x399)))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x260 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x81 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (=> $x217 (= ?x81 ?x260)))))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x217 (bvuge ?x283 (_ bv1 32))))
 (= $x217 $x137))))))
 ))
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x149 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x149 (_ bv0 32))))
 (let ((?x283 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x261 (= ?x283 (_ bv0 32))))
 (= $x261 $x209))))))
 ))
 (let (($x208 (and $x63 $x280)))
 (let (($x226 (and $x208 $x271)))
 (let (($x350 (and $x226 $x156)))
 (let (($x58 (and $x350 $x136)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x106 (and $x368 $x58)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x289 (and $x370 $x106)))
 (let (($x282 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x313 (and $x282 $x289)))
 (let (($x53 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x24 (bvadd ?x158 (_ bv3 32))))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x24)))
 (let (($x199 (bvugt ?x158 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x24)))
 (let (($x6 (or false (or false (and (and true (or $x57 $x199)) (or $x168 $x53))))))
 (let (($x159 (=> (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32))) $x6)))
 (let (($x230 (=> (and $x294 (bvule ?x158 (bvsub (bvadd ?x158 (_ bv4 32)) (_ bv1 32)))) $x6)))
 (let (($x118 (and $x230 $x313)))
 (let (($x314 (=> $x118 $x143)))
 (not $x314))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00800002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00800002 x!0)
         (ite (bvule #x00800003 x!0) #x00800003 #x00800002)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x90585e90)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xaa934640)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xecc35f48)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xecc35f4b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x90585e93)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xecc35f48)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x90585e90)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #xaa934643 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xaa934642 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xaa934641 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xaa934640 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #xaa934643 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xaa934642 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xaa934641 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xaa934640 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x59 (bvule ?x270 (_ bv4 32))))
 (let (($x95 (= $x59 true)))
 (let (($x127 (= $x95 true)))
 (let ((?x10 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x269 (bvneg ?x10)))
 (let (($x215 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x215 true)))
 (let (($x104 (= $x11 true)))
 (let (($x188 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x108 (= $x188 true)))
 (let (($x16 (= $x108 true)))
 (let (($x36 (= $x16 true)))
 (let (($x331 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x322 (= $x331 true)))
 (let (($x316 (= $x322 true)))
 (let (($x44 (= $x316 true)))
 (let (($x228 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x171 (= $x228 true)))
 (let (($x114 (= $x171 true)))
 (let (($x317 (= $x114 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x152)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x190)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x321 (and $x52 $x339)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x203 $x321)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x307 (and $x85 $x263)))
 (let (($x90 (not $x307)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x279 $x364)))
 (let (($x205 (and (not $x67) $x90)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x91 $x255)))
 (let (($x25 (not $x251)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x253 $x380)))
 (let (($x259 (and (not $x186) $x25)))
 (let (($x29 (and (and (and (and (and (and $x259 $x205) $x138) $x62) $x5) $x356) $x297)))
 (let (($x88 (and $x29 $x43)))
 (let (($x300 (= $x88 true)))
 (let (($x358 (= $x300 true)))
 (let (($x329 (= $x358 true)))
 (let (($x383 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x377 (= $x383 true)))
 (let (($x249 (= $x377 true)))
 (let (($x183 (= $x249 true)))
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x99 (= (_ bv0 2) ?x142)))
 (let (($x200 (= $x99 true)))
 (let (($x180 (= $x200 true)))
 (let (($x347 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x302 (= $x347 true)))
 (let (($x386 (= $x302 true)))
 (let (($x56 (= $x386 true)))
 (let (($x327 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x122 (= $x327 true)))
 (let (($x139 (= $x122 true)))
 (let (($x305 (= $x139 true)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x273 (bvadd input.dst.llvm-%x ?x158)))
 (let ((?x80 (bvsub ?x273 ?x158)))
 (let (($x164 (ite (bvsge ?x158 (_ bv0 32)) (bvuge ?x273 ?x80) (bvult ?x273 ?x80))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x264 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x189 (bvmul (_ bv4 64) ?x40)))
 (let ((?x295 ((_ extract 63 32) ?x189)))
 (let (($x367 (= ?x295 ?x264)))
 (let (($x371 (and $x367 $x164)))
 (let (($x84 (= (bvand ?x273 (_ bv4294967292 32)) ?x273)))
 (let (($x381 (and $x84 $x371)))
 (let (($x256 (= true $x381)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x328 (=> $x294 $x256)))
 (let (($x115 (= $x328 true)))
 (let (($x276 (= $x115 true)))
 (let (($x193 (= $x276 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (= $x20 true)))
 (let (($x296 (= $x198 true)))
 (let (($x22 (= $x296 true)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x118))))
 (let ((?x423 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (=> $x416 (= ?x423 ?x312)))))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x132 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (= $x416 $x351))))))
 ))
 (let (($x341 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x147 (_ bv0 32))))
 (=> $x117 $x334)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x132 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x147 (_ bv0 32))))
 (= $x117 $x336))))))
 ))
 (let (($x311 (and $x290 $x341)))
 (let (($x278 (and $x311 $x116)))
 (let (($x12 (and $x278 $x323)))
 (let (($x9 (= $x12 true)))
 (let (($x72 (= $x9 true)))
 (let (($x284 (= $x72 true)))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x118))))
 (let ((?x422 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x376 (_ bv1 32))))
 (=> $x246 (= ?x422 ?x312)))))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x132 (_ bv1 32))))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x376 (_ bv1 32))))
 (= $x246 $x351))))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x376 (_ bv0 32))))
 (=> $x379 $x334)))))
 ))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x132 (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x376 (_ bv0 32))))
 (= $x379 $x336))))))
 ))
 (let (($x304 (and $x265 $x47)))
 (let (($x83 (and $x304 $x267)))
 (let (($x353 (and $x83 $x343)))
 (let (($x362 (= $x353 true)))
 (let (($x335 (= $x362 true)))
 (let (($x148 (= $x335 true)))
 (let ((?x237 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x333 (bvneg ?x237)))
 (let (($x128 (= ?x333 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x128 true)))
 (let (($x51 (= $x348 true)))
 (let (($x318 (= $x294 true)))
 (let (($x319 (= $x318 true)))
 (let (($x330 (= $x319 true)))
 (let (($x344 (and $x330 $x51)))
 (let (($x201 (and $x344 $x148)))
 (let (($x15 (and $x201 $x284)))
 (let (($x126 (and $x15 $x22)))
 (let (($x324 (and $x126 $x193)))
 (let (($x178 (and $x324 $x305)))
 (let (($x387 (and $x178 $x56)))
 (let (($x299 (and $x387 $x180)))
 (let (($x191 (and $x299 $x183)))
 (let (($x73 (and $x191 $x329)))
 (let (($x315 (and $x73 $x317)))
 (let (($x39 (and $x315 $x44)))
 (let (($x220 (and $x39 $x36)))
 (let (($x225 (and $x220 $x104)))
 (let ((?x288 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (and (bvuge ?x288 (_ bv1 32)) $x225)))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x423 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (=> $x416 (= ?x423 ?x422)))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x376 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (= $x416 $x246))))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x376 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x147 (_ bv0 32))))
 (= $x117 $x379))))))
 ))
 (let (($x308 (and $x229 $x341)))
 (let (($x418 (and $x308 $x69)))
 (let (($x427 (and $x418 $x426)))
 (let (($x54 (and $x427 $x170)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x135 (and $x222 $x54)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x93 (and $x368 $x135)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x101 (and $x19 $x93)))
 (let (($x298 (bvugt ?x273 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd ?x273 (_ bv3 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x385 (bvugt ?x273 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x382 (or false (or false (and (and true (or $x144 $x385)) (or $x184 $x298))))))
 (let (($x82 (=> (bvule ?x273 (bvsub (bvadd ?x273 (_ bv4 32)) (_ bv1 32))) $x382)))
 (let (($x373 (=> (and $x294 (bvule ?x273 (bvsub (bvadd ?x273 (_ bv4 32)) (_ bv1 32)))) $x382)))
 (let (($x182 (and $x373 $x101)))
 (let (($x224 (=> $x182 $x127)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x270 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x59 (bvule ?x270 (_ bv4 32))))
 (let (($x95 (= $x59 true)))
 (let (($x127 (= $x95 true)))
 (let ((?x10 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x269 (bvneg ?x10)))
 (let (($x215 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x11 (= $x215 true)))
 (let (($x104 (= $x11 true)))
 (let (($x188 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x108 (= $x188 true)))
 (let (($x16 (= $x108 true)))
 (let (($x36 (= $x16 true)))
 (let (($x331 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x322 (= $x331 true)))
 (let (($x316 (= $x322 true)))
 (let (($x44 (= $x316 true)))
 (let (($x228 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x171 (= $x228 true)))
 (let (($x114 (= $x171 true)))
 (let (($x317 (= $x114 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x43 (= (_ bv0 32) ?x152)))
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x190)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x321 (and $x52 $x339)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x203 $x321)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x307 (and $x85 $x263)))
 (let (($x90 (not $x307)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x279 $x364)))
 (let (($x205 (and (not $x67) $x90)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x91 $x255)))
 (let (($x25 (not $x251)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x253 $x380)))
 (let (($x259 (and (not $x186) $x25)))
 (let (($x29 (and (and (and (and (and (and $x259 $x205) $x138) $x62) $x5) $x356) $x297)))
 (let (($x88 (and $x29 $x43)))
 (let (($x300 (= $x88 true)))
 (let (($x358 (= $x300 true)))
 (let (($x329 (= $x358 true)))
 (let (($x383 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x377 (= $x383 true)))
 (let (($x249 (= $x377 true)))
 (let (($x183 (= $x249 true)))
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x99 (= (_ bv0 2) ?x142)))
 (let (($x200 (= $x99 true)))
 (let (($x180 (= $x200 true)))
 (let (($x347 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x302 (= $x347 true)))
 (let (($x386 (= $x302 true)))
 (let (($x56 (= $x386 true)))
 (let (($x327 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x122 (= $x327 true)))
 (let (($x139 (= $x122 true)))
 (let (($x305 (= $x139 true)))
 (let ((?x158 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x273 (bvadd input.dst.llvm-%x ?x158)))
 (let ((?x80 (bvsub ?x273 ?x158)))
 (let (($x164 (ite (bvsge ?x158 (_ bv0 32)) (bvuge ?x273 ?x80) (bvult ?x273 ?x80))))
 (let (($x77 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x264 (ite $x77 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x40 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x189 (bvmul (_ bv4 64) ?x40)))
 (let ((?x295 ((_ extract 63 32) ?x189)))
 (let (($x367 (= ?x295 ?x264)))
 (let (($x371 (and $x367 $x164)))
 (let (($x84 (= (bvand ?x273 (_ bv4294967292 32)) ?x273)))
 (let (($x381 (and $x84 $x371)))
 (let (($x256 (= true $x381)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x328 (=> $x294 $x256)))
 (let (($x115 (= $x328 true)))
 (let (($x276 (= $x115 true)))
 (let (($x193 (= $x276 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x198 (= $x20 true)))
 (let (($x296 (= $x198 true)))
 (let (($x22 (= $x296 true)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x118))))
 (let ((?x423 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (=> $x416 (= ?x423 ?x312)))))))))
 ))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x132 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (= $x416 $x351))))))
 ))
 (let (($x341 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x147 (_ bv0 32))))
 (=> $x117 $x334)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x132 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x147 (_ bv0 32))))
 (= $x117 $x336))))))
 ))
 (let (($x311 (and $x290 $x341)))
 (let (($x278 (and $x311 $x116)))
 (let (($x12 (and $x278 $x323)))
 (let (($x9 (= $x12 true)))
 (let (($x72 (= $x9 true)))
 (let (($x284 (= $x72 true)))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem ?x58))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x58 (_ bv2 32))) ?x118))))
 (let ((?x422 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x376 (_ bv1 32))))
 (=> $x246 (= ?x422 ?x312)))))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x132 (_ bv1 32))))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x376 (_ bv1 32))))
 (= $x246 $x351))))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x334 (= false false)))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x376 (_ bv0 32))))
 (=> $x379 $x334)))))
 ))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x132 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (= ?x132 (_ bv0 32))))
 (let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x376 (_ bv0 32))))
 (= $x379 $x336))))))
 ))
 (let (($x304 (and $x265 $x47)))
 (let (($x83 (and $x304 $x267)))
 (let (($x353 (and $x83 $x343)))
 (let (($x362 (= $x353 true)))
 (let (($x335 (= $x362 true)))
 (let (($x148 (= $x335 true)))
 (let ((?x237 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x333 (bvneg ?x237)))
 (let (($x128 (= ?x333 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x348 (= $x128 true)))
 (let (($x51 (= $x348 true)))
 (let (($x318 (= $x294 true)))
 (let (($x319 (= $x318 true)))
 (let (($x330 (= $x319 true)))
 (let (($x344 (and $x330 $x51)))
 (let (($x201 (and $x344 $x148)))
 (let (($x15 (and $x201 $x284)))
 (let (($x126 (and $x15 $x22)))
 (let (($x324 (and $x126 $x193)))
 (let (($x178 (and $x324 $x305)))
 (let (($x387 (and $x178 $x56)))
 (let (($x299 (and $x387 $x180)))
 (let (($x191 (and $x299 $x183)))
 (let (($x73 (and $x191 $x329)))
 (let (($x315 (and $x73 $x317)))
 (let (($x39 (and $x315 $x44)))
 (let (($x220 (and $x39 $x36)))
 (let (($x225 (and $x220 $x104)))
 (let ((?x288 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (and (bvuge ?x288 (_ bv1 32)) $x225)))
 (let (($x426 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x422 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x423 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (=> $x416 (= ?x423 ?x422)))))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x376 (_ bv1 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x416 (bvuge ?x147 (_ bv1 32))))
 (= $x416 $x246))))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x376 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (= ?x376 (_ bv0 32))))
 (let ((?x147 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x147 (_ bv0 32))))
 (= $x117 $x379))))))
 ))
 (let (($x308 (and $x229 $x341)))
 (let (($x418 (and $x308 $x69)))
 (let (($x427 (and $x418 $x426)))
 (let (($x54 (and $x427 $x170)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x135 (and $x222 $x54)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x93 (and $x368 $x135)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x101 (and $x19 $x93)))
 (let (($x298 (bvugt ?x273 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd ?x273 (_ bv3 32))))
 (let (($x184 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x385 (bvugt ?x273 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x382 (or false (or false (and (and true (or $x144 $x385)) (or $x184 $x298))))))
 (let (($x82 (=> (bvule ?x273 (bvsub (bvadd ?x273 (_ bv4 32)) (_ bv1 32))) $x382)))
 (let (($x373 (=> (and $x294 (bvule ?x273 (bvsub (bvadd ?x273 (_ bv4 32)) (_ bv1 32)))) $x382)))
 (let (($x182 (and $x373 $x101)))
 (let (($x224 (=> $x182 $x127)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0f7fc83c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000c838)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0f7fc83f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000c83b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0f7fc83c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000c838)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000041)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x14546e30)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xaa135014)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb8ce9410)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb8ce9413)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x14546e33)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb8ce9410)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x14546e30)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000041 x!0)
         (ite (bvule #x00000042 x!0) #x00000042 #x00000041)
         #x00000004))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #xaa135017 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xaa135016 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xaa135015 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xaa135014 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #xaa135017 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xaa135016 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xaa135015 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xaa135014 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x337 (bvule ?x292 (_ bv4294967294 32))))
 (let (($x366 (= $x337 true)))
 (let (($x207 (= $x366 true)))
 (let ((?x156 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x14 (bvneg ?x156)))
 (let (($x400 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x401 (= $x400 true)))
 (let (($x89 (= $x401 true)))
 (let (($x87 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x146 (= $x87 true)))
 (let (($x350 (= $x146 true)))
 (let (($x60 (= $x350 true)))
 (let (($x8 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x8 true)))
 (let (($x250 (= $x102 true)))
 (let (($x110 (= $x250 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x130)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x245)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x75 $x45)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x48 $x134)))
 (let (($x375 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x415 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x415 $x65)))
 (let (($x218 (not $x234)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x285 $x71)))
 (let (($x410 (and (not $x33) $x218)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x406 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x404 (and $x406 $x405)))
 (let (($x125 (not $x404)))
 (let (($x394 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x392 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x390 (and $x392 $x394)))
 (let (($x408 (and (not $x390) $x125)))
 (let (($x176 (and (and (and (and (and (and $x408 $x410) $x121) $x375) $x78) $x214) $x119)))
 (let (($x275 (and $x176 $x309)))
 (let (($x197 (= $x275 true)))
 (let (($x227 (= $x197 true)))
 (let (($x212 (= $x227 true)))
 (let (($x402 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x403 (= $x402 true)))
 (let (($x393 (= $x403 true)))
 (let (($x396 (= $x393 true)))
 (let (($x257 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x388 (= $x257 true)))
 (let (($x389 (= $x388 true)))
 (let (($x397 (= $x389 true)))
 (let ((?x217 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x137 (= (_ bv0 2) ?x217)))
 (let (($x242 (= $x137 true)))
 (let (($x391 (= $x242 true)))
 (let ((?x273 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x211 (bvadd input.dst.llvm-%x ?x273)))
 (let ((?x167 (bvsub ?x211 ?x273)))
 (let (($x157 (ite (bvsge ?x273 (_ bv0 32)) (bvuge ?x211 ?x167) (bvult ?x211 ?x167))))
 (let (($x111 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x354 (ite $x111 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x50 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvmul (_ bv4 64) ?x50)))
 (let ((?x262 ((_ extract 63 32) ?x165)))
 (let (($x107 (= ?x262 ?x354)))
 (let (($x346 (and $x107 $x157)))
 (let (($x97 (= (bvand ?x211 (_ bv4294967292 32)) ?x211)))
 (let (($x287 (and $x97 $x346)))
 (let (($x86 (= true $x287)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (=> $x294 $x86)))
 (let (($x277 (= $x258 true)))
 (let (($x63 (= $x277 true)))
 (let (($x124 (= $x63 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x326 (= $x291 true)))
 (let (($x248 (= $x326 true)))
 (let (($x192 (= $x248 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem ?x54))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv2 32))) ?x182))))
 (let ((?x201 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (=> $x289 (= ?x201 ?x79)))))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x140 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (= $x289 $x114))))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x206 (= false false)))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x412 (_ bv0 32))))
 (=> $x13 $x206)))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x140 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x412 (_ bv0 32))))
 (= $x13 $x23))))))
 ))
 (let (($x81 (and $x226 $x47)))
 (let (($x363 (and $x81 $x365)))
 (let (($x150 (and $x363 $x236)))
 (let (($x103 (= $x150 true)))
 (let (($x357 (= $x103 true)))
 (let (($x345 (= $x357 true)))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem ?x54))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv2 32))) ?x182))))
 (let ((?x148 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x51 (_ bv1 32))))
 (=> $x74 (= ?x148 ?x79)))))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x140 (_ bv1 32))))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x51 (_ bv1 32))))
 (= $x74 $x114))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x206 (= false false)))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x51 (_ bv0 32))))
 (=> $x344 $x206)))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x140 (_ bv0 32))))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x51 (_ bv0 32))))
 (= $x344 $x23))))))
 ))
 (let (($x152 (and $x7 $x29)))
 (let (($x331 (and $x152 $x315)))
 (let (($x209 (and $x331 $x149)))
 (let (($x221 (= $x209 true)))
 (let (($x283 (= $x221 true)))
 (let (($x166 (= $x283 true)))
 (let ((?x204 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x34 (bvneg ?x204)))
 (let (($x46 (= ?x34 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x46 true)))
 (let (($x189 (= $x40 true)))
 (let (($x20 (= $x294 true)))
 (let (($x198 (= $x20 true)))
 (let (($x296 (= $x198 true)))
 (let (($x295 (and $x296 $x189)))
 (let (($x325 (and $x295 $x166)))
 (let (($x378 (and $x325 $x345)))
 (let (($x359 (and $x378 $x192)))
 (let (($x280 (and $x359 $x124)))
 (let (($x113 (and $x280 $x391)))
 (let (($x398 (and $x113 $x397)))
 (let (($x395 (and $x398 $x396)))
 (let (($x352 (and $x395 $x212)))
 (let (($x421 (and $x352 $x110)))
 (let (($x28 (and $x421 $x60)))
 (let (($x131 (and $x28 $x89)))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (and (bvuge ?x30 (_ bv1 32)) $x131)))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x148 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x201 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (=> $x289 (= ?x201 ?x148)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x51 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (= $x289 $x74))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x51 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x412 (_ bv0 32))))
 (= $x13 $x344))))))
 ))
 (let (($x304 (and $x336 $x47)))
 (let (($x118 (and $x304 $x106)))
 (let (($x42 (and $x118 $x311)))
 (let (($x154 (and $x42 $x173)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x216 (and $x303 $x154)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x161 (and $x222 $x216)))
 (let (($x369 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x98 (and $x369 $x161)))
 (let (($x230 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd ?x211 (_ bv3 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x53 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x238 (or false (or false (and (and true (or $x231 $x53)) (or $x159 $x230))))))
 (let (($x370 (=> (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32))) $x238)))
 (let (($x24 (=> (and $x294 (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32)))) $x238)))
 (let (($x360 (and $x24 $x98)))
 (let (($x417 (=> $x360 $x207)))
 (not $x417))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x292 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x337 (bvule ?x292 (_ bv4294967294 32))))
 (let (($x366 (= $x337 true)))
 (let (($x207 (= $x366 true)))
 (let ((?x156 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x14 (bvneg ?x156)))
 (let (($x400 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x401 (= $x400 true)))
 (let (($x89 (= $x401 true)))
 (let (($x87 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x146 (= $x87 true)))
 (let (($x350 (= $x146 true)))
 (let (($x60 (= $x350 true)))
 (let (($x8 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x102 (= $x8 true)))
 (let (($x250 (= $x102 true)))
 (let (($x110 (= $x250 true)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x309 (= (_ bv0 32) ?x130)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x119 (= (_ bv0 32) ?x245)))
 (let ((?x320 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x320)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x75 $x45)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x48 $x134)))
 (let (($x375 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x415 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x234 (and $x415 $x65)))
 (let (($x218 (not $x234)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x285 $x71)))
 (let (($x410 (and (not $x33) $x218)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x406 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x404 (and $x406 $x405)))
 (let (($x125 (not $x404)))
 (let (($x394 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x392 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x390 (and $x392 $x394)))
 (let (($x408 (and (not $x390) $x125)))
 (let (($x176 (and (and (and (and (and (and $x408 $x410) $x121) $x375) $x78) $x214) $x119)))
 (let (($x275 (and $x176 $x309)))
 (let (($x197 (= $x275 true)))
 (let (($x227 (= $x197 true)))
 (let (($x212 (= $x227 true)))
 (let (($x402 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x403 (= $x402 true)))
 (let (($x393 (= $x403 true)))
 (let (($x396 (= $x393 true)))
 (let (($x257 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x388 (= $x257 true)))
 (let (($x389 (= $x388 true)))
 (let (($x397 (= $x389 true)))
 (let ((?x217 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x137 (= (_ bv0 2) ?x217)))
 (let (($x242 (= $x137 true)))
 (let (($x391 (= $x242 true)))
 (let ((?x273 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x211 (bvadd input.dst.llvm-%x ?x273)))
 (let ((?x167 (bvsub ?x211 ?x273)))
 (let (($x157 (ite (bvsge ?x273 (_ bv0 32)) (bvuge ?x211 ?x167) (bvult ?x211 ?x167))))
 (let (($x111 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x354 (ite $x111 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x50 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x165 (bvmul (_ bv4 64) ?x50)))
 (let ((?x262 ((_ extract 63 32) ?x165)))
 (let (($x107 (= ?x262 ?x354)))
 (let (($x346 (and $x107 $x157)))
 (let (($x97 (= (bvand ?x211 (_ bv4294967292 32)) ?x211)))
 (let (($x287 (and $x97 $x346)))
 (let (($x86 (= true $x287)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x258 (=> $x294 $x86)))
 (let (($x277 (= $x258 true)))
 (let (($x63 (= $x277 true)))
 (let (($x124 (= $x63 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x326 (= $x291 true)))
 (let (($x248 (= $x326 true)))
 (let (($x192 (= $x248 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem ?x54))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv2 32))) ?x182))))
 (let ((?x201 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (=> $x289 (= ?x201 ?x79)))))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x140 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (= $x289 $x114))))))
 ))
 (let (($x47 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x206 (= false false)))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x412 (_ bv0 32))))
 (=> $x13 $x206)))))
 ))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x140 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x412 (_ bv0 32))))
 (= $x13 $x23))))))
 ))
 (let (($x81 (and $x226 $x47)))
 (let (($x363 (and $x81 $x365)))
 (let (($x150 (and $x363 $x236)))
 (let (($x103 (= $x150 true)))
 (let (($x357 (= $x103 true)))
 (let (($x345 (= $x357 true)))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv1 32))) (select input.dst.llvm-mem ?x54))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x54 (_ bv2 32))) ?x182))))
 (let ((?x148 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x51 (_ bv1 32))))
 (=> $x74 (= ?x148 ?x79)))))))))
 ))
 (let (($x315 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x140 (_ bv1 32))))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x51 (_ bv1 32))))
 (= $x74 $x114))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x206 (= false false)))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x51 (_ bv0 32))))
 (=> $x344 $x206)))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (= ?x140 (_ bv0 32))))
 (let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x51 (_ bv0 32))))
 (= $x344 $x23))))))
 ))
 (let (($x152 (and $x7 $x29)))
 (let (($x331 (and $x152 $x315)))
 (let (($x209 (and $x331 $x149)))
 (let (($x221 (= $x209 true)))
 (let (($x283 (= $x221 true)))
 (let (($x166 (= $x283 true)))
 (let ((?x204 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x34 (bvneg ?x204)))
 (let (($x46 (= ?x34 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x46 true)))
 (let (($x189 (= $x40 true)))
 (let (($x20 (= $x294 true)))
 (let (($x198 (= $x20 true)))
 (let (($x296 (= $x198 true)))
 (let (($x295 (and $x296 $x189)))
 (let (($x325 (and $x295 $x166)))
 (let (($x378 (and $x325 $x345)))
 (let (($x359 (and $x378 $x192)))
 (let (($x280 (and $x359 $x124)))
 (let (($x113 (and $x280 $x391)))
 (let (($x398 (and $x113 $x397)))
 (let (($x395 (and $x398 $x396)))
 (let (($x352 (and $x395 $x212)))
 (let (($x421 (and $x352 $x110)))
 (let (($x28 (and $x421 $x60)))
 (let (($x131 (and $x28 $x89)))
 (let ((?x30 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x173 (and (bvuge ?x30 (_ bv1 32)) $x131)))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x148 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x201 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (=> $x289 (= ?x201 ?x148)))))))
 ))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x51 (_ bv1 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x412 (_ bv1 32))))
 (= $x289 $x74))))))
 ))
 (let (($x336 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x51 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x344 (= ?x51 (_ bv0 32))))
 (let ((?x412 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x13 (= ?x412 (_ bv0 32))))
 (= $x13 $x344))))))
 ))
 (let (($x304 (and $x336 $x47)))
 (let (($x118 (and $x304 $x106)))
 (let (($x42 (and $x118 $x311)))
 (let (($x154 (and $x42 $x173)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x216 (and $x303 $x154)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x161 (and $x222 $x216)))
 (let (($x369 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x98 (and $x369 $x161)))
 (let (($x230 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x168 (bvadd ?x211 (_ bv3 32))))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x168)))
 (let (($x53 (bvugt ?x211 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x168)))
 (let (($x238 (or false (or false (and (and true (or $x231 $x53)) (or $x159 $x230))))))
 (let (($x370 (=> (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32))) $x238)))
 (let (($x24 (=> (and $x294 (bvule ?x211 (bvsub (bvadd ?x211 (_ bv4 32)) (_ bv1 32)))) $x238)))
 (let (($x360 (and $x24 $x98)))
 (let (($x417 (=> $x360 $x207)))
 (not $x417))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 236 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x232 (bvsge ?x15 (_ bv0 32))))
 (let (($x190 (= $x232 true)))
 (let (($x171 (= $x190 true)))
 (let ((?x195 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x332 (bvneg ?x195)))
 (let (($x136 (= ?x332 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x136 true)))
 (let (($x143 (= $x58 true)))
 (let (($x301 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x318 (= $x301 true)))
 (let (($x31 (= $x318 true)))
 (let (($x237 (= $x31 true)))
 (let (($x425 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x426 (= $x425 true)))
 (let (($x239 (= $x426 true)))
 (let (($x100 (= $x239 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x36)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x269)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let ((?x260 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x384 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x260)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x312 (and $x228 $x384)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x322 (and $x314 $x312)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x351 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x351 $x129)))
 (let (($x83 (not $x267)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x265 (and $x52 $x219)))
 (let (($x300 (and (not $x265) $x83)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x330 $x213)))
 (let (($x174 (not $x62)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x138 $x153)))
 (let (($x203 (and (not $x319) $x174)))
 (let (($x11 (and (and (and (and (and (and $x203 $x300) $x358) $x73) $x322) $x44) $x215)))
 (let (($x343 (and $x11 $x220)))
 (let (($x55 (= $x343 true)))
 (let (($x223 (= $x55 true)))
 (let (($x427 (= $x223 true)))
 (let (($x307 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (= $x307 true)))
 (let (($x252 (= $x90 true)))
 (let (($x205 (= $x252 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x25 true)))
 (let (($x251 (= $x259 true)))
 (let (($x279 (= $x251 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x255 (= (_ bv0 2) ?x91)))
 (let (($x85 (= $x255 true)))
 (let (($x263 (= $x85 true)))
 (let ((?x211 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvadd input.dst.llvm-%x ?x211)))
 (let ((?x141 (bvsub ?x57 ?x211)))
 (let (($x308 (ite (bvsge ?x211 (_ bv0 32)) (bvuge ?x57 ?x141) (bvult ?x57 ?x141))))
 (let (($x299 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x249 (ite $x299 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x387 (bvmul (_ bv4 64) ?x142)))
 (let ((?x99 ((_ extract 63 32) ?x387)))
 (let (($x338 (= ?x99 ?x249)))
 (let (($x416 (and $x338 $x308)))
 (let (($x180 (= (bvand ?x57 (_ bv4294967292 32)) ?x57)))
 (let (($x246 (and $x180 $x416)))
 (let (($x169 (= true $x246)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x294 $x169)))
 (let (($x183 (= $x145 true)))
 (let (($x253 (= $x183 true)))
 (let (($x191 (= $x253 true)))
 (let (($x347 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x302 (= $x347 true)))
 (let (($x386 (= $x302 true)))
 (let (($x56 (= $x386 true)))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x417 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv1 32))) (select input.dst.llvm-mem ?x417))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv2 32))) ?x376))))
 (let ((?x325 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (=> $x93 (= ?x325 ?x155)))))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x245 (_ bv1 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (= $x93 $x146))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x356 (= false false)))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x339 (_ bv0 32))))
 (=> $x5 $x356)))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x245 (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x339 (_ bv0 32))))
 (= $x5 $x119))))))
 ))
 (let (($x133 (and $x367 $x29)))
 (let (($x115 (and $x133 $x327)))
 (let (($x193 (and $x115 $x256)))
 (let (($x122 (= $x193 true)))
 (let (($x139 (= $x122 true)))
 (let (($x178 (= $x139 true)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x417 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv1 32))) (select input.dst.llvm-mem ?x417))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv2 32))) ?x376))))
 (let ((?x166 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x189 (_ bv1 32))))
 (=> $x59 (= ?x166 ?x155)))))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x245 (_ bv1 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x189 (_ bv1 32))))
 (= $x59 $x146))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x356 (= false false)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (= ?x189 (_ bv0 32))))
 (=> $x295 $x356)))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x245 (_ bv0 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (= ?x189 (_ bv0 32))))
 (= $x295 $x119))))))
 ))
 (let (($x227 (and $x130 $x197)))
 (let (($x28 (and $x227 $x60)))
 (let (($x422 (and $x28 $x423)))
 (let (($x323 (= $x422 true)))
 (let (($x278 (= $x323 true)))
 (let (($x372 (= $x278 true)))
 (let ((?x35 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x196 (bvneg ?x35)))
 (let (($x243 (= ?x196 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x243 true)))
 (let (($x165 (= $x50 true)))
 (let (($x291 (= $x294 true)))
 (let (($x326 (= $x291 true)))
 (let (($x248 (= $x326 true)))
 (let (($x262 (and $x248 $x165)))
 (let (($x61 (and $x262 $x372)))
 (let (($x305 (and $x61 $x178)))
 (let (($x383 (and $x305 $x56)))
 (let (($x380 (and $x383 $x191)))
 (let (($x364 (and $x380 $x263)))
 (let (($x17 (and $x364 $x279)))
 (let (($x38 (and $x17 $x205)))
 (let (($x424 (and $x38 $x427)))
 (let (($x288 (and $x424 $x100)))
 (let (($x333 (and $x288 $x237)))
 (let (($x66 (and $x333 $x143)))
 (let ((?x177 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (and (bvuge ?x177 (_ bv1 32)) $x66)))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x325 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (=> $x93 (= ?x325 ?x166)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x189 (_ bv1 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (= $x93 $x59))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (= ?x189 (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x339 (_ bv0 32))))
 (= $x5 $x295))))))
 ))
 (let (($x152 (and $x23 $x29)))
 (let (($x182 (and $x152 $x135)))
 (let (($x179 (and $x182 $x81)))
 (let (($x362 (and $x179 $x353)))
 (let (($x413 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x335 (and $x413 $x362)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x9 (and $x303 $x335)))
 (let (($x293 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x72 (and $x293 $x9)))
 (let (($x373 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x57 (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x298 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x282 (or false (or false (and (and true (or $x233 $x298)) (or $x82 $x373))))))
 (let (($x368 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) $x282)))
 (let (($x70 (=> (and $x294 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) $x282)))
 (let (($x284 (and $x70 $x72)))
 (let (($x104 (=> $x284 $x171)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x15 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x232 (bvsge ?x15 (_ bv0 32))))
 (let (($x190 (= $x232 true)))
 (let (($x171 (= $x190 true)))
 (let ((?x195 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x332 (bvneg ?x195)))
 (let (($x136 (= ?x332 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x136 true)))
 (let (($x143 (= $x58 true)))
 (let (($x301 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x318 (= $x301 true)))
 (let (($x31 (= $x318 true)))
 (let (($x237 (= $x31 true)))
 (let (($x425 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x426 (= $x425 true)))
 (let (($x239 (= $x426 true)))
 (let (($x100 (= $x239 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x36)))
 (let ((?x269 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x215 (= (_ bv0 32) ?x269)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x316)))
 (let ((?x260 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x384 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x260)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x312 (and $x228 $x384)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x322 (and $x314 $x312)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x351 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (and $x351 $x129)))
 (let (($x83 (not $x267)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x265 (and $x52 $x219)))
 (let (($x300 (and (not $x265) $x83)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x330 $x213)))
 (let (($x174 (not $x62)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x319 (and $x138 $x153)))
 (let (($x203 (and (not $x319) $x174)))
 (let (($x11 (and (and (and (and (and (and $x203 $x300) $x358) $x73) $x322) $x44) $x215)))
 (let (($x343 (and $x11 $x220)))
 (let (($x55 (= $x343 true)))
 (let (($x223 (= $x55 true)))
 (let (($x427 (= $x223 true)))
 (let (($x307 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x90 (= $x307 true)))
 (let (($x252 (= $x90 true)))
 (let (($x205 (= $x252 true)))
 (let (($x25 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x25 true)))
 (let (($x251 (= $x259 true)))
 (let (($x279 (= $x251 true)))
 (let ((?x91 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x255 (= (_ bv0 2) ?x91)))
 (let (($x85 (= $x255 true)))
 (let (($x263 (= $x85 true)))
 (let ((?x211 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x57 (bvadd input.dst.llvm-%x ?x211)))
 (let ((?x141 (bvsub ?x57 ?x211)))
 (let (($x308 (ite (bvsge ?x211 (_ bv0 32)) (bvuge ?x57 ?x141) (bvult ?x57 ?x141))))
 (let (($x299 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x249 (ite $x299 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x142 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x387 (bvmul (_ bv4 64) ?x142)))
 (let ((?x99 ((_ extract 63 32) ?x387)))
 (let (($x338 (= ?x99 ?x249)))
 (let (($x416 (and $x338 $x308)))
 (let (($x180 (= (bvand ?x57 (_ bv4294967292 32)) ?x57)))
 (let (($x246 (and $x180 $x416)))
 (let (($x169 (= true $x246)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x294 $x169)))
 (let (($x183 (= $x145 true)))
 (let (($x253 (= $x183 true)))
 (let (($x191 (= $x253 true)))
 (let (($x347 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x302 (= $x347 true)))
 (let (($x386 (= $x302 true)))
 (let (($x56 (= $x386 true)))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x417 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv1 32))) (select input.dst.llvm-mem ?x417))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv2 32))) ?x376))))
 (let ((?x325 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (=> $x93 (= ?x325 ?x155)))))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x245 (_ bv1 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (= $x93 $x146))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x356 (= false false)))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x339 (_ bv0 32))))
 (=> $x5 $x356)))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x245 (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x339 (_ bv0 32))))
 (= $x5 $x119))))))
 ))
 (let (($x133 (and $x367 $x29)))
 (let (($x115 (and $x133 $x327)))
 (let (($x193 (and $x115 $x256)))
 (let (($x122 (= $x193 true)))
 (let (($x139 (= $x122 true)))
 (let (($x178 (= $x139 true)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x417 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv1 32))) (select input.dst.llvm-mem ?x417))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x417 (_ bv2 32))) ?x376))))
 (let ((?x166 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x189 (_ bv1 32))))
 (=> $x59 (= ?x166 ?x155)))))))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x146 (bvuge ?x245 (_ bv1 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x189 (_ bv1 32))))
 (= $x59 $x146))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x356 (= false false)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (= ?x189 (_ bv0 32))))
 (=> $x295 $x356)))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x245 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x245 (_ bv0 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (= ?x189 (_ bv0 32))))
 (= $x295 $x119))))))
 ))
 (let (($x227 (and $x130 $x197)))
 (let (($x28 (and $x227 $x60)))
 (let (($x422 (and $x28 $x423)))
 (let (($x323 (= $x422 true)))
 (let (($x278 (= $x323 true)))
 (let (($x372 (= $x278 true)))
 (let ((?x35 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x196 (bvneg ?x35)))
 (let (($x243 (= ?x196 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x243 true)))
 (let (($x165 (= $x50 true)))
 (let (($x291 (= $x294 true)))
 (let (($x326 (= $x291 true)))
 (let (($x248 (= $x326 true)))
 (let (($x262 (and $x248 $x165)))
 (let (($x61 (and $x262 $x372)))
 (let (($x305 (and $x61 $x178)))
 (let (($x383 (and $x305 $x56)))
 (let (($x380 (and $x383 $x191)))
 (let (($x364 (and $x380 $x263)))
 (let (($x17 (and $x364 $x279)))
 (let (($x38 (and $x17 $x205)))
 (let (($x424 (and $x38 $x427)))
 (let (($x288 (and $x424 $x100)))
 (let (($x333 (and $x288 $x237)))
 (let (($x66 (and $x333 $x143)))
 (let ((?x177 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x353 (and (bvuge ?x177 (_ bv1 32)) $x66)))
 (let (($x81 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x325 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (=> $x93 (= ?x325 ?x166)))))))
 ))
 (let (($x135 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x59 (bvuge ?x189 (_ bv1 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x93 (bvuge ?x339 (_ bv1 32))))
 (= $x93 $x59))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x295 (= ?x189 (_ bv0 32))))
 (let ((?x339 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x5 (= ?x339 (_ bv0 32))))
 (= $x5 $x295))))))
 ))
 (let (($x152 (and $x23 $x29)))
 (let (($x182 (and $x152 $x135)))
 (let (($x179 (and $x182 $x81)))
 (let (($x362 (and $x179 $x353)))
 (let (($x413 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x335 (and $x413 $x362)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x9 (and $x303 $x335)))
 (let (($x293 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x72 (and $x293 $x9)))
 (let (($x373 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd ?x57 (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x298 (bvugt ?x57 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x282 (or false (or false (and (and true (or $x233 $x298)) (or $x82 $x373))))))
 (let (($x368 (=> (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32))) $x282)))
 (let (($x70 (=> (and $x294 (bvule ?x57 (bvsub (bvadd ?x57 (_ bv4 32)) (_ bv1 32)))) $x282)))
 (let (($x284 (and $x70 $x72)))
 (let (($x104 (=> $x284 $x171)))
 (not $x104))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 236 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x378 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (bvule ?x378 (_ bv4294967294 32))))
 (let (($x309 (= $x120 true)))
 (let (($x87 (= $x309 true)))
 (let ((?x84 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x80 (bvneg ?x84)))
 (let (($x170 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x170 true)))
 (let (($x127 (= $x54 true)))
 (let (($x27 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x27 true)))
 (let (($x126 (= $x20 true)))
 (let (($x204 (= $x126 true)))
 (let (($x290 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x290 true)))
 (let (($x116 (= $x311 true)))
 (let (($x268 (= $x116 true)))
 (let ((?x57 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x144 (bvadd input.dst.llvm-%x ?x57)))
 (let ((?x154 (bvsub ?x144 ?x57)))
 (let (($x401 (ite (bvsge ?x57 (_ bv0 32)) (bvuge ?x144 ?x154) (bvult ?x144 ?x154))))
 (let (($x400 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x98 (ite $x400 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x79 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x79)))
 (let ((?x14 ((_ extract 63 32) ?x156)))
 (let (($x360 (= ?x14 ?x98)))
 (let (($x173 (and $x360 $x401)))
 (let (($x374 (= (bvand ?x144 (_ bv4294967292 32)) ?x144)))
 (let (($x161 (and $x374 $x173)))
 (let (($x292 (= true $x161)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x294 $x292)))
 (let (($x276 (= $x149 true)))
 (let (($x371 (= $x276 true)))
 (let (($x42 (= $x371 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x352 (= $x8 true)))
 (let (($x102 (= $x352 true)))
 (let (($x250 (= $x102 true)))
 (let (($x317 (= $x294 true)))
 (let (($x315 (= $x317 true)))
 (let (($x331 (= $x315 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x163)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x375 (= (_ bv0 32) ?x241)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x415 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x172 $x415)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x409 (and $x33 $x218)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x419 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x406 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x405 (and $x406 $x407)))
 (let (($x404 (not $x405)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x390 (and $x313 $x125)))
 (let (($x285 (and (not $x390) $x404)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x336 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x336 $x206)))
 (let (($x304 (not $x47)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x394 $x21)))
 (let (($x74 (and (not $x132) $x304)))
 (let (($x45 (and (and (and (and (and (and $x74 $x285) $x419) $x234) $x409) $x274) $x375)))
 (let (($x134 (and $x45 $x48)))
 (let (($x78 (= $x134 true)))
 (let (($x12 (= $x78 true)))
 (let (($x7 (= $x12 true)))
 (let (($x397 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x398 (= $x397 true)))
 (let (($x389 (= $x398 true)))
 (let (($x402 (= $x389 true)))
 (let ((?x388 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x395 (= (_ bv0 2) ?x388)))
 (let (($x392 (= $x395 true)))
 (let (($x403 (= $x392 true)))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x13 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x111))))
 (let ((?x61 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (=> $x117 (= ?x61 ?x118)))))))))
 ))
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x11 (_ bv1 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (= $x117 $x237))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x320 (_ bv0 32))))
 (=> $x96 $x176)))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x11 (_ bv0 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x320 (_ bv0 32))))
 (= $x96 $x36))))))
 ))
 (let (($x280 (and $x286 $x197)))
 (let (($x346 (and $x280 $x63)))
 (let (($x137 (and $x346 $x217)))
 (let (($x391 (= $x137 true)))
 (let (($x242 (= $x391 true)))
 (let (($x113 (= $x242 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x13 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x111))))
 (let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x165 (_ bv1 32))))
 (=> $x77 (= ?x372 ?x118)))))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x11 (_ bv1 32))))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x165 (_ bv1 32))))
 (= $x77 $x237))))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x165 (_ bv0 32))))
 (=> $x262 $x176)))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x11 (_ bv0 32))))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x165 (_ bv0 32))))
 (= $x262 $x36))))))
 ))
 (let (($x424 (and $x343 $x427)))
 (let (($x332 (and $x424 $x195)))
 (let (($x363 (and $x332 $x236)))
 (let (($x254 (= $x363 true)))
 (let (($x32 (= $x254 true)))
 (let (($x150 (= $x32 true)))
 (let ((?x180 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x272 (bvneg ?x180)))
 (let (($x387 (= ?x272 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x387 true)))
 (let (($x299 (= $x99 true)))
 (let (($x302 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x386 (= $x302 true)))
 (let (($x56 (= $x386 true)))
 (let (($x383 (= $x56 true)))
 (let (($x249 (and $x383 $x299)))
 (let (($x199 (and $x249 $x150)))
 (let (($x342 (and $x199 $x113)))
 (let (($x393 (and $x342 $x403)))
 (let (($x396 (and $x393 $x402)))
 (let (($x114 (and $x396 $x7)))
 (let (($x212 (and $x114 $x331)))
 (let (($x110 (and $x212 $x250)))
 (let (($x92 (and $x110 $x42)))
 (let (($x30 (and $x92 $x268)))
 (let (($x34 (and $x30 $x204)))
 (let (($x328 (and $x34 $x127)))
 (let ((?x261 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (and (bvuge ?x261 (_ bv1 32)) $x328)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x61 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (=> $x117 (= ?x61 ?x372)))))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x165 (_ bv1 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (= $x117 $x77))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x165 (_ bv0 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x320 (_ bv0 32))))
 (= $x96 $x262))))))
 ))
 (let (($x227 (and $x119 $x197)))
 (let (($x376 (and $x227 $x420)))
 (let (($x324 (and $x376 $x133)))
 (let (($x221 (and $x324 $x209)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x283 (and $x321 $x221)))
 (let (($x413 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x103 (and $x413 $x283)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x357 (and $x235 $x103)))
 (let (($x24 (bvugt ?x144 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd ?x144 (_ bv3 32))))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x230 (bvugt ?x144 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x19 (or false (or false (and (and true (or $x6 $x230)) (or $x370 $x24))))))
 (let (($x222 (=> (bvule ?x144 (bvsub (bvadd ?x144 (_ bv4 32)) (_ bv1 32))) $x19)))
 (let (($x168 (=> (and $x294 (bvule ?x144 (bvsub (bvadd ?x144 (_ bv4 32)) (_ bv1 32)))) $x19)))
 (let (($x345 (and $x168 $x357)))
 (let (($x337 (=> $x345 $x87)))
 (not $x337))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x378 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x120 (bvule ?x378 (_ bv4294967294 32))))
 (let (($x309 (= $x120 true)))
 (let (($x87 (= $x309 true)))
 (let ((?x84 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x80 (bvneg ?x84)))
 (let (($x170 (= ?x80 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x54 (= $x170 true)))
 (let (($x127 (= $x54 true)))
 (let (($x27 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x20 (= $x27 true)))
 (let (($x126 (= $x20 true)))
 (let (($x204 (= $x126 true)))
 (let (($x290 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x290 true)))
 (let (($x116 (= $x311 true)))
 (let (($x268 (= $x116 true)))
 (let ((?x57 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x144 (bvadd input.dst.llvm-%x ?x57)))
 (let ((?x154 (bvsub ?x144 ?x57)))
 (let (($x401 (ite (bvsge ?x57 (_ bv0 32)) (bvuge ?x144 ?x154) (bvult ?x144 ?x154))))
 (let (($x400 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x98 (ite $x400 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x79 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x156 (bvmul (_ bv4 64) ?x79)))
 (let ((?x14 ((_ extract 63 32) ?x156)))
 (let (($x360 (= ?x14 ?x98)))
 (let (($x173 (and $x360 $x401)))
 (let (($x374 (= (bvand ?x144 (_ bv4294967292 32)) ?x144)))
 (let (($x161 (and $x374 $x173)))
 (let (($x292 (= true $x161)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x149 (=> $x294 $x292)))
 (let (($x276 (= $x149 true)))
 (let (($x371 (= $x276 true)))
 (let (($x42 (= $x371 true)))
 (let (($x8 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x352 (= $x8 true)))
 (let (($x102 (= $x352 true)))
 (let (($x250 (= $x102 true)))
 (let (($x317 (= $x294 true)))
 (let (($x315 (= $x317 true)))
 (let (($x331 (= $x315 true)))
 (let ((?x163 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x163)))
 (let ((?x241 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x375 (= (_ bv0 32) ?x241)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x274 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x415 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x71)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x172 $x415)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x409 (and $x33 $x218)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x419 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x407 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x406 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x405 (and $x406 $x407)))
 (let (($x404 (not $x405)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x390 (and $x313 $x125)))
 (let (($x285 (and (not $x390) $x404)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x336 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x336 $x206)))
 (let (($x304 (not $x47)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x394 $x21)))
 (let (($x74 (and (not $x132) $x304)))
 (let (($x45 (and (and (and (and (and (and $x74 $x285) $x419) $x234) $x409) $x274) $x375)))
 (let (($x134 (and $x45 $x48)))
 (let (($x78 (= $x134 true)))
 (let (($x12 (= $x78 true)))
 (let (($x7 (= $x12 true)))
 (let (($x397 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x398 (= $x397 true)))
 (let (($x389 (= $x398 true)))
 (let (($x402 (= $x389 true)))
 (let ((?x388 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x395 (= (_ bv0 2) ?x388)))
 (let (($x392 (= $x395 true)))
 (let (($x403 (= $x392 true)))
 (let (($x217 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x13 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x111))))
 (let ((?x61 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (=> $x117 (= ?x61 ?x118)))))))))
 ))
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x11 (_ bv1 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (= $x117 $x237))))))
 ))
 (let (($x197 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x320 (_ bv0 32))))
 (=> $x96 $x176)))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x11 (_ bv0 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x320 (_ bv0 32))))
 (= $x96 $x36))))))
 ))
 (let (($x280 (and $x286 $x197)))
 (let (($x346 (and $x280 $x63)))
 (let (($x137 (and $x346 $x217)))
 (let (($x391 (= $x137 true)))
 (let (($x242 (= $x391 true)))
 (let (($x113 (= $x242 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x13 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x111))))
 (let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x165 (_ bv1 32))))
 (=> $x77 (= ?x372 ?x118)))))))))
 ))
 (let (($x195 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x11 (_ bv1 32))))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x165 (_ bv1 32))))
 (= $x77 $x237))))))
 ))
 (let (($x427 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x176 (= false false)))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x165 (_ bv0 32))))
 (=> $x262 $x176)))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x11 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x36 (= ?x11 (_ bv0 32))))
 (let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x165 (_ bv0 32))))
 (= $x262 $x36))))))
 ))
 (let (($x424 (and $x343 $x427)))
 (let (($x332 (and $x424 $x195)))
 (let (($x363 (and $x332 $x236)))
 (let (($x254 (= $x363 true)))
 (let (($x32 (= $x254 true)))
 (let (($x150 (= $x32 true)))
 (let ((?x180 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x272 (bvneg ?x180)))
 (let (($x387 (= ?x272 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x99 (= $x387 true)))
 (let (($x299 (= $x99 true)))
 (let (($x302 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x386 (= $x302 true)))
 (let (($x56 (= $x386 true)))
 (let (($x383 (= $x56 true)))
 (let (($x249 (and $x383 $x299)))
 (let (($x199 (and $x249 $x150)))
 (let (($x342 (and $x199 $x113)))
 (let (($x393 (and $x342 $x403)))
 (let (($x396 (and $x393 $x402)))
 (let (($x114 (and $x396 $x7)))
 (let (($x212 (and $x114 $x331)))
 (let (($x110 (and $x212 $x250)))
 (let (($x92 (and $x110 $x42)))
 (let (($x30 (and $x92 $x268)))
 (let (($x34 (and $x30 $x204)))
 (let (($x328 (and $x34 $x127)))
 (let ((?x261 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (and (bvuge ?x261 (_ bv1 32)) $x328)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x61 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (=> $x117 (= ?x61 ?x372)))))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x165 (_ bv1 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x320 (_ bv1 32))))
 (= $x117 $x77))))))
 ))
 (let (($x119 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x165 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (= ?x165 (_ bv0 32))))
 (let ((?x320 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x96 (= ?x320 (_ bv0 32))))
 (= $x96 $x262))))))
 ))
 (let (($x227 (and $x119 $x197)))
 (let (($x376 (and $x227 $x420)))
 (let (($x324 (and $x376 $x133)))
 (let (($x221 (and $x324 $x209)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x283 (and $x321 $x221)))
 (let (($x413 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x103 (and $x413 $x283)))
 (let (($x235 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x357 (and $x235 $x103)))
 (let (($x24 (bvugt ?x144 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd ?x144 (_ bv3 32))))
 (let (($x370 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x230 (bvugt ?x144 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x19 (or false (or false (and (and true (or $x6 $x230)) (or $x370 $x24))))))
 (let (($x222 (=> (bvule ?x144 (bvsub (bvadd ?x144 (_ bv4 32)) (_ bv1 32))) $x19)))
 (let (($x168 (=> (and $x294 (bvule ?x144 (bvsub (bvadd ?x144 (_ bv4 32)) (_ bv1 32)))) $x19)))
 (let (($x345 (and $x168 $x357)))
 (let (($x337 (=> $x345 $x87)))
 (not $x337))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (bvsge ?x305 (_ bv0 32))))
 (let (($x55 (= $x44 true)))
 (let (($x31 (= $x55 true)))
 (let ((?x97 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x167 (bvneg ?x97)))
 (let (($x207 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x417 (= $x207 true)))
 (let (($x264 (= $x417 true)))
 (let (($x240 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x291 (= $x240 true)))
 (let (($x359 (= $x291 true)))
 (let (($x35 (= $x359 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x226 true)))
 (let (($x365 (= $x81 true)))
 (let (($x64 (= $x365 true)))
 (let ((?x144 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd input.dst.llvm-%x ?x144)))
 (let ((?x9 (bvsub ?x231 ?x144)))
 (let (($x66 (ite (bvsge ?x144 (_ bv0 32)) (bvuge ?x231 ?x9) (bvult ?x231 ?x9))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x15 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x155 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x136 (bvmul (_ bv4 64) ?x155)))
 (let ((?x58 ((_ extract 63 32) ?x136)))
 (let (($x232 (= ?x58 ?x15)))
 (let (($x335 (and $x232 $x66)))
 (let (($x208 (= (bvand ?x231 (_ bv4294967292 32)) ?x231)))
 (let (($x284 (and $x208 $x335)))
 (let (($x190 (= true $x284)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x423 (=> $x294 $x190)))
 (let (($x287 (= $x423 true)))
 (let (($x157 (= $x287 true)))
 (let (($x179 (= $x157 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x426 (= $x239 true)))
 (let (($x100 (= $x426 true)))
 (let (($x288 (= $x100 true)))
 (let (($x350 (= $x294 true)))
 (let (($x60 (= $x350 true)))
 (let (($x28 (= $x60 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x228)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x314 (= (_ bv0 32) ?x73)))
 (let ((?x329 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x129 $x267)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x351 $x188)))
 (let (($x300 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x62 $x213)))
 (let (($x203 (not $x174)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x330 (and $x101 $x52)))
 (let (($x265 (and (not $x330) $x203)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x23 $x356)))
 (let (($x152 (not $x29)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x105 $x297)))
 (let (($x59 (and (not $x140) $x152)))
 (let (($x322 (and (and (and (and (and (and $x59 $x265) $x358) $x300) $x108) $x39) $x314)))
 (let (($x16 (and $x322 $x260)))
 (let (($x316 (= $x16 true)))
 (let (($x107 (= $x316 true)))
 (let (($x130 (= $x107 true)))
 (let (($x307 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x90 (= $x307 true)))
 (let (($x17 (= $x90 true)))
 (let (($x252 (= $x17 true)))
 (let ((?x279 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x153 (= (_ bv0 2) ?x279)))
 (let (($x319 (= $x153 true)))
 (let (($x205 (= $x319 true)))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x338))))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (=> $x412 (= ?x32 ?x182)))))))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x173 (_ bv1 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (= $x412 $x204))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x249 (_ bv0 32))))
 (=> $x269 $x11)))))
 ))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x173 (_ bv0 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x249 (_ bv0 32))))
 (= $x269 $x161))))))
 ))
 (let (($x91 (and $x416 $x343)))
 (let (($x169 (and $x91 $x380)))
 (let (($x263 (and $x169 $x85)))
 (let (($x67 (= $x263 true)))
 (let (($x364 (= $x67 true)))
 (let (($x25 (= $x364 true)))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x338))))
 (let ((?x254 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x387 (_ bv1 32))))
 (=> $x253 (= ?x254 ?x182)))))))))
 ))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x173 (_ bv1 32))))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x387 (_ bv1 32))))
 (= $x253 $x204))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x387 (_ bv0 32))))
 (=> $x99 $x11)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x173 (_ bv0 32))))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x387 (_ bv0 32))))
 (= $x99 $x161))))))
 ))
 (let (($x92 (and $x149 $x42)))
 (let (($x80 (and $x92 $x84)))
 (let (($x115 (and $x80 $x256)))
 (let (($x381 (= $x115 true)))
 (let (($x164 (= $x381 true)))
 (let (($x193 (= $x164 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x397 (bvneg ?x393)))
 (let (($x389 (= ?x397 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x402 (= $x389 true)))
 (let (($x396 (= $x402 true)))
 (let (($x342 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x257 (= $x342 true)))
 (let (($x388 (= $x257 true)))
 (let (($x395 (= $x388 true)))
 (let (($x394 (and $x395 $x396)))
 (let (($x385 (and $x394 $x193)))
 (let (($x259 (and $x385 $x25)))
 (let (($x38 (and $x259 $x205)))
 (let (($x138 (and $x38 $x252)))
 (let (($x146 (and $x138 $x130)))
 (let (($x425 (and $x146 $x28)))
 (let (($x301 (and $x425 $x288)))
 (let (($x271 (and $x301 $x179)))
 (let (($x177 (and $x271 $x64)))
 (let (($x196 (and $x177 $x35)))
 (let (($x258 (and $x196 $x264)))
 (let ((?x69 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (and (bvuge ?x69 (_ bv1 32)) $x258)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x254 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (=> $x412 (= ?x32 ?x254)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x387 (_ bv1 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (= $x412 $x253))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x387 (_ bv0 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x249 (_ bv0 32))))
 (= $x269 $x99))))))
 ))
 (let (($x223 (and $x215 $x343)))
 (let (($x344 (and $x223 $x51)))
 (let (($x286 (and $x344 $x281)))
 (let (($x323 (and $x286 $x422)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x278 (and $x214 $x323)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x122 (and $x321 $x278)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x139 (and $x128 $x122)))
 (let (($x70 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd ?x231 (_ bv3 32))))
 (let (($x368 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x373 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x382 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x369 (or false (or false (and (and true (or $x382 $x373)) (or $x368 $x70))))))
 (let (($x303 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) $x369)))
 (let (($x184 (=> (and $x294 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) $x369)))
 (let (($x178 (and $x184 $x139)))
 (let (($x171 (=> $x178 $x31)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x305 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x44 (bvsge ?x305 (_ bv0 32))))
 (let (($x55 (= $x44 true)))
 (let (($x31 (= $x55 true)))
 (let ((?x97 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x167 (bvneg ?x97)))
 (let (($x207 (= ?x167 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x417 (= $x207 true)))
 (let (($x264 (= $x417 true)))
 (let (($x240 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x291 (= $x240 true)))
 (let (($x359 (= $x291 true)))
 (let (($x35 (= $x359 true)))
 (let (($x226 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x226 true)))
 (let (($x365 (= $x81 true)))
 (let (($x64 (= $x365 true)))
 (let ((?x144 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvadd input.dst.llvm-%x ?x144)))
 (let ((?x9 (bvsub ?x231 ?x144)))
 (let (($x66 (ite (bvsge ?x144 (_ bv0 32)) (bvuge ?x231 ?x9) (bvult ?x231 ?x9))))
 (let (($x143 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x15 (ite $x143 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x155 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x136 (bvmul (_ bv4 64) ?x155)))
 (let ((?x58 ((_ extract 63 32) ?x136)))
 (let (($x232 (= ?x58 ?x15)))
 (let (($x335 (and $x232 $x66)))
 (let (($x208 (= (bvand ?x231 (_ bv4294967292 32)) ?x231)))
 (let (($x284 (and $x208 $x335)))
 (let (($x190 (= true $x284)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x423 (=> $x294 $x190)))
 (let (($x287 (= $x423 true)))
 (let (($x157 (= $x287 true)))
 (let (($x179 (= $x157 true)))
 (let (($x239 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x426 (= $x239 true)))
 (let (($x100 (= $x426 true)))
 (let (($x288 (= $x100 true)))
 (let (($x350 (= $x294 true)))
 (let (($x60 (= $x350 true)))
 (let (($x28 (= $x60 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x228)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x314 (= (_ bv0 32) ?x73)))
 (let ((?x329 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x39 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x267 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x129 $x267)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (and $x351 $x188)))
 (let (($x300 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x62 $x213)))
 (let (($x203 (not $x174)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x330 (and $x101 $x52)))
 (let (($x265 (and (not $x330) $x203)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x23 $x356)))
 (let (($x152 (not $x29)))
 (let (($x297 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x140 (and $x105 $x297)))
 (let (($x59 (and (not $x140) $x152)))
 (let (($x322 (and (and (and (and (and (and $x59 $x265) $x358) $x300) $x108) $x39) $x314)))
 (let (($x16 (and $x322 $x260)))
 (let (($x316 (= $x16 true)))
 (let (($x107 (= $x316 true)))
 (let (($x130 (= $x107 true)))
 (let (($x307 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x90 (= $x307 true)))
 (let (($x17 (= $x90 true)))
 (let (($x252 (= $x17 true)))
 (let ((?x279 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x153 (= (_ bv0 2) ?x279)))
 (let (($x319 (= $x153 true)))
 (let (($x205 (= $x319 true)))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x338))))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (=> $x412 (= ?x32 ?x182)))))))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x173 (_ bv1 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (= $x412 $x204))))))
 ))
 (let (($x343 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x249 (_ bv0 32))))
 (=> $x269 $x11)))))
 ))
 (let (($x416 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x173 (_ bv0 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x249 (_ bv0 32))))
 (= $x269 $x161))))))
 ))
 (let (($x91 (and $x416 $x343)))
 (let (($x169 (and $x91 $x380)))
 (let (($x263 (and $x169 $x85)))
 (let (($x67 (= $x263 true)))
 (let (($x364 (= $x67 true)))
 (let (($x25 (= $x364 true)))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x338))))
 (let ((?x254 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x387 (_ bv1 32))))
 (=> $x253 (= ?x254 ?x182)))))))))
 ))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x204 (bvuge ?x173 (_ bv1 32))))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x387 (_ bv1 32))))
 (= $x253 $x204))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x387 (_ bv0 32))))
 (=> $x99 $x11)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x161 (= ?x173 (_ bv0 32))))
 (let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x387 (_ bv0 32))))
 (= $x99 $x161))))))
 ))
 (let (($x92 (and $x149 $x42)))
 (let (($x80 (and $x92 $x84)))
 (let (($x115 (and $x80 $x256)))
 (let (($x381 (= $x115 true)))
 (let (($x164 (= $x381 true)))
 (let (($x193 (= $x164 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x397 (bvneg ?x393)))
 (let (($x389 (= ?x397 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x402 (= $x389 true)))
 (let (($x396 (= $x402 true)))
 (let (($x342 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x257 (= $x342 true)))
 (let (($x388 (= $x257 true)))
 (let (($x395 (= $x388 true)))
 (let (($x394 (and $x395 $x396)))
 (let (($x385 (and $x394 $x193)))
 (let (($x259 (and $x385 $x25)))
 (let (($x38 (and $x259 $x205)))
 (let (($x138 (and $x38 $x252)))
 (let (($x146 (and $x138 $x130)))
 (let (($x425 (and $x146 $x28)))
 (let (($x301 (and $x425 $x288)))
 (let (($x271 (and $x301 $x179)))
 (let (($x177 (and $x271 $x64)))
 (let (($x196 (and $x177 $x35)))
 (let (($x258 (and $x196 $x264)))
 (let ((?x69 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x422 (and (bvuge ?x69 (_ bv1 32)) $x258)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x254 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (=> $x412 (= ?x32 ?x254)))))))
 ))
 (let (($x51 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x387 (_ bv1 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x249 (_ bv1 32))))
 (= $x412 $x253))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (= ?x387 (_ bv0 32))))
 (let ((?x249 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x269 (= ?x249 (_ bv0 32))))
 (= $x269 $x99))))))
 ))
 (let (($x223 (and $x215 $x343)))
 (let (($x344 (and $x223 $x51)))
 (let (($x286 (and $x344 $x281)))
 (let (($x323 (and $x286 $x422)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x278 (and $x214 $x323)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x122 (and $x321 $x278)))
 (let (($x128 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x139 (and $x128 $x122)))
 (let (($x70 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd ?x231 (_ bv3 32))))
 (let (($x368 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x373 (bvugt ?x231 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x382 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x369 (or false (or false (and (and true (or $x382 $x373)) (or $x368 $x70))))))
 (let (($x303 (=> (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32))) $x369)))
 (let (($x184 (=> (and $x294 (bvule ?x231 (bvsub (bvadd ?x231 (_ bv4 32)) (_ bv1 32)))) $x369)))
 (let (($x178 (and $x184 $x139)))
 (let (($x171 (=> $x178 $x31)))
 (not $x171))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 236 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (bvule ?x242 input.dst.llvm-%n)))
 (let (($x276 (= $x154 true)))
 (let (($x126 (= $x276 true)))
 (let ((?x180 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x195 (bvneg ?x180)))
 (let (($x332 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x341 (= $x332 true)))
 (let (($x225 (= $x341 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x347 (= $x123 true)))
 (let (($x383 (= $x347 true)))
 (let (($x377 (= $x383 true)))
 (let (($x367 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x367 true)))
 (let (($x327 (= $x133 true)))
 (let (($x270 (= $x327 true)))
 (let ((?x231 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvadd input.dst.llvm-%x ?x231)))
 (let ((?x103 (bvsub ?x233 ?x231)))
 (let (($x328 (ite (bvsge ?x231 (_ bv0 32)) (bvuge ?x233 ?x103) (bvult ?x233 ?x103))))
 (let (($x127 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x378 (ite $x127 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x111 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x111)))
 (let ((?x54 ((_ extract 63 32) ?x170)))
 (let (($x120 (= ?x54 ?x378)))
 (let (($x283 (and $x120 $x328)))
 (let (($x255 (= (bvand ?x233 (_ bv4294967292 32)) ?x233)))
 (let (($x345 (and $x255 $x283)))
 (let (($x309 (= true $x345)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (=> $x294 $x309)))
 (let (($x145 (= $x201 true)))
 (let (($x246 (= $x145 true)))
 (let (($x324 (= $x246 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (= $x116 true)))
 (let (($x268 (= $x311 true)))
 (let (($x30 (= $x268 true)))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x12))))
 (let ((?x164 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (=> $x339 (= ?x164 ?x317)))))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x406 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (= $x339 $x75))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x394 (_ bv0 32))))
 (=> $x131 $x173)))))
 ))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x406 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x394 (_ bv0 32))))
 (= $x131 $x407))))))
 ))
 (let (($x302 (and $x156 $x149)))
 (let (($x14 (and $x302 $x400)))
 (let (($x427 (and $x14 $x36)))
 (let (($x424 (= $x427 true)))
 (let (($x237 (= $x424 true)))
 (let (($x333 (= $x237 true)))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x12))))
 (let ((?x381 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x389 (_ bv1 32))))
 (=> $x408 (= ?x381 ?x317)))))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x406 (_ bv1 32))))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x389 (_ bv1 32))))
 (= $x408 $x75))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (=> $x402 $x173)))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x406 (_ bv0 32))))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (= $x402 $x407))))))
 ))
 (let (($x198 (and $x125 $x405)))
 (let (($x71 (and $x198 $x151)))
 (let (($x352 (and $x71 $x331)))
 (let (($x110 (= $x352 true)))
 (let (($x224 (= $x110 true)))
 (let (($x374 (= $x224 true)))
 (let (($x147 (= $x294 true)))
 (let (($x155 (= $x147 true)))
 (let (($x136 (= $x155 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x350 (= (_ bv0 32) ?x146)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x107)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x314 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x314)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (and $x73 $x322)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x384 $x228)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x192 $x351)))
 (let (($x43 (not $x129)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x248 $x83)))
 (let (($x188 (and (not $x300) $x43)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x174 $x203)))
 (let (($x326 (not $x265)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x219 $x62)))
 (let (($x358 (and (not $x213) $x326)))
 (let (($x100 (and (and (and (and (and (and $x358 $x188) $x312) $x39) $x260) $x316) $x130)))
 (let (($x288 (and $x100 $x350)))
 (let (($x301 (= $x288 true)))
 (let (($x244 (= $x301 true)))
 (let (($x318 (= $x244 true)))
 (let (($x152 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x59 (= $x152 true)))
 (let (($x101 (= $x59 true)))
 (let (($x52 (= $x101 true)))
 (let ((?x140 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x93 (= (_ bv0 2) ?x140)))
 (let (($x23 (= $x93 true)))
 (let (($x356 (= $x23 true)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x307 (bvneg ?x38)))
 (let (($x17 (= ?x307 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x17 true)))
 (let (($x138 (= $x252 true)))
 (let (($x259 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x251 (= $x259 true)))
 (let (($x279 (= $x251 true)))
 (let (($x153 (= $x279 true)))
 (let (($x105 (and $x153 $x138)))
 (let (($x29 (and $x105 $x356)))
 (let (($x330 (and $x29 $x52)))
 (let (($x208 (and $x330 $x318)))
 (let (($x58 (and $x208 $x136)))
 (let (($x421 (and $x58 $x374)))
 (let (($x290 (and $x421 $x333)))
 (let (($x27 (and $x290 $x30)))
 (let (($x355 (and $x27 $x324)))
 (let (($x261 (and $x355 $x270)))
 (let (($x200 (and $x261 $x377)))
 (let (($x247 (and $x200 $x225)))
 (let ((?x361 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (and (bvuge ?x361 (_ bv1 32)) $x247)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x381 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x164 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (=> $x339 (= ?x164 ?x381)))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x389 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (= $x339 $x408))))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x394 (_ bv0 32))))
 (= $x131 $x402))))))
 ))
 (let (($x371 (and $x401 $x149)))
 (let (($x295 (and $x371 $x189)))
 (let (($x416 (and $x295 $x334)))
 (let (($x236 (and $x416 $x148)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x363 (and $x299 $x236)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x217 (and $x214 $x363)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x137 (and $x46 $x217)))
 (let (($x168 (bvugt ?x233 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x370 (bvadd ?x233 (_ bv3 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x370)))
 (let (($x24 (bvugt ?x233 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x370)))
 (let (($x293 (or false (or false (and (and true (or $x238 $x24)) (or $x222 $x168))))))
 (let (($x413 (=> (bvule ?x233 (bvsub (bvadd ?x233 (_ bv4 32)) (_ bv1 32))) $x293)))
 (let (($x159 (=> (and $x294 (bvule ?x233 (bvsub (bvadd ?x233 (_ bv4 32)) (_ bv1 32)))) $x293)))
 (let (($x391 (and $x159 $x137)))
 (let (($x87 (=> $x391 $x126)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x242 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x154 (bvule ?x242 input.dst.llvm-%n)))
 (let (($x276 (= $x154 true)))
 (let (($x126 (= $x276 true)))
 (let ((?x180 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x195 (bvneg ?x180)))
 (let (($x332 (= ?x195 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x341 (= $x332 true)))
 (let (($x225 (= $x341 true)))
 (let (($x123 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x347 (= $x123 true)))
 (let (($x383 (= $x347 true)))
 (let (($x377 (= $x383 true)))
 (let (($x367 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x133 (= $x367 true)))
 (let (($x327 (= $x133 true)))
 (let (($x270 (= $x327 true)))
 (let ((?x231 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x233 (bvadd input.dst.llvm-%x ?x231)))
 (let ((?x103 (bvsub ?x233 ?x231)))
 (let (($x328 (ite (bvsge ?x231 (_ bv0 32)) (bvuge ?x233 ?x103) (bvult ?x233 ?x103))))
 (let (($x127 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x378 (ite $x127 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x111 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x170 (bvmul (_ bv4 64) ?x111)))
 (let ((?x54 ((_ extract 63 32) ?x170)))
 (let (($x120 (= ?x54 ?x378)))
 (let (($x283 (and $x120 $x328)))
 (let (($x255 (= (bvand ?x233 (_ bv4294967292 32)) ?x233)))
 (let (($x345 (and $x255 $x283)))
 (let (($x309 (= true $x345)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x201 (=> $x294 $x309)))
 (let (($x145 (= $x201 true)))
 (let (($x246 (= $x145 true)))
 (let (($x324 (= $x246 true)))
 (let (($x116 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x311 (= $x116 true)))
 (let (($x268 (= $x311 true)))
 (let (($x30 (= $x268 true)))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x12))))
 (let ((?x164 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (=> $x339 (= ?x164 ?x317)))))))))
 ))
 (let (($x400 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x406 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (= $x339 $x75))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x394 (_ bv0 32))))
 (=> $x131 $x173)))))
 ))
 (let (($x156 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x406 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x394 (_ bv0 32))))
 (= $x131 $x407))))))
 ))
 (let (($x302 (and $x156 $x149)))
 (let (($x14 (and $x302 $x400)))
 (let (($x427 (and $x14 $x36)))
 (let (($x424 (= $x427 true)))
 (let (($x237 (= $x424 true)))
 (let (($x333 (= $x237 true)))
 (let (($x331 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x12))))
 (let ((?x381 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x389 (_ bv1 32))))
 (=> $x408 (= ?x381 ?x317)))))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x406 (_ bv1 32))))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x389 (_ bv1 32))))
 (= $x408 $x75))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x173 (= false false)))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (=> $x402 $x173)))))
 ))
 (let (($x125 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x406 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x406 (_ bv0 32))))
 (let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (= $x402 $x407))))))
 ))
 (let (($x198 (and $x125 $x405)))
 (let (($x71 (and $x198 $x151)))
 (let (($x352 (and $x71 $x331)))
 (let (($x110 (= $x352 true)))
 (let (($x224 (= $x110 true)))
 (let (($x374 (= $x224 true)))
 (let (($x147 (= $x294 true)))
 (let (($x155 (= $x147 true)))
 (let (($x136 (= $x155 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x350 (= (_ bv0 32) ?x146)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x107)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x314 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x322 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x314)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (and $x73 $x322)))
 (let (($x384 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (and $x384 $x228)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x351 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x192 $x351)))
 (let (($x43 (not $x129)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x300 (and $x248 $x83)))
 (let (($x188 (and (not $x300) $x43)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x174 $x203)))
 (let (($x326 (not $x265)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x219 $x62)))
 (let (($x358 (and (not $x213) $x326)))
 (let (($x100 (and (and (and (and (and (and $x358 $x188) $x312) $x39) $x260) $x316) $x130)))
 (let (($x288 (and $x100 $x350)))
 (let (($x301 (= $x288 true)))
 (let (($x244 (= $x301 true)))
 (let (($x318 (= $x244 true)))
 (let (($x152 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x59 (= $x152 true)))
 (let (($x101 (= $x59 true)))
 (let (($x52 (= $x101 true)))
 (let ((?x140 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x93 (= (_ bv0 2) ?x140)))
 (let (($x23 (= $x93 true)))
 (let (($x356 (= $x23 true)))
 (let ((?x38 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x307 (bvneg ?x38)))
 (let (($x17 (= ?x307 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x17 true)))
 (let (($x138 (= $x252 true)))
 (let (($x259 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x251 (= $x259 true)))
 (let (($x279 (= $x251 true)))
 (let (($x153 (= $x279 true)))
 (let (($x105 (and $x153 $x138)))
 (let (($x29 (and $x105 $x356)))
 (let (($x330 (and $x29 $x52)))
 (let (($x208 (and $x330 $x318)))
 (let (($x58 (and $x208 $x136)))
 (let (($x421 (and $x58 $x374)))
 (let (($x290 (and $x421 $x333)))
 (let (($x27 (and $x290 $x30)))
 (let (($x355 (and $x27 $x324)))
 (let (($x261 (and $x355 $x270)))
 (let (($x200 (and $x261 $x377)))
 (let (($x247 (and $x200 $x225)))
 (let ((?x361 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (and (bvuge ?x361 (_ bv1 32)) $x247)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x381 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x164 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (=> $x339 (= ?x164 ?x381)))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (bvuge ?x389 (_ bv1 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x339 (bvuge ?x394 (_ bv1 32))))
 (= $x339 $x408))))))
 ))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (let ((?x394 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x131 (= ?x394 (_ bv0 32))))
 (= $x131 $x402))))))
 ))
 (let (($x371 (and $x401 $x149)))
 (let (($x295 (and $x371 $x189)))
 (let (($x416 (and $x295 $x334)))
 (let (($x236 (and $x416 $x148)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x363 (and $x299 $x236)))
 (let (($x214 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x217 (and $x214 $x363)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x137 (and $x46 $x217)))
 (let (($x168 (bvugt ?x233 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x370 (bvadd ?x233 (_ bv3 32))))
 (let (($x222 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x370)))
 (let (($x24 (bvugt ?x233 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x370)))
 (let (($x293 (or false (or false (and (and true (or $x238 $x24)) (or $x222 $x168))))))
 (let (($x413 (=> (bvule ?x233 (bvsub (bvadd ?x233 (_ bv4 32)) (_ bv1 32))) $x293)))
 (let (($x159 (=> (and $x294 (bvule ?x233 (bvsub (bvadd ?x233 (_ bv4 32)) (_ bv1 32)))) $x293)))
 (let (($x391 (and $x159 $x137)))
 (let (($x87 (=> $x391 $x126)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x364 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x336 (bvmul (_ bv4294967295 32) ?x364)))
 (let ((?x74 (bvneg ?x336)))
 (let (($x37 (= ?x74 ?x274)))
 (let (($x78 (= $x37 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x84 (bvneg ?x393)))
 (let (($x80 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x80 true)))
 (let (($x366 (= $x206 true)))
 (let (($x418 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x113 (= $x418 true)))
 (let (($x395 (= $x113 true)))
 (let (($x392 (= $x395 true)))
 (let (($x199 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x199 true)))
 (let (($x280 (= $x281 true)))
 (let (($x379 (= $x280 true)))
 (let (($x325 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x325 true)))
 (let (($x360 (= $x98 true)))
 (let (($x286 (= $x360 true)))
 (let ((?x233 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x233)))
 (let ((?x415 (bvsub ?x6 ?x233)))
 (let (($x117 (ite (bvsge ?x233 (_ bv0 32)) (bvuge ?x6 ?x415) (bvult ?x6 ?x415))))
 (let (($x386 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x40 (ite $x386 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvmul (_ bv4 64) ?x22)))
 (let ((?x33 ((_ extract 63 32) ?x5)))
 (let (($x338 (= ?x33 ?x40)))
 (let (($x119 (and $x338 $x117)))
 (let (($x65 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x176 (and $x65 $x119)))
 (let (($x241 (= true $x176)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x275 (=> $x294 $x241)))
 (let (($x121 (= $x275 true)))
 (let (($x245 (= $x121 true)))
 (let (($x197 (= $x245 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x42 true)))
 (let (($x204 (= $x92 true)))
 (let (($x34 (= $x204 true)))
 (let (($x124 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x124 true)))
 (let (($x289 (= $x53 true)))
 (let (($x95 (= $x289 true)))
 (let (($x342 (= $x294 true)))
 (let (($x257 (= $x342 true)))
 (let (($x388 (= $x257 true)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x21)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x47)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x178 $x305)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x122 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (and $x220 $x10)))
 (let (($x11 (not $x215)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x207 $x258)))
 (let (($x223 (and (not $x278) $x11)))
 (let (($x417 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x323 $x417)))
 (let (($x97 (not $x264)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x359 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x422 (and $x359 $x35)))
 (let (($x196 (and (not $x422) $x97)))
 (let (($x420 (and (and (and (and (and (and $x196 $x223) $x253) $x55) $x31) $x132) $x262)))
 (let (($x61 (and $x420 $x96)))
 (let (($x376 (= $x61 true)))
 (let (($x372 (= $x376 true)))
 (let (($x86 (= $x372 true)))
 (let ((?x365 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x177 (= (_ bv0 2) ?x365)))
 (let (($x64 (= $x177 true)))
 (let (($x240 (= $x64 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x87))))
 (let ((?x329 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (=> $x248 (= ?x329 ?x143)))))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x120 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (= $x248 $x327))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x23 (= false false)))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x105 (_ bv0 32))))
 (=> $x297 $x23)))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (= ?x120 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x105 (_ bv0 32))))
 (= $x297 $x357))))))
 ))
 (let (($x169 (and $x380 $x152)))
 (let (($x72 (and $x169 $x232)))
 (let (($x335 (and $x72 $x157)))
 (let (($x284 (= $x335 true)))
 (let (($x66 (= $x284 true)))
 (let (($x190 (= $x66 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x87))))
 (let ((?x28 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x17 (_ bv1 32))))
 (=> $x358 (= ?x28 ?x143)))))))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x120 (_ bv1 32))))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x17 (_ bv1 32))))
 (= $x358 $x327))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x23 (= false false)))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x17 (_ bv0 32))))
 (=> $x252 $x23)))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (= ?x120 (_ bv0 32))))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x17 (_ bv0 32))))
 (= $x252 $x357))))))
 ))
 (let (($x345 (and $x209 $x283)))
 (let (($x123 (and $x345 $x261)))
 (let (($x211 (and $x123 $x353)))
 (let (($x51 (= $x211 true)))
 (let (($x344 (= $x51 true)))
 (let (($x32 (= $x344 true)))
 (let ((?x350 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x288 (bvneg ?x350)))
 (let (($x244 (= ?x288 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x318 (= $x244 true)))
 (let (($x208 (= $x318 true)))
 (let (($x254 (and $x208 $x32)))
 (let (($x179 (and $x254 $x190)))
 (let (($x291 (and $x179 $x240)))
 (let (($x277 (and $x291 $x86)))
 (let (($x346 (and $x277 $x388)))
 (let (($x161 (and $x346 $x95)))
 (let (($x410 (and $x161 $x34)))
 (let (($x77 (and $x410 $x197)))
 (let (($x150 (and $x77 $x286)))
 (let (($x69 (and $x150 $x379)))
 (let (($x403 (and $x69 $x392)))
 (let (($x158 (and $x403 $x366)))
 (let ((?x308 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (and (bvuge ?x308 (_ bv1 32)) $x158)))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x329 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (=> $x248 (= ?x329 ?x28)))))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x17 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (= $x248 $x358))))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x17 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x105 (_ bv0 32))))
 (= $x297 $x252))))))
 ))
 (let (($x59 (and $x93 $x152)))
 (let (($x267 (and $x59 $x300)))
 (let (($x73 (and $x267 $x384)))
 (let (($x256 (and $x73 $x166)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x115 (and $x396 $x256)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x85 (and $x299 $x115)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x243 $x85)))
 (let (($x184 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x368 (bvadd ?x6 (_ bv3 32))))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x368)))
 (let (($x70 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x368)))
 (let (($x235 (or false (or false (and (and true (or $x282 $x70)) (or $x303 $x184))))))
 (let (($x321 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x235)))
 (let (($x82 (=> (and $x294 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x235)))
 (let (($x67 (and $x82 $x263)))
 (let (($x109 (=> $x67 $x78)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x274 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x364 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x336 (bvmul (_ bv4294967295 32) ?x364)))
 (let ((?x74 (bvneg ?x336)))
 (let (($x37 (= ?x74 ?x274)))
 (let (($x78 (= $x37 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x84 (bvneg ?x393)))
 (let (($x80 (= ?x84 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x206 (= $x80 true)))
 (let (($x366 (= $x206 true)))
 (let (($x418 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x113 (= $x418 true)))
 (let (($x395 (= $x113 true)))
 (let (($x392 (= $x395 true)))
 (let (($x199 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x281 (= $x199 true)))
 (let (($x280 (= $x281 true)))
 (let (($x379 (= $x280 true)))
 (let (($x325 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x98 (= $x325 true)))
 (let (($x360 (= $x98 true)))
 (let (($x286 (= $x360 true)))
 (let ((?x233 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x6 (bvadd input.dst.llvm-%x ?x233)))
 (let ((?x415 (bvsub ?x6 ?x233)))
 (let (($x117 (ite (bvsge ?x233 (_ bv0 32)) (bvuge ?x6 ?x415) (bvult ?x6 ?x415))))
 (let (($x386 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x40 (ite $x386 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x22 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x5 (bvmul (_ bv4 64) ?x22)))
 (let ((?x33 ((_ extract 63 32) ?x5)))
 (let (($x338 (= ?x33 ?x40)))
 (let (($x119 (and $x338 $x117)))
 (let (($x65 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x176 (and $x65 $x119)))
 (let (($x241 (= true $x176)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x275 (=> $x294 $x241)))
 (let (($x121 (= $x275 true)))
 (let (($x245 (= $x121 true)))
 (let (($x197 (= $x245 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x42 true)))
 (let (($x204 (= $x92 true)))
 (let (($x34 (= $x204 true)))
 (let (($x124 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x124 true)))
 (let (($x289 (= $x53 true)))
 (let (($x95 (= $x289 true)))
 (let (($x342 (= $x294 true)))
 (let (($x257 (= $x342 true)))
 (let (($x388 (= $x257 true)))
 (let ((?x21 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x96 (= (_ bv0 32) ?x21)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x47)))
 (let ((?x171 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x171)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x178 $x305)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x122 $x44)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (and $x220 $x10)))
 (let (($x11 (not $x215)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x207 $x258)))
 (let (($x223 (and (not $x278) $x11)))
 (let (($x417 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x323 $x417)))
 (let (($x97 (not $x264)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x359 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x422 (and $x359 $x35)))
 (let (($x196 (and (not $x422) $x97)))
 (let (($x420 (and (and (and (and (and (and $x196 $x223) $x253) $x55) $x31) $x132) $x262)))
 (let (($x61 (and $x420 $x96)))
 (let (($x376 (= $x61 true)))
 (let (($x372 (= $x376 true)))
 (let (($x86 (= $x372 true)))
 (let ((?x365 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x177 (= (_ bv0 2) ?x365)))
 (let (($x64 (= $x177 true)))
 (let (($x240 (= $x64 true)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x87))))
 (let ((?x329 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (=> $x248 (= ?x329 ?x143)))))))))
 ))
 (let (($x232 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x120 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (= $x248 $x327))))))
 ))
 (let (($x152 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x23 (= false false)))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x105 (_ bv0 32))))
 (=> $x297 $x23)))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (= ?x120 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x105 (_ bv0 32))))
 (= $x297 $x357))))))
 ))
 (let (($x169 (and $x380 $x152)))
 (let (($x72 (and $x169 $x232)))
 (let (($x335 (and $x72 $x157)))
 (let (($x284 (= $x335 true)))
 (let (($x66 (= $x284 true)))
 (let (($x190 (= $x66 true)))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x242 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x87))))
 (let ((?x28 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x17 (_ bv1 32))))
 (=> $x358 (= ?x28 ?x143)))))))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x120 (_ bv1 32))))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x17 (_ bv1 32))))
 (= $x358 $x327))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x23 (= false false)))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x17 (_ bv0 32))))
 (=> $x252 $x23)))))
 ))
 (let (($x209 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x120 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (= ?x120 (_ bv0 32))))
 (let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x17 (_ bv0 32))))
 (= $x252 $x357))))))
 ))
 (let (($x345 (and $x209 $x283)))
 (let (($x123 (and $x345 $x261)))
 (let (($x211 (and $x123 $x353)))
 (let (($x51 (= $x211 true)))
 (let (($x344 (= $x51 true)))
 (let (($x32 (= $x344 true)))
 (let ((?x350 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x288 (bvneg ?x350)))
 (let (($x244 (= ?x288 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x318 (= $x244 true)))
 (let (($x208 (= $x318 true)))
 (let (($x254 (and $x208 $x32)))
 (let (($x179 (and $x254 $x190)))
 (let (($x291 (and $x179 $x240)))
 (let (($x277 (and $x291 $x86)))
 (let (($x346 (and $x277 $x388)))
 (let (($x161 (and $x346 $x95)))
 (let (($x410 (and $x161 $x34)))
 (let (($x77 (and $x410 $x197)))
 (let (($x150 (and $x77 $x286)))
 (let (($x69 (and $x150 $x379)))
 (let (($x403 (and $x69 $x392)))
 (let (($x158 (and $x403 $x366)))
 (let ((?x308 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (and (bvuge ?x308 (_ bv1 32)) $x158)))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x329 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (=> $x248 (= ?x329 ?x28)))))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x17 (_ bv1 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x105 (_ bv1 32))))
 (= $x248 $x358))))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x17 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x17 (_ bv0 32))))
 (let ((?x105 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x105 (_ bv0 32))))
 (= $x297 $x252))))))
 ))
 (let (($x59 (and $x93 $x152)))
 (let (($x267 (and $x59 $x300)))
 (let (($x73 (and $x267 $x384)))
 (let (($x256 (and $x73 $x166)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x115 (and $x396 $x256)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x85 (and $x299 $x115)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x263 (and $x243 $x85)))
 (let (($x184 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x368 (bvadd ?x6 (_ bv3 32))))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x368)))
 (let (($x70 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x282 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x368)))
 (let (($x235 (or false (or false (and (and true (or $x282 $x70)) (or $x303 $x184))))))
 (let (($x321 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) $x235)))
 (let (($x82 (=> (and $x294 (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32)))) $x235)))
 (let (($x67 (and $x82 $x263)))
 (let (($x109 (=> $x67 $x78)))
 (not $x109))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x382 (bvadd input.dst.llvm-%x ?x6)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x340))))
 (let ((?x306 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x399)))
 (let ((?x170 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x221 (bvmul (_ bv4294967295 32) ?x170)))
 (let ((?x133 (bvneg ?x221)))
 (let (($x310 (= ?x133 ?x306)))
 (let (($x112 (= $x310 true)))
 (let ((?x319 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x205 (bvneg ?x319)))
 (let (($x38 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x38 true)))
 (let (($x213 (= $x62 true)))
 (let ((?x334 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x91 (bvneg ?x334)))
 (let (($x361 (= ?x91 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x361 true)))
 (let (($x25 (= $x118 true)))
 (let ((?x188 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x362 (= (_ bv0 2) ?x188)))
 (let (($x271 (= $x362 true)))
 (let (($x416 (= $x271 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x195 (= $x180 true)))
 (let (($x200 (= $x195 true)))
 (let (($x332 (= $x200 true)))
 (let (($x377 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x148 (= $x377 true)))
 (let (($x236 (= $x148 true)))
 (let (($x341 (= $x236 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x192 (= $x186 true)))
 (let (($x351 (= $x192 true)))
 (let (($x347 (= $x351 true)))
 (let (($x219 (ite (bvsge ?x6 (_ bv0 32)) (bvuge ?x382 (bvsub ?x382 ?x6)) (bvult ?x382 (bvsub ?x382 ?x6)))))
 (let (($x255 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x111 (ite $x255 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x279 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x20 (bvmul (_ bv4 64) ?x279)))
 (let ((?x13 ((_ extract 63 32) ?x20)))
 (let (($x183 (= ?x13 ?x111)))
 (let (($x309 (and $x183 $x219)))
 (let (($x259 (= (bvand ?x382 (_ bv4294967292 32)) ?x382)))
 (let (($x145 (and $x259 $x309)))
 (let (($x201 (= true $x145)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (=> $x294 $x201)))
 (let (($x324 (= $x246 true)))
 (let (($x355 (= $x324 true)))
 (let (($x203 (= $x355 true)))
 (let (($x333 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x333 true)))
 (let (($x311 (= $x290 true)))
 (let (($x116 (= $x311 true)))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x250))))
 (let ((?x298 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (=> $x142 (= ?x298 ?x331)))))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x389 (_ bv1 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (= $x142 $x230))))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x345 (= false false)))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x103 (_ bv0 32))))
 (=> $x209 $x345)))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x103 (_ bv0 32))))
 (= $x209 $x402))))))
 ))
 (let (($x224 (and $x352 $x261)))
 (let (($x156 (and $x224 $x421)))
 (let (($x400 (and $x156 $x36)))
 (let (($x14 (= $x400 true)))
 (let (($x56 (= $x14 true)))
 (let (($x216 (= $x56 true)))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x250))))
 (let ((?x169 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x378 (_ bv1 32))))
 (=> $x87 (= ?x169 ?x331)))))))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x389 (_ bv1 32))))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x378 (_ bv1 32))))
 (= $x87 $x230))))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x345 (= false false)))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x378 (_ bv0 32))))
 (=> $x120 $x345)))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x378 (_ bv0 32))))
 (= $x120 $x402))))))
 ))
 (let (($x189 (and $x394 $x57)))
 (let (($x285 (and $x189 $x58)))
 (let (($x173 (and $x285 $x401)))
 (let (($x149 (= $x173 true)))
 (let (($x371 (= $x149 true)))
 (let (($x339 (= $x371 true)))
 (let (($x388 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x346 (= $x388 true)))
 (let (($x63 (= $x346 true)))
 (let (($x124 (= $x63 true)))
 (let (($x372 (= $x294 true)))
 (let (($x86 (= $x372 true)))
 (let (($x277 (= $x86 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x320 (= (_ bv0 32) ?x31)))
 (let ((?x305 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x305)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x354 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x354)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x104 $x55)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x253 $x165)))
 (let (($x412 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x343 (and $x258 $x278)))
 (let (($x220 (not $x343)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x97 $x196)))
 (let (($x215 (and (not $x207) $x220)))
 (let (($x422 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x35 $x422)))
 (let (($x323 (not $x167)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x240 $x291)))
 (let (($x264 (and (not $x359) $x323)))
 (let (($x420 (and (and (and (and (and (and $x264 $x215) $x223) $x412) $x122) $x139) $x44)))
 (let (($x21 (and $x420 $x320)))
 (let (($x96 (= $x21 true)))
 (let (($x61 (= $x96 true)))
 (let (($x376 (= $x61 true)))
 (let (($x342 (and $x376 $x277)))
 (let (($x53 (and $x342 $x124)))
 (let (($x408 (and $x53 $x339)))
 (let (($x427 (and $x408 $x216)))
 (let (($x268 (and $x427 $x116)))
 (let (($x367 (and $x268 $x203)))
 (let (($x383 (and $x367 $x347)))
 (let (($x225 (and $x383 $x341)))
 (let (($x247 (and $x225 $x332)))
 (let (($x193 (and $x247 $x416)))
 (let (($x153 (and $x193 $x25)))
 (let (($x88 (and $x153 $x213)))
 (let ((?x265 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (and (bvuge ?x265 (_ bv1 32)) $x88)))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x298 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (=> $x142 (= ?x298 ?x169)))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x378 (_ bv1 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (= $x142 $x87))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x378 (_ bv0 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x103 (_ bv0 32))))
 (= $x209 $x120))))))
 ))
 (let (($x123 (and $x283 $x261)))
 (let (($x15 (and $x123 $x249)))
 (let (($x287 (and $x15 $x226)))
 (let (($x43 (and $x287 $x129)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x60 (and $x138 $x43)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x108 (and $x396 $x60)))
 (let (($x272 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x312 (and $x272 $x108)))
 (let (($x159 (bvugt ?x382 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd ?x382 (_ bv3 32))))
 (let (($x413 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x168 (bvugt ?x382 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x128 (or false (or false (and (and true (or $x19 $x168)) (or $x413 $x159))))))
 (let (($x214 (=> (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x370 (=> (and $x294 (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x316 (and $x370 $x312)))
 (let (($x185 (=> $x316 $x112)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x6 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x382 (bvadd input.dst.llvm-%x ?x6)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv1 32))) (select input.dst.llvm-mem ?x382))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x382 (_ bv2 32))) ?x340))))
 (let ((?x306 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x399)))
 (let ((?x170 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x221 (bvmul (_ bv4294967295 32) ?x170)))
 (let ((?x133 (bvneg ?x221)))
 (let (($x310 (= ?x133 ?x306)))
 (let (($x112 (= $x310 true)))
 (let ((?x319 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x205 (bvneg ?x319)))
 (let (($x38 (= ?x205 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (= $x38 true)))
 (let (($x213 (= $x62 true)))
 (let ((?x334 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x91 (bvneg ?x334)))
 (let (($x361 (= ?x91 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x361 true)))
 (let (($x25 (= $x118 true)))
 (let ((?x188 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x362 (= (_ bv0 2) ?x188)))
 (let (($x271 (= $x362 true)))
 (let (($x416 (= $x271 true)))
 (let (($x180 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x195 (= $x180 true)))
 (let (($x200 (= $x195 true)))
 (let (($x332 (= $x200 true)))
 (let (($x377 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x148 (= $x377 true)))
 (let (($x236 (= $x148 true)))
 (let (($x341 (= $x236 true)))
 (let (($x186 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x192 (= $x186 true)))
 (let (($x351 (= $x192 true)))
 (let (($x347 (= $x351 true)))
 (let (($x219 (ite (bvsge ?x6 (_ bv0 32)) (bvuge ?x382 (bvsub ?x382 ?x6)) (bvult ?x382 (bvsub ?x382 ?x6)))))
 (let (($x255 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x111 (ite $x255 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x279 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x20 (bvmul (_ bv4 64) ?x279)))
 (let ((?x13 ((_ extract 63 32) ?x20)))
 (let (($x183 (= ?x13 ?x111)))
 (let (($x309 (and $x183 $x219)))
 (let (($x259 (= (bvand ?x382 (_ bv4294967292 32)) ?x382)))
 (let (($x145 (and $x259 $x309)))
 (let (($x201 (= true $x145)))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x246 (=> $x294 $x201)))
 (let (($x324 (= $x246 true)))
 (let (($x355 (= $x324 true)))
 (let (($x203 (= $x355 true)))
 (let (($x333 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x290 (= $x333 true)))
 (let (($x311 (= $x290 true)))
 (let (($x116 (= $x311 true)))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x250))))
 (let ((?x298 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (=> $x142 (= ?x298 ?x331)))))))))
 ))
 (let (($x421 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x389 (_ bv1 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (= $x142 $x230))))))
 ))
 (let (($x261 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x345 (= false false)))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x103 (_ bv0 32))))
 (=> $x209 $x345)))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x103 (_ bv0 32))))
 (= $x209 $x402))))))
 ))
 (let (($x224 (and $x352 $x261)))
 (let (($x156 (and $x224 $x421)))
 (let (($x400 (and $x156 $x36)))
 (let (($x14 (= $x400 true)))
 (let (($x56 (= $x14 true)))
 (let (($x216 (= $x56 true)))
 (let (($x401 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x250))))
 (let ((?x169 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x378 (_ bv1 32))))
 (=> $x87 (= ?x169 ?x331)))))))))
 ))
 (let (($x58 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x230 (bvuge ?x389 (_ bv1 32))))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x378 (_ bv1 32))))
 (= $x87 $x230))))))
 ))
 (let (($x57 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x345 (= false false)))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x378 (_ bv0 32))))
 (=> $x120 $x345)))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x389 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (= ?x389 (_ bv0 32))))
 (let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x378 (_ bv0 32))))
 (= $x120 $x402))))))
 ))
 (let (($x189 (and $x394 $x57)))
 (let (($x285 (and $x189 $x58)))
 (let (($x173 (and $x285 $x401)))
 (let (($x149 (= $x173 true)))
 (let (($x371 (= $x149 true)))
 (let (($x339 (= $x371 true)))
 (let (($x388 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x346 (= $x388 true)))
 (let (($x63 (= $x346 true)))
 (let (($x124 (= $x63 true)))
 (let (($x372 (= $x294 true)))
 (let (($x86 (= $x372 true)))
 (let (($x277 (= $x86 true)))
 (let ((?x31 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x320 (= (_ bv0 32) ?x31)))
 (let ((?x305 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x305)))
 (let ((?x178 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x354 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x354)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x165 (and $x104 $x55)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x253 $x165)))
 (let (($x412 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x343 (and $x258 $x278)))
 (let (($x220 (not $x343)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x97 $x196)))
 (let (($x215 (and (not $x207) $x220)))
 (let (($x422 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x35 $x422)))
 (let (($x323 (not $x167)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x359 (and $x240 $x291)))
 (let (($x264 (and (not $x359) $x323)))
 (let (($x420 (and (and (and (and (and (and $x264 $x215) $x223) $x412) $x122) $x139) $x44)))
 (let (($x21 (and $x420 $x320)))
 (let (($x96 (= $x21 true)))
 (let (($x61 (= $x96 true)))
 (let (($x376 (= $x61 true)))
 (let (($x342 (and $x376 $x277)))
 (let (($x53 (and $x342 $x124)))
 (let (($x408 (and $x53 $x339)))
 (let (($x427 (and $x408 $x216)))
 (let (($x268 (and $x427 $x116)))
 (let (($x367 (and $x268 $x203)))
 (let (($x383 (and $x367 $x347)))
 (let (($x225 (and $x383 $x341)))
 (let (($x247 (and $x225 $x332)))
 (let (($x193 (and $x247 $x416)))
 (let (($x153 (and $x193 $x25)))
 (let (($x88 (and $x153 $x213)))
 (let ((?x265 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (and (bvuge ?x265 (_ bv1 32)) $x88)))
 (let (($x226 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x169 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x298 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (=> $x142 (= ?x298 ?x169)))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x378 (_ bv1 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x103 (_ bv1 32))))
 (= $x142 $x87))))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x378 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x378 (_ bv0 32))))
 (let ((?x103 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x209 (= ?x103 (_ bv0 32))))
 (= $x209 $x120))))))
 ))
 (let (($x123 (and $x283 $x261)))
 (let (($x15 (and $x123 $x249)))
 (let (($x287 (and $x15 $x226)))
 (let (($x43 (and $x287 $x129)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x60 (and $x138 $x43)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x108 (and $x396 $x60)))
 (let (($x272 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x312 (and $x272 $x108)))
 (let (($x159 (bvugt ?x382 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x222 (bvadd ?x382 (_ bv3 32))))
 (let (($x413 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x222)))
 (let (($x168 (bvugt ?x382 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x222)))
 (let (($x128 (or false (or false (and (and true (or $x19 $x168)) (or $x413 $x159))))))
 (let (($x214 (=> (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32))) $x128)))
 (let (($x370 (=> (and $x294 (bvule ?x382 (bvsub (bvadd ?x382 (_ bv4 32)) (_ bv1 32)))) $x128)))
 (let (($x316 (and $x370 $x312)))
 (let (($x185 (=> $x316 $x112)))
 (not $x185)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x405 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (not $x294)))
 (let (($x163 (or $x164 (bvuge ?x405 (_ bv1 32)))))
 (let (($x125 (= $x163 true)))
 (let (($x75 (= $x125 true)))
 (let ((?x274 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x37 (bvneg ?x274)))
 (let (($x78 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x78 true)))
 (let (($x327 (= $x229 true)))
 (let (($x146 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x350 (= $x146 true)))
 (let (($x288 (= $x350 true)))
 (let (($x74 (= $x288 true)))
 (let (($x85 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x115 (= $x85 true)))
 (let (($x263 (= $x115 true)))
 (let (($x67 (= $x263 true)))
 (let (($x395 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x393 (= $x395 true)))
 (let (($x206 (= $x393 true)))
 (let (($x166 (= $x206 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (= $x158 true)))
 (let (($x80 (= $x84 true)))
 (let (($x392 (= $x80 true)))
 (let (($x199 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x415))))
 (let ((?x342 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (=> $x262 (= ?x342 ?x360)))))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x399 (_ bv1 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (= $x262 $x267))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x258 (_ bv0 32))))
 (=> $x278 $x215)))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (= ?x399 (_ bv0 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x258 (_ bv0 32))))
 (= $x278 $x306))))))
 ))
 (let (($x23 (and $x93 $x223)))
 (let (($x358 (and $x23 $x248)))
 (let (($x280 (and $x358 $x199)))
 (let (($x379 (= $x280 true)))
 (let (($x418 (= $x379 true)))
 (let (($x113 (= $x418 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x415))))
 (let ((?x277 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x196 (_ bv1 32))))
 (=> $x139 (= ?x277 ?x360)))))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x399 (_ bv1 32))))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x196 (_ bv1 32))))
 (= $x139 $x267))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x196 (_ bv0 32))))
 (=> $x207 $x215)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (= ?x399 (_ bv0 32))))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x196 (_ bv0 32))))
 (= $x207 $x306))))))
 ))
 (let (($x90 (and $x112 $x297)))
 (let (($x190 (and $x90 $x28)))
 (let (($x121 (and $x190 $x275)))
 (let (($x241 (= $x121 true)))
 (let (($x245 (= $x241 true)))
 (let (($x325 (= $x245 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x20 (= $x279 true)))
 (let (($x13 (= $x20 true)))
 (let (($x255 (= $x13 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x400 (= (_ bv0 32) ?x36)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x237)))
 (let ((?x421 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x421)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x352 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x408 $x352)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x374 (and $x339 $x224)))
 (let (($x371 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x315 $x250)))
 (let (($x331 (not $x102)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x134 $x114)))
 (let (($x89 (and (not $x12) $x331)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x423 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x423 $x7)))
 (let (($x317 (not $x45)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x58 $x285)))
 (let (($x48 (and (not $x92) $x317)))
 (let (($x290 (and (and (and (and (and (and $x48 $x89) $x173) $x371) $x374) $x156) $x141)))
 (let (($x311 (and $x290 $x400)))
 (let (($x116 (= $x311 true)))
 (let (($x268 (= $x116 true)))
 (let (($x30 (= $x268 true)))
 (let ((?x304 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x57 (= (_ bv0 2) ?x304)))
 (let (($x189 (= $x57 true)))
 (let (($x230 (= $x189 true)))
 (let ((?x131 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x41 (bvneg ?x131)))
 (let (($x389 (= ?x41 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x402 (= $x389 true)))
 (let (($x147 (= $x402 true)))
 (let (($x136 (and $x147 $x230)))
 (let (($x27 (and $x136 $x30)))
 (let (($x348 (and $x27 $x255)))
 (let (($x286 (and $x348 $x325)))
 (let (($x366 (and $x286 $x113)))
 (let (($x403 (and $x366 $x392)))
 (let (($x256 (and $x403 $x166)))
 (let (($x364 (and $x256 $x67)))
 (let (($x336 (and $x364 $x74)))
 (let (($x404 (and $x336 $x327)))
 (let (($x346 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x277 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x342 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (=> $x262 (= ?x342 ?x277)))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x196 (_ bv1 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (= $x262 $x139))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x196 (_ bv0 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x258 (_ bv0 32))))
 (= $x278 $x207))))))
 ))
 (let (($x132 (and $x220 $x223)))
 (let (($x420 (and $x132 $x44)))
 (let (($x63 (and $x420 $x346)))
 (let (($x391 (and $x63 $x404)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x242 (and $x357 $x391)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x387 (and $x138 $x242)))
 (let (($x397 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x295 (and $x397 $x387)))
 (let ((?x382 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvadd input.dst.llvm-%x ?x382)))
 (let (($x82 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd ?x238 (_ bv3 32))))
 (let (($x321 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x184 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x303)))
 (let (($x46 (or false (or false (and (and true (or $x369 $x184)) (or $x321 $x82))))))
 (let (($x299 (=> (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x368 (=> (and $x294 (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x381 (and $x368 $x295)))
 (let (($x407 (=> $x381 $x75)))
 (not $x407))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x405 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x164 (not $x294)))
 (let (($x163 (or $x164 (bvuge ?x405 (_ bv1 32)))))
 (let (($x125 (= $x163 true)))
 (let (($x75 (= $x125 true)))
 (let ((?x274 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x37 (bvneg ?x274)))
 (let (($x78 (= ?x37 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x78 true)))
 (let (($x327 (= $x229 true)))
 (let (($x146 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x350 (= $x146 true)))
 (let (($x288 (= $x350 true)))
 (let (($x74 (= $x288 true)))
 (let (($x85 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x115 (= $x85 true)))
 (let (($x263 (= $x115 true)))
 (let (($x67 (= $x263 true)))
 (let (($x395 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x393 (= $x395 true)))
 (let (($x206 (= $x393 true)))
 (let (($x166 (= $x206 true)))
 (let (($x158 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x84 (= $x158 true)))
 (let (($x80 (= $x84 true)))
 (let (($x392 (= $x80 true)))
 (let (($x199 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x415))))
 (let ((?x342 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (=> $x262 (= ?x342 ?x360)))))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x399 (_ bv1 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (= $x262 $x267))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x258 (_ bv0 32))))
 (=> $x278 $x215)))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (= ?x399 (_ bv0 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x258 (_ bv0 32))))
 (= $x278 $x306))))))
 ))
 (let (($x23 (and $x93 $x223)))
 (let (($x358 (and $x23 $x248)))
 (let (($x280 (and $x358 $x199)))
 (let (($x379 (= $x280 true)))
 (let (($x418 (= $x379 true)))
 (let (($x113 (= $x418 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x33 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x415))))
 (let ((?x277 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x196 (_ bv1 32))))
 (=> $x139 (= ?x277 ?x360)))))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x399 (_ bv1 32))))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x196 (_ bv1 32))))
 (= $x139 $x267))))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x196 (_ bv0 32))))
 (=> $x207 $x215)))))
 ))
 (let (($x112 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x399 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x306 (= ?x399 (_ bv0 32))))
 (let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x196 (_ bv0 32))))
 (= $x207 $x306))))))
 ))
 (let (($x90 (and $x112 $x297)))
 (let (($x190 (and $x90 $x28)))
 (let (($x121 (and $x190 $x275)))
 (let (($x241 (= $x121 true)))
 (let (($x245 (= $x241 true)))
 (let (($x325 (= $x245 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x20 (= $x279 true)))
 (let (($x13 (= $x20 true)))
 (let (($x255 (= $x13 true)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x400 (= (_ bv0 32) ?x36)))
 (let ((?x237 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x141 (= (_ bv0 32) ?x237)))
 (let ((?x421 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x421)))
 (let ((?x79 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x352 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x79)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (and $x408 $x352)))
 (let (($x339 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x374 (and $x339 $x224)))
 (let (($x371 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x315 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x315 $x250)))
 (let (($x331 (not $x102)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (and $x134 $x114)))
 (let (($x89 (and (not $x12) $x331)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x423 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (and $x423 $x7)))
 (let (($x317 (not $x45)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x58 $x285)))
 (let (($x48 (and (not $x92) $x317)))
 (let (($x290 (and (and (and (and (and (and $x48 $x89) $x173) $x371) $x374) $x156) $x141)))
 (let (($x311 (and $x290 $x400)))
 (let (($x116 (= $x311 true)))
 (let (($x268 (= $x116 true)))
 (let (($x30 (= $x268 true)))
 (let ((?x304 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x57 (= (_ bv0 2) ?x304)))
 (let (($x189 (= $x57 true)))
 (let (($x230 (= $x189 true)))
 (let ((?x131 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x41 (bvneg ?x131)))
 (let (($x389 (= ?x41 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x402 (= $x389 true)))
 (let (($x147 (= $x402 true)))
 (let (($x136 (and $x147 $x230)))
 (let (($x27 (and $x136 $x30)))
 (let (($x348 (and $x27 $x255)))
 (let (($x286 (and $x348 $x325)))
 (let (($x366 (and $x286 $x113)))
 (let (($x403 (and $x366 $x392)))
 (let (($x256 (and $x403 $x166)))
 (let (($x364 (and $x256 $x67)))
 (let (($x336 (and $x364 $x74)))
 (let (($x404 (and $x336 $x327)))
 (let (($x346 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x277 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x342 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (=> $x262 (= ?x342 ?x277)))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x139 (bvuge ?x196 (_ bv1 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x262 (bvuge ?x258 (_ bv1 32))))
 (= $x262 $x139))))))
 ))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x196 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x196 (_ bv0 32))))
 (let ((?x258 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x278 (= ?x258 (_ bv0 32))))
 (= $x278 $x207))))))
 ))
 (let (($x132 (and $x220 $x223)))
 (let (($x420 (and $x132 $x44)))
 (let (($x63 (and $x420 $x346)))
 (let (($x391 (and $x63 $x404)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x242 (and $x357 $x391)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x387 (and $x138 $x242)))
 (let (($x397 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x295 (and $x397 $x387)))
 (let ((?x382 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x238 (bvadd input.dst.llvm-%x ?x382)))
 (let (($x82 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x303 (bvadd ?x238 (_ bv3 32))))
 (let (($x321 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x303)))
 (let (($x184 (bvugt ?x238 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x369 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x303)))
 (let (($x46 (or false (or false (and (and true (or $x369 $x184)) (or $x321 $x82))))))
 (let (($x299 (=> (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32))) $x46)))
 (let (($x368 (=> (and $x294 (bvule ?x238 (bvsub (bvadd ?x238 (_ bv4 32)) (_ bv1 32)))) $x46)))
 (let (($x381 (and $x368 $x295)))
 (let (($x407 (=> $x381 $x75)))
 (not $x407))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 214 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (not $x294)))
 (let (($x165 (= $x55 false)))
 (let (($x47 (= $x165 true)))
 (let ((?x157 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x174 (bvneg ?x157)))
 (let (($x265 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x265 true)))
 (let (($x240 (= $x326 true)))
 (let (($x69 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x287 (= $x69 true)))
 (let (($x232 (= $x287 true)))
 (let (($x72 (= $x232 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x40 (= $x42 true)))
 (let (($x419 (= $x40 true)))
 (let (($x61 (= $x419 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x386 (= $x34 true)))
 (let (($x373 (= $x386 true)))
 (let (($x161 (= $x373 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x130))))
 (let ((?x290 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (=> $x216 (= ?x290 ?x68)))))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x362 (_ bv1 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (= $x216 $x142))))))
 ))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x234 (_ bv0 32))))
 (=> $x423 $x317)))))
 ))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x362 (_ bv0 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x234 (_ bv0 32))))
 (= $x423 $x271))))))
 ))
 (let (($x289 (and $x17 $x114)))
 (let (($x204 (and $x289 $x95)))
 (let (($x335 (and $x204 $x320)))
 (let (($x284 (= $x335 true)))
 (let (($x66 (= $x284 true)))
 (let (($x22 (= $x66 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x130))))
 (let ((?x141 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x58 (_ bv1 32))))
 (=> $x371 (= ?x141 ?x68)))))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x362 (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x58 (_ bv1 32))))
 (= $x371 $x142))))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x58 (_ bv0 32))))
 (=> $x285 $x317)))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x362 (_ bv0 32))))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x58 (_ bv0 32))))
 (= $x285 $x271))))))
 ))
 (let (($x332 (and $x363 $x180)))
 (let (($x361 (and $x332 $x143)))
 (let (($x137 (and $x361 $x26)))
 (let (($x29 (= $x137 true)))
 (let (($x171 (= $x29 true)))
 (let (($x50 (= $x171 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x366 (= (_ bv0 32) ?x113)))
 (let ((?x379 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x418 (= (_ bv0 32) ?x379)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x280 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x59 $x358)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x23 $x150)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x197 $x77)))
 (let (($x121 (not $x275)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x415 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x360 (and $x415 $x119)))
 (let (($x245 (and (not $x360) $x121)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x324 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x324 $x227)))
 (let (($x172 (not $x117)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x33 $x176)))
 (let (($x338 (and (not $x98) $x172)))
 (let (($x395 (and (and (and (and (and (and $x338 $x245) $x286) $x93) $x281) $x280) $x418)))
 (let (($x393 (and $x395 $x366)))
 (let (($x206 (= $x393 true)))
 (let (($x166 (= $x206 true)))
 (let (($x256 (= $x166 true)))
 (let (($x329 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x28 (= $x329 true)))
 (let (($x190 (= $x28 true)))
 (let (($x52 (= $x190 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x112)))
 (let (($x297 (= $x181 true)))
 (let (($x90 (= $x297 true)))
 (let ((?x255 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x348 (bvneg ?x255)))
 (let (($x217 (= ?x348 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x217 true)))
 (let (($x399 (= $x210 true)))
 (let (($x27 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x27 true)))
 (let (($x251 (= $x259 true)))
 (let (($x279 (= $x251 true)))
 (let (($x306 (and $x279 $x399)))
 (let (($x267 (and $x306 $x90)))
 (let (($x65 (and $x267 $x52)))
 (let (($x85 (and $x65 $x256)))
 (let (($x412 (and $x85 $x50)))
 (let (($x5 (and $x412 $x22)))
 (let (($x179 (and $x5 $x161)))
 (let (($x83 (and $x179 $x61)))
 (let (($x226 (and $x83 $x72)))
 (let (($x35 (and $x226 $x240)))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x290 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (=> $x216 (= ?x290 ?x141)))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x58 (_ bv1 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (= $x216 $x371))))))
 ))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x58 (_ bv0 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x234 (_ bv0 32))))
 (= $x423 $x285))))))
 ))
 (let (($x12 (and $x45 $x114)))
 (let (($x79 (and $x12 $x408)))
 (let (($x116 (and $x79 $x311)))
 (let (($x422 (and $x116 $x35)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x167 (and $x10 $x422)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x323 (and $x357 $x167)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x104 (and $x307 $x323)))
 (let ((?x238 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvadd input.dst.llvm-%x ?x238)))
 (let (($x370 (bvugt ?x282 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x413 (bvadd ?x282 (_ bv3 32))))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x413)))
 (let (($x159 (bvugt ?x282 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x413)))
 (let (($x243 (or false (or false (and (and true (or $x293 $x159)) (or $x214 $x370))))))
 (let (($x396 (=> (bvule ?x282 (bvsub (bvadd ?x282 (_ bv4 32)) (_ bv1 32))) $x243)))
 (let (($x222 (=> (and $x294 (bvule ?x282 (bvsub (bvadd ?x282 (_ bv4 32)) (_ bv1 32)))) $x243)))
 (let (($x354 (and $x222 $x104)))
 (let (($x178 (=> $x354 $x47)))
 (not $x178))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x55 (not $x294)))
 (let (($x165 (= $x55 false)))
 (let (($x47 (= $x165 true)))
 (let ((?x157 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x174 (bvneg ?x157)))
 (let (($x265 (= ?x174 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x326 (= $x265 true)))
 (let (($x240 (= $x326 true)))
 (let (($x69 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x287 (= $x69 true)))
 (let (($x232 (= $x287 true)))
 (let (($x72 (= $x232 true)))
 (let (($x42 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x40 (= $x42 true)))
 (let (($x419 (= $x40 true)))
 (let (($x61 (= $x419 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x386 (= $x34 true)))
 (let (($x373 (= $x386 true)))
 (let (($x161 (= $x373 true)))
 (let (($x320 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x130))))
 (let ((?x290 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (=> $x216 (= ?x290 ?x68)))))))))
 ))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x362 (_ bv1 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (= $x216 $x142))))))
 ))
 (let (($x114 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x234 (_ bv0 32))))
 (=> $x423 $x317)))))
 ))
 (let (($x17 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x362 (_ bv0 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x234 (_ bv0 32))))
 (= $x423 $x271))))))
 ))
 (let (($x289 (and $x17 $x114)))
 (let (($x204 (and $x289 $x95)))
 (let (($x335 (and $x204 $x320)))
 (let (($x284 (= $x335 true)))
 (let (($x66 (= $x284 true)))
 (let (($x22 (= $x66 true)))
 (let (($x26 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x60 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv1 32))) (select input.dst.llvm-mem ?x60))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x60 (_ bv2 32))) ?x130))))
 (let ((?x141 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x58 (_ bv1 32))))
 (=> $x371 (= ?x141 ?x68)))))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x142 (bvuge ?x362 (_ bv1 32))))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x58 (_ bv1 32))))
 (= $x371 $x142))))))
 ))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x317 (= false false)))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x58 (_ bv0 32))))
 (=> $x285 $x317)))))
 ))
 (let (($x363 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x362 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x271 (= ?x362 (_ bv0 32))))
 (let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x58 (_ bv0 32))))
 (= $x285 $x271))))))
 ))
 (let (($x332 (and $x363 $x180)))
 (let (($x361 (and $x332 $x143)))
 (let (($x137 (and $x361 $x26)))
 (let (($x29 (= $x137 true)))
 (let (($x171 (= $x29 true)))
 (let (($x50 (= $x171 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x366 (= (_ bv0 32) ?x113)))
 (let ((?x379 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x418 (= (_ bv0 32) ?x379)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x280 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x358 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x150 (and $x59 $x358)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x23 $x150)))
 (let (($x93 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x197 $x77)))
 (let (($x121 (not $x275)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x415 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x360 (and $x415 $x119)))
 (let (($x245 (and (not $x360) $x121)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x324 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x324 $x227)))
 (let (($x172 (not $x117)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x33 $x176)))
 (let (($x338 (and (not $x98) $x172)))
 (let (($x395 (and (and (and (and (and (and $x338 $x245) $x286) $x93) $x281) $x280) $x418)))
 (let (($x393 (and $x395 $x366)))
 (let (($x206 (= $x393 true)))
 (let (($x166 (= $x206 true)))
 (let (($x256 (= $x166 true)))
 (let (($x329 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x28 (= $x329 true)))
 (let (($x190 (= $x28 true)))
 (let (($x52 (= $x190 true)))
 (let ((?x112 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x181 (= (_ bv0 2) ?x112)))
 (let (($x297 (= $x181 true)))
 (let (($x90 (= $x297 true)))
 (let ((?x255 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x348 (bvneg ?x255)))
 (let (($x217 (= ?x348 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x210 (= $x217 true)))
 (let (($x399 (= $x210 true)))
 (let (($x27 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x259 (= $x27 true)))
 (let (($x251 (= $x259 true)))
 (let (($x279 (= $x251 true)))
 (let (($x306 (and $x279 $x399)))
 (let (($x267 (and $x306 $x90)))
 (let (($x65 (and $x267 $x52)))
 (let (($x85 (and $x65 $x256)))
 (let (($x412 (and $x85 $x50)))
 (let (($x5 (and $x412 $x22)))
 (let (($x179 (and $x5 $x161)))
 (let (($x83 (and $x179 $x61)))
 (let (($x226 (and $x83 $x72)))
 (let (($x35 (and $x226 $x240)))
 (let (($x311 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x141 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x290 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (=> $x216 (= ?x290 ?x141)))))))
 ))
 (let (($x408 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x58 (_ bv1 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x234 (_ bv1 32))))
 (= $x216 $x371))))))
 ))
 (let (($x45 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x58 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x285 (= ?x58 (_ bv0 32))))
 (let ((?x234 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x423 (= ?x234 (_ bv0 32))))
 (= $x423 $x285))))))
 ))
 (let (($x12 (and $x45 $x114)))
 (let (($x79 (and $x12 $x408)))
 (let (($x116 (and $x79 $x311)))
 (let (($x422 (and $x116 $x35)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x167 (and $x10 $x422)))
 (let (($x357 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x323 (and $x357 $x167)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x104 (and $x307 $x323)))
 (let ((?x238 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x282 (bvadd input.dst.llvm-%x ?x238)))
 (let (($x370 (bvugt ?x282 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x413 (bvadd ?x282 (_ bv3 32))))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x413)))
 (let (($x159 (bvugt ?x282 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x413)))
 (let (($x243 (or false (or false (and (and true (or $x293 $x159)) (or $x214 $x370))))))
 (let (($x396 (=> (bvule ?x282 (bvsub (bvadd ?x282 (_ bv4 32)) (_ bv1 32))) $x243)))
 (let (($x222 (=> (and $x294 (bvule ?x282 (bvsub (bvadd ?x282 (_ bv4 32)) (_ bv1 32)))) $x243)))
 (let (($x354 (and $x222 $x104)))
 (let (($x178 (=> $x354 $x47)))
 (not $x178))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x3fec1c7a)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x3fec1c7a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd47081f8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10b56008)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x3fec1c7a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10b5600b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd47081fb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10b56008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd47081f8)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x3fec1c7a x!0)
         (ite (bvule #x3fec1c7b x!0) #x3fec1c7b #x3fec1c7a)
         #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!10 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!10 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000710)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x4d85d8cb)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x4d85d8cb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x4d85d8cb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000713)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000710)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x4d85d8cb x!0)
         (ite (bvule #x4d85d8cc x!0) #x4d85d8cc #x4d85d8cb)
         #x00000000))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!10 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!10 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x353 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x409 (or $x294 (= ?x353 (_ bv0 32)))))
 (let (($x266 (= $x409 true)))
 (let (($x185 (= $x266 true)))
 (let ((?x331 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x89 (bvneg ?x331)))
 (let (($x14 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x401 (= $x14 true)))
 (let (($x56 (= $x401 true)))
 (let (($x398 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x394 (= $x398 true)))
 (let (($x304 (= $x394 true)))
 (let (($x57 (= $x304 true)))
 (let (($x346 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x124 (= $x346 true)))
 (let (($x53 (= $x124 true)))
 (let (($x131 (= $x53 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x122 true)))
 (let (($x63 (= $x144 true)))
 (let (($x257 (= $x63 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x91 true)))
 (let (($x62 (= $x25 true)))
 (let (($x205 (= $x62 true)))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x402))))
 (let ((?x23 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (=> $x241 (= ?x23 ?x383)))))))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (= $x241 $x183))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x329 (= false false)))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x181 (_ bv0 32))))
 (=> $x297 $x329)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x75 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x181 (_ bv0 32))))
 (= $x297 $x407))))))
 ))
 (let (($x345 (and $x283 $x52)))
 (let (($x352 (and $x345 $x252)))
 (let (($x319 (and $x352 $x213)))
 (let (($x129 (= $x319 true)))
 (let (($x43 (= $x129 true)))
 (let (($x106 (= $x43 true)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x402))))
 (let ((?x80 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x306 (_ bv1 32))))
 (=> $x360 (= ?x80 ?x383)))))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x306 (_ bv1 32))))
 (= $x360 $x183))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x329 (= false false)))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x306 (_ bv0 32))))
 (=> $x310 $x329)))))
 ))
 (let (($x313 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x75 (_ bv0 32))))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x306 (_ bv0 32))))
 (= $x310 $x407))))))
 ))
 (let (($x343 (and $x313 $x11)))
 (let (($x249 (and $x343 $x330)))
 (let (($x315 (and $x249 $x292)))
 (let (($x250 (= $x315 true)))
 (let (($x102 (= $x250 true)))
 (let (($x188 (= $x102 true)))
 (let (($x284 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x66 (= $x284 true)))
 (let (($x22 (= $x66 true)))
 (let (($x5 (= $x22 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x137)))
 (let ((?x411 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x411)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x312)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x316 $x108)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x221 $x130)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x417 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x361 (and $x87 $x143)))
 (let (($x146 (not $x361)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x180 $x332)))
 (let (($x60 (and (not $x142) $x146)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (and $x225 $x362)))
 (let (($x247 (not $x271)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x85 $x341)))
 (let (($x200 (and (not $x236) $x247)))
 (let (($x289 (and (and (and (and (and (and $x200 $x60) $x417) $x170) $x291) $x133) $x26)))
 (let (($x105 (and $x289 $x29)))
 (let (($x95 (= $x105 true)))
 (let (($x204 (= $x95 true)))
 (let (($x152 (= $x204 true)))
 (let ((?x366 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x393 (= (_ bv0 2) ?x366)))
 (let (($x206 (= $x393 true)))
 (let (($x166 (= $x206 true)))
 (let ((?x199 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x280 (bvneg ?x199)))
 (let (($x379 (= ?x280 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x418 (= $x379 true)))
 (let (($x395 (= $x418 true)))
 (let (($x256 (and $x395 $x166)))
 (let (($x31 (and $x256 $x152)))
 (let (($x34 (and $x31 $x5)))
 (let (($x270 (and $x34 $x188)))
 (let (($x118 (and $x270 $x106)))
 (let (($x421 (and $x118 $x205)))
 (let (($x388 (and $x421 $x257)))
 (let (($x41 (and $x388 $x131)))
 (let (($x189 (and $x41 $x57)))
 (let (($x149 (and $x189 $x56)))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x23 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (=> $x241 (= ?x23 ?x80)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x306 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (= $x241 $x360))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x306 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x181 (_ bv0 32))))
 (= $x297 $x310))))))
 ))
 (let (($x65 (and $x267 $x52)))
 (let (($x275 (and $x65 $x77)))
 (let (($x150 (and $x275 $x358)))
 (let (($x374 (and $x150 $x149)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x427 (and $x92 $x374)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x156 (and $x10 $x427)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x333 (and $x127 $x156)))
 (let ((?x282 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvadd input.dst.llvm-%x ?x282)))
 (let (($x368 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x321 (bvadd ?x19 (_ bv3 32))))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x321)))
 (let (($x82 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x321)))
 (let (($x272 (or false (or false (and (and true (or $x235 $x82)) (or $x299 $x368))))))
 (let (($x138 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) $x272)))
 (let (($x303 (=> (and $x294 (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32)))) $x272)))
 (let (($x237 (and $x303 $x333)))
 (let (($x300 (=> $x237 $x185)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x353 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x409 (or $x294 (= ?x353 (_ bv0 32)))))
 (let (($x266 (= $x409 true)))
 (let (($x185 (= $x266 true)))
 (let ((?x331 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x89 (bvneg ?x331)))
 (let (($x14 (= ?x89 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x401 (= $x14 true)))
 (let (($x56 (= $x401 true)))
 (let (($x398 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x394 (= $x398 true)))
 (let (($x304 (= $x394 true)))
 (let (($x57 (= $x304 true)))
 (let (($x346 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x124 (= $x346 true)))
 (let (($x53 (= $x124 true)))
 (let (($x131 (= $x53 true)))
 (let (($x122 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x122 true)))
 (let (($x63 (= $x144 true)))
 (let (($x257 (= $x63 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (= $x91 true)))
 (let (($x62 (= $x25 true)))
 (let (($x205 (= $x62 true)))
 (let (($x213 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x402))))
 (let ((?x23 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (=> $x241 (= ?x23 ?x383)))))))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (= $x241 $x183))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x329 (= false false)))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x181 (_ bv0 32))))
 (=> $x297 $x329)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x75 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x181 (_ bv0 32))))
 (= $x297 $x407))))))
 ))
 (let (($x345 (and $x283 $x52)))
 (let (($x352 (and $x345 $x252)))
 (let (($x319 (and $x352 $x213)))
 (let (($x129 (= $x319 true)))
 (let (($x43 (= $x129 true)))
 (let (($x106 (= $x43 true)))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x402))))
 (let ((?x80 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x306 (_ bv1 32))))
 (=> $x360 (= ?x80 ?x383)))))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x75 (_ bv1 32))))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x306 (_ bv1 32))))
 (= $x360 $x183))))))
 ))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x329 (= false false)))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x306 (_ bv0 32))))
 (=> $x310 $x329)))))
 ))
 (let (($x313 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x75 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x407 (= ?x75 (_ bv0 32))))
 (let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x306 (_ bv0 32))))
 (= $x310 $x407))))))
 ))
 (let (($x343 (and $x313 $x11)))
 (let (($x249 (and $x343 $x330)))
 (let (($x315 (and $x249 $x292)))
 (let (($x250 (= $x315 true)))
 (let (($x102 (= $x250 true)))
 (let (($x188 (= $x102 true)))
 (let (($x284 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x66 (= $x284 true)))
 (let (($x22 (= $x66 true)))
 (let (($x5 (= $x22 true)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x137)))
 (let ((?x411 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x411)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x312)))
 (let (($x316 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (and $x316 $x108)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x291 (and $x221 $x130)))
 (let (($x170 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x417 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x361 (and $x87 $x143)))
 (let (($x146 (not $x361)))
 (let (($x332 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x142 (and $x180 $x332)))
 (let (($x60 (and (not $x142) $x146)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (and $x225 $x362)))
 (let (($x247 (not $x271)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (and $x85 $x341)))
 (let (($x200 (and (not $x236) $x247)))
 (let (($x289 (and (and (and (and (and (and $x200 $x60) $x417) $x170) $x291) $x133) $x26)))
 (let (($x105 (and $x289 $x29)))
 (let (($x95 (= $x105 true)))
 (let (($x204 (= $x95 true)))
 (let (($x152 (= $x204 true)))
 (let ((?x366 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x393 (= (_ bv0 2) ?x366)))
 (let (($x206 (= $x393 true)))
 (let (($x166 (= $x206 true)))
 (let ((?x199 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x280 (bvneg ?x199)))
 (let (($x379 (= ?x280 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x418 (= $x379 true)))
 (let (($x395 (= $x418 true)))
 (let (($x256 (and $x395 $x166)))
 (let (($x31 (and $x256 $x152)))
 (let (($x34 (and $x31 $x5)))
 (let (($x270 (and $x34 $x188)))
 (let (($x118 (and $x270 $x106)))
 (let (($x421 (and $x118 $x205)))
 (let (($x388 (and $x421 $x257)))
 (let (($x41 (and $x388 $x131)))
 (let (($x189 (and $x41 $x57)))
 (let (($x149 (and $x189 $x56)))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x23 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (=> $x241 (= ?x23 ?x80)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x306 (_ bv1 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x181 (_ bv1 32))))
 (= $x241 $x360))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x306 (_ bv0 32))))
 (let ((?x181 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x181 (_ bv0 32))))
 (= $x297 $x310))))))
 ))
 (let (($x65 (and $x267 $x52)))
 (let (($x275 (and $x65 $x77)))
 (let (($x150 (and $x275 $x358)))
 (let (($x374 (and $x150 $x149)))
 (let (($x92 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x427 (and $x92 $x374)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x156 (and $x10 $x427)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x333 (and $x127 $x156)))
 (let ((?x282 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvadd input.dst.llvm-%x ?x282)))
 (let (($x368 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x321 (bvadd ?x19 (_ bv3 32))))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x321)))
 (let (($x82 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x321)))
 (let (($x272 (or false (or false (and (and true (or $x235 $x82)) (or $x299 $x368))))))
 (let (($x138 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) $x272)))
 (let (($x303 (=> (and $x294 (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32)))) $x272)))
 (let (($x237 (and $x303 $x333)))
 (let (($x300 (=> $x237 $x185)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x117 (= input.spec-%var-ret-0.L2%7%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x117 true)))
 (let (($x415 (= $x172 true)))
 (let ((?x116 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x36 (bvneg ?x116)))
 (let (($x311 (= ?x36 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x268 (= $x311 true)))
 (let (($x30 (= $x268 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x276)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x15)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (and $x262 $x338)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x132 $x305)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x416 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x163 $x416)))
 (let (($x33 (not $x28)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x381 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x381 $x405)))
 (let (($x98 (and (not $x9) $x33)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x295 $x164)))
 (let (($x20 (not $x279)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x274 $x404)))
 (let (($x151 (and (not $x37) $x20)))
 (let (($x219 (and (and (and (and (and (and $x151 $x98) $x220) $x215) $x173) $x245) $x169)))
 (let (($x101 (and $x219 $x260)))
 (let (($x239 (= $x101 true)))
 (let (($x192 (= $x239 true)))
 (let (($x286 (= $x192 true)))
 (let (($x391 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x242 (= $x391 true)))
 (let (($x67 (= $x242 true)))
 (let (($x364 (= $x67 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x342 (= $x44 true)))
 (let (($x277 (= $x342 true)))
 (let (($x327 (= $x277 true)))
 (let (($x420 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x115 (= $x420 true)))
 (let (($x350 (= $x115 true)))
 (let (($x263 (= $x350 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x12 (= (_ bv0 2) ?x114)))
 (let (($x216 (= $x12 true)))
 (let (($x371 (= $x216 true)))
 (let (($x278 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x278 true)))
 (let (($x134 (= $x207 true)))
 (let (($x7 (= $x134 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x148))))
 (let ((?x247 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (=> $x113 (= ?x247 ?x179)))))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x131 (_ bv1 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (= $x113 $x333))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x197 (= false false)))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x52 (_ bv0 32))))
 (=> $x65 $x197)))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x131 (_ bv0 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x52 (_ bv0 32))))
 (= $x65 $x41))))))
 ))
 (let (($x240 (and $x326 $x23)))
 (let (($x323 (and $x240 $x167)))
 (let (($x258 (and $x323 $x21)))
 (let (($x165 (= $x258 true)))
 (let (($x47 (= $x165 true)))
 (let (($x55 (= $x47 true)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x148))))
 (let ((?x271 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (bvuge ?x267 (_ bv1 32))))
 (=> $x395 (= ?x271 ?x179)))))))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x131 (_ bv1 32))))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (bvuge ?x267 (_ bv1 32))))
 (= $x395 $x333))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x197 (= false false)))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x267 (_ bv0 32))))
 (=> $x329 $x197)))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x131 (_ bv0 32))))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x267 (_ bv0 32))))
 (= $x329 $x41))))))
 ))
 (let (($x331 (and $x394 $x189)))
 (let (($x353 (and $x331 $x110)))
 (let (($x72 (and $x353 $x265)))
 (let (($x226 (= $x72 true)))
 (let (($x83 (= $x226 true)))
 (let (($x69 (= $x83 true)))
 (let ((?x26 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x289 (bvneg ?x26)))
 (let (($x137 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x137 true)))
 (let (($x105 (= $x29 true)))
 (let (($x291 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x253 (= $x291 true)))
 (let (($x68 (= $x253 true)))
 (let (($x133 (= $x68 true)))
 (let (($x412 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (not $x412)))
 (let (($x316 (= $x221 true)))
 (let (($x312 (= $x316 true)))
 (let (($x108 (= $x312 true)))
 (let (($x17 (and $x108 $x133)))
 (let (($x95 (and $x17 $x105)))
 (let (($x61 (and $x95 $x69)))
 (let (($x178 (and $x61 $x55)))
 (let (($x45 (and $x178 $x7)))
 (let (($x339 (and $x45 $x371)))
 (let (($x233 (and $x339 $x263)))
 (let (($x336 (and $x233 $x327)))
 (let (($x70 (and $x336 $x364)))
 (let (($x224 (and $x70 $x286)))
 (let (($x27 (and $x224 $x30)))
 (let ((?x251 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (and (= ?x251 (_ bv0 32)) $x27)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x247 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (=> $x113 (= ?x247 ?x271)))))))
 ))
 (let (($x393 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (bvuge ?x267 (_ bv1 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (= $x113 $x395))))))
 ))
 (let (($x360 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x267 (_ bv0 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x52 (_ bv0 32))))
 (= $x65 $x329))))))
 ))
 (let (($x80 (and $x360 $x23)))
 (let (($x206 (and $x80 $x393)))
 (let (($x142 (and $x206 $x332)))
 (let (($x340 (and $x142 $x348)))
 (let (($x369 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x217 (and $x369 $x340)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x324 (and $x282 $x217)))
 (let (($x349 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x227 (and $x349 $x324)))
 (let (($x119 (=> $x227 $x415)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x117 (= input.spec-%var-ret-0.L2%7%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x172 (= $x117 true)))
 (let (($x415 (= $x172 true)))
 (let ((?x116 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x36 (bvneg ?x116)))
 (let (($x311 (= ?x36 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x268 (= $x311 true)))
 (let (($x30 (= $x268 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x260 (= (_ bv0 32) ?x276)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x15)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (and $x262 $x338)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x132 $x305)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x416 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x163 $x416)))
 (let (($x33 (not $x28)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x381 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x381 $x405)))
 (let (($x98 (and (not $x9) $x33)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x295 $x164)))
 (let (($x20 (not $x279)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x274 $x404)))
 (let (($x151 (and (not $x37) $x20)))
 (let (($x219 (and (and (and (and (and (and $x151 $x98) $x220) $x215) $x173) $x245) $x169)))
 (let (($x101 (and $x219 $x260)))
 (let (($x239 (= $x101 true)))
 (let (($x192 (= $x239 true)))
 (let (($x286 (= $x192 true)))
 (let (($x391 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x242 (= $x391 true)))
 (let (($x67 (= $x242 true)))
 (let (($x364 (= $x67 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x342 (= $x44 true)))
 (let (($x277 (= $x342 true)))
 (let (($x327 (= $x277 true)))
 (let (($x420 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x115 (= $x420 true)))
 (let (($x350 (= $x115 true)))
 (let (($x263 (= $x350 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x12 (= (_ bv0 2) ?x114)))
 (let (($x216 (= $x12 true)))
 (let (($x371 (= $x216 true)))
 (let (($x278 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x207 (= $x278 true)))
 (let (($x134 (= $x207 true)))
 (let (($x7 (= $x134 true)))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x148))))
 (let ((?x247 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (=> $x113 (= ?x247 ?x179)))))))))
 ))
 (let (($x167 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x131 (_ bv1 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (= $x113 $x333))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x197 (= false false)))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x52 (_ bv0 32))))
 (=> $x65 $x197)))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x131 (_ bv0 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x52 (_ bv0 32))))
 (= $x65 $x41))))))
 ))
 (let (($x240 (and $x326 $x23)))
 (let (($x323 (and $x240 $x167)))
 (let (($x258 (and $x323 $x21)))
 (let (($x165 (= $x258 true)))
 (let (($x47 (= $x165 true)))
 (let (($x55 (= $x47 true)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x148))))
 (let ((?x271 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (bvuge ?x267 (_ bv1 32))))
 (=> $x395 (= ?x271 ?x179)))))))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x131 (_ bv1 32))))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (bvuge ?x267 (_ bv1 32))))
 (= $x395 $x333))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x197 (= false false)))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x267 (_ bv0 32))))
 (=> $x329 $x197)))))
 ))
 (let (($x394 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x131 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x41 (= ?x131 (_ bv0 32))))
 (let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x267 (_ bv0 32))))
 (= $x329 $x41))))))
 ))
 (let (($x331 (and $x394 $x189)))
 (let (($x353 (and $x331 $x110)))
 (let (($x72 (and $x353 $x265)))
 (let (($x226 (= $x72 true)))
 (let (($x83 (= $x226 true)))
 (let (($x69 (= $x83 true)))
 (let ((?x26 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x289 (bvneg ?x26)))
 (let (($x137 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x29 (= $x137 true)))
 (let (($x105 (= $x29 true)))
 (let (($x291 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x253 (= $x291 true)))
 (let (($x68 (= $x253 true)))
 (let (($x133 (= $x68 true)))
 (let (($x412 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (not $x412)))
 (let (($x316 (= $x221 true)))
 (let (($x312 (= $x316 true)))
 (let (($x108 (= $x312 true)))
 (let (($x17 (and $x108 $x133)))
 (let (($x95 (and $x17 $x105)))
 (let (($x61 (and $x95 $x69)))
 (let (($x178 (and $x61 $x55)))
 (let (($x45 (and $x178 $x7)))
 (let (($x339 (and $x45 $x371)))
 (let (($x233 (and $x339 $x263)))
 (let (($x336 (and $x233 $x327)))
 (let (($x70 (and $x336 $x364)))
 (let (($x224 (and $x70 $x286)))
 (let (($x27 (and $x224 $x30)))
 (let ((?x251 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x348 (and (= ?x251 (_ bv0 32)) $x27)))
 (let (($x332 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x271 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x247 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (=> $x113 (= ?x247 ?x271)))))))
 ))
 (let (($x393 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x395 (bvuge ?x267 (_ bv1 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x52 (_ bv1 32))))
 (= $x113 $x395))))))
 ))
 (let (($x360 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x329 (= ?x267 (_ bv0 32))))
 (let ((?x52 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x65 (= ?x52 (_ bv0 32))))
 (= $x65 $x329))))))
 ))
 (let (($x80 (and $x360 $x23)))
 (let (($x206 (and $x80 $x393)))
 (let (($x142 (and $x206 $x332)))
 (let (($x340 (and $x142 $x348)))
 (let (($x369 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x217 (and $x369 $x340)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x324 (and $x282 $x217)))
 (let (($x349 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x227 (and $x349 $x324)))
 (let (($x119 (=> $x227 $x415)))
 (not $x119))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x349 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (not $x349)))
 (let (($x359 (or $x349 $x171)))
 (let (($x417 (= $x359 true)))
 (let (($x50 (= $x417 true)))
 (let ((?x418 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x85 (bvneg ?x418)))
 (let (($x341 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x363 (= $x341 true)))
 (let (($x225 (= $x363 true)))
 (let (($x281 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x392 (= $x281 true)))
 (let (($x199 (= $x392 true)))
 (let (($x280 (= $x199 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x181 (= $x230 true)))
 (let (($x297 (= $x181 true)))
 (let (($x399 (= $x297 true)))
 (let (($x303 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x303 true)))
 (let (($x357 (= $x127 true)))
 (let (($x264 (= $x357 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x248))))
 (let ((?x134 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (=> $x35 (= ?x134 ?x56)))))))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x214 (_ bv1 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (= $x35 $x385))))))
 ))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x161 (_ bv0 32))))
 (=> $x125 $x141)))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x214 (_ bv0 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x161 (_ bv0 32))))
 (= $x125 $x128))))))
 ))
 (let (($x234 (and $x386 $x148)))
 (let (($x296 (and $x234 $x300)))
 (let (($x104 (and $x296 $x236)))
 (let (($x354 (= $x104 true)))
 (let (($x397 (= $x354 true)))
 (let (($x272 (= $x397 true)))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x248))))
 (let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x79 (_ bv1 32))))
 (=> $x240 (= ?x207 ?x56)))))))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x214 (_ bv1 32))))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x79 (_ bv1 32))))
 (= $x240 $x385))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x79 (_ bv0 32))))
 (=> $x343 $x141)))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x214 (_ bv0 32))))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x79 (_ bv0 32))))
 (= $x343 $x128))))))
 ))
 (let (($x250 (and $x299 $x292)))
 (let (($x345 (and $x250 $x252)))
 (let (($x427 (and $x345 $x403)))
 (let (($x422 (= $x427 true)))
 (let (($x166 (= $x422 true)))
 (let (($x256 (= $x166 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x15)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x245)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (and $x262 $x338)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x132 $x305)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x28 $x33)))
 (let (($x356 (not $x98)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x416 (and $x176 $x163)))
 (let (($x220 (and (not $x416) $x356)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x279 $x20)))
 (let (($x381 (not $x151)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x387 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x387 $x295)))
 (let (($x9 (and (not $x164) $x381)))
 (let (($x192 (and (and (and (and (and (and $x9 $x220) $x223) $x228) $x173) $x121) $x24)))
 (let (($x286 (and $x192 $x169)))
 (let (($x224 (= $x286 true)))
 (let (($x193 (= $x224 true)))
 (let (($x116 (= $x193 true)))
 (let (($x274 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x74 (= $x274 true)))
 (let (($x404 (= $x74 true)))
 (let (($x37 (= $x404 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x364 (= (_ bv0 2) ?x67)))
 (let (($x70 (= $x364 true)))
 (let (($x288 (= $x70 true)))
 (let ((?x233 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x44 (bvneg ?x233)))
 (let (($x277 (= ?x44 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x327 (= $x277 true)))
 (let (($x336 (= $x327 true)))
 (let (($x371 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x339 (= $x371 true)))
 (let (($x420 (= $x339 true)))
 (let (($x115 (= $x420 true)))
 (let (($x391 (and $x115 $x336)))
 (let (($x229 (and $x391 $x288)))
 (let (($x13 (and $x229 $x37)))
 (let (($x36 (and $x13 $x116)))
 (let (($x211 (and $x36 $x256)))
 (let (($x138 (and $x211 $x272)))
 (let (($x10 (and $x138 $x264)))
 (let (($x306 (and $x10 $x399)))
 (let (($x379 (and $x306 $x280)))
 (let (($x362 (and $x379 $x225)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x134 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (=> $x35 (= ?x134 ?x207)))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x79 (_ bv1 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (= $x35 $x240))))))
 ))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x79 (_ bv0 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x161 (_ bv0 32))))
 (= $x125 $x343))))))
 ))
 (let (($x38 (and $x123 $x148)))
 (let (($x97 (and $x38 $x323)))
 (let (($x114 (and $x97 $x317)))
 (let (($x388 (and $x114 $x362)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x304 (and $x170 $x388)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x156 (and $x255 $x304)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x40 (and $x88 $x156)))
 (let ((?x19 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x369 (bvadd input.dst.llvm-%x ?x19)))
 (let (($x206 (bvugt ?x369 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd ?x369 (_ bv3 32))))
 (let (($x393 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x23 (bvugt ?x369 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x180 (or false (or false (and (and true (or $x275 $x23)) (or $x393 $x206))))))
 (let (($x142 (=> (bvule ?x369 (bvsub (bvadd ?x369 (_ bv4 32)) (_ bv1 32))) $x180)))
 (let (($x190 (=> (and $x349 (bvule ?x369 (bvsub (bvadd ?x369 (_ bv4 32)) (_ bv1 32)))) $x180)))
 (let (($x6 (and $x190 $x40)))
 (let (($x325 (=> $x6 $x50)))
 (not $x325)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x349 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x171 (not $x349)))
 (let (($x359 (or $x349 $x171)))
 (let (($x417 (= $x359 true)))
 (let (($x50 (= $x417 true)))
 (let ((?x418 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x85 (bvneg ?x418)))
 (let (($x341 (= ?x85 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x363 (= $x341 true)))
 (let (($x225 (= $x363 true)))
 (let (($x281 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x392 (= $x281 true)))
 (let (($x199 (= $x392 true)))
 (let (($x280 (= $x199 true)))
 (let (($x230 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x181 (= $x230 true)))
 (let (($x297 (= $x181 true)))
 (let (($x399 (= $x297 true)))
 (let (($x303 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x303 true)))
 (let (($x357 (= $x127 true)))
 (let (($x264 (= $x357 true)))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x248))))
 (let ((?x134 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (=> $x35 (= ?x134 ?x56)))))))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x214 (_ bv1 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (= $x35 $x385))))))
 ))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x161 (_ bv0 32))))
 (=> $x125 $x141)))))
 ))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x214 (_ bv0 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x161 (_ bv0 32))))
 (= $x125 $x128))))))
 ))
 (let (($x234 (and $x386 $x148)))
 (let (($x296 (and $x234 $x300)))
 (let (($x104 (and $x296 $x236)))
 (let (($x354 (= $x104 true)))
 (let (($x397 (= $x354 true)))
 (let (($x272 (= $x397 true)))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x257 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x248))))
 (let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x79 (_ bv1 32))))
 (=> $x240 (= ?x207 ?x56)))))))))
 ))
 (let (($x252 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x214 (_ bv1 32))))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x79 (_ bv1 32))))
 (= $x240 $x385))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x79 (_ bv0 32))))
 (=> $x343 $x141)))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x214 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (= ?x214 (_ bv0 32))))
 (let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x79 (_ bv0 32))))
 (= $x343 $x128))))))
 ))
 (let (($x250 (and $x299 $x292)))
 (let (($x345 (and $x250 $x252)))
 (let (($x427 (and $x345 $x403)))
 (let (($x422 (= $x427 true)))
 (let (($x166 (= $x422 true)))
 (let (($x256 (= $x166 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x15)))
 (let ((?x245 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x24 (= (_ bv0 32) ?x245)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x139 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x139)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x305 (and $x262 $x338)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x132 $x305)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x28 $x33)))
 (let (($x356 (not $x98)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x416 (and $x176 $x163)))
 (let (($x220 (and (not $x416) $x356)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x279 $x20)))
 (let (($x381 (not $x151)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x387 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x387 $x295)))
 (let (($x9 (and (not $x164) $x381)))
 (let (($x192 (and (and (and (and (and (and $x9 $x220) $x223) $x228) $x173) $x121) $x24)))
 (let (($x286 (and $x192 $x169)))
 (let (($x224 (= $x286 true)))
 (let (($x193 (= $x224 true)))
 (let (($x116 (= $x193 true)))
 (let (($x274 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x74 (= $x274 true)))
 (let (($x404 (= $x74 true)))
 (let (($x37 (= $x404 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x364 (= (_ bv0 2) ?x67)))
 (let (($x70 (= $x364 true)))
 (let (($x288 (= $x70 true)))
 (let ((?x233 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x44 (bvneg ?x233)))
 (let (($x277 (= ?x44 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x327 (= $x277 true)))
 (let (($x336 (= $x327 true)))
 (let (($x371 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x339 (= $x371 true)))
 (let (($x420 (= $x339 true)))
 (let (($x115 (= $x420 true)))
 (let (($x391 (and $x115 $x336)))
 (let (($x229 (and $x391 $x288)))
 (let (($x13 (and $x229 $x37)))
 (let (($x36 (and $x13 $x116)))
 (let (($x211 (and $x36 $x256)))
 (let (($x138 (and $x211 $x272)))
 (let (($x10 (and $x138 $x264)))
 (let (($x306 (and $x10 $x399)))
 (let (($x379 (and $x306 $x280)))
 (let (($x362 (and $x379 $x225)))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x134 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (=> $x35 (= ?x134 ?x207)))))))
 ))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x79 (_ bv1 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x161 (_ bv1 32))))
 (= $x35 $x240))))))
 ))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x79 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x343 (= ?x79 (_ bv0 32))))
 (let ((?x161 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x125 (= ?x161 (_ bv0 32))))
 (= $x125 $x343))))))
 ))
 (let (($x38 (and $x123 $x148)))
 (let (($x97 (and $x38 $x323)))
 (let (($x114 (and $x97 $x317)))
 (let (($x388 (and $x114 $x362)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x304 (and $x170 $x388)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x156 (and $x255 $x304)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x40 (and $x88 $x156)))
 (let ((?x19 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x369 (bvadd input.dst.llvm-%x ?x19)))
 (let (($x206 (bvugt ?x369 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd ?x369 (_ bv3 32))))
 (let (($x393 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x23 (bvugt ?x369 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x180 (or false (or false (and (and true (or $x275 $x23)) (or $x393 $x206))))))
 (let (($x142 (=> (bvule ?x369 (bvsub (bvadd ?x369 (_ bv4 32)) (_ bv1 32))) $x180)))
 (let (($x190 (=> (and $x349 (bvule ?x369 (bvsub (bvadd ?x369 (_ bv4 32)) (_ bv1 32)))) $x180)))
 (let (($x6 (and $x190 $x40)))
 (let (($x325 (=> $x6 $x50)))
 (not $x325)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x5)))
 (let ((?x204 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x204)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x227 $x117)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x324 $x158)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x98 $x356)))
 (let (($x219 (not $x220)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x218 $x28)))
 (let (($x223 (and (not $x33) $x219)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x151 $x381)))
 (let (($x176 (not $x9)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x295 $x405)))
 (let (($x416 (and (not $x279) $x176)))
 (let (($x203 (and (and (and $x416 $x223) $x215) $x260)))
 (let (($x174 (and (and (and (and $x203 $x293) $x184) $x152) $x284)))
 (let (($x265 (= $x174 true)))
 (let (($x315 (= $x265 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x291 (concat ?x130 (concat ?x361 (concat ?x222 ?x143)))))
 (let (($x333 (= ?x291 input.dst.llvm-%x)))
 (let (($x237 (= $x333 true)))
 (let (($x147 (= $x237 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x313 (concat ?x231 (concat ?x320 (concat ?x26 ?x17)))))
 (let (($x309 (= ?x313 input.dst.llvm-%n)))
 (let (($x402 (= $x309 true)))
 (let (($x351 (= $x402 true)))
 (let (($x54 (= input.dst.llvm-%n ?x313)))
 (let (($x253 (= input.dst.llvm-%x ?x291)))
 (let (($x75 (and $x253 $x54)))
 (let (($x66 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x201 (and $x66 $x75)))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x29))))
 (let ((?x229 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (=> $x263 (= ?x229 ?x340)))))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (= $x263 (bvuge ?x10 (_ bv1 32)))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x290 (_ bv0 32))))
 (=> $x148 $x240)))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x290 (_ bv0 32))))
 (= $x148 (= ?x10 (_ bv0 32)))))))
 ))
 (let (($x399 (and $x297 $x97)))
 (let (($x362 (and $x399 $x225)))
 (let (($x119 (and $x362 $x415)))
 (let (($x377 (and (and (and (and (and (and $x203 $x119) $x293) $x184) $x152) $x284) $x201)))
 (let (($x232 (= $x377 true)))
 (let (($x273 (= $x232 true)))
 (let (($x383 (= $x273 true)))
 (let (($x331 (and $x383 $x351)))
 (let (($x246 (and $x331 $x147)))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (=> $x263 (= ?x229 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (= $x263 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x290 (_ bv0 32))))
 (= $x148 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x134 (and $x35 $x97)))
 (let (($x342 (and $x134 $x44)))
 (let (($x37 (and $x342 $x404)))
 (let (($x389 (and $x37 $x246)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x367 (and $x19 $x389)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x48 (and $x238 $x367)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x409 (and $x294 $x48)))
 (let (($x188 (=> $x409 $x315)))
 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x284 (= (_ bv0 32) ?x5)))
 (let ((?x204 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x204)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x184 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x159)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (and $x227 $x117)))
 (let (($x324 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x324 $x158)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x356 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x98 $x356)))
 (let (($x219 (not $x220)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x218 $x28)))
 (let (($x223 (and (not $x33) $x219)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x151 $x381)))
 (let (($x176 (not $x9)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x279 (and $x295 $x405)))
 (let (($x416 (and (not $x279) $x176)))
 (let (($x203 (and (and (and $x416 $x223) $x215) $x260)))
 (let (($x174 (and (and (and (and $x203 $x293) $x184) $x152) $x284)))
 (let (($x265 (= $x174 true)))
 (let (($x315 (= $x265 true)))
 (let ((?x143 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x291 (concat ?x130 (concat ?x361 (concat ?x222 ?x143)))))
 (let (($x333 (= ?x291 input.dst.llvm-%x)))
 (let (($x237 (= $x333 true)))
 (let (($x147 (= $x237 true)))
 (let ((?x17 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x313 (concat ?x231 (concat ?x320 (concat ?x26 ?x17)))))
 (let (($x309 (= ?x313 input.dst.llvm-%n)))
 (let (($x402 (= $x309 true)))
 (let (($x351 (= $x402 true)))
 (let (($x54 (= input.dst.llvm-%n ?x313)))
 (let (($x253 (= input.dst.llvm-%x ?x291)))
 (let (($x75 (and $x253 $x54)))
 (let (($x66 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x201 (and $x66 $x75)))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv1 32))) (select input.dst.llvm-mem ?x311))))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x311 (_ bv2 32))) ?x29))))
 (let ((?x229 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (=> $x263 (= ?x229 ?x340)))))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (= $x263 (bvuge ?x10 (_ bv1 32)))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x240 (= false false)))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x290 (_ bv0 32))))
 (=> $x148 $x240)))))
 ))
 (let (($x297 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x290 (_ bv0 32))))
 (= $x148 (= ?x10 (_ bv0 32)))))))
 ))
 (let (($x399 (and $x297 $x97)))
 (let (($x362 (and $x399 $x225)))
 (let (($x119 (and $x362 $x415)))
 (let (($x377 (and (and (and (and (and (and $x203 $x119) $x293) $x184) $x152) $x284) $x201)))
 (let (($x232 (= $x377 true)))
 (let (($x273 (= $x232 true)))
 (let (($x383 (= $x273 true)))
 (let (($x331 (and $x383 $x351)))
 (let (($x246 (and $x331 $x147)))
 (let (($x404 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x229 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (=> $x263 (= ?x229 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x44 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x290 (_ bv1 32))))
 (= $x263 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x35 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x148 (= ?x290 (_ bv0 32))))
 (= $x148 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x134 (and $x35 $x97)))
 (let (($x342 (and $x134 $x44)))
 (let (($x37 (and $x342 $x404)))
 (let (($x389 (and $x37 $x246)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x367 (and $x19 $x389)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x48 (and $x238 $x367)))
 (let (($x294 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x409 (and $x294 $x48)))
 (let (($x188 (=> $x409 $x315)))
 (not $x188))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x248))))
 (let ((?x268 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (=> $x181 (= ?x268 ?x256)))))))))
 ))
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (= $x181 (bvuge ?x15 (_ bv1 32)))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x356 (= false false)))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x28 (_ bv0 32))))
 (=> $x33 $x356)))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x28 (_ bv0 32))))
 (= $x33 (= ?x15 (_ bv0 32)))))))
 ))
 (let (($x36 (and $x286 $x223)))
 (let (($x257 (and $x36 $x63)))
 (let (($x422 (and $x257 $x374)))
 (let (($x371 (= $x422 true)))
 (let (($x420 (= $x371 true)))
 (let ((?x303 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x281 (concat ?x317 (concat ?x207 ?x303)))))
 (let (($x255 (= ?x199 input.dst.llvm-%x)))
 (let (($x168 (= $x255 true)))
 (let (($x161 (= $x168 true)))
 (let ((?x339 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x388 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x221 (concat ?x84 (concat ?x388 (concat ?x85 ?x339)))))
 (let (($x52 (= ?x221 input.dst.llvm-%n)))
 (let (($x88 (= $x52 true)))
 (let (($x259 (= $x88 true)))
 (let (($x417 (= input.dst.llvm-%n ?x221)))
 (let (($x280 (= input.dst.llvm-%x ?x199)))
 (let (($x50 (and $x280 $x417)))
 (let (($x272 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x6 (and $x272 $x50)))
 (let ((?x408 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x354 (= (_ bv0 32) ?x408)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x78)))
 (let ((?x373 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x373)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x300 (and $x234 $x296)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x211 $x300)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x293 $x11)))
 (let (($x184 (not $x159)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x217 $x117)))
 (let (($x204 (and (not $x158) $x184)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x307 $x415)))
 (let (($x407 (not $x119)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x340 (and $x348 $x310)))
 (let (($x227 (and (not $x340) $x407)))
 (let (($x242 (and (and (and (and (and (and $x227 $x204) $x330) $x284) $x422) $x285) $x236)))
 (let (($x190 (and (and (and $x242 $x170) $x354) $x6)))
 (let (($x200 (= $x190 true)))
 (let (($x180 (= $x200 true)))
 (let (($x142 (= $x180 true)))
 (let (($x251 (and $x142 $x259)))
 (let (($x125 (and $x251 $x161)))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (=> $x181 (= ?x268 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (= $x181 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x28 (_ bv0 32))))
 (= $x33 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x347 (and $x98 $x223)))
 (let (($x341 (and $x347 $x399)))
 (let (($x95 (and $x341 $x105)))
 (let (($x34 (and $x95 $x125)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x114 (and $x282 $x34)))
 (let (($x349 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x12 (and $x349 $x114)))
 (let (($x412 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x216 (and $x412 $x12)))
 (let (($x115 (=> $x216 $x420)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x248))))
 (let ((?x268 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (=> $x181 (= ?x268 ?x256)))))))))
 ))
 (let (($x63 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (= $x181 (bvuge ?x15 (_ bv1 32)))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x356 (= false false)))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x28 (_ bv0 32))))
 (=> $x33 $x356)))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x15 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x28 (_ bv0 32))))
 (= $x33 (= ?x15 (_ bv0 32)))))))
 ))
 (let (($x36 (and $x286 $x223)))
 (let (($x257 (and $x36 $x63)))
 (let (($x422 (and $x257 $x374)))
 (let (($x371 (= $x422 true)))
 (let (($x420 (= $x371 true)))
 (let ((?x303 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x281 (concat ?x317 (concat ?x207 ?x303)))))
 (let (($x255 (= ?x199 input.dst.llvm-%x)))
 (let (($x168 (= $x255 true)))
 (let (($x161 (= $x168 true)))
 (let ((?x339 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x388 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x221 (concat ?x84 (concat ?x388 (concat ?x85 ?x339)))))
 (let (($x52 (= ?x221 input.dst.llvm-%n)))
 (let (($x88 (= $x52 true)))
 (let (($x259 (= $x88 true)))
 (let (($x417 (= input.dst.llvm-%n ?x221)))
 (let (($x280 (= input.dst.llvm-%x ?x199)))
 (let (($x50 (and $x280 $x417)))
 (let (($x272 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x6 (and $x272 $x50)))
 (let ((?x408 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x354 (= (_ bv0 32) ?x408)))
 (let ((?x78 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x170 (= (_ bv0 32) ?x78)))
 (let ((?x373 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x373)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x58)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x300 (and $x234 $x296)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x211 $x300)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x330 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x293 $x11)))
 (let (($x184 (not $x159)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x217 $x117)))
 (let (($x204 (and (not $x158) $x184)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x307 $x415)))
 (let (($x407 (not $x119)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x348 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x340 (and $x348 $x310)))
 (let (($x227 (and (not $x340) $x407)))
 (let (($x242 (and (and (and (and (and (and $x227 $x204) $x330) $x284) $x422) $x285) $x236)))
 (let (($x190 (and (and (and $x242 $x170) $x354) $x6)))
 (let (($x200 (= $x190 true)))
 (let (($x180 (= $x200 true)))
 (let (($x142 (= $x180 true)))
 (let (($x251 (and $x142 $x259)))
 (let (($x125 (and $x251 $x161)))
 (let (($x105 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (=> $x181 (= ?x268 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x399 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x28 (_ bv1 32))))
 (= $x181 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x98 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x33 (= ?x28 (_ bv0 32))))
 (= $x33 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x347 (and $x98 $x223)))
 (let (($x341 (and $x347 $x399)))
 (let (($x95 (and $x341 $x105)))
 (let (($x34 (and $x95 $x125)))
 (let (($x282 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x114 (and $x282 $x34)))
 (let (($x349 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x12 (and $x349 $x114)))
 (let (($x412 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x216 (and $x412 $x12)))
 (let (($x115 (=> $x216 $x420)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x400 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x245 (= (_ bv0 2) ?x400)))
 (let (($x311 (= $x245 true)))
 (let ((?x345 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x241 (concat ?x27 (concat ?x197 (concat ?x23 ?x345)))))
 (let (($x151 (= ?x241 input.dst.llvm-%x)))
 (let (($x260 (= $x151 true)))
 (let (($x203 (= $x260 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x300 (concat ?x296 (concat ?x325 (concat ?x403 ?x266)))))
 (let (($x113 (= input.dst.llvm-%n ?x300)))
 (let (($x275 (= input.dst.llvm-%x ?x241)))
 (let (($x121 (and $x275 $x113)))
 (let (($x225 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x395 (and $x225 $x121)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x127)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x270)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x370 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x249)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (and $x215 $x228)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (and $x276 $x214)))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x247))))
 (let ((?x386 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (=> $x192 (= ?x386 ?x338)))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (= $x192 (bvuge ?x402 (_ bv1 32)))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x117 (_ bv0 32))))
 (=> $x158 $x11)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x117 (_ bv0 32))))
 (= $x158 (= ?x402 (_ bv0 32)))))))
 ))
 (let (($x389 (and $x237 $x204)))
 (let (($x409 (and $x389 $x367)))
 (let (($x220 (and $x409 $x321)))
 (let (($x388 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x303 $x7)))
 (let (($x199 (not $x306)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x317 $x167)))
 (let (($x156 (and (not $x207) $x199)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x104 $x397)))
 (let (($x392 (not $x272)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x354 (and $x170 $x408)))
 (let (($x45 (and (not $x354) $x392)))
 (let (($x74 (and (and (and (and (and (and $x45 $x156) $x84) $x388) $x220) $x299) $x370)))
 (let (($x13 (and (and (and $x74 $x292) $x250) $x395)))
 (let (($x387 (= $x13 true)))
 (let (($x279 (= $x387 true)))
 (let (($x163 (= $x279 true)))
 (let (($x316 (= ?x300 input.dst.llvm-%n)))
 (let (($x373 (= $x316 true)))
 (let (($x236 (= $x373 true)))
 (let (($x20 (and $x236 $x163)))
 (let (($x357 (and $x20 $x203)))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x386 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (=> $x192 (= ?x386 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (= $x192 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x117 (_ bv0 32))))
 (= $x158 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x171 (and $x293 $x204)))
 (let (($x14 (and $x171 $x36)))
 (let (($x149 (and $x14 $x56)))
 (let (($x139 (and $x149 $x357)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x264 (and $x238 $x139)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x10 (and $x18 $x264)))
 (let (($x369 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x362 (and $x369 $x10)))
 (let (($x391 (=> $x362 $x311)))
 (not $x391))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x400 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x245 (= (_ bv0 2) ?x400)))
 (let (($x311 (= $x245 true)))
 (let ((?x345 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x241 (concat ?x27 (concat ?x197 (concat ?x23 ?x345)))))
 (let (($x151 (= ?x241 input.dst.llvm-%x)))
 (let (($x260 (= $x151 true)))
 (let (($x203 (= $x260 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x403 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x300 (concat ?x296 (concat ?x325 (concat ?x403 ?x266)))))
 (let (($x113 (= input.dst.llvm-%n ?x300)))
 (let (($x275 (= input.dst.llvm-%x ?x241)))
 (let (($x121 (and $x275 $x113)))
 (let (($x225 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x395 (and $x225 $x121)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x127)))
 (let ((?x270 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x292 (= (_ bv0 32) ?x270)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x370 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x128)))
 (let ((?x249 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x249)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (and $x215 $x228)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (and $x276 $x214)))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x87 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x247))))
 (let ((?x386 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (=> $x192 (= ?x386 ?x338)))))))))
 ))
 (let (($x367 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (= $x192 (bvuge ?x402 (_ bv1 32)))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x11 (= false false)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x117 (_ bv0 32))))
 (=> $x158 $x11)))))
 ))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x402 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x117 (_ bv0 32))))
 (= $x158 (= ?x402 (_ bv0 32)))))))
 ))
 (let (($x389 (and $x237 $x204)))
 (let (($x409 (and $x389 $x367)))
 (let (($x220 (and $x409 $x321)))
 (let (($x388 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x303 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x306 (and $x303 $x7)))
 (let (($x199 (not $x306)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x317 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x317 $x167)))
 (let (($x156 (and (not $x207) $x199)))
 (let (($x397 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x104 $x397)))
 (let (($x392 (not $x272)))
 (let (($x408 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x354 (and $x170 $x408)))
 (let (($x45 (and (not $x354) $x392)))
 (let (($x74 (and (and (and (and (and (and $x45 $x156) $x84) $x388) $x220) $x299) $x370)))
 (let (($x13 (and (and (and $x74 $x292) $x250) $x395)))
 (let (($x387 (= $x13 true)))
 (let (($x279 (= $x387 true)))
 (let (($x163 (= $x279 true)))
 (let (($x316 (= ?x300 input.dst.llvm-%n)))
 (let (($x373 (= $x316 true)))
 (let (($x236 (= $x373 true)))
 (let (($x20 (and $x236 $x163)))
 (let (($x357 (and $x20 $x203)))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x386 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (=> $x192 (= ?x386 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x36 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x117 (_ bv1 32))))
 (= $x192 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x293 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x158 (= ?x117 (_ bv0 32))))
 (= $x158 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x171 (and $x293 $x204)))
 (let (($x14 (and $x171 $x36)))
 (let (($x149 (and $x14 $x56)))
 (let (($x139 (and $x149 $x357)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x264 (and $x238 $x139)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x10 (and $x18 $x264)))
 (let (($x369 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x362 (and $x369 $x10)))
 (let (($x391 (=> $x362 $x311)))
 (not $x391))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x257 (= $x15 true)))
 (let (($x130 (= $x257 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x132 (concat ?x267 (concat ?x179 ?x48)))))
 (let (($x324 (= ?x174 input.dst.llvm-%n)))
 (let (($x413 (= $x324 true)))
 (let (($x307 (= $x413 true)))
 (let (($x262 (= input.dst.llvm-%n ?x174)))
 (let ((?x409 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x206 (concat ?x271 (concat ?x101 ?x409)))))
 (let (($x172 (= input.dst.llvm-%x ?x133)))
 (let (($x188 (and $x172 $x262)))
 (let (($x97 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x65 (and $x97 $x188)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x35)))
 (let ((?x343 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x343)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x152)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x159 $x330)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x246 $x40)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x313))))
 (let ((?x309 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (=> $x303 (= ?x309 ?x377)))))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (= $x303 (bvuge ?x290 (_ bv1 32)))))))
 ))
 (let (($x312 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x242 (= false false)))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x285 (_ bv0 32))))
 (=> $x316 $x242)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x285 (_ bv0 32))))
 (= $x316 (= ?x290 (_ bv0 32)))))))
 ))
 (let (($x79 (and $x420 $x312)))
 (let (($x233 (and $x79 $x347)))
 (let (($x147 (and $x233 $x273)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x404 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x404 $x127)))
 (let (($x37 (not $x250)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x292 (and $x74 $x270)))
 (let (($x363 (and (not $x292) $x37)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x228 $x214)))
 (let (($x288 (not $x299)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x220 $x276)))
 (let (($x370 (and (not $x215) $x288)))
 (let (($x268 (and (and (and (and (and (and $x370 $x363) $x358) $x27) $x147) $x5) $x195)))
 (let (($x105 (and (and (and $x268 $x123) $x240) $x65)))
 (let (($x95 (= $x105 true)))
 (let (($x382 (= $x95 true)))
 (let (($x137 (= $x382 true)))
 (let (($x405 (= ?x133 input.dst.llvm-%x)))
 (let (($x338 (= $x405 true)))
 (let (($x305 (= $x338 true)))
 (let (($x340 (and $x305 $x137)))
 (let (($x284 (and $x340 $x307)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (=> $x303 (= ?x309 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (= $x303 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x285 (_ bv0 32))))
 (= $x316 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x408 (and $x236 $x312)))
 (let (($x199 (and $x408 $x306)))
 (let (($x237 (and $x199 $x351)))
 (let (($x359 (and $x237 $x284)))
 (let (($x349 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x193 (and $x349 $x359)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x60 (and $x294 $x193)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x116 (and $x19 $x60)))
 (let (($x89 (=> $x116 $x130)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x15 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x257 (= $x15 true)))
 (let (($x130 (= $x257 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x267 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x132 (concat ?x267 (concat ?x179 ?x48)))))
 (let (($x324 (= ?x174 input.dst.llvm-%n)))
 (let (($x413 (= $x324 true)))
 (let (($x307 (= $x413 true)))
 (let (($x262 (= input.dst.llvm-%n ?x174)))
 (let ((?x409 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x206 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x206 (concat ?x271 (concat ?x101 ?x409)))))
 (let (($x172 (= input.dst.llvm-%x ?x133)))
 (let (($x188 (and $x172 $x262)))
 (let (($x97 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x65 (and $x97 $x188)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x240 (= (_ bv0 32) ?x35)))
 (let ((?x343 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x343)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x330 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x152)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x159 $x330)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (and $x246 $x40)))
 (let (($x273 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x313))))
 (let ((?x309 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (=> $x303 (= ?x309 ?x377)))))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (= $x303 (bvuge ?x290 (_ bv1 32)))))))
 ))
 (let (($x312 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x242 (= false false)))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x285 (_ bv0 32))))
 (=> $x316 $x242)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x290 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x285 (_ bv0 32))))
 (= $x316 (= ?x290 (_ bv0 32)))))))
 ))
 (let (($x79 (and $x420 $x312)))
 (let (($x233 (and $x79 $x347)))
 (let (($x147 (and $x233 $x273)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x358 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x404 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x404 $x127)))
 (let (($x37 (not $x250)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x292 (and $x74 $x270)))
 (let (($x363 (and (not $x292) $x37)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x228 $x214)))
 (let (($x288 (not $x299)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x220 $x276)))
 (let (($x370 (and (not $x215) $x288)))
 (let (($x268 (and (and (and (and (and (and $x370 $x363) $x358) $x27) $x147) $x5) $x195)))
 (let (($x105 (and (and (and $x268 $x123) $x240) $x65)))
 (let (($x95 (= $x105 true)))
 (let (($x382 (= $x95 true)))
 (let (($x137 (= $x382 true)))
 (let (($x405 (= ?x133 input.dst.llvm-%x)))
 (let (($x338 (= $x405 true)))
 (let (($x305 (= $x338 true)))
 (let (($x340 (and $x305 $x137)))
 (let (($x284 (and $x340 $x307)))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x309 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (=> $x303 (= ?x309 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x285 (_ bv1 32))))
 (= $x303 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x236 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x285 (_ bv0 32))))
 (= $x316 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x408 (and $x236 $x312)))
 (let (($x199 (and $x408 $x306)))
 (let (($x237 (and $x199 $x351)))
 (let (($x359 (and $x237 $x284)))
 (let (($x349 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x193 (and $x349 $x359)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x60 (and $x294 $x193)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x116 (and $x19 $x60)))
 (let (($x89 (=> $x116 $x130)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310237/query
