==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x85 (or (bvugt input.memlabel-mem--arg.1_begin (bvadd (_ bv0 32) (_ bv0 32))) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x72 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) (or $x71 $x72)) (or $x77 $x78)) $x85)))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x12 $x6)))
 (let (($x17 (and $x8 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= false true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x178 (concat ?x175 ?x173)))))
 (let (($x183 (= ?x182 input.dst.llvm-%n)))
 (let (($x184 (= $x183 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x167 (concat ?x164 (concat ?x161 ?x159)))))
 (let (($x169 (= ?x168 input.dst.llvm-%x)))
 (let (($x170 (= $x169 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x146)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x144)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x138)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x137 $x139)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x136 $x140)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x126 $x127)))
 (let (($x129 (not $x128)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x123 $x124)))
 (let (($x131 (and (not $x125) $x129)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x117 $x118)))
 (let (($x120 (not $x119)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x95 $x96)))
 (let (($x122 (and (not $x116) $x120)))
 (let (($x153 (and (and (and (and (and (and $x122 $x131) $x133) $x135) $x141) $x143) $x145)))
 (let (($x154 (and $x153 $x147)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x113 (or false (or false (and (and true (or $x102 $x103)) (or $x108 $x109))))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x113)))
 (let (($x155 (and $x115 $x154)))
 (let (($x156 (= $x155 true)))
 (let (($x91 (forall ((input.ind-%var40X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var40X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x31))))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var40X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (=> $x30 (= ?x22 ?x58))))))))
 ))
 (let (($x13 (forall ((input.ind-%var39X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var39X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var39X) (bvult input.ind-%var39X input.dst.llvm-%n)))))
 ))
 (let (($x92 (and $x13 $x91)))
 (let (($x93 (= $x92 true)))
 (let (($x157 (and $x93 $x156)))
 (let (($x171 (and $x157 $x170)))
 (let (($x185 (and $x171 $x184)))
 (let (($x9 (forall ((input.ind-%var52X (_ BitVec 32)) )(let ((?x68 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var52X)))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var52X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var52X)))
 (=> $x30 (= ?x22 ?x68))))))
 ))
 (let (($x69 (forall ((input.ind-%var51X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var51X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var51X)))
 (= $x30 $x76))))
 ))
 (let (($x23 (and $x69 $x9)))
 (let (($x186 (and $x23 $x185)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x34 $x186)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x25 $x187)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x48 $x188)))
 (let (($x191 (=> $x189 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x190 (= false true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x182 (concat ?x181 (concat ?x178 (concat ?x175 ?x173)))))
 (let (($x183 (= ?x182 input.dst.llvm-%n)))
 (let (($x184 (= $x183 true)))
 (let ((?x159 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x167 (concat ?x164 (concat ?x161 ?x159)))))
 (let (($x169 (= ?x168 input.dst.llvm-%x)))
 (let (($x170 (= $x169 true)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x146)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x145 (= (_ bv0 32) ?x144)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x139 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x138)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (and $x137 $x139)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (and $x136 $x140)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x126 $x127)))
 (let (($x129 (not $x128)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x125 (and $x123 $x124)))
 (let (($x131 (and (not $x125) $x129)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (and $x117 $x118)))
 (let (($x120 (not $x119)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x95 $x96)))
 (let (($x122 (and (not $x116) $x120)))
 (let (($x153 (and (and (and (and (and (and $x122 $x131) $x133) $x135) $x141) $x143) $x145)))
 (let (($x154 (and $x153 $x147)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x103 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x113 (or false (or false (and (and true (or $x102 $x103)) (or $x108 $x109))))))
 (let (($x115 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x113)))
 (let (($x155 (and $x115 $x154)))
 (let (($x156 (= $x155 true)))
 (let (($x91 (forall ((input.ind-%var40X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var40X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x31 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x31))))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var40X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var40X)))
 (=> $x30 (= ?x22 ?x58))))))))
 ))
 (let (($x13 (forall ((input.ind-%var39X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var39X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var39X) (bvult input.ind-%var39X input.dst.llvm-%n)))))
 ))
 (let (($x92 (and $x13 $x91)))
 (let (($x93 (= $x92 true)))
 (let (($x157 (and $x93 $x156)))
 (let (($x171 (and $x157 $x170)))
 (let (($x185 (and $x171 $x184)))
 (let (($x9 (forall ((input.ind-%var52X (_ BitVec 32)) )(let ((?x68 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var52X)))
 (let ((?x22 (input.spec-%var-x-1.1.1 input.ind-%var52X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var52X)))
 (=> $x30 (= ?x22 ?x68))))))
 ))
 (let (($x69 (forall ((input.ind-%var51X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var51X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var51X)))
 (= $x30 $x76))))
 ))
 (let (($x23 (and $x69 $x9)))
 (let (($x186 (and $x23 $x185)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x187 (and $x34 $x186)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x188 (and $x25 $x187)))
 (let (($x48 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x48 $x188)))
 (let (($x191 (=> $x189 $x190)))
 (not $x191))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xecfc4978)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfec0e7c4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfec0e7c7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xecfc497b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfec0e7c4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xecfc4978)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfec0e7c7)
                                   (k!0 #xfec0e7c6)
                                   (k!0 #xfec0e7c5)
                                   (k!0 #xfec0e7c4)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfec0e7c7)
                                   (k!0 #xfec0e7c6)
                                   (k!0 #xfec0e7c5)
                                   (k!0 #xfec0e7c4)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfec0e7c7)
                                   (k!0 #xfec0e7c6)
                                   (k!0 #xfec0e7c5)
                                   (k!0 #xfec0e7c4)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xfec0e7c7)
                                   (k!0 #xfec0e7c6)
                                   (k!0 #xfec0e7c5)
                                   (k!0 #xfec0e7c4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000404)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000407)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00010003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000404)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00010000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000407)
                                   (k!0 #x00000406)
                                   (k!0 #x00000405)
                                   (k!0 #x00000404)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000407)
                                   (k!0 #x00000406)
                                   (k!0 #x00000405)
                                   (k!0 #x00000404)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000407)
                                   (k!0 #x00000406)
                                   (k!0 #x00000405)
                                   (k!0 #x00000404)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000407)
                                   (k!0 #x00000406)
                                   (k!0 #x00000405)
                                   (k!0 #x00000404))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00010003)
                        (k!0 #x00010002)
                        (k!0 #x00010001)
                        (k!0 #x00010000))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x190)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x188)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x179 $x183)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x176 $x184)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x169 $x170)))
 (let (($x180 (not $x171)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x162 $x165)))
 (let (($x177 (and (not $x168) $x180)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x167 $x163)))
 (let (($x160 (not $x164)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x115 $x106)))
 (let (($x159 (and (not $x166) $x160)))
 (let (($x94 (and (and (and (and (and (and $x159 $x177) $x174) $x173) $x185) $x187) $x189)))
 (let (($x172 (and $x94 $x191)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x155 (or false (or false (and (and true (or $x141 $x151)) (or $x145 $x153))))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x21 (and $x157 $x172)))
 (let (($x33 (= $x21 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x40 (concat ?x63 (concat ?x50 ?x61)))))
 (let (($x38 (= input.dst.llvm-%n ?x20)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x56 (concat ?x54 (concat ?x8 ?x27)))))
 (let (($x79 (= input.dst.llvm-%x ?x78)))
 (let (($x62 (and $x79 $x38)))
 (let (($x45 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x157) $x172)))
 (let (($x77 (and $x45 $x62)))
 (let (($x113 (forall ((input.ind-%var78X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var78X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x128))))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var78X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var78X)))
 (=> $x30 (= ?x87 ?x116))))))))
 ))
 (let (($x75 (forall ((input.ind-%var77X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var77X) (bvult input.ind-%var77X input.dst.llvm-%n)))))
 ))
 (let (($x130 (and $x75 $x113)))
 (let (($x84 (and $x130 $x77)))
 (let (($x35 (= $x84 true)))
 (let (($x101 (forall ((input.ind-%var88X (_ BitVec 32)) )(let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var88X)))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var88X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (=> $x30 (= ?x87 ?x66))))))
 ))
 (let (($x72 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var87X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var87X)))
 (= $x30 $x67))))
 ))
 (let (($x121 (and $x72 $x101)))
 (let (($x15 (and $x121 $x35)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x29 $x15)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x7 $x44)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x34 $x37)))
 (let (($x89 (=> $x81 $x33)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x190)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x189 (= (_ bv0 32) ?x188)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x187 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x186)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x179 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (and $x179 $x183)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (and $x176 $x184)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x169 $x170)))
 (let (($x180 (not $x171)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x162 $x165)))
 (let (($x177 (and (not $x168) $x180)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x167 $x163)))
 (let (($x160 (not $x164)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x166 (and $x115 $x106)))
 (let (($x159 (and (not $x166) $x160)))
 (let (($x94 (and (and (and (and (and (and $x159 $x177) $x174) $x173) $x185) $x187) $x189)))
 (let (($x172 (and $x94 $x191)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x140 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x140)))
 (let (($x151 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x140)))
 (let (($x155 (or false (or false (and (and true (or $x141 $x151)) (or $x145 $x153))))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x21 (and $x157 $x172)))
 (let (($x33 (= $x21 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x20 (concat ?x40 (concat ?x63 (concat ?x50 ?x61)))))
 (let (($x38 (= input.dst.llvm-%n ?x20)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x56 (concat ?x54 (concat ?x8 ?x27)))))
 (let (($x79 (= input.dst.llvm-%x ?x78)))
 (let (($x62 (and $x79 $x38)))
 (let (($x45 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x157) $x172)))
 (let (($x77 (and $x45 $x62)))
 (let (($x113 (forall ((input.ind-%var78X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var78X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x128))))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var78X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var78X)))
 (=> $x30 (= ?x87 ?x116))))))))
 ))
 (let (($x75 (forall ((input.ind-%var77X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var77X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var77X) (bvult input.ind-%var77X input.dst.llvm-%n)))))
 ))
 (let (($x130 (and $x75 $x113)))
 (let (($x84 (and $x130 $x77)))
 (let (($x35 (= $x84 true)))
 (let (($x101 (forall ((input.ind-%var88X (_ BitVec 32)) )(let ((?x66 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var88X)))
 (let ((?x87 (input.spec-%var-x-1.1.1 input.ind-%var88X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var88X)))
 (=> $x30 (= ?x87 ?x66))))))
 ))
 (let (($x72 (forall ((input.ind-%var87X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var87X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var87X)))
 (= $x30 $x67))))
 ))
 (let (($x121 (and $x72 $x101)))
 (let (($x15 (and $x121 $x35)))
 (let (($x29 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x44 (and $x29 $x15)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x37 (and $x7 $x44)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x34 $x37)))
 (let (($x89 (=> $x81 $x33)))
 (not $x89))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x109 (= $x59 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x96 (concat ?x148 (concat ?x125 ?x69)))))
 (let (($x99 (= input.dst.llvm-%n ?x133)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x150 (concat ?x13 (concat ?x51 ?x80)))))
 (let (($x136 (= input.dst.llvm-%x ?x107)))
 (let (($x98 (and $x136 $x99)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x37)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x15)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x17 $x38)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x52 $x62)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x11 $x78)))
 (let (($x16 (not $x79)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x8 $x27)))
 (let (($x83 (and (not $x5) $x16)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x74 (not $x56)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x169 $x162)))
 (let (($x46 (and (not $x172) $x74)))
 (let (($x111 (and (and (and (and (and (and $x46 $x83) $x24) $x61) $x77) $x35) $x44)))
 (let (($x60 (and $x111 $x81)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x94 (or false (or false (and (and true (or $x179 $x182)) (or $x186 $x187))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x94)))
 (let (($x157 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x14 (and (and (and $x157 $x191) $x60) $x98)))
 (let (($x152 (forall ((input.ind-%var98X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var98X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x160))))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var98X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var98X)))
 (=> $x30 (= ?x167 ?x144))))))))
 ))
 (let (($x135 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var97X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var97X) (bvult input.ind-%var97X input.dst.llvm-%n)))))
 ))
 (let (($x139 (and $x135 $x152)))
 (let (($x42 (and $x139 $x14)))
 (let (($x97 (= $x42 true)))
 (let (($x128 (forall ((input.ind-%var108X (_ BitVec 32)) )(let ((?x112 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var108X)))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var108X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var108X)))
 (=> $x30 (= ?x167 ?x112))))))
 ))
 (let (($x88 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var107X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var107X)))
 (= $x30 $x72))))
 ))
 (let (($x23 (and $x88 $x128)))
 (let (($x36 (and $x23 $x97)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x7 $x36)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x120 (and $x18 $x85)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x34 $x120)))
 (let (($x91 (=> $x110 $x109)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x109 (= $x59 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x133 (concat ?x96 (concat ?x148 (concat ?x125 ?x69)))))
 (let (($x99 (= input.dst.llvm-%n ?x133)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x107 (concat ?x150 (concat ?x13 (concat ?x51 ?x80)))))
 (let (($x136 (= input.dst.llvm-%x ?x107)))
 (let (($x98 (and $x136 $x99)))
 (let ((?x37 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x37)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x15)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x84)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x38 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x17 $x38)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x77 (and $x52 $x62)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x11 $x78)))
 (let (($x16 (not $x79)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x5 (and $x8 $x27)))
 (let (($x83 (and (not $x5) $x16)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x45 $x28)))
 (let (($x74 (not $x56)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x169 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (and $x169 $x162)))
 (let (($x46 (and (not $x172) $x74)))
 (let (($x111 (and (and (and (and (and (and $x46 $x83) $x24) $x61) $x77) $x35) $x44)))
 (let (($x60 (and $x111 $x81)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x186 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x179 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x94 (or false (or false (and (and true (or $x179 $x182)) (or $x186 $x187))))))
 (let (($x191 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x94)))
 (let (($x157 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x14 (and (and (and $x157 $x191) $x60) $x98)))
 (let (($x152 (forall ((input.ind-%var98X (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul input.ind-%var98X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x160))))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var98X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var98X)))
 (=> $x30 (= ?x167 ?x144))))))))
 ))
 (let (($x135 (forall ((input.ind-%var97X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var97X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var97X) (bvult input.ind-%var97X input.dst.llvm-%n)))))
 ))
 (let (($x139 (and $x135 $x152)))
 (let (($x42 (and $x139 $x14)))
 (let (($x97 (= $x42 true)))
 (let (($x128 (forall ((input.ind-%var108X (_ BitVec 32)) )(let ((?x112 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var108X)))
 (let ((?x167 (input.spec-%var-x-1.1.1 input.ind-%var108X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var108X)))
 (=> $x30 (= ?x167 ?x112))))))
 ))
 (let (($x88 (forall ((input.ind-%var107X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var107X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var107X)))
 (= $x30 $x72))))
 ))
 (let (($x23 (and $x88 $x128)))
 (let (($x36 (and $x23 $x97)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x85 (and $x7 $x36)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x120 (and $x18 $x85)))
 (let (($x34 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x110 (and $x34 $x120)))
 (let (($x91 (=> $x110 $x109)))
 (not $x91))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000005) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x75a80bd0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ccb5ad4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xbebebe02)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xbfffbe00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ccb5ad7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x75a80bd3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ccb5ad4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x75a80bd0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbfffbe01) #x00
    (ite (= x!0 #x0ccb5ad6) #xff
    (ite (= x!0 #x75a80bd0) #x02
    (ite (= x!0 #xbfffbe03) #x00
    (ite (= x!0 #xbfffbe02) #x00
    (ite (= x!0 #xbfffbe00) #x00
    (ite (= x!0 #x0ccb5ad7) #xbf
    (ite (= x!0 #x0ccb5ad4) #x00
      #xbe)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xbebebe02 x!0)
         (ite (bvule #xbebebe03 x!0) #xbebebe03 #xbebebe02)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 ((_ extract 8 0) input.dst.llvm-%x)))
 (let (($x118 (= (_ bv0 9) ?x141)))
 (let (($x119 (= $x118 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x146 (concat ?x145 (concat ?x114 ?x87)))))
 (let (($x180 (= input.dst.llvm-%n ?x113)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x174 (concat ?x161 (concat ?x67 ?x102)))))
 (let (($x12 (= input.dst.llvm-%x ?x70)))
 (let (($x170 (and $x12 $x180)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x110)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x85)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x133 $x98)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x95 $x14)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x107 $x136)))
 (let (($x96 (not $x26)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x80 $x129)))
 (let (($x148 (and (not $x48) $x96)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x76 $x150)))
 (let (($x13 (not $x41)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x78 $x27)))
 (let (($x51 (and (not $x22) $x13)))
 (let (($x166 (and (and (and (and (and (and $x51 $x148) $x125) $x108) $x42) $x36) $x120)))
 (let (($x68 (and $x166 $x59)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x37 (or false (or false (and (and true (or $x20 $x38)) (or $x35 $x123))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x37)))
 (let (($x134 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x66 (and (and (and $x134 $x60) $x68) $x170)))
 (let (($x186 (forall ((input.ind-%var134X (_ BitVec 32)) )(let ((?x24 (bvadd (bvmul input.ind-%var134X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x46))))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var134X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var134X)))
 (=> $x30 (= ?x28 ?x187))))))))
 ))
 (let (($x171 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var133X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var133X) (bvult input.ind-%var133X input.dst.llvm-%n)))))
 ))
 (let (($x182 (and $x171 $x186)))
 (let (($x9 (and $x182 $x66)))
 (let (($x115 (= $x9 true)))
 (let (($x137 (forall ((input.ind-%var144X (_ BitVec 32)) )(let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var144X)))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var144X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (=> $x30 (= ?x28 ?x151))))))
 ))
 (let (($x165 (forall ((input.ind-%var143X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var143X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var143X)))
 (= $x30 $x88))))
 ))
 (let (($x144 (and $x165 $x137)))
 (let (($x29 (and $x144 $x115)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x7 $x29)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x93 (and $x18 $x104)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x149 $x93)))
 (let (($x193 (=> $x64 $x119)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 ((_ extract 8 0) input.dst.llvm-%x)))
 (let (($x118 (= (_ bv0 9) ?x141)))
 (let (($x119 (= $x118 true)))
 (let ((?x87 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x146 (concat ?x145 (concat ?x114 ?x87)))))
 (let (($x180 (= input.dst.llvm-%n ?x113)))
 (let ((?x102 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x174 (concat ?x161 (concat ?x67 ?x102)))))
 (let (($x12 (= input.dst.llvm-%x ?x70)))
 (let (($x170 (and $x12 $x180)))
 (let ((?x110 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x110)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x120 (= (_ bv0 32) ?x85)))
 (let ((?x97 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x99 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x99)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x133 $x98)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x95 $x14)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x107 $x136)))
 (let (($x96 (not $x26)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x80 $x129)))
 (let (($x148 (and (not $x48) $x96)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x76 $x150)))
 (let (($x13 (not $x41)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x78 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x78 $x27)))
 (let (($x51 (and (not $x22) $x13)))
 (let (($x166 (and (and (and (and (and (and $x51 $x148) $x125) $x108) $x42) $x36) $x120)))
 (let (($x68 (and $x166 $x59)))
 (let (($x123 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x17 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x17)))
 (let (($x38 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x17)))
 (let (($x37 (or false (or false (and (and true (or $x20 $x38)) (or $x35 $x123))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x37)))
 (let (($x134 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x66 (and (and (and $x134 $x60) $x68) $x170)))
 (let (($x186 (forall ((input.ind-%var134X (_ BitVec 32)) )(let ((?x24 (bvadd (bvmul input.ind-%var134X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv1 32))) (select input.dst.llvm-mem ?x24))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x24 (_ bv2 32))) ?x46))))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var134X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var134X)))
 (=> $x30 (= ?x28 ?x187))))))))
 ))
 (let (($x171 (forall ((input.ind-%var133X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var133X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var133X) (bvult input.ind-%var133X input.dst.llvm-%n)))))
 ))
 (let (($x182 (and $x171 $x186)))
 (let (($x9 (and $x182 $x66)))
 (let (($x115 (= $x9 true)))
 (let (($x137 (forall ((input.ind-%var144X (_ BitVec 32)) )(let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var144X)))
 (let ((?x28 (input.spec-%var-x-1.1.1 input.ind-%var144X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var144X)))
 (=> $x30 (= ?x28 ?x151))))))
 ))
 (let (($x165 (forall ((input.ind-%var143X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var143X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var143X)))
 (= $x30 $x88))))
 ))
 (let (($x144 (and $x165 $x137)))
 (let (($x29 (and $x144 $x115)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x104 (and $x7 $x29)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x93 (and $x18 $x104)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x64 (and $x149 $x93)))
 (let (($x193 (=> $x64 $x119)))
 (not $x193)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18c2180c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb9968858)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb996885b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18c2180f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb9968858)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18c2180c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9968859) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00d42004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x004489c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x80800180)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00d42007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x004489c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00d42004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x004489c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00d42005) #x01
      #x80))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x004489c3)
                        (k!0 #x004489c2)
                        (k!0 #x004489c1)
                        (k!0 #x004489c0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x147 (= (_ bv0 1) ?x169)))
 (let (($x19 (= $x147 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x11 (concat ?x21 (concat ?x167 ?x50)))))
 (let (($x188 (= input.dst.llvm-%n ?x142)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x25 (concat ?x40 (concat ?x155 ?x86)))))
 (let (($x33 (= input.dst.llvm-%x ?x101)))
 (let (($x139 (and $x33 $x188)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x64)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x104)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (and $x113 $x170)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x181 $x66)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x70 $x12)))
 (let (($x146 (not $x130)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x102 $x168)))
 (let (($x145 (and (not $x6) $x146)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x39 $x174)))
 (let (($x161 (not $x57)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x136 $x129)))
 (let (($x67 (and (not $x124) $x161)))
 (let (($x135 (and (and (and (and (and (and $x67 $x145) $x114) $x177) $x9) $x29) $x93)))
 (let (($x55 (and $x135 $x103)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x133)))
 (let (($x110 (or false (or false (and (and true (or $x99 $x98)) (or $x36 $x31))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x192 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x63 (and (and (and $x192 $x68) $x55) $x139)))
 (let (($x35 (forall ((input.ind-%var170X (_ BitVec 32)) )(let ((?x125 (bvadd (bvmul input.ind-%var170X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x51))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var170X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var170X)))
 (=> $x30 (= ?x150 ?x123))))))))
 ))
 (let (($x16 (forall ((input.ind-%var169X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var169X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var169X) (bvult input.ind-%var169X input.dst.llvm-%n)))))
 ))
 (let (($x38 (and $x16 $x35)))
 (let (($x105 (and $x38 $x63)))
 (let (($x112 (= $x105 true)))
 (let (($x190 (forall ((input.ind-%var180X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var180X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var180X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var180X)))
 (=> $x30 (= ?x150 ?x183))))))
 ))
 (let (($x5 (forall ((input.ind-%var179X (_ BitVec 32)) )(let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var179X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (= $x30 $x165))))
 ))
 (let (($x187 (and $x5 $x190)))
 (let (($x32 (and $x187 $x112)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x18 $x32)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x153 $x162)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x157 (and $x149 $x10)))
 (let (($x156 (=> $x157 $x19)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x147 (= (_ bv0 1) ?x169)))
 (let (($x19 (= $x147 true)))
 (let ((?x50 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x142 (concat ?x11 (concat ?x21 (concat ?x167 ?x50)))))
 (let (($x188 (= input.dst.llvm-%n ?x142)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x101 (concat ?x25 (concat ?x40 (concat ?x155 ?x86)))))
 (let (($x33 (= input.dst.llvm-%x ?x101)))
 (let (($x139 (and $x33 $x188)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x64)))
 (let ((?x104 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x93 (= (_ bv0 32) ?x104)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x115)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (and $x113 $x170)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x181 $x66)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (and $x70 $x12)))
 (let (($x146 (not $x130)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x102 $x168)))
 (let (($x145 (and (not $x6) $x146)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x39 $x174)))
 (let (($x161 (not $x57)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x124 (and $x136 $x129)))
 (let (($x67 (and (not $x124) $x161)))
 (let (($x135 (and (and (and (and (and (and $x67 $x145) $x114) $x177) $x9) $x29) $x93)))
 (let (($x55 (and $x135 $x103)))
 (let (($x31 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x133)))
 (let (($x110 (or false (or false (and (and true (or $x99 $x98)) (or $x36 $x31))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x110)))
 (let (($x192 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x63 (and (and (and $x192 $x68) $x55) $x139)))
 (let (($x35 (forall ((input.ind-%var170X (_ BitVec 32)) )(let ((?x125 (bvadd (bvmul input.ind-%var170X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x51))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var170X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var170X)))
 (=> $x30 (= ?x150 ?x123))))))))
 ))
 (let (($x16 (forall ((input.ind-%var169X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var169X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var169X) (bvult input.ind-%var169X input.dst.llvm-%n)))))
 ))
 (let (($x38 (and $x16 $x35)))
 (let (($x105 (and $x38 $x63)))
 (let (($x112 (= $x105 true)))
 (let (($x190 (forall ((input.ind-%var180X (_ BitVec 32)) )(let ((?x183 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var180X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var180X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var180X)))
 (=> $x30 (= ?x150 ?x183))))))
 ))
 (let (($x5 (forall ((input.ind-%var179X (_ BitVec 32)) )(let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var179X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var179X)))
 (= $x30 $x165))))
 ))
 (let (($x187 (and $x5 $x190)))
 (let (($x32 (and $x187 $x112)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x162 (and $x18 $x32)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x10 (and $x153 $x162)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x157 (and $x149 $x10)))
 (let (($x156 (=> $x157 $x19)))
 (not $x156)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00001064)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00001067)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00001064)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001064) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00001067)
                        (k!0 #x00001066)
                        (k!0 #x00001065)
                        (k!0 #x00001064))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb87f5cc8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf897c5c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xefefef01)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf6a9ef00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf897c5c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb87f5ccb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf897c5c0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb87f5cc8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf6a9ef01) #x00
    (ite (= x!0 #xf897c5c2) #xa9
    (ite (= x!0 #xb87f5cc8) #x01
    (ite (= x!0 #xf6a9ef03) #x00
    (ite (= x!0 #xf6a9ef02) #x00
    (ite (= x!0 #xf6a9ef00) #x00
    (ite (= x!0 #xf897c5c3) #xf6
    (ite (= x!0 #xf897c5c0) #x00
      #xef)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xefefef01 x!0)
         (ite (bvule #xefefef02 x!0) #xefefef02 #xefefef01)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 ((_ extract 6 0) input.dst.llvm-%x)))
 (let (($x189 (= (_ bv0 7) ?x78)))
 (let (($x52 (= $x189 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x107 (concat ?x109 (concat ?x28 ?x69)))))
 (let (($x44 (= input.dst.llvm-%n ?x184)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x58 (concat ?x126 (concat ?x191 ?x121)))))
 (let (($x91 (= input.dst.llvm-%x ?x128)))
 (let (($x182 (and $x91 $x44)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x10)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x32)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x94 $x188)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x159 $x139)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x175 $x101)))
 (let (($x49 (not $x33)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x155 $x86)))
 (let (($x152 (and (not $x143) $x49)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x79 $x45)))
 (let (($x72 (not $x25)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x70 $x102)))
 (let (($x158 (and (not $x55) $x72)))
 (let (($x53 (and (and (and (and (and (and $x158 $x152) $x131) $x50) $x63) $x112) $x162)))
 (let (($x47 (and $x53 $x157)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x135 (or false (or false (and (and true (or $x113 $x180)) (or $x115 $x29))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (and (and (and $x68 $x103) $x47) $x182)))
 (let (($x75 (forall ((input.ind-%var206X (_ BitVec 32)) )(let ((?x132 (bvadd (bvmul input.ind-%var206X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x161))))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var206X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (=> $x30 (= ?x39 ?x97))))))))
 ))
 (let (($x125 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var205X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var205X) (bvult input.ind-%var205X input.dst.llvm-%n)))))
 ))
 (let (($x95 (and $x125 $x75)))
 (let (($x138 (and $x95 $x117)))
 (let (($x151 (= $x138 true)))
 (let (($x51 (forall ((input.ind-%var216X (_ BitVec 32)) )(let ((?x20 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var216X)))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var216X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var216X)))
 (=> $x30 (= ?x39 ?x20))))))
 ))
 (let (($x192 (forall ((input.ind-%var215X (_ BitVec 32)) )(let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var215X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var215X)))
 (= $x30 $x5))))
 ))
 (let (($x81 (and $x192 $x51)))
 (let (($x164 (and $x81 $x151)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x153 $x164)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x7 (and $x171 $x27)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x149 $x7)))
 (let (($x173 (=> $x134 $x52)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x78 ((_ extract 6 0) input.dst.llvm-%x)))
 (let (($x189 (= (_ bv0 7) ?x78)))
 (let (($x52 (= $x189 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x184 (concat ?x107 (concat ?x109 (concat ?x28 ?x69)))))
 (let (($x44 (= input.dst.llvm-%n ?x184)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x58 (concat ?x126 (concat ?x191 ?x121)))))
 (let (($x91 (= input.dst.llvm-%x ?x128)))
 (let (($x182 (and $x91 $x44)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x157 (= (_ bv0 32) ?x10)))
 (let ((?x32 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x162 (= (_ bv0 32) ?x32)))
 (let ((?x105 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x142 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (and $x94 $x188)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x159 $x139)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x175 $x101)))
 (let (($x49 (not $x33)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (and $x155 $x86)))
 (let (($x152 (and (not $x143) $x49)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x79 $x45)))
 (let (($x72 (not $x25)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x70 $x102)))
 (let (($x158 (and (not $x55) $x72)))
 (let (($x53 (and (and (and (and (and (and $x158 $x152) $x131) $x50) $x63) $x112) $x162)))
 (let (($x47 (and $x53 $x157)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x181 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x180 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x181)))
 (let (($x135 (or false (or false (and (and true (or $x113 $x180)) (or $x115 $x29))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x135)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x117 (and (and (and $x68 $x103) $x47) $x182)))
 (let (($x75 (forall ((input.ind-%var206X (_ BitVec 32)) )(let ((?x132 (bvadd (bvmul input.ind-%var206X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem ?x132))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x132 (_ bv2 32))) ?x161))))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var206X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var206X)))
 (=> $x30 (= ?x39 ?x97))))))))
 ))
 (let (($x125 (forall ((input.ind-%var205X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var205X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var205X) (bvult input.ind-%var205X input.dst.llvm-%n)))))
 ))
 (let (($x95 (and $x125 $x75)))
 (let (($x138 (and $x95 $x117)))
 (let (($x151 (= $x138 true)))
 (let (($x51 (forall ((input.ind-%var216X (_ BitVec 32)) )(let ((?x20 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var216X)))
 (let ((?x39 (input.spec-%var-x-1.1.1 input.ind-%var216X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var216X)))
 (=> $x30 (= ?x39 ?x20))))))
 ))
 (let (($x192 (forall ((input.ind-%var215X (_ BitVec 32)) )(let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var215X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var215X)))
 (= $x30 $x5))))
 ))
 (let (($x81 (and $x192 $x51)))
 (let (($x164 (and $x81 $x151)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x27 (and $x153 $x164)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x7 (and $x171 $x27)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x134 (and $x149 $x7)))
 (let (($x173 (=> $x134 $x52)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000041c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0740a1ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000041c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000041c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x40)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x000041c3)
                        (k!0 #x000041c2)
                        (k!0 #x000041c1)
                        (k!0 #x000041c0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xe7fffe40)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1477b6d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x46bffaf3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x46bffaf1) #x00
    (ite (= x!0 #x1477b6d6) #xff
    (ite (= x!0 #x46bffaf0) #x00
    (ite (= x!0 #x46bffaf3) #x00
    (ite (= x!0 #x46bffaf2) #x00
    (ite (= x!0 #x1477b6d7) #xe7
    (ite (= x!0 #x1477b6d4) #x40
      #xfe))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!6 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!2 (k!6 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!3 (k!6 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 ((_ extract 5 0) input.dst.llvm-%x)))
 (let (($x82 (= (_ bv0 6) ?x83)))
 (let (($x99 (= $x82 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x154 (concat ?x145 (concat ?x150 ?x118)))))
 (let (($x85 (= input.dst.llvm-%n ?x38)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x160 (concat ?x6 (concat ?x77 ?x23)))))
 (let (($x114 (= input.dst.llvm-%x ?x137)))
 (let (($x35 (and $x114 $x85)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x134)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x27)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x184 $x182)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x37 $x117)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x128 $x91)))
 (let (($x107 (not $x84)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x121 $x185)))
 (let (($x109 (and (not $x61) $x107)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x76 $x58)))
 (let (($x126 (not $x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x101 $x86)))
 (let (($x191 (and (not $x26) $x126)))
 (let (($x16 (and (and (and (and (and (and $x191 $x109) $x28) $x8) $x138) $x164) $x7)))
 (let (($x178 (and $x16 $x127)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x10 (or false (or false (and (and true (or $x142 $x188)) (or $x112 $x156))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x10)))
 (let (($x148 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x141 (and (and (and $x148 $x47) $x178) $x35)))
 (let (($x115 (forall ((input.ind-%var242X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var242X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x158))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var242X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var242X)))
 (=> $x30 (= ?x45 ?x29))))))))
 ))
 (let (($x130 (forall ((input.ind-%var241X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var241X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var241X) (bvult input.ind-%var241X input.dst.llvm-%n)))))
 ))
 (let (($x180 (and $x130 $x115)))
 (let (($x176 (and $x180 $x141)))
 (let (($x183 (= $x176 true)))
 (let (($x108 (forall ((input.ind-%var252X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var252X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var252X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var252X)))
 (=> $x30 (= ?x45 ?x98))))))
 ))
 (let (($x168 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x192 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var251X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var251X)))
 (= $x30 $x192))))
 ))
 (let (($x97 (and $x168 $x108)))
 (let (($x74 (and $x97 $x183)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x171 $x74)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x18 (and $x116 $x136)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x149 $x18)))
 (let (($x111 (=> $x60 $x99)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x83 ((_ extract 5 0) input.dst.llvm-%x)))
 (let (($x82 (= (_ bv0 6) ?x83)))
 (let (($x99 (= $x82 true)))
 (let ((?x118 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x38 (concat ?x154 (concat ?x145 (concat ?x150 ?x118)))))
 (let (($x85 (= input.dst.llvm-%n ?x38)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x137 (concat ?x160 (concat ?x6 (concat ?x77 ?x23)))))
 (let (($x114 (= input.dst.llvm-%x ?x137)))
 (let (($x35 (and $x114 $x85)))
 (let ((?x134 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x134)))
 (let ((?x27 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x27)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x164 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x44 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x44)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x184 $x182)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (and $x37 $x117)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x128 $x91)))
 (let (($x107 (not $x84)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x121 $x185)))
 (let (($x109 (and (not $x61) $x107)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x76 $x58)))
 (let (($x126 (not $x88)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x101 $x86)))
 (let (($x191 (and (not $x26) $x126)))
 (let (($x16 (and (and (and (and (and (and $x191 $x109) $x28) $x8) $x138) $x164) $x7)))
 (let (($x178 (and $x16 $x127)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x10 (or false (or false (and (and true (or $x142 $x188)) (or $x112 $x156))))))
 (let (($x47 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x10)))
 (let (($x148 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x141 (and (and (and $x148 $x47) $x178) $x35)))
 (let (($x115 (forall ((input.ind-%var242X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var242X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x158 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x158))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var242X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var242X)))
 (=> $x30 (= ?x45 ?x29))))))))
 ))
 (let (($x130 (forall ((input.ind-%var241X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var241X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var241X) (bvult input.ind-%var241X input.dst.llvm-%n)))))
 ))
 (let (($x180 (and $x130 $x115)))
 (let (($x176 (and $x180 $x141)))
 (let (($x183 (= $x176 true)))
 (let (($x108 (forall ((input.ind-%var252X (_ BitVec 32)) )(let ((?x98 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var252X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var252X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var252X)))
 (=> $x30 (= ?x45 ?x98))))))
 ))
 (let (($x168 (forall ((input.ind-%var251X (_ BitVec 32)) )(let (($x192 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var251X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var251X)))
 (= $x30 $x192))))
 ))
 (let (($x97 (and $x168 $x108)))
 (let (($x74 (and $x97 $x183)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x136 (and $x171 $x74)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x18 (and $x116 $x136)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x149 $x18)))
 (let (($x111 (=> $x60 $x99)))
 (not $x111)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000041c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0740a1ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000041c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000041c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x20)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x000041c3)
                        (k!0 #x000041c2)
                        (k!0 #x000041c1)
                        (k!0 #x000041c0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xe7fffe04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1477b6d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x46bffaf3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x46bffaf1) #x00
    (ite (= x!0 #x1477b6d6) #xff
    (ite (= x!0 #x46bffaf0) #x00
    (ite (= x!0 #x46bffaf3) #x00
    (ite (= x!0 #x46bffaf2) #x00
    (ite (= x!0 #x1477b6d5) #xfe
    (ite (= x!0 #x1477b6d7) #xe7
      #x04))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!6 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!2 (k!6 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!3 (k!6 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x70)))
 (let (($x119 (= $x120 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x175 (concat ?x92 (concat ?x39 ?x167)))))
 (let (($x104 (= input.dst.llvm-%n ?x14)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x43 (concat ?x11 (concat ?x110 ?x144)))))
 (let (($x169 (= input.dst.llvm-%x ?x190)))
 (let (($x95 (and $x169 $x104)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x60)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x136)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x38 $x35)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x166 $x141)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x137 $x114)))
 (let (($x154 (not $x36)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x23 $x62)))
 (let (($x145 (and (not $x48) $x154)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x122 $x160)))
 (let (($x6 (not $x165)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x91 $x185)))
 (let (($x77 (and (not $x12) $x6)))
 (let (($x125 (and (and (and (and (and (and $x77 $x145) $x150) $x15) $x176) $x74) $x18)))
 (let (($x24 (and $x125 $x163)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x134 (or false (or false (and (and true (or $x44 $x182)) (or $x164 $x100))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x146 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x21 (and (and (and $x146 $x178) $x24) $x95)))
 (let (($x112 (forall ((input.ind-%var278X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var278X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x191))))
 (let ((?x58 (input.spec-%var-x-1.1.1 input.ind-%var278X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (=> $x30 (= ?x58 ?x156))))))))
 ))
 (let (($x49 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var277X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var277X) (bvult input.ind-%var277X input.dst.llvm-%n)))))
 ))
 (let (($x188 (and $x49 $x112)))
 (let (($x96 (and $x188 $x21)))
 (let (($x20 (= $x96 true)))
 (let (($x64 (forall ((input.ind-%var288X (_ BitVec 32)) )(let ((?x170 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var288X)))
 (let ((?x58 (input.spec-%var-x-1.1.1 input.ind-%var288X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var288X)))
 (=> $x30 (= ?x58 ?x170))))))
 ))
 (let (($x143 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var287X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var287X)))
 (= $x30 $x168))))
 ))
 (let (($x29 (and $x143 $x64)))
 (let (($x89 (and $x29 $x20)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x116 $x89)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x34 $x102)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x149 $x153)))
 (let (($x59 (=> $x68 $x119)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x70 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x120 (= (_ bv0 2) ?x70)))
 (let (($x119 (= $x120 true)))
 (let ((?x167 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x14 (concat ?x175 (concat ?x92 (concat ?x39 ?x167)))))
 (let (($x104 (= input.dst.llvm-%n ?x14)))
 (let ((?x144 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x43 (concat ?x11 (concat ?x110 ?x144)))))
 (let (($x169 (= input.dst.llvm-%x ?x190)))
 (let (($x95 (and $x169 $x104)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x163 (= (_ bv0 32) ?x60)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x18 (= (_ bv0 32) ?x136)))
 (let ((?x183 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x183)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (and $x38 $x35)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x166 $x141)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x137 $x114)))
 (let (($x154 (not $x36)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (and $x23 $x62)))
 (let (($x145 (and (not $x48) $x154)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x122 $x160)))
 (let (($x6 (not $x165)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x91 $x185)))
 (let (($x77 (and (not $x12) $x6)))
 (let (($x125 (and (and (and (and (and (and $x77 $x145) $x150) $x15) $x176) $x74) $x18)))
 (let (($x24 (and $x125 $x163)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x184 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x184)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x184)))
 (let (($x134 (or false (or false (and (and true (or $x44 $x182)) (or $x164 $x100))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x134)))
 (let (($x146 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x21 (and (and (and $x146 $x178) $x24) $x95)))
 (let (($x112 (forall ((input.ind-%var278X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var278X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x191))))
 (let ((?x58 (input.spec-%var-x-1.1.1 input.ind-%var278X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var278X)))
 (=> $x30 (= ?x58 ?x156))))))))
 ))
 (let (($x49 (forall ((input.ind-%var277X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var277X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var277X) (bvult input.ind-%var277X input.dst.llvm-%n)))))
 ))
 (let (($x188 (and $x49 $x112)))
 (let (($x96 (and $x188 $x21)))
 (let (($x20 (= $x96 true)))
 (let (($x64 (forall ((input.ind-%var288X (_ BitVec 32)) )(let ((?x170 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var288X)))
 (let ((?x58 (input.spec-%var-x-1.1.1 input.ind-%var288X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var288X)))
 (=> $x30 (= ?x58 ?x170))))))
 ))
 (let (($x143 (forall ((input.ind-%var287X (_ BitVec 32)) )(let (($x168 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var287X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var287X)))
 (= $x30 $x168))))
 ))
 (let (($x29 (and $x143 $x64)))
 (let (($x89 (and $x29 $x20)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x116 $x89)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x34 $x102)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x68 (and $x149 $x153)))
 (let (($x59 (=> $x68 $x119)))
 (not $x59)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 111 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x101 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x93 (= $x101 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x128 (concat ?x78 (concat ?x45 ?x69)))))
 (let (($x162 (= input.dst.llvm-%n ?x66)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x123 (concat ?x186 (concat ?x103 ?x187)))))
 (let (($x189 (= input.dst.llvm-%x ?x51)))
 (let (($x180 (and $x189 $x162)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x153)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x89)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x135 $x104)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x67 $x95)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x87 $x190)))
 (let (($x193 (not $x169)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x110 $x144)))
 (let (($x75 (and (not $x42) $x193)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x33 $x79)))
 (let (($x5 (not $x43)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x137 $x23)))
 (let (($x124 (and (not $x24) $x5)))
 (let (($x172 (and (and (and (and (and (and $x124 $x75) $x17) $x167) $x21) $x20) $x102)))
 (let (($x46 (and $x172 $x68)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x125 (or false (or false (and (and true (or $x38 $x85)) (or $x183 $x74))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x140 (and (and (and $x178 $x163) $x46) $x180)))
 (let (($x173 (forall ((input.ind-%var298X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var298X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x6))))
 (let ((?x122 (input.spec-%var-x-1.1.1 input.ind-%var298X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var298X)))
 (=> $x30 (= ?x122 ?x151))))))))
 ))
 (let (($x28 (forall ((input.ind-%var297X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var297X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var297X) (bvult input.ind-%var297X input.dst.llvm-%n)))))
 ))
 (let (($x37 (and $x28 $x173)))
 (let (($x65 (and $x37 $x140)))
 (let (($x98 (= $x65 true)))
 (let (($x191 (forall ((input.ind-%var308X (_ BitVec 32)) )(let ((?x142 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var308X)))
 (let ((?x122 (input.spec-%var-x-1.1.1 input.ind-%var308X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var308X)))
 (=> $x30 (= ?x122 ?x142))))))
 ))
 (let (($x146 (forall ((input.ind-%var307X (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var307X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var307X)))
 (= $x30 $x143))))
 ))
 (let (($x157 (and $x146 $x191)))
 (let (($x57 (and $x157 $x98)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x86 (and $x34 $x57)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x171 (and $x194 $x86)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x149 $x171)))
 (let (($x159 (=> $x148 $x93)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x101 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x93 (= $x101 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x66 (concat ?x128 (concat ?x78 (concat ?x45 ?x69)))))
 (let (($x162 (= input.dst.llvm-%n ?x66)))
 (let ((?x187 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x51 (concat ?x123 (concat ?x186 (concat ?x103 ?x187)))))
 (let (($x189 (= input.dst.llvm-%x ?x51)))
 (let (($x180 (and $x189 $x162)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x153)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x102 (= (_ bv0 32) ?x89)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x14 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x14)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x135 $x104)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x67 $x95)))
 (let (($x167 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x87 $x190)))
 (let (($x193 (not $x169)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x110 $x144)))
 (let (($x75 (and (not $x42) $x193)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x43 (and $x33 $x79)))
 (let (($x5 (not $x43)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x137 $x23)))
 (let (($x124 (and (not $x24) $x5)))
 (let (($x172 (and (and (and (and (and (and $x124 $x75) $x17) $x167) $x21) $x20) $x102)))
 (let (($x46 (and $x172 $x68)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x183 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x125 (or false (or false (and (and true (or $x38 $x85)) (or $x183 $x74))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x125)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x140 (and (and (and $x178 $x163) $x46) $x180)))
 (let (($x173 (forall ((input.ind-%var298X (_ BitVec 32)) )(let ((?x179 (bvadd (bvmul input.ind-%var298X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x6))))
 (let ((?x122 (input.spec-%var-x-1.1.1 input.ind-%var298X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var298X)))
 (=> $x30 (= ?x122 ?x151))))))))
 ))
 (let (($x28 (forall ((input.ind-%var297X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var297X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var297X) (bvult input.ind-%var297X input.dst.llvm-%n)))))
 ))
 (let (($x37 (and $x28 $x173)))
 (let (($x65 (and $x37 $x140)))
 (let (($x98 (= $x65 true)))
 (let (($x191 (forall ((input.ind-%var308X (_ BitVec 32)) )(let ((?x142 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var308X)))
 (let ((?x122 (input.spec-%var-x-1.1.1 input.ind-%var308X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var308X)))
 (=> $x30 (= ?x122 ?x142))))))
 ))
 (let (($x146 (forall ((input.ind-%var307X (_ BitVec 32)) )(let (($x143 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var307X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var307X)))
 (= $x30 $x143))))
 ))
 (let (($x157 (and $x146 $x191)))
 (let (($x57 (and $x157 $x98)))
 (let (($x34 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x86 (and $x34 $x57)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x171 (and $x194 $x86)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x148 (and $x149 $x171)))
 (let (($x159 (=> $x148 $x93)))
 (not $x159))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00064808)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0006480b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00064808)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040000) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0006480b)
                        (k!0 #x0006480a)
                        (k!0 #x00064809)
                        (k!0 #x00064808))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe96bd4a0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9a56c6d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x3bcbfc00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9a56c6d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe96bd4a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9a56c6d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe96bd4a0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe96bd4a1) #xff
    (ite (= x!0 #x9a56c6d6) #xcb
    (ite (= x!0 #xe96bd4a0) #xff
    (ite (= x!0 #x3bcbfc03) #x00
    (ite (= x!0 #xe96bd4a3) #xff
    (ite (= x!0 #x3bcbfc01) #x00
    (ite (= x!0 #xe96bd4a2) #xff
    (ite (= x!0 #x3bcbfc02) #x00
    (ite (= x!0 #x3bcbfc00) #x00
    (ite (= x!0 #x9a56c6d7) #x3b
    (ite (= x!0 #x9a56c6d4) #x00
      #xfc))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x19 (= $x152 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x188 (concat ?x16 (concat ?x32 ?x113)))))
 (let (($x112 (= input.dst.llvm-%n ?x27)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x108 (concat ?x61 (concat ?x139 ?x54)))))
 (let (($x97 (= input.dst.llvm-%x ?x150)))
 (let (($x154 (and $x97 $x112)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x171)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x57)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x10 $x162)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x155 $x180)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x50 $x51)))
 (let (($x105 (not $x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x103 $x187)))
 (let (($x115 (and (not $x9) $x105)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x84 $x76)))
 (let (($x192 (not $x123)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x87 $x110)))
 (let (($x40 (and (not $x46) $x192)))
 (let (($x132 (and (and (and (and (and (and $x40 $x115) $x133) $x69) $x140) $x98) $x86)))
 (let (($x12 (and $x132 $x148)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x172 (or false (or false (and (and true (or $x135 $x14)) (or $x96 $x20))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x163 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x181 (and (and (and $x163 $x68) $x12) $x154)))
 (let (($x176 (forall ((input.ind-%var334X (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul input.ind-%var334X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x5))))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var334X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var334X)))
 (=> $x30 (= ?x33 ?x111))))))))
 ))
 (let (($x179 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var333X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var333X) (bvult input.ind-%var333X input.dst.llvm-%n)))))
 ))
 (let (($x99 (and $x179 $x176)))
 (let (($x170 (and $x99 $x181)))
 (let (($x72 (= $x170 true)))
 (let (($x6 (forall ((input.ind-%var344X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var344X)))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var344X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var344X)))
 (=> $x30 (= ?x33 ?x184))))))
 ))
 (let (($x178 (forall ((input.ind-%var343X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var343X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var343X)))
 (= $x30 $x146))))
 ))
 (let (($x8 (and $x178 $x6)))
 (let (($x91 (and $x8 $x72)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x194 $x91)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x47 (and $x156 $x116)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x149 $x47)))
 (let (($x44 (=> $x174 $x19)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x152 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x19 (= $x152 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x27 (concat ?x188 (concat ?x16 (concat ?x32 ?x113)))))
 (let (($x112 (= input.dst.llvm-%n ?x27)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x108 (concat ?x61 (concat ?x139 ?x54)))))
 (let (($x97 (= input.dst.llvm-%x ?x150)))
 (let (($x154 (and $x97 $x112)))
 (let ((?x171 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x148 (= (_ bv0 32) ?x171)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x57)))
 (let ((?x65 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x162 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x10 $x162)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x140 (and $x155 $x180)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x50 $x51)))
 (let (($x105 (not $x189)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x103 $x187)))
 (let (($x115 (and (not $x9) $x105)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x84 $x76)))
 (let (($x192 (not $x123)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x87 $x110)))
 (let (($x40 (and (not $x46) $x192)))
 (let (($x132 (and (and (and (and (and (and $x40 $x115) $x133) $x69) $x140) $x98) $x86)))
 (let (($x12 (and $x132 $x148)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x67 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x67)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x67)))
 (let (($x172 (or false (or false (and (and true (or $x135 $x14)) (or $x96 $x20))))))
 (let (($x68 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x163 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x181 (and (and (and $x163 $x68) $x12) $x154)))
 (let (($x176 (forall ((input.ind-%var334X (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul input.ind-%var334X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x5))))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var334X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var334X)))
 (=> $x30 (= ?x33 ?x111))))))))
 ))
 (let (($x179 (forall ((input.ind-%var333X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var333X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var333X) (bvult input.ind-%var333X input.dst.llvm-%n)))))
 ))
 (let (($x99 (and $x179 $x176)))
 (let (($x170 (and $x99 $x181)))
 (let (($x72 (= $x170 true)))
 (let (($x6 (forall ((input.ind-%var344X (_ BitVec 32)) )(let ((?x184 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var344X)))
 (let ((?x33 (input.spec-%var-x-1.1.1 input.ind-%var344X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var344X)))
 (=> $x30 (= ?x33 ?x184))))))
 ))
 (let (($x178 (forall ((input.ind-%var343X (_ BitVec 32)) )(let (($x146 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var343X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var343X)))
 (= $x30 $x146))))
 ))
 (let (($x8 (and $x178 $x6)))
 (let (($x91 (and $x8 $x72)))
 (let (($x194 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x116 (and $x194 $x91)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x47 (and $x156 $x116)))
 (let (($x149 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x174 (and $x149 $x47)))
 (let (($x44 (=> $x174 $x19)))
 (not $x44))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x216 (forall ((input.ind-%var378X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var378X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x192))))
 (let ((?x84 (input.spec-%var-x-1.1.1 input.ind-%var378X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var378X)))
 (=> $x30 (= ?x84 ?x119))))))))
 ))
 (let (($x198 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var377X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var377X) (bvult input.ind-%var377X (_ bv0 32))))))
 ))
 (let (($x217 (and $x198 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x106 (concat ?x183 (concat ?x77 ?x122)))))
 (let (($x193 (= input.dst.llvm-%n ?x173)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x17 (concat ?x11 (concat ?x143 ?x117)))))
 (let (($x70 (= input.dst.llvm-%x ?x29)))
 (let (($x190 (and $x70 $x193)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x47)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x91)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x164 $x112)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x121 $x154)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x71 $x150)))
 (let (($x80 (not $x97)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x139 $x54)))
 (let (($x145 (and (not $x168) $x80)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x83 $x31)))
 (let (($x48 (not $x108)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x50 $x103)))
 (let (($x63 (and (not $x12) $x48)))
 (let (($x24 (and (and (and (and (and (and $x63 $x145) $x58) $x113) $x181) $x72) $x116)))
 (let (($x82 (and $x24 $x174)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x132 (or false (or false (and (and true (or $x10 $x66)) (or $x65 $x98))))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and (and (and $x68 $x148) $x82) $x190)))
 (let (($x21 (forall ((input.ind-%var358X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var358X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x192))))
 (let ((?x84 (input.spec-%var-x-1.1.1 input.ind-%var358X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var358X)))
 (=> $x30 (= ?x84 ?x119))))))))
 ))
 (let (($x92 (forall ((input.ind-%var357X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var357X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var357X) (bvult input.ind-%var357X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x92 $x21)))
 (let (($x147 (and $x120 $x142)))
 (let (($x137 (= $x147 true)))
 (let (($x5 (forall ((input.ind-%var368X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var368X)))
 (let ((?x84 (input.spec-%var-x-1.1.1 input.ind-%var368X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var368X)))
 (=> $x30 (= ?x84 ?x166))))))
 ))
 (let (($x163 (forall ((input.ind-%var367X (_ BitVec 32)) )(let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var367X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var367X)))
 (= $x30 $x178))))
 ))
 (let (($x118 (and $x163 $x5)))
 (let (($x34 (and $x118 $x137)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x156 $x34)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x25 (and $x149 $x134)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x161 $x25)))
 (let (($x219 (=> $x109 $x218)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x216 (forall ((input.ind-%var378X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var378X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x192))))
 (let ((?x84 (input.spec-%var-x-1.1.1 input.ind-%var378X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var378X)))
 (=> $x30 (= ?x84 ?x119))))))))
 ))
 (let (($x198 (forall ((input.ind-%var377X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var377X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var377X) (bvult input.ind-%var377X (_ bv0 32))))))
 ))
 (let (($x217 (and $x198 $x216)))
 (let (($x218 (= $x217 true)))
 (let ((?x122 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x106 (concat ?x183 (concat ?x77 ?x122)))))
 (let (($x193 (= input.dst.llvm-%n ?x173)))
 (let ((?x117 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x17 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x17 (concat ?x11 (concat ?x143 ?x117)))))
 (let (($x70 (= input.dst.llvm-%x ?x29)))
 (let (($x190 (and $x70 $x193)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x47)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x116 (= (_ bv0 32) ?x91)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x170)))
 (let ((?x27 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x27)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x164 $x112)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (and $x121 $x154)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x71 $x150)))
 (let (($x80 (not $x97)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x139 $x54)))
 (let (($x145 (and (not $x168) $x80)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (and $x83 $x31)))
 (let (($x48 (not $x108)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x50 $x103)))
 (let (($x63 (and (not $x12) $x48)))
 (let (($x24 (and (and (and (and (and (and $x63 $x145) $x58) $x113) $x181) $x72) $x116)))
 (let (($x82 (and $x24 $x174)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x132 (or false (or false (and (and true (or $x10 $x66)) (or $x65 $x98))))))
 (let (($x148 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x68 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x142 (and (and (and $x68 $x148) $x82) $x190)))
 (let (($x21 (forall ((input.ind-%var358X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var358X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x192))))
 (let ((?x84 (input.spec-%var-x-1.1.1 input.ind-%var358X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var358X)))
 (=> $x30 (= ?x84 ?x119))))))))
 ))
 (let (($x92 (forall ((input.ind-%var357X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var357X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var357X) (bvult input.ind-%var357X input.dst.llvm-%n)))))
 ))
 (let (($x120 (and $x92 $x21)))
 (let (($x147 (and $x120 $x142)))
 (let (($x137 (= $x147 true)))
 (let (($x5 (forall ((input.ind-%var368X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var368X)))
 (let ((?x84 (input.spec-%var-x-1.1.1 input.ind-%var368X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var368X)))
 (=> $x30 (= ?x84 ?x166))))))
 ))
 (let (($x163 (forall ((input.ind-%var367X (_ BitVec 32)) )(let (($x178 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var367X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var367X)))
 (= $x30 $x178))))
 ))
 (let (($x118 (and $x163 $x5)))
 (let (($x34 (and $x118 $x137)))
 (let (($x156 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x156 $x34)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x25 (and $x149 $x134)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x109 (and $x161 $x25)))
 (let (($x219 (=> $x109 $x218)))
 (not $x219))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var378X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.ind-%var377X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var378X!1 () (_ BitVec 32)
    #x85b84326)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60744088)
  (define-fun input.ind-%var377X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0a690007)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa288e220)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6074408b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0f1010f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60744088)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0f1010d) #x00
    (ite (= x!0 #xc0f1010c) #x07
    (ite (= x!0 #xa288e223) #x00
    (ite (= x!0 #xc0f1010f) #x0a
    (ite (= x!0 #xa288e222) #x00
    (ite (= x!0 #xa288e221) #x00
    (ite (= x!0 #xc0f1010e) #x69
    (ite (= x!0 #x60744089) #xe2
    (ite (= x!0 #xa288e220) #x00
    (ite (= x!0 #x6074408b) #xa2
    (ite (= x!0 #x60744088) #x20
      #x88))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0a690007 x!0)
         (ite (bvule #x0a690008 x!0)
              (ite (bvule #x85b84326 x!0) #x85b84326 #x0a690008)
              #x0a690007)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x85b84326) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x22 (forall ((input.ind-%var424X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var424X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x48))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var424X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var424X)))
 (=> $x30 (= ?x83 ?x159))))))))
 ))
 (let (($x201 (forall ((input.ind-%var423X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var423X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var423X) (bvult input.ind-%var423X (_ bv0 32))))))
 ))
 (let (($x214 (and $x201 $x22)))
 (let (($x200 (= $x214 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x124 (concat ?x52 (concat ?x185 ?x191)))))
 (let (($x102 (= input.dst.llvm-%n ?x115)))
 (let ((?x220 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x9 (concat ?x35 (concat ?x46 ?x220)))))
 (let (($x186 (= input.dst.llvm-%x ?x144)))
 (let (($x96 (and $x186 $x102)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x25)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x34)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x175 $x193)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x75 $x190)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x73 $x29)))
 (let (($x37 (not $x70)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x143 $x117)))
 (let (($x18 (and (not $x42) $x37)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x107 $x64)))
 (let (($x62 (not $x17)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x71 $x139)))
 (let (($x182 (and (not $x82) $x62)))
 (let (($x217 (and (and (and (and (and (and $x182 $x18) $x100) $x122) $x142) $x137) $x134)))
 (let (($x218 (and $x217 $x109)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x121)))
 (let (($x24 (or false (or false (and (and true (or $x164 $x27)) (or $x170 $x72))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x148 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x59 (and (and (and $x148 $x174) $x218) $x96)))
 (let (($x140 (forall ((input.ind-%var404X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var404X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x48))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var404X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var404X)))
 (=> $x30 (= ?x83 ?x159))))))))
 ))
 (let (($x78 (forall ((input.ind-%var403X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var403X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var403X) (bvult input.ind-%var403X input.dst.llvm-%n)))))
 ))
 (let (($x93 (and $x78 $x140)))
 (let (($x176 (and $x93 $x59)))
 (let (($x105 (= $x176 true)))
 (let (($x192 (forall ((input.ind-%var414X (_ BitVec 32)) )(let ((?x67 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var414X)))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var414X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var414X)))
 (=> $x30 (= ?x83 ?x67))))))
 ))
 (let (($x68 (forall ((input.ind-%var413X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var413X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var413X)))
 (= $x30 $x163))))
 ))
 (let (($x39 (and $x68 $x192)))
 (let (($x51 (and $x39 $x105)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x13 (and $x149 $x51)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x36 (and $x179 $x13)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x184 (and $x161 $x36)))
 (let (($x215 (=> $x184 $x200)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x22 (forall ((input.ind-%var424X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var424X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x48))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var424X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var424X)))
 (=> $x30 (= ?x83 ?x159))))))))
 ))
 (let (($x201 (forall ((input.ind-%var423X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var423X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var423X) (bvult input.ind-%var423X (_ bv0 32))))))
 ))
 (let (($x214 (and $x201 $x22)))
 (let (($x200 (= $x214 true)))
 (let ((?x191 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x115 (concat ?x124 (concat ?x52 (concat ?x185 ?x191)))))
 (let (($x102 (= input.dst.llvm-%n ?x115)))
 (let ((?x220 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x9 (concat ?x35 (concat ?x46 ?x220)))))
 (let (($x186 (= input.dst.llvm-%x ?x144)))
 (let (($x96 (and $x186 $x102)))
 (let ((?x25 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x25)))
 (let ((?x34 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x134 (= (_ bv0 32) ?x34)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x147)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x175 $x193)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (and $x75 $x190)))
 (let (($x122 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x73 $x29)))
 (let (($x37 (not $x70)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x143 $x117)))
 (let (($x18 (and (not $x42) $x37)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x107 $x64)))
 (let (($x62 (not $x17)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (and $x71 $x139)))
 (let (($x182 (and (not $x82) $x62)))
 (let (($x217 (and (and (and (and (and (and $x182 $x18) $x100) $x122) $x142) $x137) $x134)))
 (let (($x218 (and $x217 $x109)))
 (let (($x72 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x121 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x27 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x121)))
 (let (($x24 (or false (or false (and (and true (or $x164 $x27)) (or $x170 $x72))))))
 (let (($x174 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x148 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x59 (and (and (and $x148 $x174) $x218) $x96)))
 (let (($x140 (forall ((input.ind-%var404X (_ BitVec 32)) )(let ((?x16 (bvadd (bvmul input.ind-%var404X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x48))))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var404X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var404X)))
 (=> $x30 (= ?x83 ?x159))))))))
 ))
 (let (($x78 (forall ((input.ind-%var403X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var403X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var403X) (bvult input.ind-%var403X input.dst.llvm-%n)))))
 ))
 (let (($x93 (and $x78 $x140)))
 (let (($x176 (and $x93 $x59)))
 (let (($x105 (= $x176 true)))
 (let (($x192 (forall ((input.ind-%var414X (_ BitVec 32)) )(let ((?x67 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var414X)))
 (let ((?x83 (input.spec-%var-x-1.1.1 input.ind-%var414X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var414X)))
 (=> $x30 (= ?x83 ?x67))))))
 ))
 (let (($x68 (forall ((input.ind-%var413X (_ BitVec 32)) )(let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var413X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var413X)))
 (= $x30 $x163))))
 ))
 (let (($x39 (and $x68 $x192)))
 (let (($x51 (and $x39 $x105)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x13 (and $x149 $x51)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x36 (and $x179 $x13)))
 (let (($x161 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x184 (and $x161 $x36)))
 (let (($x215 (=> $x184 $x200)))
 (not $x215))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var423X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var424X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var423X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.ind-%var424X!1 () (_ BitVec 32)
    #x85b84326)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60744088)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0a690007)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa288e220)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6074408b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0f1010f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60744088)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0f1010d) #x00
    (ite (= x!0 #xc0f1010c) #x07
    (ite (= x!0 #xa288e222) #x00
    (ite (= x!0 #xc0f1010f) #x0a
    (ite (= x!0 #xa288e221) #x00
    (ite (= x!0 #xa288e223) #x00
    (ite (= x!0 #xc0f1010e) #x69
    (ite (= x!0 #x60744089) #xe2
    (ite (= x!0 #xa288e220) #x00
    (ite (= x!0 #x6074408b) #xa2
    (ite (= x!0 #x60744088) #x20
      #x88))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0a690007 x!0)
         (ite (bvule #x0a690008 x!0)
              (ite (bvule #x85b84326 x!0) #x85b84326 #x0a690008)
              #x0a690007)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x85b84326) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (forall ((input.ind-%var474X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var474X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x62))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var474X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var474X)))
 (=> $x30 (= ?x107 ?x53))))))))
 ))
 (let (($x55 (forall ((input.ind-%var473X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var473X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var473X) (bvult input.ind-%var473X input.dst.llvm-%x)))))
 ))
 (let (($x38 (and $x55 $x114)))
 (let (($x7 (= $x38 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x40 (concat ?x15 (concat ?x23 ?x6)))))
 (let (($x86 (= input.dst.llvm-%n ?x145)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x187 (concat ?x168 (concat ?x104 (concat ?x12 ?x26)))))
 (let (($x61 (= input.dst.llvm-%x ?x187)))
 (let (($x65 (and $x61 $x86)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x36)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x51)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x33 $x102)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x157 $x96)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x85 $x144)))
 (let (($x74 (not $x186)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x46 $x220)))
 (let (($x101 (and (not $x94) $x74)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x146)))
 (let (($x81 (not $x9)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x73 $x143)))
 (let (($x158 (and (not $x218) $x81)))
 (let (($x214 (and (and (and (and (and (and $x158 $x101) $x133) $x191) $x59) $x105) $x13)))
 (let (($x200 (and $x214 $x184)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x217 (or false (or false (and (and true (or $x175 $x173)) (or $x147 $x137))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x174 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x177 (and (and (and $x174 $x109) $x200) $x65)))
 (let (($x181 (forall ((input.ind-%var454X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var454X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x62))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var454X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var454X)))
 (=> $x30 (= ?x107 ?x53))))))))
 ))
 (let (($x16 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var453X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var453X) (bvult input.ind-%var453X input.dst.llvm-%n)))))
 ))
 (let (($x44 (and $x16 $x181)))
 (let (($x21 (and $x44 $x177)))
 (let (($x80 (= $x21 true)))
 (let (($x48 (forall ((input.ind-%var464X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var464X)))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var464X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var464X)))
 (=> $x30 (= ?x107 ?x155))))))
 ))
 (let (($x148 (forall ((input.ind-%var463X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var463X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var463X)))
 (= $x30 $x68))))
 ))
 (let (($x45 (and $x148 $x48)))
 (let (($x150 (and $x45 $x80)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x179 $x150)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x169 (and $x161 $x152)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x49 $x169)))
 (let (($x129 (=> $x166 $x7)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (forall ((input.ind-%var474X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var474X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x62))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var474X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var474X)))
 (=> $x30 (= ?x107 ?x53))))))))
 ))
 (let (($x55 (forall ((input.ind-%var473X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var473X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var473X) (bvult input.ind-%var473X input.dst.llvm-%x)))))
 ))
 (let (($x38 (and $x55 $x114)))
 (let (($x7 (= $x38 true)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x40 (concat ?x15 (concat ?x23 ?x6)))))
 (let (($x86 (= input.dst.llvm-%n ?x145)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x187 (concat ?x168 (concat ?x104 (concat ?x12 ?x26)))))
 (let (($x61 (= input.dst.llvm-%x ?x187)))
 (let (($x65 (and $x61 $x86)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x184 (= (_ bv0 32) ?x36)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x51)))
 (let ((?x176 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x176)))
 (let ((?x115 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x102 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x115)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x96 (and $x33 $x102)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x157 $x96)))
 (let (($x191 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x85 $x144)))
 (let (($x74 (not $x186)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (and $x46 $x220)))
 (let (($x101 (and (not $x94) $x74)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x99 $x146)))
 (let (($x81 (not $x9)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x73 $x143)))
 (let (($x158 (and (not $x218) $x81)))
 (let (($x214 (and (and (and (and (and (and $x158 $x101) $x133) $x191) $x59) $x105) $x13)))
 (let (($x200 (and $x214 $x184)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x173 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x217 (or false (or false (and (and true (or $x175 $x173)) (or $x147 $x137))))))
 (let (($x109 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x174 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x177 (and (and (and $x174 $x109) $x200) $x65)))
 (let (($x181 (forall ((input.ind-%var454X (_ BitVec 32)) )(let ((?x183 (bvadd (bvmul input.ind-%var454X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x62))))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var454X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var454X)))
 (=> $x30 (= ?x107 ?x53))))))))
 ))
 (let (($x16 (forall ((input.ind-%var453X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var453X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var453X) (bvult input.ind-%var453X input.dst.llvm-%n)))))
 ))
 (let (($x44 (and $x16 $x181)))
 (let (($x21 (and $x44 $x177)))
 (let (($x80 (= $x21 true)))
 (let (($x48 (forall ((input.ind-%var464X (_ BitVec 32)) )(let ((?x155 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var464X)))
 (let ((?x107 (input.spec-%var-x-1.1.1 input.ind-%var464X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var464X)))
 (=> $x30 (= ?x107 ?x155))))))
 ))
 (let (($x148 (forall ((input.ind-%var463X (_ BitVec 32)) )(let (($x68 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var463X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var463X)))
 (= $x30 $x68))))
 ))
 (let (($x45 (and $x148 $x48)))
 (let (($x150 (and $x45 $x80)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x152 (and $x179 $x150)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x169 (and $x161 $x152)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x166 (and $x49 $x169)))
 (let (($x129 (=> $x166 $x7)))
 (not $x129))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc6d10068)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var473X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var474X!1 () (_ BitVec 32)
    #x0c004442)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61000038)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x01100500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc6d1006b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6100003b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc6d10068)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61000038)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc6d1006b) #x01
    (ite (= x!0 #xc6d1006a) #x10
    (ite (= x!0 #xc6d10069) #x05
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0c004442) false
      (not (bvule (concat (k!2 #x6100003b)
                          (k!2 #x6100003a)
                          (k!2 #x61000039)
                          (k!2 #x61000038))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0c004442) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var473X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x138ea5b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x22a0650c)
  (define-fun input.ind-%var474X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xdd5cfdf8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x22a0650f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x138ea5bb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x22a0650c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x138ea5b8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdd5cfdf9) #x00
    (ite (= x!0 #xdd5cfdf8) #x00
    (ite (= x!0 #x138ea5b9) #x00
    (ite (= x!0 #x138ea5bb) #x00
    (ite (= x!0 #x138ea5b8) #x00
    (ite (= x!0 #xdd5cfdfb) #x00
    (ite (= x!0 #x138ea5ba) #x00
    (ite (= x!0 #x22a0650d) #xfd
    (ite (= x!0 #xdd5cfdfa) #x00
    (ite (= x!0 #x22a0650f) #xdd
    (ite (= x!0 #x22a0650c) #xf8
      #x5c))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (forall ((input.ind-%var520X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var520X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x81))))
 (let ((?x99 (input.spec-%var-x-1.1.1 input.ind-%var520X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var520X)))
 (=> $x30 (= ?x99 ?x198))))))))
 ))
 (let (($x180 (forall ((input.ind-%var519X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var519X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var519X) (bvult input.ind-%var519X input.dst.llvm-%n)))))
 ))
 (let (($x50 (and $x180 $x213)))
 (let (($x165 (= $x50 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x63 (concat ?x167 (concat ?x110 ?x5)))))
 (let (($x116 (= input.dst.llvm-%n ?x18)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x42 (concat ?x162 (concat ?x82 ?x199)))))
 (let (($x11 (= input.dst.llvm-%x ?x54)))
 (let (($x170 (and $x11 $x116)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x169)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x150)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x84 $x86)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x8 $x65)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x14 $x187)))
 (let (($x20 (not $x61)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x12 $x26)))
 (let (($x19 (and (not $x41) $x20)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x120 $x178)))
 (let (($x219 (not $x168)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x85 $x46)))
 (let (($x88 (and (not $x200) $x219)))
 (let (($x38 (and (and (and (and (and (and $x88 $x19) $x58) $x6) $x177) $x80) $x152)))
 (let (($x7 (and $x38 $x166)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x214 (or false (or false (and (and true (or $x33 $x115)) (or $x176 $x105))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x214)))
 (let (($x109 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x131 (and (and (and $x109 $x184) $x7) $x170)))
 (let (($x142 (forall ((input.ind-%var500X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var500X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x81))))
 (let ((?x99 (input.spec-%var-x-1.1.1 input.ind-%var500X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var500X)))
 (=> $x30 (= ?x99 ?x198))))))))
 ))
 (let (($x183 (forall ((input.ind-%var499X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var499X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var499X) (bvult input.ind-%var499X input.dst.llvm-%n)))))
 ))
 (let (($x197 (and $x183 $x142)))
 (let (($x140 (and $x197 $x131)))
 (let (($x37 (= $x140 true)))
 (let (($x62 (forall ((input.ind-%var510X (_ BitVec 32)) )(let ((?x121 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var510X)))
 (let ((?x99 (input.spec-%var-x-1.1.1 input.ind-%var510X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var510X)))
 (=> $x30 (= ?x99 ?x121))))))
 ))
 (let (($x174 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var509X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var509X)))
 (= $x30 $x148))))
 ))
 (let (($x32 (and $x174 $x62)))
 (let (($x29 (and $x32 $x37)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x161 $x29)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x78 $x195)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x49 $x189)))
 (let (($x56 (=> $x67 $x165)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x213 (forall ((input.ind-%var520X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var520X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x81))))
 (let ((?x99 (input.spec-%var-x-1.1.1 input.ind-%var520X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var520X)))
 (=> $x30 (= ?x99 ?x198))))))))
 ))
 (let (($x180 (forall ((input.ind-%var519X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var519X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var519X) (bvult input.ind-%var519X input.dst.llvm-%n)))))
 ))
 (let (($x50 (and $x180 $x213)))
 (let (($x165 (= $x50 true)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x63 (concat ?x167 (concat ?x110 ?x5)))))
 (let (($x116 (= input.dst.llvm-%n ?x18)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x42 (concat ?x162 (concat ?x82 ?x199)))))
 (let (($x11 (= input.dst.llvm-%x ?x54)))
 (let (($x170 (and $x11 $x116)))
 (let ((?x169 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x166 (= (_ bv0 32) ?x169)))
 (let ((?x150 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x150)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x65 (and $x84 $x86)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x177 (and $x8 $x65)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x14 $x187)))
 (let (($x20 (not $x61)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x12 $x26)))
 (let (($x19 (and (not $x41) $x20)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (and $x120 $x178)))
 (let (($x219 (not $x168)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x85 $x46)))
 (let (($x88 (and (not $x200) $x219)))
 (let (($x38 (and (and (and (and (and (and $x88 $x19) $x58) $x6) $x177) $x80) $x152)))
 (let (($x7 (and $x38 $x166)))
 (let (($x105 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x115 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x214 (or false (or false (and (and true (or $x33 $x115)) (or $x176 $x105))))))
 (let (($x184 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x214)))
 (let (($x109 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x131 (and (and (and $x109 $x184) $x7) $x170)))
 (let (($x142 (forall ((input.ind-%var500X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var500X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x81))))
 (let ((?x99 (input.spec-%var-x-1.1.1 input.ind-%var500X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var500X)))
 (=> $x30 (= ?x99 ?x198))))))))
 ))
 (let (($x183 (forall ((input.ind-%var499X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var499X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var499X) (bvult input.ind-%var499X input.dst.llvm-%n)))))
 ))
 (let (($x197 (and $x183 $x142)))
 (let (($x140 (and $x197 $x131)))
 (let (($x37 (= $x140 true)))
 (let (($x62 (forall ((input.ind-%var510X (_ BitVec 32)) )(let ((?x121 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var510X)))
 (let ((?x99 (input.spec-%var-x-1.1.1 input.ind-%var510X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var510X)))
 (=> $x30 (= ?x99 ?x121))))))
 ))
 (let (($x174 (forall ((input.ind-%var509X (_ BitVec 32)) )(let (($x148 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var509X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var509X)))
 (= $x30 $x148))))
 ))
 (let (($x32 (and $x174 $x62)))
 (let (($x29 (and $x32 $x37)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x195 (and $x161 $x29)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x78 $x195)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x67 (and $x49 $x189)))
 (let (($x56 (=> $x67 $x165)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (forall ((input.ind-%var550X (_ BitVec 32)) )(let ((?x15 (bvadd (bvmul input.ind-%var550X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x219))))
 (let ((?x120 (input.spec-%var-x-1.1.1 input.ind-%var550X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var550X)))
 (=> $x30 (= ?x120 ?x201))))))))
 ))
 (let (($x125 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var549X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var549X) (bvult input.ind-%var549X input.dst.llvm-%n)))))
 ))
 (let (($x206 (and $x125 $x128)))
 (let (($x57 (= $x206 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x147 (concat ?x182 (concat ?x69 ?x39)))))
 (let (($x44 (= input.dst.llvm-%n ?x124)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x92 (concat ?x94 (concat ?x112 ?x130)))))
 (let (($x133 (= input.dst.llvm-%x ?x192)))
 (let (($x216 (and $x133 $x44)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x189)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x29)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x83 $x116)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x118 $x170)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x66 $x54)))
 (let (($x98 (not $x11)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x82 $x199)))
 (let (($x196 (and (not $x28) $x98)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x93 $x163)))
 (let (($x215 (not $x42)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x14 $x12)))
 (let (($x160 (and (not $x7) $x215)))
 (let (($x87 (and (and (and (and (and (and $x160 $x196) $x100) $x5) $x131) $x37) $x195)))
 (let (($x79 (and $x87 $x67)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x38 (or false (or false (and (and true (or $x84 $x145)) (or $x21 $x80))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x38)))
 (let (($x184 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x144 (and (and (and $x184 $x166) $x79) $x216)))
 (let (($x59 (forall ((input.ind-%var530X (_ BitVec 32)) )(let ((?x15 (bvadd (bvmul input.ind-%var530X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x219))))
 (let ((?x120 (input.spec-%var-x-1.1.1 input.ind-%var530X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var530X)))
 (=> $x30 (= ?x120 ?x201))))))))
 ))
 (let (($x52 (forall ((input.ind-%var529X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var529X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var529X) (bvult input.ind-%var529X input.dst.llvm-%n)))))
 ))
 (let (($x136 (and $x52 $x59)))
 (let (($x141 (and $x136 $x144)))
 (let (($x97 (= $x141 true)))
 (let (($x81 (forall ((input.ind-%var540X (_ BitVec 32)) )(let ((?x75 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var540X)))
 (let ((?x120 (input.spec-%var-x-1.1.1 input.ind-%var540X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var540X)))
 (=> $x30 (= ?x120 ?x75))))))
 ))
 (let (($x109 (forall ((input.ind-%var539X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var539X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var539X)))
 (= $x30 $x174))))
 ))
 (let (($x77 (and $x109 $x81)))
 (let (($x155 (and $x77 $x97)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x78 $x155)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x73 (and $x16 $x171)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x49 $x73)))
 (let (($x211 (=> $x179 $x57)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x128 (forall ((input.ind-%var550X (_ BitVec 32)) )(let ((?x15 (bvadd (bvmul input.ind-%var550X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x219))))
 (let ((?x120 (input.spec-%var-x-1.1.1 input.ind-%var550X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var550X)))
 (=> $x30 (= ?x120 ?x201))))))))
 ))
 (let (($x125 (forall ((input.ind-%var549X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var549X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var549X) (bvult input.ind-%var549X input.dst.llvm-%n)))))
 ))
 (let (($x206 (and $x125 $x128)))
 (let (($x57 (= $x206 true)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x124 (concat ?x147 (concat ?x182 (concat ?x69 ?x39)))))
 (let (($x44 (= input.dst.llvm-%n ?x124)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x92 (concat ?x94 (concat ?x112 ?x130)))))
 (let (($x133 (= input.dst.llvm-%x ?x192)))
 (let (($x216 (and $x133 $x44)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x67 (= (_ bv0 32) ?x189)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x195 (= (_ bv0 32) ?x29)))
 (let ((?x140 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x37 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x83 $x116)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x118 $x170)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x66 $x54)))
 (let (($x98 (not $x11)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x82 $x199)))
 (let (($x196 (and (not $x28) $x98)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x93 $x163)))
 (let (($x215 (not $x42)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x14 $x12)))
 (let (($x160 (and (not $x7) $x215)))
 (let (($x87 (and (and (and (and (and (and $x160 $x196) $x100) $x5) $x131) $x37) $x195)))
 (let (($x79 (and $x87 $x67)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x38 (or false (or false (and (and true (or $x84 $x145)) (or $x21 $x80))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x38)))
 (let (($x184 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x144 (and (and (and $x184 $x166) $x79) $x216)))
 (let (($x59 (forall ((input.ind-%var530X (_ BitVec 32)) )(let ((?x15 (bvadd (bvmul input.ind-%var530X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x219))))
 (let ((?x120 (input.spec-%var-x-1.1.1 input.ind-%var530X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var530X)))
 (=> $x30 (= ?x120 ?x201))))))))
 ))
 (let (($x52 (forall ((input.ind-%var529X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var529X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var529X) (bvult input.ind-%var529X input.dst.llvm-%n)))))
 ))
 (let (($x136 (and $x52 $x59)))
 (let (($x141 (and $x136 $x144)))
 (let (($x97 (= $x141 true)))
 (let (($x81 (forall ((input.ind-%var540X (_ BitVec 32)) )(let ((?x75 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var540X)))
 (let ((?x120 (input.spec-%var-x-1.1.1 input.ind-%var540X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var540X)))
 (=> $x30 (= ?x120 ?x75))))))
 ))
 (let (($x109 (forall ((input.ind-%var539X (_ BitVec 32)) )(let (($x174 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var539X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var539X)))
 (= $x30 $x174))))
 ))
 (let (($x77 (and $x109 $x81)))
 (let (($x155 (and $x77 $x97)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x171 (and $x78 $x155)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x73 (and $x16 $x171)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x179 (and $x49 $x73)))
 (let (($x211 (=> $x179 $x57)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 120 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (forall ((input.ind-%var582X (_ BitVec 32)) )(let ((?x43 (spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var582X)))
 (let ((?x167 (bvadd (bvmul input.ind-%var582X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x215))))
 (let (($x77 (and (bvule (_ bv0 32) input.ind-%var582X) (bvult input.ind-%var582X input.dst.llvm-%n))))
 (=> $x77 (= ?x55 ?x43))))))))
 ))
 (let (($x154 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x34 (spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var581X)))
 (let (($x77 (and (bvule (_ bv0 32) input.ind-%var581X) (bvult input.ind-%var581X input.dst.llvm-%n))))
 (= $x77 $x34))))
 ))
 (let (($x223 (and $x154 $x222)))
 (let (($x224 (= $x223 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x176 (concat ?x158 (concat ?x113 ?x45)))))
 (let (($x197 (= input.dst.llvm-%n ?x40)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x151 (concat ?x41 (concat ?x193 ?x103)))))
 (let (($x58 (= input.dst.llvm-%x ?x48)))
 (let (($x22 (and $x58 $x197)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x73)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x155)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x124)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (and $x101 $x44)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x107 $x216)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x117 $x192)))
 (let (($x134 (not $x133)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x112 $x130)))
 (let (($x72 (and (not $x27) $x134)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x74 $x35)))
 (let (($x68 (not $x92)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x66 $x82)))
 (let (($x129 (and (not $x79) $x68)))
 (let (($x127 (and (and (and (and (and (and $x129 $x72) $x135) $x39) $x144) $x97) $x171)))
 (let (($x76 (and $x127 $x179)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x87 (or false (or false (and (and true (or $x83 $x18)) (or $x140 $x37))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x166 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x187 (and (and (and $x166 $x67) $x76) $x22)))
 (let (($x177 (forall ((input.ind-%var560X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var560X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x215))))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var560X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var560X)))
 (=> $x30 (= ?x93 ?x55))))))))
 ))
 (let (($x15 (forall ((input.ind-%var559X (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) input.ind-%var559X) (bvult input.ind-%var559X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var559X)))
 (= $x30 $x77))))
 ))
 (let (($x89 (and $x15 $x177)))
 (let (($x95 (and $x89 $x187)))
 (let (($x70 (= $x95 true)))
 (let (($x219 (forall ((input.ind-%var570X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var570X)))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var570X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var570X)))
 (=> $x30 (= ?x93 ?x157))))))
 ))
 (let (($x184 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var569X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var569X)))
 (= $x30 $x109))))
 ))
 (let (($x185 (and $x184 $x219)))
 (let (($x121 (and $x185 $x70)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x47 (and $x16 $x121)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x85 (and $x183 $x47)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x49 $x85)))
 (let (($x225 (=> $x161 $x224)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (forall ((input.ind-%var582X (_ BitVec 32)) )(let ((?x43 (spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var582X)))
 (let ((?x167 (bvadd (bvmul input.ind-%var582X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x215))))
 (let (($x77 (and (bvule (_ bv0 32) input.ind-%var582X) (bvult input.ind-%var582X input.dst.llvm-%n))))
 (=> $x77 (= ?x55 ?x43))))))))
 ))
 (let (($x154 (forall ((input.ind-%var581X (_ BitVec 32)) )(let (($x34 (spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var581X)))
 (let (($x77 (and (bvule (_ bv0 32) input.ind-%var581X) (bvult input.ind-%var581X input.dst.llvm-%n))))
 (= $x77 $x34))))
 ))
 (let (($x223 (and $x154 $x222)))
 (let (($x224 (= $x223 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x176 (concat ?x158 (concat ?x113 ?x45)))))
 (let (($x197 (= input.dst.llvm-%n ?x40)))
 (let ((?x103 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x151 (concat ?x41 (concat ?x193 ?x103)))))
 (let (($x58 (= input.dst.llvm-%x ?x48)))
 (let (($x22 (and $x58 $x197)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x73)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x171 (= (_ bv0 32) ?x155)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x124)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x216 (and $x101 $x44)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x107 $x216)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x117 $x192)))
 (let (($x134 (not $x133)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x112 $x130)))
 (let (($x72 (and (not $x27) $x134)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x74 $x35)))
 (let (($x68 (not $x92)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x66 $x82)))
 (let (($x129 (and (not $x79) $x68)))
 (let (($x127 (and (and (and (and (and (and $x129 $x72) $x135) $x39) $x144) $x97) $x171)))
 (let (($x76 (and $x127 $x179)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x118 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x140 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x118)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x118)))
 (let (($x87 (or false (or false (and (and true (or $x83 $x18)) (or $x140 $x37))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x166 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x187 (and (and (and $x166 $x67) $x76) $x22)))
 (let (($x177 (forall ((input.ind-%var560X (_ BitVec 32)) )(let ((?x167 (bvadd (bvmul input.ind-%var560X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x55 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x215))))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var560X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var560X)))
 (=> $x30 (= ?x93 ?x55))))))))
 ))
 (let (($x15 (forall ((input.ind-%var559X (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) input.ind-%var559X) (bvult input.ind-%var559X input.dst.llvm-%n))))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var559X)))
 (= $x30 $x77))))
 ))
 (let (($x89 (and $x15 $x177)))
 (let (($x95 (and $x89 $x187)))
 (let (($x70 (= $x95 true)))
 (let (($x219 (forall ((input.ind-%var570X (_ BitVec 32)) )(let ((?x157 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var570X)))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var570X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var570X)))
 (=> $x30 (= ?x93 ?x157))))))
 ))
 (let (($x184 (forall ((input.ind-%var569X (_ BitVec 32)) )(let (($x109 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var569X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var569X)))
 (= $x30 $x109))))
 ))
 (let (($x185 (and $x184 $x219)))
 (let (($x121 (and $x185 $x70)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x47 (and $x16 $x121)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x85 (and $x183 $x47)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x161 (and $x49 $x85)))
 (let (($x225 (=> $x161 $x224)))
 (not $x225))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x158d5068)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var582X!1 () (_ BitVec 32)
    #x00008a4a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x474aa0e4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00008a4b)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00040440)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x158d506b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x474aa0e7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x158d5068)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x474aa0e4)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x158d5068) #x40
    (ite (= x!0 #x158d506a) #x04
    (ite (= x!0 #x158d5069) #x04
    (ite (= x!0 #x474aa0e4) #x4b
    (ite (= x!0 #x474aa0e5) #x8a
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!2 #x474aa0e7)
                        (k!2 #x474aa0e6)
                        (k!2 #x474aa0e5)
                        (k!2 #x474aa0e4))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00008a4a) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x158d506b)
                                     (k!2 #x158d506a)
                                     (k!2 #x158d5069)
                                     (k!2 #x158d5068)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x158d506b)
                                     (k!2 #x158d506a)
                                     (k!2 #x158d5069)
                                     (k!2 #x158d5068)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x158d506b)
                                     (k!2 #x158d506a)
                                     (k!2 #x158d5069)
                                     (k!2 #x158d5068)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x158d506b)
                                     (k!2 #x158d506a)
                                     (k!2 #x158d5069)
                                     (k!2 #x158d5068))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00008a4a) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x04000000)
  (define-fun spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var582X!1 () (_ BitVec 32)
    #x0a980421)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00ffeff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe0fbffbc)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0d180424)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x45330200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe0fbffbf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00ffeffb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe0fbffbc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00ffeff8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    #x00000000)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00ffeff9) #x04
    (ite (= x!0 #xe0fbffbe) #x33
    (ite (= x!0 #x6f931285) #x00
    (ite (= x!0 #x00ffeffb) #x0d
    (ite (= x!0 #x6f931284) #x20
    (ite (= x!0 #x00ffeffa) #x18
    (ite (= x!0 #xe0fbffbd) #x02
    (ite (= x!0 #x45330202) #x00
    (ite (= x!0 #x45330200) #x00
    (ite (= x!0 #xe0fbffbf) #x45
    (ite (= x!0 #xe0fbffbc) #x00
    (ite (= x!0 #x6f931286) #x00
    (ite (= x!0 #x45330201) #x00
    (ite (= x!0 #x45330203) #x00
    (ite (= x!0 #x6f931287) #x00
      #x24))))))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0a980421) #x00000020
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!8 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #xe0fbffbf)
                                     (k!8 #xe0fbffbe)
                                     (k!8 #xe0fbffbd)
                                     (k!8 #xe0fbffbc)))))
            (a!2 (k!8 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #xe0fbffbf)
                                     (k!8 #xe0fbffbe)
                                     (k!8 #xe0fbffbd)
                                     (k!8 #xe0fbffbc)))))
            (a!3 (k!8 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!8 #xe0fbffbf)
                                     (k!8 #xe0fbffbe)
                                     (k!8 #xe0fbffbd)
                                     (k!8 #xe0fbffbc)))))
            (a!4 (k!8 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!8 #xe0fbffbf)
                                     (k!8 #xe0fbffbe)
                                     (k!8 #xe0fbffbd)
                                     (k!8 #xe0fbffbc))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0d180424 x!0)
         (ite (bvule #x0d180425 x!0) #x0d180425 #x0d180424)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x0a980421) #x00000020
      (input.spec-%var-x-1.1.1 x!0))))
  (define-fun spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= false true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x213 (concat ?x100 (concat ?x162 ?x164)))))
 (let (($x120 (= input.dst.llvm-%n ?x122)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x115 (concat ?x139 (concat ?x226 ?x224)))))
 (let (($x28 (= input.dst.llvm-%x ?x174)))
 (let (($x105 (and $x28 $x120)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x85)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x121)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x197 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (and $x19 $x197)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x99 $x22)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x220 $x48)))
 (let (($x13 (not $x58)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x193 $x103)))
 (let (($x137 (and (not $x173) $x13)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x20 $x104)))
 (let (($x148 (not $x151)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x117 $x112)))
 (let (($x218 (and (not $x76) $x148)))
 (let (($x221 (and (and (and (and (and (and $x218 $x137) $x10) $x45) $x187) $x70) $x47)))
 (let (($x222 (and $x221 $x161)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x127 (or false (or false (and (and true (or $x101 $x124)) (or $x141 $x97))))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x67 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x152 (and (and (and $x67 $x179) $x222) $x105)))
 (let (($x131 (forall ((input.ind-%var616X (_ BitVec 32)) )(let ((?x182 (bvadd (bvmul input.ind-%var616X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x68))))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var616X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var616X)))
 (=> $x30 (= ?x74 ?x165))))))))
 ))
 (let (($x167 (forall ((input.ind-%var615X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var615X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var615X) (bvult input.ind-%var615X input.dst.llvm-%n)))))
 ))
 (let (($x50 (and $x167 $x131)))
 (let (($x21 (and $x50 $x152)))
 (let (($x63 (= $x21 true)))
 (let (($x215 (forall ((input.ind-%var626X (_ BitVec 32)) )(let ((?x8 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var626X)))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var626X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var626X)))
 (=> $x30 (= ?x74 ?x8))))))
 ))
 (let (($x166 (forall ((input.ind-%var625X (_ BitVec 32)) )(let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var625X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var625X)))
 (= $x30 $x184))))
 ))
 (let (($x23 (and $x166 $x215)))
 (let (($x136 (and $x23 $x63)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x183 $x136)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x59 (and $x52 $x114)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x49 $x59)))
 (let (($x180 (=> $x98 $x54)))
 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x54 (= false true)))
 (let ((?x164 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x213 (concat ?x100 (concat ?x162 ?x164)))))
 (let (($x120 (= input.dst.llvm-%n ?x122)))
 (let ((?x224 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x174 (concat ?x115 (concat ?x139 (concat ?x226 ?x224)))))
 (let (($x28 (= input.dst.llvm-%x ?x174)))
 (let (($x105 (and $x28 $x120)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x85)))
 (let ((?x121 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x121)))
 (let ((?x95 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x70 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x197 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (and $x19 $x197)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x99 $x22)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x58 (and $x220 $x48)))
 (let (($x13 (not $x58)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x193 $x103)))
 (let (($x137 (and (not $x173) $x13)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x20 $x104)))
 (let (($x148 (not $x151)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x76 (and $x117 $x112)))
 (let (($x218 (and (not $x76) $x148)))
 (let (($x221 (and (and (and (and (and (and $x218 $x137) $x10) $x45) $x187) $x70) $x47)))
 (let (($x222 (and $x221 $x161)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x107 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x107)))
 (let (($x124 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x107)))
 (let (($x127 (or false (or false (and (and true (or $x101 $x124)) (or $x141 $x97))))))
 (let (($x179 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x127)))
 (let (($x67 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x152 (and (and (and $x67 $x179) $x222) $x105)))
 (let (($x131 (forall ((input.ind-%var616X (_ BitVec 32)) )(let ((?x182 (bvadd (bvmul input.ind-%var616X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem ?x182))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x182 (_ bv2 32))) ?x68))))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var616X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var616X)))
 (=> $x30 (= ?x74 ?x165))))))))
 ))
 (let (($x167 (forall ((input.ind-%var615X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var615X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var615X) (bvult input.ind-%var615X input.dst.llvm-%n)))))
 ))
 (let (($x50 (and $x167 $x131)))
 (let (($x21 (and $x50 $x152)))
 (let (($x63 (= $x21 true)))
 (let (($x215 (forall ((input.ind-%var626X (_ BitVec 32)) )(let ((?x8 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var626X)))
 (let ((?x74 (input.spec-%var-x-1.1.1 input.ind-%var626X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var626X)))
 (=> $x30 (= ?x74 ?x8))))))
 ))
 (let (($x166 (forall ((input.ind-%var625X (_ BitVec 32)) )(let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var625X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var625X)))
 (= $x30 $x184))))
 ))
 (let (($x23 (and $x166 $x215)))
 (let (($x136 (and $x23 $x63)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x114 (and $x183 $x136)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x59 (and $x52 $x114)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x98 (and $x49 $x59)))
 (let (($x180 (=> $x98 $x54)))
 (not $x180)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00005804)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00005800)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00005807)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00005803)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00005804)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00005800)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00005803)
                        (k!0 #x00005802)
                        (k!0 #x00005801)
                        (k!0 #x00005800))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf1024ff0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8e044ff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8e044ffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf1024ff3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8e044ff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf1024ff0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x59)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x136)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x143 $x120)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x111 $x105)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x200 $x174)))
 (let (($x32 (not $x28)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x226 $x224)))
 (let (($x62 (and (not $x31) $x32)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x196 $x102)))
 (let (($x7 (not $x115)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x220 $x193)))
 (let (($x225 (and (not $x222) $x7)))
 (let (($x132 (and (and (and (and (and (and $x225 $x62) $x26) $x164) $x152) $x63) $x114)))
 (let (($x223 (and $x132 $x98)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x221 (or false (or false (and (and true (or $x19 $x40)) (or $x95 $x70))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x83 (and $x161 $x223)))
 (let (($x150 (= $x83 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x177 (concat ?x147 (concat ?x72 ?x80)))))
 (let (($x192 (= input.dst.llvm-%n ?x134)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x77 (concat ?x119 (concat ?x27 ?x145)))))
 (let (($x191 (= input.dst.llvm-%x ?x128)))
 (let (($x125 (and $x191 $x192)))
 (let (($x157 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x161) $x223)))
 (let (($x36 (and $x157 $x125)))
 (let (($x144 (forall ((input.ind-%var668X (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul input.ind-%var668X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x148))))
 (let ((?x20 (input.spec-%var-x-1.1.1 input.ind-%var668X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var668X)))
 (=> $x30 (= ?x20 ?x57))))))))
 ))
 (let (($x182 (forall ((input.ind-%var667X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var667X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var667X) (bvult input.ind-%var667X input.dst.llvm-%n)))))
 ))
 (let (($x206 (and $x182 $x144)))
 (let (($x66 (and $x206 $x36)))
 (let (($x16 (= $x66 true)))
 (let (($x68 (forall ((input.ind-%var678X (_ BitVec 32)) )(let ((?x118 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var678X)))
 (let ((?x20 (input.spec-%var-x-1.1.1 input.ind-%var678X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var678X)))
 (=> $x30 (= ?x20 ?x118))))))
 ))
 (let (($x67 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var677X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var677X)))
 (= $x30 $x166))))
 ))
 (let (($x110 (and $x67 $x68)))
 (let (($x38 (and $x110 $x16)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x52 $x38)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x142 (and $x15 $x9)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x65 (and $x49 $x142)))
 (let (($x60 (=> $x65 $x150)))
 (not $x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x59)))
 (let ((?x136 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x114 (= (_ bv0 32) ?x136)))
 (let ((?x21 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x143 $x120)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x111 $x105)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x200 $x174)))
 (let (($x32 (not $x28)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x226 $x224)))
 (let (($x62 (and (not $x31) $x32)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x115 (and $x196 $x102)))
 (let (($x7 (not $x115)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x220 $x193)))
 (let (($x225 (and (not $x222) $x7)))
 (let (($x132 (and (and (and (and (and (and $x225 $x62) $x26) $x164) $x152) $x63) $x114)))
 (let (($x223 (and $x132 $x98)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x99 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x99)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x99)))
 (let (($x221 (or false (or false (and (and true (or $x19 $x40)) (or $x95 $x70))))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x221)))
 (let (($x83 (and $x161 $x223)))
 (let (($x150 (= $x83 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x72 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x147 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x134 (concat ?x177 (concat ?x147 (concat ?x72 ?x80)))))
 (let (($x192 (= input.dst.llvm-%n ?x134)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x128 (concat ?x77 (concat ?x119 (concat ?x27 ?x145)))))
 (let (($x191 (= input.dst.llvm-%x ?x128)))
 (let (($x125 (and $x191 $x192)))
 (let (($x157 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x161) $x223)))
 (let (($x36 (and $x157 $x125)))
 (let (($x144 (forall ((input.ind-%var668X (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul input.ind-%var668X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x148))))
 (let ((?x20 (input.spec-%var-x-1.1.1 input.ind-%var668X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var668X)))
 (=> $x30 (= ?x20 ?x57))))))))
 ))
 (let (($x182 (forall ((input.ind-%var667X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var667X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var667X) (bvult input.ind-%var667X input.dst.llvm-%n)))))
 ))
 (let (($x206 (and $x182 $x144)))
 (let (($x66 (and $x206 $x36)))
 (let (($x16 (= $x66 true)))
 (let (($x68 (forall ((input.ind-%var678X (_ BitVec 32)) )(let ((?x118 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var678X)))
 (let ((?x20 (input.spec-%var-x-1.1.1 input.ind-%var678X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var678X)))
 (=> $x30 (= ?x20 ?x118))))))
 ))
 (let (($x67 (forall ((input.ind-%var677X (_ BitVec 32)) )(let (($x166 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var677X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var677X)))
 (= $x30 $x166))))
 ))
 (let (($x110 (and $x67 $x68)))
 (let (($x38 (and $x110 $x16)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x9 (and $x52 $x38)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x142 (and $x15 $x9)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x65 (and $x49 $x142)))
 (let (($x60 (=> $x65 $x150)))
 (not $x60))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x101 (= $x170 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x211 (concat ?x141 (concat ?x129 ?x74)))))
 (let (($x13 (= input.dst.llvm-%n ?x131)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x10 (concat ?x41 (concat ?x184 ?x116)))))
 (let (($x188 (= input.dst.llvm-%x ?x185)))
 (let (($x48 (and $x188 $x13)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x142)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x38)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x134)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x89 $x192)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x195 $x125)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x81 $x128)))
 (let (($x56 (not $x191)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x27 $x145)))
 (let (($x140 (and (not $x199) $x56)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x157 $x135)))
 (let (($x94 (not $x77)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x200 $x226)))
 (let (($x109 (and (not $x223) $x94)))
 (let (($x76 (and (and (and (and (and (and $x109 $x140) $x160) $x80) $x36) $x16) $x9)))
 (let (($x93 (and $x76 $x65)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x132 (or false (or false (and (and true (or $x143 $x122)) (or $x21 $x63))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x8 (and (and (and $x161 $x98) $x93) $x48)))
 (let (($x187 (forall ((input.ind-%var688X (_ BitVec 32)) )(let ((?x100 (bvadd (bvmul input.ind-%var688X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x7))))
 (let ((?x196 (input.spec-%var-x-1.1.1 input.ind-%var688X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var688X)))
 (=> $x30 (= ?x196 ?x43))))))))
 ))
 (let (($x158 (forall ((input.ind-%var687X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var687X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var687X) (bvult input.ind-%var687X input.dst.llvm-%n)))))
 ))
 (let (($x154 (and $x158 $x187)))
 (let (($x169 (and $x154 $x8)))
 (let (($x117 (= $x169 true)))
 (let (($x148 (forall ((input.ind-%var698X (_ BitVec 32)) )(let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var698X)))
 (let ((?x196 (input.spec-%var-x-1.1.1 input.ind-%var698X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var698X)))
 (=> $x30 (= ?x196 ?x107))))))
 ))
 (let (($x179 (forall ((input.ind-%var697X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var697X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var697X)))
 (= $x30 $x67))))
 ))
 (let (($x69 (and $x179 $x148)))
 (let (($x183 (and $x69 $x117)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x15 $x183)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x168 (and $x167 $x87)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x49 $x168)))
 (let (($x29 (=> $x88 $x101)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x170 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x101 (= $x170 true)))
 (let ((?x74 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x131 (concat ?x211 (concat ?x141 (concat ?x129 ?x74)))))
 (let (($x13 (= input.dst.llvm-%n ?x131)))
 (let ((?x116 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x185 (concat ?x10 (concat ?x41 (concat ?x184 ?x116)))))
 (let (($x188 (= input.dst.llvm-%x ?x185)))
 (let (($x48 (and $x188 $x13)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x65 (= (_ bv0 32) ?x142)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x9 (= (_ bv0 32) ?x38)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x134 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x134)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (and $x89 $x192)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x195 $x125)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x191 (and $x81 $x128)))
 (let (($x56 (not $x191)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (and $x27 $x145)))
 (let (($x140 (and (not $x199) $x56)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x157 $x135)))
 (let (($x94 (not $x77)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x223 (and $x200 $x226)))
 (let (($x109 (and (not $x223) $x94)))
 (let (($x76 (and (and (and (and (and (and $x109 $x140) $x160) $x80) $x36) $x16) $x9)))
 (let (($x93 (and $x76 $x65)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x122 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x132 (or false (or false (and (and true (or $x143 $x122)) (or $x21 $x63))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x132)))
 (let (($x161 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x8 (and (and (and $x161 $x98) $x93) $x48)))
 (let (($x187 (forall ((input.ind-%var688X (_ BitVec 32)) )(let ((?x100 (bvadd (bvmul input.ind-%var688X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x7))))
 (let ((?x196 (input.spec-%var-x-1.1.1 input.ind-%var688X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var688X)))
 (=> $x30 (= ?x196 ?x43))))))))
 ))
 (let (($x158 (forall ((input.ind-%var687X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var687X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var687X) (bvult input.ind-%var687X input.dst.llvm-%n)))))
 ))
 (let (($x154 (and $x158 $x187)))
 (let (($x169 (and $x154 $x8)))
 (let (($x117 (= $x169 true)))
 (let (($x148 (forall ((input.ind-%var698X (_ BitVec 32)) )(let ((?x107 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var698X)))
 (let ((?x196 (input.spec-%var-x-1.1.1 input.ind-%var698X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var698X)))
 (=> $x30 (= ?x196 ?x107))))))
 ))
 (let (($x179 (forall ((input.ind-%var697X (_ BitVec 32)) )(let (($x67 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var697X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var697X)))
 (= $x30 $x67))))
 ))
 (let (($x69 (and $x179 $x148)))
 (let (($x183 (and $x69 $x117)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x87 (and $x15 $x183)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x168 (and $x167 $x87)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x49 $x168)))
 (let (($x29 (=> $x88 $x101)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000005) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000023)
                                   (k!0 #x00000022)
                                   (k!0 #x00000021)
                                   (k!0 #x00000020))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00000007)
                        (k!0 #x00000006)
                        (k!0 #x00000005)
                        (k!0 #x00000004))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x75a80bd0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ccb5ad4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xbebebe02)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xbfffbe00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ccb5ad7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x75a80bd3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ccb5ad4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x75a80bd0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbfffbe01) #x00
    (ite (= x!0 #x0ccb5ad6) #xff
    (ite (= x!0 #x75a80bd0) #x02
    (ite (= x!0 #xbfffbe03) #x00
    (ite (= x!0 #xbfffbe02) #x00
    (ite (= x!0 #xbfffbe00) #x00
    (ite (= x!0 #x0ccb5ad7) #xbf
    (ite (= x!0 #x0ccb5ad4) #x00
      #xbe)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x0ccb5ad7)
                                     (k!6 #x0ccb5ad6)
                                     (k!6 #x0ccb5ad5)
                                     (k!6 #x0ccb5ad4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xbebebe02 x!0)
         (ite (bvule #xbebebe03 x!0) #xbebebe03 #xbebebe02)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 ((_ extract 8 0) input.dst.llvm-%x)))
 (let (($x155 (= (_ bv0 9) ?x19)))
 (let (($x12 (= $x155 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x138 (concat ?x95 (concat ?x218 ?x20)))))
 (let (($x32 (= input.dst.llvm-%n ?x144)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x26 (concat ?x139 (concat ?x166 ?x44)))))
 (let (($x180 (= input.dst.llvm-%x ?x23)))
 (let (($x174 (and $x180 $x32)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x168)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x183)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x176 $x13)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x137 $x48)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x159 $x185)))
 (let (($x50 (not $x188)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x184 $x116)))
 (let (($x171 (and (not $x173) $x50)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x11 $x219)))
 (let (($x130 (not $x10)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x81 $x27)))
 (let (($x18 (and (not $x93) $x130)))
 (let (($x222 (and (and (and (and (and (and $x18 $x171) $x37) $x74) $x8) $x117) $x87)))
 (let (($x6 (and $x222 $x88)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x195)))
 (let (($x76 (or false (or false (and (and true (or $x89 $x134)) (or $x66 $x16))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x76)))
 (let (($x98 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x118 (and (and (and $x98 $x65) $x6) $x174)))
 (let (($x152 (forall ((input.ind-%var724X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var724X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x94))))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var724X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var724X)))
 (=> $x30 (= ?x157 ?x64))))))))
 ))
 (let (($x100 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var723X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var723X) (bvult input.ind-%var723X input.dst.llvm-%n)))))
 ))
 (let (($x186 (and $x100 $x152)))
 (let (($x189 (and $x186 $x118)))
 (let (($x220 (= $x189 true)))
 (let (($x7 (forall ((input.ind-%var734X (_ BitVec 32)) )(let ((?x99 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var734X)))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var734X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var734X)))
 (=> $x30 (= ?x157 ?x99))))))
 ))
 (let (($x161 (forall ((input.ind-%var733X (_ BitVec 32)) )(let (($x179 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var733X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var733X)))
 (= $x30 $x179))))
 ))
 (let (($x113 (and $x161 $x7)))
 (let (($x52 (and $x113 $x220)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x167 $x52)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x42 (and $x182 $x127)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x49 $x42)))
 (let (($x25 (=> $x61 $x12)))
 (not $x25)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x19 ((_ extract 8 0) input.dst.llvm-%x)))
 (let (($x155 (= (_ bv0 9) ?x19)))
 (let (($x12 (= $x155 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x144 (concat ?x138 (concat ?x95 (concat ?x218 ?x20)))))
 (let (($x32 (= input.dst.llvm-%n ?x144)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x23 (concat ?x26 (concat ?x139 (concat ?x166 ?x44)))))
 (let (($x180 (= input.dst.llvm-%x ?x23)))
 (let (($x174 (and $x180 $x32)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x168)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x87 (= (_ bv0 32) ?x183)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x13 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x176 $x13)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x8 (and $x137 $x48)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x159 $x185)))
 (let (($x50 (not $x188)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x184 $x116)))
 (let (($x171 (and (not $x173) $x50)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x10 (and $x11 $x219)))
 (let (($x130 (not $x10)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x81 $x27)))
 (let (($x18 (and (not $x93) $x130)))
 (let (($x222 (and (and (and (and (and (and $x18 $x171) $x37) $x74) $x8) $x117) $x87)))
 (let (($x6 (and $x222 $x88)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x66 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x195)))
 (let (($x76 (or false (or false (and (and true (or $x89 $x134)) (or $x66 $x16))))))
 (let (($x65 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x76)))
 (let (($x98 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x118 (and (and (and $x98 $x65) $x6) $x174)))
 (let (($x152 (forall ((input.ind-%var724X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var724X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x94))))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var724X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var724X)))
 (=> $x30 (= ?x157 ?x64))))))))
 ))
 (let (($x100 (forall ((input.ind-%var723X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var723X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var723X) (bvult input.ind-%var723X input.dst.llvm-%n)))))
 ))
 (let (($x186 (and $x100 $x152)))
 (let (($x189 (and $x186 $x118)))
 (let (($x220 (= $x189 true)))
 (let (($x7 (forall ((input.ind-%var734X (_ BitVec 32)) )(let ((?x99 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var734X)))
 (let ((?x157 (input.spec-%var-x-1.1.1 input.ind-%var734X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var734X)))
 (=> $x30 (= ?x157 ?x99))))))
 ))
 (let (($x161 (forall ((input.ind-%var733X (_ BitVec 32)) )(let (($x179 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var733X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var733X)))
 (= $x30 $x179))))
 ))
 (let (($x113 (and $x161 $x7)))
 (let (($x52 (and $x113 $x220)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x127 (and $x167 $x52)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x42 (and $x182 $x127)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x61 (and $x49 $x42)))
 (let (($x25 (=> $x61 $x12)))
 (not $x25)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x18c2180c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb9968858)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb996885b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x18c2180f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb9968858)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x18c2180c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb9968859) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xb996885b)
                                   (k!0 #xb996885a)
                                   (k!0 #xb9968859)
                                   (k!0 #xb9968858))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00d42004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x004489c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80808080)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x80800180)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00d42007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x004489c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00d42004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x004489c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00d42005) #x01
      #x80))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00d42007)
                                   (k!0 #x00d42006)
                                   (k!0 #x00d42005)
                                   (k!0 #x00d42004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x004489c3)
                        (k!0 #x004489c2)
                        (k!0 #x004489c1)
                        (k!0 #x004489c0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x22 (= (_ bv0 1) ?x34)))
 (let (($x143 (= $x22 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x177 (concat ?x140 (concat ?x196 ?x150)))))
 (let (($x79 (= input.dst.llvm-%n ?x154)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x198 (concat ?x199 (concat ?x197 ?x5)))))
 (let (($x160 (= input.dst.llvm-%x ?x68)))
 (let (($x187 (and $x160 $x79)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x42)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x52)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x213 $x32)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x62 $x174)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x53 $x23)))
 (let (($x206 (not $x180)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x166 $x44)))
 (let (($x47 (and (not $x31) $x206)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x133 $x215)))
 (let (($x103 (not $x26)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x159 $x184)))
 (let (($x124 (and (not $x6) $x103)))
 (let (($x14 (and (and (and (and (and (and $x124 $x47) $x97) $x20) $x118) $x220) $x127)))
 (let (($x163 (and $x14 $x61)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x222 (or false (or false (and (and true (or $x176 $x131)) (or $x169 $x117))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x222)))
 (let (($x65 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x83 (and (and (and $x65 $x88) $x163) $x187)))
 (let (($x36 (forall ((input.ind-%var760X (_ BitVec 32)) )(let ((?x141 (bvadd (bvmul input.ind-%var760X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x130))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var760X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var760X)))
 (=> $x30 (= ?x11 ?x75))))))))
 ))
 (let (($x147 (forall ((input.ind-%var759X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var759X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var759X) (bvult input.ind-%var759X input.dst.llvm-%n)))))
 ))
 (let (($x60 (and $x147 $x36)))
 (let (($x58 (and $x60 $x83)))
 (let (($x107 (= $x58 true)))
 (let (($x94 (forall ((input.ind-%var770X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var770X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var770X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var770X)))
 (=> $x30 (= ?x11 ?x111))))))
 ))
 (let (($x98 (forall ((input.ind-%var769X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var769X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var769X)))
 (= $x30 $x161))))
 ))
 (let (($x162 (and $x98 $x94)))
 (let (($x73 (and $x162 $x107)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x200 (and $x182 $x73)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x15 (and $x158 $x200)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x49 $x15)))
 (let (($x121 (=> $x221 $x143)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x34 ((_ extract 0 0) input.dst.llvm-%n)))
 (let (($x22 (= (_ bv0 1) ?x34)))
 (let (($x143 (= $x22 true)))
 (let ((?x150 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x154 (concat ?x177 (concat ?x140 (concat ?x196 ?x150)))))
 (let (($x79 (= input.dst.llvm-%n ?x154)))
 (let ((?x5 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x198 (concat ?x199 (concat ?x197 ?x5)))))
 (let (($x160 (= input.dst.llvm-%x ?x68)))
 (let (($x187 (and $x160 $x79)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x61 (= (_ bv0 32) ?x42)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x52)))
 (let ((?x189 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let ((?x144 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x144)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x213 $x32)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (and $x62 $x174)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x180 (and $x53 $x23)))
 (let (($x206 (not $x180)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x166 $x44)))
 (let (($x47 (and (not $x31) $x206)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x133 $x215)))
 (let (($x103 (not $x26)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x159 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x159 $x184)))
 (let (($x124 (and (not $x6) $x103)))
 (let (($x14 (and (and (and (and (and (and $x124 $x47) $x97) $x20) $x118) $x220) $x127)))
 (let (($x163 (and $x14 $x61)))
 (let (($x117 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x169 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x131 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x222 (or false (or false (and (and true (or $x176 $x131)) (or $x169 $x117))))))
 (let (($x88 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x222)))
 (let (($x65 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x83 (and (and (and $x65 $x88) $x163) $x187)))
 (let (($x36 (forall ((input.ind-%var760X (_ BitVec 32)) )(let ((?x141 (bvadd (bvmul input.ind-%var760X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x130))))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var760X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var760X)))
 (=> $x30 (= ?x11 ?x75))))))))
 ))
 (let (($x147 (forall ((input.ind-%var759X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var759X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var759X) (bvult input.ind-%var759X input.dst.llvm-%n)))))
 ))
 (let (($x60 (and $x147 $x36)))
 (let (($x58 (and $x60 $x83)))
 (let (($x107 (= $x58 true)))
 (let (($x94 (forall ((input.ind-%var770X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var770X)))
 (let ((?x11 (input.spec-%var-x-1.1.1 input.ind-%var770X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var770X)))
 (=> $x30 (= ?x11 ?x111))))))
 ))
 (let (($x98 (forall ((input.ind-%var769X (_ BitVec 32)) )(let (($x161 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var769X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var769X)))
 (= $x30 $x161))))
 ))
 (let (($x162 (and $x98 $x94)))
 (let (($x73 (and $x162 $x107)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x200 (and $x182 $x73)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x15 (and $x158 $x200)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x221 (and $x49 $x15)))
 (let (($x121 (=> $x221 $x143)))
 (not $x121)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00001064)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00001067)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00001064)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00001064) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00002003)
                                   (k!0 #x00002002)
                                   (k!0 #x00002001)
                                   (k!0 #x00002000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00001067)
                        (k!0 #x00001066)
                        (k!0 #x00001065)
                        (k!0 #x00001064))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb87f5cc8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf897c5c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xefefef01)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf6a9ef00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf897c5c3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb87f5ccb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf897c5c0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb87f5cc8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf6a9ef01) #x00
    (ite (= x!0 #xf897c5c2) #xa9
    (ite (= x!0 #xb87f5cc8) #x01
    (ite (= x!0 #xf6a9ef03) #x00
    (ite (= x!0 #xf6a9ef02) #x00
    (ite (= x!0 #xf6a9ef00) #x00
    (ite (= x!0 #xf897c5c3) #xf6
    (ite (= x!0 #xf897c5c0) #x00
      #xef)))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #xf897c5c3)
                                     (k!6 #xf897c5c2)
                                     (k!6 #xf897c5c1)
                                     (k!6 #xf897c5c0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #xefefef01 x!0)
         (ite (bvule #xefefef02 x!0) #xefefef02 #xefefef01)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 ((_ extract 6 0) input.dst.llvm-%x)))
 (let (($x105 (= (_ bv0 7) ?x54)))
 (let (($x89 (= $x105 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x211 (concat ?x171 (concat ?x157 ?x101)))))
 (let (($x146 (= input.dst.llvm-%n ?x186)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x201 (concat ?x173 (concat ?x120 ?x110)))))
 (let (($x37 (= input.dst.llvm-%x ?x148)))
 (let (($x152 (and $x37 $x146)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x15)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x73)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x154)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x114 $x79)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x70 $x187)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x224 $x68)))
 (let (($x21 (not $x160)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x197 $x5)))
 (let (($x225 (and (not $x40) $x21)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x128 $x119)))
 (let (($x67 (not $x198)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x53 $x166)))
 (let (($x86 (and (not $x163) $x67)))
 (let (($x82 (and (and (and (and (and (and $x86 $x225) $x39) $x150) $x83) $x107) $x200)))
 (let (($x35 (and $x82 $x221)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x14 (or false (or false (and (and true (or $x213 $x144)) (or $x189 $x220))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x170 (and (and (and $x88 $x61) $x35) $x152)))
 (let (($x8 (forall ((input.ind-%var796X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var796X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x103))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var796X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var796X)))
 (=> $x30 (= ?x133 ?x46))))))))
 ))
 (let (($x141 (forall ((input.ind-%var795X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var795X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var795X) (bvult input.ind-%var795X input.dst.llvm-%n)))))
 ))
 (let (($x29 (and $x141 $x8)))
 (let (($x28 (and $x29 $x170)))
 (let (($x99 (= $x28 true)))
 (let (($x130 (forall ((input.ind-%var806X (_ BitVec 32)) )(let ((?x195 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var806X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var806X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var806X)))
 (=> $x30 (= ?x133 ?x195))))))
 ))
 (let (($x65 (forall ((input.ind-%var805X (_ BitVec 32)) )(let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var805X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var805X)))
 (= $x30 $x98))))
 ))
 (let (($x72 (and $x65 $x130)))
 (let (($x85 (and $x72 $x99)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x158 $x85)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x167 (and $x100 $x81)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x49 $x167)))
 (let (($x136 (=> $x132 $x89)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 ((_ extract 6 0) input.dst.llvm-%x)))
 (let (($x105 (= (_ bv0 7) ?x54)))
 (let (($x89 (= $x105 true)))
 (let ((?x101 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x211 (concat ?x171 (concat ?x157 ?x101)))))
 (let (($x146 (= input.dst.llvm-%n ?x186)))
 (let ((?x110 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x148 (concat ?x201 (concat ?x173 (concat ?x120 ?x110)))))
 (let (($x37 (= input.dst.llvm-%x ?x148)))
 (let (($x152 (and $x37 $x146)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x221 (= (_ bv0 32) ?x15)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x73)))
 (let ((?x58 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x154)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x114 $x79)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x70 $x187)))
 (let (($x150 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x39 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (and $x224 $x68)))
 (let (($x21 (not $x160)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x197 $x5)))
 (let (($x225 (and (not $x40) $x21)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x198 (and $x128 $x119)))
 (let (($x67 (not $x198)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x53 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (and $x53 $x166)))
 (let (($x86 (and (not $x163) $x67)))
 (let (($x82 (and (and (and (and (and (and $x86 $x225) $x39) $x150) $x83) $x107) $x200)))
 (let (($x35 (and $x82 $x221)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x62 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x62)))
 (let (($x144 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x62)))
 (let (($x14 (or false (or false (and (and true (or $x213 $x144)) (or $x189 $x220))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x14)))
 (let (($x88 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x170 (and (and (and $x88 $x61) $x35) $x152)))
 (let (($x8 (forall ((input.ind-%var796X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var796X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x103))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var796X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var796X)))
 (=> $x30 (= ?x133 ?x46))))))))
 ))
 (let (($x141 (forall ((input.ind-%var795X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var795X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var795X) (bvult input.ind-%var795X input.dst.llvm-%n)))))
 ))
 (let (($x29 (and $x141 $x8)))
 (let (($x28 (and $x29 $x170)))
 (let (($x99 (= $x28 true)))
 (let (($x130 (forall ((input.ind-%var806X (_ BitVec 32)) )(let ((?x195 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var806X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var806X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var806X)))
 (=> $x30 (= ?x133 ?x195))))))
 ))
 (let (($x65 (forall ((input.ind-%var805X (_ BitVec 32)) )(let (($x98 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var805X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var805X)))
 (= $x30 $x98))))
 ))
 (let (($x72 (and $x65 $x130)))
 (let (($x85 (and $x72 $x99)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x81 (and $x158 $x85)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x167 (and $x100 $x81)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x49 $x167)))
 (let (($x136 (=> $x132 $x89)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000041c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0740a1ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000041c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000041c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x40)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x000041c3)
                        (k!0 #x000041c2)
                        (k!0 #x000041c1)
                        (k!0 #x000041c0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xe7fffe40)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1477b6d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x46bffaf3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x46bffaf1) #x00
    (ite (= x!0 #x1477b6d6) #xff
    (ite (= x!0 #x46bffaf0) #x00
    (ite (= x!0 #x46bffaf3) #x00
    (ite (= x!0 #x46bffaf2) #x00
    (ite (= x!0 #x1477b6d7) #xe7
    (ite (= x!0 #x1477b6d4) #x40
      #xfe))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!6 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!2 (k!6 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!3 (k!6 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 ((_ extract 5 0) input.dst.llvm-%x)))
 (let (($x125 (= (_ bv0 6) ?x56)))
 (let (($x176 (= $x125 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x138 (concat ?x47 (concat ?x11 ?x19)))))
 (let (($x178 (= input.dst.llvm-%n ?x60)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x55 (concat ?x31 (concat ?x192 ?x69)))))
 (let (($x97 (= input.dst.llvm-%x ?x7)))
 (let (($x36 (and $x97 $x178)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x167)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x85)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (and $x9 $x146)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x63 $x152)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x145 $x148)))
 (let (($x66 (not $x37)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x120 $x110)))
 (let (($x109 (and (not $x122) $x66)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x185 $x41)))
 (let (($x179 (not $x201)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x224 $x197)))
 (let (($x223 (and (not $x35) $x179)))
 (let (($x112 (and (and (and (and (and (and $x223 $x109) $x45) $x101) $x170) $x99) $x81)))
 (let (($x104 (and $x112 $x132)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x82 (or false (or false (and (and true (or $x114 $x154)) (or $x58 $x107))))))
 (let (($x221 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x61 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x216 (and (and (and $x61 $x221) $x104) $x36)))
 (let (($x118 (forall ((input.ind-%var832X (_ BitVec 32)) )(let ((?x140 (bvadd (bvmul input.ind-%var832X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x67))))
 (let ((?x128 (input.spec-%var-x-1.1.1 input.ind-%var832X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var832X)))
 (=> $x30 (= ?x128 ?x12))))))))
 ))
 (let (($x95 (forall ((input.ind-%var831X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var831X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var831X) (bvult input.ind-%var831X input.dst.llvm-%n)))))
 ))
 (let (($x155 (and $x95 $x118)))
 (let (($x191 (and $x155 $x216)))
 (let (($x111 (= $x191 true)))
 (let (($x103 (forall ((input.ind-%var842X (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var842X)))
 (let ((?x128 (input.spec-%var-x-1.1.1 input.ind-%var842X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var842X)))
 (=> $x30 (= ?x128 ?x137))))))
 ))
 (let (($x88 (forall ((input.ind-%var841X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var841X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var841X)))
 (= $x30 $x65))))
 ))
 (let (($x129 (and $x88 $x103)))
 (let (($x59 (and $x129 $x111)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x100 $x59)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x147 $x159)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x49 $x182)))
 (let (($x38 (=> $x76 $x176)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x56 ((_ extract 5 0) input.dst.llvm-%x)))
 (let (($x125 (= (_ bv0 6) ?x56)))
 (let (($x176 (= $x125 true)))
 (let ((?x19 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x138 (concat ?x47 (concat ?x11 ?x19)))))
 (let (($x178 (= input.dst.llvm-%n ?x60)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x55 (concat ?x31 (concat ?x192 ?x69)))))
 (let (($x97 (= input.dst.llvm-%x ?x7)))
 (let (($x36 (and $x97 $x178)))
 (let ((?x167 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x132 (= (_ bv0 32) ?x167)))
 (let ((?x85 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x81 (= (_ bv0 32) ?x85)))
 (let ((?x28 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x186 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x186)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x152 (and $x9 $x146)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (and $x63 $x152)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x145 $x148)))
 (let (($x66 (not $x37)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x120 $x110)))
 (let (($x109 (and (not $x122) $x66)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x185 $x41)))
 (let (($x179 (not $x201)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x35 (and $x224 $x197)))
 (let (($x223 (and (not $x35) $x179)))
 (let (($x112 (and (and (and (and (and (and $x223 $x109) $x45) $x101) $x170) $x99) $x81)))
 (let (($x104 (and $x112 $x132)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x82 (or false (or false (and (and true (or $x114 $x154)) (or $x58 $x107))))))
 (let (($x221 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x61 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x216 (and (and (and $x61 $x221) $x104) $x36)))
 (let (($x118 (forall ((input.ind-%var832X (_ BitVec 32)) )(let ((?x140 (bvadd (bvmul input.ind-%var832X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x67))))
 (let ((?x128 (input.spec-%var-x-1.1.1 input.ind-%var832X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var832X)))
 (=> $x30 (= ?x128 ?x12))))))))
 ))
 (let (($x95 (forall ((input.ind-%var831X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var831X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var831X) (bvult input.ind-%var831X input.dst.llvm-%n)))))
 ))
 (let (($x155 (and $x95 $x118)))
 (let (($x191 (and $x155 $x216)))
 (let (($x111 (= $x191 true)))
 (let (($x103 (forall ((input.ind-%var842X (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var842X)))
 (let ((?x128 (input.spec-%var-x-1.1.1 input.ind-%var842X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var842X)))
 (=> $x30 (= ?x128 ?x137))))))
 ))
 (let (($x88 (forall ((input.ind-%var841X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var841X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var841X)))
 (= $x30 $x65))))
 ))
 (let (($x129 (and $x88 $x103)))
 (let (($x59 (and $x129 $x111)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x100 $x59)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x147 $x159)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x76 (and $x49 $x182)))
 (let (($x38 (=> $x76 $x176)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x000041c0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0740a1ab)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x000041c3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0740a1a8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x000041c0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x20)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0740a1ab)
                                   (k!0 #x0740a1aa)
                                   (k!0 #x0740a1a9)
                                   (k!0 #x0740a1a8))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x000041c3)
                        (k!0 #x000041c2)
                        (k!0 #x000041c1)
                        (k!0 #x000041c0))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xe7fffe04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1477b6d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x46bffaf3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1477b6d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x46bffaf0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x46bffaf1) #x00
    (ite (= x!0 #x1477b6d6) #xff
    (ite (= x!0 #x46bffaf0) #x00
    (ite (= x!0 #x46bffaf3) #x00
    (ite (= x!0 #x46bffaf2) #x00
    (ite (= x!0 #x1477b6d5) #xfe
    (ite (= x!0 #x1477b6d7) #xe7
      #x04))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!6 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!2 (k!6 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!3 (k!6 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4)))))
          (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!6 #x1477b6d7)
                                   (k!6 #x1477b6d6)
                                   (k!6 #x1477b6d5)
                                   (k!6 #x1477b6d4))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x48 (= (_ bv0 2) ?x50)))
 (let (($x213 (= $x48 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x177 (concat ?x225 (concat ?x133 ?x34)))))
 (let (($x25 (= input.dst.llvm-%n ?x29)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x165 (concat ?x40 (concat ?x13 ?x113)))))
 (let (($x39 (= input.dst.llvm-%x ?x94)))
 (let (($x8 (and $x39 $x25)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x182)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x59)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x87 $x178)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x16 $x36)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x116 $x7)))
 (let (($x169 (not $x97)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x192 $x69)))
 (let (($x18 (and (not $x134) $x169)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x23 $x139)))
 (let (($x161 (not $x55)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x145 $x120)))
 (let (($x93 (and (not $x104) $x161)))
 (let (($x193 (and (and (and (and (and (and $x93 $x18) $x164) $x19) $x216) $x111) $x159)))
 (let (($x102 (and $x193 $x76)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x112 (or false (or false (and (and true (or $x9 $x186)) (or $x28 $x99))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x221 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x92 (and (and (and $x221 $x132) $x102) $x8)))
 (let (($x83 (forall ((input.ind-%var868X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var868X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x179))))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var868X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var868X)))
 (=> $x30 (= ?x185 ?x143))))))))
 ))
 (let (($x140 (forall ((input.ind-%var867X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var867X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var867X) (bvult input.ind-%var867X input.dst.llvm-%n)))))
 ))
 (let (($x22 (and $x140 $x83)))
 (let (($x188 (and $x22 $x92)))
 (let (($x195 (= $x188 true)))
 (let (($x67 (forall ((input.ind-%var878X (_ BitVec 32)) )(let ((?x62 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var878X)))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var878X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var878X)))
 (=> $x30 (= ?x185 ?x62))))))
 ))
 (let (($x61 (forall ((input.ind-%var877X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var877X)))
 (= $x30 $x88))))
 ))
 (let (($x218 (and $x61 $x67)))
 (let (($x142 (and $x218 $x195)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x147 $x142)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x158 (and $x141 $x53)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x222 (and $x49 $x158)))
 (let (($x183 (=> $x222 $x213)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x48 (= (_ bv0 2) ?x50)))
 (let (($x213 (= $x48 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x177 (concat ?x225 (concat ?x133 ?x34)))))
 (let (($x25 (= input.dst.llvm-%n ?x29)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x165 (concat ?x40 (concat ?x13 ?x113)))))
 (let (($x39 (= input.dst.llvm-%x ?x94)))
 (let (($x8 (and $x39 $x25)))
 (let ((?x182 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x76 (= (_ bv0 32) ?x182)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x59)))
 (let ((?x191 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x191)))
 (let ((?x60 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x87 $x178)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x16 $x36)))
 (let (($x19 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x116 $x7)))
 (let (($x169 (not $x97)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x192 $x69)))
 (let (($x18 (and (not $x134) $x169)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x23 $x139)))
 (let (($x161 (not $x55)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x145 $x120)))
 (let (($x93 (and (not $x104) $x161)))
 (let (($x193 (and (and (and (and (and (and $x93 $x18) $x164) $x19) $x216) $x111) $x159)))
 (let (($x102 (and $x193 $x76)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x186 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x112 (or false (or false (and (and true (or $x9 $x186)) (or $x28 $x99))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x221 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x92 (and (and (and $x221 $x132) $x102) $x8)))
 (let (($x83 (forall ((input.ind-%var868X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var868X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x179))))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var868X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var868X)))
 (=> $x30 (= ?x185 ?x143))))))))
 ))
 (let (($x140 (forall ((input.ind-%var867X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var867X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var867X) (bvult input.ind-%var867X input.dst.llvm-%n)))))
 ))
 (let (($x22 (and $x140 $x83)))
 (let (($x188 (and $x22 $x92)))
 (let (($x195 (= $x188 true)))
 (let (($x67 (forall ((input.ind-%var878X (_ BitVec 32)) )(let ((?x62 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var878X)))
 (let ((?x185 (input.spec-%var-x-1.1.1 input.ind-%var878X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var878X)))
 (=> $x30 (= ?x185 ?x62))))))
 ))
 (let (($x61 (forall ((input.ind-%var877X (_ BitVec 32)) )(let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var877X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var877X)))
 (= $x30 $x88))))
 ))
 (let (($x218 (and $x61 $x67)))
 (let (($x142 (and $x218 $x195)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x53 (and $x147 $x142)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x158 (and $x141 $x53)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x222 (and $x49 $x158)))
 (let (($x183 (=> $x222 $x213)))
 (not $x183)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x174 (= $x206 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x211 (concat ?x109 (concat ?x128 ?x54)))))
 (let (($x121 (= input.dst.llvm-%n ?x155)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x57 (concat ?x122 (concat ?x32 ?x162)))))
 (let (($x45 (= input.dst.llvm-%x ?x130)))
 (let (($x118 (and $x45 $x121)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x158)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x142)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x127 $x25)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x117 $x8)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x44 $x94)))
 (let (($x189 (not $x39)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x13 $x113)))
 (let (($x124 (and (not $x131) $x189)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x68 $x199)))
 (let (($x98 (not $x165)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x116 $x192)))
 (let (($x6 (and (not $x102) $x98)))
 (let (($x226 (and (and (and (and (and (and $x6 $x124) $x80) $x34) $x92) $x195) $x53)))
 (let (($x135 (and $x226 $x222)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x193 (or false (or false (and (and true (or $x87 $x60)) (or $x191 $x111))))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x193)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x151 (and (and (and $x132 $x76) $x135) $x118)))
 (let (($x170 (forall ((input.ind-%var888X (_ BitVec 32)) )(let ((?x47 (bvadd (bvmul input.ind-%var888X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x161))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var888X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var888X)))
 (=> $x30 (= ?x23 ?x89))))))))
 ))
 (let (($x171 (forall ((input.ind-%var887X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var887X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var887X) (bvult input.ind-%var887X input.dst.llvm-%n)))))
 ))
 (let (($x105 (and $x171 $x170)))
 (let (($x180 (and $x105 $x151)))
 (let (($x137 (= $x180 true)))
 (let (($x179 (forall ((input.ind-%var898X (_ BitVec 32)) )(let ((?x70 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var898X)))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var898X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var898X)))
 (=> $x30 (= ?x23 ?x70))))))
 ))
 (let (($x221 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var897X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var897X)))
 (= $x30 $x61))))
 ))
 (let (($x196 (and $x221 $x179)))
 (let (($x168 (and $x196 $x137)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x141 $x168)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x100 (and $x95 $x224)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x49 $x100)))
 (let (($x114 (=> $x14 $x174)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x206 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x174 (= $x206 true)))
 (let ((?x54 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x155 (concat ?x211 (concat ?x109 (concat ?x128 ?x54)))))
 (let (($x121 (= input.dst.llvm-%n ?x155)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x57 (concat ?x122 (concat ?x32 ?x162)))))
 (let (($x45 (= input.dst.llvm-%x ?x130)))
 (let (($x118 (and $x45 $x121)))
 (let ((?x158 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x158)))
 (let ((?x142 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x142)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x188)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x29)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (and $x127 $x25)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x117 $x8)))
 (let (($x34 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x44 $x94)))
 (let (($x189 (not $x39)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x13 $x113)))
 (let (($x124 (and (not $x131) $x189)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x165 (and $x68 $x199)))
 (let (($x98 (not $x165)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x116 $x192)))
 (let (($x6 (and (not $x102) $x98)))
 (let (($x226 (and (and (and (and (and (and $x6 $x124) $x80) $x34) $x92) $x195) $x53)))
 (let (($x135 (and $x226 $x222)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x191 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x16)))
 (let (($x193 (or false (or false (and (and true (or $x87 $x60)) (or $x191 $x111))))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x193)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x151 (and (and (and $x132 $x76) $x135) $x118)))
 (let (($x170 (forall ((input.ind-%var888X (_ BitVec 32)) )(let ((?x47 (bvadd (bvmul input.ind-%var888X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv1 32))) (select input.dst.llvm-mem ?x47))))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x47 (_ bv2 32))) ?x161))))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var888X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var888X)))
 (=> $x30 (= ?x23 ?x89))))))))
 ))
 (let (($x171 (forall ((input.ind-%var887X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var887X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var887X) (bvult input.ind-%var887X input.dst.llvm-%n)))))
 ))
 (let (($x105 (and $x171 $x170)))
 (let (($x180 (and $x105 $x151)))
 (let (($x137 (= $x180 true)))
 (let (($x179 (forall ((input.ind-%var898X (_ BitVec 32)) )(let ((?x70 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var898X)))
 (let ((?x23 (input.spec-%var-x-1.1.1 input.ind-%var898X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var898X)))
 (=> $x30 (= ?x23 ?x70))))))
 ))
 (let (($x221 (forall ((input.ind-%var897X (_ BitVec 32)) )(let (($x61 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var897X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var897X)))
 (= $x30 $x61))))
 ))
 (let (($x196 (and $x221 $x179)))
 (let (($x168 (and $x196 $x137)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x141 $x168)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x100 (and $x95 $x224)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x14 (and $x49 $x100)))
 (let (($x114 (=> $x14 $x174)))
 (not $x114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00064808)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffffff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0006480b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00064808)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00040000) #x00
      #xff))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00040003)
                                   (k!0 #x00040002)
                                   (k!0 #x00040001)
                                   (k!0 #x00040000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x0006480b)
                        (k!0 #x0006480a)
                        (k!0 #x00064809)
                        (k!0 #x00064808))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xe96bd4a0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9a56c6d4)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x3bcbfc00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9a56c6d7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xe96bd4a3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9a56c6d4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xe96bd4a0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xe96bd4a1) #xff
    (ite (= x!0 #x9a56c6d6) #xcb
    (ite (= x!0 #xe96bd4a0) #xff
    (ite (= x!0 #x3bcbfc03) #x00
    (ite (= x!0 #xe96bd4a3) #xff
    (ite (= x!0 #x3bcbfc01) #x00
    (ite (= x!0 #xe96bd4a2) #xff
    (ite (= x!0 #x3bcbfc02) #x00
    (ite (= x!0 #x3bcbfc00) #x00
    (ite (= x!0 #x9a56c6d7) #x3b
    (ite (= x!0 #x9a56c6d4) #x00
      #xfc))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!6 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4)))))
            (a!2 (k!6 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4)))))
            (a!3 (k!6 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4)))))
            (a!4 (k!6 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!6 #x9a56c6d7)
                                     (k!6 #x9a56c6d6)
                                     (k!6 #x9a56c6d5)
                                     (k!6 #x9a56c6d4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x187 (= $x21 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x22 (concat ?x81 (concat ?x107 ?x20)))))
 (let (($x83 (= input.dst.llvm-%n ?x136)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x103 (concat ?x110 (concat ?x154 ?x35)))))
 (let (($x129 (= input.dst.llvm-%x ?x164)))
 (let (($x169 (and $x129 $x83)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x100)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x168)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (and $x200 $x121)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x220 $x118)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x5 $x130)))
 (let (($x58 (not $x45)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x32 $x162)))
 (let (($x86 (and (not $x144) $x58)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x148 $x173)))
 (let (($x65 (not $x57)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x44 $x13)))
 (let (($x163 (and (not $x135) $x65)))
 (let (($x219 (and (and (and (and (and (and $x163 $x86) $x74) $x54) $x151) $x137) $x224)))
 (let (($x104 (and $x219 $x14)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x226 (or false (or false (and (and true (or $x127 $x29)) (or $x188 $x195))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x226)))
 (let (($x76 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and (and (and $x76 $x222) $x104) $x169)))
 (let (($x216 (forall ((input.ind-%var924X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var924X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x98))))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var924X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var924X)))
 (=> $x30 (= ?x68 ?x176))))))))
 ))
 (let (($x47 (forall ((input.ind-%var923X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var923X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var923X) (bvult input.ind-%var923X input.dst.llvm-%n)))))
 ))
 (let (($x125 (and $x47 $x216)))
 (let (($x62 (and $x125 $x160)))
 (let (($x42 (= $x62 true)))
 (let (($x161 (forall ((input.ind-%var934X (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var934X)))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var934X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var934X)))
 (=> $x30 (= ?x68 ?x63))))))
 ))
 (let (($x132 (forall ((input.ind-%var933X (_ BitVec 32)) )(let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var933X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var933X)))
 (= $x30 $x221))))
 ))
 (let (($x157 (and $x132 $x161)))
 (let (($x145 (and $x157 $x42)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x95 $x145)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x82 (and $x140 $x147)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x26 (and $x49 $x82)))
 (let (($x9 (=> $x26 $x187)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x21 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x187 (= $x21 true)))
 (let ((?x20 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x136 (concat ?x22 (concat ?x81 (concat ?x107 ?x20)))))
 (let (($x83 (= input.dst.llvm-%n ?x136)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x110 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x103 (concat ?x110 (concat ?x154 ?x35)))))
 (let (($x129 (= input.dst.llvm-%x ?x164)))
 (let (($x169 (and $x129 $x83)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x100)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x168)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x180)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x155)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (and $x200 $x121)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x220 $x118)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x5 $x130)))
 (let (($x58 (not $x45)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x144 (and $x32 $x162)))
 (let (($x86 (and (not $x144) $x58)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x148 $x173)))
 (let (($x65 (not $x57)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (and $x44 $x13)))
 (let (($x163 (and (not $x135) $x65)))
 (let (($x219 (and (and (and (and (and (and $x163 $x86) $x74) $x54) $x151) $x137) $x224)))
 (let (($x104 (and $x219 $x14)))
 (let (($x195 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x117)))
 (let (($x226 (or false (or false (and (and true (or $x127 $x29)) (or $x188 $x195))))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x226)))
 (let (($x76 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and (and (and $x76 $x222) $x104) $x169)))
 (let (($x216 (forall ((input.ind-%var924X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var924X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x98))))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var924X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var924X)))
 (=> $x30 (= ?x68 ?x176))))))))
 ))
 (let (($x47 (forall ((input.ind-%var923X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var923X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var923X) (bvult input.ind-%var923X input.dst.llvm-%n)))))
 ))
 (let (($x125 (and $x47 $x216)))
 (let (($x62 (and $x125 $x160)))
 (let (($x42 (= $x62 true)))
 (let (($x161 (forall ((input.ind-%var934X (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var934X)))
 (let ((?x68 (input.spec-%var-x-1.1.1 input.ind-%var934X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var934X)))
 (=> $x30 (= ?x68 ?x63))))))
 ))
 (let (($x132 (forall ((input.ind-%var933X (_ BitVec 32)) )(let (($x221 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var933X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var933X)))
 (= $x30 $x221))))
 ))
 (let (($x157 (and $x132 $x161)))
 (let (($x145 (and $x157 $x42)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x147 (and $x95 $x145)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x82 (and $x140 $x147)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x26 (and $x49 $x82)))
 (let (($x9 (=> $x26 $x187)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (forall ((input.ind-%var964X (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul input.ind-%var964X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x65))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var964X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var964X)))
 (=> $x30 (= ?x148 ?x213))))))))
 ))
 (let (($x181 (forall ((input.ind-%var963X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var963X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var963X) (bvult input.ind-%var963X (_ bv0 32))))))
 ))
 (let (($x108 (and $x181 $x149)))
 (let (($x106 (= $x108 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x38 (concat ?x191 (concat ?x93 ?x23)))))
 (let (($x189 (= input.dst.llvm-%n ?x170)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x80 (concat ?x40 (concat ?x61 ?x146)))))
 (let (($x50 (= input.dst.llvm-%x ?x218)))
 (let (($x94 (and $x50 $x189)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x82)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x145)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x28 $x83)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x223 $x169)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x31 $x164)))
 (let (($x138 (not $x129)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x154 $x35)))
 (let (($x18 (and (not $x88) $x138)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x115 $x43)))
 (let (($x134 (not $x103)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x5 $x32)))
 (let (($x79 (and (not $x104) $x134)))
 (let (($x102 (and (and (and (and (and (and $x79 $x18) $x185) $x20) $x160) $x42) $x147)))
 (let (($x56 (and $x102 $x26)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x220 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x220)))
 (let (($x219 (or false (or false (and (and true (or $x200 $x155)) (or $x180 $x137))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x222 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x70 (and (and (and $x222 $x14) $x56) $x94)))
 (let (($x92 (forall ((input.ind-%var944X (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul input.ind-%var944X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x65))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var944X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (=> $x30 (= ?x148 ?x213))))))))
 ))
 (let (($x225 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var943X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var943X) (bvult input.ind-%var943X input.dst.llvm-%n)))))
 ))
 (let (($x48 (and $x225 $x92)))
 (let (($x15 (and $x48 $x70)))
 (let (($x116 (= $x15 true)))
 (let (($x98 (forall ((input.ind-%var954X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var954X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var954X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var954X)))
 (=> $x30 (= ?x148 ?x16))))))
 ))
 (let (($x76 (forall ((input.ind-%var953X (_ BitVec 32)) )(let (($x132 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var953X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var953X)))
 (= $x30 $x132))))
 ))
 (let (($x11 (and $x76 $x98)))
 (let (($x141 (and $x11 $x116)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x140 $x141)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x198 (and $x171 $x112)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x49 $x198)))
 (let (($x190 (=> $x66 $x106)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (forall ((input.ind-%var964X (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul input.ind-%var964X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x65))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var964X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var964X)))
 (=> $x30 (= ?x148 ?x213))))))))
 ))
 (let (($x181 (forall ((input.ind-%var963X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var963X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var963X) (bvult input.ind-%var963X (_ bv0 32))))))
 ))
 (let (($x108 (and $x181 $x149)))
 (let (($x106 (= $x108 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x170 (concat ?x38 (concat ?x191 (concat ?x93 ?x23)))))
 (let (($x189 (= input.dst.llvm-%n ?x170)))
 (let ((?x146 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x80 (concat ?x40 (concat ?x61 ?x146)))))
 (let (($x50 (= input.dst.llvm-%x ?x218)))
 (let (($x94 (and $x50 $x189)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x82)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x145)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let ((?x136 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x136)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x28 $x83)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x223 $x169)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x31 $x164)))
 (let (($x138 (not $x129)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x154 $x35)))
 (let (($x18 (and (not $x88) $x138)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x115 $x43)))
 (let (($x134 (not $x103)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x104 (and $x5 $x32)))
 (let (($x79 (and (not $x104) $x134)))
 (let (($x102 (and (and (and (and (and (and $x79 $x18) $x185) $x20) $x160) $x42) $x147)))
 (let (($x56 (and $x102 $x26)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x220 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x200 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x220)))
 (let (($x219 (or false (or false (and (and true (or $x200 $x155)) (or $x180 $x137))))))
 (let (($x14 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x222 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x70 (and (and (and $x222 $x14) $x56) $x94)))
 (let (($x92 (forall ((input.ind-%var944X (_ BitVec 32)) )(let ((?x109 (bvadd (bvmul input.ind-%var944X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv1 32))) (select input.dst.llvm-mem ?x109))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x109 (_ bv2 32))) ?x65))))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var944X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var944X)))
 (=> $x30 (= ?x148 ?x213))))))))
 ))
 (let (($x225 (forall ((input.ind-%var943X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var943X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var943X) (bvult input.ind-%var943X input.dst.llvm-%n)))))
 ))
 (let (($x48 (and $x225 $x92)))
 (let (($x15 (and $x48 $x70)))
 (let (($x116 (= $x15 true)))
 (let (($x98 (forall ((input.ind-%var954X (_ BitVec 32)) )(let ((?x16 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var954X)))
 (let ((?x148 (input.spec-%var-x-1.1.1 input.ind-%var954X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var954X)))
 (=> $x30 (= ?x148 ?x16))))))
 ))
 (let (($x76 (forall ((input.ind-%var953X (_ BitVec 32)) )(let (($x132 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var953X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var953X)))
 (= $x30 $x132))))
 ))
 (let (($x11 (and $x76 $x98)))
 (let (($x141 (and $x11 $x116)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x112 (and $x140 $x141)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x198 (and $x171 $x112)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x66 (and $x49 $x198)))
 (let (($x190 (=> $x66 $x106)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var963X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var964X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var963X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.ind-%var964X!1 () (_ BitVec 32)
    #x85b84326)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60744088)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0a690007)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa288e220)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6074408b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0f1010f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60744088)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0f1010d) #x00
    (ite (= x!0 #xc0f1010c) #x07
    (ite (= x!0 #xa288e223) #x00
    (ite (= x!0 #xc0f1010f) #x0a
    (ite (= x!0 #xa288e222) #x00
    (ite (= x!0 #xc0f1010e) #x69
    (ite (= x!0 #xa288e221) #x00
    (ite (= x!0 #x60744089) #xe2
    (ite (= x!0 #xa288e220) #x00
    (ite (= x!0 #x6074408b) #xa2
    (ite (= x!0 #x60744088) #x20
      #x88))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0a690007 x!0)
         (ite (bvule #x0a690008 x!0)
              (ite (bvule #x85b84326 x!0) #x85b84326 #x0a690008)
              #x0a690007)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x85b84326) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let ((?x81 (bvadd (bvmul input.ind-%var1010X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x134))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var1010X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1010X)))
 (=> $x30 (= ?x115 ?x114))))))))
 ))
 (let (($x51 (forall ((input.ind-%var1009X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1009X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1009X) (bvult input.ind-%var1009X (_ bv0 32))))))
 ))
 (let (($x217 (and $x51 $x27)))
 (let (($x84 (= $x217 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x6 (concat ?x101 (concat ?x120 ?x179)))))
 (let (($x53 (= input.dst.llvm-%n ?x86)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x144 (concat ?x178 (concat ?x135 ?x24)))))
 (let (($x122 (= input.dst.llvm-%x ?x113)))
 (let (($x188 (and $x122 $x53)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x198)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x141)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x177 $x189)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x124 $x94)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x64 $x218)))
 (let (($x105 (not $x50)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x61 $x146)))
 (let (($x159 (and (not $x131) $x105)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x37 $x67)))
 (let (($x69 (not $x80)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x31 $x154)))
 (let (($x186 (and (not $x56) $x69)))
 (let (($x108 (and (and (and (and (and (and $x186 $x159) $x99) $x23) $x70) $x116) $x112)))
 (let (($x106 (and $x108 $x66)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x102 (or false (or false (and (and true (or $x28 $x136)) (or $x62 $x42))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x183 (and (and (and $x14 $x26) $x106) $x188)))
 (let (($x151 (forall ((input.ind-%var990X (_ BitVec 32)) )(let ((?x81 (bvadd (bvmul input.ind-%var990X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x134))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var990X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var990X)))
 (=> $x30 (= ?x115 ?x114))))))))
 ))
 (let (($x109 (forall ((input.ind-%var989X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var989X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var989X) (bvult input.ind-%var989X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x109 $x151)))
 (let (($x216 (and $x174 $x183)))
 (let (($x58 (= $x216 true)))
 (let (($x65 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let ((?x117 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1000X)))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var1000X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1000X)))
 (=> $x30 (= ?x115 ?x117))))))
 ))
 (let (($x222 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var999X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var999X)))
 (= $x30 $x76))))
 ))
 (let (($x133 (and $x222 $x65)))
 (let (($x130 (and $x133 $x58)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x171 $x130)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x97 (and $x47 $x10)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x49 $x97)))
 (let (($x33 (=> $x63 $x84)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let ((?x81 (bvadd (bvmul input.ind-%var1010X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x134))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var1010X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1010X)))
 (=> $x30 (= ?x115 ?x114))))))))
 ))
 (let (($x51 (forall ((input.ind-%var1009X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1009X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1009X) (bvult input.ind-%var1009X (_ bv0 32))))))
 ))
 (let (($x217 (and $x51 $x27)))
 (let (($x84 (= $x217 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x6 (concat ?x101 (concat ?x120 ?x179)))))
 (let (($x53 (= input.dst.llvm-%n ?x86)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x178 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x113 (concat ?x144 (concat ?x178 (concat ?x135 ?x24)))))
 (let (($x122 (= input.dst.llvm-%x ?x113)))
 (let (($x188 (and $x122 $x53)))
 (let ((?x198 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x198)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x141)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x15)))
 (let ((?x170 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x189 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x170)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x177 $x189)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (and $x124 $x94)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x64 $x218)))
 (let (($x105 (not $x50)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x61 $x146)))
 (let (($x159 (and (not $x131) $x105)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x37 $x67)))
 (let (($x69 (not $x80)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x31 $x154)))
 (let (($x186 (and (not $x56) $x69)))
 (let (($x108 (and (and (and (and (and (and $x186 $x159) $x99) $x23) $x70) $x116) $x112)))
 (let (($x106 (and $x108 $x66)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x223 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x223)))
 (let (($x102 (or false (or false (and (and true (or $x28 $x136)) (or $x62 $x42))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x102)))
 (let (($x14 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x183 (and (and (and $x14 $x26) $x106) $x188)))
 (let (($x151 (forall ((input.ind-%var990X (_ BitVec 32)) )(let ((?x81 (bvadd (bvmul input.ind-%var990X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x134))))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var990X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var990X)))
 (=> $x30 (= ?x115 ?x114))))))))
 ))
 (let (($x109 (forall ((input.ind-%var989X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var989X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var989X) (bvult input.ind-%var989X input.dst.llvm-%n)))))
 ))
 (let (($x174 (and $x109 $x151)))
 (let (($x216 (and $x174 $x183)))
 (let (($x58 (= $x216 true)))
 (let (($x65 (forall ((input.ind-%var1000X (_ BitVec 32)) )(let ((?x117 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1000X)))
 (let ((?x115 (input.spec-%var-x-1.1.1 input.ind-%var1000X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1000X)))
 (=> $x30 (= ?x115 ?x117))))))
 ))
 (let (($x222 (forall ((input.ind-%var999X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var999X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var999X)))
 (= $x30 $x76))))
 ))
 (let (($x133 (and $x222 $x65)))
 (let (($x130 (and $x133 $x58)))
 (let (($x171 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x10 (and $x171 $x130)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x97 (and $x47 $x10)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x63 (and $x49 $x97)))
 (let (($x33 (=> $x63 $x84)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var1010X!1 () (_ BitVec 32)
    #x03ffffc1)
  (define-fun input.ind-%var1009X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x03dd57c9)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x000000fc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #xfc
    (ite (= x!0 #x00000007) #x03
    (ite (= x!0 #x00000006) #xdd
    (ite (= x!0 #x00000004) #xc9
    (ite (= x!0 #x00000005) #x57
      #x00))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (not (bvule (concat (k!2 #x00000007)
                          (k!2 #x00000006)
                          (k!2 #x00000005)
                          (k!2 #x00000004))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0000000b)
                                     (k!2 #x0000000a)
                                     (k!2 #x00000009)
                                     (k!2 #x00000008))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x03ffffc1) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var1009X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var1010X!1 () (_ BitVec 32)
    #x85b84326)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x60744088)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0a690007)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa288e220)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6074408b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0f1010f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x60744088)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0f1010c)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0f1010d) #x00
    (ite (= x!0 #xc0f1010c) #x07
    (ite (= x!0 #xa288e222) #x00
    (ite (= x!0 #xc0f1010f) #x0a
    (ite (= x!0 #xa288e223) #x00
    (ite (= x!0 #xc0f1010e) #x69
    (ite (= x!0 #xa288e221) #x00
    (ite (= x!0 #x60744089) #xe2
    (ite (= x!0 #xa288e220) #x00
    (ite (= x!0 #x6074408b) #xa2
    (ite (= x!0 #x60744088) #x20
      #x88))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x6074408b)
                                     (k!2 #x6074408a)
                                     (k!2 #x60744089)
                                     (k!2 #x60744088))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!4 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0a690007 x!0)
         (ite (bvule #x0a690008 x!0)
              (ite (bvule #x85b84326 x!0) #x85b84326 #x0a690008)
              #x0a690007)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x85b84326) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var1056X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x69))))
 (let ((?x37 (input.spec-%var-x-1.1.1 input.ind-%var1056X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1056X)))
 (=> $x30 (= ?x37 ?x73))))))))
 ))
 (let (($x166 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1055X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1055X) (bvult input.ind-%var1055X input.dst.llvm-%x)))))
 ))
 (let (($x87 (and $x166 $x7)))
 (let (($x85 (= $x87 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x163 (concat ?x19 (concat ?x192 ?x161)))))
 (let (($x224 (= input.dst.llvm-%n ?x18)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x88 (concat ?x25 (concat ?x104 ?x197)))))
 (let (($x110 (= input.dst.llvm-%x ?x162)))
 (let (($x180 (and $x110 $x224)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x97)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x130)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x68 $x53)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x196 $x188)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x60 $x113)))
 (let (($x111 (not $x122)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x135 $x24)))
 (let (($x206 (and (not $x150) $x111)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x125 $x221)))
 (let (($x72 (not $x144)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x64 $x61)))
 (let (($x119 (and (not $x106) $x72)))
 (let (($x217 (and (and (and (and (and (and $x119 $x206) $x74) $x179) $x183) $x58) $x10)))
 (let (($x84 (and $x217 $x63)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x108 (or false (or false (and (and true (or $x177 $x170)) (or $x15 $x116))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x26 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x52 (and (and (and $x26 $x66) $x84) $x180)))
 (let (($x160 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var1036X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x69))))
 (let ((?x37 (input.spec-%var-x-1.1.1 input.ind-%var1036X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1036X)))
 (=> $x30 (= ?x37 ?x73))))))))
 ))
 (let (($x81 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1035X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1035X) (bvult input.ind-%var1035X input.dst.llvm-%n)))))
 ))
 (let (($x9 (and $x81 $x160)))
 (let (($x92 (and $x9 $x52)))
 (let (($x138 (= $x92 true)))
 (let (($x134 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1046X)))
 (let ((?x37 (input.spec-%var-x-1.1.1 input.ind-%var1046X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1046X)))
 (=> $x30 (= ?x37 ?x220))))))
 ))
 (let (($x14 (forall ((input.ind-%var1045X (_ BitVec 32)) )(let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1045X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1045X)))
 (= $x30 $x222))))
 ))
 (let (($x128 (and $x14 $x134)))
 (let (($x164 (and $x128 $x138)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x47 $x164)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x39 (and $x225 $x21)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x16 (and $x49 $x39)))
 (let (($x184 (=> $x16 $x85)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (forall ((input.ind-%var1056X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var1056X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x69))))
 (let ((?x37 (input.spec-%var-x-1.1.1 input.ind-%var1056X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1056X)))
 (=> $x30 (= ?x37 ?x73))))))))
 ))
 (let (($x166 (forall ((input.ind-%var1055X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1055X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1055X) (bvult input.ind-%var1055X input.dst.llvm-%x)))))
 ))
 (let (($x87 (and $x166 $x7)))
 (let (($x85 (= $x87 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x18 (concat ?x163 (concat ?x19 (concat ?x192 ?x161)))))
 (let (($x224 (= input.dst.llvm-%n ?x18)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x88 (concat ?x25 (concat ?x104 ?x197)))))
 (let (($x110 (= input.dst.llvm-%x ?x162)))
 (let (($x180 (and $x110 $x224)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x63 (= (_ bv0 32) ?x97)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x130)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x58 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x86 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x68 $x53)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (and $x196 $x188)))
 (let (($x179 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (and $x60 $x113)))
 (let (($x111 (not $x122)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (and $x135 $x24)))
 (let (($x206 (and (not $x150) $x111)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (and $x125 $x221)))
 (let (($x72 (not $x144)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x64 $x61)))
 (let (($x119 (and (not $x106) $x72)))
 (let (($x217 (and (and (and (and (and (and $x119 $x206) $x74) $x179) $x183) $x58) $x10)))
 (let (($x84 (and $x217 $x63)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x124 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x124)))
 (let (($x170 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x124)))
 (let (($x108 (or false (or false (and (and true (or $x177 $x170)) (or $x15 $x116))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x26 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x52 (and (and (and $x26 $x66) $x84) $x180)))
 (let (($x160 (forall ((input.ind-%var1036X (_ BitVec 32)) )(let ((?x191 (bvadd (bvmul input.ind-%var1036X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv1 32))) (select input.dst.llvm-mem ?x191))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x191 (_ bv2 32))) ?x69))))
 (let ((?x37 (input.spec-%var-x-1.1.1 input.ind-%var1036X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1036X)))
 (=> $x30 (= ?x37 ?x73))))))))
 ))
 (let (($x81 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1035X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1035X) (bvult input.ind-%var1035X input.dst.llvm-%n)))))
 ))
 (let (($x9 (and $x81 $x160)))
 (let (($x92 (and $x9 $x52)))
 (let (($x138 (= $x92 true)))
 (let (($x134 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1046X)))
 (let ((?x37 (input.spec-%var-x-1.1.1 input.ind-%var1046X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1046X)))
 (=> $x30 (= ?x37 ?x220))))))
 ))
 (let (($x14 (forall ((input.ind-%var1045X (_ BitVec 32)) )(let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1045X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1045X)))
 (= $x30 $x222))))
 ))
 (let (($x128 (and $x14 $x134)))
 (let (($x164 (and $x128 $x138)))
 (let (($x47 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x21 (and $x47 $x164)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x39 (and $x225 $x21)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x16 (and $x49 $x39)))
 (let (($x184 (=> $x16 $x85)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc6d10068)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var1055X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61000038)
  (define-fun input.ind-%var1056X!1 () (_ BitVec 32)
    #x0c004442)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x01100500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc6d1006b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x6100003b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc6d10068)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61000038)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc6d1006b) #x01
    (ite (= x!0 #xc6d1006a) #x10
    (ite (= x!0 #xc6d10069) #x05
      #x00))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0c004442) false
      (not (bvule (concat (k!2 #x6100003b)
                          (k!2 #x6100003a)
                          (k!2 #x61000039)
                          (k!2 #x61000038))
                  x!0)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #xc6d1006b)
                                   (k!2 #xc6d1006a)
                                   (k!2 #xc6d10069)
                                   (k!2 #xc6d10068))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
    (ite (= x!0 #x0c004442) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var1055X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var1056X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x138ea5b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x22a0650c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xdd5cfdf8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x22a0650f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x138ea5bb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x22a0650c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x138ea5b8)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x22a0650c) #xf8
    (ite (= x!0 #x138ea5b9) #x00
    (ite (= x!0 #x138ea5b8) #x00
    (ite (= x!0 #x138ea5bb) #x00
    (ite (= x!0 #xdd5cfdfb) #x00
    (ite (= x!0 #xdd5cfdfa) #x00
    (ite (= x!0 #x138ea5ba) #x00
    (ite (= x!0 #x22a0650d) #xfd
    (ite (= x!0 #xdd5cfdf8) #x00
    (ite (= x!0 #xdd5cfdf9) #x00
    (ite (= x!0 #x22a0650f) #xdd
      #x5c))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000800
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x22a0650f)
                                     (k!2 #x22a0650e)
                                     (k!2 #x22a0650d)
                                     (k!2 #x22a0650c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x71 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul input.ind-%var1102X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x72))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var1102X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1102X)))
 (=> $x30 (= ?x125 ?x181))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1101X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1101X) (bvult input.ind-%var1101X input.dst.llvm-%n)))))
 ))
 (let (($x5 (and $x118 $x71)))
 (let (($x55 (= $x5 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x79 (concat ?x34 (concat ?x13 ?x98)))))
 (let (($x147 (= input.dst.llvm-%n ?x159)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x131 (concat ?x121 (concat ?x56 ?x96)))))
 (let (($x40 (= input.dst.llvm-%x ?x35)))
 (let (($x62 (and $x40 $x147)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x39)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x164)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x148 $x224)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x157 $x180)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x29 $x162)))
 (let (($x195 (not $x110)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x104 $x197)))
 (let (($x187 (and (not $x75) $x195)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x48 $x132)))
 (let (($x190 (not $x88)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x60 $x135)))
 (let (($x41 (and (not $x84) $x190)))
 (let (($x87 (and (and (and (and (and (and $x41 $x187) $x185) $x161) $x52) $x138) $x21)))
 (let (($x85 (and $x87 $x16)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x217 (or false (or false (and (and true (or $x68 $x86)) (or $x216 $x58))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x66 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x215 (and (and (and $x66 $x63) $x85) $x62)))
 (let (($x70 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul input.ind-%var1082X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x72))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var1082X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1082X)))
 (=> $x30 (= ?x125 ?x181))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1081X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1081X) (bvult input.ind-%var1081X input.dst.llvm-%n)))))
 ))
 (let (($x17 (and $x191 $x70)))
 (let (($x151 (and $x17 $x215)))
 (let (($x105 (= $x151 true)))
 (let (($x69 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1092X)))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var1092X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1092X)))
 (=> $x30 (= ?x125 ?x223))))))
 ))
 (let (($x26 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let (($x14 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1091X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1091X)))
 (= $x30 $x14))))
 ))
 (let (($x107 (and $x26 $x69)))
 (let (($x218 (and $x107 $x105)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x225 $x218)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x45 (and $x109 $x78)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x49 $x45)))
 (let (($x77 (=> $x117 $x55)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x71 (forall ((input.ind-%var1102X (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul input.ind-%var1102X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x72))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var1102X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1102X)))
 (=> $x30 (= ?x125 ?x181))))))))
 ))
 (let (($x118 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1101X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1101X) (bvult input.ind-%var1101X input.dst.llvm-%n)))))
 ))
 (let (($x5 (and $x118 $x71)))
 (let (($x55 (= $x5 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x159 (concat ?x79 (concat ?x34 (concat ?x13 ?x98)))))
 (let (($x147 (= input.dst.llvm-%n ?x159)))
 (let ((?x96 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x35 (concat ?x131 (concat ?x121 (concat ?x56 ?x96)))))
 (let (($x40 (= input.dst.llvm-%x ?x35)))
 (let (($x62 (and $x40 $x147)))
 (let ((?x39 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x39)))
 (let ((?x164 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x21 (= (_ bv0 32) ?x164)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x224 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x148 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x148 $x224)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x157 $x180)))
 (let (($x161 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x162 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (and $x29 $x162)))
 (let (($x195 (not $x110)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x104 $x197)))
 (let (($x187 (and (not $x75) $x195)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x48 $x132)))
 (let (($x190 (not $x88)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x60 $x135)))
 (let (($x41 (and (not $x84) $x190)))
 (let (($x87 (and (and (and (and (and (and $x41 $x187) $x185) $x161) $x52) $x138) $x21)))
 (let (($x85 (and $x87 $x16)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x216 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x217 (or false (or false (and (and true (or $x68 $x86)) (or $x216 $x58))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x217)))
 (let (($x66 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x215 (and (and (and $x66 $x63) $x85) $x62)))
 (let (($x70 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let ((?x101 (bvadd (bvmul input.ind-%var1082X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem ?x101))))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x101 (_ bv2 32))) ?x72))))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var1082X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1082X)))
 (=> $x30 (= ?x125 ?x181))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1081X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1081X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1081X) (bvult input.ind-%var1081X input.dst.llvm-%n)))))
 ))
 (let (($x17 (and $x191 $x70)))
 (let (($x151 (and $x17 $x215)))
 (let (($x105 (= $x151 true)))
 (let (($x69 (forall ((input.ind-%var1092X (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1092X)))
 (let ((?x125 (input.spec-%var-x-1.1.1 input.ind-%var1092X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1092X)))
 (=> $x30 (= ?x125 ?x223))))))
 ))
 (let (($x26 (forall ((input.ind-%var1091X (_ BitVec 32)) )(let (($x14 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1091X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1091X)))
 (= $x30 $x14))))
 ))
 (let (($x107 (and $x26 $x69)))
 (let (($x218 (and $x107 $x105)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x78 (and $x225 $x218)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x45 (and $x109 $x78)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x49 $x45)))
 (let (($x77 (=> $x117 $x55)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (= false true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x15 (concat ?x186 (concat ?x54 ?x133)))))
 (let (($x9 (= input.dst.llvm-%n ?x6)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x143 (concat ?x150 (concat ?x83 ?x12)))))
 (let (($x74 (= input.dst.llvm-%x ?x65)))
 (let (($x149 (and $x74 $x9)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x45)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x218)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x115 $x147)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x11 $x62)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x155 $x35)))
 (let (($x137 (not $x40)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x56 $x96)))
 (let (($x214 (and (not $x46) $x137)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x174 $x76)))
 (let (($x33 (not $x131)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x29 $x104)))
 (let (($x139 (and (not $x85) $x33)))
 (let (($x44 (and (and (and (and (and (and $x139 $x214) $x99) $x98) $x215) $x105) $x78)))
 (let (($x199 (and $x44 $x117)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x87 (or false (or false (and (and true (or $x148 $x18)) (or $x92 $x138))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x63 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (and (and (and $x63 $x16) $x199) $x149)))
 (let (($x183 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let ((?x19 (bvadd (bvmul input.ind-%var1112X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x190))))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1112X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1112X)))
 (=> $x30 (= ?x48 ?x51))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1111X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1111X) (bvult input.ind-%var1111X input.dst.llvm-%n)))))
 ))
 (let (($x59 (and $x101 $x183)))
 (let (($x36 (and $x59 $x113)))
 (let (($x129 (= $x36 true)))
 (let (($x72 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let ((?x124 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1122X)))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1122X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1122X)))
 (=> $x30 (= ?x48 ?x124))))))
 ))
 (let (($x66 (forall ((input.ind-%var1121X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1121X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1121X)))
 (= $x30 $x26))))
 ))
 (let (($x93 (and $x66 $x72)))
 (let (($x220 (and $x93 $x129)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x109 $x220)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x64 (and $x81 $x100)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x47 (and $x49 $x64)))
 (let (($x57 (=> $x47 $x102)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x102 (= false true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x6 (concat ?x15 (concat ?x186 (concat ?x54 ?x133)))))
 (let (($x9 (= input.dst.llvm-%n ?x6)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x143 (concat ?x150 (concat ?x83 ?x12)))))
 (let (($x74 (= input.dst.llvm-%x ?x65)))
 (let (($x149 (and $x74 $x9)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x45)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x78 (= (_ bv0 32) ?x218)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x159 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x159)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x62 (and $x115 $x147)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x11 $x62)))
 (let (($x98 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x155 $x35)))
 (let (($x137 (not $x40)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x56 $x96)))
 (let (($x214 (and (not $x46) $x137)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x174 $x76)))
 (let (($x33 (not $x131)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x29 $x104)))
 (let (($x139 (and (not $x85) $x33)))
 (let (($x44 (and (and (and (and (and (and $x139 $x214) $x99) $x98) $x215) $x105) $x78)))
 (let (($x199 (and $x44 $x117)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x87 (or false (or false (and (and true (or $x148 $x18)) (or $x92 $x138))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x63 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x113 (and (and (and $x63 $x16) $x199) $x149)))
 (let (($x183 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let ((?x19 (bvadd (bvmul input.ind-%var1112X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv1 32))) (select input.dst.llvm-mem ?x19))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x19 (_ bv2 32))) ?x190))))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1112X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1112X)))
 (=> $x30 (= ?x48 ?x51))))))))
 ))
 (let (($x101 (forall ((input.ind-%var1111X (_ BitVec 32)) )(let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1111X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var1111X) (bvult input.ind-%var1111X input.dst.llvm-%n)))))
 ))
 (let (($x59 (and $x101 $x183)))
 (let (($x36 (and $x59 $x113)))
 (let (($x129 (= $x36 true)))
 (let (($x72 (forall ((input.ind-%var1122X (_ BitVec 32)) )(let ((?x124 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1122X)))
 (let ((?x48 (input.spec-%var-x-1.1.1 input.ind-%var1122X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1122X)))
 (=> $x30 (= ?x48 ?x124))))))
 ))
 (let (($x66 (forall ((input.ind-%var1121X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1121X)))
 (let (($x30 (input.spec-%var-x-1.0.1 input.ind-%var1121X)))
 (= $x30 $x26))))
 ))
 (let (($x93 (and $x66 $x72)))
 (let (($x220 (and $x93 $x129)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x100 (and $x109 $x220)))
 (let (($x81 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x64 (and $x81 $x100)))
 (let (($x49 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x47 (and $x49 $x64)))
 (let (($x57 (=> $x47 $x102)))
 (not $x57)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00005804)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00005800)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00005807)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00005803)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00005804)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00005800)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00005807)
                                   (k!0 #x00005806)
                                   (k!0 #x00005805)
                                   (k!0 #x00005804))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule (concat (k!0 #x00005803)
                        (k!0 #x00005802)
                        (k!0 #x00005801)
                        (k!0 #x00005800))
                x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf1024ff0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8e044ff8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8e044ffb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf1024ff3)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8e044ff8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf1024ff0)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x8e044ffb)
                                   (k!0 #x8e044ffa)
                                   (k!0 #x8e044ff9)
                                   (k!0 #x8e044ff8))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x199 false)))
 (let (($x226 (= $x203 true)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x182 true)))
 (let (($x158 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x158 true)))
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x177 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x28 (= $x141 true)))
 (let (($x38 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x38 true)))
 (let (($x60 (forall ((input.ind-%var1148X (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul input.ind-%var1148X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x17))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1148X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1148X)))
 (=> $x26 (= ?x80 ?x50))))))))
 ))
 (let (($x57 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1147X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1147X) (bvult input.ind-%var1147X input.dst.llvm-%n)))))
 ))
 (let (($x225 (and $x57 $x60)))
 (let (($x108 (= $x225 true)))
 (let ((?x178 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvadd input.dst.llvm-%x ?x178)))
 (let (($x42 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd ?x143 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x65 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x133 (or false (or false (and (and true (or $x146 $x65)) (or $x15 $x42))))))
 (let (($x206 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) $x133)))
 (let (($x150 (=> (and $x199 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) $x133)))
 (let (($x184 (= $x150 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x115)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x5)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x118)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x137 $x34)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x40 $x99)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x76 $x131)))
 (let (($x139 (not $x33)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x85 $x121)))
 (let (($x96 (and (not $x174) $x139)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x21 $x87)))
 (let (($x160 (not $x16)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x41 $x183)))
 (let (($x104 (and (not $x164) $x160)))
 (let (($x105 (and (and (and (and (and (and $x104 $x96) $x79) $x35) $x71) $x98) $x11)))
 (let (($x77 (and $x105 $x159)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x166 (or false (or false (and (and true (or $x192 $x39)) (or $x18 $x224))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x166)))
 (let (($x218 (and $x7 $x77)))
 (let (($x78 (= $x218 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x132 (= (_ bv0 2) ?x88)))
 (let (($x190 (= $x132 true)))
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x86 true)))
 (let (($x120 (and $x188 $x190)))
 (let (($x44 (and $x120 $x78)))
 (let (($x6 (and $x44 $x184)))
 (let (($x103 (and $x6 $x108)))
 (let (($x68 (and $x103 $x94)))
 (let (($x169 (and $x68 $x28)))
 (let (($x193 (and $x169 $x145)))
 (let (($x219 (and $x193 $x171)))
 (let (($x205 (and $x219 $x140)))
 (let (($x110 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let ((?x101 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1158X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1158X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1158X)))
 (=> $x26 (= ?x80 ?x101))))))
 ))
 (let (($x72 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1157X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1157X)))
 (= $x26 $x48))))
 ))
 (let (($x179 (and $x72 $x110)))
 (let (($x91 (and $x179 $x205)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x176 $x91)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x191 $x175)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x114 $x123)))
 (let (($x210 (=> $x202 $x226)))
 (not $x210))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x199 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x199 false)))
 (let (($x226 (= $x203 true)))
 (let (($x182 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x140 (= $x182 true)))
 (let (($x158 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x171 (= $x158 true)))
 (let (($x177 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x145 (= $x177 true)))
 (let (($x141 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x28 (= $x141 true)))
 (let (($x38 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x94 (= $x38 true)))
 (let (($x60 (forall ((input.ind-%var1148X (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul input.ind-%var1148X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x17))))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1148X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1148X)))
 (=> $x26 (= ?x80 ?x50))))))))
 ))
 (let (($x57 (forall ((input.ind-%var1147X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1147X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1147X) (bvult input.ind-%var1147X input.dst.llvm-%n)))))
 ))
 (let (($x225 (and $x57 $x60)))
 (let (($x108 (= $x225 true)))
 (let ((?x178 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvadd input.dst.llvm-%x ?x178)))
 (let (($x42 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x136 (bvadd ?x143 (_ bv3 32))))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x65 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x136)))
 (let (($x133 (or false (or false (and (and true (or $x146 $x65)) (or $x15 $x42))))))
 (let (($x206 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) $x133)))
 (let (($x150 (=> (and $x199 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) $x133)))
 (let (($x184 (= $x150 true)))
 (let ((?x115 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x115)))
 (let ((?x5 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x11 (= (_ bv0 32) ?x5)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x118)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x99 (and $x137 $x34)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x40 $x99)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x76 $x131)))
 (let (($x139 (not $x33)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (and $x85 $x121)))
 (let (($x96 (and (not $x174) $x139)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (and $x21 $x87)))
 (let (($x160 (not $x16)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x41 $x183)))
 (let (($x104 (and (not $x164) $x160)))
 (let (($x105 (and (and (and (and (and (and $x104 $x96) $x79) $x35) $x71) $x98) $x11)))
 (let (($x77 (and $x105 $x159)))
 (let (($x224 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x197 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x197)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x197)))
 (let (($x166 (or false (or false (and (and true (or $x192 $x39)) (or $x18 $x224))))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x166)))
 (let (($x218 (and $x7 $x77)))
 (let (($x78 (= $x218 true)))
 (let ((?x88 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x132 (= (_ bv0 2) ?x88)))
 (let (($x190 (= $x132 true)))
 (let (($x86 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x86 true)))
 (let (($x120 (and $x188 $x190)))
 (let (($x44 (and $x120 $x78)))
 (let (($x6 (and $x44 $x184)))
 (let (($x103 (and $x6 $x108)))
 (let (($x68 (and $x103 $x94)))
 (let (($x169 (and $x68 $x28)))
 (let (($x193 (and $x169 $x145)))
 (let (($x219 (and $x193 $x171)))
 (let (($x205 (and $x219 $x140)))
 (let (($x110 (forall ((input.ind-%var1158X (_ BitVec 32)) )(let ((?x101 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1158X)))
 (let ((?x80 (input.spec-%var-x-1.1.1 input.ind-%var1158X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1158X)))
 (=> $x26 (= ?x80 ?x101))))))
 ))
 (let (($x72 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1157X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1157X)))
 (= $x26 $x48))))
 ))
 (let (($x179 (and $x72 $x110)))
 (let (($x91 (and $x179 $x205)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x175 (and $x176 $x91)))
 (let (($x191 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x191 $x175)))
 (let (($x114 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x202 (and $x114 $x123)))
 (let (($x210 (=> $x202 $x226)))
 (not $x210))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40082204)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000314)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x10008300)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000317)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x10008303)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000314)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x10008300)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x40082207 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40082206 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40082205 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x40082204 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00040000 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf750a004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!6))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x09d685d0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6d5b25c4)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6d5b25c7)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf750a007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6d5b25c4)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf750a004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!6 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!6 (bvadd #x09d685d3 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x09d685d2 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x09d685d1 (bvmul #x00000004 x!0)))
              (k!6 (bvadd #x09d685d0 (bvmul #x00000004 x!0))))))
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x40000000 x!0)
         (ite (bvule #x40000001 x!0) #x40000001 #x40000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!8 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!8 (k!7 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x103)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x225)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (and $x10 $x195)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x163 $x50)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x57 $x32)))
 (let (($x187 (not $x119)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x100 $x47)))
 (let (($x8 (and (not $x102) $x187)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x133 $x206)))
 (let (($x184 (not $x150)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x5 $x55)))
 (let (($x64 (and (not $x54) $x184)))
 (let (($x177 (and (and (and (and (and (and $x64 $x8) $x27) $x216) $x223) $x60) $x108)))
 (let (($x145 (and $x177 $x38)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x42 (or false (or false (and (and true (or $x178 $x143)) (or $x146 $x65))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x200 (and $x127 $x145)))
 (let (($x89 (= $x200 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x107 (concat ?x124 (concat ?x222 ?x210)))))
 (let (($x61 (= input.dst.llvm-%n ?x93)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x123 (concat ?x205 (concat ?x219 ?x158)))))
 (let (($x203 (= input.dst.llvm-%x ?x202)))
 (let (($x109 (and $x203 $x61)))
 (let (($x43 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x127) $x145)))
 (let (($x84 (and $x43 $x109)))
 (let (($x76 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var1184X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x99))))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var1184X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1184X)))
 (=> $x26 (= ?x214 ?x33))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1183X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1183X) (bvult input.ind-%var1183X input.dst.llvm-%n)))))
 ))
 (let (($x85 (and $x138 $x76)))
 (let (($x9 (and $x85 $x84)))
 (let (($x113 (= $x9 true)))
 (let (($x142 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let ((?x192 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1194X)))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var1194X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1194X)))
 (=> $x26 (= ?x214 ?x192))))))
 ))
 (let (($x164 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1193X)))
 (= $x26 $x72))))
 ))
 (let (($x224 (and $x164 $x142)))
 (let (($x36 (and $x224 $x113)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x73 $x36)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x49 $x106)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x181 $x189)))
 (let (($x134 (=> $x128 $x89)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x103 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x38 (= (_ bv0 32) ?x103)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x108 (= (_ bv0 32) ?x225)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x17)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (and $x10 $x195)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x163 $x50)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x57 $x32)))
 (let (($x187 (not $x119)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x100 $x47)))
 (let (($x8 (and (not $x102) $x187)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x150 (and $x133 $x206)))
 (let (($x184 (not $x150)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x5 $x55)))
 (let (($x64 (and (not $x54) $x184)))
 (let (($x177 (and (and (and (and (and (and $x64 $x8) $x27) $x216) $x223) $x60) $x108)))
 (let (($x145 (and $x177 $x38)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x111 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x111)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x111)))
 (let (($x42 (or false (or false (and (and true (or $x178 $x143)) (or $x146 $x65))))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x200 (and $x127 $x145)))
 (let (($x89 (= $x200 true)))
 (let ((?x210 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x107 (concat ?x124 (concat ?x222 ?x210)))))
 (let (($x61 (= input.dst.llvm-%n ?x93)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x123 (concat ?x205 (concat ?x219 ?x158)))))
 (let (($x203 (= input.dst.llvm-%x ?x202)))
 (let (($x109 (and $x203 $x61)))
 (let (($x43 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x127) $x145)))
 (let (($x84 (and $x43 $x109)))
 (let (($x76 (forall ((input.ind-%var1184X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var1184X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x33 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x99))))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var1184X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1184X)))
 (=> $x26 (= ?x214 ?x33))))))))
 ))
 (let (($x138 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1183X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1183X) (bvult input.ind-%var1183X input.dst.llvm-%n)))))
 ))
 (let (($x85 (and $x138 $x76)))
 (let (($x9 (and $x85 $x84)))
 (let (($x113 (= $x9 true)))
 (let (($x142 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let ((?x192 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1194X)))
 (let ((?x214 (input.spec-%var-x-1.1.1 input.ind-%var1194X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1194X)))
 (=> $x26 (= ?x214 ?x192))))))
 ))
 (let (($x164 (forall ((input.ind-%var1193X (_ BitVec 32)) )(let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1193X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1193X)))
 (= $x26 $x72))))
 ))
 (let (($x224 (and $x164 $x142)))
 (let (($x36 (and $x224 $x113)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x106 (and $x73 $x36)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x189 (and $x49 $x106)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x128 (and $x181 $x189)))
 (let (($x134 (=> $x128 $x89)))
 (not $x134))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x161 (= (_ bv0 2) ?x104)))
 (let (($x22 (= $x161 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x96 (concat ?x131 (concat ?x92 ?x80)))))
 (let (($x115 (= input.dst.llvm-%n ?x166)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x78 (concat ?x137 (concat ?x48 ?x41)))))
 (let (($x44 (= input.dst.llvm-%x ?x97)))
 (let (($x11 (and $x44 $x115)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x189)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x36)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x122 $x61)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x51 $x109)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x91 $x202)))
 (let (($x69 (not $x203)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x219 $x158)))
 (let (($x58 (and (not $x182) $x69)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x43 $x175)))
 (let (($x140 (not $x123)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x57 $x100)))
 (let (($x171 (and (not $x145) $x140)))
 (let (($x40 (and (and (and (and (and (and $x171 $x58) $x204) $x210) $x84) $x113) $x106)))
 (let (($x226 (and $x40 $x128)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x177 (or false (or false (and (and true (or $x10 $x17)) (or $x82 $x60))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x127 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x101 (and (and (and $x127 $x38) $x226) $x11)))
 (let (($x37 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var1204X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x184))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1204X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1204X)))
 (=> $x26 (= ?x133 ?x136))))))))
 ))
 (let (($x218 (forall ((input.ind-%var1203X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1203X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1203X) (bvult input.ind-%var1203X input.dst.llvm-%n)))))
 ))
 (let (($x199 (and $x218 $x37)))
 (let (($x221 (and $x199 $x101)))
 (let (($x35 (= $x221 true)))
 (let (($x99 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1214X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1214X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1214X)))
 (=> $x26 (= ?x133 ?x160))))))
 ))
 (let (($x62 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1213X)))
 (= $x26 $x164))))
 ))
 (let (($x21 (and $x62 $x99)))
 (let (($x176 (and $x21 $x35)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x49 $x176)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x130 (and $x132 $x183)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x155 (and $x181 $x130)))
 (let (($x75 (=> $x155 $x22)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x161 (= (_ bv0 2) ?x104)))
 (let (($x22 (= $x161 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x131 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x96 (concat ?x131 (concat ?x92 ?x80)))))
 (let (($x115 (= input.dst.llvm-%n ?x166)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x78 (concat ?x137 (concat ?x48 ?x41)))))
 (let (($x44 (= input.dst.llvm-%x ?x97)))
 (let (($x11 (and $x44 $x115)))
 (let ((?x189 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x128 (= (_ bv0 32) ?x189)))
 (let ((?x36 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x36)))
 (let ((?x9 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x9)))
 (let ((?x93 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (and $x122 $x61)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x51 $x109)))
 (let (($x210 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x91 $x202)))
 (let (($x69 (not $x203)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x219 $x158)))
 (let (($x58 (and (not $x182) $x69)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x43 $x175)))
 (let (($x140 (not $x123)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (and $x57 $x100)))
 (let (($x171 (and (not $x145) $x140)))
 (let (($x40 (and (and (and (and (and (and $x171 $x58) $x204) $x210) $x84) $x113) $x106)))
 (let (($x226 (and $x40 $x128)))
 (let (($x60 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x163 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x163)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x163)))
 (let (($x177 (or false (or false (and (and true (or $x10 $x17)) (or $x82 $x60))))))
 (let (($x38 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x127 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x101 (and (and (and $x127 $x38) $x226) $x11)))
 (let (($x37 (forall ((input.ind-%var1204X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var1204X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x184))))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1204X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1204X)))
 (=> $x26 (= ?x133 ?x136))))))))
 ))
 (let (($x218 (forall ((input.ind-%var1203X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1203X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1203X) (bvult input.ind-%var1203X input.dst.llvm-%n)))))
 ))
 (let (($x199 (and $x218 $x37)))
 (let (($x221 (and $x199 $x101)))
 (let (($x35 (= $x221 true)))
 (let (($x99 (forall ((input.ind-%var1214X (_ BitVec 32)) )(let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1214X)))
 (let ((?x133 (input.spec-%var-x-1.1.1 input.ind-%var1214X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1214X)))
 (=> $x26 (= ?x133 ?x160))))))
 ))
 (let (($x62 (forall ((input.ind-%var1213X (_ BitVec 32)) )(let (($x164 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1213X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1213X)))
 (= $x26 $x164))))
 ))
 (let (($x21 (and $x62 $x99)))
 (let (($x176 (and $x21 $x35)))
 (let (($x49 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x183 (and $x49 $x176)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x130 (and $x132 $x183)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x155 (and $x181 $x130)))
 (let (($x75 (=> $x155 $x22)))
 (not $x75)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x19 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x66 (= $x19 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x162 (concat ?x8 (concat ?x214 ?x68)))))
 (let (($x74 (= input.dst.llvm-%n ?x85)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x213 (concat ?x102 (concat ?x174 ?x120)))))
 (let (($x27 (= input.dst.llvm-%x ?x110)))
 (let (($x76 (and $x27 $x74)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x130)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x176)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x151 $x115)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x159 $x11)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x81 $x97)))
 (let (($x7 (not $x44)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x48 $x41)))
 (let (($x46 (and (not $x98) $x7)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x190 $x144)))
 (let (($x29 (not $x78)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x91 $x219)))
 (let (($x63 (and (not $x226) $x29)))
 (let (($x170 (and (and (and (and (and (and $x63 $x46) $x52) $x80) $x101) $x35) $x183)))
 (let (($x86 (and $x170 $x155)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x40 (or false (or false (and (and true (or $x122 $x93)) (or $x9 $x113))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x38 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x94 (and (and (and $x38 $x128) $x86) $x76)))
 (let (($x223 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1224X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x140))))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var1224X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1224X)))
 (=> $x26 (= ?x43 ?x28))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1223X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1223X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1223X) (bvult input.ind-%var1223X input.dst.llvm-%n)))))
 ))
 (let (($x141 (and $x25 $x223)))
 (let (($x217 (and $x141 $x94)))
 (let (($x192 (= $x217 true)))
 (let (($x184 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1234X)))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var1234X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1234X)))
 (=> $x26 (= ?x43 ?x111))))))
 ))
 (let (($x127 (forall ((input.ind-%var1233X (_ BitVec 32)) )(let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1233X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1233X)))
 (= $x26 $x62))))
 ))
 (let (($x45 (and $x127 $x184)))
 (let (($x157 (and $x45 $x192)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x132 $x157)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x73 (and $x138 $x5)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x79 (and $x181 $x73)))
 (let (($x56 (=> $x79 $x66)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x19 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x66 (= $x19 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x162 (concat ?x8 (concat ?x214 ?x68)))))
 (let (($x74 (= input.dst.llvm-%n ?x85)))
 (let ((?x120 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x110 (concat ?x213 (concat ?x102 (concat ?x174 ?x120)))))
 (let (($x27 (= input.dst.llvm-%x ?x110)))
 (let (($x76 (and $x27 $x74)))
 (let ((?x130 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x155 (= (_ bv0 32) ?x130)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x176)))
 (let ((?x221 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x221)))
 (let ((?x166 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x166)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (and $x151 $x115)))
 (let (($x159 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x159 $x11)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x81 $x97)))
 (let (($x7 (not $x44)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x48 $x41)))
 (let (($x46 (and (not $x98) $x7)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x190 $x144)))
 (let (($x29 (not $x78)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (and $x91 $x219)))
 (let (($x63 (and (not $x226) $x29)))
 (let (($x170 (and (and (and (and (and (and $x63 $x46) $x52) $x80) $x101) $x35) $x183)))
 (let (($x86 (and $x170 $x155)))
 (let (($x113 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x51 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x51)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x51)))
 (let (($x40 (or false (or false (and (and true (or $x122 $x93)) (or $x9 $x113))))))
 (let (($x128 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x40)))
 (let (($x38 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x94 (and (and (and $x38 $x128) $x86) $x76)))
 (let (($x223 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var1224X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x140))))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var1224X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1224X)))
 (=> $x26 (= ?x43 ?x28))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1223X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1223X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1223X) (bvult input.ind-%var1223X input.dst.llvm-%n)))))
 ))
 (let (($x141 (and $x25 $x223)))
 (let (($x217 (and $x141 $x94)))
 (let (($x192 (= $x217 true)))
 (let (($x184 (forall ((input.ind-%var1234X (_ BitVec 32)) )(let ((?x111 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1234X)))
 (let ((?x43 (input.spec-%var-x-1.1.1 input.ind-%var1234X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1234X)))
 (=> $x26 (= ?x43 ?x111))))))
 ))
 (let (($x127 (forall ((input.ind-%var1233X (_ BitVec 32)) )(let (($x62 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1233X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1233X)))
 (= $x26 $x62))))
 ))
 (let (($x45 (and $x127 $x184)))
 (let (($x157 (and $x45 $x192)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x5 (and $x132 $x157)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x73 (and $x138 $x5)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x79 (and $x181 $x73)))
 (let (($x56 (=> $x79 $x66)))
 (not $x56))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x211 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var1264X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x29))))
 (let ((?x190 (input.spec-%var-x-1.1.1 input.ind-%var1264X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1264X)))
 (=> $x26 (= ?x190 ?x14))))))))
 ))
 (let (($x24 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1263X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1263X) (bvult input.ind-%var1263X input.dst.llvm-%n)))))
 ))
 (let (($x172 (and $x24 $x211)))
 (let (($x168 (= $x172 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x169 (concat ?x82 (concat ?x64 ?x133)))))
 (let (($x69 (= input.dst.llvm-%n ?x37)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x204 (concat ?x205 (concat ?x164 ?x83)))))
 (let (($x89 (= input.dst.llvm-%x ?x224)))
 (let (($x202 (and $x89 $x69)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x73)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x157)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x217)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x15 $x74)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x139 $x76)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x13 $x110)))
 (let (($x146 (not $x27)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (and $x174 $x120)))
 (let (($x71 (and (not $x121) $x146)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x32 $x6)))
 (let (($x72 (not $x213)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x81 $x48)))
 (let (($x193 (and (not $x86) $x72)))
 (let (($x145 (and (and (and (and (and (and $x193 $x71) $x197) $x68) $x94) $x192) $x5)))
 (let (($x179 (and $x145 $x79)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x170 (or false (or false (and (and true (or $x151 $x166)) (or $x221 $x35))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x128 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and (and (and $x128 $x155) $x179) $x202)))
 (let (($x84 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var1244X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x29))))
 (let ((?x190 (input.spec-%var-x-1.1.1 input.ind-%var1244X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1244X)))
 (=> $x26 (= ?x190 ?x14))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1243X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1243X) (bvult input.ind-%var1243X input.dst.llvm-%n)))))
 ))
 (let (($x134 (and $x124 $x84)))
 (let (($x87 (and $x134 $x160)))
 (let (($x57 (= $x87 true)))
 (let (($x140 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let ((?x163 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1254X)))
 (let ((?x190 (input.spec-%var-x-1.1.1 input.ind-%var1254X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1254X)))
 (=> $x26 (= ?x190 ?x163))))))
 ))
 (let (($x38 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let (($x127 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1253X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1253X)))
 (= $x26 $x127))))
 ))
 (let (($x70 (and $x38 $x140)))
 (let (($x49 (and $x70 $x57)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x42 (and $x138 $x49)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x148 (and $x218 $x42)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x181 $x148)))
 (let (($x212 (=> $x77 $x168)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x211 (forall ((input.ind-%var1264X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var1264X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x29))))
 (let ((?x190 (input.spec-%var-x-1.1.1 input.ind-%var1264X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1264X)))
 (=> $x26 (= ?x190 ?x14))))))))
 ))
 (let (($x24 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1263X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1263X) (bvult input.ind-%var1263X input.dst.llvm-%n)))))
 ))
 (let (($x172 (and $x24 $x211)))
 (let (($x168 (= $x172 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x37 (concat ?x169 (concat ?x82 (concat ?x64 ?x133)))))
 (let (($x69 (= input.dst.llvm-%n ?x37)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x224 (concat ?x204 (concat ?x205 (concat ?x164 ?x83)))))
 (let (($x89 (= input.dst.llvm-%x ?x224)))
 (let (($x202 (and $x89 $x69)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x79 (= (_ bv0 32) ?x73)))
 (let ((?x157 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x157)))
 (let ((?x217 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x217)))
 (let ((?x85 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x74 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (and $x15 $x74)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x139 $x76)))
 (let (($x68 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x13 $x110)))
 (let (($x146 (not $x27)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (and $x174 $x120)))
 (let (($x71 (and (not $x121) $x146)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x32 $x6)))
 (let (($x72 (not $x213)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x81 $x48)))
 (let (($x193 (and (not $x86) $x72)))
 (let (($x145 (and (and (and (and (and (and $x193 $x71) $x197) $x68) $x94) $x192) $x5)))
 (let (($x179 (and $x145 $x79)))
 (let (($x35 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x170 (or false (or false (and (and true (or $x151 $x166)) (or $x221 $x35))))))
 (let (($x155 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x170)))
 (let (($x128 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x160 (and (and (and $x128 $x155) $x179) $x202)))
 (let (($x84 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let ((?x131 (bvadd (bvmul input.ind-%var1244X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x29 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv1 32))) (select input.dst.llvm-mem ?x131))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x131 (_ bv2 32))) ?x29))))
 (let ((?x190 (input.spec-%var-x-1.1.1 input.ind-%var1244X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1244X)))
 (=> $x26 (= ?x190 ?x14))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1243X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1243X) (bvult input.ind-%var1243X input.dst.llvm-%n)))))
 ))
 (let (($x134 (and $x124 $x84)))
 (let (($x87 (and $x134 $x160)))
 (let (($x57 (= $x87 true)))
 (let (($x140 (forall ((input.ind-%var1254X (_ BitVec 32)) )(let ((?x163 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1254X)))
 (let ((?x190 (input.spec-%var-x-1.1.1 input.ind-%var1254X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1254X)))
 (=> $x26 (= ?x190 ?x163))))))
 ))
 (let (($x38 (forall ((input.ind-%var1253X (_ BitVec 32)) )(let (($x127 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1253X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1253X)))
 (= $x26 $x127))))
 ))
 (let (($x70 (and $x38 $x140)))
 (let (($x49 (and $x70 $x57)))
 (let (($x138 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x42 (and $x138 $x49)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x148 (and $x218 $x42)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x77 (and $x181 $x148)))
 (let (($x212 (=> $x77 $x168)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var1294X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x72))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1294X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1294X)))
 (=> $x26 (= ?x32 ?x22))))))))
 ))
 (let (($x149 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1293X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1293X) (bvult input.ind-%var1293X input.dst.llvm-%n)))))
 ))
 (let (($x31 (and $x149 $x188)))
 (let (($x20 (= $x31 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x9 (concat ?x171 (concat ?x117 ?x21)))))
 (let (($x141 (= input.dst.llvm-%n ?x96)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x191 (concat ?x98 (concat ?x195 ?x16)))))
 (let (($x52 (= input.dst.llvm-%x ?x99)))
 (let (($x88 (and $x52 $x141)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x148)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x49)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x37)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x107 $x69)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x58 $x202)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x114 $x224)))
 (let (($x199 (not $x89)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x164 $x83)))
 (let (($x108 (and (not $x182) $x199)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x105 $x142)))
 (let (($x47 (not $x204)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x13 $x174)))
 (let (($x143 (and (not $x179) $x47)))
 (let (($x167 (and (and (and (and (and (and $x143 $x108) $x65) $x133) $x160) $x57) $x42)))
 (let (($x18 (and $x167 $x77)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x145 (or false (or false (and (and true (or $x15 $x85)) (or $x217 $x192))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x155 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x97 (and (and (and $x155 $x79) $x18) $x88)))
 (let (($x101 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var1274X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x72))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1274X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1274X)))
 (=> $x26 (= ?x32 ?x22))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1273X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1273X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1273X) (bvult input.ind-%var1273X input.dst.llvm-%n)))))
 ))
 (let (($x161 (and $x131 $x101)))
 (let (($x39 (and $x161 $x97)))
 (let (($x119 (= $x39 true)))
 (let (($x29 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let ((?x51 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1284X)))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1284X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1284X)))
 (=> $x26 (= ?x32 ?x51))))))
 ))
 (let (($x128 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let (($x38 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1283X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1283X)))
 (= $x26 $x38))))
 ))
 (let (($x222 (and $x128 $x29)))
 (let (($x111 (and $x222 $x119)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x218 $x111)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x25 $x186)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x181 $x91)))
 (let (($x165 (=> $x132 $x20)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x188 (forall ((input.ind-%var1294X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var1294X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x72))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1294X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1294X)))
 (=> $x26 (= ?x32 ?x22))))))))
 ))
 (let (($x149 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1293X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1293X) (bvult input.ind-%var1293X input.dst.llvm-%n)))))
 ))
 (let (($x31 (and $x149 $x188)))
 (let (($x20 (= $x31 true)))
 (let ((?x21 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x9 (concat ?x171 (concat ?x117 ?x21)))))
 (let (($x141 (= input.dst.llvm-%n ?x96)))
 (let ((?x16 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x191 (concat ?x98 (concat ?x195 ?x16)))))
 (let (($x52 (= input.dst.llvm-%x ?x99)))
 (let (($x88 (and $x52 $x141)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x148)))
 (let ((?x49 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x49)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x87)))
 (let ((?x37 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x69 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x37)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x202 (and $x107 $x69)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x58 $x202)))
 (let (($x133 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (and $x114 $x224)))
 (let (($x199 (not $x89)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x164 $x83)))
 (let (($x108 (and (not $x182) $x199)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x105 $x142)))
 (let (($x47 (not $x204)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x13 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (and $x13 $x174)))
 (let (($x143 (and (not $x179) $x47)))
 (let (($x167 (and (and (and (and (and (and $x143 $x108) $x65) $x133) $x160) $x57) $x42)))
 (let (($x18 (and $x167 $x77)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x145 (or false (or false (and (and true (or $x15 $x85)) (or $x217 $x192))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x155 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x97 (and (and (and $x155 $x79) $x18) $x88)))
 (let (($x101 (forall ((input.ind-%var1274X (_ BitVec 32)) )(let ((?x8 (bvadd (bvmul input.ind-%var1274X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x72 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x72))))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1274X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1274X)))
 (=> $x26 (= ?x32 ?x22))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1273X (_ BitVec 32)) )(let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1273X)))
 (= $x26 (and (bvule (_ bv0 32) input.ind-%var1273X) (bvult input.ind-%var1273X input.dst.llvm-%n)))))
 ))
 (let (($x161 (and $x131 $x101)))
 (let (($x39 (and $x161 $x97)))
 (let (($x119 (= $x39 true)))
 (let (($x29 (forall ((input.ind-%var1284X (_ BitVec 32)) )(let ((?x51 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1284X)))
 (let ((?x32 (input.spec-%var-x-1.1.1 input.ind-%var1284X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1284X)))
 (=> $x26 (= ?x32 ?x51))))))
 ))
 (let (($x128 (forall ((input.ind-%var1283X (_ BitVec 32)) )(let (($x38 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1283X)))
 (let (($x26 (input.spec-%var-x-1.0.1 input.ind-%var1283X)))
 (= $x26 $x38))))
 ))
 (let (($x222 (and $x128 $x29)))
 (let (($x111 (and $x222 $x119)))
 (let (($x218 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x186 (and $x218 $x111)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x91 (and $x25 $x186)))
 (let (($x181 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x132 (and $x181 $x91)))
 (let (($x165 (=> $x132 $x20)))
 (not $x165))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x209 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x209 false)))
 (let (($x255 (= $x254 true)))
 (let (($x247 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x244 true)))
 (let ((?x208 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvadd input.dst.llvm-%x ?x208)))
 (let (($x236 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x126 (_ bv3 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x232 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x240 (or false (or false (and (and true (or $x231 $x232)) (or $x235 $x236))))))
 (let (($x242 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) $x240)))
 (let (($x153 (=> (and $x209 (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32)))) $x240)))
 (let (($x227 (= $x153 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x194 (= $x152 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x95 (= $x185 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x10 true)))
 (let (($x125 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var1314X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x66))))
 (let ((?x123 (input.spec-%var-x-1.1.1 input.ind-%var1314X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1314X)))
 (=> $x38 (= ?x123 ?x183))))))))
 ))
 (let (($x40 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var1313X) (bvult input.ind-%var1313X input.dst.llvm-%n))))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1313X)))
 (= $x38 $x88))))
 ))
 (let (($x207 (and $x40 $x125)))
 (let (($x34 (= $x207 true)))
 (let (($x134 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var1304X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x66))))
 (let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1304X)))
 (let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (=> $x32 (= ?x131 ?x183))))))))
 ))
 (let (($x39 (forall ((input.ind-%var1303X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var1303X) (bvult input.ind-%var1303X input.dst.llvm-%n))))
 (let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1303X)))
 (= $x32 $x88))))
 ))
 (let (($x75 (and $x39 $x134)))
 (let (($x84 (= $x75 true)))
 (let (($x52 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x106 (= $x52 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x18)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x148)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (and $x160 $x57)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x202 $x212)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x82 $x65)))
 (let (($x64 (not $x211)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x199 $x108)))
 (let (($x172 (and (not $x24) $x64)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x83 $x182)))
 (let (($x114 (not $x169)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x74 $x76)))
 (let (($x89 (and (not $x164) $x114)))
 (let (($x195 (and (and (and (and (and (and $x89 $x172) $x107) $x69) $x49) $x167) $x77)))
 (let (($x16 (and $x195 $x7)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x204 (or false (or false (and (and true (or $x157 $x5)) (or $x174 $x179))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x17 (and $x143 $x16)))
 (let (($x158 (= $x17 true)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x68 true)))
 (let (($x155 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x120 (= $x155 true)))
 (let ((?x193 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x101 (= (_ bv0 2) ?x193)))
 (let (($x161 (= $x101 true)))
 (let (($x6 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x72 (= $x6 true)))
 (let (($x176 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x130 (= $x176 true)))
 (let (($x166 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x11 (= $x166 true)))
 (let (($x213 (and $x11 $x130)))
 (let (($x92 (and $x213 $x72)))
 (let (($x115 (and $x92 $x161)))
 (let (($x214 (and $x115 $x120)))
 (let (($x15 (and $x214 $x139)))
 (let (($x99 (and $x15 $x158)))
 (let (($x9 (and $x99 $x106)))
 (let (($x146 (and $x9 $x84)))
 (let (($x122 (and $x146 $x34)))
 (let (($x147 (and $x122 $x112)))
 (let (($x201 (and $x147 $x95)))
 (let (($x156 (and $x201 $x194)))
 (let (($x243 (and $x156 $x227)))
 (let (($x246 (and $x243 $x245)))
 (let (($x249 (and $x246 $x248)))
 (let (($x27 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1324X)))
 (let ((?x123 (input.spec-%var-x-1.1.1 input.ind-%var1324X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1324X)))
 (=> $x38 (= ?x123 ?x131))))))
 ))
 (let (($x29 (forall ((input.ind-%var1323X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1323X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1323X)))
 (= $x38 $x32))))
 ))
 (let (($x80 (and $x29 $x27)))
 (let (($x250 (and $x80 $x249)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x180 $x250)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x252 (and $x124 $x251)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x253 (and $x33 $x252)))
 (let (($x256 (=> $x253 $x255)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x209 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x254 (= $x209 false)))
 (let (($x255 (= $x254 true)))
 (let (($x247 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x247 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x244 true)))
 (let ((?x208 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x126 (bvadd input.dst.llvm-%x ?x208)))
 (let (($x236 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x230 (bvadd ?x126 (_ bv3 32))))
 (let (($x235 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x232 (bvugt ?x126 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x231 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x230)))
 (let (($x240 (or false (or false (and (and true (or $x231 $x232)) (or $x235 $x236))))))
 (let (($x242 (=> (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32))) $x240)))
 (let (($x153 (=> (and $x209 (bvule ?x126 (bvsub (bvadd ?x126 (_ bv4 32)) (_ bv1 32)))) $x240)))
 (let (($x227 (= $x153 true)))
 (let (($x152 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x194 (= $x152 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x95 (= $x185 true)))
 (let (($x10 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x10 true)))
 (let (($x125 (forall ((input.ind-%var1314X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var1314X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x66))))
 (let ((?x123 (input.spec-%var-x-1.1.1 input.ind-%var1314X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1314X)))
 (=> $x38 (= ?x123 ?x183))))))))
 ))
 (let (($x40 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var1313X) (bvult input.ind-%var1313X input.dst.llvm-%n))))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1313X)))
 (= $x38 $x88))))
 ))
 (let (($x207 (and $x40 $x125)))
 (let (($x34 (= $x207 true)))
 (let (($x134 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let ((?x184 (bvadd (bvmul input.ind-%var1304X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x66))))
 (let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1304X)))
 (let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1304X)))
 (=> $x32 (= ?x131 ?x183))))))))
 ))
 (let (($x39 (forall ((input.ind-%var1303X (_ BitVec 32)) )(let (($x88 (and (bvule (_ bv0 32) input.ind-%var1303X) (bvult input.ind-%var1303X input.dst.llvm-%n))))
 (let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1303X)))
 (= $x32 $x88))))
 ))
 (let (($x75 (and $x39 $x134)))
 (let (($x84 (= $x75 true)))
 (let (($x52 (= (_ bv0 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x106 (= $x52 true)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x7 (= (_ bv0 32) ?x18)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x77 (= (_ bv0 32) ?x148)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x167 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x87 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x87)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x212 (and $x160 $x57)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (and $x202 $x212)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x211 (and $x82 $x65)))
 (let (($x64 (not $x211)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x199 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (and $x199 $x108)))
 (let (($x172 (and (not $x24) $x64)))
 (let (($x182 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x83 $x182)))
 (let (($x114 (not $x169)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x74 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x74 $x76)))
 (let (($x89 (and (not $x164) $x114)))
 (let (($x195 (and (and (and (and (and (and $x89 $x172) $x107) $x69) $x49) $x167) $x77)))
 (let (($x16 (and $x195 $x7)))
 (let (($x179 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x204 (or false (or false (and (and true (or $x157 $x5)) (or $x174 $x179))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x17 (and $x143 $x16)))
 (let (($x158 (= $x17 true)))
 (let (($x68 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x68 true)))
 (let (($x155 (= (_ bv0 32) input.spec-%var-ret-0.L3%6%bbentry)))
 (let (($x120 (= $x155 true)))
 (let ((?x193 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x101 (= (_ bv0 2) ?x193)))
 (let (($x161 (= $x101 true)))
 (let (($x6 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x72 (= $x6 true)))
 (let (($x176 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x130 (= $x176 true)))
 (let (($x166 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x11 (= $x166 true)))
 (let (($x213 (and $x11 $x130)))
 (let (($x92 (and $x213 $x72)))
 (let (($x115 (and $x92 $x161)))
 (let (($x214 (and $x115 $x120)))
 (let (($x15 (and $x214 $x139)))
 (let (($x99 (and $x15 $x158)))
 (let (($x9 (and $x99 $x106)))
 (let (($x146 (and $x9 $x84)))
 (let (($x122 (and $x146 $x34)))
 (let (($x147 (and $x122 $x112)))
 (let (($x201 (and $x147 $x95)))
 (let (($x156 (and $x201 $x194)))
 (let (($x243 (and $x156 $x227)))
 (let (($x246 (and $x243 $x245)))
 (let (($x249 (and $x246 $x248)))
 (let (($x27 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let ((?x131 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1324X)))
 (let ((?x123 (input.spec-%var-x-1.1.1 input.ind-%var1324X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1324X)))
 (=> $x38 (= ?x123 ?x131))))))
 ))
 (let (($x29 (forall ((input.ind-%var1323X (_ BitVec 32)) )(let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1323X)))
 (let (($x38 (input.spec-%var-x-1.0.1 input.ind-%var1323X)))
 (= $x38 $x32))))
 ))
 (let (($x80 (and $x29 $x27)))
 (let (($x250 (and $x80 $x249)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x251 (and $x180 $x250)))
 (let (($x124 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x252 (and $x124 $x251)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x253 (and $x33 $x252)))
 (let (($x256 (=> $x253 $x255)))
 (not $x256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00001000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf2c99688)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xf16f8b0c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb47f0b88)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb47f0b8b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf2c9968b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb47f0b88)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf2c99688)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xf16f8b0f (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xf16f8b0e (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xf16f8b0d (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xf16f8b0c (bvmul #x00000004 x!0))))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00001000 x!0)
         (ite (bvule #x00001001 x!0) #x00001001 #x00001000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #xf16f8b0f (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xf16f8b0e (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xf16f8b0d (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xf16f8b0c (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa4d00150)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10b404b0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x44a884a4)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10b404b3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x44a884a7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10b404b0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x44a884a4)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #xa4d00153 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xa4d00152 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xa4d00151 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #xa4d00150 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #xa4d00153 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xa4d00152 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xa4d00151 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #xa4d00150 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x210 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (not $x124)))
 (let (($x48 (or $x200 $x175)))
 (let (($x12 (= $x48 true)))
 (let ((?x177 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x177)))
 (let (($x59 (= ?x187 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x59 true)))
 (let (($x90 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x90 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x36 (= $x151 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x110 true)))
 (let (($x41 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var1510X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x248))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1510X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1510X)))
 (=> $x139 (= ?x79 ?x254))))))))
 ))
 (let (($x119 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var1509X) (bvult input.ind-%var1509X input.dst.llvm-%n))))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1509X)))
 (= $x139 $x194))))
 ))
 (let (($x111 (and $x119 $x41)))
 (let (($x102 (= $x111 true)))
 (let (($x44 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x140 (= $x44 true)))
 (let (($x257 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var1500X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x248))))
 (let ((?x13 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1500X)))
 (let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1500X)))
 (=> $x217 (= ?x13 ?x254))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var1499X) (bvult input.ind-%var1499X input.dst.llvm-%n))))
 (let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (= $x217 $x194))))
 ))
 (let (($x56 (and $x209 $x257)))
 (let (($x85 (= $x56 true)))
 (let (($x207 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x34 (= $x207 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x23 (= $x135 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x146 (= $x84 true)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x216)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x71)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (and $x97 $x91)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x88 $x149)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x16 $x17)))
 (let (($x99 (not $x158)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x195 $x18)))
 (let (($x106 (and (not $x7) $x99)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x98 $x42)))
 (let (($x54 (not $x167)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x65 $x211)))
 (let (($x77 (and (not $x49) $x54)))
 (let (($x183 (and (and (and (and (and (and $x77 $x106) $x141) $x96) $x196) $x63) $x86)))
 (let (($x221 (and $x183 $x190)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x87 (or false (or false (and (and true (or $x58 $x107)) (or $x69 $x62))))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x162 (and $x212 $x221)))
 (let (($x134 (= $x162 true)))
 (let ((?x199 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x108 (= (_ bv0 2) ?x199)))
 (let (($x24 (= $x108 true)))
 (let ((?x224 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x224)))
 (let (($x169 (= ?x83 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x169 true)))
 (let (($x133 (and $x114 $x24)))
 (let (($x75 (and $x133 $x134)))
 (let (($x138 (and $x75 $x146)))
 (let (($x125 (and $x138 $x23)))
 (let (($x122 (and $x125 $x34)))
 (let (($x51 (and $x122 $x85)))
 (let (($x70 (and $x51 $x140)))
 (let (($x109 (and $x70 $x102)))
 (let (($x163 (and $x109 $x203)))
 (let (($x67 (and $x163 $x36)))
 (let (($x220 (and $x67 $x129)))
 (let (($x173 (and $x220 $x50)))
 (let (($x143 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let ((?x13 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1520X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1520X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1520X)))
 (=> $x139 (= ?x79 ?x13))))))
 ))
 (let (($x157 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1519X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1519X)))
 (= $x139 $x217))))
 ))
 (let (($x74 (and $x157 $x143)))
 (let (($x198 (and $x74 $x173)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x120 $x198)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x103 (and $x170 $x19)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x101 $x103)))
 (let ((?x14 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvadd input.dst.llvm-%x ?x14)))
 (let (($x213 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x28 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x80 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x22 (or false (or false (and (and true (or $x27 $x80)) (or $x130 $x213))))))
 (let (($x193 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) $x22)))
 (let (($x26 (=> (and $x124 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) $x22)))
 (let (($x154 (and $x26 $x81)))
 (let (($x258 (=> $x154 $x12)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x210 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x210 (_ bv1 32))))
 (let (($x124 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (not $x124)))
 (let (($x48 (or $x200 $x175)))
 (let (($x12 (= $x48 true)))
 (let ((?x177 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x187 (bvneg ?x177)))
 (let (($x59 (= ?x187 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x50 (= $x59 true)))
 (let (($x90 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x90 true)))
 (let (($x151 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x36 (= $x151 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x203 (= $x110 true)))
 (let (($x41 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var1510X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x248))))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1510X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1510X)))
 (=> $x139 (= ?x79 ?x254))))))))
 ))
 (let (($x119 (forall ((input.ind-%var1509X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var1509X) (bvult input.ind-%var1509X input.dst.llvm-%n))))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1509X)))
 (= $x139 $x194))))
 ))
 (let (($x111 (and $x119 $x41)))
 (let (($x102 (= $x111 true)))
 (let (($x44 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x140 (= $x44 true)))
 (let (($x257 (forall ((input.ind-%var1500X (_ BitVec 32)) )(let ((?x244 (bvadd (bvmul input.ind-%var1500X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x248))))
 (let ((?x13 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1500X)))
 (let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1500X)))
 (=> $x217 (= ?x13 ?x254))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var1499X) (bvult input.ind-%var1499X input.dst.llvm-%n))))
 (let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1499X)))
 (= $x217 $x194))))
 ))
 (let (($x56 (and $x209 $x257)))
 (let (($x85 (= $x56 true)))
 (let (($x207 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x34 (= $x207 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x23 (= $x135 true)))
 (let (($x84 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x146 (= $x84 true)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x190 (= (_ bv0 32) ?x216)))
 (let ((?x71 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x86 (= (_ bv0 32) ?x71)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let ((?x39 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (and $x97 $x91)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x196 (and $x88 $x149)))
 (let (($x96 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x141 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x16 $x17)))
 (let (($x99 (not $x158)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x195 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (and $x195 $x18)))
 (let (($x106 (and (not $x7) $x99)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x167 (and $x98 $x42)))
 (let (($x54 (not $x167)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x65 $x211)))
 (let (($x77 (and (not $x49) $x54)))
 (let (($x183 (and (and (and (and (and (and $x77 $x106) $x141) $x96) $x196) $x63) $x86)))
 (let (($x221 (and $x183 $x190)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x107 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x87 (or false (or false (and (and true (or $x58 $x107)) (or $x69 $x62))))))
 (let (($x212 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x162 (and $x212 $x221)))
 (let (($x134 (= $x162 true)))
 (let ((?x199 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x108 (= (_ bv0 2) ?x199)))
 (let (($x24 (= $x108 true)))
 (let ((?x224 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x83 (bvneg ?x224)))
 (let (($x169 (= ?x83 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x114 (= $x169 true)))
 (let (($x133 (and $x114 $x24)))
 (let (($x75 (and $x133 $x134)))
 (let (($x138 (and $x75 $x146)))
 (let (($x125 (and $x138 $x23)))
 (let (($x122 (and $x125 $x34)))
 (let (($x51 (and $x122 $x85)))
 (let (($x70 (and $x51 $x140)))
 (let (($x109 (and $x70 $x102)))
 (let (($x163 (and $x109 $x203)))
 (let (($x67 (and $x163 $x36)))
 (let (($x220 (and $x67 $x129)))
 (let (($x173 (and $x220 $x50)))
 (let (($x143 (forall ((input.ind-%var1520X (_ BitVec 32)) )(let ((?x13 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1520X)))
 (let ((?x79 (input.spec-%var-x-1.1.1 input.ind-%var1520X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1520X)))
 (=> $x139 (= ?x79 ?x13))))))
 ))
 (let (($x157 (forall ((input.ind-%var1519X (_ BitVec 32)) )(let (($x217 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1519X)))
 (let (($x139 (input.spec-%var-x-1.0.1 input.ind-%var1519X)))
 (= $x139 $x217))))
 ))
 (let (($x74 (and $x157 $x143)))
 (let (($x198 (and $x74 $x173)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x19 (and $x120 $x198)))
 (let (($x170 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x103 (and $x170 $x19)))
 (let (($x101 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x81 (and $x101 $x103)))
 (let ((?x14 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x28 (bvadd input.dst.llvm-%x ?x14)))
 (let (($x213 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd ?x28 (_ bv3 32))))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x80 (bvugt ?x28 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x22 (or false (or false (and (and true (or $x27 $x80)) (or $x130 $x213))))))
 (let (($x193 (=> (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32))) $x22)))
 (let (($x26 (=> (and $x124 (bvule ?x28 (bvsub (bvadd ?x28 (_ bv4 32)) (_ bv1 32)))) $x22)))
 (let (($x154 (and $x26 $x81)))
 (let (($x258 (=> $x154 $x12)))
 (not $x258)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 167 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x279 (bvmul (_ bv4294967295 32) ?x278)))
 (let ((?x280 (bvneg ?x279)))
 (let (($x282 (= ?x280 ?x281)))
 (let (($x283 (= $x282 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x267)))
 (let (($x269 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x270 (= $x269 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x264 true)))
 (let (($x261 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x262 (= $x261 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x105 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x205 (= $x171 true)))
 (let (($x73 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x178 (= $x73 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x30 (= $x206 true)))
 (let ((?x180 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%x ?x180)))
 (let ((?x118 (bvsub ?x124 ?x180)))
 (let (($x127 (ite (bvsge ?x180 (_ bv0 32)) (bvuge ?x124 ?x118) (bvult ?x124 ?x118))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x188 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x222 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x218 (bvmul (_ bv4 64) ?x222)))
 (let ((?x128 ((_ extract 63 32) ?x218)))
 (let (($x20 (= ?x128 ?x188)))
 (let (($x31 (and $x20 $x127)))
 (let (($x227 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x55 (and $x227 $x31)))
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (=> $x28 $x55)))
 (let (($x61 (= $x215 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x95 (= $x185 true)))
 (let (($x242 (= $x28 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x147)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x225)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x192 $x214)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x223 $x94)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (and $x48 $x12)))
 (let (($x259 (not $x258)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x116 $x210)))
 (let (($x181 (and (not $x175) $x259)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x198 $x19)))
 (let (($x81 (not $x103)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x41 $x111)))
 (let (($x200 (and (not $x173) $x81)))
 (let (($x232 (and (and (and (and (and (and $x200 $x181) $x47) $x15) $x174) $x228) $x112)))
 (let (($x233 (and $x232 $x241)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x187 (or false (or false (and (and true (or $x203 $x163)) (or $x67 $x90))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x187)))
 (let (($x231 (and $x50 $x233)))
 (let (($x234 (= $x231 true)))
 (let ((?x70 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x189 (= (_ bv0 2) ?x70)))
 (let (($x119 (= $x189 true)))
 (let (($x56 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul input.ind-%var1545X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x71))))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var1545X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1545X)))
 (=> $x79 (= ?x169 ?x162))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) input.ind-%var1544X) (bvult input.ind-%var1544X input.dst.llvm-%n))))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1544X)))
 (= $x79 $x77))))
 ))
 (let (($x85 (and $x194 $x56)))
 (let (($x51 (= $x85 true)))
 (let (($x84 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul input.ind-%var1535X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x71))))
 (let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1535X)))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (=> $x204 (= ?x199 ?x162))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) input.ind-%var1534X) (bvult input.ind-%var1534X input.dst.llvm-%n))))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1534X)))
 (= $x204 $x77))))
 ))
 (let (($x146 (and $x18 $x84)))
 (let (($x138 (= $x146 true)))
 (let ((?x202 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x202)))
 (let (($x87 (= ?x160 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x87 true)))
 (let (($x135 (and $x212 $x138)))
 (let (($x44 (and $x135 $x51)))
 (let (($x43 (and $x44 $x119)))
 (let (($x238 (and $x43 $x234)))
 (let (($x10 (and $x238 $x242)))
 (let (($x153 (and $x10 $x95)))
 (let (($x219 (and $x153 $x61)))
 (let (($x121 (and $x219 $x30)))
 (let (($x60 (and $x121 $x178)))
 (let (($x5 (and $x60 $x205)))
 (let (($x260 (and $x5 $x150)))
 (let (($x263 (and $x260 $x262)))
 (let (($x266 (and $x263 $x265)))
 (let (($x271 (and $x266 $x270)))
 (let (($x107 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x191 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x191 (_ bv1 32))))
 (let (($x272 (and $x37 $x271)))
 (let (($x57 (forall ((input.ind-%var1555X (_ BitVec 32)) )(let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1555X)))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var1555X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1555X)))
 (=> $x79 (= ?x169 ?x199))))))
 ))
 (let (($x164 (forall ((input.ind-%var1554X (_ BitVec 32)) )(let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1554X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1554X)))
 (= $x79 $x204))))
 ))
 (let (($x137 (and $x164 $x57)))
 (let (($x273 (and $x137 $x272)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x139 $x273)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x120 $x274)))
 (let (($x115 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x276 (and $x115 $x275)))
 (let (($x92 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd ?x124 (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x11 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x38 (or false (or false (and (and true (or $x166 $x11)) (or $x72 $x92))))))
 (let (($x161 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x38)))
 (let (($x35 (=> (and $x28 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x38)))
 (let (($x277 (and $x35 $x276)))
 (let (($x284 (=> $x277 $x283)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x278 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x279 (bvmul (_ bv4294967295 32) ?x278)))
 (let ((?x280 (bvneg ?x279)))
 (let (($x282 (= ?x280 ?x281)))
 (let (($x283 (= $x282 true)))
 (let ((?x267 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x267)))
 (let (($x269 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x270 (= $x269 true)))
 (let (($x264 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x265 (= $x264 true)))
 (let (($x261 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x262 (= $x261 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x150 (= $x105 true)))
 (let (($x171 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x205 (= $x171 true)))
 (let (($x73 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x178 (= $x73 true)))
 (let (($x206 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x30 (= $x206 true)))
 (let ((?x180 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x124 (bvadd input.dst.llvm-%x ?x180)))
 (let ((?x118 (bvsub ?x124 ?x180)))
 (let (($x127 (ite (bvsge ?x180 (_ bv0 32)) (bvuge ?x124 ?x118) (bvult ?x124 ?x118))))
 (let (($x21 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x188 (ite $x21 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x222 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x218 (bvmul (_ bv4 64) ?x222)))
 (let ((?x128 ((_ extract 63 32) ?x218)))
 (let (($x20 (= ?x128 ?x188)))
 (let (($x31 (and $x20 $x127)))
 (let (($x227 (= (bvand ?x124 (_ bv4294967292 32)) ?x124)))
 (let (($x55 (and $x227 $x31)))
 (let (($x28 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x215 (=> $x28 $x55)))
 (let (($x61 (= $x215 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x95 (= $x185 true)))
 (let (($x242 (= $x28 true)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x241 (= (_ bv0 32) ?x147)))
 (let ((?x225 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x112 (= (_ bv0 32) ?x225)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x228 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x214 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x94 (and $x192 $x214)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x223 $x94)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x258 (and $x48 $x12)))
 (let (($x259 (not $x258)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x116 $x210)))
 (let (($x181 (and (not $x175) $x259)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x198 $x19)))
 (let (($x81 (not $x103)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (and $x41 $x111)))
 (let (($x200 (and (not $x173) $x81)))
 (let (($x232 (and (and (and (and (and (and $x200 $x181) $x47) $x15) $x174) $x228) $x112)))
 (let (($x233 (and $x232 $x241)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x110 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x110)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x110)))
 (let (($x187 (or false (or false (and (and true (or $x203 $x163)) (or $x67 $x90))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x187)))
 (let (($x231 (and $x50 $x233)))
 (let (($x234 (= $x231 true)))
 (let ((?x70 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x189 (= (_ bv0 2) ?x70)))
 (let (($x119 (= $x189 true)))
 (let (($x56 (forall ((input.ind-%var1545X (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul input.ind-%var1545X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x71))))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var1545X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1545X)))
 (=> $x79 (= ?x169 ?x162))))))))
 ))
 (let (($x194 (forall ((input.ind-%var1544X (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) input.ind-%var1544X) (bvult input.ind-%var1544X input.dst.llvm-%n))))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1544X)))
 (= $x79 $x77))))
 ))
 (let (($x85 (and $x194 $x56)))
 (let (($x51 (= $x85 true)))
 (let (($x84 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let ((?x66 (bvadd (bvmul input.ind-%var1535X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x71))))
 (let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1535X)))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1535X)))
 (=> $x204 (= ?x199 ?x162))))))))
 ))
 (let (($x18 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x77 (and (bvule (_ bv0 32) input.ind-%var1534X) (bvult input.ind-%var1534X input.dst.llvm-%n))))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1534X)))
 (= $x204 $x77))))
 ))
 (let (($x146 (and $x18 $x84)))
 (let (($x138 (= $x146 true)))
 (let ((?x202 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x202)))
 (let (($x87 (= ?x160 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x212 (= $x87 true)))
 (let (($x135 (and $x212 $x138)))
 (let (($x44 (and $x135 $x51)))
 (let (($x43 (and $x44 $x119)))
 (let (($x238 (and $x43 $x234)))
 (let (($x10 (and $x238 $x242)))
 (let (($x153 (and $x10 $x95)))
 (let (($x219 (and $x153 $x61)))
 (let (($x121 (and $x219 $x30)))
 (let (($x60 (and $x121 $x178)))
 (let (($x5 (and $x60 $x205)))
 (let (($x260 (and $x5 $x150)))
 (let (($x263 (and $x260 $x262)))
 (let (($x266 (and $x263 $x265)))
 (let (($x271 (and $x266 $x270)))
 (let (($x107 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x191 (ite $x107 (_ bv1 32) (_ bv0 32))))
 (let (($x37 (bvuge ?x191 (_ bv1 32))))
 (let (($x272 (and $x37 $x271)))
 (let (($x57 (forall ((input.ind-%var1555X (_ BitVec 32)) )(let ((?x199 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1555X)))
 (let ((?x169 (input.spec-%var-x-1.1.1 input.ind-%var1555X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1555X)))
 (=> $x79 (= ?x169 ?x199))))))
 ))
 (let (($x164 (forall ((input.ind-%var1554X (_ BitVec 32)) )(let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1554X)))
 (let (($x79 (input.spec-%var-x-1.0.1 input.ind-%var1554X)))
 (= $x79 $x204))))
 ))
 (let (($x137 (and $x164 $x57)))
 (let (($x273 (and $x137 $x272)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x274 (and $x139 $x273)))
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x120 $x274)))
 (let (($x115 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x276 (and $x115 $x275)))
 (let (($x92 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x159 (bvadd ?x124 (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x159)))
 (let (($x11 (bvugt ?x124 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x159)))
 (let (($x38 (or false (or false (and (and true (or $x166 $x11)) (or $x72 $x92))))))
 (let (($x161 (=> (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32))) $x38)))
 (let (($x35 (=> (and $x28 (bvule ?x124 (bvsub (bvadd ?x124 (_ bv4 32)) (_ bv1 32)))) $x38)))
 (let (($x277 (and $x35 $x276)))
 (let (($x284 (=> $x277 $x283)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x40))))
 (let ((?x291 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x290)))
 (let ((?x53 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x74 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x53)))
 (let ((?x209 (bvmul (_ bv4294967295 32) ?x74)))
 (let ((?x255 (bvneg ?x209)))
 (let (($x292 (= ?x255 ?x291)))
 (let (($x293 (= $x292 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x246)))
 (let (($x235 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x235 true)))
 (let ((?x34 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x34)))
 (let (($x245 (= ?x243 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x245 true)))
 (let ((?x52 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x149 (= (_ bv0 2) ?x52)))
 (let (($x229 (= $x149 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x98 (= $x211 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x197 (= $x141 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (= $x100 true)))
 (let (($x88 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var1585X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x261))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var1585X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1585X)))
 (=> $x164 (= ?x69 ?x267))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) input.ind-%var1584X) (bvult input.ind-%var1584X input.dst.llvm-%n))))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1584X)))
 (= $x164 $x218))))
 ))
 (let (($x97 (and $x284 $x88)))
 (let (($x117 (= $x97 true)))
 (let (($x274 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x275 (= $x274 true)))
 (let (($x270 (forall ((input.ind-%var1575X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var1575X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x261))))
 (let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1575X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1575X)))
 (=> $x64 (= ?x160 ?x267))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1574X (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) input.ind-%var1574X) (bvult input.ind-%var1574X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1574X)))
 (= $x64 $x218))))
 ))
 (let (($x271 (and $x21 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x242 (= $x238 true)))
 (let (($x233 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x231 (= $x233 true)))
 (let (($x237 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 ?x132)) (bvult ?x78 (bvsub ?x78 ?x132)))))
 (let (($x192 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x192 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x15 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x240 (bvmul (_ bv4 64) ?x15)))
 (let ((?x223 ((_ extract 63 32) ?x240)))
 (let (($x94 (= ?x223 ?x214)))
 (let (($x225 (and $x94 $x237)))
 (let (($x239 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x112 (and $x239 $x225)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (=> $x14 $x112)))
 (let (($x147 (= $x232 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x181 (= $x259 true)))
 (let (($x12 (= $x14 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x154)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x111)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x90 $x220)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x67 $x177)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x119 $x43)))
 (let (($x109 (not $x102)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x140 $x70)))
 (let (($x110 (and (not $x189) $x109)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x256 $x257)))
 (let (($x85 (not $x56)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x221 $x45)))
 (let (($x44 (and (not $x194) $x85)))
 (let (($x210 (and (and (and (and (and (and $x44 $x110) $x163) $x36) $x187) $x41) $x173)))
 (let (($x175 (and $x210 $x198)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x138 (or false (or false (and (and true (or $x113 $x184)) (or $x162 $x134))))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x33 (and $x201 $x175)))
 (let (($x48 (= $x33 true)))
 (let (($x258 (and $x48 $x12)))
 (let (($x230 (and $x258 $x181)))
 (let (($x241 (and $x230 $x147)))
 (let (($x234 (and $x241 $x231)))
 (let (($x10 (and $x234 $x242)))
 (let (($x273 (and $x10 $x272)))
 (let (($x276 (and $x273 $x275)))
 (let (($x96 (and $x276 $x117)))
 (let (($x106 (and $x96 $x9)))
 (let (($x39 (and $x106 $x197)))
 (let (($x42 (and $x39 $x98)))
 (let (($x23 (and $x42 $x229)))
 (let (($x250 (and $x23 $x248)))
 (let (($x249 (and $x250 $x252)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x196 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x196 (_ bv1 32))))
 (let (($x247 (and $x66 $x249)))
 (let (($x77 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1595X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var1595X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1595X)))
 (=> $x164 (= ?x69 ?x160))))))
 ))
 (let (($x58 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1594X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1594X)))
 (= $x164 $x64))))
 ))
 (let (($x195 (and $x58 $x77)))
 (let (($x251 (and $x195 $x247)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x157 $x251)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x122 (and $x68 $x125)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x170 $x122)))
 (let (($x193 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd ?x78 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x176 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x35 (or false (or false (and (and true (or $x130 $x176)) (or $x22 $x193))))))
 (let (($x115 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x8 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x254 (and $x8 $x152)))
 (let (($x294 (=> $x254 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x40))))
 (let ((?x291 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x290)))
 (let ((?x53 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x74 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x53)))
 (let ((?x209 (bvmul (_ bv4294967295 32) ?x74)))
 (let ((?x255 (bvneg ?x209)))
 (let (($x292 (= ?x255 ?x291)))
 (let (($x293 (= $x292 true)))
 (let ((?x246 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x246)))
 (let (($x235 (= ?x253 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x252 (= $x235 true)))
 (let ((?x34 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x243 (bvneg ?x34)))
 (let (($x245 (= ?x243 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x248 (= $x245 true)))
 (let ((?x52 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x149 (= (_ bv0 2) ?x52)))
 (let (($x229 (= $x149 true)))
 (let (($x211 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x98 (= $x211 true)))
 (let (($x141 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x197 (= $x141 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x9 (= $x100 true)))
 (let (($x88 (forall ((input.ind-%var1585X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var1585X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x261))))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var1585X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1585X)))
 (=> $x164 (= ?x69 ?x267))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1584X (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) input.ind-%var1584X) (bvult input.ind-%var1584X input.dst.llvm-%n))))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1584X)))
 (= $x164 $x218))))
 ))
 (let (($x97 (and $x284 $x88)))
 (let (($x117 (= $x97 true)))
 (let (($x274 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x275 (= $x274 true)))
 (let (($x270 (forall ((input.ind-%var1575X (_ BitVec 32)) )(let ((?x5 (bvadd (bvmul input.ind-%var1575X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x261))))
 (let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1575X)))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1575X)))
 (=> $x64 (= ?x160 ?x267))))))))
 ))
 (let (($x21 (forall ((input.ind-%var1574X (_ BitVec 32)) )(let (($x218 (and (bvule (_ bv0 32) input.ind-%var1574X) (bvult input.ind-%var1574X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1574X)))
 (= $x64 $x218))))
 ))
 (let (($x271 (and $x21 $x270)))
 (let (($x272 (= $x271 true)))
 (let (($x238 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x242 (= $x238 true)))
 (let (($x233 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x231 (= $x233 true)))
 (let (($x237 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 ?x132)) (bvult ?x78 (bvsub ?x78 ?x132)))))
 (let (($x192 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x192 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x15 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x240 (bvmul (_ bv4 64) ?x15)))
 (let ((?x223 ((_ extract 63 32) ?x240)))
 (let (($x94 (= ?x223 ?x214)))
 (let (($x225 (and $x94 $x237)))
 (let (($x239 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x112 (and $x239 $x225)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x232 (=> $x14 $x112)))
 (let (($x147 (= $x232 true)))
 (let (($x259 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x181 (= $x259 true)))
 (let (($x12 (= $x14 true)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x154)))
 (let ((?x111 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x173 (= (_ bv0 32) ?x111)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x41 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x220 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x129)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x90 $x220)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x67 $x177)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x163 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x43 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x119 $x43)))
 (let (($x109 (not $x102)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (and $x140 $x70)))
 (let (($x110 (and (not $x189) $x109)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x256 $x257)))
 (let (($x85 (not $x56)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (and $x221 $x45)))
 (let (($x44 (and (not $x194) $x85)))
 (let (($x210 (and (and (and (and (and (and $x44 $x110) $x163) $x36) $x187) $x41) $x173)))
 (let (($x175 (and $x210 $x198)))
 (let (($x134 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x184 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x63)))
 (let (($x138 (or false (or false (and (and true (or $x113 $x184)) (or $x162 $x134))))))
 (let (($x201 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x138)))
 (let (($x33 (and $x201 $x175)))
 (let (($x48 (= $x33 true)))
 (let (($x258 (and $x48 $x12)))
 (let (($x230 (and $x258 $x181)))
 (let (($x241 (and $x230 $x147)))
 (let (($x234 (and $x241 $x231)))
 (let (($x10 (and $x234 $x242)))
 (let (($x273 (and $x10 $x272)))
 (let (($x276 (and $x273 $x275)))
 (let (($x96 (and $x276 $x117)))
 (let (($x106 (and $x96 $x9)))
 (let (($x39 (and $x106 $x197)))
 (let (($x42 (and $x39 $x98)))
 (let (($x23 (and $x42 $x229)))
 (let (($x250 (and $x23 $x248)))
 (let (($x249 (and $x250 $x252)))
 (let (($x17 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x196 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x196 (_ bv1 32))))
 (let (($x247 (and $x66 $x249)))
 (let (($x77 (forall ((input.ind-%var1595X (_ BitVec 32)) )(let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1595X)))
 (let ((?x69 (input.spec-%var-x-1.1.1 input.ind-%var1595X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1595X)))
 (=> $x164 (= ?x69 ?x160))))))
 ))
 (let (($x58 (forall ((input.ind-%var1594X (_ BitVec 32)) )(let (($x64 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1594X)))
 (let (($x164 (input.spec-%var-x-1.0.1 input.ind-%var1594X)))
 (= $x164 $x64))))
 ))
 (let (($x195 (and $x58 $x77)))
 (let (($x251 (and $x195 $x247)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x125 (and $x157 $x251)))
 (let (($x68 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x122 (and $x68 $x125)))
 (let (($x170 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x152 (and $x170 $x122)))
 (let (($x193 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x11 (bvadd ?x78 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x176 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x11)))
 (let (($x35 (or false (or false (and (and true (or $x130 $x176)) (or $x22 $x193))))))
 (let (($x115 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x35)))
 (let (($x8 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x35)))
 (let (($x254 (and $x8 $x152)))
 (let (($x294 (=> $x254 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 189 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x142 (bvule ?x217 (_ bv3 32))))
 (let (($x114 (= $x142 true)))
 (let ((?x285 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x285)))
 (let (($x171 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x171 true)))
 (let (($x126 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x227 (= $x126 true)))
 (let (($x30 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x178 (= $x30 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x55 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x188)))
 (let ((?x204 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x204)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (and $x169 $x107)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x168 $x37)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x288 $x290)))
 (let (($x292 (not $x291)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x133 $x24)))
 (let (($x294 (and (not $x40) $x292)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x209 $x255)))
 (let (($x286 (not $x289)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x243 $x244)))
 (let (($x83 (and (not $x74) $x286)))
 (let (($x121 (and (and (and (and (and (and $x83 $x294) $x28) $x172) $x79) $x202) $x57)))
 (let (($x73 (and $x121 $x226)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x250 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x250)))
 (let (($x152 (or false (or false (and (and true (or $x246 $x253)) (or $x249 $x247))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x219 (and $x53 $x73)))
 (let (($x206 (= $x219 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x23 (= $x229 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x91 (= (_ bv0 2) ?x42)))
 (let (($x52 (= $x91 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x197 true)))
 (let (($x100 (forall ((input.ind-%var1621X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var1621X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x241))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1621X)))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1621X)))
 (=> $x58 (= ?x183 ?x10))))))))
 ))
 (let (($x261 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var1620X) (bvult input.ind-%var1620X input.dst.llvm-%n))))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1620X)))
 (= $x58 $x33))))
 ))
 (let (($x9 (and $x261 $x100)))
 (let (($x106 (= $x9 true)))
 (let (($x205 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x5 (= $x205 true)))
 (let (($x218 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var1611X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x241))))
 (let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1611X)))
 (let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (=> $x54 (= ?x113 ?x10))))))))
 ))
 (let (($x12 (forall ((input.ind-%var1610X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var1610X) (bvult input.ind-%var1610X input.dst.llvm-%n))))
 (let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1610X)))
 (= $x54 $x33))))
 ))
 (let (($x128 (and $x12 $x218)))
 (let (($x21 (= $x128 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x36 (bvsub ?x78 ?x132)))
 (let (($x129 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x36) (bvult ?x78 ?x36))))
 (let (($x163 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x163 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvmul (_ bv4 64) ?x110)))
 (let ((?x203 ((_ extract 63 32) ?x19)))
 (let (($x151 (= ?x203 ?x103)))
 (let (($x220 (and $x151 $x129)))
 (let (($x102 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x177 (and $x102 $x220)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x187 (=> $x14 $x177)))
 (let (($x200 (= $x187 true)))
 (let ((?x85 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x85)))
 (let (($x70 (= ?x44 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x70 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x51 (= $x194 true)))
 (let (($x45 (= $x14 true)))
 (let (($x256 (and $x45 $x51)))
 (let (($x59 (and $x256 $x189)))
 (let (($x50 (and $x59 $x200)))
 (let (($x118 (and $x50 $x21)))
 (let (($x265 (and $x118 $x5)))
 (let (($x141 (and $x265 $x106)))
 (let (($x211 (and $x141 $x39)))
 (let (($x149 (and $x211 $x52)))
 (let (($x207 (and $x149 $x23)))
 (let (($x31 (and $x207 $x206)))
 (let (($x215 (and $x31 $x127)))
 (let (($x95 (and $x215 $x178)))
 (let (($x60 (and $x95 $x227)))
 (let (($x277 (and $x60 $x46)))
 (let (($x138 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x201 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x201 (_ bv1 32))))
 (let (($x279 (and $x221 $x277)))
 (let (($x75 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1631X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1631X)))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1631X)))
 (=> $x58 (= ?x183 ?x113))))))
 ))
 (let (($x17 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1630X)))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1630X)))
 (= $x58 $x54))))
 ))
 (let (($x84 (and $x17 $x75)))
 (let (($x280 (and $x84 $x279)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x76 $x280)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x108 (and $x139 $x143)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x7 (and $x155 $x108)))
 (let (($x38 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x78 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x72 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x8 (or false (or false (and (and true (or $x213 $x72)) (or $x26 $x38))))))
 (let (($x170 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x29 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x16 (and $x29 $x7)))
 (let (($x224 (=> $x16 $x114)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x217 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x142 (bvule ?x217 (_ bv3 32))))
 (let (($x114 (= $x142 true)))
 (let ((?x285 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x20 (bvneg ?x285)))
 (let (($x171 (= ?x20 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x46 (= $x171 true)))
 (let (($x126 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x227 (= $x126 true)))
 (let (($x30 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x178 (= $x30 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv3 32))))
 (let (($x127 (= $x55 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x188)))
 (let ((?x204 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x204)))
 (let ((?x199 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x202 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x199)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x62)))
 (let (($x169 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (and $x169 $x107)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x168 $x37)))
 (let (($x172 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x288 $x290)))
 (let (($x292 (not $x291)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (and $x133 $x24)))
 (let (($x294 (and (not $x40) $x292)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x209 $x255)))
 (let (($x286 (not $x289)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (and $x243 $x244)))
 (let (($x83 (and (not $x74) $x286)))
 (let (($x121 (and (and (and (and (and (and $x83 $x294) $x28) $x172) $x79) $x202) $x57)))
 (let (($x73 (and $x121 $x226)))
 (let (($x247 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x250 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x253 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x250)))
 (let (($x152 (or false (or false (and (and true (or $x246 $x253)) (or $x249 $x247))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x152)))
 (let (($x219 (and $x53 $x73)))
 (let (($x206 (= $x219 true)))
 (let (($x229 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x23 (= $x229 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x91 (= (_ bv0 2) ?x42)))
 (let (($x52 (= $x91 true)))
 (let (($x197 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x39 (= $x197 true)))
 (let (($x100 (forall ((input.ind-%var1621X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var1621X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x241))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1621X)))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1621X)))
 (=> $x58 (= ?x183 ?x10))))))))
 ))
 (let (($x261 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var1620X) (bvult input.ind-%var1620X input.dst.llvm-%n))))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1620X)))
 (= $x58 $x33))))
 ))
 (let (($x9 (and $x261 $x100)))
 (let (($x106 (= $x9 true)))
 (let (($x205 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x5 (= $x205 true)))
 (let (($x218 (forall ((input.ind-%var1611X (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul input.ind-%var1611X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x241))))
 (let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1611X)))
 (let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1611X)))
 (=> $x54 (= ?x113 ?x10))))))))
 ))
 (let (($x12 (forall ((input.ind-%var1610X (_ BitVec 32)) )(let (($x33 (and (bvule (_ bv0 32) input.ind-%var1610X) (bvult input.ind-%var1610X input.dst.llvm-%n))))
 (let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1610X)))
 (= $x54 $x33))))
 ))
 (let (($x128 (and $x12 $x218)))
 (let (($x21 (= $x128 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x36 (bvsub ?x78 ?x132)))
 (let (($x129 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x36) (bvult ?x78 ?x36))))
 (let (($x163 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x103 (ite $x163 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x110 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x19 (bvmul (_ bv4 64) ?x110)))
 (let ((?x203 ((_ extract 63 32) ?x19)))
 (let (($x151 (= ?x203 ?x103)))
 (let (($x220 (and $x151 $x129)))
 (let (($x102 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x177 (and $x102 $x220)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x187 (=> $x14 $x177)))
 (let (($x200 (= $x187 true)))
 (let ((?x85 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x44 (bvneg ?x85)))
 (let (($x70 (= ?x44 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x189 (= $x70 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x51 (= $x194 true)))
 (let (($x45 (= $x14 true)))
 (let (($x256 (and $x45 $x51)))
 (let (($x59 (and $x256 $x189)))
 (let (($x50 (and $x59 $x200)))
 (let (($x118 (and $x50 $x21)))
 (let (($x265 (and $x118 $x5)))
 (let (($x141 (and $x265 $x106)))
 (let (($x211 (and $x141 $x39)))
 (let (($x149 (and $x211 $x52)))
 (let (($x207 (and $x149 $x23)))
 (let (($x31 (and $x207 $x206)))
 (let (($x215 (and $x31 $x127)))
 (let (($x95 (and $x215 $x178)))
 (let (($x60 (and $x95 $x227)))
 (let (($x277 (and $x60 $x46)))
 (let (($x138 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x201 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x221 (bvuge ?x201 (_ bv1 32))))
 (let (($x279 (and $x221 $x277)))
 (let (($x75 (forall ((input.ind-%var1631X (_ BitVec 32)) )(let ((?x113 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1631X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var1631X)))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1631X)))
 (=> $x58 (= ?x183 ?x113))))))
 ))
 (let (($x17 (forall ((input.ind-%var1630X (_ BitVec 32)) )(let (($x54 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1630X)))
 (let (($x58 (input.spec-%var-x-1.0.1 input.ind-%var1630X)))
 (= $x58 $x54))))
 ))
 (let (($x84 (and $x17 $x75)))
 (let (($x280 (and $x84 $x279)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x143 (and $x76 $x280)))
 (let (($x139 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x108 (and $x139 $x143)))
 (let (($x155 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x7 (and $x155 $x108)))
 (let (($x38 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd ?x78 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x72 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x8 (or false (or false (and (and true (or $x213 $x72)) (or $x26 $x38))))))
 (let (($x170 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x8)))
 (let (($x29 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x8)))
 (let (($x16 (and $x29 $x7)))
 (let (($x224 (=> $x16 $x114)))
 (not $x224))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00800002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00800002 x!0)
         (ite (bvule #x00800003 x!0) #x00800003 #x00800002)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5676a604)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x1ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3762e848)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3762e84b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5676a607)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3762e848)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5676a604)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x1ffffffb (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1ffffffa (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1ffffff9 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x1ffffff8 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x1ffffffb (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1ffffffa (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1ffffff9 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x1ffffff8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x71 (bvule ?x97 (_ bv4 32))))
 (let (($x66 (= $x71 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x272)))
 (let (($x271 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x271 true)))
 (let (($x158 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x158 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x270 (= $x269 true)))
 (let (($x266 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x262 (= $x266 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x15)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x145)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x111 $x82)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x41 $x47)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x135 $x196)))
 (let (($x164 (not $x86)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x167 $x184)))
 (let (($x63 (and (not $x69) $x164)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x142 $x114)))
 (let (($x13 (not $x224)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x30 $x178)))
 (let (($x34 (and (not $x217) $x13)))
 (let (($x154 (and (and (and (and (and (and $x34 $x63) $x77) $x181) $x94) $x192) $x179)))
 (let (($x208 (and $x154 $x239)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x285 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x108 (or false (or false (and (and true (or $x60 $x285)) (or $x46 $x277))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x259 (and $x16 $x208)))
 (let (($x228 (= $x259 true)))
 (let (($x31 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x31 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x73 (= (_ bv0 2) ?x226)))
 (let (($x219 (= $x73 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x204 true)))
 (let (($x165 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let ((?x254 (bvadd (bvmul input.ind-%var1702X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x235))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1702X)))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1702X)))
 (=> $x17 (= ?x45 ?x122))))))))
 ))
 (let (($x40 (forall ((input.ind-%var1701X (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) input.ind-%var1701X) (bvult input.ind-%var1701X input.dst.llvm-%n))))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1701X)))
 (= $x17 $x5))))
 ))
 (let (($x199 (and $x40 $x165)))
 (let (($x202 (= $x199 true)))
 (let (($x243 (forall ((input.ind-%var1692X (_ BitVec 32)) )(let ((?x254 (bvadd (bvmul input.ind-%var1692X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x235))))
 (let ((?x256 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1692X)))
 (let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1692X)))
 (=> $x162 (= ?x256 ?x122))))))))
 ))
 (let (($x105 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) input.ind-%var1691X) (bvult input.ind-%var1691X input.dst.llvm-%n))))
 (let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (= $x162 $x5))))
 ))
 (let (($x244 (and $x105 $x243)))
 (let (($x74 (= $x244 true)))
 (let (($x112 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x241 (= $x112 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x230 (bvsub ?x78 ?x132)))
 (let (($x242 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x230) (bvult ?x78 ?x230))))
 (let (($x33 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x48 (ite $x33 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x50 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvmul (_ bv4 64) ?x50)))
 (let ((?x198 ((_ extract 63 32) ?x175)))
 (let (($x12 (= ?x198 ?x48)))
 (let (($x223 (and $x12 $x242)))
 (let (($x187 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x233 (and $x187 $x223)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x14 $x233)))
 (let (($x232 (= $x231 true)))
 (let ((?x151 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x151)))
 (let (($x67 (= ?x81 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x67 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x19 (= $x110 true)))
 (let (($x109 (= $x14 true)))
 (let (($x203 (and $x109 $x19)))
 (let (($x129 (and $x203 $x90)))
 (let (($x147 (and $x129 $x232)))
 (let (($x234 (and $x147 $x241)))
 (let (($x287 (and $x234 $x74)))
 (let (($x93 (and $x287 $x202)))
 (let (($x121 (and $x93 $x57)))
 (let (($x206 (and $x121 $x219)))
 (let (($x127 (and $x206 $x55)))
 (let (($x268 (and $x127 $x228)))
 (let (($x263 (and $x268 $x262)))
 (let (($x284 (and $x263 $x270)))
 (let (($x276 (and $x284 $x275)))
 (let (($x283 (and $x276 $x274)))
 (let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x43 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x43 (_ bv1 32))))
 (let (($x99 (and $x102 $x283)))
 (let (($x70 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let ((?x256 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1712X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1712X)))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1712X)))
 (=> $x17 (= ?x45 ?x256))))))
 ))
 (let (($x146 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1711X)))
 (= $x17 $x162))))
 ))
 (let (($x189 (and $x146 $x70)))
 (let (($x61 (and $x189 $x99)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x137 $x61)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x260 (and $x157 $x150)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x120 $x260)))
 (let (($x35 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd ?x78 (_ bv3 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x22 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x29 (or false (or false (and (and true (or $x6 $x22)) (or $x161 $x35))))))
 (let (($x155 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x29)))
 (let (($x159 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x29)))
 (let (($x267 (and $x159 $x88)))
 (let (($x216 (=> $x267 $x66)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x71 (bvule ?x97 (_ bv4 32))))
 (let (($x66 (= $x71 true)))
 (let ((?x272 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x272)))
 (let (($x271 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x274 (= $x271 true)))
 (let (($x158 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x158 true)))
 (let (($x269 (bvsle input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x270 (= $x269 true)))
 (let (($x266 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4 32))))
 (let (($x262 (= $x266 true)))
 (let ((?x15 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x239 (= (_ bv0 32) ?x15)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x179 (= (_ bv0 32) ?x145)))
 (let ((?x236 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x192 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x236)))
 (let ((?x173 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x173)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x111 $x82)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x41 $x47)))
 (let (($x181 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x135 $x196)))
 (let (($x164 (not $x86)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x167 $x184)))
 (let (($x63 (and (not $x69) $x164)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x142 $x114)))
 (let (($x13 (not $x224)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x30 $x178)))
 (let (($x34 (and (not $x217) $x13)))
 (let (($x154 (and (and (and (and (and (and $x34 $x63) $x77) $x181) $x94) $x192) $x179)))
 (let (($x208 (and $x154 $x239)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x285 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x227)))
 (let (($x108 (or false (or false (and (and true (or $x60 $x285)) (or $x46 $x277))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x108)))
 (let (($x259 (and $x16 $x208)))
 (let (($x228 (= $x259 true)))
 (let (($x31 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x55 (= $x31 true)))
 (let ((?x226 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x73 (= (_ bv0 2) ?x226)))
 (let (($x219 (= $x73 true)))
 (let (($x204 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x57 (= $x204 true)))
 (let (($x165 (forall ((input.ind-%var1702X (_ BitVec 32)) )(let ((?x254 (bvadd (bvmul input.ind-%var1702X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x235))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1702X)))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1702X)))
 (=> $x17 (= ?x45 ?x122))))))))
 ))
 (let (($x40 (forall ((input.ind-%var1701X (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) input.ind-%var1701X) (bvult input.ind-%var1701X input.dst.llvm-%n))))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1701X)))
 (= $x17 $x5))))
 ))
 (let (($x199 (and $x40 $x165)))
 (let (($x202 (= $x199 true)))
 (let (($x243 (forall ((input.ind-%var1692X (_ BitVec 32)) )(let ((?x254 (bvadd (bvmul input.ind-%var1692X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x235))))
 (let ((?x256 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1692X)))
 (let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1692X)))
 (=> $x162 (= ?x256 ?x122))))))))
 ))
 (let (($x105 (forall ((input.ind-%var1691X (_ BitVec 32)) )(let (($x5 (and (bvule (_ bv0 32) input.ind-%var1691X) (bvult input.ind-%var1691X input.dst.llvm-%n))))
 (let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1691X)))
 (= $x162 $x5))))
 ))
 (let (($x244 (and $x105 $x243)))
 (let (($x74 (= $x244 true)))
 (let (($x112 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x241 (= $x112 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x230 (bvsub ?x78 ?x132)))
 (let (($x242 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x230) (bvult ?x78 ?x230))))
 (let (($x33 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x48 (ite $x33 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x50 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x175 (bvmul (_ bv4 64) ?x50)))
 (let ((?x198 ((_ extract 63 32) ?x175)))
 (let (($x12 (= ?x198 ?x48)))
 (let (($x223 (and $x12 $x242)))
 (let (($x187 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x233 (and $x187 $x223)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x231 (=> $x14 $x233)))
 (let (($x232 (= $x231 true)))
 (let ((?x151 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x81 (bvneg ?x151)))
 (let (($x67 (= ?x81 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x67 true)))
 (let (($x110 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x19 (= $x110 true)))
 (let (($x109 (= $x14 true)))
 (let (($x203 (and $x109 $x19)))
 (let (($x129 (and $x203 $x90)))
 (let (($x147 (and $x129 $x232)))
 (let (($x234 (and $x147 $x241)))
 (let (($x287 (and $x234 $x74)))
 (let (($x93 (and $x287 $x202)))
 (let (($x121 (and $x93 $x57)))
 (let (($x206 (and $x121 $x219)))
 (let (($x127 (and $x206 $x55)))
 (let (($x268 (and $x127 $x228)))
 (let (($x263 (and $x268 $x262)))
 (let (($x284 (and $x263 $x270)))
 (let (($x276 (and $x284 $x275)))
 (let (($x283 (and $x276 $x274)))
 (let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x43 (ite $x119 (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x43 (_ bv1 32))))
 (let (($x99 (and $x102 $x283)))
 (let (($x70 (forall ((input.ind-%var1712X (_ BitVec 32)) )(let ((?x256 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1712X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var1712X)))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1712X)))
 (=> $x17 (= ?x45 ?x256))))))
 ))
 (let (($x146 (forall ((input.ind-%var1711X (_ BitVec 32)) )(let (($x162 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1711X)))
 (let (($x17 (input.spec-%var-x-1.0.1 input.ind-%var1711X)))
 (= $x17 $x162))))
 ))
 (let (($x189 (and $x146 $x70)))
 (let (($x61 (and $x189 $x99)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x137 $x61)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x260 (and $x157 $x150)))
 (let (($x120 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x88 (and $x120 $x260)))
 (let (($x35 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd ?x78 (_ bv3 32))))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x22 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x29 (or false (or false (and (and true (or $x6 $x22)) (or $x161 $x35))))))
 (let (($x155 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x29)))
 (let (($x159 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x29)))
 (let (($x267 (and $x159 $x88)))
 (let (($x216 (=> $x267 $x66)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa402bbf0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x08404854)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0004250)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x08404857)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0004253)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x08404854)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0004250)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #xa402bbf3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xa402bbf2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xa402bbf1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xa402bbf0 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #xa402bbf3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xa402bbf2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xa402bbf1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xa402bbf0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x586b6e40)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf4eb7550)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf4eb7553)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x586b6e43)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf4eb7550)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x586b6e40)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff3 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff2 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff1 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff0 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!3 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (bvule ?x255 (_ bv4294967294 32))))
 (let (($x133 (= $x83 true)))
 (let ((?x292 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x292)))
 (let (($x168 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x168 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x286 (= $x289 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x245 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x91)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x229)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x96 $x104)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x261 $x218)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x257 $x183)))
 (let (($x138 (not $x194)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x180 $x215)))
 (let (($x58 (and (not $x134) $x138)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x267 $x97)))
 (let (($x66 (not $x71)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x262 $x263)))
 (let (($x18 (and (not $x88) $x66)))
 (let (($x222 (and (and (and (and (and (and $x18 $x58) $x51) $x75) $x9) $x149) $x42)))
 (let (($x128 (and $x222 $x197)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x61 (or false (or false (and (and true (or $x158 $x275)) (or $x273 $x271))))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x21 (and $x260 $x128)))
 (let (($x207 (= $x21 true)))
 (let (($x259 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x228 (= $x259 true)))
 (let ((?x154 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x15 (= (_ bv0 2) ?x154)))
 (let (($x239 (= $x15 true)))
 (let (($x192 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x192 true)))
 (let (($x47 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1777X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x60))))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var1777X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1777X)))
 (=> $x146 (= ?x109 ?x279))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1776X) (bvult input.ind-%var1776X input.dst.llvm-%n))))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1776X)))
 (= $x146 $x243))))
 ))
 (let (($x94 (and $x167 $x47)))
 (let (($x116 (= $x94 true)))
 (let (($x108 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1767X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x60))))
 (let ((?x203 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1767X)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1767X)))
 (=> $x44 (= ?x203 ?x279))))))))
 ))
 (let (($x74 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1766X) (bvult input.ind-%var1766X input.dst.llvm-%n))))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1766X)))
 (= $x44 $x243))))
 ))
 (let (($x16 (and $x74 $x108)))
 (let (($x30 (= $x16 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x98 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x234 (bvsub ?x78 ?x132)))
 (let (($x265 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x234) (bvult ?x78 ?x234))))
 (let (($x147 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x112 (ite $x147 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x233 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x233)))
 (let ((?x232 ((_ extract 63 32) ?x231)))
 (let (($x241 (= ?x232 ?x112)))
 (let (($x105 (and $x241 $x265)))
 (let (($x242 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x100 (and $x242 $x105)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x14 $x100)))
 (let (($x254 (= $x248 true)))
 (let ((?x198 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x198)))
 (let (($x12 (= ?x33 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x237 (= $x12 true)))
 (let (($x200 (= $x14 true)))
 (let (($x230 (and $x200 $x237)))
 (let (($x251 (and $x230 $x254)))
 (let (($x249 (and $x251 $x252)))
 (let (($x178 (and $x249 $x30)))
 (let (($x236 (and $x178 $x116)))
 (let (($x145 (and $x236 $x210)))
 (let (($x208 (and $x145 $x239)))
 (let (($x268 (and $x208 $x228)))
 (let (($x117 (and $x268 $x207)))
 (let (($x209 (and $x117 $x290)))
 (let (($x291 (and $x209 $x286)))
 (let (($x190 (and $x291 $x153)))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x177 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x177 (_ bv1 32))))
 (let (($x185 (and $x187 $x190)))
 (let (($x67 (forall ((input.ind-%var1787X (_ BitVec 32)) )(let ((?x203 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1787X)))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var1787X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1787X)))
 (=> $x146 (= ?x109 ?x203))))))
 ))
 (let (($x59 (forall ((input.ind-%var1786X (_ BitVec 32)) )(let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1786X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1786X)))
 (= $x146 $x44))))
 ))
 (let (($x90 (and $x59 $x67)))
 (let (($x295 (and $x90 $x185)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x195 $x295)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x76 $x294)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x68 $x28)))
 (let (($x8 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd ?x78 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x26 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x159 (or false (or false (and (and true (or $x92 $x26)) (or $x115 $x8))))))
 (let (($x120 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x159)))
 (let (($x11 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x159)))
 (let (($x169 (and $x11 $x172)))
 (let (($x62 (=> $x169 $x133)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x83 (bvule ?x255 (_ bv4294967294 32))))
 (let (($x133 (= $x83 true)))
 (let ((?x292 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x186 (bvneg ?x292)))
 (let (($x168 (= ?x186 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x168 true)))
 (let (($x289 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x286 (= $x289 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x245 true)))
 (let ((?x91 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x91)))
 (let ((?x229 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x229)))
 (let ((?x106 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x149 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x10)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (and $x96 $x104)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x261 $x218)))
 (let (($x75 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x257 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x194 (and $x257 $x183)))
 (let (($x138 (not $x194)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x134 (and $x180 $x215)))
 (let (($x58 (and (not $x134) $x138)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x267 $x97)))
 (let (($x66 (not $x71)))
 (let (($x263 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x262 $x263)))
 (let (($x18 (and (not $x88) $x66)))
 (let (($x222 (and (and (and (and (and (and $x18 $x58) $x51) $x75) $x9) $x149) $x42)))
 (let (($x128 (and $x222 $x197)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x284 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x273 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x284)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x284)))
 (let (($x61 (or false (or false (and (and true (or $x158 $x275)) (or $x273 $x271))))))
 (let (($x260 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x61)))
 (let (($x21 (and $x260 $x128)))
 (let (($x207 (= $x21 true)))
 (let (($x259 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x228 (= $x259 true)))
 (let ((?x154 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x15 (= (_ bv0 2) ?x154)))
 (let (($x239 (= $x15 true)))
 (let (($x192 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x210 (= $x192 true)))
 (let (($x47 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1777X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x60))))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var1777X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1777X)))
 (=> $x146 (= ?x109 ?x279))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1776X) (bvult input.ind-%var1776X input.dst.llvm-%n))))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1776X)))
 (= $x146 $x243))))
 ))
 (let (($x94 (and $x167 $x47)))
 (let (($x116 (= $x94 true)))
 (let (($x108 (forall ((input.ind-%var1767X (_ BitVec 32)) )(let ((?x95 (bvadd (bvmul input.ind-%var1767X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x60))))
 (let ((?x203 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1767X)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1767X)))
 (=> $x44 (= ?x203 ?x279))))))))
 ))
 (let (($x74 (forall ((input.ind-%var1766X (_ BitVec 32)) )(let (($x243 (and (bvule (_ bv0 32) input.ind-%var1766X) (bvult input.ind-%var1766X input.dst.llvm-%n))))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1766X)))
 (= $x44 $x243))))
 ))
 (let (($x16 (and $x74 $x108)))
 (let (($x30 (= $x16 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x98 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x234 (bvsub ?x78 ?x132)))
 (let (($x265 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x234) (bvult ?x78 ?x234))))
 (let (($x147 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x112 (ite $x147 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x233 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x233)))
 (let ((?x232 ((_ extract 63 32) ?x231)))
 (let (($x241 (= ?x232 ?x112)))
 (let (($x105 (and $x241 $x265)))
 (let (($x242 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x100 (and $x242 $x105)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x14 $x100)))
 (let (($x254 (= $x248 true)))
 (let ((?x198 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x33 (bvneg ?x198)))
 (let (($x12 (= ?x33 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x237 (= $x12 true)))
 (let (($x200 (= $x14 true)))
 (let (($x230 (and $x200 $x237)))
 (let (($x251 (and $x230 $x254)))
 (let (($x249 (and $x251 $x252)))
 (let (($x178 (and $x249 $x30)))
 (let (($x236 (and $x178 $x116)))
 (let (($x145 (and $x236 $x210)))
 (let (($x208 (and $x145 $x239)))
 (let (($x268 (and $x208 $x228)))
 (let (($x117 (and $x268 $x207)))
 (let (($x209 (and $x117 $x290)))
 (let (($x291 (and $x209 $x286)))
 (let (($x190 (and $x291 $x153)))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x177 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x187 (bvuge ?x177 (_ bv1 32))))
 (let (($x185 (and $x187 $x190)))
 (let (($x67 (forall ((input.ind-%var1787X (_ BitVec 32)) )(let ((?x203 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1787X)))
 (let ((?x109 (input.spec-%var-x-1.1.1 input.ind-%var1787X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1787X)))
 (=> $x146 (= ?x109 ?x203))))))
 ))
 (let (($x59 (forall ((input.ind-%var1786X (_ BitVec 32)) )(let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1786X)))
 (let (($x146 (input.spec-%var-x-1.0.1 input.ind-%var1786X)))
 (= $x146 $x44))))
 ))
 (let (($x90 (and $x59 $x67)))
 (let (($x295 (and $x90 $x185)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x294 (and $x195 $x295)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x28 (and $x76 $x294)))
 (let (($x68 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x172 (and $x68 $x28)))
 (let (($x8 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd ?x78 (_ bv3 32))))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x26 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x159 (or false (or false (and (and true (or $x92 $x26)) (or $x115 $x8))))))
 (let (($x120 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x159)))
 (let (($x11 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x159)))
 (let (($x169 (and $x11 $x172)))
 (let (($x62 (=> $x169 $x133)))
 (not $x62))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x103 (bvsge ?x111 (_ bv0 32))))
 (let (($x43 (= $x103 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x164)))
 (let (($x86 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x86 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x64 (= $x181 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x196 (= $x135 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x226)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x199)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (and $x165 $x219)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x79 $x121)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x17 $x256)))
 (let (($x162 (not $x19)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x110 $x119)))
 (let (($x287 (and (not $x102) $x162)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x288 $x124)))
 (let (($x140 (not $x266)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x289 $x286)))
 (let (($x45 (and (not $x62) $x140)))
 (let (($x55 (and (and (and (and (and (and $x45 $x287) $x246) $x235) $x188) $x93) $x204)))
 (let (($x160 (and $x55 $x206)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x255 (or false (or false (and (and true (or $x168 $x153)) (or $x295 $x294))))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x255)))
 (let (($x217 (and $x133 $x160)))
 (let (($x142 (= $x217 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x117 true)))
 (let ((?x197 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x128 (= (_ bv0 2) ?x197)))
 (let (($x21 (= $x128 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x42 (= $x229 true)))
 (let (($x52 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var1812X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x276))))
 (let ((?x200 (input.spec-%var-x-1.1.1 input.ind-%var1812X)))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1812X)))
 (=> $x59 (= ?x200 ?x99))))))))
 ))
 (let (($x134 (forall ((input.ind-%var1811X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1811X) (bvult input.ind-%var1811X input.dst.llvm-%n))))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1811X)))
 (= $x59 $x30))))
 ))
 (let (($x106 (and $x134 $x52)))
 (let (($x149 (= $x106 true)))
 (let (($x262 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var1802X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x276))))
 (let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1802X)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (=> $x81 (= ?x198 ?x99))))))))
 ))
 (let (($x34 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1801X) (bvult input.ind-%var1801X input.dst.llvm-%n))))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1801X)))
 (= $x81 $x30))))
 ))
 (let (($x263 (and $x34 $x262)))
 (let (($x88 (= $x263 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x20 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x152 (bvsub ?x78 ?x132)))
 (let (($x37 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x152) (bvult ?x78 ?x152))))
 (let (($x252 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x249 (ite $x252 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x251 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x251)))
 (let ((?x98 ((_ extract 63 32) ?x125)))
 (let (($x53 (= ?x98 ?x249)))
 (let (($x127 (and $x53 $x37)))
 (let (($x248 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x95 (and $x248 $x127)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x46 (=> $x14 $x95)))
 (let (($x277 (= $x46 true)))
 (let ((?x241 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x241)))
 (let (($x118 (= ?x205 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x118 true)))
 (let (($x232 (= $x14 true)))
 (let (($x265 (and $x232 $x5)))
 (let (($x57 (and $x265 $x277)))
 (let (($x227 (and $x57 $x7)))
 (let (($x216 (and $x227 $x88)))
 (let (($x23 (and $x216 $x149)))
 (let (($x222 (and $x23 $x42)))
 (let (($x207 (and $x222 $x21)))
 (let (($x290 (and $x207 $x245)))
 (let (($x114 (and $x290 $x142)))
 (let (($x258 (and $x114 $x196)))
 (let (($x77 (and $x258 $x64)))
 (let (($x214 (and $x77 $x240)))
 (let (($x223 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x233 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x233 (_ bv1 32))))
 (let (($x174 (and $x231 $x214)))
 (let (($x225 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1822X)))
 (let ((?x200 (input.spec-%var-x-1.1.1 input.ind-%var1822X)))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1822X)))
 (=> $x59 (= ?x200 ?x198))))))
 ))
 (let (($x129 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1821X)))
 (= $x59 $x81))))
 ))
 (let (($x238 (and $x129 $x225)))
 (let (($x25 (and $x238 $x174)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x84 $x25)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x13 (and $x137 $x224)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x139 $x13)))
 (let (($x29 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x78 (_ bv3 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x161 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x11 (or false (or false (and (and true (or $x193 $x161)) (or $x170 $x29))))))
 (let (($x68 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x176 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x69 (and $x176 $x41)))
 (let (($x151 (=> $x69 $x43)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x111 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x103 (bvsge ?x111 (_ bv0 32))))
 (let (($x43 (= $x103 true)))
 (let ((?x164 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x63 (bvneg ?x164)))
 (let (($x86 (= ?x63 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x240 (= $x86 true)))
 (let (($x181 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x64 (= $x181 true)))
 (let (($x135 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x196 (= $x135 true)))
 (let ((?x226 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x226)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x204 (= (_ bv0 32) ?x199)))
 (let ((?x202 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x202)))
 (let ((?x73 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x73)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (and $x165 $x219)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (and $x79 $x121)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x17 $x256)))
 (let (($x162 (not $x19)))
 (let (($x119 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x110 $x119)))
 (let (($x287 (and (not $x102) $x162)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (and $x288 $x124)))
 (let (($x140 (not $x266)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x289 $x286)))
 (let (($x45 (and (not $x62) $x140)))
 (let (($x55 (and (and (and (and (and (and $x45 $x287) $x246) $x235) $x188) $x93) $x204)))
 (let (($x160 (and $x55 $x206)))
 (let (($x294 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x186 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x186)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x186)))
 (let (($x255 (or false (or false (and (and true (or $x168 $x153)) (or $x295 $x294))))))
 (let (($x133 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x255)))
 (let (($x217 (and $x133 $x160)))
 (let (($x142 (= $x217 true)))
 (let (($x117 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x117 true)))
 (let ((?x197 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x128 (= (_ bv0 2) ?x197)))
 (let (($x21 (= $x128 true)))
 (let (($x229 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x42 (= $x229 true)))
 (let (($x52 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var1812X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x276))))
 (let ((?x200 (input.spec-%var-x-1.1.1 input.ind-%var1812X)))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1812X)))
 (=> $x59 (= ?x200 ?x99))))))))
 ))
 (let (($x134 (forall ((input.ind-%var1811X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1811X) (bvult input.ind-%var1811X input.dst.llvm-%n))))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1811X)))
 (= $x59 $x30))))
 ))
 (let (($x106 (and $x134 $x52)))
 (let (($x149 (= $x106 true)))
 (let (($x262 (forall ((input.ind-%var1802X (_ BitVec 32)) )(let ((?x150 (bvadd (bvmul input.ind-%var1802X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv1 32))) (select input.dst.llvm-mem ?x150))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x150 (_ bv2 32))) ?x276))))
 (let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1802X)))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1802X)))
 (=> $x81 (= ?x198 ?x99))))))))
 ))
 (let (($x34 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var1801X) (bvult input.ind-%var1801X input.dst.llvm-%n))))
 (let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1801X)))
 (= $x81 $x30))))
 ))
 (let (($x263 (and $x34 $x262)))
 (let (($x88 (= $x263 true)))
 (let (($x20 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x7 (= $x20 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x152 (bvsub ?x78 ?x132)))
 (let (($x37 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x152) (bvult ?x78 ?x152))))
 (let (($x252 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x249 (ite $x252 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x251 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x125 (bvmul (_ bv4 64) ?x251)))
 (let ((?x98 ((_ extract 63 32) ?x125)))
 (let (($x53 (= ?x98 ?x249)))
 (let (($x127 (and $x53 $x37)))
 (let (($x248 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x95 (and $x248 $x127)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x46 (=> $x14 $x95)))
 (let (($x277 (= $x46 true)))
 (let ((?x241 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x205 (bvneg ?x241)))
 (let (($x118 (= ?x205 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x5 (= $x118 true)))
 (let (($x232 (= $x14 true)))
 (let (($x265 (and $x232 $x5)))
 (let (($x57 (and $x265 $x277)))
 (let (($x227 (and $x57 $x7)))
 (let (($x216 (and $x227 $x88)))
 (let (($x23 (and $x216 $x149)))
 (let (($x222 (and $x23 $x42)))
 (let (($x207 (and $x222 $x21)))
 (let (($x290 (and $x207 $x245)))
 (let (($x114 (and $x290 $x142)))
 (let (($x258 (and $x114 $x196)))
 (let (($x77 (and $x258 $x64)))
 (let (($x214 (and $x77 $x240)))
 (let (($x223 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x233 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x231 (bvuge ?x233 (_ bv1 32))))
 (let (($x174 (and $x231 $x214)))
 (let (($x225 (forall ((input.ind-%var1822X (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1822X)))
 (let ((?x200 (input.spec-%var-x-1.1.1 input.ind-%var1822X)))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1822X)))
 (=> $x59 (= ?x200 ?x198))))))
 ))
 (let (($x129 (forall ((input.ind-%var1821X (_ BitVec 32)) )(let (($x81 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1821X)))
 (let (($x59 (input.spec-%var-x-1.0.1 input.ind-%var1821X)))
 (= $x59 $x81))))
 ))
 (let (($x238 (and $x129 $x225)))
 (let (($x25 (and $x238 $x174)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x224 (and $x84 $x25)))
 (let (($x137 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x13 (and $x137 $x224)))
 (let (($x139 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x139 $x13)))
 (let (($x29 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd ?x78 (_ bv3 32))))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x161 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x11 (or false (or false (and (and true (or $x193 $x161)) (or $x170 $x29))))))
 (let (($x68 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x11)))
 (let (($x176 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x11)))
 (let (($x69 (and $x176 $x41)))
 (let (($x151 (=> $x69 $x43)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (bvule ?x104 (_ bv4294967294 32))))
 (let (($x177 (= $x48 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x39)))
 (let (($x58 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x58 true)))
 (let (($x261 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x261 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x194 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x267 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x145 (bvsub ?x78 ?x132)))
 (let (($x280 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x145) (bvult ?x78 ?x145))))
 (let (($x192 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x210 (ite $x192 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x154 (bvmul (_ bv4 64) ?x259)))
 (let ((?x15 ((_ extract 63 32) ?x154)))
 (let (($x236 (= ?x15 ?x210)))
 (let (($x143 (and $x236 $x280)))
 (let (($x116 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x268 (and $x116 $x143)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x14 $x268)))
 (let (($x269 (= $x173 true)))
 (let (($x126 (= $x14 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x33)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x209)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x111)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x69 $x103)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x41 $x43)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x77 $x164)))
 (let (($x86 (not $x63)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x258 $x181)))
 (let (($x214 (and (not $x64) $x86)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x160 $x217)))
 (let (($x114 (not $x142)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x250 $x235)))
 (let (($x196 (and (not $x206) $x114)))
 (let (($x175 (and (and (and (and (and (and $x196 $x214) $x25) $x13) $x151) $x32) $x36)))
 (let (($x44 (and $x175 $x109)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x204 (or false (or false (and (and true (or $x73 $x219)) (or $x31 $x202))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x67 (and $x226 $x44)))
 (let (($x167 (= $x67 true)))
 (let ((?x287 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x253 (= (_ bv0 2) ?x287)))
 (let (($x40 (= $x253 true)))
 (let (($x70 (forall ((input.ind-%var1847X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var1847X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x149))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1847X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1847X)))
 (=> $x129 (= ?x232 ?x197))))))))
 ))
 (let (($x185 (forall ((input.ind-%var1846X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var1846X) (bvult input.ind-%var1846X input.dst.llvm-%n))))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1846X)))
 (= $x129 $x34))))
 ))
 (let (($x17 (and $x185 $x70)))
 (let (($x256 (= $x17 true)))
 (let (($x207 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var1837X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x149))))
 (let ((?x241 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1837X)))
 (let (($x237 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1837X)))
 (=> $x237 (= ?x241 ?x197))))))))
 ))
 (let (($x270 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var1836X) (bvult input.ind-%var1836X input.dst.llvm-%n))))
 (let (($x237 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1836X)))
 (= $x237 $x34))))
 ))
 (let (($x117 (and $x270 $x207)))
 (let (($x245 (= $x117 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x277 (= $x46 true)))
 (let ((?x152 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x152)))
 (let (($x37 (= ?x244 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x37 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x249 (= $x252 true)))
 (let (($x95 (and $x249 $x127)))
 (let (($x57 (and $x95 $x277)))
 (let (($x290 (and $x57 $x245)))
 (let (($x19 (and $x290 $x256)))
 (let (($x246 (and $x19 $x40)))
 (let (($x82 (and $x246 $x167)))
 (let (($x171 (and $x82 $x126)))
 (let (($x183 (and $x171 $x269)))
 (let (($x66 (and $x183 $x71)))
 (let (($x211 (and $x66 $x138)))
 (let (($x54 (and $x211 $x141)))
 (let (($x75 (and $x54 $x51)))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x251 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x251 (_ bv1 32))))
 (let (($x96 (and $x125 $x75)))
 (let (($x105 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let ((?x241 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1857X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1857X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1857X)))
 (=> $x129 (= ?x232 ?x241))))))
 ))
 (let (($x242 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let (($x237 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1856X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1856X)))
 (= $x129 $x237))))
 ))
 (let (($x100 (and $x242 $x105)))
 (let (($x97 (and $x100 $x96)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x189 $x97)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x180 (and $x195 $x18)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x157 $x180)))
 (let (($x159 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd ?x78 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x115 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x176 (or false (or false (and (and true (or $x38 $x115)) (or $x155 $x159))))))
 (let (($x139 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x176)))
 (let (($x72 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x176)))
 (let (($x257 (and $x72 $x10)))
 (let (($x12 (=> $x257 $x177)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x48 (bvule ?x104 (_ bv4294967294 32))))
 (let (($x177 (= $x48 true)))
 (let ((?x39 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x39)))
 (let (($x58 (= ?x113 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x51 (= $x58 true)))
 (let (($x261 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x141 (= $x261 true)))
 (let (($x194 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x138 (= $x194 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x71 (= $x267 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x145 (bvsub ?x78 ?x132)))
 (let (($x280 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x145) (bvult ?x78 ?x145))))
 (let (($x192 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x210 (ite $x192 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x259 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x154 (bvmul (_ bv4 64) ?x259)))
 (let ((?x15 ((_ extract 63 32) ?x154)))
 (let (($x236 (= ?x15 ?x210)))
 (let (($x143 (and $x236 $x280)))
 (let (($x116 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x268 (and $x116 $x143)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x173 (=> $x14 $x268)))
 (let (($x269 (= $x173 true)))
 (let (($x126 (= $x14 true)))
 (let ((?x33 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x109 (= (_ bv0 32) ?x33)))
 (let ((?x209 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x36 (= (_ bv0 32) ?x209)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x111 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x111)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x69 $x103)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x41 $x43)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x77 $x164)))
 (let (($x86 (not $x63)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x64 (and $x258 $x181)))
 (let (($x214 (and (not $x64) $x86)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x160 $x217)))
 (let (($x114 (not $x142)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x206 (and $x250 $x235)))
 (let (($x196 (and (not $x206) $x114)))
 (let (($x175 (and (and (and (and (and (and $x196 $x214) $x25) $x13) $x151) $x32) $x36)))
 (let (($x44 (and $x175 $x109)))
 (let (($x202 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x165 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x165)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x165)))
 (let (($x204 (or false (or false (and (and true (or $x73 $x219)) (or $x31 $x202))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x204)))
 (let (($x67 (and $x226 $x44)))
 (let (($x167 (= $x67 true)))
 (let ((?x287 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x253 (= (_ bv0 2) ?x287)))
 (let (($x40 (= $x253 true)))
 (let (($x70 (forall ((input.ind-%var1847X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var1847X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x149))))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1847X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1847X)))
 (=> $x129 (= ?x232 ?x197))))))))
 ))
 (let (($x185 (forall ((input.ind-%var1846X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var1846X) (bvult input.ind-%var1846X input.dst.llvm-%n))))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1846X)))
 (= $x129 $x34))))
 ))
 (let (($x17 (and $x185 $x70)))
 (let (($x256 (= $x17 true)))
 (let (($x207 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var1837X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x149))))
 (let ((?x241 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1837X)))
 (let (($x237 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1837X)))
 (=> $x237 (= ?x241 ?x197))))))))
 ))
 (let (($x270 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var1836X) (bvult input.ind-%var1836X input.dst.llvm-%n))))
 (let (($x237 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1836X)))
 (= $x237 $x34))))
 ))
 (let (($x117 (and $x270 $x207)))
 (let (($x245 (= $x117 true)))
 (let (($x46 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x277 (= $x46 true)))
 (let ((?x152 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x244 (bvneg ?x152)))
 (let (($x37 (= ?x244 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x127 (= $x37 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x249 (= $x252 true)))
 (let (($x95 (and $x249 $x127)))
 (let (($x57 (and $x95 $x277)))
 (let (($x290 (and $x57 $x245)))
 (let (($x19 (and $x290 $x256)))
 (let (($x246 (and $x19 $x40)))
 (let (($x82 (and $x246 $x167)))
 (let (($x171 (and $x82 $x126)))
 (let (($x183 (and $x171 $x269)))
 (let (($x66 (and $x183 $x71)))
 (let (($x211 (and $x66 $x138)))
 (let (($x54 (and $x211 $x141)))
 (let (($x75 (and $x54 $x51)))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x251 (ite $x254 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x251 (_ bv1 32))))
 (let (($x96 (and $x125 $x75)))
 (let (($x105 (forall ((input.ind-%var1857X (_ BitVec 32)) )(let ((?x241 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1857X)))
 (let ((?x232 (input.spec-%var-x-1.1.1 input.ind-%var1857X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1857X)))
 (=> $x129 (= ?x232 ?x241))))))
 ))
 (let (($x242 (forall ((input.ind-%var1856X (_ BitVec 32)) )(let (($x237 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1856X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var1856X)))
 (= $x129 $x237))))
 ))
 (let (($x100 (and $x242 $x105)))
 (let (($x97 (and $x100 $x96)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x18 (and $x189 $x97)))
 (let (($x195 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x180 (and $x195 $x18)))
 (let (($x157 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x10 (and $x157 $x180)))
 (let (($x159 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x161 (bvadd ?x78 (_ bv3 32))))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x161)))
 (let (($x115 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x161)))
 (let (($x176 (or false (or false (and (and true (or $x38 $x115)) (or $x155 $x159))))))
 (let (($x139 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x176)))
 (let (($x72 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x176)))
 (let (($x257 (and $x72 $x10)))
 (let (($x12 (=> $x257 $x177)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (bvsge ?x110 (_ bv0 32))))
 (let (($x233 (= $x234 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x133)))
 (let (($x255 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x255 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x62 (= $x266 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (= $x172 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x291 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x276 (bvsub ?x78 ?x132)))
 (let (($x16 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x276) (bvult ?x78 ?x276))))
 (let (($x275 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x284 (ite $x275 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x263 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvmul (_ bv4 64) ?x263)))
 (let ((?x61 ((_ extract 63 32) ?x99)))
 (let (($x158 (= ?x61 ?x284)))
 (let (($x108 (and $x158 $x16)))
 (let (($x273 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x216 (and $x273 $x108)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (=> $x14 $x216)))
 (let (($x215 (= $x274 true)))
 (let (($x285 (= $x14 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x205)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x247)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x257 $x48)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x10 $x177)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x54 $x39)))
 (let (($x58 (not $x113)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x211 $x261)))
 (let (($x75 (and (not $x141) $x58)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x183 $x267)))
 (let (($x66 (not $x71)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x94 $x116)))
 (let (($x138 (and (not $x269) $x66)))
 (let (($x112 (and (and (and (and (and (and $x138 $x75) $x97) $x180) $x12) $x144) $x230)))
 (let (($x81 (and $x112 $x200)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x143 (or false (or false (and (and true (or $x15 $x192)) (or $x239 $x145))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x225 (and $x173 $x81)))
 (let (($x150 (= $x225 true)))
 (let ((?x167 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x82 (= (_ bv0 2) ?x167)))
 (let (($x126 (= $x82 true)))
 (let (($x175 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var1882X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x199))))
 (let ((?x98 (input.spec-%var-x-1.1.1 input.ind-%var1882X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1882X)))
 (=> $x242 (= ?x98 ?x135))))))))
 ))
 (let (($x214 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let (($x245 (and (bvule (_ bv0 32) input.ind-%var1881X) (bvult input.ind-%var1881X input.dst.llvm-%n))))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1881X)))
 (= $x242 $x245))))
 ))
 (let (($x33 (and $x214 $x175)))
 (let (($x109 (= $x33 true)))
 (let (($x142 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var1872X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x199))))
 (let ((?x53 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1872X)))
 (let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (=> $x5 (= ?x53 ?x135))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let (($x245 (and (bvule (_ bv0 32) input.ind-%var1871X) (bvult input.ind-%var1871X input.dst.llvm-%n))))
 (let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1871X)))
 (= $x5 $x245))))
 ))
 (let (($x114 (and $x190 $x142)))
 (let (($x196 (= $x114 true)))
 (let (($x229 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x52 (= $x229 true)))
 (let ((?x134 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x134)))
 (let (($x91 (= ?x218 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x91 true)))
 (let (($x34 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x34 true)))
 (let (($x23 (and $x47 $x271)))
 (let (($x106 (and $x23 $x52)))
 (let (($x258 (and $x106 $x196)))
 (let (($x44 (and $x258 $x109)))
 (let (($x171 (and $x44 $x126)))
 (let (($x283 (and $x171 $x150)))
 (let (($x7 (and $x283 $x285)))
 (let (($x28 (and $x7 $x215)))
 (let (($x186 (and $x28 $x83)))
 (let (($x124 (and $x186 $x169)))
 (let (($x163 (and $x124 $x62)))
 (let (($x288 (and $x163 $x286)))
 (let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x57 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x57 (_ bv1 32))))
 (let (($x140 (and $x178 $x288)))
 (let (($x127 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let ((?x53 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1892X)))
 (let ((?x98 (input.spec-%var-x-1.1.1 input.ind-%var1892X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1892X)))
 (=> $x242 (= ?x98 ?x53))))))
 ))
 (let (($x248 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1891X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1891X)))
 (= $x242 $x5))))
 ))
 (let (($x95 (and $x248 $x127)))
 (let (($x292 (and $x95 $x140)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x90 $x292)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x84 $x168)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x45 (and $x76 $x153)))
 (let (($x11 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x78 (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x170 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x72 (or false (or false (and (and true (or $x35 $x170)) (or $x120 $x11))))))
 (let (($x157 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x72)))
 (let (($x22 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x72)))
 (let (($x294 (and $x22 $x45)))
 (let (($x118 (=> $x294 $x233)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x110 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (bvsge ?x110 (_ bv0 32))))
 (let (($x233 (= $x234 true)))
 (let ((?x133 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x289 (bvneg ?x133)))
 (let (($x255 (= ?x289 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x286 (= $x255 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x62 (= $x266 true)))
 (let (($x172 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (= $x172 true)))
 (let (($x291 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x83 (= $x291 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x276 (bvsub ?x78 ?x132)))
 (let (($x16 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x276) (bvult ?x78 ?x276))))
 (let (($x275 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x284 (ite $x275 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x263 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvmul (_ bv4 64) ?x263)))
 (let ((?x61 ((_ extract 63 32) ?x99)))
 (let (($x158 (= ?x61 ?x284)))
 (let (($x108 (and $x158 $x16)))
 (let (($x273 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x216 (and $x273 $x108)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x274 (=> $x14 $x216)))
 (let (($x215 (= $x274 true)))
 (let (($x285 (= $x14 true)))
 (let ((?x205 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x205)))
 (let ((?x247 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x247)))
 (let ((?x184 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x184)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x48 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x104)))
 (let (($x257 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (and $x257 $x48)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x10 $x177)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x113 (and $x54 $x39)))
 (let (($x58 (not $x113)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x211 $x261)))
 (let (($x75 (and (not $x141) $x58)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x183 $x267)))
 (let (($x66 (not $x71)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (and $x94 $x116)))
 (let (($x138 (and (not $x269) $x66)))
 (let (($x112 (and (and (and (and (and (and $x138 $x75) $x97) $x180) $x12) $x144) $x230)))
 (let (($x81 (and $x112 $x200)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x154 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x154)))
 (let (($x192 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x154)))
 (let (($x143 (or false (or false (and (and true (or $x15 $x192)) (or $x239 $x145))))))
 (let (($x173 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x143)))
 (let (($x225 (and $x173 $x81)))
 (let (($x150 (= $x225 true)))
 (let ((?x167 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x82 (= (_ bv0 2) ?x167)))
 (let (($x126 (= $x82 true)))
 (let (($x175 (forall ((input.ind-%var1882X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var1882X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x199))))
 (let ((?x98 (input.spec-%var-x-1.1.1 input.ind-%var1882X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1882X)))
 (=> $x242 (= ?x98 ?x135))))))))
 ))
 (let (($x214 (forall ((input.ind-%var1881X (_ BitVec 32)) )(let (($x245 (and (bvule (_ bv0 32) input.ind-%var1881X) (bvult input.ind-%var1881X input.dst.llvm-%n))))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1881X)))
 (= $x242 $x245))))
 ))
 (let (($x33 (and $x214 $x175)))
 (let (($x109 (= $x33 true)))
 (let (($x142 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let ((?x31 (bvadd (bvmul input.ind-%var1872X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x199))))
 (let ((?x53 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1872X)))
 (let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1872X)))
 (=> $x5 (= ?x53 ?x135))))))))
 ))
 (let (($x190 (forall ((input.ind-%var1871X (_ BitVec 32)) )(let (($x245 (and (bvule (_ bv0 32) input.ind-%var1871X) (bvult input.ind-%var1871X input.dst.llvm-%n))))
 (let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1871X)))
 (= $x5 $x245))))
 ))
 (let (($x114 (and $x190 $x142)))
 (let (($x196 (= $x114 true)))
 (let (($x229 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x52 (= $x229 true)))
 (let ((?x134 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x218 (bvneg ?x134)))
 (let (($x91 (= ?x218 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x91 true)))
 (let (($x34 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x47 (= $x34 true)))
 (let (($x23 (and $x47 $x271)))
 (let (($x106 (and $x23 $x52)))
 (let (($x258 (and $x106 $x196)))
 (let (($x44 (and $x258 $x109)))
 (let (($x171 (and $x44 $x126)))
 (let (($x283 (and $x171 $x150)))
 (let (($x7 (and $x283 $x285)))
 (let (($x28 (and $x7 $x215)))
 (let (($x186 (and $x28 $x83)))
 (let (($x124 (and $x186 $x169)))
 (let (($x163 (and $x124 $x62)))
 (let (($x288 (and $x163 $x286)))
 (let (($x277 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x57 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x178 (bvuge ?x57 (_ bv1 32))))
 (let (($x140 (and $x178 $x288)))
 (let (($x127 (forall ((input.ind-%var1892X (_ BitVec 32)) )(let ((?x53 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1892X)))
 (let ((?x98 (input.spec-%var-x-1.1.1 input.ind-%var1892X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1892X)))
 (=> $x242 (= ?x98 ?x53))))))
 ))
 (let (($x248 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let (($x5 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1891X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var1891X)))
 (= $x242 $x5))))
 ))
 (let (($x95 (and $x248 $x127)))
 (let (($x292 (and $x95 $x140)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x168 (and $x90 $x292)))
 (let (($x84 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x153 (and $x84 $x168)))
 (let (($x76 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x45 (and $x76 $x153)))
 (let (($x11 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x115 (bvadd ?x78 (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x115)))
 (let (($x170 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x115)))
 (let (($x72 (or false (or false (and (and true (or $x35 $x170)) (or $x120 $x11))))))
 (let (($x157 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x72)))
 (let (($x22 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x72)))
 (let (($x294 (and $x22 $x45)))
 (let (($x118 (=> $x294 $x233)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (bvule ?x203 input.dst.llvm-%n)))
 (let (($x251 (= $x152 true)))
 (let ((?x187 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x187)))
 (let (($x13 (= ?x41 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x13 true)))
 (let (($x146 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (= $x146 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x224 (= $x220 true)))
 (let (($x25 (forall ((input.ind-%var1917X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1917X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x234))))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1917X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1917X)))
 (=> $x248 (= ?x30 ?x265))))))))
 ))
 (let (($x42 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1916X) (bvult input.ind-%var1916X input.dst.llvm-%n))))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1916X)))
 (= $x248 $x16))))
 ))
 (let (($x181 (and $x42 $x25)))
 (let (($x240 (= $x181 true)))
 (let (($x252 (forall ((input.ind-%var1907X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1907X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x234))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1907X)))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1907X)))
 (=> $x74 (= ?x270 ?x265))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1906X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1906X) (bvult input.ind-%var1906X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1906X)))
 (= $x74 $x16))))
 ))
 (let (($x254 (and $x216 $x252)))
 (let (($x125 (= $x254 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x263 (= $x262 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x200 (bvsub ?x78 ?x132)))
 (let (($x283 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x200) (bvult ?x78 ?x200))))
 (let (($x230 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x112 (ite $x230 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x144 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvmul (_ bv4 64) ?x144)))
 (let ((?x247 ((_ extract 63 32) ?x198)))
 (let (($x205 (= ?x247 ?x112)))
 (let (($x285 (and $x205 $x283)))
 (let (($x59 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x7 (and $x59 $x285)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x14 $x7)))
 (let (($x272 (= $x227 true)))
 (let (($x104 (= $x14 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x113)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x54)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x71 $x138)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x267 $x211)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x228 $x60)))
 (let (($x143 (not $x280)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x236 $x239)))
 (let (($x94 (and (not $x145) $x143)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x259 $x268)))
 (let (($x15 (not $x154)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x142 $x114)))
 (let (($x210 (and (not $x208) $x15)))
 (let (($x18 (and (and (and (and (and (and $x210 $x94) $x269) $x183) $x261) $x51) $x39)))
 (let (($x180 (and $x18 $x58)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x82 (or false (or false (and (and true (or $x214 $x209)) (or $x33 $x109))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x231 (and $x171 $x180)))
 (let (($x10 (= $x231 true)))
 (let ((?x199 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x250 (= (_ bv0 2) ?x199)))
 (let (($x135 (= $x250 true)))
 (let (($x226 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x93 (= $x226 true)))
 (let ((?x188 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x188)))
 (let (($x206 (= ?x31 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x206 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x245 true)))
 (let (($x204 (and $x290 $x40)))
 (let (($x24 (and $x204 $x93)))
 (let (($x160 (and $x24 $x135)))
 (let (($x257 (and $x160 $x10)))
 (let (($x48 (and $x257 $x104)))
 (let (($x273 (and $x48 $x272)))
 (let (($x99 (and $x273 $x263)))
 (let (($x129 (and $x99 $x125)))
 (let (($x77 (and $x129 $x240)))
 (let (($x151 (and $x77 $x224)))
 (let (($x103 (and $x151 $x111)))
 (let (($x43 (and $x103 $x69)))
 (let (($x52 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x106 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x106 (_ bv1 32))))
 (let (($x293 (and $x117 $x43)))
 (let (($x271 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1927X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1927X)))
 (=> $x248 (= ?x30 ?x270))))))
 ))
 (let (($x46 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1926X)))
 (= $x248 $x74))))
 ))
 (let (($x23 (and $x46 $x271)))
 (let (($x64 (and $x23 $x293)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x238 $x64)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x63 (and $x189 $x164)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x137 $x63)))
 (let (($x176 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x78 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x155 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x22 (or false (or false (and (and true (or $x8 $x155)) (or $x68 $x176))))))
 (let (($x76 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x22)))
 (let (($x26 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x22)))
 (let (($x174 (and $x26 $x32)))
 (let (($x244 (=> $x174 $x251)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x152 (bvule ?x203 input.dst.llvm-%n)))
 (let (($x251 (= $x152 true)))
 (let ((?x187 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x187)))
 (let (($x13 (= ?x41 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x69 (= $x13 true)))
 (let (($x146 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x111 (= $x146 true)))
 (let (($x220 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x224 (= $x220 true)))
 (let (($x25 (forall ((input.ind-%var1917X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1917X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x234))))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1917X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1917X)))
 (=> $x248 (= ?x30 ?x265))))))))
 ))
 (let (($x42 (forall ((input.ind-%var1916X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1916X) (bvult input.ind-%var1916X input.dst.llvm-%n))))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1916X)))
 (= $x248 $x16))))
 ))
 (let (($x181 (and $x42 $x25)))
 (let (($x240 (= $x181 true)))
 (let (($x252 (forall ((input.ind-%var1907X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var1907X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x234))))
 (let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1907X)))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1907X)))
 (=> $x74 (= ?x270 ?x265))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1906X (_ BitVec 32)) )(let (($x16 (and (bvule (_ bv0 32) input.ind-%var1906X) (bvult input.ind-%var1906X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1906X)))
 (= $x74 $x16))))
 ))
 (let (($x254 (and $x216 $x252)))
 (let (($x125 (= $x254 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x263 (= $x262 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x200 (bvsub ?x78 ?x132)))
 (let (($x283 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x200) (bvult ?x78 ?x200))))
 (let (($x230 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x112 (ite $x230 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x144 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x198 (bvmul (_ bv4 64) ?x144)))
 (let ((?x247 ((_ extract 63 32) ?x198)))
 (let (($x205 (= ?x247 ?x112)))
 (let (($x285 (and $x205 $x283)))
 (let (($x59 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x7 (and $x59 $x285)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (=> $x14 $x7)))
 (let (($x272 (= $x227 true)))
 (let (($x104 (= $x14 true)))
 (let ((?x113 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x113)))
 (let ((?x54 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x39 (= (_ bv0 32) ?x54)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x66 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x138 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x66)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x211 (and $x71 $x138)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x261 (and $x267 $x211)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x228 $x60)))
 (let (($x143 (not $x280)))
 (let (($x239 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x236 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x236 $x239)))
 (let (($x94 (and (not $x145) $x143)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x259 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x259 $x268)))
 (let (($x15 (not $x154)))
 (let (($x114 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x142 $x114)))
 (let (($x210 (and (not $x208) $x15)))
 (let (($x18 (and (and (and (and (and (and $x210 $x94) $x269) $x183) $x261) $x51) $x39)))
 (let (($x180 (and $x18 $x58)))
 (let (($x109 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x209 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x82 (or false (or false (and (and true (or $x214 $x209)) (or $x33 $x109))))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x82)))
 (let (($x231 (and $x171 $x180)))
 (let (($x10 (= $x231 true)))
 (let ((?x199 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x250 (= (_ bv0 2) ?x199)))
 (let (($x135 (= $x250 true)))
 (let (($x226 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x93 (= $x226 true)))
 (let ((?x188 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x188)))
 (let (($x206 (= ?x31 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x40 (= $x206 true)))
 (let (($x245 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x290 (= $x245 true)))
 (let (($x204 (and $x290 $x40)))
 (let (($x24 (and $x204 $x93)))
 (let (($x160 (and $x24 $x135)))
 (let (($x257 (and $x160 $x10)))
 (let (($x48 (and $x257 $x104)))
 (let (($x273 (and $x48 $x272)))
 (let (($x99 (and $x273 $x263)))
 (let (($x129 (and $x99 $x125)))
 (let (($x77 (and $x129 $x240)))
 (let (($x151 (and $x77 $x224)))
 (let (($x103 (and $x151 $x111)))
 (let (($x43 (and $x103 $x69)))
 (let (($x52 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x106 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x117 (bvuge ?x106 (_ bv1 32))))
 (let (($x293 (and $x117 $x43)))
 (let (($x271 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x270 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1927X)))
 (let ((?x30 (input.spec-%var-x-1.1.1 input.ind-%var1927X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1927X)))
 (=> $x248 (= ?x30 ?x270))))))
 ))
 (let (($x46 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1926X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var1926X)))
 (= $x248 $x74))))
 ))
 (let (($x23 (and $x46 $x271)))
 (let (($x64 (and $x23 $x293)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x164 (and $x238 $x64)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x63 (and $x189 $x164)))
 (let (($x137 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x32 (and $x137 $x63)))
 (let (($x176 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x170 (bvadd ?x78 (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x170)))
 (let (($x155 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x170)))
 (let (($x22 (or false (or false (and (and true (or $x8 $x155)) (or $x68 $x176))))))
 (let (($x76 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x22)))
 (let (($x26 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x22)))
 (let (($x174 (and $x26 $x32)))
 (let (($x244 (=> $x174 $x251)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x219 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x134 (bvmul (_ bv4294967295 32) ?x219)))
 (let ((?x57 (bvneg ?x134)))
 (let (($x50 (= ?x57 ?x218)))
 (let (($x107 (= $x50 true)))
 (let ((?x122 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x122)))
 (let (($x246 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x246 true)))
 (let (($x149 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x149 true)))
 (let (($x55 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x55 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x241 true)))
 (let (($x215 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x292 (= $x215 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x169 (bvsub ?x78 ?x132)))
 (let (($x289 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x169) (bvult ?x78 ?x169))))
 (let (($x286 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x286 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvmul (_ bv4 64) ?x83)))
 (let ((?x255 ((_ extract 63 32) ?x186)))
 (let (($x133 (= ?x255 ?x163)))
 (let (($x288 (and $x133 $x289)))
 (let (($x284 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x275 (and $x284 $x288)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (=> $x14 $x275)))
 (let (($x276 (= $x260 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x5 true)))
 (let (($x242 (= $x14 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x152)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x174)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x69 $x293)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x13 $x64)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x240 $x77)))
 (let (($x224 (not $x220)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x121 $x25)))
 (let (($x146 (and (not $x181) $x224)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x254 $x125)))
 (let (($x9 (not $x129)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x216 $x291)))
 (let (($x119 (and (not $x252) $x9)))
 (let (($x179 (and (and (and (and (and (and $x119 $x146) $x103) $x41) $x164) $x32) $x203)))
 (let (($x98 (and $x179 $x251)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x265 (or false (or false (and (and true (or $x279 $x62)) (or $x294 $x110))))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x265)))
 (let (($x34 (and $x232 $x98)))
 (let (($x277 (= $x34 true)))
 (let ((?x99 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x20 (= (_ bv0 2) ?x99)))
 (let (($x88 (= $x20 true)))
 (let (($x227 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var1952X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x183))))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var1952X)))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1952X)))
 (=> $x46 (= ?x207 ?x211))))))))
 ))
 (let (($x257 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let (($x67 (and (bvule (_ bv0 32) input.ind-%var1951X) (bvult input.ind-%var1951X input.dst.llvm-%n))))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1951X)))
 (= $x46 $x67))))
 ))
 (let (($x272 (and $x257 $x227)))
 (let (($x273 (= $x272 true)))
 (let (($x141 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var1942X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x183))))
 (let ((?x190 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1942X)))
 (let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (=> $x222 (= ?x190 ?x211))))))))
 ))
 (let (($x82 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x67 (and (bvule (_ bv0 32) input.ind-%var1941X) (bvult input.ind-%var1941X input.dst.llvm-%n))))
 (let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (= $x222 $x67))))
 ))
 (let (($x51 (and $x82 $x141)))
 (let (($x223 (= $x51 true)))
 (let ((?x135 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x135)))
 (let (($x258 (= ?x160 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x258 true)))
 (let (($x54 (and $x126 $x223)))
 (let (($x262 (and $x54 $x273)))
 (let (($x16 (and $x262 $x88)))
 (let (($x178 (and $x16 $x277)))
 (let (($x53 (and $x178 $x242)))
 (let (($x274 (and $x53 $x127)))
 (let (($x140 (and $x274 $x276)))
 (let (($x256 (and $x140 $x292)))
 (let (($x105 (and $x256 $x237)))
 (let (($x73 (and $x105 $x165)))
 (let (($x253 (and $x73 $x19)))
 (let (($x79 (and $x253 $x287)))
 (let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x24 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x24 (_ bv1 32))))
 (let (($x128 (and $x202 $x79)))
 (let (($x40 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let ((?x190 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1962X)))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var1962X)))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1962X)))
 (=> $x46 (= ?x207 ?x190))))))
 ))
 (let (($x229 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1961X)))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1961X)))
 (= $x46 $x222))))
 ))
 (let (($x204 (and $x229 $x40)))
 (let (($x249 (and $x204 $x128)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x185 (and $x100 $x249)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x102 (and $x90 $x185)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x195 $x102)))
 (let (($x72 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x78 (_ bv3 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x120 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x26 (or false (or false (and (and true (or $x29 $x120)) (or $x139 $x72))))))
 (let (($x137 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x161 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x17 (and $x161 $x21)))
 (let (($x56 (=> $x17 $x107)))
 (not $x56)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x218 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x219 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x134 (bvmul (_ bv4294967295 32) ?x219)))
 (let ((?x57 (bvneg ?x134)))
 (let (($x50 (= ?x57 ?x218)))
 (let (($x107 (= $x50 true)))
 (let ((?x122 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x122)))
 (let (($x246 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x246 true)))
 (let (($x149 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x19 (= $x149 true)))
 (let (($x55 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x165 (= $x55 true)))
 (let (($x241 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x241 true)))
 (let (($x215 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x292 (= $x215 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x169 (bvsub ?x78 ?x132)))
 (let (($x289 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x169) (bvult ?x78 ?x169))))
 (let (($x286 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x163 (ite $x286 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x83 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x186 (bvmul (_ bv4 64) ?x83)))
 (let ((?x255 ((_ extract 63 32) ?x186)))
 (let (($x133 (= ?x255 ?x163)))
 (let (($x288 (and $x133 $x289)))
 (let (($x284 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x275 (and $x284 $x288)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x260 (=> $x14 $x275)))
 (let (($x276 (= $x260 true)))
 (let (($x5 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x127 (= $x5 true)))
 (let (($x242 (= $x14 true)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x251 (= (_ bv0 32) ?x152)))
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x203 (= (_ bv0 32) ?x174)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (and $x69 $x293)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (and $x13 $x64)))
 (let (($x41 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x220 (and $x240 $x77)))
 (let (($x224 (not $x220)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x121 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x121 $x25)))
 (let (($x146 (and (not $x181) $x224)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x254 $x125)))
 (let (($x9 (not $x129)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x216 $x291)))
 (let (($x119 (and (not $x252) $x9)))
 (let (($x179 (and (and (and (and (and (and $x119 $x146) $x103) $x41) $x164) $x32) $x203)))
 (let (($x98 (and $x179 $x251)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x27 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x294 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x27)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x27)))
 (let (($x265 (or false (or false (and (and true (or $x279 $x62)) (or $x294 $x110))))))
 (let (($x232 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x265)))
 (let (($x34 (and $x232 $x98)))
 (let (($x277 (= $x34 true)))
 (let ((?x99 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x20 (= (_ bv0 2) ?x99)))
 (let (($x88 (= $x20 true)))
 (let (($x227 (forall ((input.ind-%var1952X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var1952X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x183))))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var1952X)))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1952X)))
 (=> $x46 (= ?x207 ?x211))))))))
 ))
 (let (($x257 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let (($x67 (and (bvule (_ bv0 32) input.ind-%var1951X) (bvult input.ind-%var1951X input.dst.llvm-%n))))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1951X)))
 (= $x46 $x67))))
 ))
 (let (($x272 (and $x257 $x227)))
 (let (($x273 (= $x272 true)))
 (let (($x141 (forall ((input.ind-%var1942X (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul input.ind-%var1942X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x183))))
 (let ((?x190 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1942X)))
 (let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1942X)))
 (=> $x222 (= ?x190 ?x211))))))))
 ))
 (let (($x82 (forall ((input.ind-%var1941X (_ BitVec 32)) )(let (($x67 (and (bvule (_ bv0 32) input.ind-%var1941X) (bvult input.ind-%var1941X input.dst.llvm-%n))))
 (let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1941X)))
 (= $x222 $x67))))
 ))
 (let (($x51 (and $x82 $x141)))
 (let (($x223 (= $x51 true)))
 (let ((?x135 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x160 (bvneg ?x135)))
 (let (($x258 (= ?x160 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x126 (= $x258 true)))
 (let (($x54 (and $x126 $x223)))
 (let (($x262 (and $x54 $x273)))
 (let (($x16 (and $x262 $x88)))
 (let (($x178 (and $x16 $x277)))
 (let (($x53 (and $x178 $x242)))
 (let (($x274 (and $x53 $x127)))
 (let (($x140 (and $x274 $x276)))
 (let (($x256 (and $x140 $x292)))
 (let (($x105 (and $x256 $x237)))
 (let (($x73 (and $x105 $x165)))
 (let (($x253 (and $x73 $x19)))
 (let (($x79 (and $x253 $x287)))
 (let (($x93 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x24 (ite $x93 (_ bv1 32) (_ bv0 32))))
 (let (($x202 (bvuge ?x24 (_ bv1 32))))
 (let (($x128 (and $x202 $x79)))
 (let (($x40 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let ((?x190 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1962X)))
 (let ((?x207 (input.spec-%var-x-1.1.1 input.ind-%var1962X)))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1962X)))
 (=> $x46 (= ?x207 ?x190))))))
 ))
 (let (($x229 (forall ((input.ind-%var1961X (_ BitVec 32)) )(let (($x222 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1961X)))
 (let (($x46 (input.spec-%var-x-1.0.1 input.ind-%var1961X)))
 (= $x46 $x222))))
 ))
 (let (($x204 (and $x229 $x40)))
 (let (($x249 (and $x204 $x128)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x185 (and $x100 $x249)))
 (let (($x90 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x102 (and $x90 $x185)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x21 (and $x195 $x102)))
 (let (($x72 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x155 (bvadd ?x78 (_ bv3 32))))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x155)))
 (let (($x120 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x155)))
 (let (($x26 (or false (or false (and (and true (or $x29 $x120)) (or $x139 $x72))))))
 (let (($x137 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x26)))
 (let (($x161 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x26)))
 (let (($x17 (and $x161 $x21)))
 (let (($x56 (=> $x17 $x107)))
 (not $x56)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x197))))
 (let ((?x278 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x65)))
 (let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x150 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x231)))
 (let ((?x48 (bvmul (_ bv4294967295 32) ?x150)))
 (let ((?x283 (bvneg ?x48)))
 (let (($x281 (= ?x283 ?x278)))
 (let (($x282 (= $x281 true)))
 (let ((?x200 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x200)))
 (let (($x112 (= ?x230 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x112 true)))
 (let ((?x39 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x39)))
 (let (($x12 (= ?x113 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x12 true)))
 (let ((?x33 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x143 (= (_ bv0 2) ?x33)))
 (let (($x142 (= $x143 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x280 (= $x173 true)))
 (let (($x15 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (= $x15 true)))
 (let (($x60 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x73 (bvadd (bvmul input.ind-%var1987X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x122))))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var1987X)))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1987X)))
 (=> $x229 (= ?x199 ?x249))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x186 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X input.dst.llvm-%n))))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1986X)))
 (= $x229 $x186))))
 ))
 (let (($x239 (and $x108 $x60)))
 (let (($x145 (= $x239 true)))
 (let (($x21 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let ((?x73 (bvadd (bvmul input.ind-%var1977X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x122))))
 (let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1977X)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x235 (= ?x160 ?x249))))))))
 ))
 (let (($x286 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x186 (and (bvule (_ bv0 32) input.ind-%var1976X) (bvult input.ind-%var1976X input.dst.llvm-%n))))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x235 $x186))))
 ))
 (let (($x17 (and $x286 $x21)))
 (let (($x219 (= $x17 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x242 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x277 (= $x34 true)))
 (let (($x174 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 ?x132)) (bvult ?x78 (bvsub ?x78 ?x132)))))
 (let (($x43 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x64 (ite $x43 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x123 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x123)))
 (let ((?x69 ((_ extract 63 32) ?x13)))
 (let (($x164 (= ?x69 ?x64)))
 (let (($x203 (and $x164 $x174)))
 (let (($x187 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x179 (and $x187 $x203)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (=> $x14 $x179)))
 (let (($x251 (= $x152 true)))
 (let (($x146 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x146 true)))
 (let (($x77 (= $x14 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x42)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x291)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x232)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (and $x110 $x234)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (and $x294 $x221)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x88 $x16)))
 (let (($x153 (not $x168)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x263 $x99)))
 (let (($x27 (and (not $x20) $x153)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x285 $x7)))
 (let (($x272 (not $x227)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x138 $x236)))
 (let (($x262 (and (not $x257) $x272)))
 (let (($x25 (and (and (and (and (and (and $x262 $x27) $x62) $x118) $x265) $x216) $x252)))
 (let (($x181 (and $x25 $x254)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x223 (or false (or false (and (and true (or $x194 $x269)) (or $x211 $x261))))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x151 (and $x10 $x181)))
 (let (($x240 (= $x151 true)))
 (let (($x220 (and $x240 $x77)))
 (let (($x111 (and $x220 $x244)))
 (let (($x98 (and $x111 $x251)))
 (let (($x178 (and $x98 $x277)))
 (let (($x47 (and $x178 $x53)))
 (let (($x134 (and $x47 $x219)))
 (let (($x154 (and $x134 $x145)))
 (let (($x210 (and $x154 $x268)))
 (let (($x214 (and $x210 $x280)))
 (let (($x94 (and $x214 $x142)))
 (let (($x81 (and $x94 $x59)))
 (let (($x198 (and $x81 $x144)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x75 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x75 (_ bv1 32))))
 (let (($x184 (and $x116 $x198)))
 (let (($x67 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1997X)))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var1997X)))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1997X)))
 (=> $x229 (= ?x199 ?x160))))))
 ))
 (let (($x226 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1996X)))
 (= $x229 $x235))))
 ))
 (let (($x167 (and $x226 $x67)))
 (let (($x247 (and $x167 $x184)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x205 (and $x95 $x247)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x225 (and $x238 $x205)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x84 $x225)))
 (let (($x22 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd ?x78 (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x68 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x161 (or false (or false (and (and true (or $x159 $x68)) (or $x157 $x22))))))
 (let (($x195 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x161)))
 (let (($x115 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x161)))
 (let (($x180 (and $x115 $x18)))
 (let (($x49 (=> $x180 $x282)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x197))))
 (let ((?x278 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x65)))
 (let ((?x231 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x150 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x231)))
 (let ((?x48 (bvmul (_ bv4294967295 32) ?x150)))
 (let ((?x283 (bvneg ?x48)))
 (let (($x281 (= ?x283 ?x278)))
 (let (($x282 (= $x281 true)))
 (let ((?x200 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x230 (bvneg ?x200)))
 (let (($x112 (= ?x230 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x144 (= $x112 true)))
 (let ((?x39 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x113 (bvneg ?x39)))
 (let (($x12 (= ?x113 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x12 true)))
 (let ((?x33 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x143 (= (_ bv0 2) ?x33)))
 (let (($x142 (= $x143 true)))
 (let (($x173 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x280 (= $x173 true)))
 (let (($x15 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x268 (= $x15 true)))
 (let (($x60 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x73 (bvadd (bvmul input.ind-%var1987X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x122))))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var1987X)))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1987X)))
 (=> $x229 (= ?x199 ?x249))))))))
 ))
 (let (($x108 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x186 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X input.dst.llvm-%n))))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1986X)))
 (= $x229 $x186))))
 ))
 (let (($x239 (and $x108 $x60)))
 (let (($x145 (= $x239 true)))
 (let (($x21 (forall ((input.ind-%var1977X (_ BitVec 32)) )(let ((?x73 (bvadd (bvmul input.ind-%var1977X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x122))))
 (let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1977X)))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1977X)))
 (=> $x235 (= ?x160 ?x249))))))))
 ))
 (let (($x286 (forall ((input.ind-%var1976X (_ BitVec 32)) )(let (($x186 (and (bvule (_ bv0 32) input.ind-%var1976X) (bvult input.ind-%var1976X input.dst.llvm-%n))))
 (let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1976X)))
 (= $x235 $x186))))
 ))
 (let (($x17 (and $x286 $x21)))
 (let (($x219 (= $x17 true)))
 (let (($x242 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x53 (= $x242 true)))
 (let (($x34 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x277 (= $x34 true)))
 (let (($x174 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 ?x132)) (bvult ?x78 (bvsub ?x78 ?x132)))))
 (let (($x43 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x64 (ite $x43 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x123 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x13 (bvmul (_ bv4 64) ?x123)))
 (let ((?x69 ((_ extract 63 32) ?x13)))
 (let (($x164 (= ?x69 ?x64)))
 (let (($x203 (and $x164 $x174)))
 (let (($x187 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x179 (and $x187 $x203)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (=> $x14 $x179)))
 (let (($x251 (= $x152 true)))
 (let (($x146 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x146 true)))
 (let (($x77 (= $x14 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x42)))
 (let ((?x291 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x291)))
 (let ((?x232 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x232)))
 (let ((?x45 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x110 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (and $x110 $x234)))
 (let (($x294 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (and $x294 $x221)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x168 (and $x88 $x16)))
 (let (($x153 (not $x168)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x20 (and $x263 $x99)))
 (let (($x27 (and (not $x20) $x153)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x285 $x7)))
 (let (($x272 (not $x227)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x138 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x257 (and $x138 $x236)))
 (let (($x262 (and (not $x257) $x272)))
 (let (($x25 (and (and (and (and (and (and $x262 $x27) $x62) $x118) $x265) $x216) $x252)))
 (let (($x181 (and $x25 $x254)))
 (let (($x261 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x147 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x147)))
 (let (($x223 (or false (or false (and (and true (or $x194 $x269)) (or $x211 $x261))))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x223)))
 (let (($x151 (and $x10 $x181)))
 (let (($x240 (= $x151 true)))
 (let (($x220 (and $x240 $x77)))
 (let (($x111 (and $x220 $x244)))
 (let (($x98 (and $x111 $x251)))
 (let (($x178 (and $x98 $x277)))
 (let (($x47 (and $x178 $x53)))
 (let (($x134 (and $x47 $x219)))
 (let (($x154 (and $x134 $x145)))
 (let (($x210 (and $x154 $x268)))
 (let (($x214 (and $x210 $x280)))
 (let (($x94 (and $x214 $x142)))
 (let (($x81 (and $x94 $x59)))
 (let (($x198 (and $x81 $x144)))
 (let (($x208 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x75 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x75 (_ bv1 32))))
 (let (($x184 (and $x116 $x198)))
 (let (($x67 (forall ((input.ind-%var1997X (_ BitVec 32)) )(let ((?x160 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var1997X)))
 (let ((?x199 (input.spec-%var-x-1.1.1 input.ind-%var1997X)))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1997X)))
 (=> $x229 (= ?x199 ?x160))))))
 ))
 (let (($x226 (forall ((input.ind-%var1996X (_ BitVec 32)) )(let (($x235 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var1996X)))
 (let (($x229 (input.spec-%var-x-1.0.1 input.ind-%var1996X)))
 (= $x229 $x235))))
 ))
 (let (($x167 (and $x226 $x67)))
 (let (($x247 (and $x167 $x184)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x205 (and $x95 $x247)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x225 (and $x238 $x205)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x18 (and $x84 $x225)))
 (let (($x22 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd ?x78 (_ bv3 32))))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x68 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x159 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x120)))
 (let (($x161 (or false (or false (and (and true (or $x159 $x68)) (or $x157 $x22))))))
 (let (($x195 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x161)))
 (let (($x115 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x161)))
 (let (($x180 (and $x115 $x18)))
 (let (($x49 (=> $x180 $x282)))
 (not $x49)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 183 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x74 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x271 (bvule ?x74 (_ bv4294967294 32))))
 (let (($x248 (= $x271 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x91)))
 (let (($x55 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x55 true)))
 (let (($x61 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x61 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x292 true)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x274)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x124)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (and $x202 $x190)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x93 $x135)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x281 $x282)))
 (let (($x136 (not $x49)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x182 $x65)))
 (let (($x66 (and (not $x278) $x136)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x85 $x264)))
 (let (($x31 (not $x106)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x59 $x81)))
 (let (($x197 (and (not $x89) $x31)))
 (let (($x215 (and (and (and (and (and (and $x197 $x66) $x196) $x250) $x222) $x163) $x5)))
 (let (($x288 (and $x215 $x28)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x150 (or false (or false (and (and true (or $x144 $x198)) (or $x205 $x225))))))
 (let (($x283 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x275 (and $x283 $x288)))
 (let (($x289 (= $x275 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (= $x39 true)))
 (let ((?x143 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x142 (= (_ bv0 2) ?x143)))
 (let (($x94 (= $x142 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (= $x280 true)))
 (let (($x15 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x203 (bvadd (bvmul input.ind-%var2023X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x98))))
 (let ((?x267 (input.spec-%var-x-1.1.1 input.ind-%var2023X)))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2023X)))
 (=> $x226 (= ?x267 ?x47))))))))
 ))
 (let (($x19 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2022X) (bvult input.ind-%var2022X input.dst.llvm-%n))))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2022X)))
 (= $x226 $x240))))
 ))
 (let (($x268 (and $x19 $x15)))
 (let (($x210 (= $x268 true)))
 (let (($x186 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let ((?x203 (bvadd (bvmul input.ind-%var2013X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x98))))
 (let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2013X)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (=> $x44 (= ?x194 ?x47))))))))
 ))
 (let (($x220 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2012X) (bvult input.ind-%var2012X input.dst.llvm-%n))))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2012X)))
 (= $x44 $x240))))
 ))
 (let (($x255 (and $x220 $x186)))
 (let (($x286 (= $x255 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x119 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x62 (bvsub ?x78 ?x132)))
 (let (($x9 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x62) (bvult ?x78 ?x62))))
 (let (($x27 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x125 (ite $x27 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x16 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvmul (_ bv4 64) ?x16)))
 (let ((?x153 ((_ extract 63 32) ?x168)))
 (let (($x279 (= ?x153 ?x125)))
 (let (($x294 (and $x279 $x9)))
 (let (($x243 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x110 (and $x243 $x294)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (=> $x14 $x110)))
 (let (($x234 (= $x45 true)))
 (let ((?x285 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x285)))
 (let (($x272 (= ?x7 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x262 (= $x272 true)))
 (let (($x236 (= $x14 true)))
 (let (($x263 (and $x236 $x262)))
 (let (($x221 (and $x263 $x234)))
 (let (($x216 (and $x221 $x232)))
 (let (($x169 (and $x216 $x286)))
 (let (($x173 (and $x169 $x210)))
 (let (($x175 (and $x173 $x214)))
 (let (($x177 (and $x175 $x94)))
 (let (($x58 (and $x177 $x113)))
 (let (($x260 (and $x58 $x289)))
 (let (($x127 (and $x260 $x237)))
 (let (($x105 (and $x127 $x284)))
 (let (($x57 (and $x105 $x30)))
 (let (($x223 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x10 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x10 (_ bv1 32))))
 (let (($x50 (and $x138 $x57)))
 (let (($x97 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2033X)))
 (let ((?x267 (input.spec-%var-x-1.1.1 input.ind-%var2033X)))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2033X)))
 (=> $x226 (= ?x267 ?x194))))))
 ))
 (let (($x208 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2032X)))
 (= $x226 $x44))))
 ))
 (let (($x141 (and $x208 $x97)))
 (let (($x107 (and $x141 $x50)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x23 $x107)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x52 (and $x100 $x245)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x189 $x52)))
 (let (($x26 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x78 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x139 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x115 (or false (or false (and (and true (or $x11 $x139)) (or $x76 $x26))))))
 (let (($x84 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x170 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x86 (and $x170 $x114)))
 (let (($x270 (=> $x86 $x248)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x74 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x271 (bvule ?x74 (_ bv4294967294 32))))
 (let (($x248 (= $x271 true)))
 (let ((?x91 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x133 (bvneg ?x91)))
 (let (($x55 (= ?x133 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x30 (= $x55 true)))
 (let (($x61 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x284 (= $x61 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x292 true)))
 (let ((?x274 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x28 (= (_ bv0 32) ?x274)))
 (let ((?x124 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x5 (= (_ bv0 32) ?x124)))
 (let ((?x40 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x46 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (and $x202 $x190)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x222 (and $x93 $x135)))
 (let (($x250 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x196 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x281 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x49 (and $x281 $x282)))
 (let (($x136 (not $x49)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x182 $x65)))
 (let (($x66 (and (not $x278) $x136)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x85 $x264)))
 (let (($x31 (not $x106)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x59 $x81)))
 (let (($x197 (and (not $x89) $x31)))
 (let (($x215 (and (and (and (and (and (and $x197 $x66) $x196) $x250) $x222) $x163) $x5)))
 (let (($x288 (and $x215 $x28)))
 (let (($x225 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x205 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x198 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x150 (or false (or false (and (and true (or $x144 $x198)) (or $x205 $x225))))))
 (let (($x283 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x275 (and $x283 $x288)))
 (let (($x289 (= $x275 true)))
 (let (($x39 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x113 (= $x39 true)))
 (let ((?x143 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x142 (= (_ bv0 2) ?x143)))
 (let (($x94 (= $x142 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x214 (= $x280 true)))
 (let (($x15 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x203 (bvadd (bvmul input.ind-%var2023X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x98))))
 (let ((?x267 (input.spec-%var-x-1.1.1 input.ind-%var2023X)))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2023X)))
 (=> $x226 (= ?x267 ?x47))))))))
 ))
 (let (($x19 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2022X) (bvult input.ind-%var2022X input.dst.llvm-%n))))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2022X)))
 (= $x226 $x240))))
 ))
 (let (($x268 (and $x19 $x15)))
 (let (($x210 (= $x268 true)))
 (let (($x186 (forall ((input.ind-%var2013X (_ BitVec 32)) )(let ((?x203 (bvadd (bvmul input.ind-%var2013X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x98))))
 (let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2013X)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2013X)))
 (=> $x44 (= ?x194 ?x47))))))))
 ))
 (let (($x220 (forall ((input.ind-%var2012X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2012X) (bvult input.ind-%var2012X input.dst.llvm-%n))))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2012X)))
 (= $x44 $x240))))
 ))
 (let (($x255 (and $x220 $x186)))
 (let (($x286 (= $x255 true)))
 (let (($x119 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x119 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x62 (bvsub ?x78 ?x132)))
 (let (($x9 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x62) (bvult ?x78 ?x62))))
 (let (($x27 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x125 (ite $x27 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x16 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x168 (bvmul (_ bv4 64) ?x16)))
 (let ((?x153 ((_ extract 63 32) ?x168)))
 (let (($x279 (= ?x153 ?x125)))
 (let (($x294 (and $x279 $x9)))
 (let (($x243 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x110 (and $x243 $x294)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x45 (=> $x14 $x110)))
 (let (($x234 (= $x45 true)))
 (let ((?x285 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x7 (bvneg ?x285)))
 (let (($x272 (= ?x7 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x262 (= $x272 true)))
 (let (($x236 (= $x14 true)))
 (let (($x263 (and $x236 $x262)))
 (let (($x221 (and $x263 $x234)))
 (let (($x216 (and $x221 $x232)))
 (let (($x169 (and $x216 $x286)))
 (let (($x173 (and $x169 $x210)))
 (let (($x175 (and $x173 $x214)))
 (let (($x177 (and $x175 $x94)))
 (let (($x58 (and $x177 $x113)))
 (let (($x260 (and $x58 $x289)))
 (let (($x127 (and $x260 $x237)))
 (let (($x105 (and $x127 $x284)))
 (let (($x57 (and $x105 $x30)))
 (let (($x223 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x10 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x10 (_ bv1 32))))
 (let (($x50 (and $x138 $x57)))
 (let (($x97 (forall ((input.ind-%var2033X (_ BitVec 32)) )(let ((?x194 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2033X)))
 (let ((?x267 (input.spec-%var-x-1.1.1 input.ind-%var2033X)))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2033X)))
 (=> $x226 (= ?x267 ?x194))))))
 ))
 (let (($x208 (forall ((input.ind-%var2032X (_ BitVec 32)) )(let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2032X)))
 (let (($x226 (input.spec-%var-x-1.0.1 input.ind-%var2032X)))
 (= $x226 $x44))))
 ))
 (let (($x141 (and $x208 $x97)))
 (let (($x107 (and $x141 $x50)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x23 $x107)))
 (let (($x100 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x52 (and $x100 $x245)))
 (let (($x189 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x114 (and $x189 $x52)))
 (let (($x26 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x78 (_ bv3 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x139 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x115 (or false (or false (and (and true (or $x11 $x139)) (or $x76 $x26))))))
 (let (($x84 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x115)))
 (let (($x170 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x115)))
 (let (($x86 (and $x170 $x114)))
 (let (($x270 (=> $x86 $x248)))
 (not $x270))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x239 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x183 (bvsge ?x239 (_ bv0 32))))
 (let (($x116 (= $x183 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x102)))
 (let (($x185 (= ?x21 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x185 true)))
 (let (($x259 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x259 true)))
 (let (($x287 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x249 (= $x287 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x64)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x187)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x295 $x63)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x103 $x43)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x229 $x160)))
 (let (($x235 (not $x147)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x54 $x75)))
 (let (($x224 (and (not $x96) $x235)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x117 $x6)))
 (let (($x109 (not $x12)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x61 $x284)))
 (let (($x199 (and (not $x270) $x109)))
 (let (($x37 (and (and (and (and (and (and $x199 $x224) $x121) $x25) $x293) $x123) $x13)))
 (let (($x122 (and $x37 $x217)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x133)))
 (let (($x74 (or false (or false (and (and true (or $x55 $x30)) (or $x107 $x245))))))
 (let (($x248 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x165 (and $x248 $x122)))
 (let (($x79 (= $x165 true)))
 (let (($x260 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x292 (= $x260 true)))
 (let ((?x28 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x288 (= (_ bv0 2) ?x28)))
 (let (($x275 (= $x288 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (= $x124 true)))
 (let (($x241 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul input.ind-%var2058X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x184))))
 (let ((?x236 (input.spec-%var-x-1.1.1 input.ind-%var2058X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2058X)))
 (=> $x208 (= ?x236 ?x231))))))))
 ))
 (let (($x278 (forall ((input.ind-%var2057X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2057X) (bvult input.ind-%var2057X input.dst.llvm-%n))))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2057X)))
 (= $x208 $x286))))
 ))
 (let (($x40 (and $x278 $x241)))
 (let (($x163 (= $x40 true)))
 (let (($x59 (forall ((input.ind-%var2048X (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul input.ind-%var2048X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x184))))
 (let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2048X)))
 (let (($x211 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2048X)))
 (=> $x211 (= ?x285 ?x231))))))))
 ))
 (let (($x246 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2047X) (bvult input.ind-%var2047X input.dst.llvm-%n))))
 (let (($x211 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2047X)))
 (= $x211 $x286))))
 ))
 (let (($x81 (and $x246 $x59)))
 (let (($x89 (= $x81 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x277 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x181 (bvsub ?x78 ?x132)))
 (let (($x111 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x181) (bvult ?x78 ?x181))))
 (let (($x232 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x216 (ite $x232 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x265 (bvmul (_ bv4 64) ?x221)))
 (let ((?x119 ((_ extract 63 32) ?x265)))
 (let (($x151 (= ?x119 ?x216)))
 (let (($x174 (and $x151 $x111)))
 (let (($x45 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x203 (and $x45 $x174)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (=> $x14 $x203)))
 (let (($x53 (= $x242 true)))
 (let ((?x279 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x279)))
 (let (($x233 (= ?x129 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x233 true)))
 (let (($x153 (= $x14 true)))
 (let (($x9 (and $x153 $x118)))
 (let (($x69 (and $x9 $x53)))
 (let (($x251 (and $x69 $x152)))
 (let (($x188 (and $x251 $x89)))
 (let (($x140 (and $x188 $x163)))
 (let (($x215 (and $x140 $x5)))
 (let (($x289 (and $x215 $x275)))
 (let (($x237 (and $x289 $x292)))
 (let (($x128 (and $x237 $x79)))
 (let (($x108 (and $x128 $x249)))
 (let (($x134 (and $x108 $x219)))
 (let (($x130 (and $x134 $x17)))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x16 (ite $x88 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x16 (_ bv1 32))))
 (let (($x228 (and $x168 $x130)))
 (let (($x99 (forall ((input.ind-%var2068X (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2068X)))
 (let ((?x236 (input.spec-%var-x-1.1.1 input.ind-%var2068X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2068X)))
 (=> $x208 (= ?x236 ?x285))))))
 ))
 (let (($x51 (forall ((input.ind-%var2067X (_ BitVec 32)) )(let (($x211 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2067X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2067X)))
 (= $x208 $x211))))
 ))
 (let (($x20 (and $x51 $x99)))
 (let (($x73 (and $x20 $x228)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x276 (and $x204 $x73)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x95 $x276)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x90 $x162)))
 (let (($x161 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd ?x78 (_ bv3 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x157 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x170 (or false (or false (and (and true (or $x176 $x157)) (or $x137 $x161))))))
 (let (($x189 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x170)))
 (let (($x155 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x170)))
 (let (($x149 (and $x155 $x60)))
 (let (($x71 (=> $x149 $x116)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x239 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x183 (bvsge ?x239 (_ bv0 32))))
 (let (($x116 (= $x183 true)))
 (let ((?x102 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x21 (bvneg ?x102)))
 (let (($x185 (= ?x21 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x17 (= $x185 true)))
 (let (($x259 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x219 (= $x259 true)))
 (let (($x287 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x249 (= $x287 true)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x217 (= (_ bv0 32) ?x64)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x187)))
 (let ((?x41 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x123 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x41)))
 (let ((?x164 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x164)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (and $x295 $x63)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x103 $x43)))
 (let (($x25 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x121 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x147 (and $x229 $x160)))
 (let (($x235 (not $x147)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x54 $x75)))
 (let (($x224 (and (not $x96) $x235)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x117 $x6)))
 (let (($x109 (not $x12)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x61 $x284)))
 (let (($x199 (and (not $x270) $x109)))
 (let (($x37 (and (and (and (and (and (and $x199 $x224) $x121) $x25) $x293) $x123) $x13)))
 (let (($x122 (and $x37 $x217)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x133 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x107 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x133)))
 (let (($x74 (or false (or false (and (and true (or $x55 $x30)) (or $x107 $x245))))))
 (let (($x248 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x74)))
 (let (($x165 (and $x248 $x122)))
 (let (($x79 (= $x165 true)))
 (let (($x260 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x292 (= $x260 true)))
 (let ((?x28 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x288 (= (_ bv0 2) ?x28)))
 (let (($x275 (= $x288 true)))
 (let (($x124 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x5 (= $x124 true)))
 (let (($x241 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul input.ind-%var2058X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x184))))
 (let ((?x236 (input.spec-%var-x-1.1.1 input.ind-%var2058X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2058X)))
 (=> $x208 (= ?x236 ?x231))))))))
 ))
 (let (($x278 (forall ((input.ind-%var2057X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2057X) (bvult input.ind-%var2057X input.dst.llvm-%n))))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2057X)))
 (= $x208 $x286))))
 ))
 (let (($x40 (and $x278 $x241)))
 (let (($x163 (= $x40 true)))
 (let (($x59 (forall ((input.ind-%var2048X (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul input.ind-%var2048X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x184))))
 (let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2048X)))
 (let (($x211 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2048X)))
 (=> $x211 (= ?x285 ?x231))))))))
 ))
 (let (($x246 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var2047X) (bvult input.ind-%var2047X input.dst.llvm-%n))))
 (let (($x211 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2047X)))
 (= $x211 $x286))))
 ))
 (let (($x81 (and $x246 $x59)))
 (let (($x89 (= $x81 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x277 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x181 (bvsub ?x78 ?x132)))
 (let (($x111 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x181) (bvult ?x78 ?x181))))
 (let (($x232 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x216 (ite $x232 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x221 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x265 (bvmul (_ bv4 64) ?x221)))
 (let ((?x119 ((_ extract 63 32) ?x265)))
 (let (($x151 (= ?x119 ?x216)))
 (let (($x174 (and $x151 $x111)))
 (let (($x45 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x203 (and $x45 $x174)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x242 (=> $x14 $x203)))
 (let (($x53 (= $x242 true)))
 (let ((?x279 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x279)))
 (let (($x233 (= ?x129 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x118 (= $x233 true)))
 (let (($x153 (= $x14 true)))
 (let (($x9 (and $x153 $x118)))
 (let (($x69 (and $x9 $x53)))
 (let (($x251 (and $x69 $x152)))
 (let (($x188 (and $x251 $x89)))
 (let (($x140 (and $x188 $x163)))
 (let (($x215 (and $x140 $x5)))
 (let (($x289 (and $x215 $x275)))
 (let (($x237 (and $x289 $x292)))
 (let (($x128 (and $x237 $x79)))
 (let (($x108 (and $x128 $x249)))
 (let (($x134 (and $x108 $x219)))
 (let (($x130 (and $x134 $x17)))
 (let (($x88 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x16 (ite $x88 (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x16 (_ bv1 32))))
 (let (($x228 (and $x168 $x130)))
 (let (($x99 (forall ((input.ind-%var2068X (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2068X)))
 (let ((?x236 (input.spec-%var-x-1.1.1 input.ind-%var2068X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2068X)))
 (=> $x208 (= ?x236 ?x285))))))
 ))
 (let (($x51 (forall ((input.ind-%var2067X (_ BitVec 32)) )(let (($x211 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2067X)))
 (let (($x208 (input.spec-%var-x-1.0.1 input.ind-%var2067X)))
 (= $x208 $x211))))
 ))
 (let (($x20 (and $x51 $x99)))
 (let (($x73 (and $x20 $x228)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x276 (and $x204 $x73)))
 (let (($x95 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x95 $x276)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x60 (and $x90 $x162)))
 (let (($x161 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x139 (bvadd ?x78 (_ bv3 32))))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x139)))
 (let (($x157 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x139)))
 (let (($x170 (or false (or false (and (and true (or $x176 $x157)) (or $x137 $x161))))))
 (let (($x189 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x170)))
 (let (($x155 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x170)))
 (let (($x149 (and $x155 $x60)))
 (let (($x71 (=> $x149 $x116)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (bvule ?x190 (_ bv4294967294 32))))
 (let (($x10 (= $x227 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x172)))
 (let (($x66 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x66 true)))
 (let (($x93 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x266 (= $x93 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x49 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x85 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x175 (bvsub ?x78 ?x132)))
 (let (($x83 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x175) (bvult ?x78 ?x175))))
 (let (($x280 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x280 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x39)))
 (let ((?x142 ((_ extract 63 32) ?x143)))
 (let (($x173 (= ?x142 ?x214)))
 (let (($x158 (and $x173 $x83)))
 (let (($x210 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x58 (and $x210 $x158)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x14 $x58)))
 (let (($x200 (= $x145 true)))
 (let (($x179 (= $x14 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x7)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x127)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (and $x149 $x183)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x60 $x116)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x134 $x102)))
 (let (($x185 (not $x21)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x108 $x259)))
 (let (($x130 (and (not $x219) $x185)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x122 $x165)))
 (let (($x128 (not $x79)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x252 $x25)))
 (let (($x249 (and (not $x217) $x128)))
 (let (($x273 (and (and (and (and (and (and $x249 $x130) $x73) $x162) $x71) $x92) $x261)))
 (let (($x44 (and $x273 $x267)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x13 (or false (or false (and (and true (or $x164 $x63)) (or $x32 $x41))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x13)))
 (let (($x97 (and $x64 $x44)))
 (let (($x19 (= $x97 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x291 (= (_ bv0 2) ?x224)))
 (let (($x244 (= $x291 true)))
 (let (($x67 (forall ((input.ind-%var2093X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2093X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x163))))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var2093X)))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2093X)))
 (=> $x51 (= ?x153 ?x28))))))))
 ))
 (let (($x50 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2092X) (bvult input.ind-%var2092X input.dst.llvm-%n))))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2092X)))
 (= $x51 $x246))))
 ))
 (let (($x229 (and $x50 $x67)))
 (let (($x160 (= $x229 true)))
 (let (($x289 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2083X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x163))))
 (let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2083X)))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2083X)))
 (=> $x262 (= ?x279 ?x28))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X input.dst.llvm-%n))))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2082X)))
 (= $x262 $x246))))
 ))
 (let (($x260 (and $x230 $x289)))
 (let (($x292 (= $x260 true)))
 (let (($x242 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x242 true)))
 (let ((?x181 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x181)))
 (let (($x111 (= ?x77 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x111 true)))
 (let (($x232 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x232 true)))
 (let (($x203 (and $x216 $x174)))
 (let (($x69 (and $x203 $x53)))
 (let (($x237 (and $x69 $x292)))
 (let (($x147 (and $x237 $x160)))
 (let (($x121 (and $x147 $x244)))
 (let (($x154 (and $x121 $x19)))
 (let (($x178 (and $x154 $x179)))
 (let (($x282 (and $x178 $x200)))
 (let (($x31 (and $x282 $x106)))
 (let (($x256 (and $x31 $x136)))
 (let (($x207 (and $x256 $x266)))
 (let (($x250 (and $x207 $x196)))
 (let (($x234 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x221 (ite $x234 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x221 (_ bv1 32))))
 (let (($x202 (and $x265 $x250)))
 (let (($x294 (forall ((input.ind-%var2103X (_ BitVec 32)) )(let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2103X)))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var2103X)))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2103X)))
 (=> $x51 (= ?x153 ?x279))))))
 ))
 (let (($x243 (forall ((input.ind-%var2102X (_ BitVec 32)) )(let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2102X)))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2102X)))
 (= $x51 $x262))))
 ))
 (let (($x110 (and $x243 $x294)))
 (let (($x264 (and $x110 $x202)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x167 $x264)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x23 $x197)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x238 $x182)))
 (let (($x115 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd ?x78 (_ bv3 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x76 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x155 (or false (or false (and (and true (or $x72 $x76)) (or $x195 $x115))))))
 (let (($x90 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x155)))
 (let (($x120 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x155)))
 (let (($x281 (and $x120 $x46)))
 (let (($x272 (=> $x281 $x10)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x190 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x227 (bvule ?x190 (_ bv4294967294 32))))
 (let (($x10 (= $x227 true)))
 (let ((?x172 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x206 (bvneg ?x172)))
 (let (($x66 (= ?x206 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x196 (= $x66 true)))
 (let (($x93 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x266 (= $x93 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x136 (= $x49 true)))
 (let (($x85 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x106 (= $x85 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x175 (bvsub ?x78 ?x132)))
 (let (($x83 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x175) (bvult ?x78 ?x175))))
 (let (($x280 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x214 (ite $x280 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x39 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x39)))
 (let ((?x142 ((_ extract 63 32) ?x143)))
 (let (($x173 (= ?x142 ?x214)))
 (let (($x158 (and $x173 $x83)))
 (let (($x210 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x58 (and $x210 $x158)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x145 (=> $x14 $x58)))
 (let (($x200 (= $x145 true)))
 (let (($x179 (= $x14 true)))
 (let ((?x7 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x267 (= (_ bv0 32) ?x7)))
 (let ((?x127 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x261 (= (_ bv0 32) ?x127)))
 (let ((?x82 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x183 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x116 (and $x149 $x183)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x60 $x116)))
 (let (($x162 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x134 $x102)))
 (let (($x185 (not $x21)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (and $x108 $x259)))
 (let (($x130 (and (not $x219) $x185)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x122 $x165)))
 (let (($x128 (not $x79)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x252 $x25)))
 (let (($x249 (and (not $x217) $x128)))
 (let (($x273 (and (and (and (and (and (and $x249 $x130) $x73) $x162) $x71) $x92) $x261)))
 (let (($x44 (and $x273 $x267)))
 (let (($x41 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x295 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x295)))
 (let (($x13 (or false (or false (and (and true (or $x164 $x63)) (or $x32 $x41))))))
 (let (($x64 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x13)))
 (let (($x97 (and $x64 $x44)))
 (let (($x19 (= $x97 true)))
 (let ((?x224 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x291 (= (_ bv0 2) ?x224)))
 (let (($x244 (= $x291 true)))
 (let (($x67 (forall ((input.ind-%var2093X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2093X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x163))))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var2093X)))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2093X)))
 (=> $x51 (= ?x153 ?x28))))))))
 ))
 (let (($x50 (forall ((input.ind-%var2092X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2092X) (bvult input.ind-%var2092X input.dst.llvm-%n))))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2092X)))
 (= $x51 $x246))))
 ))
 (let (($x229 (and $x50 $x67)))
 (let (($x160 (= $x229 true)))
 (let (($x289 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2083X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x163 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x163))))
 (let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2083X)))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2083X)))
 (=> $x262 (= ?x279 ?x28))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X input.dst.llvm-%n))))
 (let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2082X)))
 (= $x262 $x246))))
 ))
 (let (($x260 (and $x230 $x289)))
 (let (($x292 (= $x260 true)))
 (let (($x242 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x53 (= $x242 true)))
 (let ((?x181 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x181)))
 (let (($x111 (= ?x77 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x174 (= $x111 true)))
 (let (($x232 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x232 true)))
 (let (($x203 (and $x216 $x174)))
 (let (($x69 (and $x203 $x53)))
 (let (($x237 (and $x69 $x292)))
 (let (($x147 (and $x237 $x160)))
 (let (($x121 (and $x147 $x244)))
 (let (($x154 (and $x121 $x19)))
 (let (($x178 (and $x154 $x179)))
 (let (($x282 (and $x178 $x200)))
 (let (($x31 (and $x282 $x106)))
 (let (($x256 (and $x31 $x136)))
 (let (($x207 (and $x256 $x266)))
 (let (($x250 (and $x207 $x196)))
 (let (($x234 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x221 (ite $x234 (_ bv1 32) (_ bv0 32))))
 (let (($x265 (bvuge ?x221 (_ bv1 32))))
 (let (($x202 (and $x265 $x250)))
 (let (($x294 (forall ((input.ind-%var2103X (_ BitVec 32)) )(let ((?x279 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2103X)))
 (let ((?x153 (input.spec-%var-x-1.1.1 input.ind-%var2103X)))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2103X)))
 (=> $x51 (= ?x153 ?x279))))))
 ))
 (let (($x243 (forall ((input.ind-%var2102X (_ BitVec 32)) )(let (($x262 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2102X)))
 (let (($x51 (input.spec-%var-x-1.0.1 input.ind-%var2102X)))
 (= $x51 $x262))))
 ))
 (let (($x110 (and $x243 $x294)))
 (let (($x264 (and $x110 $x202)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x197 (and $x167 $x264)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x182 (and $x23 $x197)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x46 (and $x238 $x182)))
 (let (($x115 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd ?x78 (_ bv3 32))))
 (let (($x195 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x76 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x157)))
 (let (($x155 (or false (or false (and (and true (or $x72 $x76)) (or $x195 $x115))))))
 (let (($x90 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x155)))
 (let (($x120 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x155)))
 (let (($x281 (and $x120 $x46)))
 (let (($x272 (=> $x281 $x10)))
 (not $x272))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (bvsge ?x54 (_ bv0 32))))
 (let (($x16 (= $x62 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x248)))
 (let (($x74 (= ?x61 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x284 (= $x74 true)))
 (let (($x12 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x270 (= $x12 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (= $x114 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x271 (= $x105 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x184 (bvsub ?x78 ?x132)))
 (let (($x255 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x184) (bvult ?x78 ?x184))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x112 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x81 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x81)))
 (let ((?x150 ((_ extract 63 32) ?x231)))
 (let (($x144 (= ?x150 ?x112)))
 (let (($x186 (and $x144 $x255)))
 (let (($x205 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x188 (and $x205 $x186)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x14 $x188)))
 (let (($x65 (= $x18 true)))
 (let (($x34 (= $x14 true)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x129)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x42)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x190)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x281 $x227)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x46 $x10)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x207 $x172)))
 (let (($x66 (not $x206)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x256 $x93)))
 (let (($x250 (and (not $x266) $x66)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x282 $x85)))
 (let (($x31 (not $x106)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x268 $x210)))
 (let (($x136 (and (not $x200) $x31)))
 (let (($x125 (and (and (and (and (and (and $x136 $x250) $x264) $x182) $x272) $x193) $x263)))
 (let (($x211 (and $x125 $x236)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x158 (or false (or false (and (and true (or $x142 $x280)) (or $x94 $x175))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x99 (and $x145 $x211)))
 (let (($x48 (= $x99 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x154 (= (_ bv0 2) ?x19)))
 (let (($x179 (= $x154 true)))
 (let (($x273 (forall ((input.ind-%var2128X (_ BitVec 32)) )(let ((?x32 (bvadd (bvmul input.ind-%var2128X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x187))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var2128X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2128X)))
 (=> $x243 (= ?x119 ?x287))))))))
 ))
 (let (($x130 (forall ((input.ind-%var2127X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2127X) (bvult input.ind-%var2127X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2127X)))
 (= $x243 $x292))))
 ))
 (let (($x7 (and $x130 $x273)))
 (let (($x267 (= $x7 true)))
 (let (($x79 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let ((?x32 (bvadd (bvmul input.ind-%var2118X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x187))))
 (let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2118X)))
 (let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2118X)))
 (=> $x118 (= ?x151 ?x287))))))))
 ))
 (let (($x57 (forall ((input.ind-%var2117X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2117X) (bvult input.ind-%var2117X input.dst.llvm-%n))))
 (let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2117X)))
 (= $x118 $x292))))
 ))
 (let (($x128 (and $x57 $x79)))
 (let (($x249 (= $x128 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x124 true)))
 (let ((?x278 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x278)))
 (let (($x274 (= ?x135 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x274 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x246 true)))
 (let (($x140 (and $x15 $x225)))
 (let (($x40 (and $x140 $x241)))
 (let (($x108 (and $x40 $x249)))
 (let (($x44 (and $x108 $x267)))
 (let (($x178 (and $x44 $x179)))
 (let (($x180 (and $x178 $x48)))
 (let (($x152 (and $x180 $x34)))
 (let (($x52 (and $x152 $x65)))
 (let (($x133 (and $x52 $x271)))
 (let (($x6 (and $x133 $x86)))
 (let (($x269 (and $x6 $x270)))
 (let (($x117 (and $x269 $x284)))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x69 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x69 (_ bv1 32))))
 (let (($x109 (and $x169 $x117)))
 (let (($x174 (forall ((input.ind-%var2138X (_ BitVec 32)) )(let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2138X)))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var2138X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2138X)))
 (=> $x243 (= ?x119 ?x151))))))
 ))
 (let (($x45 (forall ((input.ind-%var2137X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2137X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2137X)))
 (= $x243 $x118))))
 ))
 (let (($x203 (and $x45 $x174)))
 (let (($x91 (and $x203 $x109)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x141 $x91)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x30 (and $x204 $x55)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x199 (and $x100 $x30)))
 (let (($x170 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd ?x78 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x137 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x120 (or false (or false (and (and true (or $x22 $x137)) (or $x84 $x170))))))
 (let (($x238 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x120)))
 (let (($x68 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x120)))
 (let (($x245 (and $x68 $x199)))
 (let (($x233 (=> $x245 $x16)))
 (not $x233))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x54 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x62 (bvsge ?x54 (_ bv0 32))))
 (let (($x16 (= $x62 true)))
 (let ((?x248 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x61 (bvneg ?x248)))
 (let (($x74 (= ?x61 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x284 (= $x74 true)))
 (let (($x12 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x270 (= $x12 true)))
 (let (($x114 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x86 (= $x114 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x271 (= $x105 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x184 (bvsub ?x78 ?x132)))
 (let (($x255 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x184) (bvult ?x78 ?x184))))
 (let (($x198 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x112 (ite $x198 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x81 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x231 (bvmul (_ bv4 64) ?x81)))
 (let ((?x150 ((_ extract 63 32) ?x231)))
 (let (($x144 (= ?x150 ?x112)))
 (let (($x186 (and $x144 $x255)))
 (let (($x205 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x188 (and $x205 $x186)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x18 (=> $x14 $x188)))
 (let (($x65 (= $x18 true)))
 (let (($x34 (= $x14 true)))
 (let ((?x129 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x236 (= (_ bv0 32) ?x129)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x42)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x193 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x190 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x227 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x190)))
 (let (($x281 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x10 (and $x281 $x227)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (and $x46 $x10)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x207 $x172)))
 (let (($x66 (not $x206)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x266 (and $x256 $x93)))
 (let (($x250 (and (not $x266) $x66)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x282 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x282 $x85)))
 (let (($x31 (not $x106)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (and $x268 $x210)))
 (let (($x136 (and (not $x200) $x31)))
 (let (($x125 (and (and (and (and (and (and $x136 $x250) $x264) $x182) $x272) $x193) $x263)))
 (let (($x211 (and $x125 $x236)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x143 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x94 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x280 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x143)))
 (let (($x158 (or false (or false (and (and true (or $x142 $x280)) (or $x94 $x175))))))
 (let (($x145 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x158)))
 (let (($x99 (and $x145 $x211)))
 (let (($x48 (= $x99 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x154 (= (_ bv0 2) ?x19)))
 (let (($x179 (= $x154 true)))
 (let (($x273 (forall ((input.ind-%var2128X (_ BitVec 32)) )(let ((?x32 (bvadd (bvmul input.ind-%var2128X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x187))))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var2128X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2128X)))
 (=> $x243 (= ?x119 ?x287))))))))
 ))
 (let (($x130 (forall ((input.ind-%var2127X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2127X) (bvult input.ind-%var2127X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2127X)))
 (= $x243 $x292))))
 ))
 (let (($x7 (and $x130 $x273)))
 (let (($x267 (= $x7 true)))
 (let (($x79 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let ((?x32 (bvadd (bvmul input.ind-%var2118X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x287 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x187))))
 (let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2118X)))
 (let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2118X)))
 (=> $x118 (= ?x151 ?x287))))))))
 ))
 (let (($x57 (forall ((input.ind-%var2117X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var2117X) (bvult input.ind-%var2117X input.dst.llvm-%n))))
 (let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2117X)))
 (= $x118 $x292))))
 ))
 (let (($x128 (and $x57 $x79)))
 (let (($x249 (= $x128 true)))
 (let (($x124 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x241 (= $x124 true)))
 (let ((?x278 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x135 (bvneg ?x278)))
 (let (($x274 (= ?x135 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x225 (= $x274 true)))
 (let (($x246 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x246 true)))
 (let (($x140 (and $x15 $x225)))
 (let (($x40 (and $x140 $x241)))
 (let (($x108 (and $x40 $x249)))
 (let (($x44 (and $x108 $x267)))
 (let (($x178 (and $x44 $x179)))
 (let (($x180 (and $x178 $x48)))
 (let (($x152 (and $x180 $x34)))
 (let (($x52 (and $x152 $x65)))
 (let (($x133 (and $x52 $x271)))
 (let (($x6 (and $x133 $x86)))
 (let (($x269 (and $x6 $x270)))
 (let (($x117 (and $x269 $x284)))
 (let (($x53 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x69 (ite $x53 (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x69 (_ bv1 32))))
 (let (($x109 (and $x169 $x117)))
 (let (($x174 (forall ((input.ind-%var2138X (_ BitVec 32)) )(let ((?x151 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2138X)))
 (let ((?x119 (input.spec-%var-x-1.1.1 input.ind-%var2138X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2138X)))
 (=> $x243 (= ?x119 ?x151))))))
 ))
 (let (($x45 (forall ((input.ind-%var2137X (_ BitVec 32)) )(let (($x118 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2137X)))
 (let (($x243 (input.spec-%var-x-1.0.1 input.ind-%var2137X)))
 (= $x243 $x118))))
 ))
 (let (($x203 (and $x45 $x174)))
 (let (($x91 (and $x203 $x109)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x55 (and $x141 $x91)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x30 (and $x204 $x55)))
 (let (($x100 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x199 (and $x100 $x30)))
 (let (($x170 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x76 (bvadd ?x78 (_ bv3 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x76)))
 (let (($x137 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x76)))
 (let (($x120 (or false (or false (and (and true (or $x22 $x137)) (or $x84 $x170))))))
 (let (($x238 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x120)))
 (let (($x68 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x120)))
 (let (($x245 (and $x68 $x199)))
 (let (($x233 (=> $x245 $x16)))
 (not $x233))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x181 (bvule ?x194 input.dst.llvm-%n)))
 (let (($x221 (= $x181 true)))
 (let ((?x138 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x138)))
 (let (($x162 (= ?x60 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x162 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x226 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x223 true)))
 (let (($x73 (forall ((input.ind-%var2163X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2163X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x62))))
 (let ((?x286 (input.spec-%var-x-1.1.1 input.ind-%var2163X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2163X)))
 (=> $x45 (= ?x286 ?x9))))))))
 ))
 (let (($x5 (forall ((input.ind-%var2162X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var2162X) (bvult input.ind-%var2162X input.dst.llvm-%n))))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2162X)))
 (= $x45 $x255))))
 ))
 (let (($x259 (and $x5 $x73)))
 (let (($x17 (= $x259 true)))
 (let (($x232 (forall ((input.ind-%var2153X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2153X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x62))))
 (let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2153X)))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2153X)))
 (=> $x220 (= ?x230 ?x9))))))))
 ))
 (let (($x188 (forall ((input.ind-%var2152X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var2152X) (bvult input.ind-%var2152X input.dst.llvm-%n))))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2152X)))
 (= $x220 $x255))))
 ))
 (let (($x234 (and $x188 $x232)))
 (let (($x265 (= $x234 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x59 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x236 (bvsub ?x78 ?x132)))
 (let (($x180 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x236) (bvult ?x78 ?x236))))
 (let (($x263 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x125 (ite $x263 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x193 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x285 (bvmul (_ bv4 64) ?x193)))
 (let ((?x42 ((_ extract 63 32) ?x285)))
 (let (($x129 (= ?x42 ?x125)))
 (let (($x34 (and $x129 $x180)))
 (let (($x208 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x152 (and $x208 $x34)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x14 $x152)))
 (let (($x247 (= $x251 true)))
 (let (($x190 (= $x14 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x206)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x207)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (and $x106 $x136)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x85 $x256)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x113 $x98)))
 (let (($x158 (not $x83)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x94)))
 (let (($x268 (and (not $x175) $x158)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x39 $x58)))
 (let (($x142 (not $x143)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x79 $x128)))
 (let (($x214 (and (not $x177) $x142)))
 (let (($x197 (and (and (and (and (and (and $x214 $x268) $x200) $x282) $x93) $x196) $x172)))
 (let (($x182 (and $x197 $x66)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x154 (or false (or false (and (and true (or $x130 $x127)) (or $x7 $x267))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x154)))
 (let (($x168 (and $x178 $x182)))
 (let (($x46 (= $x168 true)))
 (let ((?x187 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x252 (= (_ bv0 2) ?x187)))
 (let (($x287 (= $x252 true)))
 (let (($x64 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x123 (= $x64 true)))
 (let ((?x293 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x293)))
 (let (($x217 (= ?x32 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x217 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x292 true)))
 (let (($x13 (and $x237 $x244)))
 (let (($x146 (and $x13 $x123)))
 (let (($x122 (and $x146 $x287)))
 (let (($x281 (and $x122 $x46)))
 (let (($x227 (and $x281 $x190)))
 (let (($x205 (and $x227 $x247)))
 (let (($x231 (and $x205 $x81)))
 (let (($x51 (and $x231 $x265)))
 (let (($x134 (and $x51 $x17)))
 (let (($x71 (and $x134 $x276)))
 (let (($x183 (and $x71 $x239)))
 (let (($x116 (and $x183 $x149)))
 (let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x40 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x40 (_ bv1 32))))
 (let (($x82 (and $x260 $x116)))
 (let (($x225 (forall ((input.ind-%var2173X (_ BitVec 32)) )(let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2173X)))
 (let ((?x286 (input.spec-%var-x-1.1.1 input.ind-%var2173X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2173X)))
 (=> $x45 (= ?x286 ?x230))))))
 ))
 (let (($x242 (forall ((input.ind-%var2172X (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2172X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2172X)))
 (= $x45 $x220))))
 ))
 (let (($x140 (and $x242 $x225)))
 (let (($x219 (and $x140 $x82)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x20 $x219)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x21 (and $x167 $x102)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x95 $x21)))
 (let (($x155 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd ?x78 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x195 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x68 (or false (or false (and (and true (or $x26 $x195)) (or $x189 $x155))))))
 (let (($x100 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x68)))
 (let (($x139 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x68)))
 (let (($x228 (and $x139 $x92)))
 (let (($x77 (=> $x228 $x221)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x194 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x181 (bvule ?x194 input.dst.llvm-%n)))
 (let (($x221 (= $x181 true)))
 (let ((?x138 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x60 (bvneg ?x138)))
 (let (($x162 (= ?x60 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x162 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x239 (= $x226 true)))
 (let (($x223 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x276 (= $x223 true)))
 (let (($x73 (forall ((input.ind-%var2163X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2163X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x62))))
 (let ((?x286 (input.spec-%var-x-1.1.1 input.ind-%var2163X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2163X)))
 (=> $x45 (= ?x286 ?x9))))))))
 ))
 (let (($x5 (forall ((input.ind-%var2162X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var2162X) (bvult input.ind-%var2162X input.dst.llvm-%n))))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2162X)))
 (= $x45 $x255))))
 ))
 (let (($x259 (and $x5 $x73)))
 (let (($x17 (= $x259 true)))
 (let (($x232 (forall ((input.ind-%var2153X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2153X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x62))))
 (let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2153X)))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2153X)))
 (=> $x220 (= ?x230 ?x9))))))))
 ))
 (let (($x188 (forall ((input.ind-%var2152X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var2152X) (bvult input.ind-%var2152X input.dst.llvm-%n))))
 (let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2152X)))
 (= $x220 $x255))))
 ))
 (let (($x234 (and $x188 $x232)))
 (let (($x265 (= $x234 true)))
 (let (($x59 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x81 (= $x59 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x236 (bvsub ?x78 ?x132)))
 (let (($x180 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x236) (bvult ?x78 ?x236))))
 (let (($x263 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x125 (ite $x263 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x193 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x285 (bvmul (_ bv4 64) ?x193)))
 (let ((?x42 ((_ extract 63 32) ?x285)))
 (let (($x129 (= ?x42 ?x125)))
 (let (($x34 (and $x129 $x180)))
 (let (($x208 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x152 (and $x208 $x34)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (=> $x14 $x152)))
 (let (($x247 (= $x251 true)))
 (let (($x190 (= $x14 true)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x66 (= (_ bv0 32) ?x206)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x207)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x196 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x136 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (and $x106 $x136)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x85 $x256)))
 (let (($x282 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x113 $x98)))
 (let (($x158 (not $x83)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x175 (and $x173 $x94)))
 (let (($x268 (and (not $x175) $x158)))
 (let (($x58 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x143 (and $x39 $x58)))
 (let (($x142 (not $x143)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (and $x79 $x128)))
 (let (($x214 (and (not $x177) $x142)))
 (let (($x197 (and (and (and (and (and (and $x214 $x268) $x200) $x282) $x93) $x196) $x172)))
 (let (($x182 (and $x197 $x66)))
 (let (($x267 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x130 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x154 (or false (or false (and (and true (or $x130 $x127)) (or $x7 $x267))))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x154)))
 (let (($x168 (and $x178 $x182)))
 (let (($x46 (= $x168 true)))
 (let ((?x187 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x252 (= (_ bv0 2) ?x187)))
 (let (($x287 (= $x252 true)))
 (let (($x64 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x123 (= $x64 true)))
 (let ((?x293 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x32 (bvneg ?x293)))
 (let (($x217 (= ?x32 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x244 (= $x217 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x237 (= $x292 true)))
 (let (($x13 (and $x237 $x244)))
 (let (($x146 (and $x13 $x123)))
 (let (($x122 (and $x146 $x287)))
 (let (($x281 (and $x122 $x46)))
 (let (($x227 (and $x281 $x190)))
 (let (($x205 (and $x227 $x247)))
 (let (($x231 (and $x205 $x81)))
 (let (($x51 (and $x231 $x265)))
 (let (($x134 (and $x51 $x17)))
 (let (($x71 (and $x134 $x276)))
 (let (($x183 (and $x71 $x239)))
 (let (($x116 (and $x183 $x149)))
 (let (($x241 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x40 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x260 (bvuge ?x40 (_ bv1 32))))
 (let (($x82 (and $x260 $x116)))
 (let (($x225 (forall ((input.ind-%var2173X (_ BitVec 32)) )(let ((?x230 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2173X)))
 (let ((?x286 (input.spec-%var-x-1.1.1 input.ind-%var2173X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2173X)))
 (=> $x45 (= ?x286 ?x230))))))
 ))
 (let (($x242 (forall ((input.ind-%var2172X (_ BitVec 32)) )(let (($x220 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2172X)))
 (let (($x45 (input.spec-%var-x-1.0.1 input.ind-%var2172X)))
 (= $x45 $x220))))
 ))
 (let (($x140 (and $x242 $x225)))
 (let (($x219 (and $x140 $x82)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x102 (and $x20 $x219)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x21 (and $x167 $x102)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x92 (and $x95 $x21)))
 (let (($x155 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x137 (bvadd ?x78 (_ bv3 32))))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x137)))
 (let (($x195 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x137)))
 (let (($x68 (or false (or false (and (and true (or $x26 $x195)) (or $x189 $x155))))))
 (let (($x100 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x68)))
 (let (($x139 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x68)))
 (let (($x228 (and $x139 $x92)))
 (let (($x77 (=> $x228 $x221)))
 (not $x77))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x109 (_ bv1 32))))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x283 (not $x14)))
 (let (($x91 (or $x283 $x65)))
 (let (($x160 (= $x91 true)))
 (let ((?x284 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x284)))
 (let (($x248 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x248 true)))
 (let (($x271 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x133 (= $x271 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x150 true)))
 (let (($x118 (forall ((input.ind-%var2198X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2198X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x5))))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2198X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2198X)))
 (=> $x242 (= ?x289 ?x134))))))))
 ))
 (let (($x102 (forall ((input.ind-%var2197X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2197X) (bvult input.ind-%var2197X input.dst.llvm-%n))))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2197X)))
 (= $x242 $x231))))
 ))
 (let (($x174 (and $x102 $x118)))
 (let (($x18 (= $x174 true)))
 (let (($x71 (forall ((input.ind-%var2188X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2188X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x5))))
 (let ((?x57 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2188X)))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2188X)))
 (=> $x215 (= ?x57 ?x134))))))))
 ))
 (let (($x89 (forall ((input.ind-%var2187X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2187X) (bvult input.ind-%var2187X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2187X)))
 (= $x215 $x231))))
 ))
 (let (($x226 (and $x89 $x71)))
 (let (($x239 (= $x226 true)))
 (let (($x236 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x99 (= $x236 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x125 true)))
 (let (($x285 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x285 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x197)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x207)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x196)))
 (let ((?x256 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x256)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x136 $x93)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x31 $x264)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x268 $x250)))
 (let (($x200 (not $x210)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x98 $x83)))
 (let (($x49 (and (not $x158) $x200)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x214 $x173)))
 (let (($x175 (not $x94)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x127 $x261)))
 (let (($x113 (and (not $x142) $x175)))
 (let (($x190 (and (and (and (and (and (and $x113 $x49) $x202) $x106) $x266) $x88) $x172)))
 (let (($x227 (and $x190 $x206)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x39 (or false (or false (and (and true (or $x44 $x97)) (or $x178 $x79))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x39)))
 (let (($x10 (and $x143 $x227)))
 (let (($x272 (= $x10 true)))
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x108 (= (_ bv0 2) ?x249)))
 (let (($x179 (= $x108 true)))
 (let ((?x146 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x146)))
 (let (($x252 (= ?x41 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x252 true)))
 (let (($x185 (and $x287 $x179)))
 (let (($x208 (and $x185 $x272)))
 (let (($x263 (and $x208 $x42)))
 (let (($x211 (and $x263 $x129)))
 (let (($x48 (and $x211 $x99)))
 (let (($x183 (and $x48 $x239)))
 (let (($x52 (and $x183 $x18)))
 (let (($x144 (and $x52 $x112)))
 (let (($x74 (and $x144 $x133)))
 (let (($x6 (and $x74 $x86)))
 (let (($x244 (forall ((input.ind-%var2208X (_ BitVec 32)) )(let ((?x57 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2208X)))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2208X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2208X)))
 (=> $x242 (= ?x289 ?x57))))))
 ))
 (let (($x124 (forall ((input.ind-%var2207X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2207X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2207X)))
 (= $x242 $x215))))
 ))
 (let (($x13 (and $x124 $x244)))
 (let (($x114 (and $x13 $x6)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x110 $x114)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x61 (and $x141 $x12)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x23 $x61)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let (($x120 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd ?x78 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x84 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x195)))
 (let (($x139 (or false (or false (and (and true (or $x161 $x84)) (or $x90 $x120))))))
 (let (($x95 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x139)))
 (let (($x157 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x139)))
 (let (($x198 (and $x157 $x117)))
 (let (($x279 (=> $x198 $x160)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x184 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x109 (ite $x184 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x109 (_ bv1 32))))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x283 (not $x14)))
 (let (($x91 (or $x283 $x65)))
 (let (($x160 (= $x91 true)))
 (let ((?x284 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x269 (bvneg ?x284)))
 (let (($x248 (= ?x269 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x86 (= $x248 true)))
 (let (($x271 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x133 (= $x271 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x112 (= $x150 true)))
 (let (($x118 (forall ((input.ind-%var2198X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2198X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x5))))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2198X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2198X)))
 (=> $x242 (= ?x289 ?x134))))))))
 ))
 (let (($x102 (forall ((input.ind-%var2197X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2197X) (bvult input.ind-%var2197X input.dst.llvm-%n))))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2197X)))
 (= $x242 $x231))))
 ))
 (let (($x174 (and $x102 $x118)))
 (let (($x18 (= $x174 true)))
 (let (($x71 (forall ((input.ind-%var2188X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2188X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x5))))
 (let ((?x57 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2188X)))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2188X)))
 (=> $x215 (= ?x57 ?x134))))))))
 ))
 (let (($x89 (forall ((input.ind-%var2187X (_ BitVec 32)) )(let (($x231 (and (bvule (_ bv0 32) input.ind-%var2187X) (bvult input.ind-%var2187X input.dst.llvm-%n))))
 (let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2187X)))
 (= $x215 $x231))))
 ))
 (let (($x226 (and $x89 $x71)))
 (let (($x239 (= $x226 true)))
 (let (($x236 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x99 (= $x236 true)))
 (let (($x125 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x129 (= $x125 true)))
 (let (($x285 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x42 (= $x285 true)))
 (let ((?x197 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x206 (= (_ bv0 32) ?x197)))
 (let ((?x207 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x207)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x196)))
 (let ((?x256 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x256)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (and $x136 $x93)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x31 $x264)))
 (let (($x106 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x210 (and $x268 $x250)))
 (let (($x200 (not $x210)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x158 (and $x98 $x83)))
 (let (($x49 (and (not $x158) $x200)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x214 $x173)))
 (let (($x175 (not $x94)))
 (let (($x261 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x127 $x261)))
 (let (($x113 (and (not $x142) $x175)))
 (let (($x190 (and (and (and (and (and (and $x113 $x49) $x202) $x106) $x266) $x88) $x172)))
 (let (($x227 (and $x190 $x206)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x267 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x267)))
 (let (($x39 (or false (or false (and (and true (or $x44 $x97)) (or $x178 $x79))))))
 (let (($x143 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x39)))
 (let (($x10 (and $x143 $x227)))
 (let (($x272 (= $x10 true)))
 (let ((?x249 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x108 (= (_ bv0 2) ?x249)))
 (let (($x179 (= $x108 true)))
 (let ((?x146 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x41 (bvneg ?x146)))
 (let (($x252 (= ?x41 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x252 true)))
 (let (($x185 (and $x287 $x179)))
 (let (($x208 (and $x185 $x272)))
 (let (($x263 (and $x208 $x42)))
 (let (($x211 (and $x263 $x129)))
 (let (($x48 (and $x211 $x99)))
 (let (($x183 (and $x48 $x239)))
 (let (($x52 (and $x183 $x18)))
 (let (($x144 (and $x52 $x112)))
 (let (($x74 (and $x144 $x133)))
 (let (($x6 (and $x74 $x86)))
 (let (($x244 (forall ((input.ind-%var2208X (_ BitVec 32)) )(let ((?x57 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2208X)))
 (let ((?x289 (input.spec-%var-x-1.1.1 input.ind-%var2208X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2208X)))
 (=> $x242 (= ?x289 ?x57))))))
 ))
 (let (($x124 (forall ((input.ind-%var2207X (_ BitVec 32)) )(let (($x215 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2207X)))
 (let (($x242 (input.spec-%var-x-1.0.1 input.ind-%var2207X)))
 (= $x242 $x215))))
 ))
 (let (($x13 (and $x124 $x244)))
 (let (($x114 (and $x13 $x6)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x12 (and $x110 $x114)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x61 (and $x141 $x12)))
 (let (($x23 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x117 (and $x23 $x61)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let (($x120 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd ?x78 (_ bv3 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x84 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x195)))
 (let (($x139 (or false (or false (and (and true (or $x161 $x84)) (or $x90 $x120))))))
 (let (($x95 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x139)))
 (let (($x157 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x139)))
 (let (($x198 (and $x157 $x117)))
 (let (($x279 (=> $x198 $x160)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 161 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x63 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x278 (bvmul (_ bv4294967295 32) ?x63)))
 (let ((?x69 (bvneg ?x278)))
 (let (($x257 (= ?x69 ?x135)))
 (let (($x290 (= $x257 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x254)))
 (let (($x121 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x121 true)))
 (let (($x163 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (= $x163 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (= $x37 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x32 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x293 (= $x243 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x107 (bvsub ?x78 ?x132)))
 (let (($x53 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x107) (bvult ?x78 ?x107))))
 (let (($x165 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x111 (ite $x165 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x181 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x181)))
 (let ((?x246 ((_ extract 63 32) ?x119)))
 (let (($x77 (= ?x246 ?x111)))
 (let (($x60 (and $x77 $x53)))
 (let (($x149 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x116 (and $x149 $x60)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x14 $x116)))
 (let (($x169 (= $x82 true)))
 (let (($x186 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x186 true)))
 (let (($x205 (= $x14 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x62)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x55)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x255 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x220 $x255)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x237 $x188)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x8 $x130)))
 (let (($x67 (not $x274)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (and $x160 $x279)))
 (let (($x292 (and (not $x262) $x67)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x198 $x283)))
 (let (($x109 (not $x184)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x174 $x18)))
 (let (($x91 (and (not $x117) $x109)))
 (let (($x16 (and (and (and (and (and (and $x91 $x292) $x260) $x230) $x180) $x251) $x30)))
 (let (($x199 (and $x16 $x213)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x114 (or false (or false (and (and true (or $x144 $x271)) (or $x284 $x269))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x9 (and $x61 $x199)))
 (let (($x34 (= $x9 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x102 (= (_ bv0 2) ?x219)))
 (let (($x151 (= $x102 true)))
 (let (($x276 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var2233X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x281))))
 (let ((?x187 (input.spec-%var-x-1.1.1 input.ind-%var2233X)))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2233X)))
 (=> $x124 (= ?x187 ?x227))))))))
 ))
 (let (($x81 (forall ((input.ind-%var2232X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var2232X) (bvult input.ind-%var2232X input.dst.llvm-%n))))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2232X)))
 (= $x124 $x175))))
 ))
 (let (($x71 (and $x81 $x276)))
 (let (($x226 (= $x71 true)))
 (let (($x208 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var2223X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x281))))
 (let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2223X)))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2223X)))
 (=> $x25 (= ?x122 ?x227))))))))
 ))
 (let (($x98 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var2222X) (bvult input.ind-%var2222X input.dst.llvm-%n))))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2222X)))
 (= $x25 $x175))))
 ))
 (let (($x193 (and $x98 $x208)))
 (let (($x285 (= $x193 true)))
 (let ((?x79 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x79)))
 (let (($x280 (= ?x128 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x280 true)))
 (let (($x42 (and $x39 $x285)))
 (let (($x239 (and $x42 $x226)))
 (let (($x15 (and $x239 $x151)))
 (let (($x247 (and $x15 $x34)))
 (let (($x240 (and $x247 $x205)))
 (let (($x228 (and $x240 $x153)))
 (let (($x92 (and $x228 $x169)))
 (let (($x40 (and $x92 $x293)))
 (let (($x294 (and $x40 $x28)))
 (let (($x164 (and $x294 $x295)))
 (let (($x291 (and $x164 $x147)))
 (let (($x103 (and $x291 $x224)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x97 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x97 (_ bv1 32))))
 (let (($x288 (and $x19 $x103)))
 (let (($x7 (forall ((input.ind-%var2243X (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2243X)))
 (let ((?x187 (input.spec-%var-x-1.1.1 input.ind-%var2243X)))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2243X)))
 (=> $x124 (= ?x187 ?x122))))))
 ))
 (let (($x64 (forall ((input.ind-%var2242X (_ BitVec 32)) )(let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2242X)))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2242X)))
 (= $x124 $x25))))
 ))
 (let (($x58 (and $x64 $x7)))
 (let (($x216 (and $x58 $x288)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x203 $x216)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x96 (and $x20 $x50)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x204 $x96)))
 (let (($x68 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd ?x78 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x189 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x157 (or false (or false (and (and true (or $x115 $x189)) (or $x238 $x68))))))
 (let (($x23 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x157)))
 (let (($x76 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x157)))
 (let (($x229 (and $x76 $x275)))
 (let (($x171 (=> $x229 $x290)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x135 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x63 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x278 (bvmul (_ bv4294967295 32) ?x63)))
 (let ((?x69 (bvneg ?x278)))
 (let (($x257 (= ?x69 ?x135)))
 (let (($x290 (= $x257 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x235 (bvneg ?x254)))
 (let (($x121 (= ?x235 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x121 true)))
 (let (($x163 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x147 (= $x163 true)))
 (let (($x37 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x295 (= $x37 true)))
 (let (($x32 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x32 true)))
 (let (($x243 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x293 (= $x243 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x107 (bvsub ?x78 ?x132)))
 (let (($x53 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x107) (bvult ?x78 ?x107))))
 (let (($x165 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x111 (ite $x165 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x181 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x119 (bvmul (_ bv4 64) ?x181)))
 (let ((?x246 ((_ extract 63 32) ?x119)))
 (let (($x77 (= ?x246 ?x111)))
 (let (($x60 (and $x77 $x53)))
 (let (($x149 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x116 (and $x149 $x60)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x82 (=> $x14 $x116)))
 (let (($x169 (= $x82 true)))
 (let (($x186 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x186 true)))
 (let (($x205 (= $x14 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x62)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x55)))
 (let ((?x152 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x251 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let ((?x225 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x255 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x188 (and $x220 $x255)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x237 $x188)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x130 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (and $x8 $x130)))
 (let (($x67 (not $x274)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x160 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (and $x160 $x279)))
 (let (($x292 (and (not $x262) $x67)))
 (let (($x283 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x198 $x283)))
 (let (($x109 (not $x184)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x174 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (and $x174 $x18)))
 (let (($x91 (and (not $x117) $x109)))
 (let (($x16 (and (and (and (and (and (and $x91 $x292) $x260) $x230) $x180) $x251) $x30)))
 (let (($x199 (and $x16 $x213)))
 (let (($x269 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x284 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x114 (or false (or false (and (and true (or $x144 $x271)) (or $x284 $x269))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x9 (and $x61 $x199)))
 (let (($x34 (= $x9 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x102 (= (_ bv0 2) ?x219)))
 (let (($x151 (= $x102 true)))
 (let (($x276 (forall ((input.ind-%var2233X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var2233X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x281))))
 (let ((?x187 (input.spec-%var-x-1.1.1 input.ind-%var2233X)))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2233X)))
 (=> $x124 (= ?x187 ?x227))))))))
 ))
 (let (($x81 (forall ((input.ind-%var2232X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var2232X) (bvult input.ind-%var2232X input.dst.llvm-%n))))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2232X)))
 (= $x124 $x175))))
 ))
 (let (($x71 (and $x81 $x276)))
 (let (($x226 (= $x71 true)))
 (let (($x208 (forall ((input.ind-%var2223X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var2223X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x281))))
 (let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2223X)))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2223X)))
 (=> $x25 (= ?x122 ?x227))))))))
 ))
 (let (($x98 (forall ((input.ind-%var2222X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var2222X) (bvult input.ind-%var2222X input.dst.llvm-%n))))
 (let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2222X)))
 (= $x25 $x175))))
 ))
 (let (($x193 (and $x98 $x208)))
 (let (($x285 (= $x193 true)))
 (let ((?x79 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x128 (bvneg ?x79)))
 (let (($x280 (= ?x128 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x39 (= $x280 true)))
 (let (($x42 (and $x39 $x285)))
 (let (($x239 (and $x42 $x226)))
 (let (($x15 (and $x239 $x151)))
 (let (($x247 (and $x15 $x34)))
 (let (($x240 (and $x247 $x205)))
 (let (($x228 (and $x240 $x153)))
 (let (($x92 (and $x228 $x169)))
 (let (($x40 (and $x92 $x293)))
 (let (($x294 (and $x40 $x28)))
 (let (($x164 (and $x294 $x295)))
 (let (($x291 (and $x164 $x147)))
 (let (($x103 (and $x291 $x224)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x97 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x19 (bvuge ?x97 (_ bv1 32))))
 (let (($x288 (and $x19 $x103)))
 (let (($x7 (forall ((input.ind-%var2243X (_ BitVec 32)) )(let ((?x122 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2243X)))
 (let ((?x187 (input.spec-%var-x-1.1.1 input.ind-%var2243X)))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2243X)))
 (=> $x124 (= ?x187 ?x122))))))
 ))
 (let (($x64 (forall ((input.ind-%var2242X (_ BitVec 32)) )(let (($x25 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2242X)))
 (let (($x124 (input.spec-%var-x-1.0.1 input.ind-%var2242X)))
 (= $x124 $x25))))
 ))
 (let (($x58 (and $x64 $x7)))
 (let (($x216 (and $x58 $x288)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x50 (and $x203 $x216)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x96 (and $x20 $x50)))
 (let (($x204 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x275 (and $x204 $x96)))
 (let (($x68 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x84 (bvadd ?x78 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x84)))
 (let (($x189 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x115 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x84)))
 (let (($x157 (or false (or false (and (and true (or $x115 $x189)) (or $x238 $x68))))))
 (let (($x23 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x157)))
 (let (($x76 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x157)))
 (let (($x229 (and $x76 $x275)))
 (let (($x171 (=> $x229 $x290)))
 (not $x171)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x253))))
 (let ((?x192 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x70)))
 (let ((?x99 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x5 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x99)))
 (let ((?x231 (bvmul (_ bv4294967295 32) ?x5)))
 (let ((?x73 (bvneg ?x231)))
 (let (($x258 (= ?x73 ?x192)))
 (let (($x24 (= $x258 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x222)))
 (let (($x75 (= ?x233 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (= $x75 true)))
 (let ((?x263 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x263)))
 (let (($x89 (= ?x129 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x89 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x256 (= (_ bv0 2) ?x214)))
 (let (($x158 (= $x256 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x106 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x66 true)))
 (let (($x31 (forall ((input.ind-%var2268X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2268X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x254))))
 (let ((?x154 (input.spec-%var-x-1.1.1 input.ind-%var2268X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2268X)))
 (=> $x64 (= ?x154 ?x216))))))))
 ))
 (let (($x118 (forall ((input.ind-%var2267X (_ BitVec 32)) )(let (($x119 (and (bvule (_ bv0 32) input.ind-%var2267X) (bvult input.ind-%var2267X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2267X)))
 (= $x64 $x119))))
 ))
 (let (($x182 (and $x118 $x31)))
 (let (($x85 (= $x182 true)))
 (let (($x275 (forall ((input.ind-%var2258X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2258X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x254))))
 (let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2258X)))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2258X)))
 (=> $x185 (= ?x128 ?x216))))))))
 ))
 (let (($x165 (forall ((input.ind-%var2257X (_ BitVec 32)) )(let (($x119 (and (bvule (_ bv0 32) input.ind-%var2257X) (bvult input.ind-%var2257X input.dst.llvm-%n))))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2257X)))
 (= $x185 $x119))))
 ))
 (let (($x229 (and $x165 $x275)))
 (let (($x63 (= $x229 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x240 (= $x205 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x34 (= $x9 true)))
 (let (($x55 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 ?x132)) (bvult ?x78 (bvsub ?x78 ?x132)))))
 (let (($x225 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x188 (ite $x225 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x47 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x47)))
 (let ((?x220 ((_ extract 63 32) ?x237)))
 (let (($x180 (= ?x220 ?x188)))
 (let (($x30 (and $x180 $x55)))
 (let (($x45 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x16 (and $x45 $x30)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (=> $x14 $x16)))
 (let (($x213 (= $x62 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x292 true)))
 (let (($x130 (= $x14 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x65)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x18)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x269 $x86)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x284 $x6)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x151 $x15)))
 (let (($x150 (not $x52)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x183 $x219)))
 (let (($x112 (and (not $x102) $x150)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x134 $x223)))
 (let (($x71 (not $x276)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x206 $x202)))
 (let (($x239 (and (not $x81) $x71)))
 (let (($x279 (and (and (and (and (and (and $x239 $x112) $x271) $x74) $x114) $x174) $x117)))
 (let (($x262 (and $x279 $x198)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x285 (or false (or false (and (and true (or $x88 $x46)) (or $x227 $x10))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x285)))
 (let (($x286 (and $x48 $x262)))
 (let (($x8 (= $x286 true)))
 (let (($x274 (and $x8 $x130)))
 (let (($x241 (and $x274 $x245)))
 (let (($x199 (and $x241 $x213)))
 (let (($x247 (and $x199 $x34)))
 (let (($x21 (and $x247 $x240)))
 (let (($x278 (and $x21 $x63)))
 (let (($x49 (and $x278 $x85)))
 (let (($x282 (and $x49 $x200)))
 (let (($x127 (and $x282 $x136)))
 (let (($x93 (and $x127 $x158)))
 (let (($x51 (and $x93 $x105)))
 (let (($x259 (and $x51 $x234)))
 (let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x264 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x264 (_ bv1 32))))
 (let (($x232 (and $x266 $x259)))
 (let (($x175 (forall ((input.ind-%var2278X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2278X)))
 (let ((?x154 (input.spec-%var-x-1.1.1 input.ind-%var2278X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2278X)))
 (=> $x64 (= ?x154 ?x128))))))
 ))
 (let (($x267 (forall ((input.ind-%var2277X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2277X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2277X)))
 (= $x64 $x185))))
 ))
 (let (($x113 (and $x267 $x175)))
 (let (($x17 (and $x113 $x232)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x140 $x17)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x265 (and $x110 $x43)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x125 (and $x167 $x265)))
 (let (($x139 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x78 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x90 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x76 (or false (or false (and (and true (or $x170 $x90)) (or $x100 $x139))))))
 (let (($x204 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x76)))
 (let (($x137 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x76)))
 (let (($x236 (and $x137 $x125)))
 (let (($x126 (=> $x236 $x24)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x253))))
 (let ((?x192 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x70)))
 (let ((?x99 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x5 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x99)))
 (let ((?x231 (bvmul (_ bv4294967295 32) ?x5)))
 (let ((?x73 (bvneg ?x231)))
 (let (($x258 (= ?x73 ?x192)))
 (let (($x24 (= $x258 true)))
 (let ((?x222 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x233 (bvneg ?x222)))
 (let (($x75 (= ?x233 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x234 (= $x75 true)))
 (let ((?x263 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x129 (bvneg ?x263)))
 (let (($x89 (= ?x129 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x105 (= $x89 true)))
 (let ((?x214 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x256 (= (_ bv0 2) ?x214)))
 (let (($x158 (= $x256 true)))
 (let (($x106 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x136 (= $x106 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x200 (= $x66 true)))
 (let (($x31 (forall ((input.ind-%var2268X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2268X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x254))))
 (let ((?x154 (input.spec-%var-x-1.1.1 input.ind-%var2268X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2268X)))
 (=> $x64 (= ?x154 ?x216))))))))
 ))
 (let (($x118 (forall ((input.ind-%var2267X (_ BitVec 32)) )(let (($x119 (and (bvule (_ bv0 32) input.ind-%var2267X) (bvult input.ind-%var2267X input.dst.llvm-%n))))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2267X)))
 (= $x64 $x119))))
 ))
 (let (($x182 (and $x118 $x31)))
 (let (($x85 (= $x182 true)))
 (let (($x275 (forall ((input.ind-%var2258X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2258X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x254))))
 (let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2258X)))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2258X)))
 (=> $x185 (= ?x128 ?x216))))))))
 ))
 (let (($x165 (forall ((input.ind-%var2257X (_ BitVec 32)) )(let (($x119 (and (bvule (_ bv0 32) input.ind-%var2257X) (bvult input.ind-%var2257X input.dst.llvm-%n))))
 (let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2257X)))
 (= $x185 $x119))))
 ))
 (let (($x229 (and $x165 $x275)))
 (let (($x63 (= $x229 true)))
 (let (($x205 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x240 (= $x205 true)))
 (let (($x9 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x34 (= $x9 true)))
 (let (($x55 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 (bvsub ?x78 ?x132)) (bvult ?x78 (bvsub ?x78 ?x132)))))
 (let (($x225 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x188 (ite $x225 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x47 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x47)))
 (let ((?x220 ((_ extract 63 32) ?x237)))
 (let (($x180 (= ?x220 ?x188)))
 (let (($x30 (and $x180 $x55)))
 (let (($x45 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x16 (and $x45 $x30)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (=> $x14 $x16)))
 (let (($x213 (= $x62 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x245 (= $x292 true)))
 (let (($x130 (= $x14 true)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x65)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x117 (= (_ bv0 32) ?x18)))
 (let ((?x61 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x248 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x248)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x269 $x86)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (and $x284 $x6)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (and $x151 $x15)))
 (let (($x150 (not $x52)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x183 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x183 $x219)))
 (let (($x112 (and (not $x102) $x150)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x276 (and $x134 $x223)))
 (let (($x71 (not $x276)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x206 $x202)))
 (let (($x239 (and (not $x81) $x71)))
 (let (($x279 (and (and (and (and (and (and $x239 $x112) $x271) $x74) $x114) $x174) $x117)))
 (let (($x262 (and $x279 $x198)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x196 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x196)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x196)))
 (let (($x285 (or false (or false (and (and true (or $x88 $x46)) (or $x227 $x10))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x285)))
 (let (($x286 (and $x48 $x262)))
 (let (($x8 (= $x286 true)))
 (let (($x274 (and $x8 $x130)))
 (let (($x241 (and $x274 $x245)))
 (let (($x199 (and $x241 $x213)))
 (let (($x247 (and $x199 $x34)))
 (let (($x21 (and $x247 $x240)))
 (let (($x278 (and $x21 $x63)))
 (let (($x49 (and $x278 $x85)))
 (let (($x282 (and $x49 $x200)))
 (let (($x127 (and $x282 $x136)))
 (let (($x93 (and $x127 $x158)))
 (let (($x51 (and $x93 $x105)))
 (let (($x259 (and $x51 $x234)))
 (let (($x268 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x264 (ite $x268 (_ bv1 32) (_ bv0 32))))
 (let (($x266 (bvuge ?x264 (_ bv1 32))))
 (let (($x232 (and $x266 $x259)))
 (let (($x175 (forall ((input.ind-%var2278X (_ BitVec 32)) )(let ((?x128 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2278X)))
 (let ((?x154 (input.spec-%var-x-1.1.1 input.ind-%var2278X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2278X)))
 (=> $x64 (= ?x154 ?x128))))))
 ))
 (let (($x267 (forall ((input.ind-%var2277X (_ BitVec 32)) )(let (($x185 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2277X)))
 (let (($x64 (input.spec-%var-x-1.0.1 input.ind-%var2277X)))
 (= $x64 $x185))))
 ))
 (let (($x113 (and $x267 $x175)))
 (let (($x17 (and $x113 $x232)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x140 $x17)))
 (let (($x110 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x265 (and $x110 $x43)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x125 (and $x167 $x265)))
 (let (($x139 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x189 (bvadd ?x78 (_ bv3 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x189)))
 (let (($x90 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x189)))
 (let (($x76 (or false (or false (and (and true (or $x170 $x90)) (or $x100 $x139))))))
 (let (($x204 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x76)))
 (let (($x137 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x76)))
 (let (($x236 (and $x137 $x125)))
 (let (($x126 (=> $x236 $x24)))
 (not $x126)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 183 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x244 (bvule ?x215 (_ bv4294967294 32))))
 (let (($x242 (= $x244 true)))
 (let ((?x217 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x217)))
 (let (($x37 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x37 true)))
 (let (($x162 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x162 true)))
 (let (($x293 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x293 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x228)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x221)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x124)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x19 $x122)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x44 $x79)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x258 $x24)))
 (let (($x104 (not $x126)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (and $x201 $x70)))
 (let (($x197 (and (not $x192) $x104)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x218 $x56)))
 (let (($x179 (not $x146)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x105 $x51)))
 (let (($x253 (and (not $x36) $x179)))
 (let (($x243 (and (and (and (and (and (and $x253 $x197) $x177) $x178) $x25) $x111) $x186)))
 (let (($x60 (and $x243 $x138)))
 (let (($x265 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x5 (or false (or false (and (and true (or $x234 $x259)) (or $x43 $x265))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x116 (and $x73 $x60)))
 (let (($x53 (= $x116 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x263 true)))
 (let ((?x256 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x158 (= (_ bv0 2) ?x256)))
 (let (($x93 (= $x158 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x136 true)))
 (let (($x66 (forall ((input.ind-%var2304X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2304X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x199))))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var2304X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2304X)))
 (=> $x267 (= ?x172 ?x21))))))))
 ))
 (let (($x147 (forall ((input.ind-%var2303X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var2303X) (bvult input.ind-%var2303X input.dst.llvm-%n))))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2303X)))
 (= $x267 $x8))))
 ))
 (let (($x200 (and $x147 $x66)))
 (let (($x282 (= $x200 true)))
 (let (($x119 (forall ((input.ind-%var2294X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2294X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x199))))
 (let ((?x88 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2294X)))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2294X)))
 (=> $x94 (= ?x88 ?x21))))))))
 ))
 (let (($x274 (forall ((input.ind-%var2293X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var2293X) (bvult input.ind-%var2293X input.dst.llvm-%n))))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2293X)))
 (= $x94 $x8))))
 ))
 (let (($x246 (and $x274 $x119)))
 (let (($x165 (= $x246 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x91 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x271 (bvsub ?x78 ?x132)))
 (let (($x109 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x271) (bvult ?x78 ?x271))))
 (let (($x112 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x283 (ite $x112 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x15 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvmul (_ bv4 64) ?x15)))
 (let ((?x150 ((_ extract 63 32) ?x52)))
 (let (($x144 (= ?x150 ?x283)))
 (let (($x284 (and $x144 $x109)))
 (let (($x12 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x269 (and $x12 $x284)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x14 $x269)))
 (let (($x86 (= $x248 true)))
 (let ((?x134 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x134)))
 (let (($x71 (= ?x223 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x71 true)))
 (let (($x202 (= $x14 true)))
 (let (($x183 (and $x202 $x239)))
 (let (($x6 (and $x183 $x86)))
 (let (($x174 (and $x6 $x61)))
 (let (($x107 (and $x174 $x165)))
 (let (($x106 (and $x107 $x282)))
 (let (($x145 (and $x106 $x127)))
 (let (($x277 (and $x145 $x93)))
 (let (($x211 (and $x277 $x129)))
 (let (($x82 (and $x211 $x53)))
 (let (($x153 (and $x82 $x28)))
 (let (($x294 (and $x153 $x149)))
 (let (($x69 (and $x294 $x289)))
 (let (($x285 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x48 (ite $x285 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x48 (_ bv1 32))))
 (let (($x257 (and $x206 $x69)))
 (let (($x272 (forall ((input.ind-%var2314X (_ BitVec 32)) )(let ((?x88 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2314X)))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var2314X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2314X)))
 (=> $x267 (= ?x172 ?x88))))))
 ))
 (let (($x268 (forall ((input.ind-%var2313X (_ BitVec 32)) )(let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2313X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2313X)))
 (= $x267 $x94))))
 ))
 (let (($x208 (and $x268 $x272)))
 (let (($x290 (and $x208 $x257)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x13 $x290)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x203 $x252)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x27 (and $x141 $x123)))
 (let (($x157 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd ?x78 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x238 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x137 (or false (or false (and (and true (or $x155 $x238)) (or $x95 $x157))))))
 (let (($x167 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x137)))
 (let (($x195 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x137)))
 (let (($x143 (and $x195 $x27)))
 (let (($x57 (=> $x143 $x242)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x215 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x244 (bvule ?x215 (_ bv4294967294 32))))
 (let (($x242 (= $x244 true)))
 (let ((?x217 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x77 (bvneg ?x217)))
 (let (($x37 (= ?x77 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x289 (= $x37 true)))
 (let (($x162 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x149 (= $x162 true)))
 (let (($x293 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x293 true)))
 (let ((?x228 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x138 (= (_ bv0 32) ?x228)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x186 (= (_ bv0 32) ?x221)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x111 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x124)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x19 $x122)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (and $x44 $x79)))
 (let (($x178 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x126 (and $x258 $x24)))
 (let (($x104 (not $x126)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x192 (and $x201 $x70)))
 (let (($x197 (and (not $x192) $x104)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x218 $x56)))
 (let (($x179 (not $x146)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x105 $x51)))
 (let (($x253 (and (not $x36) $x179)))
 (let (($x243 (and (and (and (and (and (and $x253 $x197) $x177) $x178) $x25) $x111) $x186)))
 (let (($x60 (and $x243 $x138)))
 (let (($x265 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x75 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x75)))
 (let (($x259 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x75)))
 (let (($x5 (or false (or false (and (and true (or $x234 $x259)) (or $x43 $x265))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x5)))
 (let (($x116 (and $x73 $x60)))
 (let (($x53 (= $x116 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x129 (= $x263 true)))
 (let ((?x256 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x158 (= (_ bv0 2) ?x256)))
 (let (($x93 (= $x158 true)))
 (let (($x136 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x127 (= $x136 true)))
 (let (($x66 (forall ((input.ind-%var2304X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2304X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x199))))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var2304X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2304X)))
 (=> $x267 (= ?x172 ?x21))))))))
 ))
 (let (($x147 (forall ((input.ind-%var2303X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var2303X) (bvult input.ind-%var2303X input.dst.llvm-%n))))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2303X)))
 (= $x267 $x8))))
 ))
 (let (($x200 (and $x147 $x66)))
 (let (($x282 (= $x200 true)))
 (let (($x119 (forall ((input.ind-%var2294X (_ BitVec 32)) )(let ((?x30 (bvadd (bvmul input.ind-%var2294X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv1 32))) (select input.dst.llvm-mem ?x30))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x30 (_ bv2 32))) ?x199))))
 (let ((?x88 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2294X)))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2294X)))
 (=> $x94 (= ?x88 ?x21))))))))
 ))
 (let (($x274 (forall ((input.ind-%var2293X (_ BitVec 32)) )(let (($x8 (and (bvule (_ bv0 32) input.ind-%var2293X) (bvult input.ind-%var2293X input.dst.llvm-%n))))
 (let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2293X)))
 (= $x94 $x8))))
 ))
 (let (($x246 (and $x274 $x119)))
 (let (($x165 (= $x246 true)))
 (let (($x91 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x61 (= $x91 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x271 (bvsub ?x78 ?x132)))
 (let (($x109 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x271) (bvult ?x78 ?x271))))
 (let (($x112 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x283 (ite $x112 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x15 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvmul (_ bv4 64) ?x15)))
 (let ((?x150 ((_ extract 63 32) ?x52)))
 (let (($x144 (= ?x150 ?x283)))
 (let (($x284 (and $x144 $x109)))
 (let (($x12 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x269 (and $x12 $x284)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x248 (=> $x14 $x269)))
 (let (($x86 (= $x248 true)))
 (let ((?x134 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x223 (bvneg ?x134)))
 (let (($x71 (= ?x223 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x239 (= $x71 true)))
 (let (($x202 (= $x14 true)))
 (let (($x183 (and $x202 $x239)))
 (let (($x6 (and $x183 $x86)))
 (let (($x174 (and $x6 $x61)))
 (let (($x107 (and $x174 $x165)))
 (let (($x106 (and $x107 $x282)))
 (let (($x145 (and $x106 $x127)))
 (let (($x277 (and $x145 $x93)))
 (let (($x211 (and $x277 $x129)))
 (let (($x82 (and $x211 $x53)))
 (let (($x153 (and $x82 $x28)))
 (let (($x294 (and $x153 $x149)))
 (let (($x69 (and $x294 $x289)))
 (let (($x285 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x48 (ite $x285 (_ bv1 32) (_ bv0 32))))
 (let (($x206 (bvuge ?x48 (_ bv1 32))))
 (let (($x257 (and $x206 $x69)))
 (let (($x272 (forall ((input.ind-%var2314X (_ BitVec 32)) )(let ((?x88 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2314X)))
 (let ((?x172 (input.spec-%var-x-1.1.1 input.ind-%var2314X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2314X)))
 (=> $x267 (= ?x172 ?x88))))))
 ))
 (let (($x268 (forall ((input.ind-%var2313X (_ BitVec 32)) )(let (($x94 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2313X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var2313X)))
 (= $x267 $x94))))
 ))
 (let (($x208 (and $x268 $x272)))
 (let (($x290 (and $x208 $x257)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x252 (and $x13 $x290)))
 (let (($x203 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x123 (and $x203 $x252)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x27 (and $x141 $x123)))
 (let (($x157 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd ?x78 (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x238 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x137 (or false (or false (and (and true (or $x155 $x238)) (or $x95 $x157))))))
 (let (($x167 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x137)))
 (let (($x195 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x137)))
 (let (($x143 (and $x195 $x27)))
 (let (($x57 (=> $x143 $x242)))
 (not $x57))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x281 (bvsge ?x182 (_ bv0 32))))
 (let (($x266 (= $x281 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x96)))
 (let (($x50 (= ?x275 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x50 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x210 true)))
 (let (($x224 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x224 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x270 (= (_ bv0 32) ?x188)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x45)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x54 $x152)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (and $x260 $x225)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x64 $x128)))
 (let (($x185 (not $x196)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x42 $x264)))
 (let (($x67 (and (not $x207) $x185)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x41 $x11)))
 (let (($x173 (not $x89)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x162 $x149)))
 (let (($x154 (and (not $x57) $x173)))
 (let (($x38 (and (and (and (and (and (and $x154 $x67) $x160) $x279) $x255) $x47) $x237)))
 (let (($x254 (and $x38 $x270)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x215 (or false (or false (and (and true (or $x37 $x289)) (or $x290 $x252))))))
 (let (($x242 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x295 (and $x242 $x254)))
 (let (($x103 (= $x295 true)))
 (let (($x82 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x293 (= $x82 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x60 (= (_ bv0 2) ?x138)))
 (let (($x116 (= $x60 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x221 true)))
 (let (($x32 (forall ((input.ind-%var2339X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var2339X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x232))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2339X)))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2339X)))
 (=> $x268 (= ?x202 ?x99))))))))
 ))
 (let (($x192 (forall ((input.ind-%var2338X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var2338X) (bvult input.ind-%var2338X input.dst.llvm-%n))))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2338X)))
 (= $x268 $x165))))
 ))
 (let (($x7 (and $x192 $x32)))
 (let (($x111 (= $x7 true)))
 (let (($x105 (forall ((input.ind-%var2329X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var2329X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x232))))
 (let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2329X)))
 (let (($x227 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2329X)))
 (=> $x227 (= ?x134 ?x99))))))))
 ))
 (let (($x121 (forall ((input.ind-%var2328X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var2328X) (bvult input.ind-%var2328X input.dst.llvm-%n))))
 (let (($x227 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2328X)))
 (= $x227 $x165))))
 ))
 (let (($x51 (and $x121 $x105)))
 (let (($x36 (= $x51 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x34 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x262 (bvsub ?x78 ?x132)))
 (let (($x241 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x262) (bvult ?x78 ?x262))))
 (let (($x61 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x174 (ite $x61 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x6 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x6)))
 (let ((?x91 ((_ extract 63 32) ?x114)))
 (let (($x286 (= ?x91 ?x174)))
 (let (($x55 (and $x286 $x241)))
 (let (($x248 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x30 (and $x248 $x55)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x205 (=> $x14 $x30)))
 (let (($x240 (= $x205 true)))
 (let ((?x144 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x184 (bvneg ?x144)))
 (let (($x133 (= ?x184 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x133 true)))
 (let (($x150 (= $x14 true)))
 (let (($x109 (and $x150 $x74)))
 (let (($x220 (and $x109 $x240)))
 (let (($x213 (and $x220 $x62)))
 (let (($x108 (and $x213 $x36)))
 (let (($x92 (and $x108 $x111)))
 (let (($x243 (and $x92 $x186)))
 (let (($x53 (and $x243 $x116)))
 (let (($x28 (and $x53 $x293)))
 (let (($x288 (and $x28 $x103)))
 (let (($x118 (and $x288 $x216)))
 (let (($x278 (and $x118 $x63)))
 (let (($x29 (and $x278 $x229)))
 (let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x15 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x15 (_ bv1 32))))
 (let (($x168 (and $x52 $x29)))
 (let (($x219 (forall ((input.ind-%var2349X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2349X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2349X)))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2349X)))
 (=> $x268 (= ?x202 ?x134))))))
 ))
 (let (($x193 (forall ((input.ind-%var2348X (_ BitVec 32)) )(let (($x227 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2348X)))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2348X)))
 (= $x268 $x227))))
 ))
 (let (($x102 (and $x193 $x219)))
 (let (($x164 (and $x102 $x168)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x58 $x164)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x235 (and $x140 $x169)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x20 $x235)))
 (let (($x76 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd ?x78 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x100 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x238)))
 (let (($x195 (or false (or false (and (and true (or $x120 $x100)) (or $x23 $x76))))))
 (let (($x141 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x195)))
 (let (($x84 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x195)))
 (let (($x163 (and $x84 $x31)))
 (let (($x190 (=> $x163 $x266)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x182 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x281 (bvsge ?x182 (_ bv0 32))))
 (let (($x266 (= $x281 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x275 (bvneg ?x96)))
 (let (($x50 (= ?x275 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x229 (= $x50 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x63 (= $x210 true)))
 (let (($x224 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x216 (= $x224 true)))
 (let ((?x188 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x270 (= (_ bv0 32) ?x188)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x237 (= (_ bv0 32) ?x45)))
 (let ((?x230 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x47 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x230)))
 (let ((?x180 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x180)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x54 $x152)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (and $x260 $x225)))
 (let (($x279 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x196 (and $x64 $x128)))
 (let (($x185 (not $x196)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x42 $x264)))
 (let (($x67 (and (not $x207) $x185)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x41 $x11)))
 (let (($x173 (not $x89)))
 (let (($x149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x162 $x149)))
 (let (($x154 (and (not $x57) $x173)))
 (let (($x38 (and (and (and (and (and (and $x154 $x67) $x160) $x279) $x255) $x47) $x237)))
 (let (($x254 (and $x38 $x270)))
 (let (($x252 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x215 (or false (or false (and (and true (or $x37 $x289)) (or $x290 $x252))))))
 (let (($x242 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x215)))
 (let (($x295 (and $x242 $x254)))
 (let (($x103 (= $x295 true)))
 (let (($x82 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x293 (= $x82 true)))
 (let ((?x138 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x60 (= (_ bv0 2) ?x138)))
 (let (($x116 (= $x60 true)))
 (let (($x221 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x186 (= $x221 true)))
 (let (($x32 (forall ((input.ind-%var2339X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var2339X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x232))))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2339X)))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2339X)))
 (=> $x268 (= ?x202 ?x99))))))))
 ))
 (let (($x192 (forall ((input.ind-%var2338X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var2338X) (bvult input.ind-%var2338X input.dst.llvm-%n))))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2338X)))
 (= $x268 $x165))))
 ))
 (let (($x7 (and $x192 $x32)))
 (let (($x111 (= $x7 true)))
 (let (($x105 (forall ((input.ind-%var2329X (_ BitVec 32)) )(let ((?x231 (bvadd (bvmul input.ind-%var2329X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv1 32))) (select input.dst.llvm-mem ?x231))))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x231 (_ bv2 32))) ?x232))))
 (let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2329X)))
 (let (($x227 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2329X)))
 (=> $x227 (= ?x134 ?x99))))))))
 ))
 (let (($x121 (forall ((input.ind-%var2328X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var2328X) (bvult input.ind-%var2328X input.dst.llvm-%n))))
 (let (($x227 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2328X)))
 (= $x227 $x165))))
 ))
 (let (($x51 (and $x121 $x105)))
 (let (($x36 (= $x51 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x34 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x262 (bvsub ?x78 ?x132)))
 (let (($x241 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x262) (bvult ?x78 ?x262))))
 (let (($x61 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x174 (ite $x61 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x6 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x114 (bvmul (_ bv4 64) ?x6)))
 (let ((?x91 ((_ extract 63 32) ?x114)))
 (let (($x286 (= ?x91 ?x174)))
 (let (($x55 (and $x286 $x241)))
 (let (($x248 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x30 (and $x248 $x55)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x205 (=> $x14 $x30)))
 (let (($x240 (= $x205 true)))
 (let ((?x144 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x184 (bvneg ?x144)))
 (let (($x133 (= ?x184 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x74 (= $x133 true)))
 (let (($x150 (= $x14 true)))
 (let (($x109 (and $x150 $x74)))
 (let (($x220 (and $x109 $x240)))
 (let (($x213 (and $x220 $x62)))
 (let (($x108 (and $x213 $x36)))
 (let (($x92 (and $x108 $x111)))
 (let (($x243 (and $x92 $x186)))
 (let (($x53 (and $x243 $x116)))
 (let (($x28 (and $x53 $x293)))
 (let (($x288 (and $x28 $x103)))
 (let (($x118 (and $x288 $x216)))
 (let (($x278 (and $x118 $x63)))
 (let (($x29 (and $x278 $x229)))
 (let (($x151 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x15 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x15 (_ bv1 32))))
 (let (($x168 (and $x52 $x29)))
 (let (($x219 (forall ((input.ind-%var2349X (_ BitVec 32)) )(let ((?x134 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2349X)))
 (let ((?x202 (input.spec-%var-x-1.1.1 input.ind-%var2349X)))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2349X)))
 (=> $x268 (= ?x202 ?x134))))))
 ))
 (let (($x193 (forall ((input.ind-%var2348X (_ BitVec 32)) )(let (($x227 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2348X)))
 (let (($x268 (input.spec-%var-x-1.0.1 input.ind-%var2348X)))
 (= $x268 $x227))))
 ))
 (let (($x102 (and $x193 $x219)))
 (let (($x164 (and $x102 $x168)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x169 (and $x58 $x164)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x235 (and $x140 $x169)))
 (let (($x20 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x31 (and $x20 $x235)))
 (let (($x76 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x238 (bvadd ?x78 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x238)))
 (let (($x100 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x238)))
 (let (($x195 (or false (or false (and (and true (or $x120 $x100)) (or $x23 $x76))))))
 (let (($x141 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x195)))
 (let (($x84 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x195)))
 (let (($x163 (and $x84 $x31)))
 (let (($x190 (=> $x163 $x266)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (bvule ?x122 (_ bv4294967294 32))))
 (let (($x48 (= $x276 true)))
 (let ((?x35 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x35)))
 (let (($x197 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x197 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x33 (= $x44 true)))
 (let (($x126 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x126 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x146 (= $x218 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x145 (bvsub ?x78 ?x132)))
 (let (($x181 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x145) (bvult ?x78 ?x145))))
 (let (($x136 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x127 (ite $x136 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x263 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x256 (bvmul (_ bv4 64) ?x263)))
 (let ((?x158 ((_ extract 63 32) ?x256)))
 (let (($x106 (= ?x158 ?x127)))
 (let (($x194 (and $x106 $x181)))
 (let (($x282 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x211 (and $x282 $x194)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (=> $x14 $x211)))
 (let (($x222 (= $x85 true)))
 (let (($x16 (= $x14 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x223)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x153)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x266 (and $x163 $x281)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x31 $x266)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x278 $x96)))
 (let (($x50 (not $x275)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x118 $x210)))
 (let (($x29 (and (not $x63) $x50)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x254 $x295)))
 (let (($x288 (not $x103)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x117 $x279)))
 (let (($x216 (and (not $x270) $x288)))
 (let (($x226 (and (and (and (and (and (and $x216 $x29) $x164) $x235) $x190) $x176) $x10)))
 (let (($x94 (and $x226 $x172)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x237 (or false (or false (and (and true (or $x180 $x152)) (or $x251 $x230))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x237)))
 (let (($x272 (and $x188 $x94)))
 (let (($x147 (= $x272 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x18 (= (_ bv0 2) ?x67)))
 (let (($x245 (= $x18 true)))
 (let (($x175 (forall ((input.ind-%var2374X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var2374X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x111))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2374X)))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2374X)))
 (=> $x193 (= ?x150 ?x138))))))))
 ))
 (let (($x257 (forall ((input.ind-%var2373X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var2373X) (bvult input.ind-%var2373X input.dst.llvm-%n))))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2373X)))
 (= $x193 $x121))))
 ))
 (let (($x64 (and $x257 $x175)))
 (let (($x128 (= $x64 true)))
 (let (($x53 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var2364X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x111))))
 (let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2364X)))
 (let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2364X)))
 (=> $x239 (= ?x144 ?x138))))))))
 ))
 (let (($x233 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var2363X) (bvult input.ind-%var2363X input.dst.llvm-%n))))
 (let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2363X)))
 (= $x239 $x121))))
 ))
 (let (($x82 (and $x233 $x53)))
 (let (($x293 (= $x82 true)))
 (let (($x205 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x205 true)))
 (let ((?x262 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x262)))
 (let (($x241 (= ?x130 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x241 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x61 true)))
 (let (($x30 (and $x174 $x55)))
 (let (($x220 (and $x30 $x240)))
 (let (($x28 (and $x220 $x293)))
 (let (($x196 (and $x28 $x128)))
 (let (($x160 (and $x196 $x245)))
 (let (($x49 (and $x160 $x147)))
 (let (($x247 (and $x49 $x16)))
 (let (($x24 (and $x247 $x222)))
 (let (($x179 (and $x24 $x146)))
 (let (($x40 (and $x179 $x104)))
 (let (($x187 (and $x40 $x33)))
 (let (($x178 (and $x187 $x177)))
 (let (($x86 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x6 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x6 (_ bv1 32))))
 (let (($x19 (and $x114 $x178)))
 (let (($x284 (forall ((input.ind-%var2384X (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2384X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2384X)))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2384X)))
 (=> $x193 (= ?x150 ?x144))))))
 ))
 (let (($x12 (forall ((input.ind-%var2383X (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2383X)))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2383X)))
 (= $x193 $x239))))
 ))
 (let (($x269 (and $x12 $x284)))
 (let (($x56 (and $x269 $x19)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x253 (and $x113 $x56)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x201 (and $x13 $x253)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x110 $x201)))
 (let (($x137 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd ?x78 (_ bv3 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x95 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x84 (or false (or false (and (and true (or $x68 $x95)) (or $x204 $x137))))))
 (let (($x20 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x84)))
 (let (($x189 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x84)))
 (let (($x258 (and $x189 $x124)))
 (let (($x71 (=> $x258 $x48)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x122 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x276 (bvule ?x122 (_ bv4294967294 32))))
 (let (($x48 (= $x276 true)))
 (let ((?x35 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x273 (bvneg ?x35)))
 (let (($x197 (= ?x273 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x177 (= $x197 true)))
 (let (($x44 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x33 (= $x44 true)))
 (let (($x126 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x104 (= $x126 true)))
 (let (($x218 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x146 (= $x218 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x145 (bvsub ?x78 ?x132)))
 (let (($x181 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x145) (bvult ?x78 ?x145))))
 (let (($x136 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x127 (ite $x136 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x263 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x256 (bvmul (_ bv4 64) ?x263)))
 (let ((?x158 ((_ extract 63 32) ?x256)))
 (let (($x106 (= ?x158 ?x127)))
 (let (($x194 (and $x106 $x181)))
 (let (($x282 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x211 (and $x282 $x194)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x85 (=> $x14 $x211)))
 (let (($x222 (= $x85 true)))
 (let (($x16 (= $x14 true)))
 (let ((?x223 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x172 (= (_ bv0 32) ?x223)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x153)))
 (let ((?x98 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x98)))
 (let ((?x182 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x182)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x266 (and $x163 $x281)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (and $x31 $x266)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x278 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x275 (and $x278 $x96)))
 (let (($x50 (not $x275)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x118 $x210)))
 (let (($x29 (and (not $x63) $x50)))
 (let (($x295 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x254 $x295)))
 (let (($x288 (not $x103)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x117 $x279)))
 (let (($x216 (and (not $x270) $x288)))
 (let (($x226 (and (and (and (and (and (and $x216 $x29) $x164) $x235) $x190) $x176) $x10)))
 (let (($x94 (and $x226 $x172)))
 (let (($x230 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x237 (or false (or false (and (and true (or $x180 $x152)) (or $x251 $x230))))))
 (let (($x188 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x237)))
 (let (($x272 (and $x188 $x94)))
 (let (($x147 (= $x272 true)))
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x18 (= (_ bv0 2) ?x67)))
 (let (($x245 (= $x18 true)))
 (let (($x175 (forall ((input.ind-%var2374X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var2374X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x111))))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2374X)))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2374X)))
 (=> $x193 (= ?x150 ?x138))))))))
 ))
 (let (($x257 (forall ((input.ind-%var2373X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var2373X) (bvult input.ind-%var2373X input.dst.llvm-%n))))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2373X)))
 (= $x193 $x121))))
 ))
 (let (($x64 (and $x257 $x175)))
 (let (($x128 (= $x64 true)))
 (let (($x53 (forall ((input.ind-%var2364X (_ BitVec 32)) )(let ((?x79 (bvadd (bvmul input.ind-%var2364X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x111))))
 (let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2364X)))
 (let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2364X)))
 (=> $x239 (= ?x144 ?x138))))))))
 ))
 (let (($x233 (forall ((input.ind-%var2363X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var2363X) (bvult input.ind-%var2363X input.dst.llvm-%n))))
 (let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2363X)))
 (= $x239 $x121))))
 ))
 (let (($x82 (and $x233 $x53)))
 (let (($x293 (= $x82 true)))
 (let (($x205 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x240 (= $x205 true)))
 (let ((?x262 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x130 (bvneg ?x262)))
 (let (($x241 (= ?x130 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x55 (= $x241 true)))
 (let (($x61 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x61 true)))
 (let (($x30 (and $x174 $x55)))
 (let (($x220 (and $x30 $x240)))
 (let (($x28 (and $x220 $x293)))
 (let (($x196 (and $x28 $x128)))
 (let (($x160 (and $x196 $x245)))
 (let (($x49 (and $x160 $x147)))
 (let (($x247 (and $x49 $x16)))
 (let (($x24 (and $x247 $x222)))
 (let (($x179 (and $x24 $x146)))
 (let (($x40 (and $x179 $x104)))
 (let (($x187 (and $x40 $x33)))
 (let (($x178 (and $x187 $x177)))
 (let (($x86 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x6 (ite $x86 (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x6 (_ bv1 32))))
 (let (($x19 (and $x114 $x178)))
 (let (($x284 (forall ((input.ind-%var2384X (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2384X)))
 (let ((?x150 (input.spec-%var-x-1.1.1 input.ind-%var2384X)))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2384X)))
 (=> $x193 (= ?x150 ?x144))))))
 ))
 (let (($x12 (forall ((input.ind-%var2383X (_ BitVec 32)) )(let (($x239 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2383X)))
 (let (($x193 (input.spec-%var-x-1.0.1 input.ind-%var2383X)))
 (= $x193 $x239))))
 ))
 (let (($x269 (and $x12 $x284)))
 (let (($x56 (and $x269 $x19)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x253 (and $x113 $x56)))
 (let (($x13 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x201 (and $x13 $x253)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x124 (and $x110 $x201)))
 (let (($x137 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x100 (bvadd ?x78 (_ bv3 32))))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x95 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x100)))
 (let (($x84 (or false (or false (and (and true (or $x68 $x95)) (or $x204 $x137))))))
 (let (($x20 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x84)))
 (let (($x189 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x84)))
 (let (($x258 (and $x189 $x124)))
 (let (($x71 (=> $x258 $x48)))
 (not $x71))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (bvsge ?x42 (_ bv0 32))))
 (let (($x15 (= $x271 true)))
 (let ((?x242 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x242)))
 (let (($x215 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x215 true)))
 (let (($x89 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (= $x89 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x27 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x294 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x232 (bvsub ?x78 ?x132)))
 (let (($x246 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x232) (bvult ?x78 ?x232))))
 (let (($x259 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x75 (ite $x259 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x51 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvmul (_ bv4 64) ?x51)))
 (let ((?x5 ((_ extract 63 32) ?x99)))
 (let (($x234 (= ?x5 ?x75)))
 (let (($x119 (and $x234 $x246)))
 (let (($x43 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x108 (and $x43 $x119)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (=> $x14 $x108)))
 (let (($x70 (= $x125 true)))
 (let (($x9 (= $x14 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x184)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x65)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x258 $x276)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x124 $x48)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x187 $x35)))
 (let (($x197 (not $x273)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x40 $x44)))
 (let (($x178 (and (not $x33) $x197)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x24 $x218)))
 (let (($x179 (not $x146)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x200 $x282)))
 (let (($x104 (and (not $x222) $x179)))
 (let (($x283 (and (and (and (and (and (and $x104 $x178) $x56) $x201) $x71) $x72) $x183)))
 (let (($x227 (and $x283 $x202)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x194 (or false (or false (and (and true (or $x158 $x136)) (or $x93 $x145))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x194)))
 (let (($x219 (and $x85 $x227)))
 (let (($x231 (= $x219 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x49 (= (_ bv0 2) ?x147)))
 (let (($x16 (= $x49 true)))
 (let (($x226 (forall ((input.ind-%var2409X (_ BitVec 32)) )(let ((?x251 (bvadd (bvmul input.ind-%var2409X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x45))))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var2409X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2409X)))
 (=> $x12 (= ?x91 ?x224))))))))
 ))
 (let (($x29 (forall ((input.ind-%var2408X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2408X) (bvult input.ind-%var2408X input.dst.llvm-%n))))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2408X)))
 (= $x12 $x293))))
 ))
 (let (($x223 (and $x29 $x226)))
 (let (($x172 (= $x223 true)))
 (let (($x103 (forall ((input.ind-%var2399X (_ BitVec 32)) )(let ((?x251 (bvadd (bvmul input.ind-%var2399X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x45))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2399X)))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2399X)))
 (=> $x74 (= ?x286 ?x224))))))))
 ))
 (let (($x69 (forall ((input.ind-%var2398X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2398X) (bvult input.ind-%var2398X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2398X)))
 (= $x74 $x293))))
 ))
 (let (($x288 (and $x69 $x103)))
 (let (($x216 (= $x288 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x221 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x192)))
 (let (($x228 (= ?x79 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x228 true)))
 (let (($x121 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x66 (= $x121 true)))
 (let (($x92 (and $x66 $x265)))
 (let (($x7 (and $x92 $x32)))
 (let (($x118 (and $x7 $x216)))
 (let (($x94 (and $x118 $x172)))
 (let (($x247 (and $x94 $x16)))
 (let (($x236 (and $x247 $x231)))
 (let (($x62 (and $x236 $x9)))
 (let (($x123 (and $x62 $x70)))
 (let (($x77 (and $x123 $x244)))
 (let (($x11 (and $x77 $x143)))
 (let (($x46 (and $x11 $x57)))
 (let (($x41 (and $x46 $x149)))
 (let (($x240 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x220 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x220 (_ bv1 32))))
 (let (($x173 (and $x107 $x41)))
 (let (($x55 (forall ((input.ind-%var2419X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2419X)))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var2419X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2419X)))
 (=> $x12 (= ?x91 ?x286))))))
 ))
 (let (($x248 (forall ((input.ind-%var2418X (_ BitVec 32)) )(let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2418X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2418X)))
 (= $x12 $x74))))
 ))
 (let (($x30 (and $x248 $x55)))
 (let (($x217 (and $x30 $x173)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x208 $x217)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x289 (and $x58 $x37)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x203 $x289)))
 (let (($x195 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x78 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x23 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x189 (or false (or false (and (and true (or $x139 $x23)) (or $x167 $x195))))))
 (let (($x110 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x189)))
 (let (($x90 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x189)))
 (let (($x252 (and $x90 $x154)))
 (let (($x133 (=> $x252 $x15)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x271 (bvsge ?x42 (_ bv0 32))))
 (let (($x15 (= $x271 true)))
 (let ((?x242 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x162 (bvneg ?x242)))
 (let (($x215 (= ?x162 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x149 (= $x215 true)))
 (let (($x89 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x57 (= $x89 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x143 (= $x27 true)))
 (let (($x294 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x244 (= $x294 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x232 (bvsub ?x78 ?x132)))
 (let (($x246 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x232) (bvult ?x78 ?x232))))
 (let (($x259 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x75 (ite $x259 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x51 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x99 (bvmul (_ bv4 64) ?x51)))
 (let ((?x5 ((_ extract 63 32) ?x99)))
 (let (($x234 (= ?x5 ?x75)))
 (let (($x119 (and $x234 $x246)))
 (let (($x43 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x108 (and $x43 $x119)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x125 (=> $x14 $x108)))
 (let (($x70 (= $x125 true)))
 (let (($x9 (= $x14 true)))
 (let ((?x184 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x184)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x65)))
 (let ((?x291 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x291)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x276 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x122)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x48 (and $x258 $x276)))
 (let (($x124 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (and $x124 $x48)))
 (let (($x201 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x187 $x35)))
 (let (($x197 (not $x273)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x40 $x44)))
 (let (($x178 (and (not $x33) $x197)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x24 $x218)))
 (let (($x179 (not $x146)))
 (let (($x282 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x200 $x282)))
 (let (($x104 (and (not $x222) $x179)))
 (let (($x283 (and (and (and (and (and (and $x104 $x178) $x56) $x201) $x71) $x72) $x183)))
 (let (($x227 (and $x283 $x202)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x136 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x194 (or false (or false (and (and true (or $x158 $x136)) (or $x93 $x145))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x194)))
 (let (($x219 (and $x85 $x227)))
 (let (($x231 (= $x219 true)))
 (let ((?x147 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x49 (= (_ bv0 2) ?x147)))
 (let (($x16 (= $x49 true)))
 (let (($x226 (forall ((input.ind-%var2409X (_ BitVec 32)) )(let ((?x251 (bvadd (bvmul input.ind-%var2409X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x45))))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var2409X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2409X)))
 (=> $x12 (= ?x91 ?x224))))))))
 ))
 (let (($x29 (forall ((input.ind-%var2408X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2408X) (bvult input.ind-%var2408X input.dst.llvm-%n))))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2408X)))
 (= $x12 $x293))))
 ))
 (let (($x223 (and $x29 $x226)))
 (let (($x172 (= $x223 true)))
 (let (($x103 (forall ((input.ind-%var2399X (_ BitVec 32)) )(let ((?x251 (bvadd (bvmul input.ind-%var2399X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv1 32))) (select input.dst.llvm-mem ?x251))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x251 (_ bv2 32))) ?x45))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2399X)))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2399X)))
 (=> $x74 (= ?x286 ?x224))))))))
 ))
 (let (($x69 (forall ((input.ind-%var2398X (_ BitVec 32)) )(let (($x293 (and (bvule (_ bv0 32) input.ind-%var2398X) (bvult input.ind-%var2398X input.dst.llvm-%n))))
 (let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2398X)))
 (= $x74 $x293))))
 ))
 (let (($x288 (and $x69 $x103)))
 (let (($x216 (= $x288 true)))
 (let (($x221 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x32 (= $x221 true)))
 (let ((?x192 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x79 (bvneg ?x192)))
 (let (($x228 (= ?x79 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x228 true)))
 (let (($x121 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x66 (= $x121 true)))
 (let (($x92 (and $x66 $x265)))
 (let (($x7 (and $x92 $x32)))
 (let (($x118 (and $x7 $x216)))
 (let (($x94 (and $x118 $x172)))
 (let (($x247 (and $x94 $x16)))
 (let (($x236 (and $x247 $x231)))
 (let (($x62 (and $x236 $x9)))
 (let (($x123 (and $x62 $x70)))
 (let (($x77 (and $x123 $x244)))
 (let (($x11 (and $x77 $x143)))
 (let (($x46 (and $x11 $x57)))
 (let (($x41 (and $x46 $x149)))
 (let (($x240 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x220 (ite $x240 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x220 (_ bv1 32))))
 (let (($x173 (and $x107 $x41)))
 (let (($x55 (forall ((input.ind-%var2419X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2419X)))
 (let ((?x91 (input.spec-%var-x-1.1.1 input.ind-%var2419X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2419X)))
 (=> $x12 (= ?x91 ?x286))))))
 ))
 (let (($x248 (forall ((input.ind-%var2418X (_ BitVec 32)) )(let (($x74 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2418X)))
 (let (($x12 (input.spec-%var-x-1.0.1 input.ind-%var2418X)))
 (= $x12 $x74))))
 ))
 (let (($x30 (and $x248 $x55)))
 (let (($x217 (and $x30 $x173)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x37 (and $x208 $x217)))
 (let (($x58 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x289 (and $x58 $x37)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x154 (and $x203 $x289)))
 (let (($x195 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x95 (bvadd ?x78 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x23 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x95)))
 (let (($x189 (or false (or false (and (and true (or $x139 $x23)) (or $x167 $x195))))))
 (let (($x110 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x189)))
 (let (($x90 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x189)))
 (let (($x252 (and $x90 $x154)))
 (let (($x133 (=> $x252 $x15)))
 (not $x133))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x262 (bvule ?x88 input.dst.llvm-%n)))
 (let (($x6 (= $x262 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x206)))
 (let (($x235 (= ?x31 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x235 true)))
 (let (($x267 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x267 true)))
 (let (($x285 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (= $x285 true)))
 (let (($x164 (forall ((input.ind-%var2444X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2444X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x271))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var2444X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2444X)))
 (=> $x248 (= ?x165 ?x109))))))))
 ))
 (let (($x186 (forall ((input.ind-%var2443X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2443X) (bvult input.ind-%var2443X input.dst.llvm-%n))))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2443X)))
 (= $x248 $x246))))
 ))
 (let (($x210 (and $x186 $x164)))
 (let (($x229 (= $x210 true)))
 (let (($x61 (forall ((input.ind-%var2434X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2434X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x271))))
 (let ((?x233 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2434X)))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2434X)))
 (=> $x274 (= ?x233 ?x109))))))))
 ))
 (let (($x108 (forall ((input.ind-%var2433X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2433X) (bvult input.ind-%var2433X input.dst.llvm-%n))))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2433X)))
 (= $x274 $x246))))
 ))
 (let (($x86 (and $x108 $x61)))
 (let (($x114 (= $x86 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x105 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x202 (bvsub ?x78 ?x132)))
 (let (($x236 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x202) (bvult ?x78 ?x202))))
 (let (($x183 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x283 (ite $x183 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvmul (_ bv4 64) ?x72)))
 (let ((?x65 ((_ extract 63 32) ?x134)))
 (let (($x184 (= ?x65 ?x283)))
 (let (($x9 (and $x184 $x236)))
 (let (($x268 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x62 (and $x268 $x9)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x14 $x62)))
 (let (($x17 (= $x213 true)))
 (let (($x122 (= $x14 true)))
 (let ((?x273 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x273)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x187)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x146 $x104)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x218 $x40)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x129 $x199)))
 (let (($x194 (not $x181)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x106 $x93)))
 (let (($x200 (and (not $x145) $x194)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x263 $x211)))
 (let (($x158 (not $x256)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and $x103 $x288)))
 (let (($x127 (and (not $x277) $x158)))
 (let (($x253 (and (and (and (and (and (and $x127 $x200) $x222) $x24) $x44) $x177) $x35)))
 (let (($x201 (and $x253 $x197)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x49 (or false (or false (and (and true (or $x29 $x153)) (or $x223 $x172))))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x49)))
 (let (($x52 (and $x247 $x201)))
 (let (($x124 (= $x52 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x117 (= (_ bv0 2) ?x45)))
 (let (($x224 (= $x117 true)))
 (let (($x188 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x188 true)))
 (let ((?x255 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x255)))
 (let (($x270 (= ?x251 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x270 true)))
 (let (($x293 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x293 true)))
 (let (($x237 (and $x28 $x245)))
 (let (($x292 (and $x237 $x47)))
 (let (($x254 (and $x292 $x224)))
 (let (($x258 (and $x254 $x124)))
 (let (($x276 (and $x258 $x122)))
 (let (($x43 (and $x276 $x17)))
 (let (($x99 (and $x43 $x51)))
 (let (($x193 (and $x99 $x114)))
 (let (($x278 (and $x193 $x229)))
 (let (($x190 (and $x278 $x169)))
 (let (($x281 (and $x190 $x182)))
 (let (($x266 (and $x281 $x163)))
 (let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x7 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x7 (_ bv1 32))))
 (let (($x98 (and $x82 $x266)))
 (let (($x265 (forall ((input.ind-%var2454X (_ BitVec 32)) )(let ((?x233 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2454X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var2454X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2454X)))
 (=> $x248 (= ?x165 ?x233))))))
 ))
 (let (($x205 (forall ((input.ind-%var2453X (_ BitVec 32)) )(let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2453X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2453X)))
 (= $x248 $x274))))
 ))
 (let (($x92 (and $x205 $x265)))
 (let (($x63 (and $x92 $x98)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x96 (and $x102 $x63)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x113 $x96)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x140 $x275)))
 (let (($x84 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd ?x78 (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x204 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x90 (or false (or false (and (and true (or $x157 $x204)) (or $x141 $x84))))))
 (let (($x203 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x238 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x168 (and $x238 $x176)))
 (let (($x130 (=> $x168 $x6)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x88 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x262 (bvule ?x88 input.dst.llvm-%n)))
 (let (($x6 (= $x262 true)))
 (let ((?x206 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x31 (bvneg ?x206)))
 (let (($x235 (= ?x31 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x163 (= $x235 true)))
 (let (($x267 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x182 (= $x267 true)))
 (let (($x285 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x169 (= $x285 true)))
 (let (($x164 (forall ((input.ind-%var2444X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2444X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x271))))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var2444X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2444X)))
 (=> $x248 (= ?x165 ?x109))))))))
 ))
 (let (($x186 (forall ((input.ind-%var2443X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2443X) (bvult input.ind-%var2443X input.dst.llvm-%n))))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2443X)))
 (= $x248 $x246))))
 ))
 (let (($x210 (and $x186 $x164)))
 (let (($x229 (= $x210 true)))
 (let (($x61 (forall ((input.ind-%var2434X (_ BitVec 32)) )(let ((?x289 (bvadd (bvmul input.ind-%var2434X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem ?x289))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x289 (_ bv2 32))) ?x271))))
 (let ((?x233 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2434X)))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2434X)))
 (=> $x274 (= ?x233 ?x109))))))))
 ))
 (let (($x108 (forall ((input.ind-%var2433X (_ BitVec 32)) )(let (($x246 (and (bvule (_ bv0 32) input.ind-%var2433X) (bvult input.ind-%var2433X input.dst.llvm-%n))))
 (let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2433X)))
 (= $x274 $x246))))
 ))
 (let (($x86 (and $x108 $x61)))
 (let (($x114 (= $x86 true)))
 (let (($x105 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x51 (= $x105 true)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let ((?x202 (bvsub ?x78 ?x132)))
 (let (($x236 (ite (bvsge ?x132 (_ bv0 32)) (bvuge ?x78 ?x202) (bvult ?x78 ?x202))))
 (let (($x183 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x283 (ite $x183 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x72 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x134 (bvmul (_ bv4 64) ?x72)))
 (let ((?x65 ((_ extract 63 32) ?x134)))
 (let (($x184 (= ?x65 ?x283)))
 (let (($x9 (and $x184 $x236)))
 (let (($x268 (= (bvand ?x78 (_ bv4294967292 32)) ?x78)))
 (let (($x62 (and $x268 $x9)))
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x213 (=> $x14 $x62)))
 (let (($x17 (= $x213 true)))
 (let (($x122 (= $x14 true)))
 (let ((?x273 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x197 (= (_ bv0 32) ?x273)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x35 (= (_ bv0 32) ?x187)))
 (let ((?x33 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x33)))
 (let ((?x179 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x179)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x146 $x104)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (and $x218 $x40)))
 (let (($x24 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x129 $x199)))
 (let (($x194 (not $x181)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (and $x106 $x93)))
 (let (($x200 (and (not $x145) $x194)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x263 $x211)))
 (let (($x158 (not $x256)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x277 (and $x103 $x288)))
 (let (($x127 (and (not $x277) $x158)))
 (let (($x253 (and (and (and (and (and (and $x127 $x200) $x222) $x24) $x44) $x177) $x35)))
 (let (($x201 (and $x253 $x197)))
 (let (($x172 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x49 (or false (or false (and (and true (or $x29 $x153)) (or $x223 $x172))))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x49)))
 (let (($x52 (and $x247 $x201)))
 (let (($x124 (= $x52 true)))
 (let ((?x45 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x117 (= (_ bv0 2) ?x45)))
 (let (($x224 (= $x117 true)))
 (let (($x188 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x47 (= $x188 true)))
 (let ((?x255 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x251 (bvneg ?x255)))
 (let (($x270 (= ?x251 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x245 (= $x270 true)))
 (let (($x293 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x28 (= $x293 true)))
 (let (($x237 (and $x28 $x245)))
 (let (($x292 (and $x237 $x47)))
 (let (($x254 (and $x292 $x224)))
 (let (($x258 (and $x254 $x124)))
 (let (($x276 (and $x258 $x122)))
 (let (($x43 (and $x276 $x17)))
 (let (($x99 (and $x43 $x51)))
 (let (($x193 (and $x99 $x114)))
 (let (($x278 (and $x193 $x229)))
 (let (($x190 (and $x278 $x169)))
 (let (($x281 (and $x190 $x182)))
 (let (($x266 (and $x281 $x163)))
 (let (($x32 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x7 (ite $x32 (_ bv1 32) (_ bv0 32))))
 (let (($x82 (bvuge ?x7 (_ bv1 32))))
 (let (($x98 (and $x82 $x266)))
 (let (($x265 (forall ((input.ind-%var2454X (_ BitVec 32)) )(let ((?x233 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2454X)))
 (let ((?x165 (input.spec-%var-x-1.1.1 input.ind-%var2454X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2454X)))
 (=> $x248 (= ?x165 ?x233))))))
 ))
 (let (($x205 (forall ((input.ind-%var2453X (_ BitVec 32)) )(let (($x274 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2453X)))
 (let (($x248 (input.spec-%var-x-1.0.1 input.ind-%var2453X)))
 (= $x248 $x274))))
 ))
 (let (($x92 (and $x205 $x265)))
 (let (($x63 (and $x92 $x98)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x96 (and $x102 $x63)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x275 (and $x113 $x96)))
 (let (($x140 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x176 (and $x140 $x275)))
 (let (($x84 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd ?x78 (_ bv3 32))))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x204 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x90 (or false (or false (and (and true (or $x157 $x204)) (or $x141 $x84))))))
 (let (($x203 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x90)))
 (let (($x238 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x90)))
 (let (($x168 (and $x238 $x176)))
 (let (($x130 (=> $x168 $x6)))
 (not $x130))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (not $x14)))
 (let (($x232 (= $x73 false)))
 (let (($x173 (= $x232 true)))
 (let ((?x149 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x149)))
 (let (($x242 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x242 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x244 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (= $x5 true)))
 (let (($x74 (forall ((input.ind-%var2479X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var2479X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x186))))
 (let ((?x53 (input.spec-%var-x-1.1.1 input.ind-%var2479X)))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2479X)))
 (=> $x205 (= ?x53 ?x278))))))))
 ))
 (let (($x96 (forall ((input.ind-%var2478X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2478X) (bvult input.ind-%var2478X input.dst.llvm-%n))))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2478X)))
 (= $x205 $x99))))
 ))
 (let (($x55 (and $x96 $x74)))
 (let (($x125 (= $x55 true)))
 (let (($x190 (forall ((input.ind-%var2469X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var2469X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x186))))
 (let ((?x69 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2469X)))
 (let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2469X)))
 (=> $x243 (= ?x69 ?x278))))))))
 ))
 (let (($x36 (forall ((input.ind-%var2468X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2468X) (bvult input.ind-%var2468X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2468X)))
 (= $x243 $x99))))
 ))
 (let (($x267 (and $x36 $x190)))
 (let (($x182 (= $x267 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x202 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x276)))
 (let ((?x258 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x258)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x273 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x253)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (and $x35 $x273)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x187 $x197)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x218 $x146)))
 (let (($x104 (not $x179)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x126 $x24)))
 (let (($x44 (and (not $x19) $x104)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x194 $x200)))
 (let (($x282 (not $x178)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x49 $x247)))
 (let (($x112 (and (not $x181) $x282)))
 (let (($x65 (and (and (and (and (and (and $x112 $x44) $x33) $x151) $x201) $x124) $x122)))
 (let (($x183 (and $x65 $x48)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x263 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x85 (or false (or false (and (and true (or $x136 $x263)) (or $x158 $x127))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x283 (and $x199 $x183)))
 (let (($x184 (= $x283 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x172 (= (_ bv0 2) ?x223)))
 (let (($x94 (= $x172 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x29 true)))
 (let ((?x224 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x224)))
 (let (($x118 (= ?x254 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x118 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x292 true)))
 (let (($x50 (and $x230 $x16)))
 (let (($x10 (and $x50 $x153)))
 (let (($x272 (and $x10 $x94)))
 (let (($x227 (and $x272 $x184)))
 (let (($x231 (and $x227 $x219)))
 (let (($x281 (and $x231 $x182)))
 (let (($x123 (and $x281 $x125)))
 (let (($x234 (and $x123 $x75)))
 (let (($x215 (and $x234 $x77)))
 (let (($x11 (and $x215 $x143)))
 (let (($x245 (forall ((input.ind-%var2489X (_ BitVec 32)) )(let ((?x69 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2489X)))
 (let ((?x53 (input.spec-%var-x-1.1.1 input.ind-%var2489X)))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2489X)))
 (=> $x205 (= ?x53 ?x69))))))
 ))
 (let (($x221 (forall ((input.ind-%var2488X (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2488X)))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2488X)))
 (= $x205 $x243))))
 ))
 (let (($x237 (and $x221 $x245)))
 (let (($x27 (and $x237 $x11)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x269 $x27)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x208 $x89)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x13 $x162)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let (($x189 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x78 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x167 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x238 (or false (or false (and (and true (or $x76 $x167)) (or $x20 $x189))))))
 (let (($x140 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x238)))
 (let (($x100 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x238)))
 (let (($x259 (and $x100 $x41)))
 (let (($x70 (=> $x259 $x173)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x14 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x73 (not $x14)))
 (let (($x232 (= $x73 false)))
 (let (($x173 (= $x232 true)))
 (let ((?x149 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x46 (bvneg ?x149)))
 (let (($x242 (= ?x46 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x143 (= $x242 true)))
 (let (($x244 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x77 (= $x244 true)))
 (let (($x5 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x75 (= $x5 true)))
 (let (($x74 (forall ((input.ind-%var2479X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var2479X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x186))))
 (let ((?x53 (input.spec-%var-x-1.1.1 input.ind-%var2479X)))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2479X)))
 (=> $x205 (= ?x53 ?x278))))))))
 ))
 (let (($x96 (forall ((input.ind-%var2478X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2478X) (bvult input.ind-%var2478X input.dst.llvm-%n))))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2478X)))
 (= $x205 $x99))))
 ))
 (let (($x55 (and $x96 $x74)))
 (let (($x125 (= $x55 true)))
 (let (($x190 (forall ((input.ind-%var2469X (_ BitVec 32)) )(let ((?x86 (bvadd (bvmul input.ind-%var2469X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x186))))
 (let ((?x69 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2469X)))
 (let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2469X)))
 (=> $x243 (= ?x69 ?x278))))))))
 ))
 (let (($x36 (forall ((input.ind-%var2468X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2468X) (bvult input.ind-%var2468X input.dst.llvm-%n))))
 (let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2468X)))
 (= $x243 $x99))))
 ))
 (let (($x267 (and $x36 $x190)))
 (let (($x182 (= $x267 true)))
 (let (($x202 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x219 (= $x202 true)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x276)))
 (let ((?x258 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x258)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x273 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x253)))
 (let (($x35 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x197 (and $x35 $x273)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x201 (and $x187 $x197)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x218 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x179 (and $x218 $x146)))
 (let (($x104 (not $x179)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x126 $x24)))
 (let (($x44 (and (not $x19) $x104)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x194 $x200)))
 (let (($x282 (not $x178)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x181 (and $x49 $x247)))
 (let (($x112 (and (not $x181) $x282)))
 (let (($x65 (and (and (and (and (and (and $x112 $x44) $x33) $x151) $x201) $x124) $x122)))
 (let (($x183 (and $x65 $x48)))
 (let (($x127 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x277 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x158 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x263 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x136 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x277)))
 (let (($x85 (or false (or false (and (and true (or $x136 $x263)) (or $x158 $x127))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x85)))
 (let (($x283 (and $x199 $x183)))
 (let (($x184 (= $x283 true)))
 (let ((?x223 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x172 (= (_ bv0 2) ?x223)))
 (let (($x94 (= $x172 true)))
 (let (($x29 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x29 true)))
 (let ((?x224 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x254 (bvneg ?x224)))
 (let (($x118 (= ?x254 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x16 (= $x118 true)))
 (let (($x292 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x230 (= $x292 true)))
 (let (($x50 (and $x230 $x16)))
 (let (($x10 (and $x50 $x153)))
 (let (($x272 (and $x10 $x94)))
 (let (($x227 (and $x272 $x184)))
 (let (($x231 (and $x227 $x219)))
 (let (($x281 (and $x231 $x182)))
 (let (($x123 (and $x281 $x125)))
 (let (($x234 (and $x123 $x75)))
 (let (($x215 (and $x234 $x77)))
 (let (($x11 (and $x215 $x143)))
 (let (($x245 (forall ((input.ind-%var2489X (_ BitVec 32)) )(let ((?x69 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2489X)))
 (let ((?x53 (input.spec-%var-x-1.1.1 input.ind-%var2489X)))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2489X)))
 (=> $x205 (= ?x53 ?x69))))))
 ))
 (let (($x221 (forall ((input.ind-%var2488X (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2488X)))
 (let (($x205 (input.spec-%var-x-1.0.1 input.ind-%var2488X)))
 (= $x205 $x243))))
 ))
 (let (($x237 (and $x221 $x245)))
 (let (($x27 (and $x237 $x11)))
 (let (($x269 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x89 (and $x269 $x27)))
 (let (($x208 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x162 (and $x208 $x89)))
 (let (($x13 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x41 (and $x13 $x162)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let (($x189 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x204 (bvadd ?x78 (_ bv3 32))))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x167 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x204)))
 (let (($x238 (or false (or false (and (and true (or $x76 $x167)) (or $x20 $x189))))))
 (let (($x140 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x238)))
 (let (($x100 (=> (and $x14 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x238)))
 (let (($x259 (and $x100 $x41)))
 (let (($x70 (=> $x259 $x173)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x3f186986)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x3f186986)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xaabe9fa8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x830bd28c)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x3f186986)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x830bd28f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xaabe9fab)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x830bd28c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xaabe9fa8)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x3f186986 x!0)
         (ite (bvule #x3f186987 x!0) #x3f186987 #x3f186986)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L3%6%bbentry.1.1 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!8))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x267f6492)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x267f6492)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32)
    #x267f6492)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!9 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x267f6492 x!0)
         (ite (bvule #x267f6493 x!0) #x267f6493 #x267f6492)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!10 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!10 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1!11 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!8 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L3%6%bbentry.0.1!11 (k!9 x!0)))
  (define-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!8 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!8 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!8 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-0.L3%6%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x255 (ite $x12 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x255 (_ bv0 32))))
 (let (($x80 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (or $x80 $x7)))
 (let (($x138 (= $x251 true)))
 (let ((?x290 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x290)))
 (let (($x26 (= ?x6 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x26 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x295 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x262 true)))
 (let (($x206 (forall ((input.ind-%var2542X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var2542X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x173))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var2542X)))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2542X)))
 (=> $x221 (= ?x45 ?x175))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2541X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var2541X) (bvult input.ind-%var2541X input.dst.llvm-%n))))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2541X)))
 (= $x221 $x281))))
 ))
 (let (($x235 (and $x213 $x206)))
 (let (($x163 (= $x235 true)))
 (let (($x32 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var2532X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x173))))
 (let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2532X)))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2532X)))
 (=> $x279 (= ?x254 ?x175))))))))
 ))
 (let (($x96 (forall ((input.ind-%var2531X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var2531X) (bvult input.ind-%var2531X input.dst.llvm-%n))))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2531X)))
 (= $x279 $x281))))
 ))
 (let (($x82 (and $x96 $x32)))
 (let (($x248 (= $x82 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x193 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x264 (= $x133 true)))
 (let (($x86 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x210 (= $x86 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x183)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x276)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x72 $x124)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x201 $x134)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x33 $x268)))
 (let (($x151 (not $x177)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x44 $x71)))
 (let (($x187 (and (not $x56) $x151)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x19 $x40)))
 (let (($x146 (not $x218)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x158 $x127)))
 (let (($x104 (and (not $x24) $x146)))
 (let (($x51 (and (and (and (and (and (and $x104 $x187) $x253) $x197) $x258) $x65) $x48)))
 (let (($x105 (and $x51 $x283)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x145)))
 (let (($x282 (or false (or false (and (and true (or $x85 $x199)) (or $x181 $x222))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x282)))
 (let (($x99 (and $x126 $x105)))
 (let (($x34 (= $x99 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x136 (= (_ bv0 2) ?x277)))
 (let (($x263 (= $x136 true)))
 (let ((?x172 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x172)))
 (let (($x103 (= ?x94 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x103 true)))
 (let (($x211 (and $x288 $x263)))
 (let (($x36 (and $x211 $x34)))
 (let (($x229 (and $x36 $x210)))
 (let (($x225 (and $x229 $x264)))
 (let (($x114 (and $x225 $x25)))
 (let (($x233 (and $x114 $x248)))
 (let (($x88 (and $x233 $x163)))
 (let (($x121 (and $x88 $x91)))
 (let (($x130 (and $x121 $x241)))
 (let (($x240 (and $x130 $x214)))
 (let (($x153 (forall ((input.ind-%var2552X (_ BitVec 32)) )(let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2552X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var2552X)))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2552X)))
 (=> $x221 (= ?x45 ?x254))))))
 ))
 (let (($x188 (forall ((input.ind-%var2551X (_ BitVec 32)) )(let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2551X)))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2551X)))
 (= $x221 $x279))))
 ))
 (let (($x10 (and $x188 $x153)))
 (let (($x31 (and $x10 $x240)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x266 (and $x30 $x31)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x98 (and $x102 $x266)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x58 $x98)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let (($x90 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x78 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x141 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x100 (or false (or false (and (and true (or $x137 $x141)) (or $x110 $x90))))))
 (let (($x13 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x100)))
 (let (($x95 (=> (and $x80 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x100)))
 (let (($x176 (and $x95 $x107)))
 (let (($x128 (=> $x176 $x138)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x12 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x255 (ite $x12 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (= ?x255 (_ bv0 32))))
 (let (($x80 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x251 (or $x80 $x7)))
 (let (($x138 (= $x251 true)))
 (let ((?x290 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x6 (bvneg ?x290)))
 (let (($x26 (= ?x6 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x214 (= $x26 true)))
 (let (($x295 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x241 (= $x295 true)))
 (let (($x262 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (= $x262 true)))
 (let (($x206 (forall ((input.ind-%var2542X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var2542X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x173))))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var2542X)))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2542X)))
 (=> $x221 (= ?x45 ?x175))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2541X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var2541X) (bvult input.ind-%var2541X input.dst.llvm-%n))))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2541X)))
 (= $x221 $x281))))
 ))
 (let (($x235 (and $x213 $x206)))
 (let (($x163 (= $x235 true)))
 (let (($x32 (forall ((input.ind-%var2532X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var2532X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x173))))
 (let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2532X)))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2532X)))
 (=> $x279 (= ?x254 ?x175))))))))
 ))
 (let (($x96 (forall ((input.ind-%var2531X (_ BitVec 32)) )(let (($x281 (and (bvule (_ bv0 32) input.ind-%var2531X) (bvult input.ind-%var2531X input.dst.llvm-%n))))
 (let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2531X)))
 (= $x279 $x281))))
 ))
 (let (($x82 (and $x96 $x32)))
 (let (($x248 (= $x82 true)))
 (let (($x193 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x25 (= $x193 true)))
 (let (($x133 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x264 (= $x133 true)))
 (let (($x86 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x210 (= $x86 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x283 (= (_ bv0 32) ?x183)))
 (let ((?x276 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x48 (= (_ bv0 32) ?x276)))
 (let ((?x122 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x65 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x122)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x52)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (and $x72 $x124)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x258 (and $x201 $x134)))
 (let (($x197 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x33 $x268)))
 (let (($x151 (not $x177)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x44 $x71)))
 (let (($x187 (and (not $x56) $x151)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x19 $x40)))
 (let (($x146 (not $x218)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x158 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x158 $x127)))
 (let (($x104 (and (not $x24) $x146)))
 (let (($x51 (and (and (and (and (and (and $x104 $x187) $x253) $x197) $x258) $x65) $x48)))
 (let (($x105 (and $x51 $x283)))
 (let (($x222 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x199 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x145)))
 (let (($x282 (or false (or false (and (and true (or $x85 $x199)) (or $x181 $x222))))))
 (let (($x126 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x282)))
 (let (($x99 (and $x126 $x105)))
 (let (($x34 (= $x99 true)))
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x136 (= (_ bv0 2) ?x277)))
 (let (($x263 (= $x136 true)))
 (let ((?x172 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x94 (bvneg ?x172)))
 (let (($x103 (= ?x94 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x288 (= $x103 true)))
 (let (($x211 (and $x288 $x263)))
 (let (($x36 (and $x211 $x34)))
 (let (($x229 (and $x36 $x210)))
 (let (($x225 (and $x229 $x264)))
 (let (($x114 (and $x225 $x25)))
 (let (($x233 (and $x114 $x248)))
 (let (($x88 (and $x233 $x163)))
 (let (($x121 (and $x88 $x91)))
 (let (($x130 (and $x121 $x241)))
 (let (($x240 (and $x130 $x214)))
 (let (($x153 (forall ((input.ind-%var2552X (_ BitVec 32)) )(let ((?x254 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2552X)))
 (let ((?x45 (input.spec-%var-x-1.1.1 input.ind-%var2552X)))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2552X)))
 (=> $x221 (= ?x45 ?x254))))))
 ))
 (let (($x188 (forall ((input.ind-%var2551X (_ BitVec 32)) )(let (($x279 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2551X)))
 (let (($x221 (input.spec-%var-x-1.0.1 input.ind-%var2551X)))
 (= $x221 $x279))))
 ))
 (let (($x10 (and $x188 $x153)))
 (let (($x31 (and $x10 $x240)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x266 (and $x30 $x31)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x98 (and $x102 $x266)))
 (let (($x58 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x107 (and $x58 $x98)))
 (let ((?x132 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x78 (bvadd input.dst.llvm-%x ?x132)))
 (let (($x90 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x78 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x141 (bvugt ?x78 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x137 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x100 (or false (or false (and (and true (or $x137 $x141)) (or $x110 $x90))))))
 (let (($x13 (=> (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32))) $x100)))
 (let (($x95 (=> (and $x80 (bvule ?x78 (bvsub (bvadd ?x78 (_ bv4 32)) (_ bv1 32)))) $x100)))
 (let (($x176 (and $x95 $x107)))
 (let (($x128 (=> $x176 $x138)))
 (not $x128))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x17 true)))
 (let ((?x27 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x27)))
 (let (($x89 (= ?x37 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x89 true)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x242)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x125)))
 (let ((?x278 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x278)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x245)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x243 $x286)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x224 $x74)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (and $x14 $x256)))
 (let (($x216 (not $x270)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x128 $x144)))
 (let (($x117 (and (not $x170) $x216)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x176 $x12)))
 (let (($x7 (not $x255)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x213 $x150)))
 (let (($x138 (and (not $x107) $x7)))
 (let (($x244 (and (and (and (and (and (and $x138 $x117) $x230) $x69) $x186) $x285) $x123)))
 (let (($x46 (and $x244 $x143)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x31 (or false (or false (and (and true (or $x262 $x91)) (or $x290 $x6))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x11 (and $x98 $x46)))
 (let (($x164 (= $x11 true)))
 (let (($x82 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x248 (= $x82 true)))
 (let ((?x175 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x165 (= (_ bv0 2) ?x175)))
 (let (($x293 (= $x165 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x232 true)))
 (let (($x77 (forall ((input.ind-%var2577X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var2577X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x202))))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var2577X)))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2577X)))
 (=> $x120 (= ?x189 ?x258))))))))
 ))
 (let (($x61 (forall ((input.ind-%var2576X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var2576X) (bvult input.ind-%var2576X input.dst.llvm-%n))))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2576X)))
 (= $x120 $x247))))
 ))
 (let (($x70 (and $x61 $x77)))
 (let (($x217 (= $x70 true)))
 (let (($x65 (forall ((input.ind-%var2567X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var2567X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x202))))
 (let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2567X)))
 (let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2567X)))
 (=> $x167 (= ?x238 ?x258))))))))
 ))
 (let (($x222 (forall ((input.ind-%var2566X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var2566X) (bvult input.ind-%var2566X input.dst.llvm-%n))))
 (let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2566X)))
 (= $x167 $x247))))
 ))
 (let (($x231 (and $x222 $x65)))
 (let (($x276 (= $x231 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x277 true)))
 (let (($x103 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x288 (= $x103 true)))
 (let (($x172 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x172 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x254)))
 (let (($x29 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x29 true)))
 (let (($x279 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x237 (not $x279)))
 (let (($x188 (= $x237 true)))
 (let (($x10 (and $x188 $x153)))
 (let (($x272 (and $x10 $x94)))
 (let (($x129 (and $x272 $x288)))
 (let (($x263 (and $x129 $x136)))
 (let (($x48 (and $x263 $x276)))
 (let (($x73 (and $x48 $x217)))
 (let (($x173 (and $x73 $x259)))
 (let (($x32 (and $x173 $x293)))
 (let (($x233 (and $x32 $x248)))
 (let (($x169 (and $x233 $x164)))
 (let (($x28 (and $x169 $x271)))
 (let (($x102 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x269 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x269 (_ bv0 32))))
 (let (($x265 (and $x30 $x28)))
 (let (($x58 (forall ((input.ind-%var2587X (_ BitVec 32)) )(let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2587X)))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var2587X)))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2587X)))
 (=> $x120 (= ?x189 ?x238))))))
 ))
 (let (($x195 (forall ((input.ind-%var2586X (_ BitVec 32)) )(let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2586X)))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2586X)))
 (= $x120 $x167))))
 ))
 (let (($x113 (and $x195 $x58)))
 (let (($x246 (and $x113 $x265)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x78 $x246)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x252 (and $x226 $x159)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x131 $x252)))
 (let (($x154 (=> $x9 $x15)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x17 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x17 true)))
 (let ((?x27 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x37 (bvneg ?x27)))
 (let (($x89 (= ?x37 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x271 (= $x89 true)))
 (let ((?x242 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x242)))
 (let ((?x125 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x123 (= (_ bv0 32) ?x125)))
 (let ((?x278 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x278)))
 (let ((?x245 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x286 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x245)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x74 (and $x243 $x286)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x224 $x74)))
 (let (($x69 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (and $x14 $x256)))
 (let (($x216 (not $x270)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x170 (and $x128 $x144)))
 (let (($x117 (and (not $x170) $x216)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x176 $x12)))
 (let (($x7 (not $x255)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (and $x213 $x150)))
 (let (($x138 (and (not $x107) $x7)))
 (let (($x244 (and (and (and (and (and (and $x138 $x117) $x230) $x69) $x186) $x285) $x123)))
 (let (($x46 (and $x244 $x143)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x31 (or false (or false (and (and true (or $x262 $x91)) (or $x290 $x6))))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x11 (and $x98 $x46)))
 (let (($x164 (= $x11 true)))
 (let (($x82 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x248 (= $x82 true)))
 (let ((?x175 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x165 (= (_ bv0 2) ?x175)))
 (let (($x293 (= $x165 true)))
 (let (($x232 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x259 (= $x232 true)))
 (let (($x77 (forall ((input.ind-%var2577X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var2577X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x202))))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var2577X)))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2577X)))
 (=> $x120 (= ?x189 ?x258))))))))
 ))
 (let (($x61 (forall ((input.ind-%var2576X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var2576X) (bvult input.ind-%var2576X input.dst.llvm-%n))))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2576X)))
 (= $x120 $x247))))
 ))
 (let (($x70 (and $x61 $x77)))
 (let (($x217 (= $x70 true)))
 (let (($x65 (forall ((input.ind-%var2567X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var2567X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x202))))
 (let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2567X)))
 (let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2567X)))
 (=> $x167 (= ?x238 ?x258))))))))
 ))
 (let (($x222 (forall ((input.ind-%var2566X (_ BitVec 32)) )(let (($x247 (and (bvule (_ bv0 32) input.ind-%var2566X) (bvult input.ind-%var2566X input.dst.llvm-%n))))
 (let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2566X)))
 (= $x167 $x247))))
 ))
 (let (($x231 (and $x222 $x65)))
 (let (($x276 (= $x231 true)))
 (let (($x277 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x277 true)))
 (let (($x103 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x288 (= $x103 true)))
 (let (($x172 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x94 (= $x172 true)))
 (let ((?x254 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x50 (bvneg ?x254)))
 (let (($x29 (= ?x50 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x29 true)))
 (let (($x279 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x237 (not $x279)))
 (let (($x188 (= $x237 true)))
 (let (($x10 (and $x188 $x153)))
 (let (($x272 (and $x10 $x94)))
 (let (($x129 (and $x272 $x288)))
 (let (($x263 (and $x129 $x136)))
 (let (($x48 (and $x263 $x276)))
 (let (($x73 (and $x48 $x217)))
 (let (($x173 (and $x73 $x259)))
 (let (($x32 (and $x173 $x293)))
 (let (($x233 (and $x32 $x248)))
 (let (($x169 (and $x233 $x164)))
 (let (($x28 (and $x169 $x271)))
 (let (($x102 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x269 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x269 (_ bv0 32))))
 (let (($x265 (and $x30 $x28)))
 (let (($x58 (forall ((input.ind-%var2587X (_ BitVec 32)) )(let ((?x238 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2587X)))
 (let ((?x189 (input.spec-%var-x-1.1.1 input.ind-%var2587X)))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2587X)))
 (=> $x120 (= ?x189 ?x238))))))
 ))
 (let (($x195 (forall ((input.ind-%var2586X (_ BitVec 32)) )(let (($x167 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2586X)))
 (let (($x120 (input.spec-%var-x-1.0.1 input.ind-%var2586X)))
 (= $x120 $x167))))
 ))
 (let (($x113 (and $x195 $x58)))
 (let (($x246 (and $x113 $x265)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x159 (and $x78 $x246)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x252 (and $x226 $x159)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x9 (and $x131 $x252)))
 (let (($x154 (=> $x9 $x15)))
 (not $x154)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (not $x131)))
 (let (($x289 (or $x131 $x8)))
 (let (($x119 (= $x289 true)))
 (let ((?x13 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x13)))
 (let (($x57 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x57 true)))
 (let (($x41 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x41 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x34 true)))
 (let (($x281 (forall ((input.ind-%var2612X (_ BitVec 32)) )(let ((?x20 (bvadd (bvmul input.ind-%var2612X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x203))))
 (let ((?x35 (input.spec-%var-x-1.1.1 input.ind-%var2612X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2612X)))
 (=> $x129 (= ?x35 ?x93))))))))
 ))
 (let (($x106 (forall ((input.ind-%var2611X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var2611X) (bvult input.ind-%var2611X input.dst.llvm-%n))))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2611X)))
 (= $x129 $x169))))
 ))
 (let (($x55 (and $x106 $x281)))
 (let (($x183 (= $x55 true)))
 (let (($x19 (forall ((input.ind-%var2602X (_ BitVec 32)) )(let ((?x20 (bvadd (bvmul input.ind-%var2602X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x203))))
 (let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2602X)))
 (let (($x263 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2602X)))
 (=> $x263 (= ?x33 ?x93))))))))
 ))
 (let (($x27 (forall ((input.ind-%var2601X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var2601X) (bvult input.ind-%var2601X input.dst.llvm-%n))))
 (let (($x263 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2601X)))
 (= $x263 $x169))))
 ))
 (let (($x268 (and $x27 $x19)))
 (let (($x177 (= $x268 true)))
 (let (($x278 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x285 (= $x278 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x230)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x215)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (and $x170 $x14)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x144 $x256)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x213 $x150)))
 (let (($x251 (not $x107)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x240 $x31)))
 (let (($x12 (and (not $x98) $x251)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x241 $x290)))
 (let (($x6 (not $x130)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x161 $x175)))
 (let (($x214 (and (not $x295) $x6)))
 (let (($x245 (and (and (and (and (and (and $x214 $x12) $x7) $x128) $x270) $x117) $x47)))
 (let (($x286 (and $x245 $x149)))
 (let (($x266 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x32)))
 (let (($x163 (or false (or false (and (and true (or $x82 $x248)) (or $x206 $x266))))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x74 (and $x121 $x286)))
 (let (($x186 (= $x74 true)))
 (let ((?x217 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x73 (= (_ bv0 2) ?x217)))
 (let (($x232 (= $x73 true)))
 (let (($x147 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x147 true)))
 (let ((?x65 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x65)))
 (let (($x48 (= ?x231 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x48 true)))
 (let (($x52 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x258 (= $x52 true)))
 (let (($x61 (and $x258 $x36)))
 (let (($x77 (and $x61 $x228)))
 (let (($x259 (and $x77 $x232)))
 (let (($x234 (and $x259 $x186)))
 (let (($x5 (and $x234 $x285)))
 (let (($x71 (and $x5 $x177)))
 (let (($x99 (and $x71 $x183)))
 (let (($x210 (and $x99 $x162)))
 (let (($x84 (and $x210 $x100)))
 (let (($x22 (and $x84 $x42)))
 (let (($x273 (forall ((input.ind-%var2622X (_ BitVec 32)) )(let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2622X)))
 (let ((?x35 (input.spec-%var-x-1.1.1 input.ind-%var2622X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2622X)))
 (=> $x129 (= ?x35 ?x33))))))
 ))
 (let (($x181 (forall ((input.ind-%var2621X (_ BitVec 32)) )(let (($x263 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2621X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2621X)))
 (= $x129 $x263))))
 ))
 (let (($x197 (and $x181 $x273)))
 (let (($x109 (and $x197 $x22)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x94 $x109)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x274 (and $x223 $x43)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x29 $x274)))
 (let ((?x226 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x132 (bvadd input.dst.llvm-%x ?x226)))
 (let (($x221 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x132 (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x113 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x45 (or false (or false (and (and true (or $x58 $x113)) (or $x92 $x221))))))
 (let (($x50 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) $x45)))
 (let (($x139 (=> (and $x131 (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32)))) $x45)))
 (let (($x236 (and $x139 $x108)))
 (let (($x118 (=> $x236 $x119)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x8 (not $x131)))
 (let (($x289 (or $x131 $x8)))
 (let (($x119 (= $x289 true)))
 (let ((?x13 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x294 (bvneg ?x13)))
 (let (($x57 (= ?x294 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x42 (= $x57 true)))
 (let (($x41 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x41 true)))
 (let (($x34 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x162 (= $x34 true)))
 (let (($x281 (forall ((input.ind-%var2612X (_ BitVec 32)) )(let ((?x20 (bvadd (bvmul input.ind-%var2612X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x203))))
 (let ((?x35 (input.spec-%var-x-1.1.1 input.ind-%var2612X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2612X)))
 (=> $x129 (= ?x35 ?x93))))))))
 ))
 (let (($x106 (forall ((input.ind-%var2611X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var2611X) (bvult input.ind-%var2611X input.dst.llvm-%n))))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2611X)))
 (= $x129 $x169))))
 ))
 (let (($x55 (and $x106 $x281)))
 (let (($x183 (= $x55 true)))
 (let (($x19 (forall ((input.ind-%var2602X (_ BitVec 32)) )(let ((?x20 (bvadd (bvmul input.ind-%var2602X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv1 32))) (select input.dst.llvm-mem ?x20))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x20 (_ bv2 32))) ?x203))))
 (let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2602X)))
 (let (($x263 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2602X)))
 (=> $x263 (= ?x33 ?x93))))))))
 ))
 (let (($x27 (forall ((input.ind-%var2601X (_ BitVec 32)) )(let (($x169 (and (bvule (_ bv0 32) input.ind-%var2601X) (bvult input.ind-%var2601X input.dst.llvm-%n))))
 (let (($x263 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2601X)))
 (= $x263 $x169))))
 ))
 (let (($x268 (and $x27 $x19)))
 (let (($x177 (= $x268 true)))
 (let (($x278 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x285 (= $x278 true)))
 (let ((?x230 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x149 (= (_ bv0 32) ?x230)))
 (let ((?x215 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x47 (= (_ bv0 32) ?x215)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x14 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (and $x170 $x14)))
 (let (($x144 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x270 (and $x144 $x256)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (and $x213 $x150)))
 (let (($x251 (not $x107)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x240 $x31)))
 (let (($x12 (and (not $x98) $x251)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x241 $x290)))
 (let (($x6 (not $x130)))
 (let (($x175 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (and $x161 $x175)))
 (let (($x214 (and (not $x295) $x6)))
 (let (($x245 (and (and (and (and (and (and $x214 $x12) $x7) $x128) $x270) $x117) $x47)))
 (let (($x286 (and $x245 $x149)))
 (let (($x266 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x32 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x32)))
 (let (($x248 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x32)))
 (let (($x163 (or false (or false (and (and true (or $x82 $x248)) (or $x206 $x266))))))
 (let (($x121 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x74 (and $x121 $x286)))
 (let (($x186 (= $x74 true)))
 (let ((?x217 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x73 (= (_ bv0 2) ?x217)))
 (let (($x232 (= $x73 true)))
 (let (($x147 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x228 (= $x147 true)))
 (let ((?x65 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x231 (bvneg ?x65)))
 (let (($x48 (= ?x231 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x36 (= $x48 true)))
 (let (($x52 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x258 (= $x52 true)))
 (let (($x61 (and $x258 $x36)))
 (let (($x77 (and $x61 $x228)))
 (let (($x259 (and $x77 $x232)))
 (let (($x234 (and $x259 $x186)))
 (let (($x5 (and $x234 $x285)))
 (let (($x71 (and $x5 $x177)))
 (let (($x99 (and $x71 $x183)))
 (let (($x210 (and $x99 $x162)))
 (let (($x84 (and $x210 $x100)))
 (let (($x22 (and $x84 $x42)))
 (let (($x273 (forall ((input.ind-%var2622X (_ BitVec 32)) )(let ((?x33 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2622X)))
 (let ((?x35 (input.spec-%var-x-1.1.1 input.ind-%var2622X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2622X)))
 (=> $x129 (= ?x35 ?x33))))))
 ))
 (let (($x181 (forall ((input.ind-%var2621X (_ BitVec 32)) )(let (($x263 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2621X)))
 (let (($x129 (input.spec-%var-x-1.0.1 input.ind-%var2621X)))
 (= $x129 $x263))))
 ))
 (let (($x197 (and $x181 $x273)))
 (let (($x109 (and $x197 $x22)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x43 (and $x94 $x109)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x274 (and $x223 $x43)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x108 (and $x29 $x274)))
 (let ((?x226 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x132 (bvadd input.dst.llvm-%x ?x226)))
 (let (($x221 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd ?x132 (_ bv3 32))))
 (let (($x92 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x113 (bvugt ?x132 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x58 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x45 (or false (or false (and (and true (or $x58 $x113)) (or $x92 $x221))))))
 (let (($x50 (=> (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32))) $x45)))
 (let (($x139 (=> (and $x131 (bvule ?x132 (bvsub (bvadd ?x132 (_ bv4 32)) (_ bv1 32)))) $x45)))
 (let (($x236 (and $x139 $x108)))
 (let (($x118 (=> $x236 $x119)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x17)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x178)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x169)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x11 $x190)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x164 $x27)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x278 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x245 $x230)))
 (let (($x286 (not $x149)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x243 $x215)))
 (let (($x186 (and (not $x47) $x286)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x14 $x256)))
 (let (($x224 (not $x270)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x161 $x88)))
 (let (($x117 (and (not $x53) $x224)))
 (let (($x194 (and (and (and (and (and (and $x117 $x186) $x278) $x5) $x271) $x20) $x211)))
 (let (($x93 (and $x194 $x23)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x75 (or false (or false (and (and true (or $x213 $x150)) (or $x255 $x7))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x75)))
 (let (($x179 (and $x170 $x93)))
 (let (($x222 (= $x179 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x114 (concat ?x151 (concat ?x268 ?x24)))))
 (let (($x118 (= ?x281 input.dst.llvm-%x)))
 (let (($x292 (= $x118 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x294 (concat ?x100 (concat ?x162 ?x99)))))
 (let (($x8 (= ?x57 input.dst.llvm-%n)))
 (let (($x289 (= $x8 true)))
 (let (($x42 (= input.dst.llvm-%n ?x57)))
 (let (($x55 (= input.dst.llvm-%x ?x281)))
 (let (($x22 (and $x55 $x42)))
 (let (($x43 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x170) $x93)))
 (let (($x274 (and $x43 $x22)))
 (let (($x147 (forall ((input.ind-%var2632X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var2632X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x266))))
 (let ((?x233 (input.spec-%var-x-1.1.1 input.ind-%var2632X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2632X)))
 (=> $x195 (= ?x233 ?x77))))))))
 ))
 (let (($x120 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2631X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2631X) (bvult input.ind-%var2631X input.dst.llvm-%n)))))
 ))
 (let (($x276 (and $x120 $x147)))
 (let (($x108 (and $x276 $x274)))
 (let (($x236 (= $x108 true)))
 (let (($x119 (and $x236 $x289)))
 (let (($x158 (and $x119 $x292)))
 (let (($x247 (forall ((input.ind-%var2642X (_ BitVec 32)) )(let ((?x10 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2642X)))
 (let ((?x233 (input.spec-%var-x-1.1.1 input.ind-%var2642X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2642X)))
 (=> $x195 (= ?x233 ?x10))))))
 ))
 (let (($x202 (forall ((input.ind-%var2641X (_ BitVec 32)) )(let (($x95 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2641X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2641X)))
 (= $x195 $x95))))
 ))
 (let (($x181 (and $x202 $x247)))
 (let (($x173 (and $x181 $x158)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x226 $x173)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x124 (and $x78 $x49)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x131 $x124)))
 (let (($x127 (=> $x277 $x222)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x17 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x17)))
 (let ((?x178 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x178)))
 (let ((?x90 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x90)))
 (let ((?x169 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x169)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x11 $x190)))
 (let (($x164 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x271 (and $x164 $x27)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x278 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x245 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x149 (and $x245 $x230)))
 (let (($x286 (not $x149)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x243 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x243 $x215)))
 (let (($x186 (and (not $x47) $x286)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x270 (and $x14 $x256)))
 (let (($x224 (not $x270)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (and $x161 $x88)))
 (let (($x117 (and (not $x53) $x224)))
 (let (($x194 (and (and (and (and (and (and $x117 $x186) $x278) $x5) $x271) $x20) $x211)))
 (let (($x93 (and $x194 $x23)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x176 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x176)))
 (let (($x150 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x176)))
 (let (($x75 (or false (or false (and (and true (or $x213 $x150)) (or $x255 $x7))))))
 (let (($x170 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x75)))
 (let (($x179 (and $x170 $x93)))
 (let (($x222 (= $x179 true)))
 (let ((?x24 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x281 (concat ?x114 (concat ?x151 (concat ?x268 ?x24)))))
 (let (($x118 (= ?x281 input.dst.llvm-%x)))
 (let (($x292 (= $x118 true)))
 (let ((?x99 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x294 (concat ?x100 (concat ?x162 ?x99)))))
 (let (($x8 (= ?x57 input.dst.llvm-%n)))
 (let (($x289 (= $x8 true)))
 (let (($x42 (= input.dst.llvm-%n ?x57)))
 (let (($x55 (= input.dst.llvm-%x ?x281)))
 (let (($x22 (and $x55 $x42)))
 (let (($x43 (and (and (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x) $x170) $x93)))
 (let (($x274 (and $x43 $x22)))
 (let (($x147 (forall ((input.ind-%var2632X (_ BitVec 32)) )(let ((?x130 (bvadd (bvmul input.ind-%var2632X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv1 32))) (select input.dst.llvm-mem ?x130))))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x130 (_ bv2 32))) ?x266))))
 (let ((?x233 (input.spec-%var-x-1.1.1 input.ind-%var2632X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2632X)))
 (=> $x195 (= ?x233 ?x77))))))))
 ))
 (let (($x120 (forall ((input.ind-%var2631X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2631X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2631X) (bvult input.ind-%var2631X input.dst.llvm-%n)))))
 ))
 (let (($x276 (and $x120 $x147)))
 (let (($x108 (and $x276 $x274)))
 (let (($x236 (= $x108 true)))
 (let (($x119 (and $x236 $x289)))
 (let (($x158 (and $x119 $x292)))
 (let (($x247 (forall ((input.ind-%var2642X (_ BitVec 32)) )(let ((?x10 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2642X)))
 (let ((?x233 (input.spec-%var-x-1.1.1 input.ind-%var2642X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2642X)))
 (=> $x195 (= ?x233 ?x10))))))
 ))
 (let (($x202 (forall ((input.ind-%var2641X (_ BitVec 32)) )(let (($x95 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2641X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2641X)))
 (= $x195 $x95))))
 ))
 (let (($x181 (and $x202 $x247)))
 (let (($x173 (and $x181 $x158)))
 (let (($x226 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x49 (and $x226 $x173)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x124 (and $x78 $x49)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x277 (and $x131 $x124)))
 (let (($x127 (=> $x277 $x222)))
 (not $x127))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x94 (= (_ bv0 2) ?x231)))
 (let (($x145 (= $x94 true)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x232 (concat ?x241 (concat ?x68 (concat ?x221 ?x189)))))
 (let (($x58 (= ?x232 input.dst.llvm-%x)))
 (let (($x238 (= $x58 true)))
 (let ((?x233 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x295 (concat ?x102 (concat ?x139 (concat ?x288 ?x233)))))
 (let (($x121 (= input.dst.llvm-%n ?x295)))
 (let (($x228 (= input.dst.llvm-%x ?x232)))
 (let (($x273 (and $x228 $x121)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x82)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x279 (= (_ bv0 32) ?x272)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x173 $x124)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x158 $x277)))
 (let (($x292 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (and $x22 $x274)))
 (let (($x236 (not $x108)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x84 $x57)))
 (let (($x289 (and (not $x42) $x236)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x41 $x100)))
 (let (($x162 (not $x34)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x20 $x203)))
 (let (($x210 (and (not $x294) $x162)))
 (let (($x52 (and (and (and (and (and (and $x210 $x289) $x119) $x292) $x179) $x127) $x279)))
 (let (($x248 (and $x52 $x183)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x281 (or false (or false (and (and true (or $x93 $x43)) (or $x19 $x268))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x110 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x26 (and (and (and $x110 $x13) $x248) $x273)))
 (let (($x169 (forall ((input.ind-%var2652X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var2652X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x53))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var2652X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2652X)))
 (=> $x195 (= ?x14 ?x157))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2651X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2651X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2651X) (bvult input.ind-%var2651X input.dst.llvm-%n)))))
 ))
 (let (($x190 (and $x230 $x169)))
 (let (($x175 (and $x190 $x26)))
 (let (($x290 (= $x175 true)))
 (let (($x120 (= ?x295 input.dst.llvm-%n)))
 (let (($x122 (= $x120 true)))
 (let (($x188 (and $x122 $x290)))
 (let (($x91 (and $x188 $x238)))
 (let (($x266 (forall ((input.ind-%var2662X (_ BitVec 32)) )(let ((?x65 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2662X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var2662X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2662X)))
 (=> $x195 (= ?x14 ?x65))))))
 ))
 (let (($x165 (forall ((input.ind-%var2661X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2661X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2661X)))
 (= $x195 $x202))))
 ))
 (let (($x258 (and $x165 $x266)))
 (let (($x167 (and $x258 $x91)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x227 (and $x78 $x167)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x30 (and $x237 $x227)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x131 $x30)))
 (let (($x136 (=> $x293 $x145)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x94 (= (_ bv0 2) ?x231)))
 (let (($x145 (= $x94 true)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x232 (concat ?x241 (concat ?x68 (concat ?x221 ?x189)))))
 (let (($x58 (= ?x232 input.dst.llvm-%x)))
 (let (($x238 (= $x58 true)))
 (let ((?x233 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x295 (concat ?x102 (concat ?x139 (concat ?x288 ?x233)))))
 (let (($x121 (= input.dst.llvm-%n ?x295)))
 (let (($x228 (= input.dst.llvm-%x ?x232)))
 (let (($x273 (and $x228 $x121)))
 (let ((?x82 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x183 (= (_ bv0 32) ?x82)))
 (let ((?x272 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x279 (= (_ bv0 32) ?x272)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x127 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let ((?x49 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x49)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x277 (and $x173 $x124)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x158 $x277)))
 (let (($x292 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (and $x22 $x274)))
 (let (($x236 (not $x108)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (and $x84 $x57)))
 (let (($x289 (and (not $x42) $x236)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x34 (and $x41 $x100)))
 (let (($x162 (not $x34)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x20 $x203)))
 (let (($x210 (and (not $x294) $x162)))
 (let (($x52 (and (and (and (and (and (and $x210 $x289) $x119) $x292) $x179) $x127) $x279)))
 (let (($x248 (and $x52 $x183)))
 (let (($x268 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x281 (or false (or false (and (and true (or $x93 $x43)) (or $x19 $x268))))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x281)))
 (let (($x110 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x26 (and (and (and $x110 $x13) $x248) $x273)))
 (let (($x169 (forall ((input.ind-%var2652X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var2652X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x53))))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var2652X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2652X)))
 (=> $x195 (= ?x14 ?x157))))))))
 ))
 (let (($x230 (forall ((input.ind-%var2651X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2651X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2651X) (bvult input.ind-%var2651X input.dst.llvm-%n)))))
 ))
 (let (($x190 (and $x230 $x169)))
 (let (($x175 (and $x190 $x26)))
 (let (($x290 (= $x175 true)))
 (let (($x120 (= ?x295 input.dst.llvm-%n)))
 (let (($x122 (= $x120 true)))
 (let (($x188 (and $x122 $x290)))
 (let (($x91 (and $x188 $x238)))
 (let (($x266 (forall ((input.ind-%var2662X (_ BitVec 32)) )(let ((?x65 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2662X)))
 (let ((?x14 (input.spec-%var-x-1.1.1 input.ind-%var2662X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2662X)))
 (=> $x195 (= ?x14 ?x65))))))
 ))
 (let (($x165 (forall ((input.ind-%var2661X (_ BitVec 32)) )(let (($x202 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2661X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2661X)))
 (= $x195 $x202))))
 ))
 (let (($x258 (and $x165 $x266)))
 (let (($x167 (and $x258 $x91)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x227 (and $x78 $x167)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x30 (and $x237 $x227)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x293 (and $x131 $x30)))
 (let (($x136 (=> $x293 $x145)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x186 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x117 (= $x186 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x234 (concat ?x235 (concat ?x278 ?x80)))))
 (let (($x205 (= ?x31 input.dst.llvm-%n)))
 (let (($x168 (= $x205 true)))
 (let (($x176 (= input.dst.llvm-%n ?x31)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x113 (concat ?x155 (concat ?x219 ?x14)))))
 (let (($x262 (= input.dst.llvm-%x ?x129)))
 (let (($x251 (and $x262 $x176)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x253)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x145)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (and $x167 $x30)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x91 $x293)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x228 $x121)))
 (let (($x26 (not $x273)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x214 $x33)))
 (let (($x290 (and (not $x232) $x26)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x241 $x45)))
 (let (($x6 (not $x68)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x197 $x118)))
 (let (($x189 (and (not $x201) $x6)))
 (let (($x95 (and (and (and (and (and (and $x189 $x290) $x58) $x238) $x172) $x94) $x136)))
 (let (($x47 (and $x95 $x29)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x183 (or false (or false (and (and true (or $x124 $x277)) (or $x163 $x272))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x183)))
 (let (($x112 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x270 (and (and (and $x112 $x72) $x47) $x251)))
 (let (($x274 (forall ((input.ind-%var2672X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2672X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x114))))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var2672X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2672X)))
 (=> $x195 (= ?x19 ?x42))))))))
 ))
 (let (($x294 (forall ((input.ind-%var2671X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2671X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2671X) (bvult input.ind-%var2671X input.dst.llvm-%n)))))
 ))
 (let (($x108 (and $x294 $x274)))
 (let (($x256 (and $x108 $x270)))
 (let (($x224 (= $x256 true)))
 (let (($x263 (= ?x129 input.dst.llvm-%x)))
 (let (($x130 (= $x263 true)))
 (let (($x240 (and $x130 $x224)))
 (let (($x276 (and $x240 $x168)))
 (let (($x74 (forall ((input.ind-%var2682X (_ BitVec 32)) )(let ((?x295 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2682X)))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var2682X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2682X)))
 (=> $x195 (= ?x19 ?x295))))))
 ))
 (let (($x243 (forall ((input.ind-%var2681X (_ BitVec 32)) )(let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2681X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2681X)))
 (= $x195 $x165))))
 ))
 (let (($x230 (and $x243 $x74)))
 (let (($x69 (and $x230 $x276)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x237 $x69)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x226 (and $x76 $x7)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x131 $x226)))
 (let (($x61 (=> $x259 $x117)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x186 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x117 (= $x186 true)))
 (let ((?x80 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x235 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x234 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x31 (concat ?x234 (concat ?x235 (concat ?x278 ?x80)))))
 (let (($x205 (= ?x31 input.dst.llvm-%n)))
 (let (($x168 (= $x205 true)))
 (let (($x176 (= input.dst.llvm-%n ?x31)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x129 (concat ?x113 (concat ?x155 (concat ?x219 ?x14)))))
 (let (($x262 (= input.dst.llvm-%x ?x129)))
 (let (($x251 (and $x262 $x176)))
 (let ((?x253 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x29 (= (_ bv0 32) ?x253)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x136 (= (_ bv0 32) ?x145)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x231)))
 (let ((?x227 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x227)))
 (let (($x167 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x293 (and $x167 $x30)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x91 $x293)))
 (let (($x238 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x228 $x121)))
 (let (($x26 (not $x273)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x214 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x214 $x33)))
 (let (($x290 (and (not $x232) $x26)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x241 $x45)))
 (let (($x6 (not $x68)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x197 $x118)))
 (let (($x189 (and (not $x201) $x6)))
 (let (($x95 (and (and (and (and (and (and $x189 $x290) $x58) $x238) $x172) $x94) $x136)))
 (let (($x47 (and $x95 $x29)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x277 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x124 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x183 (or false (or false (and (and true (or $x124 $x277)) (or $x163 $x272))))))
 (let (($x72 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x183)))
 (let (($x112 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x270 (and (and (and $x112 $x72) $x47) $x251)))
 (let (($x274 (forall ((input.ind-%var2672X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2672X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x114))))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var2672X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2672X)))
 (=> $x195 (= ?x19 ?x42))))))))
 ))
 (let (($x294 (forall ((input.ind-%var2671X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2671X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2671X) (bvult input.ind-%var2671X input.dst.llvm-%n)))))
 ))
 (let (($x108 (and $x294 $x274)))
 (let (($x256 (and $x108 $x270)))
 (let (($x224 (= $x256 true)))
 (let (($x263 (= ?x129 input.dst.llvm-%x)))
 (let (($x130 (= $x263 true)))
 (let (($x240 (and $x130 $x224)))
 (let (($x276 (and $x240 $x168)))
 (let (($x74 (forall ((input.ind-%var2682X (_ BitVec 32)) )(let ((?x295 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2682X)))
 (let ((?x19 (input.spec-%var-x-1.1.1 input.ind-%var2682X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2682X)))
 (=> $x195 (= ?x19 ?x295))))))
 ))
 (let (($x243 (forall ((input.ind-%var2681X (_ BitVec 32)) )(let (($x165 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2681X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2681X)))
 (= $x195 $x165))))
 ))
 (let (($x230 (and $x243 $x74)))
 (let (($x69 (and $x230 $x276)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x7 (and $x237 $x69)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x226 (and $x76 $x7)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x131 $x226)))
 (let (($x61 (=> $x259 $x117)))
 (not $x61))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (forall ((input.ind-%var2712X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var2712X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x279))))
 (let ((?x163 (input.spec-%var-x-1.1.1 input.ind-%var2712X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2712X)))
 (=> $x195 (= ?x163 ?x112))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2711X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2711X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2711X) (bvult input.ind-%var2711X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x103 $x137)))
 (let (($x143 (= $x123 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x202 (concat ?x139 (concat ?x181 ?x61)))))
 (let (($x211 (= ?x13 input.dst.llvm-%x)))
 (let (($x99 (= $x211 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x34 (concat ?x88 (concat ?x162 ?x115)))))
 (let (($x170 (= ?x53 input.dst.llvm-%n)))
 (let (($x110 (= $x170 true)))
 (let (($x215 (= input.dst.llvm-%n ?x53)))
 (let (($x75 (= input.dst.llvm-%x ?x13)))
 (let (($x190 (and $x75 $x215)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x240)))
 (let ((?x256 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x256)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x80 $x147)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x278 $x31)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x253 $x29)))
 (let (($x144 (not $x47)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x145 $x136)))
 (let (($x109 (and (not $x95) $x144)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x293 $x172)))
 (let (($x231 (not $x36)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x197 $x82)))
 (let (($x48 (and (not $x30) $x231)))
 (let (($x259 (and (and (and (and (and (and $x48 $x109) $x70) $x208) $x176) $x270) $x224)))
 (let (($x186 (and $x259 $x205)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x91 (or false (or false (and (and true (or $x228 $x121)) (or $x188 $x58))))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x91)))
 (let (($x124 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x268 (and (and (and $x124 $x227) $x186) $x190)))
 (let (($x236 (forall ((input.ind-%var2692X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var2692X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x279))))
 (let ((?x163 (input.spec-%var-x-1.1.1 input.ind-%var2692X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2692X)))
 (=> $x195 (= ?x163 ?x112))))))))
 ))
 (let (($x14 (forall ((input.ind-%var2691X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2691X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2691X) (bvult input.ind-%var2691X input.dst.llvm-%n)))))
 ))
 (let (($x8 (and $x14 $x236)))
 (let (($x151 (and $x8 $x268)))
 (let (($x24 (= $x151 true)))
 (let (($x255 (and $x24 $x110)))
 (let (($x178 (and $x255 $x99)))
 (let (($x217 (forall ((input.ind-%var2702X (_ BitVec 32)) )(let ((?x129 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2702X)))
 (let ((?x163 (input.spec-%var-x-1.1.1 input.ind-%var2702X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2702X)))
 (=> $x195 (= ?x163 ?x129))))))
 ))
 (let (($x106 (forall ((input.ind-%var2701X (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2701X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2701X)))
 (= $x195 $x243))))
 ))
 (let (($x203 (and $x106 $x217)))
 (let (($x78 (and $x203 $x178)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x76 $x78)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x43 $x245)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x131 $x194)))
 (let (($x46 (=> $x177 $x143)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x137 (forall ((input.ind-%var2712X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var2712X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x279))))
 (let ((?x163 (input.spec-%var-x-1.1.1 input.ind-%var2712X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2712X)))
 (=> $x195 (= ?x163 ?x112))))))))
 ))
 (let (($x103 (forall ((input.ind-%var2711X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2711X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2711X) (bvult input.ind-%var2711X input.dst.llvm-%n)))))
 ))
 (let (($x123 (and $x103 $x137)))
 (let (($x143 (= $x123 true)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x13 (concat ?x202 (concat ?x139 (concat ?x181 ?x61)))))
 (let (($x211 (= ?x13 input.dst.llvm-%x)))
 (let (($x99 (= $x211 true)))
 (let ((?x115 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x53 (concat ?x34 (concat ?x88 (concat ?x162 ?x115)))))
 (let (($x170 (= ?x53 input.dst.llvm-%n)))
 (let (($x110 (= $x170 true)))
 (let (($x215 (= input.dst.llvm-%n ?x53)))
 (let (($x75 (= input.dst.llvm-%x ?x13)))
 (let (($x190 (and $x75 $x215)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x205 (= (_ bv0 32) ?x240)))
 (let ((?x256 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x256)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x128 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x147 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x80 $x147)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x278 $x31)))
 (let (($x208 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x253 $x29)))
 (let (($x144 (not $x47)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x145 $x136)))
 (let (($x109 (and (not $x95) $x144)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x293 $x172)))
 (let (($x231 (not $x36)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x30 (and $x197 $x82)))
 (let (($x48 (and (not $x30) $x231)))
 (let (($x259 (and (and (and (and (and (and $x48 $x109) $x70) $x208) $x176) $x270) $x224)))
 (let (($x186 (and $x259 $x205)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x121 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x91 (or false (or false (and (and true (or $x228 $x121)) (or $x188 $x58))))))
 (let (($x227 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x91)))
 (let (($x124 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x268 (and (and (and $x124 $x227) $x186) $x190)))
 (let (($x236 (forall ((input.ind-%var2692X (_ BitVec 32)) )(let ((?x68 (bvadd (bvmul input.ind-%var2692X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x279))))
 (let ((?x163 (input.spec-%var-x-1.1.1 input.ind-%var2692X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2692X)))
 (=> $x195 (= ?x163 ?x112))))))))
 ))
 (let (($x14 (forall ((input.ind-%var2691X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2691X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2691X) (bvult input.ind-%var2691X input.dst.llvm-%n)))))
 ))
 (let (($x8 (and $x14 $x236)))
 (let (($x151 (and $x8 $x268)))
 (let (($x24 (= $x151 true)))
 (let (($x255 (and $x24 $x110)))
 (let (($x178 (and $x255 $x99)))
 (let (($x217 (forall ((input.ind-%var2702X (_ BitVec 32)) )(let ((?x129 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2702X)))
 (let ((?x163 (input.spec-%var-x-1.1.1 input.ind-%var2702X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2702X)))
 (=> $x195 (= ?x163 ?x129))))))
 ))
 (let (($x106 (forall ((input.ind-%var2701X (_ BitVec 32)) )(let (($x243 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2701X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2701X)))
 (= $x195 $x243))))
 ))
 (let (($x203 (and $x106 $x217)))
 (let (($x78 (and $x203 $x178)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x245 (and $x76 $x78)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x194 (and $x43 $x245)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x177 (and $x131 $x194)))
 (let (($x46 (=> $x177 $x143)))
 (not $x46))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (forall ((input.ind-%var2742X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2742X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x231))))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var2742X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2742X)))
 (=> $x195 (= ?x293 ?x90))))))))
 ))
 (let (($x89 (forall ((input.ind-%var2741X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2741X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2741X) (bvult input.ind-%var2741X input.dst.llvm-%n)))))
 ))
 (let (($x9 (and $x89 $x92)))
 (let (($x37 (= $x9 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x57 (concat ?x254 (concat ?x46 ?x123)))))
 (let (($x118 (= ?x102 input.dst.llvm-%x)))
 (let (($x45 (= $x118 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x155 (concat ?x10 (concat ?x101 ?x23)))))
 (let (($x223 (= ?x19 input.dst.llvm-%n)))
 (let (($x164 (= $x223 true)))
 (let (($x17 (= input.dst.llvm-%n ?x19)))
 (let (($x165 (= input.dst.llvm-%x ?x102)))
 (let (($x27 (and $x165 $x17)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x255)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x170)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x285 $x215)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (and $x100 $x190)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x5 $x13)))
 (let (($x225 (not $x75)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x181 $x61)))
 (let (($x12 (and (not $x119) $x225)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x107 $x269)))
 (let (($x216 (not $x202)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x253 $x145)))
 (let (($x213 (and (not $x186) $x216)))
 (let (($x177 (and (and (and (and (and (and $x213 $x12) $x247) $x115) $x268) $x24) $x110)))
 (let (($x103 (and $x177 $x211)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x259 (or false (or false (and (and true (or $x80 $x128)) (or $x251 $x270))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x259)))
 (let (($x227 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x289 (and (and (and $x227 $x205) $x103) $x27)))
 (let (($x290 (forall ((input.ind-%var2722X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2722X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x231))))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var2722X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2722X)))
 (=> $x195 (= ?x293 ?x90))))))))
 ))
 (let (($x68 (forall ((input.ind-%var2721X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2721X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2721X) (bvult input.ind-%var2721X input.dst.llvm-%n)))))
 ))
 (let (($x232 (and $x68 $x290)))
 (let (($x138 (and $x232 $x289)))
 (let (($x84 (= $x138 true)))
 (let (($x221 (and $x84 $x164)))
 (let (($x258 (and $x221 $x45)))
 (let (($x279 (forall ((input.ind-%var2732X (_ BitVec 32)) )(let ((?x281 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2732X)))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var2732X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2732X)))
 (=> $x195 (= ?x293 ?x281))))))
 ))
 (let (($x124 (forall ((input.ind-%var2731X (_ BitVec 32)) )(let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2731X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2731X)))
 (= $x195 $x106))))
 ))
 (let (($x93 (and $x124 $x279)))
 (let (($x295 (and $x93 $x258)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x43 $x295)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x277 (and $x288 $x150)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x237 (and $x131 $x277)))
 (let (($x21 (=> $x237 $x37)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x92 (forall ((input.ind-%var2742X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2742X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x231))))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var2742X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2742X)))
 (=> $x195 (= ?x293 ?x90))))))))
 ))
 (let (($x89 (forall ((input.ind-%var2741X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2741X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2741X) (bvult input.ind-%var2741X input.dst.llvm-%n)))))
 ))
 (let (($x9 (and $x89 $x92)))
 (let (($x37 (= $x9 true)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x57 (concat ?x254 (concat ?x46 ?x123)))))
 (let (($x118 (= ?x102 input.dst.llvm-%x)))
 (let (($x45 (= $x118 true)))
 (let ((?x23 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x19 (concat ?x155 (concat ?x10 (concat ?x101 ?x23)))))
 (let (($x223 (= ?x19 input.dst.llvm-%n)))
 (let (($x164 (= $x223 true)))
 (let (($x17 (= input.dst.llvm-%n ?x19)))
 (let (($x165 (= input.dst.llvm-%x ?x102)))
 (let (($x27 (and $x165 $x17)))
 (let ((?x255 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x211 (= (_ bv0 32) ?x255)))
 (let ((?x170 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x110 (= (_ bv0 32) ?x170)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x53 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x53)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x190 (and $x285 $x215)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (and $x100 $x190)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x247 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x13 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x75 (and $x5 $x13)))
 (let (($x225 (not $x75)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x181 $x61)))
 (let (($x12 (and (not $x119) $x225)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x107 $x269)))
 (let (($x216 (not $x202)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (and $x253 $x145)))
 (let (($x213 (and (not $x186) $x216)))
 (let (($x177 (and (and (and (and (and (and $x213 $x12) $x247) $x115) $x268) $x24) $x110)))
 (let (($x103 (and $x177 $x211)))
 (let (($x270 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x278 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x278)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x278)))
 (let (($x259 (or false (or false (and (and true (or $x80 $x128)) (or $x251 $x270))))))
 (let (($x205 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x259)))
 (let (($x227 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x289 (and (and (and $x227 $x205) $x103) $x27)))
 (let (($x290 (forall ((input.ind-%var2722X (_ BitVec 32)) )(let ((?x234 (bvadd (bvmul input.ind-%var2722X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x231))))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var2722X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2722X)))
 (=> $x195 (= ?x293 ?x90))))))))
 ))
 (let (($x68 (forall ((input.ind-%var2721X (_ BitVec 32)) )(let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2721X)))
 (= $x195 (and (bvule (_ bv0 32) input.ind-%var2721X) (bvult input.ind-%var2721X input.dst.llvm-%n)))))
 ))
 (let (($x232 (and $x68 $x290)))
 (let (($x138 (and $x232 $x289)))
 (let (($x84 (= $x138 true)))
 (let (($x221 (and $x84 $x164)))
 (let (($x258 (and $x221 $x45)))
 (let (($x279 (forall ((input.ind-%var2732X (_ BitVec 32)) )(let ((?x281 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2732X)))
 (let ((?x293 (input.spec-%var-x-1.1.1 input.ind-%var2732X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2732X)))
 (=> $x195 (= ?x293 ?x281))))))
 ))
 (let (($x124 (forall ((input.ind-%var2731X (_ BitVec 32)) )(let (($x106 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2731X)))
 (let (($x195 (input.spec-%var-x-1.0.1 input.ind-%var2731X)))
 (= $x195 $x106))))
 ))
 (let (($x93 (and $x124 $x279)))
 (let (($x295 (and $x93 $x258)))
 (let (($x43 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x150 (and $x43 $x295)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x277 (and $x288 $x150)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x237 (and $x131 $x277)))
 (let (($x21 (=> $x237 $x37)))
 (not $x21))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x192 (bvmul (_ bv4294967295 32) ?x152)))
 (let ((?x220 (bvneg ?x192)))
 (let (($x81 (= ?x220 ?x79)))
 (let (($x287 (= $x81 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x198)))
 (let (($x160 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x160 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (= $x111 true)))
 (let (($x38 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (= $x38 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x275 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x63 (bvsub ?x35 ?x288)))
 (let (($x291 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x63) (bvult ?x35 ?x63))))
 (let (($x283 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x229 (ite $x283 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvmul (_ bv4 64) ?x133)))
 (let ((?x51 ((_ extract 63 32) ?x264)))
 (let (($x105 (= ?x51 ?x229)))
 (let (($x193 (and $x105 $x291)))
 (let (($x96 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x85 (and $x96 $x193)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x131 $x85)))
 (let (($x134 (= $x25 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x146 (= $x56 true)))
 (let (($x66 (= $x131 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x62)))
 (let ((?x265 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x265)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x263 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x263)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x173 $x125)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x20 $x244)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x271 $x197)))
 (let (($x49 (not $x76)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x168 $x206)))
 (let (($x55 (and (not $x129) $x49)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x262 $x8)))
 (let (($x236 (not $x153)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x22 $x243)))
 (let (($x29 (and (not $x188) $x236)))
 (let (($x130 (and (and (and (and (and (and $x29 $x55) $x228) $x149) $x126) $x28) $x252)))
 (let (($x157 (and $x130 $x159)))
 (let (($x276 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x52 (or false (or false (and (and true (or $x166 $x74)) (or $x230 $x276))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x122 (and $x132 $x157)))
 (let (($x73 (= $x122 true)))
 (let ((?x210 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x30 (= (_ bv0 2) ?x210)))
 (let (($x72 (= $x30 true)))
 (let (($x92 (forall ((input.ind-%var2762X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var2762X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x211))))
 (let ((?x240 (input.spec-%var-x-1.1.1 input.ind-%var2762X)))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2762X)))
 (=> $x214 (= ?x240 ?x254))))))))
 ))
 (let (($x23 (forall ((input.ind-%var2761X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var2761X) (bvult input.ind-%var2761X input.dst.llvm-%n))))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2761X)))
 (= $x214 $x34))))
 ))
 (let (($x9 (and $x23 $x92)))
 (let (($x37 (= $x9 true)))
 (let (($x123 (forall ((input.ind-%var2752X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var2752X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x211))))
 (let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2752X)))
 (let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2752X)))
 (=> $x48 (= ?x80 ?x254))))))))
 ))
 (let (($x13 (forall ((input.ind-%var2751X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var2751X) (bvult input.ind-%var2751X input.dst.llvm-%n))))
 (let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2751X)))
 (= $x48 $x34))))
 ))
 (let (($x140 (and $x13 $x123)))
 (let (($x71 (= $x140 true)))
 (let ((?x241 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x241)))
 (let (($x186 (= ?x253 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x186 true)))
 (let (($x102 (and $x139 $x71)))
 (let (($x21 (and $x102 $x37)))
 (let (($x137 (and $x21 $x72)))
 (let (($x199 (and $x137 $x73)))
 (let (($x204 (and $x199 $x66)))
 (let (($x40 (and $x204 $x146)))
 (let (($x282 (and $x40 $x134)))
 (let (($x16 (and $x282 $x86)))
 (let (($x284 (and $x16 $x239)))
 (let (($x180 (and $x284 $x54)))
 (let (($x18 (and $x180 $x196)))
 (let (($x260 (and $x18 $x67)))
 (let (($x226 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x256 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x256 (_ bv1 32))))
 (let (($x60 (and $x224 $x260)))
 (let (($x251 (forall ((input.ind-%var2772X (_ BitVec 32)) )(let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2772X)))
 (let ((?x240 (input.spec-%var-x-1.1.1 input.ind-%var2772X)))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2772X)))
 (=> $x214 (= ?x240 ?x80))))))
 ))
 (let (($x91 (forall ((input.ind-%var2771X (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2771X)))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2771X)))
 (= $x214 $x48))))
 ))
 (let (($x7 (and $x91 $x251)))
 (let (($x174 (and $x7 $x60)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x167 $x174)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x207 (and $x26 $x257)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x33 $x207)))
 (let (($x68 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x272 (bvadd ?x35 (_ bv3 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x93 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x272)))
 (let (($x127 (or false (or false (and (and true (or $x279 $x93)) (or $x219 $x68))))))
 (let (($x47 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x141 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x64 (and $x141 $x116)))
 (let (($x83 (=> $x64 $x287)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x79 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x152 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x192 (bvmul (_ bv4294967295 32) ?x152)))
 (let ((?x220 (bvneg ?x192)))
 (let (($x81 (= ?x220 ?x79)))
 (let (($x287 (= $x81 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x185 (bvneg ?x198)))
 (let (($x160 (= ?x185 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x160 true)))
 (let (($x111 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x196 (= $x111 true)))
 (let (($x38 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x54 (= $x38 true)))
 (let (($x275 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x275 true)))
 (let (($x44 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x86 (= $x44 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x63 (bvsub ?x35 ?x288)))
 (let (($x291 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x63) (bvult ?x35 ?x63))))
 (let (($x283 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x229 (ite $x283 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x133 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvmul (_ bv4 64) ?x133)))
 (let ((?x51 ((_ extract 63 32) ?x264)))
 (let (($x105 (= ?x51 ?x229)))
 (let (($x193 (and $x105 $x291)))
 (let (($x96 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x85 (and $x96 $x193)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x25 (=> $x131 $x85)))
 (let (($x134 (= $x25 true)))
 (let (($x56 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x146 (= $x56 true)))
 (let (($x66 (= $x131 true)))
 (let ((?x62 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x159 (= (_ bv0 32) ?x62)))
 (let ((?x265 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x252 (= (_ bv0 32) ?x265)))
 (let ((?x154 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x263 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x263)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x173 $x125)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (and $x20 $x244)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x76 (and $x271 $x197)))
 (let (($x49 (not $x76)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x168 $x206)))
 (let (($x55 (and (not $x129) $x49)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x262 $x8)))
 (let (($x236 (not $x153)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (and $x22 $x243)))
 (let (($x29 (and (not $x188) $x236)))
 (let (($x130 (and (and (and (and (and (and $x29 $x55) $x228) $x149) $x126) $x28) $x252)))
 (let (($x157 (and $x130 $x159)))
 (let (($x276 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x94 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x94)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x94)))
 (let (($x52 (or false (or false (and (and true (or $x166 $x74)) (or $x230 $x276))))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x52)))
 (let (($x122 (and $x132 $x157)))
 (let (($x73 (= $x122 true)))
 (let ((?x210 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x30 (= (_ bv0 2) ?x210)))
 (let (($x72 (= $x30 true)))
 (let (($x92 (forall ((input.ind-%var2762X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var2762X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x211))))
 (let ((?x240 (input.spec-%var-x-1.1.1 input.ind-%var2762X)))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2762X)))
 (=> $x214 (= ?x240 ?x254))))))))
 ))
 (let (($x23 (forall ((input.ind-%var2761X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var2761X) (bvult input.ind-%var2761X input.dst.llvm-%n))))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2761X)))
 (= $x214 $x34))))
 ))
 (let (($x9 (and $x23 $x92)))
 (let (($x37 (= $x9 true)))
 (let (($x123 (forall ((input.ind-%var2752X (_ BitVec 32)) )(let ((?x170 (bvadd (bvmul input.ind-%var2752X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x211))))
 (let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2752X)))
 (let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2752X)))
 (=> $x48 (= ?x80 ?x254))))))))
 ))
 (let (($x13 (forall ((input.ind-%var2751X (_ BitVec 32)) )(let (($x34 (and (bvule (_ bv0 32) input.ind-%var2751X) (bvult input.ind-%var2751X input.dst.llvm-%n))))
 (let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2751X)))
 (= $x48 $x34))))
 ))
 (let (($x140 (and $x13 $x123)))
 (let (($x71 (= $x140 true)))
 (let ((?x241 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x253 (bvneg ?x241)))
 (let (($x186 (= ?x253 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x139 (= $x186 true)))
 (let (($x102 (and $x139 $x71)))
 (let (($x21 (and $x102 $x37)))
 (let (($x137 (and $x21 $x72)))
 (let (($x199 (and $x137 $x73)))
 (let (($x204 (and $x199 $x66)))
 (let (($x40 (and $x204 $x146)))
 (let (($x282 (and $x40 $x134)))
 (let (($x16 (and $x282 $x86)))
 (let (($x284 (and $x16 $x239)))
 (let (($x180 (and $x284 $x54)))
 (let (($x18 (and $x180 $x196)))
 (let (($x260 (and $x18 $x67)))
 (let (($x226 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x256 (ite $x226 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x256 (_ bv1 32))))
 (let (($x60 (and $x224 $x260)))
 (let (($x251 (forall ((input.ind-%var2772X (_ BitVec 32)) )(let ((?x80 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2772X)))
 (let ((?x240 (input.spec-%var-x-1.1.1 input.ind-%var2772X)))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2772X)))
 (=> $x214 (= ?x240 ?x80))))))
 ))
 (let (($x91 (forall ((input.ind-%var2771X (_ BitVec 32)) )(let (($x48 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2771X)))
 (let (($x214 (input.spec-%var-x-1.0.1 input.ind-%var2771X)))
 (= $x214 $x48))))
 ))
 (let (($x7 (and $x91 $x251)))
 (let (($x174 (and $x7 $x60)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x257 (and $x167 $x174)))
 (let (($x26 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x207 (and $x26 $x257)))
 (let (($x33 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x116 (and $x33 $x207)))
 (let (($x68 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x272 (bvadd ?x35 (_ bv3 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x93 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x272)))
 (let (($x127 (or false (or false (and (and true (or $x279 $x93)) (or $x219 $x68))))))
 (let (($x47 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x127)))
 (let (($x141 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x127)))
 (let (($x64 (and $x141 $x116)))
 (let (($x83 (=> $x64 $x287)))
 (not $x83)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x120))))
 (let ((?x250 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x249)))
 (let ((?x222 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x150 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x222)))
 (let ((?x50 (bvmul (_ bv4294967295 32) ?x150)))
 (let ((?x277 (bvneg ?x50)))
 (let (($x280 (= ?x277 ?x250)))
 (let (($x97 (= $x280 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x258)))
 (let (($x221 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x221 true)))
 (let ((?x165 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x165)))
 (let (($x17 (= ?x155 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x17 true)))
 (let ((?x181 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x151 (= (_ bv0 2) ?x181)))
 (let (($x225 (= $x151 true)))
 (let (($x215 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x215 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x115 true)))
 (let (($x268 (forall ((input.ind-%var2797X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var2797X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x198))))
 (let ((?x259 (input.spec-%var-x-1.1.1 input.ind-%var2797X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2797X)))
 (=> $x91 (= ?x259 ?x174))))))))
 ))
 (let (($x274 (forall ((input.ind-%var2796X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var2796X) (bvult input.ind-%var2796X input.dst.llvm-%n))))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2796X)))
 (= $x91 $x264))))
 ))
 (let (($x285 (and $x274 $x268)))
 (let (($x53 (= $x285 true)))
 (let (($x116 (forall ((input.ind-%var2787X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var2787X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x198))))
 (let ((?x253 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2787X)))
 (let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2787X)))
 (=> $x31 (= ?x253 ?x174))))))))
 ))
 (let (($x283 (forall ((input.ind-%var2786X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var2786X) (bvult input.ind-%var2786X input.dst.llvm-%n))))
 (let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2786X)))
 (= $x31 $x264))))
 ))
 (let (($x64 (and $x283 $x116)))
 (let (($x152 (= $x64 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x66 true)))
 (let (($x122 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x122 true)))
 (let (($x265 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 ?x288)) (bvult ?x35 (bvsub ?x35 ?x288)))))
 (let (($x263 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x244 (ite $x263 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x246 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x20 (bvmul (_ bv4 64) ?x246)))
 (let ((?x173 ((_ extract 63 32) ?x20)))
 (let (($x126 (= ?x173 ?x244)))
 (let (($x252 (and $x126 $x265)))
 (let (($x248 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x130 (and $x248 $x252)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (=> $x131 $x130)))
 (let (($x159 (= $x62 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x55 true)))
 (let (($x197 (= $x131 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x144)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x243)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x233)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x292 (and $x276 $x163)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x230 $x292)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x72 $x137)))
 (let (($x183 (not $x95)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x41 $x210)))
 (let (($x94 (and (not $x30) $x183)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x237 $x89)))
 (let (($x9 (not $x92)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x113 $x100)))
 (let (($x21 (and (not $x23) $x9)))
 (let (($x206 (and (and (and (and (and (and $x21 $x94) $x74) $x65) $x52) $x22) $x188)))
 (let (($x129 (and $x206 $x262)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x71 (or false (or false (and (and true (or $x255 $x110)) (or $x254 $x143))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x286 (and $x101 $x129)))
 (let (($x271 (= $x286 true)))
 (let (($x76 (and $x271 $x197)))
 (let (($x108 (and $x76 $x15)))
 (let (($x157 (and $x108 $x159)))
 (let (($x199 (and $x157 $x73)))
 (let (($x187 (and $x199 $x204)))
 (let (($x192 (and $x187 $x152)))
 (let (($x162 (and $x192 $x53)))
 (let (($x78 (and $x162 $x178)))
 (let (($x269 (and $x78 $x245)))
 (let (($x24 (and $x269 $x225)))
 (let (($x45 (and $x24 $x27)))
 (let (($x84 (and $x45 $x138)))
 (let (($x99 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x194 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x194 (_ bv1 32))))
 (let (($x289 (and $x170 $x84)))
 (let (($x34 (forall ((input.ind-%var2807X (_ BitVec 32)) )(let ((?x253 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2807X)))
 (let ((?x259 (input.spec-%var-x-1.1.1 input.ind-%var2807X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2807X)))
 (=> $x91 (= ?x259 ?x253))))))
 ))
 (let (($x270 (forall ((input.ind-%var2806X (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2806X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2806X)))
 (= $x91 $x31))))
 ))
 (let (($x5 (and $x270 $x34)))
 (let (($x223 (and $x5 $x289)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x231 $x223)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x238 $x118)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x175 $x295)))
 (let (($x114 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x35 (_ bv3 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x179 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x141 (or false (or false (and (and true (or $x11 $x179)) (or $x201 $x114))))))
 (let (($x33 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x217 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x10 (and $x217 $x189)))
 (let (($x39 (=> $x10 $x97)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv1 32))) (select input.dst.llvm-mem ?x35))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x35 (_ bv2 32))) ?x120))))
 (let ((?x250 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x249)))
 (let ((?x222 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x150 (bvadd input.spec-%var-ret-0.L3%6%bbentry ?x222)))
 (let ((?x50 (bvmul (_ bv4294967295 32) ?x150)))
 (let ((?x277 (bvneg ?x50)))
 (let (($x280 (= ?x277 ?x250)))
 (let (($x97 (= $x280 true)))
 (let ((?x258 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x164 (bvneg ?x258)))
 (let (($x221 (= ?x164 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x138 (= $x221 true)))
 (let ((?x165 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x155 (bvneg ?x165)))
 (let (($x17 (= ?x155 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x27 (= $x17 true)))
 (let ((?x181 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x151 (= (_ bv0 2) ?x181)))
 (let (($x225 (= $x151 true)))
 (let (($x215 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (= $x215 true)))
 (let (($x115 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x178 (= $x115 true)))
 (let (($x268 (forall ((input.ind-%var2797X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var2797X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x198))))
 (let ((?x259 (input.spec-%var-x-1.1.1 input.ind-%var2797X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2797X)))
 (=> $x91 (= ?x259 ?x174))))))))
 ))
 (let (($x274 (forall ((input.ind-%var2796X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var2796X) (bvult input.ind-%var2796X input.dst.llvm-%n))))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2796X)))
 (= $x91 $x264))))
 ))
 (let (($x285 (and $x274 $x268)))
 (let (($x53 (= $x285 true)))
 (let (($x116 (forall ((input.ind-%var2787X (_ BitVec 32)) )(let ((?x180 (bvadd (bvmul input.ind-%var2787X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x198))))
 (let ((?x253 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2787X)))
 (let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2787X)))
 (=> $x31 (= ?x253 ?x174))))))))
 ))
 (let (($x283 (forall ((input.ind-%var2786X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var2786X) (bvult input.ind-%var2786X input.dst.llvm-%n))))
 (let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2786X)))
 (= $x31 $x264))))
 ))
 (let (($x64 (and $x283 $x116)))
 (let (($x152 (= $x64 true)))
 (let (($x66 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x204 (= $x66 true)))
 (let (($x122 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x73 (= $x122 true)))
 (let (($x265 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 (bvsub ?x35 ?x288)) (bvult ?x35 (bvsub ?x35 ?x288)))))
 (let (($x263 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x244 (ite $x263 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x246 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x20 (bvmul (_ bv4 64) ?x246)))
 (let ((?x173 ((_ extract 63 32) ?x20)))
 (let (($x126 (= ?x173 ?x244)))
 (let (($x252 (and $x126 $x265)))
 (let (($x248 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x130 (and $x248 $x252)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x62 (=> $x131 $x130)))
 (let (($x159 (= $x62 true)))
 (let (($x55 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x15 (= $x55 true)))
 (let (($x197 (= $x131 true)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x262 (= (_ bv0 32) ?x144)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x188 (= (_ bv0 32) ?x243)))
 (let ((?x132 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x22 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x132)))
 (let ((?x233 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x233)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x292 (and $x276 $x163)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x230 $x292)))
 (let (($x65 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x137 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (and $x72 $x137)))
 (let (($x183 (not $x95)))
 (let (($x210 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (and $x41 $x210)))
 (let (($x94 (and (not $x30) $x183)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x237 $x89)))
 (let (($x9 (not $x92)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x113 $x100)))
 (let (($x21 (and (not $x23) $x9)))
 (let (($x206 (and (and (and (and (and (and $x21 $x94) $x74) $x65) $x52) $x22) $x188)))
 (let (($x129 (and $x206 $x262)))
 (let (($x143 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x110 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x71 (or false (or false (and (and true (or $x255 $x110)) (or $x254 $x143))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x286 (and $x101 $x129)))
 (let (($x271 (= $x286 true)))
 (let (($x76 (and $x271 $x197)))
 (let (($x108 (and $x76 $x15)))
 (let (($x157 (and $x108 $x159)))
 (let (($x199 (and $x157 $x73)))
 (let (($x187 (and $x199 $x204)))
 (let (($x192 (and $x187 $x152)))
 (let (($x162 (and $x192 $x53)))
 (let (($x78 (and $x162 $x178)))
 (let (($x269 (and $x78 $x245)))
 (let (($x24 (and $x269 $x225)))
 (let (($x45 (and $x24 $x27)))
 (let (($x84 (and $x45 $x138)))
 (let (($x99 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x194 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x194 (_ bv1 32))))
 (let (($x289 (and $x170 $x84)))
 (let (($x34 (forall ((input.ind-%var2807X (_ BitVec 32)) )(let ((?x253 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2807X)))
 (let ((?x259 (input.spec-%var-x-1.1.1 input.ind-%var2807X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2807X)))
 (=> $x91 (= ?x259 ?x253))))))
 ))
 (let (($x270 (forall ((input.ind-%var2806X (_ BitVec 32)) )(let (($x31 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2806X)))
 (let (($x91 (input.spec-%var-x-1.0.1 input.ind-%var2806X)))
 (= $x91 $x31))))
 ))
 (let (($x5 (and $x270 $x34)))
 (let (($x223 (and $x5 $x289)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x118 (and $x231 $x223)))
 (let (($x238 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x295 (and $x238 $x118)))
 (let (($x175 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x189 (and $x175 $x295)))
 (let (($x114 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd ?x35 (_ bv3 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x179 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x93)))
 (let (($x141 (or false (or false (and (and true (or $x11 $x179)) (or $x201 $x114))))))
 (let (($x33 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x217 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x10 (and $x217 $x189)))
 (let (($x39 (=> $x10 $x97)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 183 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x232 (bvule ?x172 (_ bv4294967294 32))))
 (let (($x36 (= $x232 true)))
 (let ((?x290 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x290)))
 (let (($x38 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x38 true)))
 (let (($x184 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x184 true)))
 (let (($x86 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x86 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x40)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x267)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (and $x224 $x80)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x226 $x241)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x280 $x97)))
 (let (($x59 (not $x39)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x209 $x249)))
 (let (($x57 (and (not $x250) $x59)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x135 $x171)))
 (let (($x147 (not $x136)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x27 $x45)))
 (let (($x120 (and (not $x142) $x147)))
 (let (($x44 (and (and (and (and (and (and $x120 $x57) $x145) $x205) $x48) $x229) $x56)))
 (let (($x193 (and $x44 $x200)))
 (let (($x295 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x221)))
 (let (($x150 (or false (or false (and (and true (or $x138 $x84)) (or $x118 $x295))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x85 (and $x277 $x193)))
 (let (($x291 (= $x85 true)))
 (let (($x165 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x155 (= $x165 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x225 (= (_ bv0 2) ?x151)))
 (let (($x24 (= $x225 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x245 true)))
 (let (($x115 (forall ((input.ind-%var2833X (_ BitVec 32)) )(let ((?x252 (bvadd (bvmul input.ind-%var2833X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x157))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var2833X)))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2833X)))
 (=> $x270 (= ?x158 ?x187))))))))
 ))
 (let (($x196 (forall ((input.ind-%var2832X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var2832X) (bvult input.ind-%var2832X input.dst.llvm-%n))))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2832X)))
 (= $x270 $x271))))
 ))
 (let (($x178 (and $x196 $x115)))
 (let (($x78 (= $x178 true)))
 (let (($x264 (forall ((input.ind-%var2823X (_ BitVec 32)) )(let ((?x252 (bvadd (bvmul input.ind-%var2823X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x157))))
 (let ((?x255 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2823X)))
 (let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2823X)))
 (=> $x119 (= ?x255 ?x187))))))))
 ))
 (let (($x76 (forall ((input.ind-%var2822X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var2822X) (bvult input.ind-%var2822X input.dst.llvm-%n))))
 (let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2822X)))
 (= $x119 $x271))))
 ))
 (let (($x51 (and $x76 $x264)))
 (let (($x283 (= $x51 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x29 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x74 (bvsub ?x35 ?x288)))
 (let (($x236 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x74) (bvult ?x35 ?x74))))
 (let (($x94 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x8 (ite $x94 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x137 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x95 (bvmul (_ bv4 64) ?x137)))
 (let ((?x183 ((_ extract 63 32) ?x95)))
 (let (($x166 (= ?x183 ?x8)))
 (let (($x230 (and $x166 $x236)))
 (let (($x109 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x276 (and $x109 $x230)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x131 $x276)))
 (let (($x163 (= $x233 true)))
 (let ((?x237 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x237)))
 (let (($x9 (= ?x89 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x9 true)))
 (let (($x100 (= $x131 true)))
 (let (($x41 (and $x100 $x21)))
 (let (($x292 (and $x41 $x163)))
 (let (($x22 (and $x292 $x132)))
 (let (($x63 (and $x22 $x283)))
 (let (($x215 (and $x63 $x78)))
 (let (($x213 (and $x215 $x269)))
 (let (($x19 (and $x213 $x24)))
 (let (($x6 (and $x19 $x155)))
 (let (($x25 (and $x6 $x291)))
 (let (($x146 (and $x25 $x239)))
 (let (($x284 (and $x146 $x96)))
 (let (($x220 (and $x284 $x90)))
 (let (($x71 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x101 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x101 (_ bv1 32))))
 (let (($x81 (and $x113 $x220)))
 (let (($x46 (forall ((input.ind-%var2843X (_ BitVec 32)) )(let ((?x255 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2843X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var2843X)))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2843X)))
 (=> $x270 (= ?x158 ?x255))))))
 ))
 (let (($x99 (forall ((input.ind-%var2842X (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2842X)))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2842X)))
 (= $x270 $x119))))
 ))
 (let (($x123 (and $x99 $x46)))
 (let (($x287 (and $x123 $x81)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x273 $x287)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x227 (and $x167 $x208)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x121 $x227)))
 (let (($x127 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x35 (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x219 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x217 (or false (or false (and (and true (or $x98 $x219)) (or $x82 $x127))))))
 (let (($x175 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x217)))
 (let (($x293 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x217)))
 (let (($x107 (and $x293 $x12)))
 (let (($x58 (=> $x107 $x36)))
 (not $x58))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x232 (bvule ?x172 (_ bv4294967294 32))))
 (let (($x36 (= $x232 true)))
 (let ((?x290 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x105 (bvneg ?x290)))
 (let (($x38 (= ?x105 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x90 (= $x38 true)))
 (let (($x184 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x96 (= $x184 true)))
 (let (($x86 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x86 true)))
 (let ((?x40 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x200 (= (_ bv0 32) ?x40)))
 (let ((?x267 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x267)))
 (let ((?x251 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x229 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x251)))
 (let ((?x214 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x214)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x241 (and $x224 $x80)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (and $x226 $x241)))
 (let (($x205 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x39 (and $x280 $x97)))
 (let (($x59 (not $x39)))
 (let (($x249 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x209 $x249)))
 (let (($x57 (and (not $x250) $x59)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x135 $x171)))
 (let (($x147 (not $x136)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x27 $x45)))
 (let (($x120 (and (not $x142) $x147)))
 (let (($x44 (and (and (and (and (and (and $x120 $x57) $x145) $x205) $x48) $x229) $x56)))
 (let (($x193 (and $x44 $x200)))
 (let (($x295 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x221 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x221)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x138 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x221)))
 (let (($x150 (or false (or false (and (and true (or $x138 $x84)) (or $x118 $x295))))))
 (let (($x277 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x150)))
 (let (($x85 (and $x277 $x193)))
 (let (($x291 (= $x85 true)))
 (let (($x165 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x155 (= $x165 true)))
 (let ((?x151 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x225 (= (_ bv0 2) ?x151)))
 (let (($x24 (= $x225 true)))
 (let (($x245 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x269 (= $x245 true)))
 (let (($x115 (forall ((input.ind-%var2833X (_ BitVec 32)) )(let ((?x252 (bvadd (bvmul input.ind-%var2833X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x157))))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var2833X)))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2833X)))
 (=> $x270 (= ?x158 ?x187))))))))
 ))
 (let (($x196 (forall ((input.ind-%var2832X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var2832X) (bvult input.ind-%var2832X input.dst.llvm-%n))))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2832X)))
 (= $x270 $x271))))
 ))
 (let (($x178 (and $x196 $x115)))
 (let (($x78 (= $x178 true)))
 (let (($x264 (forall ((input.ind-%var2823X (_ BitVec 32)) )(let ((?x252 (bvadd (bvmul input.ind-%var2823X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem ?x252))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x252 (_ bv2 32))) ?x157))))
 (let ((?x255 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2823X)))
 (let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2823X)))
 (=> $x119 (= ?x255 ?x187))))))))
 ))
 (let (($x76 (forall ((input.ind-%var2822X (_ BitVec 32)) )(let (($x271 (and (bvule (_ bv0 32) input.ind-%var2822X) (bvult input.ind-%var2822X input.dst.llvm-%n))))
 (let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2822X)))
 (= $x119 $x271))))
 ))
 (let (($x51 (and $x76 $x264)))
 (let (($x283 (= $x51 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x132 (= $x29 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x74 (bvsub ?x35 ?x288)))
 (let (($x236 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x74) (bvult ?x35 ?x74))))
 (let (($x94 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x8 (ite $x94 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x137 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x95 (bvmul (_ bv4 64) ?x137)))
 (let ((?x183 ((_ extract 63 32) ?x95)))
 (let (($x166 (= ?x183 ?x8)))
 (let (($x230 (and $x166 $x236)))
 (let (($x109 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x276 (and $x109 $x230)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x233 (=> $x131 $x276)))
 (let (($x163 (= $x233 true)))
 (let ((?x237 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x89 (bvneg ?x237)))
 (let (($x9 (= ?x89 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x21 (= $x9 true)))
 (let (($x100 (= $x131 true)))
 (let (($x41 (and $x100 $x21)))
 (let (($x292 (and $x41 $x163)))
 (let (($x22 (and $x292 $x132)))
 (let (($x63 (and $x22 $x283)))
 (let (($x215 (and $x63 $x78)))
 (let (($x213 (and $x215 $x269)))
 (let (($x19 (and $x213 $x24)))
 (let (($x6 (and $x19 $x155)))
 (let (($x25 (and $x6 $x291)))
 (let (($x146 (and $x25 $x239)))
 (let (($x284 (and $x146 $x96)))
 (let (($x220 (and $x284 $x90)))
 (let (($x71 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x101 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x101 (_ bv1 32))))
 (let (($x81 (and $x113 $x220)))
 (let (($x46 (forall ((input.ind-%var2843X (_ BitVec 32)) )(let ((?x255 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2843X)))
 (let ((?x158 (input.spec-%var-x-1.1.1 input.ind-%var2843X)))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2843X)))
 (=> $x270 (= ?x158 ?x255))))))
 ))
 (let (($x99 (forall ((input.ind-%var2842X (_ BitVec 32)) )(let (($x119 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2842X)))
 (let (($x270 (input.spec-%var-x-1.0.1 input.ind-%var2842X)))
 (= $x270 $x119))))
 ))
 (let (($x123 (and $x99 $x46)))
 (let (($x287 (and $x123 $x81)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x208 (and $x273 $x287)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x227 (and $x167 $x208)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x12 (and $x121 $x227)))
 (let (($x127 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x179 (bvadd ?x35 (_ bv3 32))))
 (let (($x82 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x179)))
 (let (($x219 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x179)))
 (let (($x217 (or false (or false (and (and true (or $x98 $x219)) (or $x82 $x127))))))
 (let (($x175 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x217)))
 (let (($x293 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x217)))
 (let (($x107 (and $x293 $x12)))
 (let (($x58 (=> $x107 $x36)))
 (not $x58))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 178 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x211 (bvsge ?x285 (_ bv0 32))))
 (let (($x170 (= $x211 true)))
 (let ((?x207 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x207)))
 (let (($x257 (= ?x116 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x257 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x152 (= $x247 true)))
 (let (($x67 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x67 true)))
 (let ((?x244 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x244)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x248)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x242 $x154)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x228 $x263)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x91 $x253)))
 (let (($x31 (not $x177)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x102 $x194)))
 (let (($x49 (and (not $x103) $x31)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x235 $x106)))
 (let (($x61 (not $x17)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x184 $x96)))
 (let (($x259 (and (not $x58) $x61)))
 (let (($x42 (and (and (and (and (and (and $x259 $x49) $x168) $x206) $x125) $x246) $x20)))
 (let (($x198 (and $x42 $x32)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x172 (or false (or false (and (and true (or $x38 $x90)) (or $x287 $x208))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x54 (and $x36 $x198)))
 (let (($x260 (= $x54 true)))
 (let (($x25 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (= $x25 true)))
 (let ((?x200 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x193 (= (_ bv0 2) ?x200)))
 (let (($x85 (= $x193 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x267 true)))
 (let (($x275 (forall ((input.ind-%var2868X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2868X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x289))))
 (let ((?x100 (input.spec-%var-x-1.1.1 input.ind-%var2868X)))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2868X)))
 (=> $x99 (= ?x100 ?x222))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2867X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var2867X) (bvult input.ind-%var2867X input.dst.llvm-%n))))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2867X)))
 (= $x99 $x283))))
 ))
 (let (($x251 (and $x250 $x275)))
 (let (($x229 (= $x251 true)))
 (let (($x27 (forall ((input.ind-%var2858X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2858X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x289))))
 (let ((?x237 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2858X)))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2858X)))
 (=> $x254 (= ?x237 ?x222))))))))
 ))
 (let (($x160 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var2857X) (bvult input.ind-%var2857X input.dst.llvm-%n))))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2857X)))
 (= $x254 $x283))))
 ))
 (let (($x45 (and $x160 $x27)))
 (let (($x142 (= $x45 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x73 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x129 (bvsub ?x35 ?x288)))
 (let (($x108 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x129) (bvult ?x35 ?x129))))
 (let (($x132 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x132 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x292 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvmul (_ bv4 64) ?x292)))
 (let ((?x29 ((_ extract 63 32) ?x52)))
 (let (($x286 (= ?x29 ?x22)))
 (let (($x265 (and $x286 $x108)))
 (let (($x233 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x252 (and $x233 $x265)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x131 $x252)))
 (let (($x204 (= $x66 true)))
 (let ((?x166 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x166)))
 (let (($x70 (= ?x153 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x70 true)))
 (let (($x183 (= $x131 true)))
 (let (($x236 (and $x183 $x65)))
 (let (($x173 (and $x236 $x204)))
 (let (($x159 (and $x173 $x62)))
 (let (($x128 (and $x159 $x142)))
 (let (($x282 (and $x128 $x229)))
 (let (($x44 (and $x282 $x56)))
 (let (($x291 (and $x44 $x85)))
 (let (($x239 (and $x291 $x86)))
 (let (($x60 (and $x239 $x260)))
 (let (($x274 (and $x60 $x174)))
 (let (($x192 (and $x274 $x152)))
 (let (($x14 (and $x192 $x64)))
 (let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x137 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x137 (_ bv1 32))))
 (let (($x190 (and $x95 $x14)))
 (let (($x210 (forall ((input.ind-%var2878X (_ BitVec 32)) )(let ((?x237 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2878X)))
 (let ((?x100 (input.spec-%var-x-1.1.1 input.ind-%var2878X)))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2878X)))
 (=> $x99 (= ?x100 ?x237))))))
 ))
 (let (($x140 (forall ((input.ind-%var2877X (_ BitVec 32)) )(let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2877X)))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2877X)))
 (= $x99 $x254))))
 ))
 (let (($x30 (and $x140 $x210)))
 (let (($x180 (and $x30 $x190)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x7 $x180)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x185 (and $x231 $x134)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x26 $x185)))
 (let (($x141 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd ?x35 (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x201 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x293 (or false (or false (and (and true (or $x203 $x201)) (or $x47 $x141))))))
 (let (($x121 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x293)))
 (let (($x272 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x293)))
 (let (($x111 (and $x272 $x268)))
 (let (($x117 (=> $x111 $x170)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (bvadd (_ bv1 32) input.spec-%var-i-0.L3%6%bbentry)))
 (let (($x211 (bvsge ?x285 (_ bv0 32))))
 (let (($x170 (= $x211 true)))
 (let ((?x207 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x116 (bvneg ?x207)))
 (let (($x257 (= ?x116 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x64 (= $x257 true)))
 (let (($x247 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x152 (= $x247 true)))
 (let (($x67 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x174 (= $x67 true)))
 (let ((?x244 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x244)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x20 (= (_ bv0 32) ?x248)))
 (let ((?x149 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x246 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x149)))
 (let ((?x126 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x126)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x263 (and $x242 $x154)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (and $x228 $x263)))
 (let (($x206 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x177 (and $x91 $x253)))
 (let (($x31 (not $x177)))
 (let (($x194 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x102 $x194)))
 (let (($x49 (and (not $x103) $x31)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x235 $x106)))
 (let (($x61 (not $x17)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x184 $x96)))
 (let (($x259 (and (not $x58) $x61)))
 (let (($x42 (and (and (and (and (and (and $x259 $x49) $x168) $x206) $x125) $x246) $x20)))
 (let (($x198 (and $x42 $x32)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x105 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x105)))
 (let (($x172 (or false (or false (and (and true (or $x38 $x90)) (or $x287 $x208))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x172)))
 (let (($x54 (and $x36 $x198)))
 (let (($x260 (= $x54 true)))
 (let (($x25 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (= $x25 true)))
 (let ((?x200 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x193 (= (_ bv0 2) ?x200)))
 (let (($x85 (= $x193 true)))
 (let (($x267 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x56 (= $x267 true)))
 (let (($x275 (forall ((input.ind-%var2868X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2868X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x289))))
 (let ((?x100 (input.spec-%var-x-1.1.1 input.ind-%var2868X)))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2868X)))
 (=> $x99 (= ?x100 ?x222))))))))
 ))
 (let (($x250 (forall ((input.ind-%var2867X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var2867X) (bvult input.ind-%var2867X input.dst.llvm-%n))))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2867X)))
 (= $x99 $x283))))
 ))
 (let (($x251 (and $x250 $x275)))
 (let (($x229 (= $x251 true)))
 (let (($x27 (forall ((input.ind-%var2858X (_ BitVec 32)) )(let ((?x50 (bvadd (bvmul input.ind-%var2858X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv1 32))) (select input.dst.llvm-mem ?x50))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x50 (_ bv2 32))) ?x289))))
 (let ((?x237 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2858X)))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2858X)))
 (=> $x254 (= ?x237 ?x222))))))))
 ))
 (let (($x160 (forall ((input.ind-%var2857X (_ BitVec 32)) )(let (($x283 (and (bvule (_ bv0 32) input.ind-%var2857X) (bvult input.ind-%var2857X input.dst.llvm-%n))))
 (let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2857X)))
 (= $x254 $x283))))
 ))
 (let (($x45 (and $x160 $x27)))
 (let (($x142 (= $x45 true)))
 (let (($x73 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x62 (= $x73 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x129 (bvsub ?x35 ?x288)))
 (let (($x108 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x129) (bvult ?x35 ?x129))))
 (let (($x132 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x22 (ite $x132 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x292 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x52 (bvmul (_ bv4 64) ?x292)))
 (let ((?x29 ((_ extract 63 32) ?x52)))
 (let (($x286 (= ?x29 ?x22)))
 (let (($x265 (and $x286 $x108)))
 (let (($x233 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x252 (and $x233 $x265)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x66 (=> $x131 $x252)))
 (let (($x204 (= $x66 true)))
 (let ((?x166 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x153 (bvneg ?x166)))
 (let (($x70 (= ?x153 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x65 (= $x70 true)))
 (let (($x183 (= $x131 true)))
 (let (($x236 (and $x183 $x65)))
 (let (($x173 (and $x236 $x204)))
 (let (($x159 (and $x173 $x62)))
 (let (($x128 (and $x159 $x142)))
 (let (($x282 (and $x128 $x229)))
 (let (($x44 (and $x282 $x56)))
 (let (($x291 (and $x44 $x85)))
 (let (($x239 (and $x291 $x86)))
 (let (($x60 (and $x239 $x260)))
 (let (($x274 (and $x60 $x174)))
 (let (($x192 (and $x274 $x152)))
 (let (($x14 (and $x192 $x64)))
 (let (($x72 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x137 (ite $x72 (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x137 (_ bv1 32))))
 (let (($x190 (and $x95 $x14)))
 (let (($x210 (forall ((input.ind-%var2878X (_ BitVec 32)) )(let ((?x237 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2878X)))
 (let ((?x100 (input.spec-%var-x-1.1.1 input.ind-%var2878X)))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2878X)))
 (=> $x99 (= ?x100 ?x237))))))
 ))
 (let (($x140 (forall ((input.ind-%var2877X (_ BitVec 32)) )(let (($x254 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2877X)))
 (let (($x99 (input.spec-%var-x-1.0.1 input.ind-%var2877X)))
 (= $x99 $x254))))
 ))
 (let (($x30 (and $x140 $x210)))
 (let (($x180 (and $x30 $x190)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x134 (and $x7 $x180)))
 (let (($x231 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x185 (and $x231 $x134)))
 (let (($x26 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x26 $x185)))
 (let (($x141 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd ?x35 (_ bv3 32))))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x201 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x219)))
 (let (($x293 (or false (or false (and (and true (or $x203 $x201)) (or $x47 $x141))))))
 (let (($x121 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x293)))
 (let (($x272 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x293)))
 (let (($x111 (and $x272 $x268)))
 (let (($x117 (=> $x111 $x170)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (bvule ?x80 (_ bv4294967294 32))))
 (let (($x101 (= $x92 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x218)))
 (let (($x57 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x57 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x226 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x39 true)))
 (let (($x135 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x135 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x213 (bvsub ?x35 ?x288)))
 (let (($x133 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x213) (bvult ?x35 ?x213))))
 (let (($x245 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x269 (ite $x245 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x165 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvmul (_ bv4 64) ?x165)))
 (let ((?x225 ((_ extract 63 32) ?x151)))
 (let (($x215 (= ?x225 ?x269)))
 (let (($x182 (and $x215 $x133)))
 (let (($x78 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x6 (and $x78 $x182)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (=> $x131 $x6)))
 (let (($x258 (= $x53 true)))
 (let (($x130 (= $x131 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x89)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x146)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x285)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x111 $x211)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x268 $x170)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x192 $x207)))
 (let (($x257 (not $x116)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x274 $x247)))
 (let (($x14 (and (not $x152) $x257)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (and $x198 $x54)))
 (let (($x60 (not $x260)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x188 $x206)))
 (let (($x174 (and (not $x32) $x60)))
 (let (($x37 (and (and (and (and (and (and $x174 $x14) $x180) $x185) $x117) $x234) $x143)))
 (let (($x119 (and $x37 $x158)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x20 (or false (or false (and (and true (or $x126 $x154)) (or $x28 $x149))))))
 (let (($x244 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x46 (and $x244 $x119)))
 (let (($x196 (= $x46 true)))
 (let ((?x49 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x243 (= (_ bv0 2) ?x49)))
 (let (($x15 (= $x243 true)))
 (let (($x34 (forall ((input.ind-%var2903X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var2903X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x229))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var2903X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2903X)))
 (=> $x140 (= ?x183 ?x200))))))))
 ))
 (let (($x81 (forall ((input.ind-%var2902X (_ BitVec 32)) )(let (($x160 (and (bvule (_ bv0 32) input.ind-%var2902X) (bvult input.ind-%var2902X input.dst.llvm-%n))))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2902X)))
 (= $x140 $x160))))
 ))
 (let (($x91 (and $x81 $x34)))
 (let (($x253 (= $x91 true)))
 (let (($x291 (forall ((input.ind-%var2893X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var2893X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x229))))
 (let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2893X)))
 (let (($x21 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2893X)))
 (=> $x21 (= ?x166 ?x200))))))))
 ))
 (let (($x164 (forall ((input.ind-%var2892X (_ BitVec 32)) )(let (($x160 (and (bvule (_ bv0 32) input.ind-%var2892X) (bvult input.ind-%var2892X input.dst.llvm-%n))))
 (let (($x21 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2892X)))
 (= $x21 $x160))))
 ))
 (let (($x25 (and $x164 $x291)))
 (let (($x86 (= $x25 true)))
 (let (($x66 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x204 (= $x66 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x129)))
 (let (($x108 (= ?x197 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x108 true)))
 (let (($x132 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x132 true)))
 (let (($x252 (and $x22 $x265)))
 (let (($x173 (and $x252 $x204)))
 (let (($x239 (and $x173 $x86)))
 (let (($x177 (and $x239 $x253)))
 (let (($x168 (and $x177 $x15)))
 (let (($x162 (and $x168 $x196)))
 (let (($x199 (and $x162 $x130)))
 (let (($x97 (and $x199 $x258)))
 (let (($x147 (and $x97 $x136)))
 (let (($x16 (and $x147 $x59)))
 (let (($x240 (and $x16 $x104)))
 (let (($x205 (and $x240 $x145)))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x292 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x292 (_ bv1 32))))
 (let (($x224 (and $x52 $x205)))
 (let (($x230 (forall ((input.ind-%var2913X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2913X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var2913X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2913X)))
 (=> $x140 (= ?x183 ?x166))))))
 ))
 (let (($x109 (forall ((input.ind-%var2912X (_ BitVec 32)) )(let (($x21 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2912X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2912X)))
 (= $x140 $x21))))
 ))
 (let (($x276 (and $x109 $x230)))
 (let (($x171 (and $x276 $x224)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x5 $x171)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x209 (and $x273 $x120)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x214 (and $x238 $x209)))
 (let (($x217 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd ?x35 (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x82 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x272 (or false (or false (and (and true (or $x68 $x82)) (or $x33 $x217))))))
 (let (($x26 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x272)))
 (let (($x93 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x272)))
 (let (($x280 (and $x93 $x214)))
 (let (($x9 (=> $x280 $x101)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x80 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x92 (bvule ?x80 (_ bv4294967294 32))))
 (let (($x101 (= $x92 true)))
 (let ((?x218 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x176 (bvneg ?x218)))
 (let (($x57 (= ?x176 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x145 (= $x57 true)))
 (let (($x226 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (= $x226 true)))
 (let (($x39 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x59 (= $x39 true)))
 (let (($x135 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x136 (= $x135 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x213 (bvsub ?x35 ?x288)))
 (let (($x133 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x213) (bvult ?x35 ?x213))))
 (let (($x245 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x269 (ite $x245 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x165 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x151 (bvmul (_ bv4 64) ?x165)))
 (let ((?x225 ((_ extract 63 32) ?x151)))
 (let (($x215 (= ?x225 ?x269)))
 (let (($x182 (and $x215 $x133)))
 (let (($x78 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x6 (and $x78 $x182)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (=> $x131 $x6)))
 (let (($x258 (= $x53 true)))
 (let (($x130 (= $x131 true)))
 (let ((?x89 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x158 (= (_ bv0 32) ?x89)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x143 (= (_ bv0 32) ?x146)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x234 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let ((?x285 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x285)))
 (let (($x111 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x170 (and $x111 $x211)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x268 $x170)))
 (let (($x185 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x192 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x116 (and $x192 $x207)))
 (let (($x257 (not $x116)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x274 $x247)))
 (let (($x14 (and (not $x152) $x257)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x260 (and $x198 $x54)))
 (let (($x60 (not $x260)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x188 $x206)))
 (let (($x174 (and (not $x32) $x60)))
 (let (($x37 (and (and (and (and (and (and $x174 $x14) $x180) $x185) $x117) $x234) $x143)))
 (let (($x119 (and $x37 $x158)))
 (let (($x149 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x154 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x20 (or false (or false (and (and true (or $x126 $x154)) (or $x28 $x149))))))
 (let (($x244 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x46 (and $x244 $x119)))
 (let (($x196 (= $x46 true)))
 (let ((?x49 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x243 (= (_ bv0 2) ?x49)))
 (let (($x15 (= $x243 true)))
 (let (($x34 (forall ((input.ind-%var2903X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var2903X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x229))))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var2903X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2903X)))
 (=> $x140 (= ?x183 ?x200))))))))
 ))
 (let (($x81 (forall ((input.ind-%var2902X (_ BitVec 32)) )(let (($x160 (and (bvule (_ bv0 32) input.ind-%var2902X) (bvult input.ind-%var2902X input.dst.llvm-%n))))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2902X)))
 (= $x140 $x160))))
 ))
 (let (($x91 (and $x81 $x34)))
 (let (($x253 (= $x91 true)))
 (let (($x291 (forall ((input.ind-%var2893X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var2893X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x229))))
 (let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2893X)))
 (let (($x21 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2893X)))
 (=> $x21 (= ?x166 ?x200))))))))
 ))
 (let (($x164 (forall ((input.ind-%var2892X (_ BitVec 32)) )(let (($x160 (and (bvule (_ bv0 32) input.ind-%var2892X) (bvult input.ind-%var2892X input.dst.llvm-%n))))
 (let (($x21 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2892X)))
 (= $x21 $x160))))
 ))
 (let (($x25 (and $x164 $x291)))
 (let (($x86 (= $x25 true)))
 (let (($x66 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x204 (= $x66 true)))
 (let ((?x129 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x197 (bvneg ?x129)))
 (let (($x108 (= ?x197 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x265 (= $x108 true)))
 (let (($x132 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x22 (= $x132 true)))
 (let (($x252 (and $x22 $x265)))
 (let (($x173 (and $x252 $x204)))
 (let (($x239 (and $x173 $x86)))
 (let (($x177 (and $x239 $x253)))
 (let (($x168 (and $x177 $x15)))
 (let (($x162 (and $x168 $x196)))
 (let (($x199 (and $x162 $x130)))
 (let (($x97 (and $x199 $x258)))
 (let (($x147 (and $x97 $x136)))
 (let (($x16 (and $x147 $x59)))
 (let (($x240 (and $x16 $x104)))
 (let (($x205 (and $x240 $x145)))
 (let (($x163 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x292 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x52 (bvuge ?x292 (_ bv1 32))))
 (let (($x224 (and $x52 $x205)))
 (let (($x230 (forall ((input.ind-%var2913X (_ BitVec 32)) )(let ((?x166 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2913X)))
 (let ((?x183 (input.spec-%var-x-1.1.1 input.ind-%var2913X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2913X)))
 (=> $x140 (= ?x183 ?x166))))))
 ))
 (let (($x109 (forall ((input.ind-%var2912X (_ BitVec 32)) )(let (($x21 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2912X)))
 (let (($x140 (input.spec-%var-x-1.0.1 input.ind-%var2912X)))
 (= $x140 $x21))))
 ))
 (let (($x276 (and $x109 $x230)))
 (let (($x171 (and $x276 $x224)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x120 (and $x5 $x171)))
 (let (($x273 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x209 (and $x273 $x120)))
 (let (($x238 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x214 (and $x238 $x209)))
 (let (($x217 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x201 (bvadd ?x35 (_ bv3 32))))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x201)))
 (let (($x82 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x201)))
 (let (($x272 (or false (or false (and (and true (or $x68 $x82)) (or $x33 $x217))))))
 (let (($x26 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x272)))
 (let (($x93 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x272)))
 (let (($x280 (and $x93 $x214)))
 (let (($x9 (=> $x280 $x101)))
 (not $x9))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (bvsge ?x102 (_ bv0 32))))
 (let (($x137 (= $x74 true)))
 (let ((?x36 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x184 (bvneg ?x36)))
 (let (($x172 (= ?x184 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x172 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x17 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x12 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x284 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x289 (bvsub ?x35 ?x288)))
 (let (($x51 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x289) (bvult ?x35 ?x289))))
 (let (($x84 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x221 (ite $x84 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x45)))
 (let ((?x150 ((_ extract 63 32) ?x222)))
 (let (($x138 (= ?x150 ?x221)))
 (let (($x264 (and $x138 $x51)))
 (let (($x118 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x128 (and $x118 $x264)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x189 (=> $x131 $x128)))
 (let (($x249 (= $x189 true)))
 (let (($x122 (= $x131 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x153)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x144)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x280 $x92)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x214 $x101)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x240 $x218)))
 (let (($x57 (not $x176)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x16 $x226)))
 (let (($x205 (and (not $x104) $x57)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x97 $x135)))
 (let (($x147 (not $x136)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x178 $x78)))
 (let (($x59 (and (not $x258) $x147)))
 (let (($x8 (and (and (and (and (and (and $x59 $x205) $x171) $x209) $x9) $x195) $x41)))
 (let (($x254 (and $x8 $x100)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x182 (or false (or false (and (and true (or $x225 $x245)) (or $x24 $x213))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x210 (and $x53 $x254)))
 (let (($x50 (= $x210 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x162 (= (_ bv0 2) ?x196)))
 (let (($x130 (= $x162 true)))
 (let (($x37 (forall ((input.ind-%var2938X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var2938X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x248))))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var2938X)))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2938X)))
 (=> $x109 (= ?x29 ?x67))))))))
 ))
 (let (($x14 (forall ((input.ind-%var2937X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var2937X) (bvult input.ind-%var2937X input.dst.llvm-%n))))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2937X)))
 (= $x109 $x86))))
 ))
 (let (($x89 (and $x14 $x37)))
 (let (($x158 (= $x89 true)))
 (let (($x260 (forall ((input.ind-%var2928X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var2928X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x248))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2928X)))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2928X)))
 (=> $x65 (= ?x286 ?x67))))))))
 ))
 (let (($x220 (forall ((input.ind-%var2927X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var2927X) (bvult input.ind-%var2927X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2927X)))
 (= $x65 $x86))))
 ))
 (let (($x60 (and $x220 $x260)))
 (let (($x174 (= $x60 true)))
 (let (($x267 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x267 true)))
 (let ((?x250 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x250)))
 (let (($x40 (= ?x241 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x295 (= $x40 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x115 (= $x160 true)))
 (let (($x282 (and $x115 $x295)))
 (let (($x251 (and $x282 $x275)))
 (let (($x274 (and $x251 $x174)))
 (let (($x119 (and $x274 $x158)))
 (let (($x199 (and $x119 $x130)))
 (let (($x10 (and $x199 $x50)))
 (let (($x62 (and $x10 $x122)))
 (let (($x227 (and $x62 $x249)))
 (let (($x105 (and $x227 $x232)))
 (let (($x106 (and $x105 $x107)))
 (let (($x110 (and $x106 $x58)))
 (let (($x235 (and $x110 $x96)))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x173 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x173 (_ bv1 32))))
 (let (($x61 (and $x63 $x235)))
 (let (($x265 (forall ((input.ind-%var2948X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2948X)))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var2948X)))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2948X)))
 (=> $x109 (= ?x29 ?x286))))))
 ))
 (let (($x233 (forall ((input.ind-%var2947X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2947X)))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2947X)))
 (= $x109 $x65))))
 ))
 (let (($x252 (and $x233 $x265)))
 (let (($x290 (and $x252 $x61)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x123 $x290)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x90 (and $x7 $x38)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x167 $x90)))
 (let (($x293 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd ?x35 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x47 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x93 (or false (or false (and (and true (or $x114 $x47)) (or $x175 $x293))))))
 (let (($x238 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x93)))
 (let (($x179 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x93)))
 (let (($x208 (and $x179 $x259)))
 (let (($x70 (=> $x208 $x137)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x74 (bvsge ?x102 (_ bv0 32))))
 (let (($x137 (= $x74 true)))
 (let ((?x36 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x184 (bvneg ?x36)))
 (let (($x172 (= ?x184 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x172 true)))
 (let (($x17 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x58 (= $x17 true)))
 (let (($x12 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x107 (= $x12 true)))
 (let (($x284 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x232 (= $x284 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x289 (bvsub ?x35 ?x288)))
 (let (($x51 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x289) (bvult ?x35 ?x289))))
 (let (($x84 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x221 (ite $x84 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x45 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x222 (bvmul (_ bv4 64) ?x45)))
 (let ((?x150 ((_ extract 63 32) ?x222)))
 (let (($x138 (= ?x150 ?x221)))
 (let (($x264 (and $x138 $x51)))
 (let (($x118 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x128 (and $x118 $x264)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x189 (=> $x131 $x128)))
 (let (($x249 (= $x189 true)))
 (let (($x122 (= $x131 true)))
 (let ((?x153 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x100 (= (_ bv0 32) ?x153)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x144)))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x80 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x80)))
 (let (($x280 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x101 (and $x280 $x92)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x214 $x101)))
 (let (($x209 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x240 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (and $x240 $x218)))
 (let (($x57 (not $x176)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x16 $x226)))
 (let (($x205 (and (not $x104) $x57)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x136 (and $x97 $x135)))
 (let (($x147 (not $x136)))
 (let (($x78 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x178 $x78)))
 (let (($x59 (and (not $x258) $x147)))
 (let (($x8 (and (and (and (and (and (and $x59 $x205) $x171) $x209) $x9) $x195) $x41)))
 (let (($x254 (and $x8 $x100)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x151 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x245 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x151)))
 (let (($x182 (or false (or false (and (and true (or $x225 $x245)) (or $x24 $x213))))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x182)))
 (let (($x210 (and $x53 $x254)))
 (let (($x50 (= $x210 true)))
 (let ((?x196 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x162 (= (_ bv0 2) ?x196)))
 (let (($x130 (= $x162 true)))
 (let (($x37 (forall ((input.ind-%var2938X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var2938X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x248))))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var2938X)))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2938X)))
 (=> $x109 (= ?x29 ?x67))))))))
 ))
 (let (($x14 (forall ((input.ind-%var2937X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var2937X) (bvult input.ind-%var2937X input.dst.llvm-%n))))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2937X)))
 (= $x109 $x86))))
 ))
 (let (($x89 (and $x14 $x37)))
 (let (($x158 (= $x89 true)))
 (let (($x260 (forall ((input.ind-%var2928X (_ BitVec 32)) )(let ((?x28 (bvadd (bvmul input.ind-%var2928X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv1 32))) (select input.dst.llvm-mem ?x28))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x28 (_ bv2 32))) ?x248))))
 (let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2928X)))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2928X)))
 (=> $x65 (= ?x286 ?x67))))))))
 ))
 (let (($x220 (forall ((input.ind-%var2927X (_ BitVec 32)) )(let (($x86 (and (bvule (_ bv0 32) input.ind-%var2927X) (bvult input.ind-%var2927X input.dst.llvm-%n))))
 (let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2927X)))
 (= $x65 $x86))))
 ))
 (let (($x60 (and $x220 $x260)))
 (let (($x174 (= $x60 true)))
 (let (($x267 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x275 (= $x267 true)))
 (let ((?x250 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x241 (bvneg ?x250)))
 (let (($x40 (= ?x241 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x295 (= $x40 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x115 (= $x160 true)))
 (let (($x282 (and $x115 $x295)))
 (let (($x251 (and $x282 $x275)))
 (let (($x274 (and $x251 $x174)))
 (let (($x119 (and $x274 $x158)))
 (let (($x199 (and $x119 $x130)))
 (let (($x10 (and $x199 $x50)))
 (let (($x62 (and $x10 $x122)))
 (let (($x227 (and $x62 $x249)))
 (let (($x105 (and $x227 $x232)))
 (let (($x106 (and $x105 $x107)))
 (let (($x110 (and $x106 $x58)))
 (let (($x235 (and $x110 $x96)))
 (let (($x204 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x173 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x63 (bvuge ?x173 (_ bv1 32))))
 (let (($x61 (and $x63 $x235)))
 (let (($x265 (forall ((input.ind-%var2948X (_ BitVec 32)) )(let ((?x286 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2948X)))
 (let ((?x29 (input.spec-%var-x-1.1.1 input.ind-%var2948X)))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2948X)))
 (=> $x109 (= ?x29 ?x286))))))
 ))
 (let (($x233 (forall ((input.ind-%var2947X (_ BitVec 32)) )(let (($x65 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2947X)))
 (let (($x109 (input.spec-%var-x-1.0.1 input.ind-%var2947X)))
 (= $x109 $x65))))
 ))
 (let (($x252 (and $x233 $x265)))
 (let (($x290 (and $x252 $x61)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x38 (and $x123 $x290)))
 (let (($x7 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x90 (and $x7 $x38)))
 (let (($x167 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x167 $x90)))
 (let (($x293 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x82 (bvadd ?x35 (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x82)))
 (let (($x47 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x82)))
 (let (($x93 (or false (or false (and (and true (or $x114 $x47)) (or $x175 $x293))))))
 (let (($x238 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x93)))
 (let (($x179 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x93)))
 (let (($x208 (and $x179 $x259)))
 (let (($x70 (=> $x208 $x137)))
 (not $x70))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (bvule ?x255 input.dst.llvm-%n)))
 (let (($x292 (= $x129 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x113)))
 (let (($x185 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x185 true)))
 (let (($x270 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x270 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (= $x71 true)))
 (let (($x180 (forall ((input.ind-%var2973X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var2973X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x74))))
 (let ((?x283 (input.spec-%var-x-1.1.1 input.ind-%var2973X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2973X)))
 (=> $x233 (= ?x283 ?x236))))))))
 ))
 (let (($x56 (forall ((input.ind-%var2972X (_ BitVec 32)) )(let (($x51 (and (bvule (_ bv0 32) input.ind-%var2972X) (bvult input.ind-%var2972X input.dst.llvm-%n))))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2972X)))
 (= $x233 $x51))))
 ))
 (let (($x247 (and $x56 $x180)))
 (let (($x64 (= $x247 true)))
 (let (($x132 (forall ((input.ind-%var2963X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var2963X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x74))))
 (let ((?x164 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2963X)))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2963X)))
 (=> $x76 (= ?x164 ?x236))))))))
 ))
 (let (($x128 (forall ((input.ind-%var2962X (_ BitVec 32)) )(let (($x51 (and (bvule (_ bv0 32) input.ind-%var2962X) (bvult input.ind-%var2962X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2962X)))
 (= $x76 $x51))))
 ))
 (let (($x163 (and $x128 $x132)))
 (let (($x52 (= $x163 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x45 (= $x27 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x100 (bvsub ?x35 ?x288)))
 (let (($x10 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x100) (bvult ?x35 ?x100))))
 (let (($x41 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x8 (ite $x41 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x195 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x195)))
 (let ((?x144 ((_ extract 63 32) ?x237)))
 (let (($x153 (= ?x144 ?x8)))
 (let (($x122 (and $x153 $x10)))
 (let (($x99 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x62 (and $x99 $x122)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (=> $x131 $x62)))
 (let (($x223 (= $x159 true)))
 (let (($x80 (= $x131 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x176)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x240)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x136 $x59)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x135 $x16)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x155 $x157)))
 (let (($x182 (not $x133)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x215 $x24)))
 (let (($x178 (and (not $x213) $x182)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x165 $x6)))
 (let (($x225 (not $x151)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x260 $x60)))
 (let (($x269 (and (not $x19) $x225)))
 (let (($x120 (and (and (and (and (and (and $x269 $x178) $x258) $x97) $x226) $x145) $x218)))
 (let (($x209 (and $x120 $x57)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x257 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x257)))
 (let (($x162 (or false (or false (and (and true (or $x14 $x146)) (or $x89 $x158))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x95 (and $x199 $x209)))
 (let (($x214 (= $x95 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x188 (= (_ bv0 2) ?x248)))
 (let (($x67 (= $x188 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x246 (= $x244 true)))
 (let ((?x125 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x125)))
 (let (($x32 (= ?x28 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x32 true)))
 (let (($x86 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x86 true)))
 (let (($x20 (and $x239 $x15)))
 (let (($x55 (and $x20 $x246)))
 (let (($x198 (and $x55 $x67)))
 (let (($x280 (and $x198 $x214)))
 (let (($x92 (and $x280 $x80)))
 (let (($x118 (and $x92 $x223)))
 (let (($x222 (and $x118 $x45)))
 (let (($x140 (and $x222 $x52)))
 (let (($x192 (and $x140 $x64)))
 (let (($x117 (and $x192 $x134)))
 (let (($x211 (and $x117 $x285)))
 (let (($x170 (and $x211 $x111)))
 (let (($x275 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x251 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x251 (_ bv1 32))))
 (let (($x13 (and $x25 $x170)))
 (let (($x295 (forall ((input.ind-%var2983X (_ BitVec 32)) )(let ((?x164 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2983X)))
 (let ((?x283 (input.spec-%var-x-1.1.1 input.ind-%var2983X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2983X)))
 (=> $x233 (= ?x283 ?x164))))))
 ))
 (let (($x66 (forall ((input.ind-%var2982X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2982X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2982X)))
 (= $x233 $x76))))
 ))
 (let (($x282 (and $x66 $x295)))
 (let (($x152 (and $x282 $x13)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x30 $x152)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x116 (and $x5 $x207)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x234 (and $x231 $x116)))
 (let (($x272 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd ?x35 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x33 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x179 (or false (or false (and (and true (or $x127 $x33)) (or $x121 $x272))))))
 (let (($x167 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x179)))
 (let (($x219 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x179)))
 (let (($x190 (and $x219 $x234)))
 (let (($x197 (=> $x190 $x292)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x255 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x129 (bvule ?x255 input.dst.llvm-%n)))
 (let (($x292 (= $x129 true)))
 (let ((?x113 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x268 (bvneg ?x113)))
 (let (($x185 (= ?x268 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x111 (= $x185 true)))
 (let (($x270 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x270 true)))
 (let (($x71 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x134 (= $x71 true)))
 (let (($x180 (forall ((input.ind-%var2973X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var2973X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x74))))
 (let ((?x283 (input.spec-%var-x-1.1.1 input.ind-%var2973X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2973X)))
 (=> $x233 (= ?x283 ?x236))))))))
 ))
 (let (($x56 (forall ((input.ind-%var2972X (_ BitVec 32)) )(let (($x51 (and (bvule (_ bv0 32) input.ind-%var2972X) (bvult input.ind-%var2972X input.dst.llvm-%n))))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2972X)))
 (= $x233 $x51))))
 ))
 (let (($x247 (and $x56 $x180)))
 (let (($x64 (= $x247 true)))
 (let (($x132 (forall ((input.ind-%var2963X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var2963X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x74))))
 (let ((?x164 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2963X)))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2963X)))
 (=> $x76 (= ?x164 ?x236))))))))
 ))
 (let (($x128 (forall ((input.ind-%var2962X (_ BitVec 32)) )(let (($x51 (and (bvule (_ bv0 32) input.ind-%var2962X) (bvult input.ind-%var2962X input.dst.llvm-%n))))
 (let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2962X)))
 (= $x76 $x51))))
 ))
 (let (($x163 (and $x128 $x132)))
 (let (($x52 (= $x163 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x45 (= $x27 true)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let ((?x100 (bvsub ?x35 ?x288)))
 (let (($x10 (ite (bvsge ?x288 (_ bv0 32)) (bvuge ?x35 ?x100) (bvult ?x35 ?x100))))
 (let (($x41 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x8 (ite $x41 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x195 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x237 (bvmul (_ bv4 64) ?x195)))
 (let ((?x144 ((_ extract 63 32) ?x237)))
 (let (($x153 (= ?x144 ?x8)))
 (let (($x122 (and $x153 $x10)))
 (let (($x99 (= (bvand ?x35 (_ bv4294967292 32)) ?x35)))
 (let (($x62 (and $x99 $x122)))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x159 (=> $x131 $x62)))
 (let (($x223 (= $x159 true)))
 (let (($x80 (= $x131 true)))
 (let ((?x176 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x176)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x240)))
 (let ((?x104 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x104)))
 (let ((?x147 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x147)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x136 $x59)))
 (let (($x135 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x135 $x16)))
 (let (($x97 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x155 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (and $x155 $x157)))
 (let (($x182 (not $x133)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x215 $x24)))
 (let (($x178 (and (not $x213) $x182)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x165 $x6)))
 (let (($x225 (not $x151)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x260 $x60)))
 (let (($x269 (and (not $x19) $x225)))
 (let (($x120 (and (and (and (and (and (and $x269 $x178) $x258) $x97) $x226) $x145) $x218)))
 (let (($x209 (and $x120 $x57)))
 (let (($x158 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x257 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x257)))
 (let (($x162 (or false (or false (and (and true (or $x14 $x146)) (or $x89 $x158))))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x162)))
 (let (($x95 (and $x199 $x209)))
 (let (($x214 (= $x95 true)))
 (let ((?x248 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x188 (= (_ bv0 2) ?x248)))
 (let (($x67 (= $x188 true)))
 (let (($x244 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x246 (= $x244 true)))
 (let ((?x125 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x28 (bvneg ?x125)))
 (let (($x32 (= ?x28 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x15 (= $x32 true)))
 (let (($x86 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x239 (= $x86 true)))
 (let (($x20 (and $x239 $x15)))
 (let (($x55 (and $x20 $x246)))
 (let (($x198 (and $x55 $x67)))
 (let (($x280 (and $x198 $x214)))
 (let (($x92 (and $x280 $x80)))
 (let (($x118 (and $x92 $x223)))
 (let (($x222 (and $x118 $x45)))
 (let (($x140 (and $x222 $x52)))
 (let (($x192 (and $x140 $x64)))
 (let (($x117 (and $x192 $x134)))
 (let (($x211 (and $x117 $x285)))
 (let (($x170 (and $x211 $x111)))
 (let (($x275 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x251 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x251 (_ bv1 32))))
 (let (($x13 (and $x25 $x170)))
 (let (($x295 (forall ((input.ind-%var2983X (_ BitVec 32)) )(let ((?x164 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2983X)))
 (let ((?x283 (input.spec-%var-x-1.1.1 input.ind-%var2983X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2983X)))
 (=> $x233 (= ?x283 ?x164))))))
 ))
 (let (($x66 (forall ((input.ind-%var2982X (_ BitVec 32)) )(let (($x76 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2982X)))
 (let (($x233 (input.spec-%var-x-1.0.1 input.ind-%var2982X)))
 (= $x233 $x76))))
 ))
 (let (($x282 (and $x66 $x295)))
 (let (($x152 (and $x282 $x13)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x207 (and $x30 $x152)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x116 (and $x5 $x207)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x234 (and $x231 $x116)))
 (let (($x272 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd ?x35 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x33 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x179 (or false (or false (and (and true (or $x127 $x33)) (or $x121 $x272))))))
 (let (($x167 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x179)))
 (let (($x219 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x179)))
 (let (($x190 (and $x219 $x234)))
 (let (($x197 (=> $x190 $x292)))
 (not $x197))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 80
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x289 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x61 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x61 (_ bv1 32))))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (not $x131)))
 (let (($x290 (or $x277 $x249)))
 (let (($x253 (= $x290 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x96)))
 (let (($x36 (= ?x110 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x36 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x105 (= $x232 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (= $x150 true)))
 (let (($x65 (forall ((input.ind-%var3008X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var3008X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x56))))
 (let ((?x291 (input.spec-%var-x-1.1.1 input.ind-%var3008X)))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3008X)))
 (=> $x66 (= ?x291 ?x192))))))))
 ))
 (let (($x207 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var3007X) (bvult input.ind-%var3007X input.dst.llvm-%n))))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3007X)))
 (= $x66 $x222))))
 ))
 (let (($x265 (and $x207 $x65)))
 (let (($x189 (= $x265 true)))
 (let (($x117 (forall ((input.ind-%var2998X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var2998X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x56))))
 (let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2998X)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2998X)))
 (=> $x44 (= ?x220 ?x192))))))))
 ))
 (let (($x142 (forall ((input.ind-%var2997X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var2997X) (bvult input.ind-%var2997X input.dst.llvm-%n))))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2997X)))
 (= $x44 $x222))))
 ))
 (let (($x270 (and $x142 $x117)))
 (let (($x285 (= $x270 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x210 (= $x100 true)))
 (let (($x8 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x8 true)))
 (let (($x237 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x237 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x120)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x240)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x59 $x226)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x147 $x171)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x178 $x205)))
 (let (($x258 (not $x78)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x157 $x133)))
 (let (($x39 (and (not $x182) $x258)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x269 $x215)))
 (let (($x213 (not $x24)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x146 $x143)))
 (let (($x155 (and (not $x225) $x213)))
 (let (($x80 (and (and (and (and (and (and $x155 $x39) $x224) $x136) $x104) $x72) $x218)))
 (let (($x92 (and $x80 $x176)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x165 (or false (or false (and (and true (or $x119 $x46)) (or $x199 $x260))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x101 (and $x151 $x92)))
 (let (($x9 (= $x101 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x274 (= (_ bv0 2) ?x174)))
 (let (($x130 (= $x274 true)))
 (let ((?x55 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x55)))
 (let (($x188 (= ?x149 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x188 true)))
 (let (($x257 (and $x67 $x130)))
 (let (($x99 (and $x257 $x9)))
 (let (($x41 (and $x99 $x144)))
 (let (($x254 (and $x41 $x153)))
 (let (($x50 (and $x254 $x210)))
 (let (($x211 (and $x50 $x285)))
 (let (($x227 (and $x211 $x189)))
 (let (($x138 (and $x227 $x221)))
 (let (($x172 (and $x138 $x105)))
 (let (($x106 (and $x172 $x107)))
 (let (($x15 (forall ((input.ind-%var3018X (_ BitVec 32)) )(let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3018X)))
 (let ((?x291 (input.spec-%var-x-1.1.1 input.ind-%var3018X)))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3018X)))
 (=> $x66 (= ?x291 ?x220))))))
 ))
 (let (($x267 (forall ((input.ind-%var3017X (_ BitVec 32)) )(let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3017X)))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3017X)))
 (= $x66 $x44))))
 ))
 (let (($x20 (and $x267 $x15)))
 (let (($x12 (and $x20 $x106)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x17 (and $x276 $x12)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x184 (and $x123 $x17)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x273 $x184)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let (($x93 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd ?x35 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x175 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x219 (or false (or false (and (and true (or $x141 $x175)) (or $x26 $x93))))))
 (let (($x231 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x219)))
 (let (($x201 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x219)))
 (let (($x84 (and $x201 $x235)))
 (let (($x166 (=> $x84 $x253)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x289 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x61 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x61 (_ bv1 32))))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (not $x131)))
 (let (($x290 (or $x277 $x249)))
 (let (($x253 (= $x290 true)))
 (let ((?x96 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x110 (bvneg ?x96)))
 (let (($x36 (= ?x110 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x107 (= $x36 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x105 (= $x232 true)))
 (let (($x150 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x221 (= $x150 true)))
 (let (($x65 (forall ((input.ind-%var3008X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var3008X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x56))))
 (let ((?x291 (input.spec-%var-x-1.1.1 input.ind-%var3008X)))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3008X)))
 (=> $x66 (= ?x291 ?x192))))))))
 ))
 (let (($x207 (forall ((input.ind-%var3007X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var3007X) (bvult input.ind-%var3007X input.dst.llvm-%n))))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3007X)))
 (= $x66 $x222))))
 ))
 (let (($x265 (and $x207 $x65)))
 (let (($x189 (= $x265 true)))
 (let (($x117 (forall ((input.ind-%var2998X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var2998X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x56 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x56))))
 (let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var2998X)))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2998X)))
 (=> $x44 (= ?x220 ?x192))))))))
 ))
 (let (($x142 (forall ((input.ind-%var2997X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var2997X) (bvult input.ind-%var2997X input.dst.llvm-%n))))
 (let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var2997X)))
 (= $x44 $x222))))
 ))
 (let (($x270 (and $x142 $x117)))
 (let (($x285 (= $x270 true)))
 (let (($x100 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x210 (= $x100 true)))
 (let (($x8 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x153 (= $x8 true)))
 (let (($x237 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x144 (= $x237 true)))
 (let ((?x120 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x176 (= (_ bv0 32) ?x120)))
 (let ((?x240 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x218 (= (_ bv0 32) ?x240)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x226 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x16)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x59 $x226)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (and $x147 $x171)))
 (let (($x136 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x178 $x205)))
 (let (($x258 (not $x78)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x182 (and $x157 $x133)))
 (let (($x39 (and (not $x182) $x258)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x269 $x215)))
 (let (($x213 (not $x24)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x146 $x143)))
 (let (($x155 (and (not $x225) $x213)))
 (let (($x80 (and (and (and (and (and (and $x155 $x39) $x224) $x136) $x104) $x72) $x218)))
 (let (($x92 (and $x80 $x176)))
 (let (($x260 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x158 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x158)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x158)))
 (let (($x165 (or false (or false (and (and true (or $x119 $x46)) (or $x199 $x260))))))
 (let (($x151 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x165)))
 (let (($x101 (and $x151 $x92)))
 (let (($x9 (= $x101 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x274 (= (_ bv0 2) ?x174)))
 (let (($x130 (= $x274 true)))
 (let ((?x55 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x149 (bvneg ?x55)))
 (let (($x188 (= ?x149 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x67 (= $x188 true)))
 (let (($x257 (and $x67 $x130)))
 (let (($x99 (and $x257 $x9)))
 (let (($x41 (and $x99 $x144)))
 (let (($x254 (and $x41 $x153)))
 (let (($x50 (and $x254 $x210)))
 (let (($x211 (and $x50 $x285)))
 (let (($x227 (and $x211 $x189)))
 (let (($x138 (and $x227 $x221)))
 (let (($x172 (and $x138 $x105)))
 (let (($x106 (and $x172 $x107)))
 (let (($x15 (forall ((input.ind-%var3018X (_ BitVec 32)) )(let ((?x220 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3018X)))
 (let ((?x291 (input.spec-%var-x-1.1.1 input.ind-%var3018X)))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3018X)))
 (=> $x66 (= ?x291 ?x220))))))
 ))
 (let (($x267 (forall ((input.ind-%var3017X (_ BitVec 32)) )(let (($x44 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3017X)))
 (let (($x66 (input.spec-%var-x-1.0.1 input.ind-%var3017X)))
 (= $x66 $x44))))
 ))
 (let (($x20 (and $x267 $x15)))
 (let (($x12 (and $x20 $x106)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x17 (and $x276 $x12)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x184 (and $x123 $x17)))
 (let (($x273 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x235 (and $x273 $x184)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let (($x93 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x33 (bvadd ?x35 (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x33)))
 (let (($x175 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x33)))
 (let (($x219 (or false (or false (and (and true (or $x141 $x175)) (or $x26 $x93))))))
 (let (($x231 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x219)))
 (let (($x201 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x219)))
 (let (($x84 (and $x201 $x235)))
 (let (($x166 (=> $x84 $x253)))
 (not $x166)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 161 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 81
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x63 (ite $x13 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x63 (_ bv0 32))))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (or $x131 $x234)))
 (let (($x125 (= $x109 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x54)))
 (let (($x197 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x197 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x29 (= $x129 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x185 true)))
 (let (($x264 (forall ((input.ind-%var3043X (_ BitVec 32)) )(let ((?x84 (bvadd (bvmul input.ind-%var3043X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x249))))
 (let ((?x248 (input.spec-%var-x-1.1.1 input.ind-%var3043X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3043X)))
 (=> $x267 (= ?x248 ?x14))))))))
 ))
 (let (($x10 (forall ((input.ind-%var3042X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var3042X) (bvult input.ind-%var3042X input.dst.llvm-%n))))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3042X)))
 (= $x267 $x152))))
 ))
 (let (($x183 (and $x10 $x264)))
 (let (($x190 (= $x183 true)))
 (let (($x283 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x84 (bvadd (bvmul input.ind-%var3033X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x249))))
 (let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3033X)))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3033X)))
 (=> $x206 (= ?x198 ?x14))))))))
 ))
 (let (($x286 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var3032X) (bvult input.ind-%var3032X input.dst.llvm-%n))))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3032X)))
 (= $x206 $x152))))
 ))
 (let (($x86 (and $x286 $x283)))
 (let (($x275 (= $x86 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x48 true)))
 (let (($x194 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x263 (= $x194 true)))
 (let (($x247 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x64 (= $x247 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x8)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x144)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x92)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x176 $x101)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x120 $x9)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x226 $x171)))
 (let (($x214 (not $x104)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x147 $x59)))
 (let (($x72 (and (not $x16) $x214)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x97 $x224)))
 (let (($x135 (not $x209)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x143 $x225)))
 (let (($x95 (and (not $x57) $x135)))
 (let (($x27 (and (and (and (and (and (and $x95 $x72) $x240) $x80) $x99) $x237) $x41)))
 (let (($x222 (and $x27 $x153)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x78 (or false (or false (and (and true (or $x24 $x213)) (or $x133 $x182))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x73 (and $x39 $x222)))
 (let (($x142 (= $x73 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x245 (= (_ bv0 2) ?x19)))
 (let (($x165 (= $x245 true)))
 (let ((?x46 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x46)))
 (let (($x199 (= ?x196 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x260 (= $x199 true)))
 (let (($x151 (and $x260 $x165)))
 (let (($x284 (and $x151 $x142)))
 (let (($x70 (and $x284 $x64)))
 (let (($x140 (and $x70 $x263)))
 (let (($x56 (and $x140 $x52)))
 (let (($x25 (and $x56 $x275)))
 (let (($x113 (and $x25 $x190)))
 (let (($x255 (and $x113 $x111)))
 (let (($x160 (and $x255 $x29)))
 (let (($x292 (and $x160 $x287)))
 (let (($x89 (forall ((input.ind-%var3053X (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3053X)))
 (let ((?x248 (input.spec-%var-x-1.1.1 input.ind-%var3053X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3053X)))
 (=> $x267 (= ?x248 ?x198))))))
 ))
 (let (($x244 (forall ((input.ind-%var3052X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3052X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3052X)))
 (= $x267 $x206))))
 ))
 (let (($x6 (and $x244 $x89)))
 (let (($x169 (and $x6 $x292)))
 (let (($x252 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x252 $x169)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x204 (and $x30 $x181)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x7 $x204)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let (($x179 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x35 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x121 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x201 (or false (or false (and (and true (or $x217 $x121)) (or $x238 $x179))))))
 (let (($x273 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x201)))
 (let (($x82 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x201)))
 (let (($x170 (and $x82 $x268)))
 (let (($x251 (=> $x170 $x125)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x13 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x63 (ite $x13 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (= ?x63 (_ bv0 32))))
 (let (($x131 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x109 (or $x131 $x234)))
 (let (($x125 (= $x109 true)))
 (let ((?x54 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x108 (bvneg ?x54)))
 (let (($x197 (= ?x108 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x287 (= $x197 true)))
 (let (($x129 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x29 (= $x129 true)))
 (let (($x185 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x111 (= $x185 true)))
 (let (($x264 (forall ((input.ind-%var3043X (_ BitVec 32)) )(let ((?x84 (bvadd (bvmul input.ind-%var3043X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x249))))
 (let ((?x248 (input.spec-%var-x-1.1.1 input.ind-%var3043X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3043X)))
 (=> $x267 (= ?x248 ?x14))))))))
 ))
 (let (($x10 (forall ((input.ind-%var3042X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var3042X) (bvult input.ind-%var3042X input.dst.llvm-%n))))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3042X)))
 (= $x267 $x152))))
 ))
 (let (($x183 (and $x10 $x264)))
 (let (($x190 (= $x183 true)))
 (let (($x283 (forall ((input.ind-%var3033X (_ BitVec 32)) )(let ((?x84 (bvadd (bvmul input.ind-%var3033X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem ?x84))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x84 (_ bv2 32))) ?x249))))
 (let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3033X)))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3033X)))
 (=> $x206 (= ?x198 ?x14))))))))
 ))
 (let (($x286 (forall ((input.ind-%var3032X (_ BitVec 32)) )(let (($x152 (and (bvule (_ bv0 32) input.ind-%var3032X) (bvult input.ind-%var3032X input.dst.llvm-%n))))
 (let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3032X)))
 (= $x206 $x152))))
 ))
 (let (($x86 (and $x286 $x283)))
 (let (($x275 (= $x86 true)))
 (let (($x48 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x52 (= $x48 true)))
 (let (($x194 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x263 (= $x194 true)))
 (let (($x247 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x64 (= $x247 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x8)))
 (let ((?x144 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x41 (= (_ bv0 32) ?x144)))
 (let ((?x195 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x237 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x195)))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x92)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x9 (and $x176 $x101)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x120 $x9)))
 (let (($x80 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x226 $x171)))
 (let (($x214 (not $x104)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x147 $x59)))
 (let (($x72 (and (not $x16) $x214)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x209 (and $x97 $x224)))
 (let (($x135 (not $x209)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x143 $x225)))
 (let (($x95 (and (not $x57) $x135)))
 (let (($x27 (and (and (and (and (and (and $x95 $x72) $x240) $x80) $x99) $x237) $x41)))
 (let (($x222 (and $x27 $x153)))
 (let (($x182 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x215 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x213 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x215)))
 (let (($x78 (or false (or false (and (and true (or $x24 $x213)) (or $x133 $x182))))))
 (let (($x39 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x78)))
 (let (($x73 (and $x39 $x222)))
 (let (($x142 (= $x73 true)))
 (let ((?x19 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x245 (= (_ bv0 2) ?x19)))
 (let (($x165 (= $x245 true)))
 (let ((?x46 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x196 (bvneg ?x46)))
 (let (($x199 (= ?x196 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x260 (= $x199 true)))
 (let (($x151 (and $x260 $x165)))
 (let (($x284 (and $x151 $x142)))
 (let (($x70 (and $x284 $x64)))
 (let (($x140 (and $x70 $x263)))
 (let (($x56 (and $x140 $x52)))
 (let (($x25 (and $x56 $x275)))
 (let (($x113 (and $x25 $x190)))
 (let (($x255 (and $x113 $x111)))
 (let (($x160 (and $x255 $x29)))
 (let (($x292 (and $x160 $x287)))
 (let (($x89 (forall ((input.ind-%var3053X (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3053X)))
 (let ((?x248 (input.spec-%var-x-1.1.1 input.ind-%var3053X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3053X)))
 (=> $x267 (= ?x248 ?x198))))))
 ))
 (let (($x244 (forall ((input.ind-%var3052X (_ BitVec 32)) )(let (($x206 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3052X)))
 (let (($x267 (input.spec-%var-x-1.0.1 input.ind-%var3052X)))
 (= $x267 $x206))))
 ))
 (let (($x6 (and $x244 $x89)))
 (let (($x169 (and $x6 $x292)))
 (let (($x252 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x181 (and $x252 $x169)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x204 (and $x30 $x181)))
 (let (($x7 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x268 (and $x7 $x204)))
 (let ((?x288 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x35 (bvadd input.dst.llvm-%x ?x288)))
 (let (($x179 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x175 (bvadd ?x35 (_ bv3 32))))
 (let (($x238 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x175)))
 (let (($x121 (bvugt ?x35 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x217 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x175)))
 (let (($x201 (or false (or false (and (and true (or $x217 $x121)) (or $x238 $x179))))))
 (let (($x273 (=> (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32))) $x201)))
 (let (($x82 (=> (and $x131 (bvule ?x35 (bvsub (bvadd ?x35 (_ bv4 32)) (_ bv1 32)))) $x201)))
 (let (($x170 (and $x82 $x268)))
 (let (($x251 (=> $x170 $x125)))
 (not $x251))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 160 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
==query_number: 82
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x236 true)))
 (let ((?x17 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x17)))
 (let (($x184 (= ?x62 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x38 (= $x184 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x107)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x227)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x15)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x265 (and $x44 $x115)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x67 $x265)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x279 $x146)))
 (let (($x174 (not $x32)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x125 $x251)))
 (let (($x188 (and (not $x28) $x174)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x268 $x170)))
 (let (($x63 (not $x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x128 $x10)))
 (let (($x109 (and (not $x204) $x63)))
 (let (($x105 (and (and (and (and (and (and $x109 $x188) $x149) $x220) $x180) $x134) $x150)))
 (let (($x36 (and $x105 $x106)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x292 (or false (or false (and (and true (or $x113 $x185)) (or $x160 $x54))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x292)))
 (let (($x12 (and $x181 $x36)))
 (let (($x192 (= $x12 true)))
 (let (($x283 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (= $x283 true)))
 (let ((?x166 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x14 (= (_ bv0 2) ?x166)))
 (let (($x40 (= $x14 true)))
 (let (($x289 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x61 (= $x289 true)))
 (let (($x281 (forall ((input.ind-%var3078X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var3078X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x80))))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var3078X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3078X)))
 (=> $x203 (= ?x93 ?x9))))))))
 ))
 (let (($x284 (forall ((input.ind-%var3077X (_ BitVec 32)) )(let (($x155 (and (bvule (_ bv0 32) input.ind-%var3077X) (bvult input.ind-%var3077X input.dst.llvm-%n))))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3077X)))
 (= $x203 $x155))))
 ))
 (let (($x172 (and $x284 $x281)))
 (let (($x290 (= $x172 true)))
 (let (($x195 (forall ((input.ind-%var3068X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var3068X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x80))))
 (let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3068X)))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3068X)))
 (=> $x175 (= ?x219 ?x9))))))))
 ))
 (let (($x133 (forall ((input.ind-%var3067X (_ BitVec 32)) )(let (($x155 (and (bvule (_ bv0 32) input.ind-%var3067X) (bvult input.ind-%var3067X input.dst.llvm-%n))))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3067X)))
 (= $x175 $x155))))
 ))
 (let (($x237 (and $x133 $x195)))
 (let (($x45 (= $x237 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x19 (= $x60 true)))
 (let (($x162 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x162 true)))
 (let (($x119 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x119 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x257 (bvneg ?x198)))
 (let (($x37 (= ?x257 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x37 true)))
 (let (($x206 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (not $x206)))
 (let (($x244 (= $x20 true)))
 (let (($x6 (and $x244 $x89)))
 (let (($x196 (and $x6 $x46)))
 (let (($x260 (and $x196 $x199)))
 (let (($x245 (and $x260 $x19)))
 (let (($x144 (and $x245 $x45)))
 (let (($x253 (and $x144 $x290)))
 (let (($x277 (and $x253 $x61)))
 (let (($x34 (and $x277 $x40)))
 (let (($x275 (and $x34 $x86)))
 (let (($x117 (and $x275 $x192)))
 (let (($x233 (and $x117 $x38)))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x276 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x276 (_ bv0 32))))
 (let (($x239 (and $x252 $x233)))
 (let (($x7 (forall ((input.ind-%var3088X (_ BitVec 32)) )(let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3088X)))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var3088X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3088X)))
 (=> $x203 (= ?x93 ?x219))))))
 ))
 (let (($x293 (forall ((input.ind-%var3087X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3087X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3087X)))
 (= $x203 $x175))))
 ))
 (let (($x5 (and $x293 $x7)))
 (let (($x76 (and $x5 $x239)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x35 $x76)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x74 (and $x77 $x90)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x131 $x74)))
 (let (($x124 (=> $x259 $x58)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L3%6%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L3%6%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L3%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L3%6%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (= input.spec-%var-ret-0.L3%6%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x58 (= $x236 true)))
 (let ((?x17 (bvmul input.spec-%var-ret-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x62 (bvneg ?x17)))
 (let (($x184 (= ?x62 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x38 (= $x184 true)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= (_ bv0 32) ?x107)))
 (let ((?x227 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x150 (= (_ bv0 32) ?x227)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x15 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x115 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x15)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x265 (and $x44 $x115)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (and $x67 $x265)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x279 $x146)))
 (let (($x174 (not $x32)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x125 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (and $x125 $x251)))
 (let (($x188 (and (not $x28) $x174)))
 (let (($x170 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x268 $x170)))
 (let (($x63 (not $x13)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x204 (and $x128 $x10)))
 (let (($x109 (and (not $x204) $x63)))
 (let (($x105 (and (and (and (and (and (and $x109 $x188) $x149) $x220) $x180) $x134) $x150)))
 (let (($x36 (and $x105 $x106)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x190 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x160 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x190)))
 (let (($x185 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x190)))
 (let (($x292 (or false (or false (and (and true (or $x113 $x185)) (or $x160 $x54))))))
 (let (($x181 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x292)))
 (let (($x12 (and $x181 $x36)))
 (let (($x192 (= $x12 true)))
 (let (($x283 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (= $x283 true)))
 (let ((?x166 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x14 (= (_ bv0 2) ?x166)))
 (let (($x40 (= $x14 true)))
 (let (($x289 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x61 (= $x289 true)))
 (let (($x281 (forall ((input.ind-%var3078X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var3078X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x80))))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var3078X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3078X)))
 (=> $x203 (= ?x93 ?x9))))))))
 ))
 (let (($x284 (forall ((input.ind-%var3077X (_ BitVec 32)) )(let (($x155 (and (bvule (_ bv0 32) input.ind-%var3077X) (bvult input.ind-%var3077X input.dst.llvm-%n))))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3077X)))
 (= $x203 $x155))))
 ))
 (let (($x172 (and $x284 $x281)))
 (let (($x290 (= $x172 true)))
 (let (($x195 (forall ((input.ind-%var3068X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var3068X (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x80))))
 (let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3068X)))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3068X)))
 (=> $x175 (= ?x219 ?x9))))))))
 ))
 (let (($x133 (forall ((input.ind-%var3067X (_ BitVec 32)) )(let (($x155 (and (bvule (_ bv0 32) input.ind-%var3067X) (bvult input.ind-%var3067X input.dst.llvm-%n))))
 (let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3067X)))
 (= $x175 $x155))))
 ))
 (let (($x237 (and $x133 $x195)))
 (let (($x45 (= $x237 true)))
 (let (($x60 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x19 (= $x60 true)))
 (let (($x162 (bvsge input.spec-%var-i-0.L3%6%bbentry (_ bv0 32))))
 (let (($x199 (= $x162 true)))
 (let (($x119 (bvule input.spec-%var-i-0.L3%6%bbentry (_ bv4294967294 32))))
 (let (($x46 (= $x119 true)))
 (let ((?x198 (bvmul input.spec-%var-i-0.L3%6%bbentry (_ bv4294967295 32))))
 (let ((?x257 (bvneg ?x198)))
 (let (($x37 (= ?x257 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x37 true)))
 (let (($x206 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x20 (not $x206)))
 (let (($x244 (= $x20 true)))
 (let (($x6 (and $x244 $x89)))
 (let (($x196 (and $x6 $x46)))
 (let (($x260 (and $x196 $x199)))
 (let (($x245 (and $x260 $x19)))
 (let (($x144 (and $x245 $x45)))
 (let (($x253 (and $x144 $x290)))
 (let (($x277 (and $x253 $x61)))
 (let (($x34 (and $x277 $x40)))
 (let (($x275 (and $x34 $x86)))
 (let (($x117 (and $x275 $x192)))
 (let (($x233 (and $x117 $x38)))
 (let (($x30 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.spec-%var-i-0.L3%6%bbentry)))
 (let ((?x276 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x252 (= ?x276 (_ bv0 32))))
 (let (($x239 (and $x252 $x233)))
 (let (($x7 (forall ((input.ind-%var3088X (_ BitVec 32)) )(let ((?x219 (input.spec-%var-x-0.L3%6%bbentry.1.1 input.ind-%var3088X)))
 (let ((?x93 (input.spec-%var-x-1.1.1 input.ind-%var3088X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3088X)))
 (=> $x203 (= ?x93 ?x219))))))
 ))
 (let (($x293 (forall ((input.ind-%var3087X (_ BitVec 32)) )(let (($x175 (input.spec-%var-x-0.L3%6%bbentry.0.1 input.ind-%var3087X)))
 (let (($x203 (input.spec-%var-x-1.0.1 input.ind-%var3087X)))
 (= $x203 $x175))))
 ))
 (let (($x5 (and $x293 $x7)))
 (let (($x76 (and $x5 $x239)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L3%6%bbentry)))
 (let (($x90 (and $x35 $x76)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-8.L3%6%bbentry)))
 (let (($x74 (and $x77 $x90)))
 (let (($x131 (= (_ bv1 32) input.spec-%tmpvar-1.L3%6%bbentry)))
 (let (($x259 (and $x131 $x74)))
 (let (($x124 (=> $x259 $x58)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.3791858/query
