==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x9 $x10)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x52 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x8)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x14 (and $x9 $x10)))
 (let (($x17 (and $x14 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (and $x50 $x53)))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3191897540 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv1661363584 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv1661363587 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3191897543 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x299 (= true false)))
 (let (($x300 (= $x299 true)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x290 (concat ?x289 (concat ?x286 (concat ?x283 ?x281)))))
 (let (($x291 (= ?x290 input.dst.llvm-%n)))
 (let (($x292 (= $x291 true)))
 (let (($x293 (= $x292 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x275 (concat ?x274 (concat ?x271 (concat ?x268 ?x266)))))
 (let (($x276 (= ?x275 input.dst.llvm-%x)))
 (let (($x277 (= $x276 true)))
 (let (($x278 (= $x277 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x250))))
 (let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 ?x256)))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge ?x213 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (=> $x43 $x70)))))
 ))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= ?x213 (_ bv0 32)))))))
 ))
 (let (($x217 (and $x216 $x71)))
 (let (($x229 (and $x217 $x228)))
 (let (($x260 (and $x229 $x259)))
 (let (($x261 (= $x260 true)))
 (let (($x262 (= $x261 true)))
 (let (($x263 (= $x262 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x126)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x118 $x121)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x117 $x122)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x108)))
 (let (($x110 (not $x109)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x104 $x105)))
 (let (($x112 (and (not $x106) $x110)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x98 $x99)))
 (let (($x101 (not $x100)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x93 $x95)))
 (let (($x103 (and (not $x96) $x101)))
 (let (($x135 (and (and (and (and (and (and $x103 $x112) $x114) $x116) $x123) $x125) $x127)))
 (let (($x136 (and $x135 $x129)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x264 (and $x139 $x263)))
 (let (($x279 (and $x264 $x278)))
 (let (($x294 (and $x279 $x293)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x58 (and $x56 $x71)))
 (let (($x60 (and $x58 $x77)))
 (let (($x90 (and $x60 $x89)))
 (let (($x295 (and $x90 $x294)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x296 (and $x33 $x295)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x297 (and $x12 $x296)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x298 (and $x36 $x297)))
 (let (($x301 (=> $x298 $x300)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x299 (= true false)))
 (let (($x300 (= $x299 true)))
 (let ((?x281 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x290 (concat ?x289 (concat ?x286 (concat ?x283 ?x281)))))
 (let (($x291 (= ?x290 input.dst.llvm-%n)))
 (let (($x292 (= $x291 true)))
 (let (($x293 (= $x292 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x275 (concat ?x274 (concat ?x271 (concat ?x268 ?x266)))))
 (let (($x276 (= ?x275 input.dst.llvm-%x)))
 (let (($x277 (= $x276 true)))
 (let (($x278 (= $x277 true)))
 (let (($x259 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x250))))
 (let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 ?x256)))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge ?x213 (_ bv1 32)))))))
 ))
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x70 (= false false)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (=> $x43 $x70)))))
 ))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x213 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= ?x213 (_ bv0 32)))))))
 ))
 (let (($x217 (and $x216 $x71)))
 (let (($x229 (and $x217 $x228)))
 (let (($x260 (and $x229 $x259)))
 (let (($x261 (= $x260 true)))
 (let (($x262 (= $x261 true)))
 (let (($x263 (= $x262 true)))
 (let ((?x128 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x129 (= (_ bv0 32) ?x128)))
 (let ((?x126 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x127 (= (_ bv0 32) ?x126)))
 (let ((?x124 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let ((?x120 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x121 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x120)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x122 (and $x118 $x121)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (and $x117 $x122)))
 (let (($x116 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x107 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x109 (and $x107 $x108)))
 (let (($x110 (not $x109)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x104 $x105)))
 (let (($x112 (and (not $x106) $x110)))
 (let (($x99 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (and $x98 $x99)))
 (let (($x101 (not $x100)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x93 $x95)))
 (let (($x103 (and (not $x96) $x101)))
 (let (($x135 (and (and (and (and (and (and $x103 $x112) $x114) $x116) $x123) $x125) $x127)))
 (let (($x136 (and $x135 $x129)))
 (let (($x137 (= $x136 true)))
 (let (($x138 (= $x137 true)))
 (let (($x139 (= $x138 true)))
 (let (($x264 (and $x139 $x263)))
 (let (($x279 (and $x264 $x278)))
 (let (($x294 (and $x279 $x293)))
 (let (($x89 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (=> $x26 (= ?x86 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x26 (bvuge ?x63 (_ bv1 32))))
 (= $x26 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x56 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x43 (= ?x63 (_ bv0 32))))
 (= $x43 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x58 (and $x56 $x71)))
 (let (($x60 (and $x58 $x77)))
 (let (($x90 (and $x60 $x89)))
 (let (($x295 (and $x90 $x294)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x296 (and $x33 $x295)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x297 (and $x12 $x296)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x298 (and $x36 $x297)))
 (let (($x301 (=> $x298 $x300)))
 (not $x301))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000084)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000087)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000084)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000087)
                                   (k!0 #x00000086)
                                   (k!0 #x00000085)
                                   (k!0 #x00000084))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x86c61180)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x54ce1320)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x54ce1323)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x86c61183)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x54ce1320)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x86c61180)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x54ce1323)
                                   (k!0 #x54ce1322)
                                   (k!0 #x54ce1321)
                                   (k!0 #x54ce1320))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x11)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x5 $x204)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x73 $x206)))
 (let (($x258 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x251 $x252)))
 (let (($x249 (not $x248)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x254 $x255)))
 (let (($x250 (and (not $x156) $x249)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x122 $x215)))
 (let (($x245 (not $x217)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x133 $x227)))
 (let (($x246 (and (not $x130) $x245)))
 (let (($x75 (and (and (and $x246 $x250) $x256) $x258)))
 (let (($x65 (and (and (and (and $x75 $x207) $x209) $x57) $x13)))
 (let (($x40 (= $x65 true)))
 (let (($x83 (= $x40 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x242 (concat ?x233 (concat ?x238 ?x241)))))
 (let (($x243 (= input.dst.llvm-%n ?x69)))
 (let ((?x221 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x231 (concat ?x230 (concat ?x225 (concat ?x223 ?x221)))))
 (let (($x232 (= input.dst.llvm-%x ?x231)))
 (let (($x244 (and $x232 $x243)))
 (let (($x220 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x16 (and $x220 $x244)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x188))))
 (let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 ?x199)))))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge ?x166 (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x210 (= false false)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (=> $x129 $x210)))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= ?x166 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x169 $x99)))
 (let (($x29 (and $x177 $x23)))
 (let (($x37 (and $x29 $x203)))
 (let (($x81 (and (and (and (and (and (and $x75 $x37) $x207) $x209) $x57) $x13) $x16)))
 (let (($x25 (= $x81 true)))
 (let (($x7 (= $x25 true)))
 (let (($x19 (= $x7 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x228 (and $x88 $x99)))
 (let (($x123 (and $x228 $x115)))
 (let (($x135 (and $x123 $x124)))
 (let (($x80 (and $x135 $x19)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x17 (and $x52 $x80)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x72 (and $x31 $x17)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x14 $x72)))
 (let (($x84 (=> $x15 $x83)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x11)))
 (let ((?x208 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x208)))
 (let ((?x205 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x205)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (and $x5 $x204)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x73 $x206)))
 (let (($x258 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x252 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x251 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x251 $x252)))
 (let (($x249 (not $x248)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (and $x254 $x255)))
 (let (($x250 (and (not $x156) $x249)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (and $x122 $x215)))
 (let (($x245 (not $x217)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x130 (and $x133 $x227)))
 (let (($x246 (and (not $x130) $x245)))
 (let (($x75 (and (and (and $x246 $x250) $x256) $x258)))
 (let (($x65 (and (and (and (and $x75 $x207) $x209) $x57) $x13)))
 (let (($x40 (= $x65 true)))
 (let (($x83 (= $x40 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x242 (concat ?x233 (concat ?x238 ?x241)))))
 (let (($x243 (= input.dst.llvm-%n ?x69)))
 (let ((?x221 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x223 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x231 (concat ?x230 (concat ?x225 (concat ?x223 ?x221)))))
 (let (($x232 (= input.dst.llvm-%x ?x231)))
 (let (($x244 (and $x232 $x243)))
 (let (($x220 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x16 (and $x220 $x244)))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x192 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x188))))
 (let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 ?x199)))))))))
 ))
 (let (($x23 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge ?x166 (_ bv1 32)))))))
 ))
 (let (($x99 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x210 (= false false)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (=> $x129 $x210)))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x166 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= ?x166 (_ bv0 32)))))))
 ))
 (let (($x177 (and $x169 $x99)))
 (let (($x29 (and $x177 $x23)))
 (let (($x37 (and $x29 $x203)))
 (let (($x81 (and (and (and (and (and (and $x75 $x37) $x207) $x209) $x57) $x13) $x16)))
 (let (($x25 (= $x81 true)))
 (let (($x7 (= $x25 true)))
 (let (($x19 (= $x7 true)))
 (let (($x124 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x26 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (=> $x137 (= ?x26 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x115 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x142 (_ bv1 32))))
 (= $x137 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x142 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x129 (= ?x142 (_ bv0 32))))
 (= $x129 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x228 (and $x88 $x99)))
 (let (($x123 (and $x228 $x115)))
 (let (($x135 (and $x123 $x124)))
 (let (($x80 (and $x135 $x19)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x17 (and $x52 $x80)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x72 (and $x31 $x17)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x14 $x72)))
 (let (($x84 (=> $x15 $x83)))
 (not $x84))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x212 (= $x125 true)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x181 (concat ?x68 (concat ?x180 ?x183)))))
 (let (($x32 (= input.dst.llvm-%n ?x186)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x106 (concat ?x173 (concat ?x172 ?x174)))))
 (let (($x22 (= input.dst.llvm-%x ?x55)))
 (let (($x187 (and $x22 $x32)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x195 (and $x178 $x187)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x108)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x162)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x131 $x154)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x74 $x153)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x280))))
 (let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 ?x160)))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge ?x283 (_ bv1 32)))))))
 ))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x252 (= false false)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (=> $x156 $x252)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= ?x283 (_ bv0 32)))))))
 ))
 (let (($x291 (and $x290 $x250)))
 (let (($x58 (and $x291 $x92)))
 (let (($x158 (and $x58 $x157)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x207 $x28)))
 (let (($x209 (not $x208)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x205 $x204)))
 (let (($x11 (and (not $x206) $x209)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x202 $x203)))
 (let (($x66 (not $x37)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x193 $x197)))
 (let (($x5 (and (not $x199) $x66)))
 (let (($x101 (and (and (and (and (and (and $x5 $x11) $x47) $x13) $x158) $x152) $x159)))
 (let (($x148 (and (and (and $x101 $x95) $x56) $x195)))
 (let (($x105 (= $x148 true)))
 (let (($x110 (= $x105 true)))
 (let (($x86 (= $x110 true)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x39 (and $x251 $x250)))
 (let (($x179 (and $x39 $x177)))
 (let (($x194 (and $x179 $x191)))
 (let (($x128 (and $x194 $x86)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x60 (and $x12 $x128)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x10 $x60)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x127 (and $x53 $x126)))
 (let (($x116 (=> $x127 $x212)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x125 (= (_ bv0 32) input.dst.llvm-%x)))
 (let (($x212 (= $x125 true)))
 (let ((?x183 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x181 (concat ?x68 (concat ?x180 ?x183)))))
 (let (($x32 (= input.dst.llvm-%n ?x186)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x106 (concat ?x173 (concat ?x172 ?x174)))))
 (let (($x22 (= input.dst.llvm-%x ?x55)))
 (let (($x187 (and $x22 $x32)))
 (let (($x178 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x195 (and $x178 $x187)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x108)))
 (let ((?x162 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x162)))
 (let ((?x155 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x153 (and $x131 $x154)))
 (let (($x74 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x74 $x153)))
 (let (($x157 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x280))))
 (let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 ?x160)))))))))
 ))
 (let (($x92 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge ?x283 (_ bv1 32)))))))
 ))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x252 (= false false)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (=> $x156 $x252)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x283 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= ?x283 (_ bv0 32)))))))
 ))
 (let (($x291 (and $x290 $x250)))
 (let (($x58 (and $x291 $x92)))
 (let (($x158 (and $x58 $x157)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x207 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x208 (and $x207 $x28)))
 (let (($x209 (not $x208)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x206 (and $x205 $x204)))
 (let (($x11 (and (not $x206) $x209)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x202 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x202 $x203)))
 (let (($x66 (not $x37)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x193 $x197)))
 (let (($x5 (and (not $x199) $x66)))
 (let (($x101 (and (and (and (and (and (and $x5 $x11) $x47) $x13) $x158) $x152) $x159)))
 (let (($x148 (and (and (and $x101 $x95) $x56) $x195)))
 (let (($x105 (= $x148 true)))
 (let (($x110 (= $x105 true)))
 (let (($x86 (= $x110 true)))
 (let (($x191 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (=> $x168 (= ?x198 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x168 (bvuge ?x255 (_ bv1 32))))
 (= $x168 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x255 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x156 (= ?x255 (_ bv0 32))))
 (= $x156 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x39 (and $x251 $x250)))
 (let (($x179 (and $x39 $x177)))
 (let (($x194 (and $x179 $x191)))
 (let (($x128 (and $x194 $x86)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x60 (and $x12 $x128)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x10 $x60)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x127 (and $x53 $x126)))
 (let (($x116 (=> $x127 $x212)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5ffbfad4)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffab0)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffab3)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5ffbfad7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffab0)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5ffbfad4)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffab0) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #xfffffab3)
                                   (k!0 #xfffffab2)
                                   (k!0 #xfffffab1)
                                   (k!0 #xfffffab0))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000e04)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00002b00)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000e07)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00002b03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000e04)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00002b00)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000e04) #x10
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000e07)
                                   (k!0 #x00000e06)
                                   (k!0 #x00000e05)
                                   (k!0 #x00000e04))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x267 (= (_ bv0 4) ?x196)))
 (let (($x192 (= $x267 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x141 (concat ?x38 (concat ?x20 ?x113)))))
 (let (($x123 (= input.dst.llvm-%n ?x61)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x35 (concat ?x90 (concat ?x295 ?x163)))))
 (let (($x59 (= input.dst.llvm-%x ?x21)))
 (let (($x26 (and $x59 $x123)))
 (let (($x293 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x213 (and $x293 $x26)))
 (let ((?x299 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x299)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x257 (= (_ bv0 32) ?x6)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x266)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x272 $x275)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x278 $x279)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x274))))
 (let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 ?x277)))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge ?x7 (_ bv1 32)))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x208 (= false false)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (=> $x48 $x208)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= ?x7 (_ bv0 32)))))))
 ))
 (let (($x49 (and $x15 $x145)))
 (let (($x210 (and $x49 $x88)))
 (let (($x269 (and $x210 $x227)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x27 $x155)))
 (let (($x101 (not $x159)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x154 $x153)))
 (let (($x95 (and (not $x152) $x101)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x157 $x158)))
 (let (($x74 (not $x78)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x280 $x160)))
 (let (($x34 (and (not $x151) $x74)))
 (let (($x130 (and (and (and (and (and (and $x34 $x95) $x108) $x107) $x269) $x248) $x256)))
 (let (($x122 (and (and (and $x130 $x257) $x296) $x213)))
 (let (($x258 (= $x122 true)))
 (let (($x75 (= $x258 true)))
 (let (($x165 (= $x75 true)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x57 (and $x28 $x145)))
 (let (($x301 (and $x57 $x298)))
 (let (($x8 (and $x301 $x265)))
 (let (($x261 (and $x8 $x165)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x164 (and $x12 $x261)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x166 (and $x10 $x164)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x29 (and $x64 $x166)))
 (let (($x226 (=> $x29 $x192)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 ((_ extract 3 0) input.dst.llvm-%x)))
 (let (($x267 (= (_ bv0 4) ?x196)))
 (let (($x192 (= $x267 true)))
 (let ((?x113 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x141 (concat ?x38 (concat ?x20 ?x113)))))
 (let (($x123 (= input.dst.llvm-%n ?x61)))
 (let ((?x163 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x295 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x90 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x21 (concat ?x35 (concat ?x90 (concat ?x295 ?x163)))))
 (let (($x59 (= input.dst.llvm-%x ?x21)))
 (let (($x26 (and $x59 $x123)))
 (let (($x293 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x213 (and $x293 $x26)))
 (let ((?x299 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x299)))
 (let ((?x6 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x257 (= (_ bv0 32) ?x6)))
 (let ((?x253 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x256 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x253)))
 (let ((?x266 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x266)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x279 (and $x272 $x275)))
 (let (($x278 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x278 $x279)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x273 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv1 32))) (select input.dst.llvm-mem ?x273))))
 (let ((?x277 (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x273 (_ bv2 32))) ?x274))))
 (let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 ?x277)))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge ?x7 (_ bv1 32)))))))
 ))
 (let (($x145 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x208 (= false false)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (=> $x48 $x208)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x7 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= ?x7 (_ bv0 32)))))))
 ))
 (let (($x49 (and $x15 $x145)))
 (let (($x210 (and $x49 $x88)))
 (let (($x269 (and $x210 $x227)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x108 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x159 (and $x27 $x155)))
 (let (($x101 (not $x159)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x154 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x152 (and $x154 $x153)))
 (let (($x95 (and (not $x152) $x101)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x157 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x78 (and $x157 $x158)))
 (let (($x74 (not $x78)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x151 (and $x280 $x160)))
 (let (($x34 (and (not $x151) $x74)))
 (let (($x130 (and (and (and (and (and (and $x34 $x95) $x108) $x107) $x269) $x248) $x256)))
 (let (($x122 (and (and (and $x130 $x257) $x296) $x213)))
 (let (($x258 (= $x122 true)))
 (let (($x75 (= $x258 true)))
 (let (($x165 (= $x75 true)))
 (let (($x265 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x144 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (=> $x290 (= ?x144 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x206 (_ bv1 32))))
 (= $x290 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x206 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x48 (= ?x206 (_ bv0 32))))
 (= $x48 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x57 (and $x28 $x145)))
 (let (($x301 (and $x57 $x298)))
 (let (($x8 (and $x301 $x265)))
 (let (($x261 (and $x8 $x165)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x164 (and $x12 $x261)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x166 (and $x10 $x164)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x29 (and $x64 $x166)))
 (let (($x226 (=> $x29 $x192)))
 (not $x226))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00021490)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000644)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00021493)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000647)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00021490)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000644)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00021490) #x08
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!7 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490)))))
          (a!2 (k!7 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490)))))
          (a!3 (k!7 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490)))))
          (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!7 #x00021493)
                                   (k!7 #x00021492)
                                   (k!7 #x00021491)
                                   (k!7 #x00021490))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0639e000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xe614c604)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xded5ff04)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xe614c607)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0639e003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xe614c604)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0639e000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0639e001) #x00
    (ite (= x!0 #x0639e000) #x00
    (ite (= x!0 #x0639e003) #x00
    (ite (= x!0 #x0639e002) #x00
    (ite (= x!0 #xe614c605) #xff
    (ite (= x!0 #xe614c607) #xde
    (ite (= x!0 #xe614c604) #x04
      #xd5))))))))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!7 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604)))))
          (a!2 (k!7 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604)))))
          (a!3 (k!7 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604)))))
          (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!7 #xe614c607)
                                   (k!7 #xe614c606)
                                   (k!7 #xe614c605)
                                   (k!7 #xe614c604))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x222 (= (_ bv0 2) ?x230)))
 (let (($x221 (= $x222 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x45 (concat ?x84 (concat ?x83 ?x33)))))
 (let (($x121 (= input.dst.llvm-%n ?x219)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x99 (concat ?x92 (concat ?x281 ?x62)))))
 (let (($x259 (= input.dst.llvm-%x ?x228)))
 (let (($x276 (and $x259 $x121)))
 (let (($x17 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x198 (and $x17 $x276)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x47)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x237 $x236)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x199 $x69)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x136))))
 (let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 ?x231)))))))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge ?x105 (_ bv1 32)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x159 (= false false)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (=> $x162 $x159)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= ?x105 (_ bv0 32)))))))
 ))
 (let (($x52 (and $x120 $x104)))
 (let (($x247 (and $x52 $x246)))
 (let (($x197 (and $x247 $x188)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x118 $x253)))
 (let (($x130 (not $x256)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x275 $x279)))
 (let (($x257 (and (not $x248) $x130)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x227 $x269)))
 (let (($x278 (not $x97)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x274 $x277)))
 (let (($x266 (and (not $x133) $x278)))
 (let (($x190 (and (and (and (and (and (and $x266 $x257) $x299) $x112) $x197) $x244) $x209)))
 (let (($x201 (and (and (and $x190 $x98) $x13) $x198)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x100 (= $x203 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x70 (and $x155 $x104)))
 (let (($x117 (and $x70 $x103)))
 (let (($x240 (and $x117 $x268)))
 (let (($x282 (and $x240 $x100)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x218 (and $x12 $x282)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x286 (and $x10 $x218)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x283 (and $x109 $x286)))
 (let (($x147 (=> $x283 $x221)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x230 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x222 (= (_ bv0 2) ?x230)))
 (let (($x221 (= $x222 true)))
 (let ((?x33 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x219 (concat ?x45 (concat ?x84 (concat ?x83 ?x33)))))
 (let (($x121 (= input.dst.llvm-%n ?x219)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x228 (concat ?x99 (concat ?x92 (concat ?x281 ?x62)))))
 (let (($x259 (= input.dst.llvm-%x ?x228)))
 (let (($x276 (and $x259 $x121)))
 (let (($x17 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x198 (and $x17 $x276)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x47 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x98 (= (_ bv0 32) ?x47)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x243)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x237 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x237 $x236)))
 (let (($x199 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (and $x199 $x69)))
 (let (($x188 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x225 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x136 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv1 32))) (select input.dst.llvm-mem ?x225))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x225 (_ bv2 32))) ?x136))))
 (let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 ?x231)))))))))
 ))
 (let (($x246 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge ?x105 (_ bv1 32)))))))
 ))
 (let (($x104 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x159 (= false false)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (=> $x162 $x159)))))
 ))
 (let (($x120 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x105 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= ?x105 (_ bv0 32)))))))
 ))
 (let (($x52 (and $x120 $x104)))
 (let (($x247 (and $x52 $x246)))
 (let (($x197 (and $x247 $x188)))
 (let (($x112 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x118 $x253)))
 (let (($x130 (not $x256)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x275 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (and $x275 $x279)))
 (let (($x257 (and (not $x248) $x130)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x227 $x269)))
 (let (($x278 (not $x97)))
 (let (($x277 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (and $x274 $x277)))
 (let (($x266 (and (not $x133) $x278)))
 (let (($x190 (and (and (and (and (and (and $x266 $x257) $x299) $x112) $x197) $x244) $x209)))
 (let (($x201 (and (and (and $x190 $x98) $x13) $x198)))
 (let (($x202 (= $x201 true)))
 (let (($x203 (= $x202 true)))
 (let (($x100 (= $x203 true)))
 (let (($x268 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (=> $x15 (= ?x285 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x103 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (bvuge ?x152 (_ bv1 32))))
 (= $x15 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x152 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x162 (= ?x152 (_ bv0 32))))
 (= $x162 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x70 (and $x155 $x104)))
 (let (($x117 (and $x70 $x103)))
 (let (($x240 (and $x117 $x268)))
 (let (($x282 (and $x240 $x100)))
 (let (($x12 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x218 (and $x12 $x282)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x286 (and $x10 $x218)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x283 (and $x109 $x286)))
 (let (($x147 (=> $x283 $x221)))
 (not $x147))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x132 (= $x76 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x271 (concat ?x139 (concat ?x168 ?x129)))))
 (let (($x30 (= input.dst.llvm-%n ?x50)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x249 (concat ?x88 (concat ?x25 ?x128)))))
 (let (($x79 (= input.dst.llvm-%x ?x250)))
 (let (($x149 (and $x79 $x30)))
 (let (($x212 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x144 (and $x212 $x149)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x56)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x108)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x55 $x181)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x151 $x180)))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x167))))
 (let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 ?x68)))))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge ?x258 (_ bv1 32)))))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x253 (= false false)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (=> $x248 $x253)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= ?x258 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x192 $x257)))
 (let (($x207 (and $x226 $x205)))
 (let (($x160 (and $x207 $x24)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x244 $x189)))
 (let (($x209 (not $x243)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x239 $x236)))
 (let (($x47 (and (not $x69) $x209)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x42 $x188)))
 (let (($x194 (not $x197)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x137 $x234)))
 (let (($x237 (and (not $x231) $x194)))
 (let (($x82 (and (and (and (and (and (and $x237 $x47) $x193) $x13) $x160) $x186) $x101)))
 (let (($x161 (and (and (and $x82 $x124) $x107) $x144)))
 (let (($x157 (= $x161 true)))
 (let (($x158 (= $x157 true)))
 (let (($x135 (= $x158 true)))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x288 (and $x118 $x257)))
 (let (($x251 (and $x288 $x52)))
 (let (($x241 (and $x251 $x220)))
 (let (($x81 (and $x241 $x135)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x178 (and $x31 $x81)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x16 (and $x36 $x178)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x7 (and $x53 $x16)))
 (let (($x172 (=> $x7 $x132)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x76 (= (_ bv0 32) input.dst.llvm-%n)))
 (let (($x132 (= $x76 true)))
 (let ((?x129 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x50 (concat ?x271 (concat ?x139 (concat ?x168 ?x129)))))
 (let (($x30 (= input.dst.llvm-%n ?x50)))
 (let ((?x128 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x250 (concat ?x249 (concat ?x88 (concat ?x25 ?x128)))))
 (let (($x79 (= input.dst.llvm-%x ?x250)))
 (let (($x149 (and $x79 $x30)))
 (let (($x212 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x144 (and $x212 $x149)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x107 (= (_ bv0 32) ?x56)))
 (let ((?x108 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x124 (= (_ bv0 32) ?x108)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x101 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let ((?x185 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x185)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x180 (and $x55 $x181)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x151 $x180)))
 (let (($x24 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x68 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x167))))
 (let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 ?x68)))))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge ?x258 (_ bv1 32)))))))
 ))
 (let (($x257 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x253 (= false false)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (=> $x248 $x253)))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= ?x258 (_ bv0 32)))))))
 ))
 (let (($x226 (and $x192 $x257)))
 (let (($x207 (and $x226 $x205)))
 (let (($x160 (and $x207 $x24)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x243 (and $x244 $x189)))
 (let (($x209 (not $x243)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x239 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x69 (and $x239 $x236)))
 (let (($x47 (and (not $x69) $x209)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x197 (and $x42 $x188)))
 (let (($x194 (not $x197)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x137 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x231 (and $x137 $x234)))
 (let (($x237 (and (not $x231) $x194)))
 (let (($x82 (and (and (and (and (and (and $x237 $x47) $x193) $x13) $x160) $x186) $x101)))
 (let (($x161 (and (and (and $x82 $x124) $x107) $x144)))
 (let (($x157 (= $x161 true)))
 (let (($x158 (= $x157 true)))
 (let (($x135 (= $x158 true)))
 (let (($x220 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x233 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (=> $x86 (= ?x233 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x52 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x279 (_ bv1 32))))
 (= $x86 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x279 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x248 (= ?x279 (_ bv0 32))))
 (= $x248 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x288 (and $x118 $x257)))
 (let (($x251 (and $x288 $x52)))
 (let (($x241 (and $x251 $x220)))
 (let (($x81 (and $x241 $x135)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x178 (and $x31 $x81)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x16 (and $x36 $x178)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x7 (and $x53 $x16)))
 (let (($x172 (=> $x7 $x132)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00002040)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000804)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00002043)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000807)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00002040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000804)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000804) #x01
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00002043)
                                     (k!7 #x00002042)
                                     (k!7 #x00002041)
                                     (k!7 #x00002040))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x5f88fd88)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdf21fb84)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00010000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7fcff900)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdf21fb87)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x5f88fd8b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdf21fb84)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x5f88fd88)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xdf21fb86) #xcf
    (ite (= x!0 #x5f88fd8a) #x01
    (ite (= x!0 #xdf21fb85) #xf9
    (ite (= x!0 #xdf21fb87) #x7f
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #xdf21fb87)
                                     (k!7 #xdf21fb86)
                                     (k!7 #xdf21fb85)
                                     (k!7 #xdf21fb84))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00010000 x!0)
         (ite (bvule #x00010001 x!0) #x00010001 #x00010000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x41 (= $x115 true)))
 (let (($x225 (= $x41 true)))
 (let ((?x290 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x211 (concat ?x174 (concat ?x57 ?x290)))))
 (let (($x117 (= input.dst.llvm-%n ?x54)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x217 (concat ?x208 (concat ?x89 ?x195)))))
 (let (($x255 (= input.dst.llvm-%x ?x77)))
 (let (($x285 (and $x255 $x117)))
 (let (($x261 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x289 (and $x261 $x285)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x264)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x200)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x141 $x61)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x140 $x123)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x35))))
 (let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 ?x59)))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge ?x203 (_ bv1 32)))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (=> $x190 $x243)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= ?x203 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x283 $x143)))
 (let (($x159 (and $x284 $x155)))
 (let (($x21 (and $x159 $x277)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x146 $x32)))
 (let (($x82 (not $x101)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x181 $x180)))
 (let (($x124 (and (not $x186) $x82)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x160)))
 (let (($x151 (not $x8)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x167 $x68)))
 (let (($x185 (and (not $x184) $x151)))
 (let (($x133 (and (and (and (and (and (and $x185 $x124) $x56) $x131) $x21) $x256) $x299)))
 (let (($x227 (and (and (and $x133 $x296) $x164) $x289)))
 (let (($x112 (= $x227 true)))
 (let (($x191 (= $x112 true)))
 (let (($x187 (= $x191 true)))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x98 (and $x189 $x143)))
 (let (($x5 (and $x98 $x28)))
 (let (($x294 (and $x5 $x106)))
 (let (($x293 (and $x294 $x187)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x148 (and $x31 $x293)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x36 $x148)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x247 (and $x53 $x105)))
 (let (($x273 (=> $x247 $x225)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x115 (bvule input.dst.llvm-%n (_ bv4294967294 32))))
 (let (($x41 (= $x115 true)))
 (let (($x225 (= $x41 true)))
 (let ((?x290 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x54 (concat ?x211 (concat ?x174 (concat ?x57 ?x290)))))
 (let (($x117 (= input.dst.llvm-%n ?x54)))
 (let ((?x195 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x217 (concat ?x208 (concat ?x89 ?x195)))))
 (let (($x255 (= input.dst.llvm-%x ?x77)))
 (let (($x285 (and $x255 $x117)))
 (let (($x261 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x289 (and $x261 $x285)))
 (let ((?x264 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x264)))
 (let ((?x200 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x296 (= (_ bv0 32) ?x200)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x299 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let ((?x20 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x61 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x20)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x123 (and $x141 $x61)))
 (let (($x140 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x140 $x123)))
 (let (($x277 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x35))))
 (let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 ?x59)))))))))
 ))
 (let (($x155 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge ?x203 (_ bv1 32)))))))
 ))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x243 (= false false)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (=> $x190 $x243)))))
 ))
 (let (($x283 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x203 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= ?x203 (_ bv0 32)))))))
 ))
 (let (($x284 (and $x283 $x143)))
 (let (($x159 (and $x284 $x155)))
 (let (($x21 (and $x159 $x277)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x146 $x32)))
 (let (($x82 (not $x101)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x186 (and $x181 $x180)))
 (let (($x124 (and (not $x186) $x82)))
 (let (($x160 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x24 $x160)))
 (let (($x151 (not $x8)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x184 (and $x167 $x68)))
 (let (($x185 (and (not $x184) $x151)))
 (let (($x133 (and (and (and (and (and (and $x185 $x124) $x56) $x131) $x21) $x256) $x299)))
 (let (($x227 (and (and (and $x133 $x296) $x164) $x289)))
 (let (($x112 (= $x227 true)))
 (let (($x191 (= $x112 true)))
 (let (($x187 (= $x191 true)))
 (let (($x106 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (=> $x192 (= ?x182 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x69 (_ bv1 32))))
 (= $x192 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x190 (= ?x69 (_ bv0 32))))
 (= $x190 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x98 (and $x189 $x143)))
 (let (($x5 (and $x98 $x28)))
 (let (($x294 (and $x5 $x106)))
 (let (($x293 (and $x294 $x187)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x148 (and $x31 $x293)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x36 $x148)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x247 (and $x53 $x105)))
 (let (($x273 (=> $x247 $x225)))
 (not $x273))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x40410000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x40000003) #xff
    (ite (= x!0 #x40000002) #xff
    (ite (= x!0 #x00000007) #x40
    (ite (= x!0 #x40000000) #xff
    (ite (= x!0 #x00000006) #x41
    (ite (= x!0 #x40000001) #xff
      #x00)))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #xffffffff) false
      (input.spec-%var-x-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x52a0219c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x4a2108d8)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xa7d21100)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x4a2108db)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x52a0219f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x4a2108d8)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x52a0219c)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x52a0219d) #xff
    (ite (= x!0 #x4a2108da) #xd2
    (ite (= x!0 #x52a0219c) #xff
    (ite (= x!0 #x52a0219f) #xff
    (ite (= x!0 #x52a0219e) #xff
    (ite (= x!0 #x4a2108d9) #x11
    (ite (= x!0 #x4a2108db) #xa7
      #x00))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x4a2108db)
                                     (k!7 #x4a2108da)
                                     (k!7 #x4a2108d9)
                                     (k!7 #x4a2108d8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #xffffffff) #xffffffff
      #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #xffffffff) false
      (input.spec-%var-x-1.0.1 x!0))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x40 (= $x99 true)))
 (let (($x62 (= $x40 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x291 (concat ?x169 (concat ?x204 (concat ?x238 ?x48)))))
 (let (($x298 (= input.dst.llvm-%n ?x291)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x104 (concat ?x205 (concat ?x122 ?x230)))))
 (let (($x163 (= input.dst.llvm-%x ?x70)))
 (let (($x44 (and $x163 $x298)))
 (let (($x218 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x233 (and $x218 $x44)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x193)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (and $x18 $x43)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x231 $x219)))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x49))))
 (let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 ?x228)))))))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge ?x157 (_ bv1 32)))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x101 (= false false)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (=> $x108 $x101)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= ?x157 (_ bv0 32)))))))
 ))
 (let (($x12 (and $x170 $x262)))
 (let (($x6 (and $x12 $x266)))
 (let (($x234 (and $x6 $x136)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x260 $x150)))
 (let (($x133 (not $x299)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x61 $x123)))
 (let (($x296 (and (not $x256) $x133)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x277 $x21)))
 (let (($x140 (not $x91)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (and $x35 $x59)))
 (let (($x20 (and (not $x274) $x140)))
 (let (($x175 (and (and (and (and (and (and $x20 $x296) $x264) $x216) $x234) $x276) $x209)))
 (let (($x232 (and (and (and $x175 $x242) $x13) $x233)))
 (let (($x42 (= $x232 true)))
 (let (($x188 (= $x42 true)))
 (let (($x265 (= $x188 true)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x280 (and $x32 $x262)))
 (let (($x154 (and $x280 $x34)))
 (let (($x287 (and $x154 $x270)))
 (let (($x26 (and $x287 $x265)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x31 $x26)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x213 (and $x36 $x19)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x258 (and $x53 $x213)))
 (let (($x177 (=> $x258 $x62)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x99 (bvsge input.dst.llvm-%n (_ bv4294967295 32))))
 (let (($x40 (= $x99 true)))
 (let (($x62 (= $x40 true)))
 (let ((?x48 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x291 (concat ?x169 (concat ?x204 (concat ?x238 ?x48)))))
 (let (($x298 (= input.dst.llvm-%n ?x291)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x70 (concat ?x104 (concat ?x205 (concat ?x122 ?x230)))))
 (let (($x163 (= input.dst.llvm-%x ?x70)))
 (let (($x44 (and $x163 $x298)))
 (let (($x218 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x233 (and $x218 $x44)))
 (let ((?x9 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x13 (= (_ bv0 32) ?x9)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x242 (= (_ bv0 32) ?x193)))
 (let ((?x121 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x209 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x121)))
 (let ((?x96 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x43 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x219 (and $x18 $x43)))
 (let (($x231 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x276 (and $x231 $x219)))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x92 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x49 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x49))))
 (let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 ?x228)))))))))
 ))
 (let (($x266 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge ?x157 (_ bv1 32)))))))
 ))
 (let (($x262 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x101 (= false false)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (=> $x108 $x101)))))
 ))
 (let (($x170 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x157 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= ?x157 (_ bv0 32)))))))
 ))
 (let (($x12 (and $x170 $x262)))
 (let (($x6 (and $x12 $x266)))
 (let (($x234 (and $x6 $x136)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x150 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x299 (and $x260 $x150)))
 (let (($x133 (not $x299)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (and $x61 $x123)))
 (let (($x296 (and (not $x256) $x133)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (and $x277 $x21)))
 (let (($x140 (not $x91)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x35 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x274 (and $x35 $x59)))
 (let (($x20 (and (not $x274) $x140)))
 (let (($x175 (and (and (and (and (and (and $x20 $x296) $x264) $x216) $x234) $x276) $x209)))
 (let (($x232 (and (and (and $x175 $x242) $x13) $x233)))
 (let (($x42 (= $x232 true)))
 (let (($x188 (= $x42 true)))
 (let (($x265 (= $x188 true)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (=> $x283 (= ?x119 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x34 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x186 (_ bv1 32))))
 (= $x283 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x186 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x186 (_ bv0 32))))
 (= $x108 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x280 (and $x32 $x262)))
 (let (($x154 (and $x280 $x34)))
 (let (($x287 (and $x154 $x270)))
 (let (($x26 (and $x287 $x265)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x31 $x26)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x213 (and $x36 $x19)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x258 (and $x53 $x213)))
 (let (($x177 (=> $x258 $x62)))
 (not $x177))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7abcc000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x80040200)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7abcc003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7abcc000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000007) #x80
    (ite (= x!0 #x7abcc003) #x80
    (ite (= x!0 #x00000006) #x04
    (ite (= x!0 #x00000005) #x02
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #x00000007)
                                     (k!7 #x00000006)
                                     (k!7 #x00000005)
                                     (k!7 #x00000004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xba501028)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!7))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb2619098)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xffdfbe00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb261909b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xba50102b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb2619098)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xba501028)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!7 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xba501029) #x00
    (ite (= x!0 #xba501028) #x00
    (ite (= x!0 #xffdfbe03) #x00
    (ite (= x!0 #xba50102b) #x80
    (ite (= x!0 #xffdfbe01) #x00
    (ite (= x!0 #xba50102a) #x00
    (ite (= x!0 #xb2619099) #xbe
    (ite (= x!0 #xffdfbe02) #x00
    (ite (= x!0 #xffdfbe00) #x00
    (ite (= x!0 #xb261909b) #xff
    (ite (= x!0 #xb2619098) #x00
      #xdf))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!7 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098)))))
            (a!2 (k!7 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098)))))
            (a!3 (k!7 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098)))))
            (a!4 (k!7 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!7 #xb261909b)
                                     (k!7 #xb261909a)
                                     (k!7 #xb2619099)
                                     (k!7 #xb2619098))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun k!8 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x80000000 x!0)
         (ite (bvule #x80000001 x!0) #x80000001 #x80000000)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!9 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!9 (k!8 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x111 (= $x222 true)))
 (let (($x25 (= $x111 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x93 (concat ?x153 (concat ?x86 ?x162)))))
 (let (($x85 (= input.dst.llvm-%n ?x229)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x130 (concat ?x155 (concat ?x202 ?x81)))))
 (let (($x80 (= input.dst.llvm-%x ?x257)))
 (let (($x179 (and $x80 $x85)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x182 (and $x132 $x179)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x107)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x56)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x250 $x271)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x184 $x168)))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x110))))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 ?x139)))))))))
 ))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge ?x112 (_ bv1 32)))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (=> $x200 $x299)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= ?x112 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x225 $x113)))
 (let (($x244 (and $x273 $x239)))
 (let (($x68 (and $x244 $x176)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x134 $x121)))
 (let (($x175 (not $x209)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x43 $x219)))
 (let (($x242 (and (not $x276) $x175)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x136 $x234)))
 (let (($x231 (not $x241)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x49 $x228)))
 (let (($x96 (and (not $x259) $x231)))
 (let (($x302 (and (and (and (and (and (and $x96 $x242) $x9) $x199) $x68) $x50) $x82)))
 (let (($x22 (and (and (and $x302 $x268) $x131) $x182)))
 (let (($x24 (= $x22 true)))
 (let (($x160 (= $x24 true)))
 (let (($x240 (= $x160 true)))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x272 (and $x150 $x113)))
 (let (($x278 (and $x272 $x118)))
 (let (($x65 (and $x278 $x33)))
 (let (($x201 (and $x65 $x240)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x212 (and $x31 $x201)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x198 (and $x36 $x212)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x203 (and $x53 $x198)))
 (let (($x116 (=> $x203 $x25)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x222 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x111 (= $x222 true)))
 (let (($x25 (= $x111 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x93 (concat ?x153 (concat ?x86 ?x162)))))
 (let (($x85 (= input.dst.llvm-%n ?x229)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x130 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x130 (concat ?x155 (concat ?x202 ?x81)))))
 (let (($x80 (= input.dst.llvm-%x ?x257)))
 (let (($x179 (and $x80 $x85)))
 (let (($x132 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x182 (and $x132 $x179)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= (_ bv0 32) ?x107)))
 (let ((?x56 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x56)))
 (let ((?x30 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x30)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x271 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x168 (and $x250 $x271)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x184 $x168)))
 (let (($x176 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x110))))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 ?x139)))))))))
 ))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge ?x112 (_ bv1 32)))))))
 ))
 (let (($x113 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (=> $x200 $x299)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x112 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= ?x112 (_ bv0 32)))))))
 ))
 (let (($x273 (and $x225 $x113)))
 (let (($x244 (and $x273 $x239)))
 (let (($x68 (and $x244 $x176)))
 (let (($x199 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x121 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x209 (and $x134 $x121)))
 (let (($x175 (not $x209)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x276 (and $x43 $x219)))
 (let (($x242 (and (not $x276) $x175)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x241 (and $x136 $x234)))
 (let (($x231 (not $x241)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x49 $x228)))
 (let (($x96 (and (not $x259) $x231)))
 (let (($x302 (and (and (and (and (and (and $x96 $x242) $x9) $x199) $x68) $x50) $x82)))
 (let (($x22 (and (and (and $x302 $x268) $x131) $x182)))
 (let (($x24 (= $x22 true)))
 (let (($x160 (= $x24 true)))
 (let (($x240 (= $x160 true)))
 (let (($x33 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (=> $x170 (= ?x63 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x170 (bvuge ?x256 (_ bv1 32))))
 (= $x170 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x256 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x200 (= ?x256 (_ bv0 32))))
 (= $x200 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x272 (and $x150 $x113)))
 (let (($x278 (and $x272 $x118)))
 (let (($x65 (and $x278 $x33)))
 (let (($x201 (and $x65 $x240)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x212 (and $x31 $x201)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x198 (and $x36 $x212)))
 (let (($x53 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x203 (and $x53 $x198)))
 (let (($x116 (=> $x203 $x25)))
 (not $x116))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x5))))
 (let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 ?x71)))))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x346 (_ bv1 32)))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x209 (= false false)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (=> $x193 $x209)))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x350 (and $x349 $x46)))
 (let (($x362 (and $x350 $x361)))
 (let (($x376 (and $x362 $x59)))
 (let (($x377 (= $x376 true)))
 (let (($x378 (= $x377 true)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x127 (concat ?x248 (concat ?x125 ?x275)))))
 (let (($x87 (= input.dst.llvm-%n ?x252)))
 (let ((?x247 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x143 (concat ?x6 (concat ?x41 ?x247)))))
 (let (($x60 (= input.dst.llvm-%x ?x97)))
 (let (($x119 (and $x60 $x87)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (and $x105 $x119)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x216)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x235)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x211)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x171 $x57)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x77 $x54)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x188 (_ bv1 32)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= ?x188 (_ bv0 32)))))))
 ))
 (let (($x75 (and $x177 $x46)))
 (let (($x101 (and $x75 $x146)))
 (let (($x274 (and $x101 $x59)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x173 $x30)))
 (let (($x302 (not $x82)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x271 $x168)))
 (let (($x268 (and (not $x50) $x302)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x176 $x68)))
 (let (($x184 (not $x294)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x110 $x139)))
 (let (($x51 (and (not $x142) $x184)))
 (let (($x35 (and (and (and (and (and (and $x51 $x268) $x107) $x55) $x274) $x117) $x264)))
 (let (($x277 (and (and (and $x35 $x164) $x23) $x38)))
 (let (($x21 (= $x277 true)))
 (let (($x220 (= $x21 true)))
 (let (($x149 (= $x220 true)))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x137 (and $x121 $x46)))
 (let (($x237 (and $x137 $x189)))
 (let (($x29 (and $x237 $x249)))
 (let (($x261 (and $x29 $x149)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x144 (and $x31 $x261)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x157 (and $x36 $x144)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x158 (and $x64 $x157)))
 (let (($x379 (=> $x158 $x378)))
 (not $x379))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x5))))
 (let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 ?x71)))))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x346 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x346 (_ bv1 32)))))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x209 (= false false)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (=> $x193 $x209)))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var (_ bv0 32))) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x350 (and $x349 $x46)))
 (let (($x362 (and $x350 $x361)))
 (let (($x376 (and $x362 $x59)))
 (let (($x377 (= $x376 true)))
 (let (($x378 (= $x377 true)))
 (let ((?x275 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x252 (concat ?x127 (concat ?x248 (concat ?x125 ?x275)))))
 (let (($x87 (= input.dst.llvm-%n ?x252)))
 (let ((?x247 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x143 (concat ?x6 (concat ?x41 ?x247)))))
 (let (($x60 (= input.dst.llvm-%x ?x97)))
 (let (($x119 (and $x60 $x87)))
 (let (($x105 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x38 (and $x105 $x119)))
 (let ((?x216 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x216)))
 (let ((?x235 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x164 (= (_ bv0 32) ?x235)))
 (let ((?x133 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x264 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x133)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x211)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x54 (and $x171 $x57)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x77 $x54)))
 (let (($x146 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge ?x188 (_ bv1 32)))))))
 ))
 (let (($x177 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x188 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= ?x188 (_ bv0 32)))))))
 ))
 (let (($x75 (and $x177 $x46)))
 (let (($x101 (and $x75 $x146)))
 (let (($x274 (and $x101 $x59)))
 (let (($x55 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x107 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x173 $x30)))
 (let (($x302 (not $x82)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x271 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x50 (and $x271 $x168)))
 (let (($x268 (and (not $x50) $x302)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x176 $x68)))
 (let (($x184 (not $x294)))
 (let (($x139 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x110 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x142 (and $x110 $x139)))
 (let (($x51 (and (not $x142) $x184)))
 (let (($x35 (and (and (and (and (and (and $x51 $x268) $x107) $x55) $x274) $x117) $x264)))
 (let (($x277 (and (and (and $x35 $x164) $x23) $x38)))
 (let (($x21 (= $x277 true)))
 (let (($x220 (= $x21 true)))
 (let (($x149 (= $x220 true)))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x223 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (=> $x225 (= ?x223 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x189 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x225 (bvuge ?x276 (_ bv1 32))))
 (= $x225 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x121 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x276 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x193 (= ?x276 (_ bv0 32))))
 (= $x193 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x137 (and $x121 $x46)))
 (let (($x237 (and $x137 $x189)))
 (let (($x29 (and $x237 $x249)))
 (let (($x261 (and $x29 $x149)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x144 (and $x31 $x261)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x157 (and $x36 $x144)))
 (let (($x64 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x158 (and $x64 $x157)))
 (let (($x379 (=> $x158 $x378)))
 (not $x379))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0fffefcc)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0fffef9c)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x14220700)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0fffefcf)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0fffef9f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0fffefcc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0fffef9c)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0fffefcf) #x14
    (ite (= x!0 #x0fffefce) #x22
    (ite (= x!0 #x0fffefcd) #x07
    (ite (= x!0 #x0fffef9c) #x01
      #x00)))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x0fffefcf)
                                     (k!1 #x0fffefce)
                                     (k!1 #x0fffefcd)
                                     (k!1 #x0fffefcc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4fe74b98)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x42eb9694)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x6b1eff00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x42eb9697)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4fe74b9b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x42eb9694)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4fe74b98)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x4fe74b99) #x00
    (ite (= x!0 #x42eb9696) #x1e
    (ite (= x!0 #x4fe74b98) #x01
    (ite (= x!0 #x6b1eff02) #x00
    (ite (= x!0 #x4fe74b9b) #x00
    (ite (= x!0 #x6b1eff03) #x00
    (ite (= x!0 #x6b1eff01) #x00
    (ite (= x!0 #x4fe74b9a) #x00
    (ite (= x!0 #x6b1eff00) #x00
    (ite (= x!0 #x42eb9695) #xff
    (ite (= x!0 #x42eb9694) #x00
      #x6b))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x42eb9697)
                                     (k!1 #x42eb9696)
                                     (k!1 #x42eb9695)
                                     (k!1 #x42eb9694))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000001 x!0)
         (ite (bvule #x00000002 x!0) #x00000002 #x00000001)
         #x00000000))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x100 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x364 (bvadd ?x100 input.dst.llvm-%n)))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x370))))
 (let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 ?x372))))))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge ?x80 (_ bv1 32)))))))
 ))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x82 (= false false)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (=> $x56 $x82)))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= ?x80 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x93 $x39)))
 (let (($x111 (and $x86 $x222)))
 (let (($x383 (and $x111 $x382)))
 (let (($x384 (= $x383 true)))
 (let (($x385 (= $x384 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x166 (concat ?x124 (concat ?x32 ?x227)))))
 (let (($x236 (= input.dst.llvm-%n ?x195)))
 (let ((?x233 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x19 (concat ?x199 (concat ?x9 ?x233)))))
 (let (($x258 (= input.dst.llvm-%x ?x26)))
 (let (($x190 (and $x258 $x236)))
 (let (($x291 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x196 (and $x291 $x190)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x259)))
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x303)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x206)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (and $x207 $x204)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x147 $x297)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x100 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x100 input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x282))))
 (let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 ?x154))))))))))
 ))
 (let (($x284 (and $x111 $x138)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x90 $x133)))
 (let (($x35 (not $x264)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x57 $x54)))
 (let (($x164 (and (not $x117) $x35)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x59 $x274)))
 (let (($x77 (not $x301)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x5 $x71)))
 (let (($x211 (and (not $x255) $x77)))
 (let (($x120 (and (and (and (and (and (and $x211 $x164) $x216) $x263) $x284) $x66) $x94)))
 (let (($x17 (and (and (and $x120 $x228) $x169) $x196)))
 (let (($x63 (= $x17 true)))
 (let (($x84 (= $x63 true)))
 (let (($x156 (= $x84 true)))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x167 (and $x30 $x39)))
 (let (($x181 (and $x167 $x185)))
 (let (($x208 (and $x181 $x11)))
 (let (($x33 (and $x208 $x156)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x65 (and $x31 $x33)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x64 $x65)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x36 $x126)))
 (let (($x386 (=> $x15 $x385)))
 (not $x386)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x382 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x100 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x364 (bvadd ?x100 input.dst.llvm-%n)))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x370))))
 (let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 ?x372))))))))))
 ))
 (let (($x222 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge ?x80 (_ bv1 32)))))))
 ))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x82 (= false false)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (=> $x56 $x82)))))
 ))
 (let (($x93 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= ?x80 (_ bv0 32)))))))
 ))
 (let (($x86 (and $x93 $x39)))
 (let (($x111 (and $x86 $x222)))
 (let (($x383 (and $x111 $x382)))
 (let (($x384 (= $x383 true)))
 (let (($x385 (= $x384 true)))
 (let ((?x227 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x166 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x166 (concat ?x124 (concat ?x32 ?x227)))))
 (let (($x236 (= input.dst.llvm-%n ?x195)))
 (let ((?x233 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x19 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x19 (concat ?x199 (concat ?x9 ?x233)))))
 (let (($x258 (= input.dst.llvm-%x ?x26)))
 (let (($x190 (and $x258 $x236)))
 (let (($x291 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x196 (and $x291 $x190)))
 (let ((?x259 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x169 (= (_ bv0 32) ?x259)))
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x228 (= (_ bv0 32) ?x303)))
 (let ((?x163 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x163)))
 (let ((?x206 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x204 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x206)))
 (let (($x207 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x297 (and $x207 $x204)))
 (let (($x147 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x66 (and $x147 $x297)))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x100 (bvmul Lambda1Var (_ bv4 32))))
 (let ((?x180 (bvadd ?x100 input.dst.llvm-%x)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv1 32))) (select input.dst.llvm-mem ?x180))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x180 (_ bv2 32))) ?x282))))
 (let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 ?x154))))))))))
 ))
 (let (($x284 (and $x111 $x138)))
 (let (($x263 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x264 (and $x90 $x133)))
 (let (($x35 (not $x264)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x57 $x54)))
 (let (($x164 (and (not $x117) $x35)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x59 $x274)))
 (let (($x77 (not $x301)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x5 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x255 (and $x5 $x71)))
 (let (($x211 (and (not $x255) $x77)))
 (let (($x120 (and (and (and (and (and (and $x211 $x164) $x216) $x263) $x284) $x66) $x94)))
 (let (($x17 (and (and (and $x120 $x228) $x169) $x196)))
 (let (($x63 (= $x17 true)))
 (let (($x84 (= $x63 true)))
 (let (($x156 (= $x84 true)))
 (let (($x11 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x174 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (=> $x177 (= ?x174 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x185 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x50 (_ bv1 32))))
 (= $x177 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x50 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x56 (= ?x50 (_ bv0 32))))
 (= $x56 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x167 (and $x30 $x39)))
 (let (($x181 (and $x167 $x185)))
 (let (($x208 (and $x181 $x11)))
 (let (($x33 (and $x208 $x156)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x65 (and $x31 $x33)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x126 (and $x64 $x65)))
 (let (($x36 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x15 (and $x36 $x126)))
 (let (($x386 (=> $x15 $x385)))
 (not $x386)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x1000003c)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x3029f000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x40224000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00002600)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1000003f)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x1000003c)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc0a7e603) #x40
    (ite (= x!0 #x1000003d) #x26
    (ite (= x!0 #x00000001) #x40
    (ite (= x!0 #x00000003) #x40
    (ite (= x!0 #x00000002) #x22
      #x00))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x3029f000) #x40000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x1000003f)
                                     (k!1 #x1000003e)
                                     (k!1 #x1000003d)
                                     (k!1 #x1000003c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x3029f000))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x40224000 x!0)
         (ite (bvule #x40224001 x!0) #x40224001 #x40224000)
         #x3029f000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x3029f000) true
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x3029f000) #x40000000
      (input.spec-%var-x-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!1))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7ffffffc)
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x0c8ffffe)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x0dc00006)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x0b800000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7fffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7ffffffc)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #x7ffffffe) #x80
    (ite (= x!0 #xfffffff8) #x06
    (ite (= x!0 #xfffffffb) #x0d
    (ite (= x!0 #x40000000) #x00
    (ite (= x!0 #x40000001) #x00
    (ite (= x!0 #xfffffffa) #xc0
    (ite (= x!0 #x7ffffffd) #x00
    (ite (= x!0 #x3fffffff) #x00
    (ite (= x!0 #x7fffffff) #x0b
    (ite (= x!0 #x7ffffffc) #x00
    (ite (= x!0 #x3dbffff9) #x00
    (ite (= x!0 #x3dbffffa) #x00
    (ite (= x!0 #x3dbffffb) #x00
    (ite (= x!0 #x3dbffff8) #x00
      #x40))))))))))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0c8ffffe) #x00000000
      (let ((a!1 (k!1 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc)))))
            (a!2 (k!1 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc)))))
            (a!3 (k!1 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc)))))
            (a!4 (k!1 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!1 #x7fffffff)
                                     (k!1 #x7ffffffe)
                                     (k!1 #x7ffffffd)
                                     (k!1 #x7ffffffc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x0c8ffffe) #x00000000
      (input.spec-%var-x-1.1.1 x!0)))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0dc00006 x!0)
         (ite (bvule #x0dc00007 x!0) #x0dc00007 #x0dc00006)
         #x0c8ffffe))
  (define-fun input.spec-%var-x-1.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0c8ffffe) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!3 (k!2 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x0c8ffffe) true
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x200 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x137 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x360))))
 (let ((?x104 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (=> $x257 (= ?x104 ?x76)))))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x128 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (= $x257 (bvuge ?x128 (_ bv1 32)))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x133 (= false false)))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x54 (_ bv0 32))))
 (=> $x117 $x133)))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x128 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x54 (_ bv0 32))))
 (= $x117 (= ?x128 (_ bv0 32)))))))
 ))
 (let (($x103 (and $x60 $x164)))
 (let (($x347 (and $x103 $x149)))
 (let (($x380 (and $x347 $x200)))
 (let (($x29 (= $x380 true)))
 (let (($x88 (= $x29 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x212 (concat ?x240 (concat ?x24 ?x179)))))
 (let (($x201 (= input.dst.llvm-%n ?x198)))
 (let ((?x253 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x55 (concat ?x107 (concat ?x159 ?x253)))))
 (let (($x182 (= input.dst.llvm-%x ?x229)))
 (let (($x299 (and $x182 $x201)))
 (let (($x7 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x296 (and $x7 $x299)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x118)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x135)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x379 $x140)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x91 $x81)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x66 $x267)))
 (let (($x94 (not $x163)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x297 (and $x206 $x204)))
 (let (($x303 (and (not $x297) $x94)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x221 $x138)))
 (let (($x194 (not $x284)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x108 $x95)))
 (let (($x207 (and (not $x154) $x194)))
 (let (($x150 (and (and (and (and (and (and $x207 $x303) $x145) $x169) $x380) $x155) $x279)))
 (let (($x28 (and (and (and $x150 $x12) $x210) $x296)))
 (let (($x272 (= $x28 true)))
 (let (($x170 (= $x272 true)))
 (let (($x251 (= $x170 true)))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (=> $x257 (= ?x104 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (= $x257 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x54 (_ bv0 32))))
 (= $x117 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x197 (and $x90 $x164)))
 (let (($x116 (and $x197 $x86)))
 (let (($x205 (and $x116 $x230)))
 (let (($x223 (and $x205 $x251)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x67 (and $x14 $x223)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x300 (and $x10 $x67)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x249 (and $x37 $x300)))
 (let (($x254 (=> $x249 $x88)))
 (not $x254)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x200 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x137 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x360))))
 (let ((?x104 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (=> $x257 (= ?x104 ?x76)))))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x128 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (= $x257 (bvuge ?x128 (_ bv1 32)))))))
 ))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x133 (= false false)))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x54 (_ bv0 32))))
 (=> $x117 $x133)))))
 ))
 (let (($x60 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x128 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x54 (_ bv0 32))))
 (= $x117 (= ?x128 (_ bv0 32)))))))
 ))
 (let (($x103 (and $x60 $x164)))
 (let (($x347 (and $x103 $x149)))
 (let (($x380 (and $x347 $x200)))
 (let (($x29 (= $x380 true)))
 (let (($x88 (= $x29 true)))
 (let ((?x179 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x212 (concat ?x240 (concat ?x24 ?x179)))))
 (let (($x201 (= input.dst.llvm-%n ?x198)))
 (let ((?x253 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x229 (concat ?x55 (concat ?x107 (concat ?x159 ?x253)))))
 (let (($x182 (= input.dst.llvm-%x ?x229)))
 (let (($x299 (and $x182 $x201)))
 (let (($x7 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x296 (and $x7 $x299)))
 (let ((?x118 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x210 (= (_ bv0 32) ?x118)))
 (let ((?x135 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x12 (= (_ bv0 32) ?x135)))
 (let ((?x293 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x279 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x293)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x140 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x123)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (and $x379 $x140)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x91 $x81)))
 (let (($x169 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x267 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x66 $x267)))
 (let (($x94 (not $x163)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x206 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x297 (and $x206 $x204)))
 (let (($x303 (and (not $x297) $x94)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (and $x221 $x138)))
 (let (($x194 (not $x284)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (and $x108 $x95)))
 (let (($x207 (and (not $x154) $x194)))
 (let (($x150 (and (and (and (and (and (and $x207 $x303) $x145) $x169) $x380) $x155) $x279)))
 (let (($x28 (and (and (and $x150 $x12) $x210) $x296)))
 (let (($x272 (= $x28 true)))
 (let (($x170 (= $x272 true)))
 (let (($x251 (= $x170 true)))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x104 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (=> $x257 (= ?x104 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x54 (_ bv1 32))))
 (= $x257 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x90 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x54 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x54 (_ bv0 32))))
 (= $x117 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x197 (and $x90 $x164)))
 (let (($x116 (and $x197 $x86)))
 (let (($x205 (and $x116 $x230)))
 (let (($x223 (and $x205 $x251)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x67 (and $x14 $x223)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x300 (and $x10 $x67)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x249 (and $x37 $x300)))
 (let (($x254 (=> $x249 $x88)))
 (not $x254)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x231))))
 (let ((?x378 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (=> $x60 (= ?x378 ?x298)))))))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (= $x60 (bvuge ?x306 (_ bv1 32)))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x163 (= false false)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (=> $x120 $x163)))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (= $x120 (= ?x306 (_ bv0 32)))))))
 ))
 (let (($x320 (and $x314 $x20)))
 (let (($x325 (and $x320 $x328)))
 (let (($x355 (and $x325 $x71)))
 (let (($x356 (= $x355 true)))
 (let (($x353 (= $x356 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x242 (concat ?x134 (concat ?x144 ?x157)))))
 (let (($x181 (= input.dst.llvm-%n ?x288)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x96 (concat ?x348 (concat ?x277 ?x73)))))
 (let (($x346 (= input.dst.llvm-%x ?x43)))
 (let (($x174 (and $x346 $x181)))
 (let (($x87 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x215 (and $x87 $x174)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x97)))
 (let ((?x283 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x283)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x237)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x189 $x161)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x187 $x47)))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (= $x60 (bvuge ?x84 (_ bv1 32)))))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (= $x120 (= ?x84 (_ bv0 32)))))))
 ))
 (let (($x364 (and $x15 $x20)))
 (let (($x82 (and $x364 $x30)))
 (let (($x273 (and $x82 $x71)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x203 $x293)))
 (let (($x150 (not $x279)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x140 $x81)))
 (let (($x12 (and (not $x155) $x150)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x200 $x380)))
 (let (($x91 (not $x8)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x360 $x76)))
 (let (($x123 (and (not $x178) $x91)))
 (let (($x255 (and (and (and (and (and (and $x123 $x12) $x118) $x113) $x273) $x264) $x216)))
 (let (($x59 (and (and (and $x255 $x23) $x125) $x215)))
 (let (($x263 (= $x59 true)))
 (let (($x69 (= $x263 true)))
 (let (($x153 (= $x69 true)))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x378 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (=> $x60 (= ?x378 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (= $x60 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (= $x120 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x228 (and $x267 $x20)))
 (let (($x220 (and $x228 $x21)))
 (let (($x376 (and $x220 $x361)))
 (let (($x105 (and $x376 $x153)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x14 $x105)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x80 (and $x10 $x152)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x111 (and $x241 $x80)))
 (let (($x352 (=> $x111 $x353)))
 (not $x352))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x71 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x384 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv1 32))) (select input.dst.llvm-mem ?x384))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x384 (_ bv2 32))) ?x231))))
 (let ((?x378 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (=> $x60 (= ?x378 ?x298)))))))))
 ))
 (let (($x328 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (= $x60 (bvuge ?x306 (_ bv1 32)))))))
 ))
 (let (($x20 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x163 (= false false)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (=> $x120 $x163)))))
 ))
 (let (($x314 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x306 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%x)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (= $x120 (= ?x306 (_ bv0 32)))))))
 ))
 (let (($x320 (and $x314 $x20)))
 (let (($x325 (and $x320 $x328)))
 (let (($x355 (and $x325 $x71)))
 (let (($x356 (= $x355 true)))
 (let (($x353 (= $x356 true)))
 (let ((?x157 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x134 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x288 (concat ?x242 (concat ?x134 (concat ?x144 ?x157)))))
 (let (($x181 (= input.dst.llvm-%n ?x288)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x96 (concat ?x348 (concat ?x277 ?x73)))))
 (let (($x346 (= input.dst.llvm-%x ?x43)))
 (let (($x174 (and $x346 $x181)))
 (let (($x87 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x215 (and $x87 $x174)))
 (let ((?x97 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x125 (= (_ bv0 32) ?x97)))
 (let ((?x283 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x283)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x216 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x161 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x237)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x47 (and $x189 $x161)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (and $x187 $x47)))
 (let (($x30 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (= $x60 (bvuge ?x84 (_ bv1 32)))))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x84 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (= $x120 (= ?x84 (_ bv0 32)))))))
 ))
 (let (($x364 (and $x15 $x20)))
 (let (($x82 (and $x364 $x30)))
 (let (($x273 (and $x82 $x71)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x279 (and $x203 $x293)))
 (let (($x150 (not $x279)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x140 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x140 $x81)))
 (let (($x12 (and (not $x155) $x150)))
 (let (($x380 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x200 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x200 $x380)))
 (let (($x91 (not $x8)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x360 $x76)))
 (let (($x123 (and (not $x178) $x91)))
 (let (($x255 (and (and (and (and (and (and $x123 $x12) $x118) $x113) $x273) $x264) $x216)))
 (let (($x59 (and (and (and $x255 $x23) $x125) $x215)))
 (let (($x263 (= $x59 true)))
 (let (($x69 (= $x263 true)))
 (let (($x153 (= $x69 true)))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x378 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (=> $x60 (= ?x378 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x21 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x297 (_ bv1 32))))
 (= $x60 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x267 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x120 (= ?x297 (_ bv0 32))))
 (= $x120 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x228 (and $x267 $x20)))
 (let (($x220 (and $x228 $x21)))
 (let (($x376 (and $x220 $x361)))
 (let (($x105 (and $x376 $x153)))
 (let (($x14 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x152 (and $x14 $x105)))
 (let (($x10 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x80 (and $x10 $x152)))
 (let (($x241 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x111 (and $x241 $x80)))
 (let (($x352 (=> $x111 $x353)))
 (not $x352))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x14201888)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun Lambda1Var!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x30205184)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x1420188b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x30205187)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x14201888)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x30205184)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x14201888) #x04
      #x00))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #x1420188b)
                                   (k!2 #x1420188a)
                                   (k!2 #x14201889)
                                   (k!2 #x14201888))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun Lambda1Var!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf565e360)
  (define-fun Lambda1Var!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa1d99184)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa1d99187)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf565e363)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa1d99184)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf565e360)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xf565e361) #x00
    (ite (= x!0 #xa1d99186) #x00
    (ite (= x!0 #xf565e360) #x00
    (ite (= x!0 #xf565e363) #x00
    (ite (= x!0 #xf565e362) #x00
    (ite (= x!0 #xa1d99185) #x00
    (ite (= x!0 #xa1d99187) #x00
      #x04))))))))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!2 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184)))))
          (a!2 (k!2 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184)))))
          (a!3 (k!2 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184)))))
          (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!2 #xa1d99187)
                                   (k!2 #xa1d99186)
                                   (k!2 #xa1d99185)
                                   (k!2 #xa1d99184))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) false
      (input.spec-%var-x-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (= false true)))
 (let (($x147 (= $x108 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x381 (concat ?x268 (concat ?x184 ?x98)))))
 (let (($x370 (= input.dst.llvm-%n ?x276)))
 (let ((?x236 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x65 (concat ?x169 (concat ?x145 ?x236)))))
 (let (($x366 (= input.dst.llvm-%x ?x126)))
 (let (($x368 (and $x366 $x370)))
 (let (($x195 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x373 (and $x195 $x368)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x154)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x282)))
 (let ((?x258 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x258)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x227 $x124)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x291 $x244)))
 (let (($x278 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x168 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x70))))
 (let ((?x6 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (=> $x371 (= ?x6 ?x199)))))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (= $x371 (bvuge ?x182 (_ bv1 32)))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x293 (= false false)))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x81 (_ bv0 32))))
 (=> $x155 $x293)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x81 (_ bv0 32))))
 (= $x155 (= ?x182 (_ bv0 32)))))))
 ))
 (let (($x24 (and $x212 $x12)))
 (let (($x88 (and $x24 $x29)))
 (let (($x75 (and $x88 $x278)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x264 $x286)))
 (let (($x216 (not $x141)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x237 $x161)))
 (let (($x283 (and (not $x47) $x216)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x295 $x71)))
 (let (($x165 (not $x273)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x382 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x382 $x115)))
 (let (($x189 (and (not $x298) $x165)))
 (let (($x46 (and (and (and (and (and (and $x189 $x283) $x171) $x125) $x75) $x26) $x99)))
 (let (($x269 (and (and (and $x46 $x95) $x83) $x373)))
 (let (($x104 (= $x269 true)))
 (let (($x275 (= $x104 true)))
 (let (($x34 (= $x275 true)))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (=> $x371 (= ?x6 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (= $x371 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x81 (_ bv0 32))))
 (= $x155 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x217 (and $x203 $x12)))
 (let (($x51 (and $x217 $x364)))
 (let (($x247 (and $x51 $x148)))
 (let (($x230 (and $x247 $x34)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x205 (and $x64 $x230)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x186 (and $x53 $x205)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x151 (and $x109 $x186)))
 (let (($x16 (=> $x151 $x147)))
 (not $x16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x108 (= false true)))
 (let (($x147 (= $x108 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x268 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x381 (concat ?x268 (concat ?x184 ?x98)))))
 (let (($x370 (= input.dst.llvm-%n ?x276)))
 (let ((?x236 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x126 (concat ?x65 (concat ?x169 (concat ?x145 ?x236)))))
 (let (($x366 (= input.dst.llvm-%x ?x126)))
 (let (($x368 (and $x366 $x370)))
 (let (($x195 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x373 (and $x195 $x368)))
 (let ((?x154 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x83 (= (_ bv0 32) ?x154)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x95 (= (_ bv0 32) ?x282)))
 (let ((?x258 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x258)))
 (let ((?x239 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x124 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x239)))
 (let (($x227 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x244 (and $x227 $x124)))
 (let (($x291 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x291 $x244)))
 (let (($x278 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x168 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x70))))
 (let ((?x6 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (=> $x371 (= ?x6 ?x199)))))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (= $x371 (bvuge ?x182 (_ bv1 32)))))))
 ))
 (let (($x12 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x293 (= false false)))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x81 (_ bv0 32))))
 (=> $x155 $x293)))))
 ))
 (let (($x212 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x182 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x81 (_ bv0 32))))
 (= $x155 (= ?x182 (_ bv0 32)))))))
 ))
 (let (($x24 (and $x212 $x12)))
 (let (($x88 (and $x24 $x29)))
 (let (($x75 (and $x88 $x278)))
 (let (($x125 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x264 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x141 (and $x264 $x286)))
 (let (($x216 (not $x141)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x237 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x47 (and $x237 $x161)))
 (let (($x283 (and (not $x47) $x216)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x273 (and $x295 $x71)))
 (let (($x165 (not $x273)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x382 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (and $x382 $x115)))
 (let (($x189 (and (not $x298) $x165)))
 (let (($x46 (and (and (and (and (and (and $x189 $x283) $x171) $x125) $x75) $x26) $x99)))
 (let (($x269 (and (and (and $x46 $x95) $x83) $x373)))
 (let (($x104 (= $x269 true)))
 (let (($x275 (= $x104 true)))
 (let (($x34 (= $x275 true)))
 (let (($x148 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x6 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (=> $x371 (= ?x6 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x371 (bvuge ?x81 (_ bv1 32))))
 (= $x371 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x203 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x155 (= ?x81 (_ bv0 32))))
 (= $x155 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x217 (and $x203 $x12)))
 (let (($x51 (and $x217 $x364)))
 (let (($x247 (and $x51 $x148)))
 (let (($x230 (and $x247 $x34)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x205 (and $x64 $x230)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x186 (and $x53 $x205)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x151 (and $x109 $x186)))
 (let (($x16 (=> $x151 $x147)))
 (not $x16)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000054)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000803)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000057)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000800)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000054)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000803)
                                   (k!0 #x00000802)
                                   (k!0 #x00000801)
                                   (k!0 #x00000800))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x2cd631b8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x2c691638)
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x2c69163b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x2cd631bb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x2c691638)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x2cd631b8)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x2c69163b)
                                   (k!0 #x2c69163a)
                                   (k!0 #x2c691639)
                                   (k!0 #x2c691638))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (input.spec-%var-x-1.1.1 x!0))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    false)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (= $x218 false)))
 (let (($x332 (= $x336 true)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x318 (= $x315 true)))
 (let (($x324 (= $x318 true)))
 (let ((?x191 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvadd input.dst.llvm-%x ?x191)))
 (let (($x129 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x234 (_ bv3 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x214 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x330 (or false (or false (and (and true (or $x313 $x214)) (or $x245 $x129))))))
 (let (($x331 (=> (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32))) $x330)))
 (let (($x74 (=> (and $x218 (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32)))) $x330)))
 (let (($x52 (= $x74 true)))
 (let (($x321 (= $x52 true)))
 (let (($x317 (= $x321 true)))
 (let (($x18 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x48 (= $x18 true)))
 (let (($x246 (= $x48 true)))
 (let (($x27 (= $x246 true)))
 (let (($x112 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x112 true)))
 (let (($x106 (= $x289 true)))
 (let (($x285 (= $x106 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x202 (= $x188 true)))
 (let (($x162 (= $x202 true)))
 (let (($x58 (= $x162 true)))
 (let (($x265 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x265 true)))
 (let (($x132 (= $x78 true)))
 (let (($x44 (= $x132 true)))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x113))))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (=> $x212 (= ?x185 ?x82)))))))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x198 (_ bv1 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (= $x212 $x77))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x47 (_ bv0 32))))
 (=> $x255 $x141)))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x198 (_ bv0 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x47 (_ bv0 32))))
 (= $x255 $x296))))))
 ))
 (let (($x19 (and $x248 $x365)))
 (let (($x32 (and $x19 $x137)))
 (let (($x79 (and $x32 $x180)))
 (let (($x176 (= $x79 true)))
 (let (($x68 (= $x176 true)))
 (let (($x287 (= $x68 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x113))))
 (let ((?x45 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x189 (_ bv1 32))))
 (=> $x229 (= ?x45 ?x82)))))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x198 (_ bv1 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x189 (_ bv1 32))))
 (= $x229 $x77))))))
 ))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x189 (_ bv0 32))))
 (=> $x237 $x141)))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x198 (_ bv0 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x189 (_ bv0 32))))
 (= $x237 $x296))))))
 ))
 (let (($x170 (and $x299 $x196)))
 (let (($x294 (and $x170 $x254)))
 (let (($x384 (and $x294 $x281)))
 (let (($x138 (= $x384 true)))
 (let (($x25 (= $x138 true)))
 (let (($x243 (= $x25 true)))
 (let (($x345 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x72 (= $x345 true)))
 (let (($x157 (= $x72 true)))
 (let (($x103 (= (_ bv0 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let (($x21 (= $x103 true)))
 (let (($x348 (= $x21 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x221)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x147)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (and $x104 $x230)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x269 $x205)))
 (let (($x373 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x370 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x268 $x173)))
 (let (($x98 (not $x184)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x347 (and $x167 $x381)))
 (let (($x39 (and (not $x347) $x98)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x145 $x236)))
 (let (($x33 (not $x61)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x156 $x259)))
 (let (($x366 (and (not $x169) $x33)))
 (let (($x127 (and (and (and (and (and (and $x366 $x39) $x370) $x373) $x186) $x108) $x16)))
 (let (($x277 (and $x127 $x14)))
 (let (($x222 (= $x277 true)))
 (let (($x367 (= $x222 true)))
 (let (($x190 (= $x367 true)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x154 true)))
 (let (($x387 (= $x83 true)))
 (let (($x258 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x99 (= $x258 true)))
 (let (($x46 (= $x99 true)))
 (let (($x282 (= $x46 true)))
 (let (($x239 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x124 (= $x239 true)))
 (let (($x244 (= $x124 true)))
 (let (($x26 (= $x244 true)))
 (let (($x278 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x75 (= $x278 true)))
 (let (($x375 (= $x75 true)))
 (let (($x291 (= $x375 true)))
 (let ((?x70 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x213 (= (_ bv0 2) ?x70)))
 (let (($x199 (= $x213 true)))
 (let (($x177 (= $x199 true)))
 (let (($x227 (and $x177 $x291)))
 (let (($x193 (and $x227 $x26)))
 (let (($x95 (and $x193 $x282)))
 (let (($x280 (and $x95 $x387)))
 (let (($x60 (and $x280 $x190)))
 (let (($x87 (and $x60 $x348)))
 (let (($x158 (and $x87 $x157)))
 (let (($x238 (and $x158 $x243)))
 (let (($x172 (and $x238 $x287)))
 (let (($x232 (and $x172 $x44)))
 (let (($x49 (and $x232 $x58)))
 (let (($x136 (and $x49 $x285)))
 (let (($x122 (and $x136 $x27)))
 (let (($x316 (and $x122 $x317)))
 (let (($x323 (and $x316 $x324)))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (=> $x212 (= ?x185 ?x45)))))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x189 (_ bv1 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (= $x212 $x229))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x189 (_ bv0 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x47 (_ bv0 32))))
 (= $x255 $x237))))))
 ))
 (let (($x23 (and $x286 $x365)))
 (let (($x31 (and $x23 $x110)))
 (let (($x50 (and $x31 $x85)))
 (let (($x326 (and $x50 $x323)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x338 (and $x64 $x326)))
 (let (($x274 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x339 (and $x274 $x338)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x334 (and $x109 $x339)))
 (let (($x335 (=> $x334 $x332)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x218 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (= $x218 false)))
 (let (($x332 (= $x336 true)))
 (let (($x315 (= (_ bv0 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x318 (= $x315 true)))
 (let (($x324 (= $x318 true)))
 (let ((?x191 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x234 (bvadd input.dst.llvm-%x ?x191)))
 (let (($x129 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd ?x234 (_ bv3 32))))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x214 (bvugt ?x234 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x330 (or false (or false (and (and true (or $x313 $x214)) (or $x245 $x129))))))
 (let (($x331 (=> (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32))) $x330)))
 (let (($x74 (=> (and $x218 (bvule ?x234 (bvsub (bvadd ?x234 (_ bv4 32)) (_ bv1 32)))) $x330)))
 (let (($x52 (= $x74 true)))
 (let (($x321 (= $x52 true)))
 (let (($x317 (= $x321 true)))
 (let (($x18 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x48 (= $x18 true)))
 (let (($x246 (= $x48 true)))
 (let (($x27 (= $x246 true)))
 (let (($x112 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x289 (= $x112 true)))
 (let (($x106 (= $x289 true)))
 (let (($x285 (= $x106 true)))
 (let (($x188 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x202 (= $x188 true)))
 (let (($x162 (= $x202 true)))
 (let (($x58 (= $x162 true)))
 (let (($x265 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x265 true)))
 (let (($x132 (= $x78 true)))
 (let (($x44 (= $x132 true)))
 (let (($x180 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x113))))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (=> $x212 (= ?x185 ?x82)))))))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x198 (_ bv1 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (= $x212 $x77))))))
 ))
 (let (($x365 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x47 (_ bv0 32))))
 (=> $x255 $x141)))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x198 (_ bv0 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x47 (_ bv0 32))))
 (= $x255 $x296))))))
 ))
 (let (($x19 (and $x248 $x365)))
 (let (($x32 (and $x19 $x137)))
 (let (($x79 (and $x32 $x180)))
 (let (($x176 (= $x79 true)))
 (let (($x68 (= $x176 true)))
 (let (($x287 (= $x68 true)))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x113))))
 (let ((?x45 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x189 (_ bv1 32))))
 (=> $x229 (= ?x45 ?x82)))))))))
 ))
 (let (($x254 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x77 (bvuge ?x198 (_ bv1 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x189 (_ bv1 32))))
 (= $x229 $x77))))))
 ))
 (let (($x196 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x141 (= false false)))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x189 (_ bv0 32))))
 (=> $x237 $x141)))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x198 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (= ?x198 (_ bv0 32))))
 (let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x189 (_ bv0 32))))
 (= $x237 $x296))))))
 ))
 (let (($x170 (and $x299 $x196)))
 (let (($x294 (and $x170 $x254)))
 (let (($x384 (and $x294 $x281)))
 (let (($x138 (= $x384 true)))
 (let (($x25 (= $x138 true)))
 (let (($x243 (= $x25 true)))
 (let (($x345 (= (_ bv0 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x72 (= $x345 true)))
 (let (($x157 (= $x72 true)))
 (let (($x103 (= (_ bv0 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let (($x21 (= $x103 true)))
 (let (($x348 (= $x21 true)))
 (let ((?x221 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x14 (= (_ bv0 32) ?x221)))
 (let ((?x147 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x147)))
 (let ((?x151 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x108 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x151)))
 (let ((?x34 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x230 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x205 (and $x104 $x230)))
 (let (($x269 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x186 (and $x269 $x205)))
 (let (($x373 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x370 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x268 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x184 (and $x268 $x173)))
 (let (($x98 (not $x184)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x167 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x347 (and $x167 $x381)))
 (let (($x39 (and (not $x347) $x98)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x61 (and $x145 $x236)))
 (let (($x33 (not $x61)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x156 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x156 $x259)))
 (let (($x366 (and (not $x169) $x33)))
 (let (($x127 (and (and (and (and (and (and $x366 $x39) $x370) $x373) $x186) $x108) $x16)))
 (let (($x277 (and $x127 $x14)))
 (let (($x222 (= $x277 true)))
 (let (($x367 (= $x222 true)))
 (let (($x190 (= $x367 true)))
 (let (($x154 (= (_ bv0 32) input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x83 (= $x154 true)))
 (let (($x387 (= $x83 true)))
 (let (($x258 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x99 (= $x258 true)))
 (let (($x46 (= $x99 true)))
 (let (($x282 (= $x46 true)))
 (let (($x239 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x124 (= $x239 true)))
 (let (($x244 (= $x124 true)))
 (let (($x26 (= $x244 true)))
 (let (($x278 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x75 (= $x278 true)))
 (let (($x375 (= $x75 true)))
 (let (($x291 (= $x375 true)))
 (let ((?x70 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x213 (= (_ bv0 2) ?x70)))
 (let (($x199 (= $x213 true)))
 (let (($x177 (= $x199 true)))
 (let (($x227 (and $x177 $x291)))
 (let (($x193 (and $x227 $x26)))
 (let (($x95 (and $x193 $x282)))
 (let (($x280 (and $x95 $x387)))
 (let (($x60 (and $x280 $x190)))
 (let (($x87 (and $x60 $x348)))
 (let (($x158 (and $x87 $x157)))
 (let (($x238 (and $x158 $x243)))
 (let (($x172 (and $x238 $x287)))
 (let (($x232 (and $x172 $x44)))
 (let (($x49 (and $x232 $x58)))
 (let (($x136 (and $x49 $x285)))
 (let (($x122 (and $x136 $x27)))
 (let (($x316 (and $x122 $x317)))
 (let (($x323 (and $x316 $x324)))
 (let (($x85 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x45 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x185 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (=> $x212 (= ?x185 ?x45)))))))
 ))
 (let (($x110 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x189 (_ bv1 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x47 (_ bv1 32))))
 (= $x212 $x229))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x189 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x189 (_ bv0 32))))
 (let ((?x47 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x255 (= ?x47 (_ bv0 32))))
 (= $x255 $x237))))))
 ))
 (let (($x23 (and $x286 $x365)))
 (let (($x31 (and $x23 $x110)))
 (let (($x50 (and $x31 $x85)))
 (let (($x326 (and $x50 $x323)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x338 (and $x64 $x326)))
 (let (($x274 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x339 (and $x274 $x338)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x334 (and $x109 $x339)))
 (let (($x335 (=> $x334 $x332)))
 (not $x335))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x66000500)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x07fee200)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00080000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40002404)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x07fee203)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40002407)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x07fee200)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40002404)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00080000 x!0)
         (ite (bvule #x00080001 x!0) #x00080001 #x00080000)
         #x00000000))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x66000503 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x66000502 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x66000501 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x66000500 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x66000503 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x66000502 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x66000501 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x66000500 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x283b6420)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x8a16aa88)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdc106d64)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdc106d67)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x283b6423)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdc106d64)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x283b6420)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000005 x!0) #x00000005 #x00000004)
         #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x8a16aa8b (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x8a16aa8a (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x8a16aa89 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x8a16aa88 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x8a16aa8b (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x8a16aa8a (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x8a16aa89 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x8a16aa88 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x337 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (not $x380)))
 (let (($x343 (or $x96 (bvuge ?x337 (_ bv1 32)))))
 (let (($x341 (= $x343 true)))
 (let (($x351 (= $x341 true)))
 (let ((?x382 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x187 (bvneg ?x382)))
 (let (($x5 (= ?x187 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x295 (= $x5 true)))
 (let (($x71 (= $x295 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x148 (= $x40 true)))
 (let (($x247 (= $x148 true)))
 (let (($x385 (= $x247 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x266 true)))
 (let (($x160 (= $x100 true)))
 (let (($x6 (= $x160 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x257 (= $x164 true)))
 (let (($x378 (= $x257 true)))
 (let (($x361 (= $x378 true)))
 (let (($x359 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x166 (= $x359 true)))
 (let (($x220 (= $x166 true)))
 (let (($x159 (= $x220 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x29 true)))
 (let (($x249 (= $x88 true)))
 (let (($x90 (= $x249 true)))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x342))))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (=> $x114 (= ?x21 ?x360)))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x80 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (= $x114 $x327))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (=> $x184 $x284)))))
 ))
 (let (($x279 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x80 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (= $x184 $x308))))))
 ))
 (let (($x143 (and $x279 $x204)))
 (let (($x97 (and $x143 $x372)))
 (let (($x300 (and $x97 $x67)))
 (let (($x223 (= $x300 true)))
 (let (($x22 (= $x223 true)))
 (let (($x133 (= $x22 true)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x342))))
 (let ((?x103 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x347 (_ bv1 32))))
 (=> $x108 (= ?x103 ?x360)))))))))
 ))
 (let (($x91 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x80 (_ bv1 32))))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x347 (_ bv1 32))))
 (= $x108 $x327))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x347 (_ bv0 32))))
 (=> $x149 $x284)))))
 ))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x80 (_ bv0 32))))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x347 (_ bv0 32))))
 (= $x149 $x308))))))
 ))
 (let (($x322 (and $x66 $x206)))
 (let (($x123 (and $x322 $x91)))
 (let (($x231 (and $x123 $x116)))
 (let (($x115 (= $x231 true)))
 (let (($x298 (= $x115 true)))
 (let (($x55 (= $x298 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x112 (= $x49 true)))
 (let (($x289 (= $x112 true)))
 (let (($x106 (= $x289 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x188 (= $x232 true)))
 (let (($x202 (= $x188 true)))
 (let (($x162 (= $x202 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x183)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x137)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x243)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x25 $x238)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x138 $x128)))
 (let (($x384 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x379 (and $x256 $x200)))
 (let (($x113 (not $x379)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x306 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x306 $x208)))
 (let (($x82 (and (not $x17) $x113)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x209 $x288)))
 (let (($x178 (not $x225)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x211 $x254)))
 (let (($x84 (and (not $x294) $x178)))
 (let (($x172 (and (and (and (and (and (and $x84 $x82) $x383) $x384) $x248) $x233) $x32)))
 (let (($x292 (and $x172 $x250)))
 (let (($x265 (= $x292 true)))
 (let (($x78 (= $x265 true)))
 (let (($x132 (= $x78 true)))
 (let ((?x299 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x272 (= (_ bv0 2) ?x299)))
 (let (($x196 (= $x272 true)))
 (let (($x170 (= $x196 true)))
 (let ((?x11 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x43 (bvneg ?x11)))
 (let (($x210 (= ?x43 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x210 true)))
 (let (($x296 (= $x198 true)))
 (let (($x77 (and $x296 $x170)))
 (let (($x44 (and $x77 $x132)))
 (let (($x58 (and $x44 $x162)))
 (let (($x285 (and $x58 $x106)))
 (let (($x131 (and $x285 $x55)))
 (let (($x175 (and $x131 $x133)))
 (let (($x235 (and $x175 $x90)))
 (let (($x197 (and $x235 $x159)))
 (let (($x9 (and $x197 $x361)))
 (let (($x179 (and $x9 $x6)))
 (let (($x219 (and $x179 $x385)))
 (let (($x374 (and $x219 $x71)))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (=> $x114 (= ?x21 ?x103)))))))
 ))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x347 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (= $x114 $x108))))))
 ))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x347 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (= $x184 $x149))))))
 ))
 (let (($x368 (and $x39 $x204)))
 (let (($x127 (and $x368 $x16)))
 (let (($x72 (and $x127 $x345)))
 (let (($x240 (and $x72 $x374)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x252 (and $x177 $x240)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x146 (and $x213 $x252)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x182 (and $x226 $x146)))
 (let ((?x36 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvadd input.dst.llvm-%x ?x36)))
 (let (($x31 (bvugt ?x140 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd ?x140 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x365 (bvugt ?x140 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x13 (or false (or false (and (and true (or $x283 $x365)) (or $x110 $x31))))))
 (let (($x50 (=> (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x161 (=> (and $x380 (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x101 (and $x161 $x182)))
 (let (($x354 (=> $x101 $x351)))
 (not $x354))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x337 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x96 (not $x380)))
 (let (($x343 (or $x96 (bvuge ?x337 (_ bv1 32)))))
 (let (($x341 (= $x343 true)))
 (let (($x351 (= $x341 true)))
 (let ((?x382 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x187 (bvneg ?x382)))
 (let (($x5 (= ?x187 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x295 (= $x5 true)))
 (let (($x71 (= $x295 true)))
 (let (($x40 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x148 (= $x40 true)))
 (let (($x247 (= $x148 true)))
 (let (($x385 (= $x247 true)))
 (let (($x266 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x100 (= $x266 true)))
 (let (($x160 (= $x100 true)))
 (let (($x6 (= $x160 true)))
 (let (($x164 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x257 (= $x164 true)))
 (let (($x378 (= $x257 true)))
 (let (($x361 (= $x378 true)))
 (let (($x359 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x166 (= $x359 true)))
 (let (($x220 (= $x166 true)))
 (let (($x159 (= $x220 true)))
 (let (($x29 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x88 (= $x29 true)))
 (let (($x249 (= $x88 true)))
 (let (($x90 (= $x249 true)))
 (let (($x67 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x342))))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (=> $x114 (= ?x21 ?x360)))))))))
 ))
 (let (($x372 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x80 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (= $x114 $x327))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (=> $x184 $x284)))))
 ))
 (let (($x279 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x80 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (= $x184 $x308))))))
 ))
 (let (($x143 (and $x279 $x204)))
 (let (($x97 (and $x143 $x372)))
 (let (($x300 (and $x97 $x67)))
 (let (($x223 (= $x300 true)))
 (let (($x22 (= $x223 true)))
 (let (($x133 (= $x22 true)))
 (let (($x116 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x342))))
 (let ((?x103 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x347 (_ bv1 32))))
 (=> $x108 (= ?x103 ?x360)))))))))
 ))
 (let (($x91 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x80 (_ bv1 32))))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x347 (_ bv1 32))))
 (= $x108 $x327))))))
 ))
 (let (($x206 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x284 (= false false)))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x347 (_ bv0 32))))
 (=> $x149 $x284)))))
 ))
 (let (($x66 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x80 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x308 (= ?x80 (_ bv0 32))))
 (let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x347 (_ bv0 32))))
 (= $x149 $x308))))))
 ))
 (let (($x322 (and $x66 $x206)))
 (let (($x123 (and $x322 $x91)))
 (let (($x231 (and $x123 $x116)))
 (let (($x115 (= $x231 true)))
 (let (($x298 (= $x115 true)))
 (let (($x55 (= $x298 true)))
 (let (($x49 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x112 (= $x49 true)))
 (let (($x289 (= $x112 true)))
 (let (($x106 (= $x289 true)))
 (let (($x232 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x188 (= $x232 true)))
 (let (($x202 (= $x188 true)))
 (let (($x162 (= $x202 true)))
 (let ((?x183 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x250 (= (_ bv0 32) ?x183)))
 (let ((?x137 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x32 (= (_ bv0 32) ?x137)))
 (let ((?x19 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x233 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x243 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x238 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x243)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x25 $x238)))
 (let (($x138 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (and $x138 $x128)))
 (let (($x384 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x200 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x379 (and $x256 $x200)))
 (let (($x113 (not $x379)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x306 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x17 (and $x306 $x208)))
 (let (($x82 (and (not $x17) $x113)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x209 $x288)))
 (let (($x178 (not $x225)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x294 (and $x211 $x254)))
 (let (($x84 (and (not $x294) $x178)))
 (let (($x172 (and (and (and (and (and (and $x84 $x82) $x383) $x384) $x248) $x233) $x32)))
 (let (($x292 (and $x172 $x250)))
 (let (($x265 (= $x292 true)))
 (let (($x78 (= $x265 true)))
 (let (($x132 (= $x78 true)))
 (let ((?x299 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x272 (= (_ bv0 2) ?x299)))
 (let (($x196 (= $x272 true)))
 (let (($x170 (= $x196 true)))
 (let ((?x11 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x43 (bvneg ?x11)))
 (let (($x210 (= ?x43 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x198 (= $x210 true)))
 (let (($x296 (= $x198 true)))
 (let (($x77 (and $x296 $x170)))
 (let (($x44 (and $x77 $x132)))
 (let (($x58 (and $x44 $x162)))
 (let (($x285 (and $x58 $x106)))
 (let (($x131 (and $x285 $x55)))
 (let (($x175 (and $x131 $x133)))
 (let (($x235 (and $x175 $x90)))
 (let (($x197 (and $x235 $x159)))
 (let (($x9 (and $x197 $x361)))
 (let (($x179 (and $x9 $x6)))
 (let (($x219 (and $x179 $x385)))
 (let (($x374 (and $x219 $x71)))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x103 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x21 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (=> $x114 (= ?x21 ?x103)))))))
 ))
 (let (($x16 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x347 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x114 (bvuge ?x173 (_ bv1 32))))
 (= $x114 $x108))))))
 ))
 (let (($x39 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x347 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x149 (= ?x347 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x184 (= ?x173 (_ bv0 32))))
 (= $x184 $x149))))))
 ))
 (let (($x368 (and $x39 $x204)))
 (let (($x127 (and $x368 $x16)))
 (let (($x72 (and $x127 $x345)))
 (let (($x240 (and $x72 $x374)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x252 (and $x177 $x240)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x146 (and $x213 $x252)))
 (let (($x226 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x182 (and $x226 $x146)))
 (let ((?x36 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x140 (bvadd input.dst.llvm-%x ?x36)))
 (let (($x31 (bvugt ?x140 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x141 (bvadd ?x140 (_ bv3 32))))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x141)))
 (let (($x365 (bvugt ?x140 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x141)))
 (let (($x13 (or false (or false (and (and true (or $x283 $x365)) (or $x110 $x31))))))
 (let (($x50 (=> (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32))) $x13)))
 (let (($x161 (=> (and $x380 (bvule ?x140 (bvsub (bvadd ?x140 (_ bv4 32)) (_ bv1 32)))) $x13)))
 (let (($x101 (and $x161 $x182)))
 (let (($x354 (=> $x101 $x351)))
 (not $x354))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 224 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x408 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x409 (bvmul (_ bv4294967295 32) ?x408)))
 (let ((?x410 (bvneg ?x409)))
 (let (($x412 (= ?x410 ?x411)))
 (let (($x413 (= $x412 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x394 (bvneg ?x393)))
 (let (($x395 (= ?x394 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x396 (= $x395 true)))
 (let (($x397 (= $x396 true)))
 (let (($x388 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x389 (= $x388 true)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let (($x314 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x352 (= $x314 true)))
 (let (($x349 (= $x352 true)))
 (let (($x358 (= $x349 true)))
 (let ((?x165 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvadd input.dst.llvm-%x ?x165)))
 (let ((?x120 (bvsub ?x255 ?x165)))
 (let (($x190 (ite (bvsge ?x165 (_ bv0 32)) (bvuge ?x255 ?x120) (bvult ?x255 ?x120))))
 (let (($x34 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x34 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x33 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x366 (bvmul (_ bv4 64) ?x33)))
 (let ((?x275 ((_ extract 63 32) ?x366)))
 (let (($x205 (= ?x275 ?x230)))
 (let (($x60 (and $x205 $x190)))
 (let (($x236 (= (bvand ?x255 (_ bv4294967292 32)) ?x255)))
 (let (($x192 (and $x236 $x60)))
 (let (($x28 (= true $x192)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x140 $x28)))
 (let (($x376 (= $x35 true)))
 (let (($x350 (= $x376 true)))
 (let (($x215 (= $x350 true)))
 (let (($x387 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x280 (= $x387 true)))
 (let (($x195 (= $x280 true)))
 (let (($x156 (= $x195 true)))
 (let (($x367 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x125 (= $x367 true)))
 (let (($x251 (= $x125 true)))
 (let (($x262 (= $x251 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (= $x371 true)))
 (let (($x54 (= $x12 true)))
 (let (($x355 (= $x54 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x142 (= $x139 true)))
 (let (($x328 (= $x142 true)))
 (let (($x356 (= $x328 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x14 (= $x221 true)))
 (let (($x135 (= $x14 true)))
 (let (($x293 (= $x135 true)))
 (let (($x267 (= $x140 true)))
 (let (($x186 (= $x267 true)))
 (let (($x20 (= $x186 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x59)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x152)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x344 $x105)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x41 $x126)))
 (let (($x346 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x364 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x134 $x174)))
 (let (($x121 (not $x8)))
 (let (($x369 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x81 $x369)))
 (let (($x37 (and (not $x15) $x121)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x339 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x334 (and $x339 $x336)))
 (let (($x332 (not $x334)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x99 $x46)))
 (let (($x10 (and (not $x329) $x332)))
 (let (($x104 (and (and (and (and (and (and $x10 $x37) $x364) $x346) $x94) $x305) $x111)))
 (let (($x320 (and $x104 $x263)))
 (let (($x325 (= $x320 true)))
 (let (($x228 (= $x325 true)))
 (let (($x163 (= $x228 true)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x92))))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (=> $x384 (= ?x32 ?x312)))))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x295 (_ bv1 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (= $x384 $x357))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x225 (= false false)))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x294 (_ bv0 32))))
 (=> $x63 $x225)))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x295 (_ bv0 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x294 (_ bv0 32))))
 (= $x63 $x71))))))
 ))
 (let (($x315 (and $x326 $x306)))
 (let (($x52 (and $x315 $x317)))
 (let (($x239 (and $x52 $x227)))
 (let (($x124 (= $x239 true)))
 (let (($x26 (= $x124 true)))
 (let (($x193 (= $x26 true)))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x92))))
 (let ((?x137 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x77 (_ bv1 32))))
 (=> $x281 (= ?x137 ?x312)))))))))
 ))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x295 (_ bv1 32))))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x77 (_ bv1 32))))
 (= $x281 $x357))))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x225 (= false false)))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x77 (_ bv0 32))))
 (=> $x211 $x225)))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x295 (_ bv0 32))))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x77 (_ bv0 32))))
 (= $x211 $x71))))))
 ))
 (let (($x101 (and $x240 $x182)))
 (let (($x375 (and $x101 $x75)))
 (let (($x309 (and $x375 $x129)))
 (let (($x304 (= $x309 true)))
 (let (($x311 (= $x304 true)))
 (let (($x330 (= $x311 true)))
 (let ((?x307 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x66 (= (_ bv0 2) ?x307)))
 (let (($x207 (= $x66 true)))
 (let (($x206 (= $x207 true)))
 (let ((?x106 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x285 (bvneg ?x106)))
 (let (($x69 (= ?x285 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x69 true)))
 (let (($x80 (= $x153 true)))
 (let (($x322 (and $x80 $x206)))
 (let (($x331 (and $x322 $x330)))
 (let (($x258 (and $x331 $x193)))
 (let (($x303 (and $x258 $x163)))
 (let (($x216 (and $x303 $x20)))
 (let (($x150 (and $x216 $x293)))
 (let (($x217 (and $x150 $x356)))
 (let (($x117 (and $x217 $x355)))
 (let (($x83 (and $x117 $x262)))
 (let (($x65 (and $x83 $x156)))
 (let (($x194 (and $x65 $x215)))
 (let (($x363 (and $x194 $x358)))
 (let (($x392 (and $x363 $x391)))
 (let (($x398 (and $x392 $x397)))
 (let ((?x400 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (and (bvuge ?x400 (_ bv1 32)) $x398)))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (=> $x384 (= ?x32 ?x137)))))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x77 (_ bv1 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (= $x384 $x281))))))
 ))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x77 (_ bv0 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x294 (_ bv0 32))))
 (= $x63 $x211))))))
 ))
 (let (($x208 (and $x288 $x306)))
 (let (($x25 (and $x208 $x138)))
 (let (($x292 (and $x25 $x250)))
 (let (($x403 (and $x292 $x402)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x404 (and $x167 $x403)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x405 (and $x199 $x404)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x406 (and $x56 $x405)))
 (let (($x45 (bvugt ?x255 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x365 (bvadd ?x255 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x365)))
 (let (($x212 (bvugt ?x255 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x365)))
 (let (($x161 (or false (or false (and (and true (or $x23 $x212)) (or $x185 $x45))))))
 (let (($x226 (=> (bvule ?x255 (bvsub (bvadd ?x255 (_ bv4 32)) (_ bv1 32))) $x161)))
 (let (($x36 (=> (and $x140 (bvule ?x255 (bvsub (bvadd ?x255 (_ bv4 32)) (_ bv1 32)))) $x161)))
 (let (($x407 (and $x36 $x406)))
 (let (($x414 (=> $x407 $x413)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x411 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x408 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x409 (bvmul (_ bv4294967295 32) ?x408)))
 (let ((?x410 (bvneg ?x409)))
 (let (($x412 (= ?x410 ?x411)))
 (let (($x413 (= $x412 true)))
 (let ((?x393 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x394 (bvneg ?x393)))
 (let (($x395 (= ?x394 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x396 (= $x395 true)))
 (let (($x397 (= $x396 true)))
 (let (($x388 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x389 (= $x388 true)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let (($x314 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x352 (= $x314 true)))
 (let (($x349 (= $x352 true)))
 (let (($x358 (= $x349 true)))
 (let ((?x165 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x255 (bvadd input.dst.llvm-%x ?x165)))
 (let ((?x120 (bvsub ?x255 ?x165)))
 (let (($x190 (ite (bvsge ?x165 (_ bv0 32)) (bvuge ?x255 ?x120) (bvult ?x255 ?x120))))
 (let (($x34 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x34 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x33 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x366 (bvmul (_ bv4 64) ?x33)))
 (let ((?x275 ((_ extract 63 32) ?x366)))
 (let (($x205 (= ?x275 ?x230)))
 (let (($x60 (and $x205 $x190)))
 (let (($x236 (= (bvand ?x255 (_ bv4294967292 32)) ?x255)))
 (let (($x192 (and $x236 $x60)))
 (let (($x28 (= true $x192)))
 (let (($x140 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x35 (=> $x140 $x28)))
 (let (($x376 (= $x35 true)))
 (let (($x350 (= $x376 true)))
 (let (($x215 (= $x350 true)))
 (let (($x387 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x280 (= $x387 true)))
 (let (($x195 (= $x280 true)))
 (let (($x156 (= $x195 true)))
 (let (($x367 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x125 (= $x367 true)))
 (let (($x251 (= $x125 true)))
 (let (($x262 (= $x251 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x12 (= $x371 true)))
 (let (($x54 (= $x12 true)))
 (let (($x355 (= $x54 true)))
 (let (($x139 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x142 (= $x139 true)))
 (let (($x328 (= $x142 true)))
 (let (($x356 (= $x328 true)))
 (let (($x221 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x14 (= $x221 true)))
 (let (($x135 (= $x14 true)))
 (let (($x293 (= $x135 true)))
 (let (($x267 (= $x140 true)))
 (let (($x186 (= $x267 true)))
 (let (($x20 (= $x186 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x59)))
 (let ((?x152 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x111 (= (_ bv0 32) ?x152)))
 (let ((?x145 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x344 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x126 (and $x344 $x105)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x94 (and $x41 $x126)))
 (let (($x346 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x364 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x134 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x134 $x174)))
 (let (($x121 (not $x8)))
 (let (($x369 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (and $x81 $x369)))
 (let (($x37 (and (not $x15) $x121)))
 (let (($x336 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x339 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x334 (and $x339 $x336)))
 (let (($x332 (not $x334)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x99 $x46)))
 (let (($x10 (and (not $x329) $x332)))
 (let (($x104 (and (and (and (and (and (and $x10 $x37) $x364) $x346) $x94) $x305) $x111)))
 (let (($x320 (and $x104 $x263)))
 (let (($x325 (= $x320 true)))
 (let (($x228 (= $x325 true)))
 (let (($x163 (= $x228 true)))
 (let (($x227 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x92))))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (=> $x384 (= ?x32 ?x312)))))))))
 ))
 (let (($x317 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x295 (_ bv1 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (= $x384 $x357))))))
 ))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x225 (= false false)))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x294 (_ bv0 32))))
 (=> $x63 $x225)))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x295 (_ bv0 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x294 (_ bv0 32))))
 (= $x63 $x71))))))
 ))
 (let (($x315 (and $x326 $x306)))
 (let (($x52 (and $x315 $x317)))
 (let (($x239 (and $x52 $x227)))
 (let (($x124 (= $x239 true)))
 (let (($x26 (= $x124 true)))
 (let (($x193 (= $x26 true)))
 (let (($x129 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x48 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv1 32))) (select input.dst.llvm-mem ?x48))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x48 (_ bv2 32))) ?x92))))
 (let ((?x137 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x77 (_ bv1 32))))
 (=> $x281 (= ?x137 ?x312)))))))))
 ))
 (let (($x75 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x357 (bvuge ?x295 (_ bv1 32))))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x77 (_ bv1 32))))
 (= $x281 $x357))))))
 ))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x225 (= false false)))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x77 (_ bv0 32))))
 (=> $x211 $x225)))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x295 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x71 (= ?x295 (_ bv0 32))))
 (let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x77 (_ bv0 32))))
 (= $x211 $x71))))))
 ))
 (let (($x101 (and $x240 $x182)))
 (let (($x375 (and $x101 $x75)))
 (let (($x309 (and $x375 $x129)))
 (let (($x304 (= $x309 true)))
 (let (($x311 (= $x304 true)))
 (let (($x330 (= $x311 true)))
 (let ((?x307 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x66 (= (_ bv0 2) ?x307)))
 (let (($x207 (= $x66 true)))
 (let (($x206 (= $x207 true)))
 (let ((?x106 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x285 (bvneg ?x106)))
 (let (($x69 (= ?x285 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x153 (= $x69 true)))
 (let (($x80 (= $x153 true)))
 (let (($x322 (and $x80 $x206)))
 (let (($x331 (and $x322 $x330)))
 (let (($x258 (and $x331 $x193)))
 (let (($x303 (and $x258 $x163)))
 (let (($x216 (and $x303 $x20)))
 (let (($x150 (and $x216 $x293)))
 (let (($x217 (and $x150 $x356)))
 (let (($x117 (and $x217 $x355)))
 (let (($x83 (and $x117 $x262)))
 (let (($x65 (and $x83 $x156)))
 (let (($x194 (and $x65 $x215)))
 (let (($x363 (and $x194 $x358)))
 (let (($x392 (and $x363 $x391)))
 (let (($x398 (and $x392 $x397)))
 (let ((?x400 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (and (bvuge ?x400 (_ bv1 32)) $x398)))
 (let (($x250 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x137 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x32 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (=> $x384 (= ?x32 ?x137)))))))
 ))
 (let (($x138 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x77 (_ bv1 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x384 (bvuge ?x294 (_ bv1 32))))
 (= $x384 $x281))))))
 ))
 (let (($x288 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x211 (= ?x77 (_ bv0 32))))
 (let ((?x294 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x63 (= ?x294 (_ bv0 32))))
 (= $x63 $x211))))))
 ))
 (let (($x208 (and $x288 $x306)))
 (let (($x25 (and $x208 $x138)))
 (let (($x292 (and $x25 $x250)))
 (let (($x403 (and $x292 $x402)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x404 (and $x167 $x403)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x405 (and $x199 $x404)))
 (let (($x56 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x406 (and $x56 $x405)))
 (let (($x45 (bvugt ?x255 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x365 (bvadd ?x255 (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x365)))
 (let (($x212 (bvugt ?x255 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x365)))
 (let (($x161 (or false (or false (and (and true (or $x23 $x212)) (or $x185 $x45))))))
 (let (($x226 (=> (bvule ?x255 (bvsub (bvadd ?x255 (_ bv4 32)) (_ bv1 32))) $x161)))
 (let (($x36 (=> (and $x140 (bvule ?x255 (bvsub (bvadd ?x255 (_ bv4 32)) (_ bv1 32)))) $x161)))
 (let (($x407 (and $x36 $x406)))
 (let (($x414 (=> $x407 $x413)))
 (not $x414))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x274 (bvadd input.dst.llvm-%x ?x140)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x417))))
 (let ((?x423 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x422)))
 (let ((?x219 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x252 (bvmul (_ bv4294967295 32) ?x219)))
 (let ((?x354 (bvneg ?x252)))
 (let (($x424 (= ?x354 ?x423)))
 (let (($x425 (= $x424 true)))
 (let ((?x296 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x201 (bvneg ?x296)))
 (let (($x272 (= ?x201 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x379 (= $x272 true)))
 (let (($x113 (= $x379 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x72 (= (_ bv0 2) ?x87)))
 (let (($x157 (= $x72 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x73 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x68 (bvneg ?x73)))
 (let (($x316 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x316 true)))
 (let (($x345 (= $x324 true)))
 (let (($x122 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x273 (= $x122 true)))
 (let (($x18 (= $x273 true)))
 (let (($x282 (= $x18 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x62 true)))
 (let (($x119 (= $x144 true)))
 (let (($x95 (= $x119 true)))
 (let (($x343 (ite (bvsge ?x140 (_ bv0 32)) (bvuge ?x274 (bvsub ?x274 ?x140)) (bvult ?x274 (bvsub ?x274 ?x140)))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x256 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x385 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x385)))
 (let ((?x178 ((_ extract 63 32) ?x74)))
 (let (($x200 (= ?x178 ?x256)))
 (let (($x341 (and $x200 $x343)))
 (let (($x148 (= (bvand ?x274 (_ bv4294967292 32)) ?x274)))
 (let (($x302 (and $x148 $x341)))
 (let (($x351 (= true $x302)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x318 (=> $x109 $x351)))
 (let (($x243 (= $x318 true)))
 (let (($x238 (= $x243 true)))
 (let (($x291 (= $x238 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x6 (= $x160 true)))
 (let (($x118 (= $x6 true)))
 (let (($x210 (= $x118 true)))
 (let (($x378 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x361 (= $x378 true)))
 (let (($x266 (= $x361 true)))
 (let (($x9 (= $x266 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x359 (= $x235 true)))
 (let (($x90 (= $x359 true)))
 (let (($x166 (= $x90 true)))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x298))))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (=> $x102 (= ?x311 ?x42)))))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x413 (_ bv1 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (= $x102 $x232))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x295 (= false false)))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x322 (_ bv0 32))))
 (=> $x187 $x295)))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x413 (_ bv0 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x322 (_ bv0 32))))
 (= $x187 $x414))))))
 ))
 (let (($x368 (and $x204 $x240)))
 (let (($x300 (and $x368 $x29)))
 (let (($x249 (and $x300 $x88)))
 (let (($x164 (= $x249 true)))
 (let (($x257 (= $x164 true)))
 (let (($x220 (= $x257 true)))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x298))))
 (let ((?x304 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x66 (_ bv1 32))))
 (=> $x38 (= ?x304 ?x42)))))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x413 (_ bv1 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x66 (_ bv1 32))))
 (= $x38 $x232))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x295 (= false false)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x66 (_ bv0 32))))
 (=> $x207 $x295)))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x413 (_ bv0 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x66 (_ bv0 32))))
 (= $x207 $x414))))))
 ))
 (let (($x327 (and $x173 $x347)))
 (let (($x44 (and $x327 $x132)))
 (let (($x97 (and $x44 $x143)))
 (let (($x67 (= $x97 true)))
 (let (($x284 (= $x67 true)))
 (let (($x149 (= $x284 true)))
 (let (($x135 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x293 (= $x135 true)))
 (let (($x150 (= $x293 true)))
 (let (($x139 (= $x150 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x20 (= $x186 true)))
 (let (($x216 (= $x20 true)))
 (let (($x221 (= $x216 true)))
 (let (($x228 (= $x109 true)))
 (let (($x163 (= $x228 true)))
 (let (($x303 (= $x163 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x94)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x105)))
 (let ((?x344 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x344)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x346 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x373 (and $x276 $x346)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x364 $x373)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x369 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x369 $x15)))
 (let (($x134 (not $x155)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x332 $x10)))
 (let (($x8 (and (not $x81) $x134)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (and $x46 $x329)))
 (let (($x339 (not $x335)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x193 $x258)))
 (let (($x334 (and (not $x99) $x339)))
 (let (($x104 (and (and (and (and (and (and $x334 $x8) $x37) $x261) $x41) $x181) $x126)))
 (let (($x59 (and $x104 $x297)))
 (let (($x263 (= $x59 true)))
 (let (($x320 (= $x263 true)))
 (let (($x325 (= $x320 true)))
 (let (($x267 (and $x325 $x303)))
 (let (($x14 (and $x267 $x221)))
 (let (($x142 (and $x14 $x139)))
 (let (($x98 (and $x142 $x149)))
 (let (($x159 (and $x98 $x220)))
 (let (($x197 (and $x159 $x166)))
 (let (($x100 (and $x197 $x9)))
 (let (($x198 (and $x100 $x210)))
 (let (($x136 (and $x198 $x291)))
 (let (($x386 (and $x136 $x95)))
 (let (($x154 (and $x386 $x282)))
 (let (($x103 (and $x154 $x345)))
 (let (($x11 (and $x103 $x158)))
 (let (($x82 (and $x11 $x113)))
 (let ((?x383 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (and (bvuge ?x383 (_ bv1 32)) $x82)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (=> $x102 (= ?x311 ?x304)))))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x66 (_ bv1 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (= $x102 $x38))))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x66 (_ bv0 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x322 (_ bv0 32))))
 (= $x187 $x207))))))
 ))
 (let (($x146 (and $x5 $x240)))
 (let (($x290 (and $x146 $x218)))
 (let (($x326 (and $x290 $x323)))
 (let (($x248 (and $x326 $x128)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x254 $x248)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x233 (and $x167 $x19)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x287 (and $x213 $x233)))
 (let (($x50 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x274 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x24 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x229)))
 (let (($x85 (or false (or false (and (and true (or $x110 $x24)) (or $x13 $x50))))))
 (let (($x70 (=> (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32))) $x85)))
 (let (($x47 (=> (and $x109 (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32)))) $x85)))
 (let (($x202 (and $x47 $x287)))
 (let (($x426 (=> $x202 $x425)))
 (not $x426)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x140 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x274 (bvadd input.dst.llvm-%x ?x140)))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv1 32))) (select input.dst.llvm-mem ?x274))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x274 (_ bv2 32))) ?x417))))
 (let ((?x423 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x422)))
 (let ((?x219 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x252 (bvmul (_ bv4294967295 32) ?x219)))
 (let ((?x354 (bvneg ?x252)))
 (let (($x424 (= ?x354 ?x423)))
 (let (($x425 (= $x424 true)))
 (let ((?x296 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x201 (bvneg ?x296)))
 (let (($x272 (= ?x201 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x379 (= $x272 true)))
 (let (($x113 (= $x379 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x72 (= (_ bv0 2) ?x87)))
 (let (($x157 (= $x72 true)))
 (let (($x158 (= $x157 true)))
 (let ((?x73 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x68 (bvneg ?x73)))
 (let (($x316 (= ?x68 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x324 (= $x316 true)))
 (let (($x345 (= $x324 true)))
 (let (($x122 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x273 (= $x122 true)))
 (let (($x18 (= $x273 true)))
 (let (($x282 (= $x18 true)))
 (let (($x62 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (= $x62 true)))
 (let (($x119 (= $x144 true)))
 (let (($x95 (= $x119 true)))
 (let (($x343 (ite (bvsge ?x140 (_ bv0 32)) (bvuge ?x274 (bvsub ?x274 ?x140)) (bvult ?x274 (bvsub ?x274 ?x140)))))
 (let (($x17 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x256 (ite $x17 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x385 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x74 (bvmul (_ bv4 64) ?x385)))
 (let ((?x178 ((_ extract 63 32) ?x74)))
 (let (($x200 (= ?x178 ?x256)))
 (let (($x341 (and $x200 $x343)))
 (let (($x148 (= (bvand ?x274 (_ bv4294967292 32)) ?x274)))
 (let (($x302 (and $x148 $x341)))
 (let (($x351 (= true $x302)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x318 (=> $x109 $x351)))
 (let (($x243 (= $x318 true)))
 (let (($x238 (= $x243 true)))
 (let (($x291 (= $x238 true)))
 (let (($x160 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x6 (= $x160 true)))
 (let (($x118 (= $x6 true)))
 (let (($x210 (= $x118 true)))
 (let (($x378 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x361 (= $x378 true)))
 (let (($x266 (= $x361 true)))
 (let (($x9 (= $x266 true)))
 (let (($x235 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x359 (= $x235 true)))
 (let (($x90 (= $x359 true)))
 (let (($x166 (= $x90 true)))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x298))))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (=> $x102 (= ?x311 ?x42)))))))))
 ))
 (let (($x29 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x413 (_ bv1 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (= $x102 $x232))))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x295 (= false false)))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x322 (_ bv0 32))))
 (=> $x187 $x295)))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x413 (_ bv0 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x322 (_ bv0 32))))
 (= $x187 $x414))))))
 ))
 (let (($x368 (and $x204 $x240)))
 (let (($x300 (and $x368 $x29)))
 (let (($x249 (and $x300 $x88)))
 (let (($x164 (= $x249 true)))
 (let (($x257 (= $x164 true)))
 (let (($x220 (= $x257 true)))
 (let (($x143 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x116 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x298))))
 (let ((?x304 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x66 (_ bv1 32))))
 (=> $x38 (= ?x304 ?x42)))))))))
 ))
 (let (($x132 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x413 (_ bv1 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x66 (_ bv1 32))))
 (= $x38 $x232))))))
 ))
 (let (($x347 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x295 (= false false)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x66 (_ bv0 32))))
 (=> $x207 $x295)))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x413 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x414 (= ?x413 (_ bv0 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x66 (_ bv0 32))))
 (= $x207 $x414))))))
 ))
 (let (($x327 (and $x173 $x347)))
 (let (($x44 (and $x327 $x132)))
 (let (($x97 (and $x44 $x143)))
 (let (($x67 (= $x97 true)))
 (let (($x284 (= $x67 true)))
 (let (($x149 (= $x284 true)))
 (let (($x135 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x293 (= $x135 true)))
 (let (($x150 (= $x293 true)))
 (let (($x139 (= $x150 true)))
 (let (($x186 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x20 (= $x186 true)))
 (let (($x216 (= $x20 true)))
 (let (($x221 (= $x216 true)))
 (let (($x228 (= $x109 true)))
 (let (($x163 (= $x228 true)))
 (let (($x303 (= $x163 true)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x94)))
 (let ((?x105 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x126 (= (_ bv0 32) ?x105)))
 (let ((?x344 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x344)))
 (let ((?x51 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x346 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x51)))
 (let (($x276 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x373 (and $x276 $x346)))
 (let (($x364 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x364 $x373)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x369 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x155 (and $x369 $x15)))
 (let (($x134 (not $x155)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x332 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (and $x332 $x10)))
 (let (($x8 (and (not $x81) $x134)))
 (let (($x329 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x335 (and $x46 $x329)))
 (let (($x339 (not $x335)))
 (let (($x258 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (and $x193 $x258)))
 (let (($x334 (and (not $x99) $x339)))
 (let (($x104 (and (and (and (and (and (and $x334 $x8) $x37) $x261) $x41) $x181) $x126)))
 (let (($x59 (and $x104 $x297)))
 (let (($x263 (= $x59 true)))
 (let (($x320 (= $x263 true)))
 (let (($x325 (= $x320 true)))
 (let (($x267 (and $x325 $x303)))
 (let (($x14 (and $x267 $x221)))
 (let (($x142 (and $x14 $x139)))
 (let (($x98 (and $x142 $x149)))
 (let (($x159 (and $x98 $x220)))
 (let (($x197 (and $x159 $x166)))
 (let (($x100 (and $x197 $x9)))
 (let (($x198 (and $x100 $x210)))
 (let (($x136 (and $x198 $x291)))
 (let (($x386 (and $x136 $x95)))
 (let (($x154 (and $x386 $x282)))
 (let (($x103 (and $x154 $x345)))
 (let (($x11 (and $x103 $x158)))
 (let (($x82 (and $x11 $x113)))
 (let ((?x383 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x128 (and (bvuge ?x383 (_ bv1 32)) $x82)))
 (let (($x323 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x304 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x311 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (=> $x102 (= ?x311 ?x304)))))))
 ))
 (let (($x218 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x66 (_ bv1 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x102 (bvuge ?x322 (_ bv1 32))))
 (= $x102 $x38))))))
 ))
 (let (($x5 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x207 (= ?x66 (_ bv0 32))))
 (let ((?x322 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x187 (= ?x322 (_ bv0 32))))
 (= $x187 $x207))))))
 ))
 (let (($x146 (and $x5 $x240)))
 (let (($x290 (and $x146 $x218)))
 (let (($x326 (and $x290 $x323)))
 (let (($x248 (and $x326 $x128)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x19 (and $x254 $x248)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x233 (and $x167 $x19)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x287 (and $x213 $x233)))
 (let (($x50 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x229 (bvadd ?x274 (_ bv3 32))))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x24 (bvugt ?x274 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x110 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x229)))
 (let (($x85 (or false (or false (and (and true (or $x110 $x24)) (or $x13 $x50))))))
 (let (($x70 (=> (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32))) $x85)))
 (let (($x47 (=> (and $x109 (bvule ?x274 (bvsub (bvadd ?x274 (_ bv4 32)) (_ bv1 32)))) $x85)))
 (let (($x202 (and $x47 $x287)))
 (let (($x426 (=> $x202 $x425)))
 (not $x426)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 249 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x27 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x53 (bvule ?x27 (_ bv3 32))))
 (let (($x89 (= $x53 true)))
 (let (($x191 (= $x89 true)))
 (let ((?x292 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x172 (bvneg ?x292)))
 (let (($x183 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x183 true)))
 (let (($x265 (= $x250 true)))
 (let (($x362 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x301 (= $x362 true)))
 (let (($x214 (= $x301 true)))
 (let (($x22 (= $x214 true)))
 (let (($x57 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x253 (= $x57 true)))
 (let (($x342 (= $x253 true)))
 (let (($x123 (= $x342 true)))
 (let (($x380 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x91 (= $x380 true)))
 (let (($x319 (= $x91 true)))
 (let (($x86 (= $x319 true)))
 (let ((?x278 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x278)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x357 (= (_ bv0 32) ?x101)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x406 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x407 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x406)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x408 (and $x404 $x407)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x405 $x408)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x394 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x397 (and $x394 $x395)))
 (let (($x396 (not $x397)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x349 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x391 (and $x349 $x388)))
 (let (($x402 (and (not $x391) $x396)))
 (let (($x393 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x392 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x389 (and $x392 $x393)))
 (let (($x390 (not $x389)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x215 $x314)))
 (let (($x363 (and (not $x352) $x390)))
 (let (($x48 (and (and (and (and (and (and $x363 $x402) $x289) $x285) $x39) $x182) $x357)))
 (let (($x127 (and $x48 $x268)))
 (let (($x114 (= $x127 true)))
 (let (($x246 (= $x114 true)))
 (let (($x92 (= $x246 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x28 (= $x194 true)))
 (let (($x376 (= $x28 true)))
 (let (($x35 (= $x376 true)))
 (let ((?x274 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd input.dst.llvm-%x ?x274)))
 (let ((?x34 (bvsub ?x264 ?x274)))
 (let (($x84 (ite (bvsge ?x274 (_ bv0 32)) (bvuge ?x264 ?x34) (bvult ?x264 ?x34))))
 (let (($x277 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x277 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x60 (bvmul (_ bv4 64) ?x190)))
 (let ((?x120 ((_ extract 63 32) ?x60)))
 (let (($x205 (= ?x120 ?x230)))
 (let (($x209 (and $x205 $x84)))
 (let (($x366 (= (bvand ?x264 (_ bv4294967292 32)) ?x264)))
 (let (($x288 (and $x366 $x209)))
 (let (($x225 (= true $x288)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x306 (=> $x109 $x225)))
 (let (($x208 (= $x306 true)))
 (let (($x384 (= $x208 true)))
 (let (($x281 (= $x384 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x280 true)))
 (let (($x259 (= $x65 true)))
 (let (($x236 (= $x259 true)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x425))))
 (let ((?x267 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (=> $x111 (= ?x267 ?x211)))))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x68 (_ bv1 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (= $x111 $x379))))))
 ))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x8 (= false false)))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x369 (_ bv0 32))))
 (=> $x15 $x8)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x68 (_ bv0 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x369 (_ bv0 32))))
 (= $x15 $x316))))))
 ))
 (let (($x317 (and $x321 $x37)))
 (let (($x217 (and $x317 $x286)))
 (let (($x387 (and $x217 $x83)))
 (let (($x367 (= $x387 true)))
 (let (($x125 (= $x367 true)))
 (let (($x117 (= $x125 true)))
 (let (($x356 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x425))))
 (let ((?x303 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x10 (_ bv1 32))))
 (=> $x181 (= ?x303 ?x211)))))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x68 (_ bv1 32))))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x10 (_ bv1 32))))
 (= $x181 $x379))))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x8 (= false false)))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x10 (_ bv0 32))))
 (=> $x81 $x8)))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x68 (_ bv0 32))))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x10 (_ bv0 32))))
 (= $x81 $x316))))))
 ))
 (let (($x72 (and $x345 $x87)))
 (let (($x128 (and $x72 $x82)))
 (let (($x54 (and $x128 $x356)))
 (let (($x241 (= $x54 true)))
 (let (($x138 (= $x241 true)))
 (let (($x25 (= $x138 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x279 (= (_ bv0 2) ?x42)))
 (let (($x131 (= $x279 true)))
 (let (($x143 (= $x131 true)))
 (let ((?x262 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x55 (bvneg ?x262)))
 (let (($x231 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x231 true)))
 (let (($x130 (= $x115 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x44 (= $x132 true)))
 (let (($x12 (= $x44 true)))
 (let (($x76 (= $x12 true)))
 (let (($x381 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x347 (= $x381 true)))
 (let (($x327 (= $x347 true)))
 (let (($x232 (= $x327 true)))
 (let (($x414 (= $x109 true)))
 (let (($x415 (= $x414 true)))
 (let (($x173 (= $x415 true)))
 (let (($x78 (and $x173 $x232)))
 (let (($x116 (and $x78 $x76)))
 (let (($x298 (and $x116 $x130)))
 (let (($x97 (and $x298 $x143)))
 (let (($x32 (and $x97 $x25)))
 (let (($x251 (and $x32 $x117)))
 (let (($x169 (and $x251 $x236)))
 (let (($x176 (and $x169 $x281)))
 (let (($x350 (and $x176 $x35)))
 (let (($x188 (and $x350 $x92)))
 (let (($x353 (and $x188 $x86)))
 (let (($x93 (and $x353 $x123)))
 (let (($x223 (and $x93 $x22)))
 (let (($x399 (and $x223 $x265)))
 (let ((?x401 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (and (bvuge ?x401 (_ bv1 32)) $x399)))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x303 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x267 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (=> $x111 (= ?x267 ?x303)))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x10 (_ bv1 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (= $x111 $x181))))))
 ))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x10 (_ bv0 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x369 (_ bv0 32))))
 (= $x15 $x81))))))
 ))
 (let (($x305 (and $x134 $x37)))
 (let (($x104 (and $x305 $x126)))
 (let (($x221 (and $x104 $x216)))
 (let (($x69 (and $x221 $x310)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x153 (and $x206 $x69)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x80 (and $x254 $x153)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x75 (and $x177 $x80)))
 (let (($x36 (bvugt ?x264 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x264 (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x45 (bvugt ?x264 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x141 (or false (or false (and (and true (or $x31 $x45)) (or $x226 $x36))))))
 (let (($x199 (=> (bvule ?x264 (bvsub (bvadd ?x264 (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x365 (=> (and $x109 (bvule ?x264 (bvsub (bvadd ?x264 (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x375 (and $x365 $x75)))
 (let (($x234 (=> $x375 $x191)))
 (not $x234))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x27 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x53 (bvule ?x27 (_ bv3 32))))
 (let (($x89 (= $x53 true)))
 (let (($x191 (= $x89 true)))
 (let ((?x292 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x172 (bvneg ?x292)))
 (let (($x183 (= ?x172 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x250 (= $x183 true)))
 (let (($x265 (= $x250 true)))
 (let (($x362 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x301 (= $x362 true)))
 (let (($x214 (= $x301 true)))
 (let (($x22 (= $x214 true)))
 (let (($x57 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x253 (= $x57 true)))
 (let (($x342 (= $x253 true)))
 (let (($x123 (= $x342 true)))
 (let (($x380 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv3 32))))
 (let (($x91 (= $x380 true)))
 (let (($x319 (= $x91 true)))
 (let (($x86 (= $x319 true)))
 (let ((?x278 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x268 (= (_ bv0 32) ?x278)))
 (let ((?x101 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x357 (= (_ bv0 32) ?x101)))
 (let ((?x71 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x182 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x406 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x407 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x406)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x408 (and $x404 $x407)))
 (let (($x405 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (and $x405 $x408)))
 (let (($x285 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x395 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x394 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x397 (and $x394 $x395)))
 (let (($x396 (not $x397)))
 (let (($x388 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x349 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x391 (and $x349 $x388)))
 (let (($x402 (and (not $x391) $x396)))
 (let (($x393 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x392 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x389 (and $x392 $x393)))
 (let (($x390 (not $x389)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (and $x215 $x314)))
 (let (($x363 (and (not $x352) $x390)))
 (let (($x48 (and (and (and (and (and (and $x363 $x402) $x289) $x285) $x39) $x182) $x357)))
 (let (($x127 (and $x48 $x268)))
 (let (($x114 (= $x127 true)))
 (let (($x246 (= $x114 true)))
 (let (($x92 (= $x246 true)))
 (let (($x194 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x28 (= $x194 true)))
 (let (($x376 (= $x28 true)))
 (let (($x35 (= $x376 true)))
 (let ((?x274 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x264 (bvadd input.dst.llvm-%x ?x274)))
 (let ((?x34 (bvsub ?x264 ?x274)))
 (let (($x84 (ite (bvsge ?x274 (_ bv0 32)) (bvuge ?x264 ?x34) (bvult ?x264 ?x34))))
 (let (($x277 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x230 (ite $x277 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x190 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x60 (bvmul (_ bv4 64) ?x190)))
 (let ((?x120 ((_ extract 63 32) ?x60)))
 (let (($x205 (= ?x120 ?x230)))
 (let (($x209 (and $x205 $x84)))
 (let (($x366 (= (bvand ?x264 (_ bv4294967292 32)) ?x264)))
 (let (($x288 (and $x366 $x209)))
 (let (($x225 (= true $x288)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x306 (=> $x109 $x225)))
 (let (($x208 (= $x306 true)))
 (let (($x384 (= $x208 true)))
 (let (($x281 (= $x384 true)))
 (let (($x280 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x65 (= $x280 true)))
 (let (($x259 (= $x65 true)))
 (let (($x236 (= $x259 true)))
 (let (($x83 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x425))))
 (let ((?x267 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (=> $x111 (= ?x267 ?x211)))))))))
 ))
 (let (($x286 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x68 (_ bv1 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (= $x111 $x379))))))
 ))
 (let (($x37 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x8 (= false false)))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x369 (_ bv0 32))))
 (=> $x15 $x8)))))
 ))
 (let (($x321 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x68 (_ bv0 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x369 (_ bv0 32))))
 (= $x15 $x316))))))
 ))
 (let (($x317 (and $x321 $x37)))
 (let (($x217 (and $x317 $x286)))
 (let (($x387 (and $x217 $x83)))
 (let (($x367 (= $x387 true)))
 (let (($x125 (= $x367 true)))
 (let (($x117 (= $x125 true)))
 (let (($x356 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x420 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv1 32))) (select input.dst.llvm-mem ?x420))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x420 (_ bv2 32))) ?x425))))
 (let ((?x303 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x10 (_ bv1 32))))
 (=> $x181 (= ?x303 ?x211)))))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x68 (_ bv1 32))))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x10 (_ bv1 32))))
 (= $x181 $x379))))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x8 (= false false)))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x10 (_ bv0 32))))
 (=> $x81 $x8)))))
 ))
 (let (($x345 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x68 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x316 (= ?x68 (_ bv0 32))))
 (let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x10 (_ bv0 32))))
 (= $x81 $x316))))))
 ))
 (let (($x72 (and $x345 $x87)))
 (let (($x128 (and $x72 $x82)))
 (let (($x54 (and $x128 $x356)))
 (let (($x241 (= $x54 true)))
 (let (($x138 (= $x241 true)))
 (let (($x25 (= $x138 true)))
 (let ((?x42 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x279 (= (_ bv0 2) ?x42)))
 (let (($x131 (= $x279 true)))
 (let (($x143 (= $x131 true)))
 (let ((?x262 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x55 (bvneg ?x262)))
 (let (($x231 (= ?x55 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x115 (= $x231 true)))
 (let (($x130 (= $x115 true)))
 (let (($x132 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x44 (= $x132 true)))
 (let (($x12 (= $x44 true)))
 (let (($x76 (= $x12 true)))
 (let (($x381 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv3 32))))
 (let (($x347 (= $x381 true)))
 (let (($x327 (= $x347 true)))
 (let (($x232 (= $x327 true)))
 (let (($x414 (= $x109 true)))
 (let (($x415 (= $x414 true)))
 (let (($x173 (= $x415 true)))
 (let (($x78 (and $x173 $x232)))
 (let (($x116 (and $x78 $x76)))
 (let (($x298 (and $x116 $x130)))
 (let (($x97 (and $x298 $x143)))
 (let (($x32 (and $x97 $x25)))
 (let (($x251 (and $x32 $x117)))
 (let (($x169 (and $x251 $x236)))
 (let (($x176 (and $x169 $x281)))
 (let (($x350 (and $x176 $x35)))
 (let (($x188 (and $x350 $x92)))
 (let (($x353 (and $x188 $x86)))
 (let (($x93 (and $x353 $x123)))
 (let (($x223 (and $x93 $x22)))
 (let (($x399 (and $x223 $x265)))
 (let ((?x401 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (and (bvuge ?x401 (_ bv1 32)) $x399)))
 (let (($x216 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x303 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x267 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (=> $x111 (= ?x267 ?x303)))))))
 ))
 (let (($x126 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x181 (bvuge ?x10 (_ bv1 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x111 (bvuge ?x369 (_ bv1 32))))
 (= $x111 $x181))))))
 ))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x10 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x81 (= ?x10 (_ bv0 32))))
 (let ((?x369 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x15 (= ?x369 (_ bv0 32))))
 (= $x15 $x81))))))
 ))
 (let (($x305 (and $x134 $x37)))
 (let (($x104 (and $x305 $x126)))
 (let (($x221 (and $x104 $x216)))
 (let (($x69 (and $x221 $x310)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x153 (and $x206 $x69)))
 (let (($x254 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x80 (and $x254 $x153)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x75 (and $x177 $x80)))
 (let (($x36 (bvugt ?x264 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd ?x264 (_ bv3 32))))
 (let (($x226 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x45 (bvugt ?x264 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x185)))
 (let (($x141 (or false (or false (and (and true (or $x31 $x45)) (or $x226 $x36))))))
 (let (($x199 (=> (bvule ?x264 (bvsub (bvadd ?x264 (_ bv4 32)) (_ bv1 32))) $x141)))
 (let (($x365 (=> (and $x109 (bvule ?x264 (bvsub (bvadd ?x264 (_ bv4 32)) (_ bv1 32)))) $x141)))
 (let (($x375 (and $x365 $x75)))
 (let (($x234 (=> $x375 $x191)))
 (not $x234))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x08000002)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x08000002 x!0)
         (ite (bvule #x08000003 x!0) #x08000003 #x08000002)
         #x00000003))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffff7 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff6 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff5 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff4 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000006)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x08300444)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x7ffffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd7f43048)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd7f4304b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x08300447)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd7f43048)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x08300444)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000006 x!0)
         (ite (bvule #x00000007 x!0) #x00000007 #x00000006)
         #x00000003))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
      (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x7ffffffb (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffffa (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff9 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x7ffffff8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000003) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x413 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x18 (bvule ?x413 (_ bv4 32))))
 (let (($x103 (= $x18 true)))
 (let (($x272 (= $x103 true)))
 (let ((?x339 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x276 (bvneg ?x339)))
 (let (($x51 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x346 (= $x51 true)))
 (let (($x373 (= $x346 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x193 (= $x79 true)))
 (let (($x46 (= $x193 true)))
 (let (($x329 (= $x46 true)))
 (let (($x331 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x323 (= $x331 true)))
 (let (($x315 (= $x323 true)))
 (let (($x180 (= $x315 true)))
 (let (($x320 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x371 (= $x320 true)))
 (let (($x355 (= $x371 true)))
 (let (($x326 (= $x355 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x248)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x94)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (and $x158 $x296)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x11 $x201)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x386 $x122)))
 (let (($x137 (not $x273)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x336 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x336 $x95)))
 (let (($x270 (and (not $x119) $x137)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x238 $x136)))
 (let (($x144 (not $x62)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x318 $x243)))
 (let (($x99 (and (not $x291) $x144)))
 (let (($x202 (and (and (and (and (and (and $x99 $x270) $x269) $x157) $x41) $x52) $x297)))
 (let (($x49 (and $x202 $x19)))
 (let (($x287 (= $x49 true)))
 (let (($x219 (= $x287 true)))
 (let (($x421 (= $x219 true)))
 (let (($x337 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x96 (= $x337 true)))
 (let (($x200 (= $x96 true)))
 (let (($x333 (= $x200 true)))
 (let (($x256 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (= $x256 true)))
 (let (($x351 (= $x302 true)))
 (let (($x340 (= $x351 true)))
 (let ((?x264 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x23 (bvadd input.dst.llvm-%x ?x264)))
 (let ((?x295 (bvsub ?x23 ?x264)))
 (let (($x38 (ite (bvsge ?x264 (_ bv0 32)) (bvuge ?x23 ?x295) (bvult ?x23 ?x295))))
 (let (($x374 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x382 (ite $x374 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x160 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x160)))
 (let ((?x179 ((_ extract 63 32) ?x210)))
 (let (($x5 (= ?x179 ?x382)))
 (let (($x313 (and $x5 $x38)))
 (let (($x100 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x17 (and $x100 $x313)))
 (let (($x148 (= true $x17)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x385 (=> $x109 $x148)))
 (let (($x247 (= $x385 true)))
 (let (($x74 (= $x247 true)))
 (let (($x178 (= $x74 true)))
 (let (($x378 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x361 (= $x378 true)))
 (let (($x198 (= $x361 true)))
 (let (($x40 (= $x198 true)))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x67))))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (=> $x345 (= ?x175 ?x290)))))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x246 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (= $x345 $x22))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x171 (_ bv0 32))))
 (=> $x372 $x30)))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x246 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x171 (_ bv0 32))))
 (= $x372 $x92))))))
 ))
 (let (($x257 (and $x368 $x130)))
 (let (($x29 (and $x257 $x249)))
 (let (($x235 (and $x29 $x159)))
 (let (($x90 (= $x235 true)))
 (let (($x359 (= $x90 true)))
 (let (($x166 (= $x359 true)))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x67))))
 (let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x12 (_ bv1 32))))
 (=> $x324 (= ?x77 ?x290)))))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x246 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x12 (_ bv1 32))))
 (= $x324 $x22))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (=> $x76 $x30)))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x246 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (= $x76 $x92))))))
 ))
 (let (($x353 (and $x380 $x86)))
 (let (($x172 (and $x353 $x292)))
 (let (($x135 (and $x172 $x139)))
 (let (($x293 (= $x135 true)))
 (let (($x150 (= $x293 true)))
 (let (($x142 (= $x150 true)))
 (let ((?x259 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x236 (= (_ bv0 2) ?x259)))
 (let (($x169 (= $x236 true)))
 (let (($x61 (= $x169 true)))
 (let ((?x83 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x387 (bvneg ?x83)))
 (let (($x125 (= ?x387 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x125 true)))
 (let (($x251 (= $x117 true)))
 (let (($x321 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x317 (= $x321 true)))
 (let (($x244 (= $x317 true)))
 (let (($x286 (= $x244 true)))
 (let (($x25 (= $x109 true)))
 (let (($x32 (= $x25 true)))
 (let (($x338 (= $x32 true)))
 (let (($x217 (and $x338 $x286)))
 (let (($x280 (and $x217 $x251)))
 (let (($x33 (and $x280 $x61)))
 (let (($x189 (and $x33 $x142)))
 (let (($x197 (and $x189 $x166)))
 (let (($x6 (and $x197 $x40)))
 (let (($x7 (and $x6 $x178)))
 (let (($x343 (and $x7 $x340)))
 (let (($x341 (and $x343 $x333)))
 (let (($x260 (and $x341 $x421)))
 (let (($x330 (and $x260 $x326)))
 (let (($x383 (and $x330 $x180)))
 (let (($x335 (and $x383 $x329)))
 (let (($x152 (and $x335 $x373)))
 (let ((?x59 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x325 (and (bvuge ?x59 (_ bv1 32)) $x152)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (=> $x345 (= ?x175 ?x77)))))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x12 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (= $x345 $x324))))))
 ))
 (let (($x55 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x171 (_ bv0 32))))
 (= $x372 $x76))))))
 ))
 (let (($x298 (and $x55 $x130)))
 (let (($x72 (and $x298 $x87)))
 (let (($x424 (and $x72 $x423)))
 (let (($x228 (and $x424 $x325)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x163 (and $x174 $x228)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x411 (and $x206 $x163)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x410 (and $x196 $x411)))
 (let (($x47 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x23 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x50 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x56 (or false (or false (and (and true (or $x242 $x50)) (or $x70 $x47))))))
 (let (($x167 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) $x56)))
 (let (($x229 (=> (and $x109 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) $x56)))
 (let (($x412 (and $x229 $x410)))
 (let (($x416 (=> $x412 $x272)))
 (not $x416))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x413 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x18 (bvule ?x413 (_ bv4 32))))
 (let (($x103 (= $x18 true)))
 (let (($x272 (= $x103 true)))
 (let ((?x339 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x276 (bvneg ?x339)))
 (let (($x51 (= ?x276 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x346 (= $x51 true)))
 (let (($x373 (= $x346 true)))
 (let (($x79 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x193 (= $x79 true)))
 (let (($x46 (= $x193 true)))
 (let (($x329 (= $x46 true)))
 (let (($x331 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x323 (= $x331 true)))
 (let (($x315 (= $x323 true)))
 (let (($x180 (= $x315 true)))
 (let (($x320 (bvsle input.spec-%var-i-0.L2%7%bbentry (_ bv4 32))))
 (let (($x371 (= $x320 true)))
 (let (($x355 (= $x371 true)))
 (let (($x326 (= $x355 true)))
 (let ((?x248 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x19 (= (_ bv0 32) ?x248)))
 (let ((?x94 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x297 (= (_ bv0 32) ?x94)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let ((?x43 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x43)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x201 (and $x158 $x296)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x11 $x201)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x122 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x386 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x273 (and $x386 $x122)))
 (let (($x137 (not $x273)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x336 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x119 (and $x336 $x95)))
 (let (($x270 (and (not $x119) $x137)))
 (let (($x136 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x238 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x238 $x136)))
 (let (($x144 (not $x62)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x291 (and $x318 $x243)))
 (let (($x99 (and (not $x291) $x144)))
 (let (($x202 (and (and (and (and (and (and $x99 $x270) $x269) $x157) $x41) $x52) $x297)))
 (let (($x49 (and $x202 $x19)))
 (let (($x287 (= $x49 true)))
 (let (($x219 (= $x287 true)))
 (let (($x421 (= $x219 true)))
 (let (($x337 (bvsle input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x96 (= $x337 true)))
 (let (($x200 (= $x96 true)))
 (let (($x333 (= $x200 true)))
 (let (($x256 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x302 (= $x256 true)))
 (let (($x351 (= $x302 true)))
 (let (($x340 (= $x351 true)))
 (let ((?x264 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x23 (bvadd input.dst.llvm-%x ?x264)))
 (let ((?x295 (bvsub ?x23 ?x264)))
 (let (($x38 (ite (bvsge ?x264 (_ bv0 32)) (bvuge ?x23 ?x295) (bvult ?x23 ?x295))))
 (let (($x374 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x382 (ite $x374 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x160 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x210 (bvmul (_ bv4 64) ?x160)))
 (let ((?x179 ((_ extract 63 32) ?x210)))
 (let (($x5 (= ?x179 ?x382)))
 (let (($x313 (and $x5 $x38)))
 (let (($x100 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x17 (and $x100 $x313)))
 (let (($x148 (= true $x17)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x385 (=> $x109 $x148)))
 (let (($x247 (= $x385 true)))
 (let (($x74 (= $x247 true)))
 (let (($x178 (= $x74 true)))
 (let (($x378 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x361 (= $x378 true)))
 (let (($x198 (= $x361 true)))
 (let (($x40 (= $x198 true)))
 (let (($x159 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x67))))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (=> $x345 (= ?x175 ?x290)))))))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x246 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (= $x345 $x22))))))
 ))
 (let (($x130 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x171 (_ bv0 32))))
 (=> $x372 $x30)))))
 ))
 (let (($x368 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x246 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x171 (_ bv0 32))))
 (= $x372 $x92))))))
 ))
 (let (($x257 (and $x368 $x130)))
 (let (($x29 (and $x257 $x249)))
 (let (($x235 (and $x29 $x159)))
 (let (($x90 (= $x235 true)))
 (let (($x359 (= $x90 true)))
 (let (($x166 (= $x359 true)))
 (let (($x139 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x187 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv1 32))) (select input.dst.llvm-mem ?x187))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x187 (_ bv2 32))) ?x67))))
 (let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x12 (_ bv1 32))))
 (=> $x324 (= ?x77 ?x290)))))))))
 ))
 (let (($x292 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x246 (_ bv1 32))))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x12 (_ bv1 32))))
 (= $x324 $x22))))))
 ))
 (let (($x86 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (=> $x76 $x30)))))
 ))
 (let (($x380 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x246 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x92 (= ?x246 (_ bv0 32))))
 (let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (= $x76 $x92))))))
 ))
 (let (($x353 (and $x380 $x86)))
 (let (($x172 (and $x353 $x292)))
 (let (($x135 (and $x172 $x139)))
 (let (($x293 (= $x135 true)))
 (let (($x150 (= $x293 true)))
 (let (($x142 (= $x150 true)))
 (let ((?x259 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x236 (= (_ bv0 2) ?x259)))
 (let (($x169 (= $x236 true)))
 (let (($x61 (= $x169 true)))
 (let ((?x83 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x387 (bvneg ?x83)))
 (let (($x125 (= ?x387 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x117 (= $x125 true)))
 (let (($x251 (= $x117 true)))
 (let (($x321 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4 32))))
 (let (($x317 (= $x321 true)))
 (let (($x244 (= $x317 true)))
 (let (($x286 (= $x244 true)))
 (let (($x25 (= $x109 true)))
 (let (($x32 (= $x25 true)))
 (let (($x338 (= $x32 true)))
 (let (($x217 (and $x338 $x286)))
 (let (($x280 (and $x217 $x251)))
 (let (($x33 (and $x280 $x61)))
 (let (($x189 (and $x33 $x142)))
 (let (($x197 (and $x189 $x166)))
 (let (($x6 (and $x197 $x40)))
 (let (($x7 (and $x6 $x178)))
 (let (($x343 (and $x7 $x340)))
 (let (($x341 (and $x343 $x333)))
 (let (($x260 (and $x341 $x421)))
 (let (($x330 (and $x260 $x326)))
 (let (($x383 (and $x330 $x180)))
 (let (($x335 (and $x383 $x329)))
 (let (($x152 (and $x335 $x373)))
 (let ((?x59 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x325 (and (bvuge ?x59 (_ bv1 32)) $x152)))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (=> $x345 (= ?x175 ?x77)))))))
 ))
 (let (($x87 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x12 (_ bv1 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x345 (bvuge ?x171 (_ bv1 32))))
 (= $x345 $x324))))))
 ))
 (let (($x55 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x76 (= ?x12 (_ bv0 32))))
 (let ((?x171 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x372 (= ?x171 (_ bv0 32))))
 (= $x372 $x76))))))
 ))
 (let (($x298 (and $x55 $x130)))
 (let (($x72 (and $x298 $x87)))
 (let (($x424 (and $x72 $x423)))
 (let (($x228 (and $x424 $x325)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x163 (and $x174 $x228)))
 (let (($x206 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x411 (and $x206 $x163)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x410 (and $x196 $x411)))
 (let (($x47 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd ?x23 (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x50 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x56 (or false (or false (and (and true (or $x242 $x50)) (or $x70 $x47))))))
 (let (($x167 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) $x56)))
 (let (($x229 (=> (and $x109 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) $x56)))
 (let (($x412 (and $x229 $x410)))
 (let (($x416 (=> $x412 $x272)))
 (not $x416))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3a4f2e30)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x38ae7904)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3a0f3c24)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3a0f3c27)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3a4f2e33)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3a0f3c24)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3a4f2e30)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #x38ae7907 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x38ae7906 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x38ae7905 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #x38ae7904 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #x38ae7907 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x38ae7906 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x38ae7905 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #x38ae7904 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000004) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #xac008328)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x00000005)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000004) #x00000000
      (concat (k!0 (bvadd #xac00832b (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xac00832a (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xac008329 (bvmul #x00000004 x!0)))
              (k!0 (bvadd #xac008328 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-x-1.0.1!2 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun k!1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000005 x!0)
         (ite (bvule #x00000006 x!0) #x00000006 #x00000005)
         #x00000004))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!2 (k!1 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!3 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000004))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!3 (k!1 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
      (let ((a!1 (concat (k!0 (bvadd #xac00832b (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xac00832a (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xac008329 (bvmul #x00000004 x!0)))
                         (k!0 (bvadd #xac008328 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x82 (bvule ?x316 (_ bv4294967294 32))))
 (let (($x128 (= $x82 true)))
 (let (($x417 (= $x128 true)))
 (let ((?x216 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x14 (bvneg ?x216)))
 (let (($x400 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x401 (= $x400 true)))
 (let (($x112 (= $x401 true)))
 (let (($x300 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x108 (= $x300 true)))
 (let (($x221 (= $x108 true)))
 (let (($x186 (= $x221 true)))
 (let (($x399 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x399 true)))
 (let (($x375 (= $x153 true)))
 (let (($x89 (= $x375 true)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x301)))
 (let ((?x362 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x362)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x342 (and $x279 $x57)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x42 $x342)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x173 $x381)))
 (let (($x182 (not $x16)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x415 (and $x147 $x71)))
 (let (($x357 (and (not $x415) $x182)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x285 $x404)))
 (let (($x408 (not $x406)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x403 $x402)))
 (let (($x39 (and (not $x289) $x408)))
 (let (($x27 (and (and (and (and (and (and $x39 $x357) $x149) $x271) $x253) $x93) $x73)))
 (let (($x53 (and $x27 $x220)))
 (let (($x80 (= $x53 true)))
 (let (($x75 (= $x80 true)))
 (let (($x310 (= $x75 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x405 (= $x64 true)))
 (let (($x203 (= $x405 true)))
 (let (($x106 (= $x203 true)))
 (let ((?x23 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvadd input.dst.llvm-%x ?x23)))
 (let ((?x37 (bvsub ?x110 ?x23)))
 (let (($x105 (ite (bvsge ?x23 (_ bv0 32)) (bvuge ?x110 ?x37) (bvult ?x110 ?x37))))
 (let (($x155 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x134 (ite $x155 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x393 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x363 (bvmul (_ bv4 64) ?x393)))
 (let ((?x121 ((_ extract 63 32) ?x363)))
 (let (($x8 (= ?x121 ?x134)))
 (let (($x395 (and $x8 $x105)))
 (let (($x350 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x349 (and $x350 $x395)))
 (let (($x391 (= true $x349)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x388 (=> $x109 $x391)))
 (let (($x398 (= $x388 true)))
 (let (($x394 (= $x398 true)))
 (let (($x397 (= $x394 true)))
 (let (($x35 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x389 (= $x35 true)))
 (let (($x390 (= $x389 true)))
 (let (($x358 (= $x390 true)))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem ?x332))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv2 32))) ?x369))))
 (let ((?x307 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (=> $x223 (= ?x307 ?x267)))))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x421 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (= $x223 $x335))))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x125 (_ bv0 32))))
 (=> $x117 $x65)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x421 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x125 (_ bv0 32))))
 (= $x117 $x260))))))
 ))
 (let (($x306 (and $x225 $x169)))
 (let (($x34 (and $x306 $x151)))
 (let (($x176 (and $x34 $x384)))
 (let (($x281 (= $x176 true)))
 (let (($x194 (= $x281 true)))
 (let (($x28 (= $x194 true)))
 (let (($x425 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem ?x332))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv2 32))) ?x369))))
 (let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x83 (_ bv1 32))))
 (=> $x22 (= ?x207 ?x267)))))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x421 (_ bv1 32))))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x83 (_ bv1 32))))
 (= $x22 $x335))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x83 (_ bv0 32))))
 (=> $x387 $x65)))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x421 (_ bv0 32))))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x83 (_ bv0 32))))
 (= $x387 $x260))))))
 ))
 (let (($x331 (and $x371 $x330)))
 (let (($x51 (and $x331 $x276)))
 (let (($x63 (and $x51 $x425)))
 (let (($x211 (= $x63 true)))
 (let (($x294 (= $x211 true)))
 (let (($x212 (= $x294 true)))
 (let ((?x266 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x160 (= (_ bv0 2) ?x266)))
 (let (($x210 (= $x160 true)))
 (let (($x179 (= $x210 true)))
 (let ((?x378 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x361 (bvneg ?x378)))
 (let (($x40 (= ?x361 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x40 true)))
 (let (($x118 (= $x6 true)))
 (let (($x164 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x164 true)))
 (let (($x235 (= $x159 true)))
 (let (($x90 (= $x235 true)))
 (let (($x88 (= $x109 true)))
 (let (($x249 (= $x88 true)))
 (let (($x29 (= $x249 true)))
 (let (($x359 (and $x29 $x90)))
 (let (($x9 (and $x359 $x118)))
 (let (($x374 (and $x9 $x179)))
 (let (($x190 (and $x374 $x212)))
 (let (($x376 (and $x190 $x28)))
 (let (($x392 (and $x376 $x358)))
 (let (($x396 (and $x392 $x397)))
 (let (($x224 (and $x396 $x106)))
 (let (($x69 (and $x224 $x310)))
 (let (($x370 (and $x69 $x89)))
 (let (($x20 (and $x370 $x186)))
 (let (($x414 (and $x20 $x112)))
 (let ((?x327 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (and (bvuge ?x327 (_ bv1 32)) $x414)))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x307 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (=> $x223 (= ?x307 ?x207)))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x83 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (= $x223 $x22))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x83 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x125 (_ bv0 32))))
 (= $x117 $x387))))))
 ))
 (let (($x61 (and $x280 $x169)))
 (let (($x120 (and $x61 $x172)))
 (let (($x311 (and $x120 $x290)))
 (let (($x143 (and $x311 $x78)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x97 (and $x116 $x143)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x154 (and $x174 $x97)))
 (let (($x308 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x282 (and $x308 $x154)))
 (let (($x365 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd ?x110 (_ bv3 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x36 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x226)))
 (let (($x213 (or false (or false (and (and true (or $x161 $x36)) (or $x199 $x365))))))
 (let (($x254 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) $x213)))
 (let (($x185 (=> (and $x109 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) $x213)))
 (let (($x68 (and $x185 $x282)))
 (let (($x420 (=> $x68 $x417)))
 (not $x420))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x316 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x82 (bvule ?x316 (_ bv4294967294 32))))
 (let (($x128 (= $x82 true)))
 (let (($x417 (= $x128 true)))
 (let ((?x216 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x14 (bvneg ?x216)))
 (let (($x400 (= ?x14 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x401 (= $x400 true)))
 (let (($x112 (= $x401 true)))
 (let (($x300 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x108 (= $x300 true)))
 (let (($x221 (= $x108 true)))
 (let (($x186 (= $x221 true)))
 (let (($x399 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x153 (= $x399 true)))
 (let (($x375 (= $x153 true)))
 (let (($x89 (= $x375 true)))
 (let ((?x301 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x301)))
 (let ((?x362 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x73 (= (_ bv0 32) ?x362)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x93 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x57 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x131)))
 (let (($x279 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x342 (and $x279 $x57)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x42 $x342)))
 (let (($x271 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (and $x173 $x381)))
 (let (($x182 (not $x16)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x147 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x415 (and $x147 $x71)))
 (let (($x357 (and (not $x415) $x182)))
 (let (($x404 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x406 (and $x285 $x404)))
 (let (($x408 (not $x406)))
 (let (($x402 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x403 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x289 (and $x403 $x402)))
 (let (($x39 (and (not $x289) $x408)))
 (let (($x27 (and (and (and (and (and (and $x39 $x357) $x149) $x271) $x253) $x93) $x73)))
 (let (($x53 (and $x27 $x220)))
 (let (($x80 (= $x53 true)))
 (let (($x75 (= $x80 true)))
 (let (($x310 (= $x75 true)))
 (let (($x64 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x405 (= $x64 true)))
 (let (($x203 (= $x405 true)))
 (let (($x106 (= $x203 true)))
 (let ((?x23 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x110 (bvadd input.dst.llvm-%x ?x23)))
 (let ((?x37 (bvsub ?x110 ?x23)))
 (let (($x105 (ite (bvsge ?x23 (_ bv0 32)) (bvuge ?x110 ?x37) (bvult ?x110 ?x37))))
 (let (($x155 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x134 (ite $x155 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x393 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x363 (bvmul (_ bv4 64) ?x393)))
 (let ((?x121 ((_ extract 63 32) ?x363)))
 (let (($x8 (= ?x121 ?x134)))
 (let (($x395 (and $x8 $x105)))
 (let (($x350 (= (bvand ?x110 (_ bv4294967292 32)) ?x110)))
 (let (($x349 (and $x350 $x395)))
 (let (($x391 (= true $x349)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x388 (=> $x109 $x391)))
 (let (($x398 (= $x388 true)))
 (let (($x394 (= $x398 true)))
 (let (($x397 (= $x394 true)))
 (let (($x35 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x389 (= $x35 true)))
 (let (($x390 (= $x389 true)))
 (let (($x358 (= $x390 true)))
 (let (($x384 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem ?x332))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv2 32))) ?x369))))
 (let ((?x307 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (=> $x223 (= ?x307 ?x267)))))))))
 ))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x421 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (= $x223 $x335))))))
 ))
 (let (($x169 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x125 (_ bv0 32))))
 (=> $x117 $x65)))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x421 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x125 (_ bv0 32))))
 (= $x117 $x260))))))
 ))
 (let (($x306 (and $x225 $x169)))
 (let (($x34 (and $x306 $x151)))
 (let (($x176 (and $x34 $x384)))
 (let (($x281 (= $x176 true)))
 (let (($x194 (= $x281 true)))
 (let (($x28 (= $x194 true)))
 (let (($x425 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x332 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv1 32))) (select input.dst.llvm-mem ?x332))))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x332 (_ bv2 32))) ?x369))))
 (let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x83 (_ bv1 32))))
 (=> $x22 (= ?x207 ?x267)))))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x421 (_ bv1 32))))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x83 (_ bv1 32))))
 (= $x22 $x335))))))
 ))
 (let (($x330 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x65 (= false false)))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x83 (_ bv0 32))))
 (=> $x387 $x65)))))
 ))
 (let (($x371 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x421 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x260 (= ?x421 (_ bv0 32))))
 (let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x83 (_ bv0 32))))
 (= $x387 $x260))))))
 ))
 (let (($x331 (and $x371 $x330)))
 (let (($x51 (and $x331 $x276)))
 (let (($x63 (and $x51 $x425)))
 (let (($x211 (= $x63 true)))
 (let (($x294 (= $x211 true)))
 (let (($x212 (= $x294 true)))
 (let ((?x266 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x160 (= (_ bv0 2) ?x266)))
 (let (($x210 (= $x160 true)))
 (let (($x179 (= $x210 true)))
 (let ((?x378 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x361 (bvneg ?x378)))
 (let (($x40 (= ?x361 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x6 (= $x40 true)))
 (let (($x118 (= $x6 true)))
 (let (($x164 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x159 (= $x164 true)))
 (let (($x235 (= $x159 true)))
 (let (($x90 (= $x235 true)))
 (let (($x88 (= $x109 true)))
 (let (($x249 (= $x88 true)))
 (let (($x29 (= $x249 true)))
 (let (($x359 (and $x29 $x90)))
 (let (($x9 (and $x359 $x118)))
 (let (($x374 (and $x9 $x179)))
 (let (($x190 (and $x374 $x212)))
 (let (($x376 (and $x190 $x28)))
 (let (($x392 (and $x376 $x358)))
 (let (($x396 (and $x392 $x397)))
 (let (($x224 (and $x396 $x106)))
 (let (($x69 (and $x224 $x310)))
 (let (($x370 (and $x69 $x89)))
 (let (($x20 (and $x370 $x186)))
 (let (($x414 (and $x20 $x112)))
 (let ((?x327 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x78 (and (bvuge ?x327 (_ bv1 32)) $x414)))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x207 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x307 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (=> $x223 (= ?x307 ?x207)))))))
 ))
 (let (($x172 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x22 (bvuge ?x83 (_ bv1 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x223 (bvuge ?x125 (_ bv1 32))))
 (= $x223 $x22))))))
 ))
 (let (($x280 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x83 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x387 (= ?x83 (_ bv0 32))))
 (let ((?x125 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x117 (= ?x125 (_ bv0 32))))
 (= $x117 $x387))))))
 ))
 (let (($x61 (and $x280 $x169)))
 (let (($x120 (and $x61 $x172)))
 (let (($x311 (and $x120 $x290)))
 (let (($x143 (and $x311 $x78)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x97 (and $x116 $x143)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x154 (and $x174 $x97)))
 (let (($x308 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x282 (and $x308 $x154)))
 (let (($x365 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x226 (bvadd ?x110 (_ bv3 32))))
 (let (($x199 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x36 (bvugt ?x110 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x226)))
 (let (($x213 (or false (or false (and (and true (or $x161 $x36)) (or $x199 $x365))))))
 (let (($x254 (=> (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32))) $x213)))
 (let (($x185 (=> (and $x109 (bvule ?x110 (bvsub (bvadd ?x110 (_ bv4 32)) (_ bv1 32)))) $x213)))
 (let (($x68 (and $x185 $x282)))
 (let (($x420 (=> $x68 $x417)))
 (not $x420))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x19 (bvsge ?x257 (_ bv0 32))))
 (let (($x355 (= $x19 true)))
 (let (($x329 (= $x355 true)))
 (let ((?x217 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x246 (bvneg ?x217)))
 (let (($x92 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x92 true)))
 (let (($x380 (= $x188 true)))
 (let (($x263 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x25 (= $x263 true)))
 (let (($x317 (= $x25 true)))
 (let (($x244 (= $x317 true)))
 (let (($x427 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x423 (= $x427 true)))
 (let (($x422 (= $x423 true)))
 (let (($x344 (= $x422 true)))
 (let ((?x410 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x412 (= (_ bv0 32) ?x410)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x18)))
 (let ((?x373 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x373)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x312 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x46 $x312)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x346 (and $x319 $x187)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x268 (and $x33 $x127)))
 (let (($x114 (not $x268)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x248 $x60)))
 (let (($x180 (and (not $x259) $x114)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x338 $x321)))
 (let (($x354 (not $x94)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x299 $x52)))
 (let (($x202 (and (not $x32) $x354)))
 (let (($x272 (and (and (and (and (and (and $x202 $x180) $x383) $x193) $x346) $x152) $x103)))
 (let (($x192 (and $x272 $x412)))
 (let (($x205 (= $x192 true)))
 (let (($x222 (= $x205 true)))
 (let (($x424 (= $x222 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x296 (= $x43 true)))
 (let (($x41 (= $x296 true)))
 (let (($x201 (= $x41 true)))
 (let ((?x110 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x31 (bvadd input.dst.llvm-%x ?x110)))
 (let ((?x386 (bvsub ?x31 ?x110)))
 (let (($x11 (ite (bvsge ?x110 (_ bv0 32)) (bvuge ?x31 ?x386) (bvult ?x31 ?x386))))
 (let (($x95 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x145 (ite $x95 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x324 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x348 (bvmul (_ bv4 64) ?x324)))
 (let ((?x273 ((_ extract 63 32) ?x348)))
 (let (($x119 (= ?x273 ?x145)))
 (let (($x158 (and $x119 $x11)))
 (let (($x298 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x364 (and $x298 $x158)))
 (let (($x157 (= true $x364)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x261 (=> $x109 $x157)))
 (let (($x269 (= $x261 true)))
 (let (($x233 (= $x269 true)))
 (let (($x418 (= $x233 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (= $x62 true)))
 (let (($x115 (= $x336 true)))
 (let (($x262 (= $x115 true)))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x139))))
 (let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (=> $x335 (= ?x366 ?x295)))))))))
 ))
 (let (($x96 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x375 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (= $x335 $x97))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x9 (= false false)))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x198 (_ bv0 32))))
 (=> $x40 $x9)))))
 ))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x375 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x198 (_ bv0 32))))
 (= $x40 $x89))))))
 ))
 (let (($x340 (and $x351 $x160)))
 (let (($x200 (and $x340 $x96)))
 (let (($x136 (and $x200 $x238)))
 (let (($x243 (= $x136 true)))
 (let (($x291 (= $x243 true)))
 (let (($x318 (= $x291 true)))
 (let (($x302 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x139))))
 (let ((?x81 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x197 (_ bv1 32))))
 (=> $x331 (= ?x81 ?x295)))))))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x375 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x197 (_ bv1 32))))
 (= $x331 $x97))))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x9 (= false false)))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x197 (_ bv0 32))))
 (=> $x378 $x9)))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x375 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x197 (_ bv0 32))))
 (= $x378 $x89))))))
 ))
 (let (($x20 (and $x300 $x186)))
 (let (($x68 (and $x20 $x282)))
 (let (($x74 (and $x68 $x302)))
 (let (($x178 (= $x74 true)))
 (let (($x17 (= $x178 true)))
 (let (($x148 (= $x17 true)))
 (let ((?x350 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x352 (= (_ bv0 2) ?x350)))
 (let (($x393 (= $x352 true)))
 (let (($x363 (= $x393 true)))
 (let ((?x376 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x35 (bvneg ?x376)))
 (let (($x390 (= ?x35 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x358 (= $x390 true)))
 (let (($x392 (= $x358 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x288 true)))
 (let (($x384 (= $x208 true)))
 (let (($x176 (= $x384 true)))
 (let (($x306 (= $x109 true)))
 (let (($x209 (= $x306 true)))
 (let (($x151 (= $x209 true)))
 (let (($x281 (and $x151 $x176)))
 (let (($x215 (and $x281 $x392)))
 (let (($x121 (and $x215 $x363)))
 (let (($x313 (and $x121 $x148)))
 (let (($x258 (and $x313 $x318)))
 (let (($x55 (and $x258 $x262)))
 (let (($x419 (and $x55 $x418)))
 (let (($x252 (and $x419 $x201)))
 (let (($x426 (and $x252 $x424)))
 (let (($x59 (and $x426 $x344)))
 (let (($x286 (and $x59 $x244)))
 (let (($x86 (and $x286 $x380)))
 (let ((?x255 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (and (bvuge ?x255 (_ bv1 32)) $x86)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (=> $x335 (= ?x366 ?x81)))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x197 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (= $x335 $x331))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x197 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x198 (_ bv0 32))))
 (= $x40 $x378))))))
 ))
 (let (($x210 (and $x118 $x160)))
 (let (($x51 (and $x210 $x276)))
 (let (($x267 (and $x51 $x237)))
 (let (($x284 (and $x267 $x322)))
 (let (($x367 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x367 $x284)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x189 (and $x116 $x66)))
 (let (($x334 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x98 (and $x334 $x189)))
 (let (($x229 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd ?x31 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x47 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x177 (or false (or false (and (and true (or $x85 $x47)) (or $x167 $x229))))))
 (let (($x206 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) $x177)))
 (let (($x13 (=> (and $x109 (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32)))) $x177)))
 (let (($x368 (and $x13 $x98)))
 (let (($x416 (=> $x368 $x329)))
 (not $x416))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x257 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let (($x19 (bvsge ?x257 (_ bv0 32))))
 (let (($x355 (= $x19 true)))
 (let (($x329 (= $x355 true)))
 (let ((?x217 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x246 (bvneg ?x217)))
 (let (($x92 (= ?x246 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x188 (= $x92 true)))
 (let (($x380 (= $x188 true)))
 (let (($x263 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x25 (= $x263 true)))
 (let (($x317 (= $x25 true)))
 (let (($x244 (= $x317 true)))
 (let (($x427 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x423 (= $x427 true)))
 (let (($x422 (= $x423 true)))
 (let (($x344 (= $x422 true)))
 (let ((?x410 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x412 (= (_ bv0 32) ?x410)))
 (let ((?x18 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x103 (= (_ bv0 32) ?x18)))
 (let ((?x373 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x152 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x373)))
 (let ((?x84 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x312 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x46 $x312)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x346 (and $x319 $x187)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x268 (and $x33 $x127)))
 (let (($x114 (not $x268)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (and $x248 $x60)))
 (let (($x180 (and (not $x259) $x114)))
 (let (($x321 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x338 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x338 $x321)))
 (let (($x354 (not $x94)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x299 $x52)))
 (let (($x202 (and (not $x32) $x354)))
 (let (($x272 (and (and (and (and (and (and $x202 $x180) $x383) $x193) $x346) $x152) $x103)))
 (let (($x192 (and $x272 $x412)))
 (let (($x205 (= $x192 true)))
 (let (($x222 (= $x205 true)))
 (let (($x424 (= $x222 true)))
 (let (($x43 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x296 (= $x43 true)))
 (let (($x41 (= $x296 true)))
 (let (($x201 (= $x41 true)))
 (let ((?x110 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x31 (bvadd input.dst.llvm-%x ?x110)))
 (let ((?x386 (bvsub ?x31 ?x110)))
 (let (($x11 (ite (bvsge ?x110 (_ bv0 32)) (bvuge ?x31 ?x386) (bvult ?x31 ?x386))))
 (let (($x95 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x145 (ite $x95 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x324 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x348 (bvmul (_ bv4 64) ?x324)))
 (let ((?x273 ((_ extract 63 32) ?x348)))
 (let (($x119 (= ?x273 ?x145)))
 (let (($x158 (and $x119 $x11)))
 (let (($x298 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x364 (and $x298 $x158)))
 (let (($x157 (= true $x364)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x261 (=> $x109 $x157)))
 (let (($x269 (= $x261 true)))
 (let (($x233 (= $x269 true)))
 (let (($x418 (= $x233 true)))
 (let (($x62 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x336 (= $x62 true)))
 (let (($x115 (= $x336 true)))
 (let (($x262 (= $x115 true)))
 (let (($x238 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x139))))
 (let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (=> $x335 (= ?x366 ?x295)))))))))
 ))
 (let (($x96 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x375 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (= $x335 $x97))))))
 ))
 (let (($x160 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x9 (= false false)))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x198 (_ bv0 32))))
 (=> $x40 $x9)))))
 ))
 (let (($x351 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x375 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x198 (_ bv0 32))))
 (= $x40 $x89))))))
 ))
 (let (($x340 (and $x351 $x160)))
 (let (($x200 (and $x340 $x96)))
 (let (($x136 (and $x200 $x238)))
 (let (($x243 (= $x136 true)))
 (let (($x291 (= $x243 true)))
 (let (($x318 (= $x291 true)))
 (let (($x302 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x72 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv1 32))) (select input.dst.llvm-mem ?x72))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x72 (_ bv2 32))) ?x139))))
 (let ((?x81 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x197 (_ bv1 32))))
 (=> $x331 (= ?x81 ?x295)))))))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x375 (_ bv1 32))))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x197 (_ bv1 32))))
 (= $x331 $x97))))))
 ))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x9 (= false false)))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x197 (_ bv0 32))))
 (=> $x378 $x9)))))
 ))
 (let (($x300 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x375 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x89 (= ?x375 (_ bv0 32))))
 (let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x197 (_ bv0 32))))
 (= $x378 $x89))))))
 ))
 (let (($x20 (and $x300 $x186)))
 (let (($x68 (and $x20 $x282)))
 (let (($x74 (and $x68 $x302)))
 (let (($x178 (= $x74 true)))
 (let (($x17 (= $x178 true)))
 (let (($x148 (= $x17 true)))
 (let ((?x350 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x352 (= (_ bv0 2) ?x350)))
 (let (($x393 (= $x352 true)))
 (let (($x363 (= $x393 true)))
 (let ((?x376 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x35 (bvneg ?x376)))
 (let (($x390 (= ?x35 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x358 (= $x390 true)))
 (let (($x392 (= $x358 true)))
 (let (($x288 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x288 true)))
 (let (($x384 (= $x208 true)))
 (let (($x176 (= $x384 true)))
 (let (($x306 (= $x109 true)))
 (let (($x209 (= $x306 true)))
 (let (($x151 (= $x209 true)))
 (let (($x281 (and $x151 $x176)))
 (let (($x215 (and $x281 $x392)))
 (let (($x121 (and $x215 $x363)))
 (let (($x313 (and $x121 $x148)))
 (let (($x258 (and $x313 $x318)))
 (let (($x55 (and $x258 $x262)))
 (let (($x419 (and $x55 $x418)))
 (let (($x252 (and $x419 $x201)))
 (let (($x426 (and $x252 $x424)))
 (let (($x59 (and $x426 $x344)))
 (let (($x286 (and $x59 $x244)))
 (let (($x86 (and $x286 $x380)))
 (let ((?x255 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x322 (and (bvuge ?x255 (_ bv1 32)) $x86)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x81 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x366 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (=> $x335 (= ?x366 ?x81)))))))
 ))
 (let (($x276 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x197 (_ bv1 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x198 (_ bv1 32))))
 (= $x335 $x331))))))
 ))
 (let (($x118 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x197 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x378 (= ?x197 (_ bv0 32))))
 (let ((?x198 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x40 (= ?x198 (_ bv0 32))))
 (= $x40 $x378))))))
 ))
 (let (($x210 (and $x118 $x160)))
 (let (($x51 (and $x210 $x276)))
 (let (($x267 (and $x51 $x237)))
 (let (($x284 (and $x267 $x322)))
 (let (($x367 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x66 (and $x367 $x284)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x189 (and $x116 $x66)))
 (let (($x334 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x98 (and $x334 $x189)))
 (let (($x229 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd ?x31 (_ bv3 32))))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x47 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x177 (or false (or false (and (and true (or $x85 $x47)) (or $x167 $x229))))))
 (let (($x206 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) $x177)))
 (let (($x13 (=> (and $x109 (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32)))) $x177)))
 (let (($x368 (and $x13 $x98)))
 (let (($x416 (=> $x368 $x329)))
 (not $x416))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x310 (bvule ?x225 (_ bv4294967294 32))))
 (let (($x108 (= $x310 true)))
 (let (($x143 (= $x108 true)))
 (let ((?x90 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x219 (bvneg ?x90)))
 (let (($x421 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x260 (= $x421 true)))
 (let (($x320 (= $x260 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (= $x232 true)))
 (let (($x164 (= $x88 true)))
 (let (($x159 (= $x164 true)))
 (let ((?x31 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x242 (bvadd input.dst.llvm-%x ?x31)))
 (let ((?x372 (bvsub ?x242 ?x31)))
 (let (($x333 (ite (bvsge ?x31 (_ bv0 32)) (bvuge ?x242 ?x372) (bvult ?x242 ?x372))))
 (let (($x420 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x170 (ite $x420 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x171)))
 (let ((?x12 ((_ extract 63 32) ?x44)))
 (let (($x417 (= ?x12 ?x170)))
 (let (($x341 (and $x417 $x333)))
 (let (($x128 (= (bvand ?x242 (_ bv4294967292 32)) ?x242)))
 (let (($x311 (and $x128 $x341)))
 (let (($x67 (= true $x311)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (=> $x109 $x67)))
 (let (($x290 (= $x204 true)))
 (let (($x304 (= $x290 true)))
 (let (($x347 (= $x304 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x371 true)))
 (let (($x337 (= $x78 true)))
 (let (($x146 (= $x337 true)))
 (let (($x400 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x14 (= $x400 true)))
 (let (($x401 (= $x14 true)))
 (let (($x112 (= $x401 true)))
 (let (($x374 (= $x109 true)))
 (let (($x287 (= $x374 true)))
 (let (($x49 (= $x287 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x73)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x362 (= (_ bv0 32) ?x93)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x231)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x183 $x42)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x271 $x57)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x357 (and $x182 $x16)))
 (let (($x379 (not $x357)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x381 (and $x292 $x48)))
 (let (($x113 (and (not $x381) $x379)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x280 $x65)))
 (let (($x61 (not $x169)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x173 $x236)))
 (let (($x22 (and (not $x251) $x61)))
 (let (($x53 (and (and (and (and (and (and $x22 $x113) $x253) $x131) $x250) $x265) $x362)))
 (let (($x80 (and $x53 $x27)))
 (let (($x75 (= $x80 true)))
 (let (($x385 (= $x75 true)))
 (let (($x100 (= $x385 true)))
 (let (($x404 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x406 (= $x404 true)))
 (let (($x285 (= $x406 true)))
 (let (($x408 (= $x285 true)))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x120))))
 (let ((?x150 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (=> $x97 (= ?x150 ?x63)))))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvuge ?x424 (_ bv1 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (= $x97 $x380))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x389 (_ bv0 32))))
 (=> $x390 $x215)))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (= ?x424 (_ bv0 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x389 (_ bv0 32))))
 (= $x390 $x426))))))
 ))
 (let (($x105 (and $x349 $x352)))
 (let (($x203 (and $x105 $x405)))
 (let (($x407 (and $x203 $x289)))
 (let (($x415 (= $x407 true)))
 (let (($x101 (= $x415 true)))
 (let (($x39 (= $x101 true)))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x120))))
 (let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x28 (_ bv1 32))))
 (=> $x20 (= ?x77 ?x63)))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvuge ?x424 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x28 (_ bv1 32))))
 (= $x20 $x380))))))
 ))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x28 (_ bv0 32))))
 (=> $x376 $x215)))))
 ))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (= ?x424 (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x28 (_ bv0 32))))
 (= $x376 $x426))))))
 ))
 (let (($x263 (and $x423 $x59)))
 (let (($x284 (and $x263 $x322)))
 (let (($x305 (and $x284 $x8)))
 (let (($x181 (= $x305 true)))
 (let (($x396 (= $x181 true)))
 (let (($x64 (= $x396 true)))
 (let ((?x262 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x55 (= (_ bv0 2) ?x262)))
 (let (($x30 (= $x55 true)))
 (let (($x130 (= $x30 true)))
 (let ((?x136 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x243 (bvneg ?x136)))
 (let (($x318 (= ?x243 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x318 true)))
 (let (($x62 (= $x258 true)))
 (let (($x343 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x96 (= $x343 true)))
 (let (($x200 (= $x96 true)))
 (let (($x144 (= $x200 true)))
 (let (($x336 (and $x144 $x62)))
 (let (($x298 (and $x336 $x130)))
 (let (($x398 (and $x298 $x64)))
 (let (($x147 (and $x398 $x39)))
 (let (($x71 (and $x147 $x408)))
 (let (($x179 (and $x71 $x100)))
 (let (($x216 (and $x179 $x49)))
 (let (($x414 (and $x216 $x112)))
 (let (($x15 (and $x414 $x146)))
 (let (($x327 (and $x15 $x347)))
 (let (($x235 (and $x327 $x159)))
 (let (($x326 (and $x235 $x320)))
 (let ((?x332 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (and (bvuge ?x332 (_ bv1 32)) $x326)))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x150 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (=> $x97 (= ?x150 ?x77)))))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x28 (_ bv1 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (= $x97 $x20))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x28 (_ bv0 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x389 (_ bv0 32))))
 (= $x390 $x376))))))
 ))
 (let (($x393 (and $x392 $x352)))
 (let (($x68 (and $x393 $x282)))
 (let (($x295 (and $x68 $x142)))
 (let (($x275 (and $x295 $x247)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x277 (and $x361 $x275)))
 (let (($x367 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x212 (and $x367 $x277)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x190 (and $x132 $x212)))
 (let (($x185 (bvugt ?x242 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x199 (bvadd ?x242 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x365 (bvugt ?x242 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x199)))
 (let (($x196 (or false (or false (and (and true (or $x141 $x365)) (or $x254 $x185))))))
 (let (($x174 (=> (bvule ?x242 (bvsub (bvadd ?x242 (_ bv4 32)) (_ bv1 32))) $x196)))
 (let (($x226 (=> (and $x109 (bvule ?x242 (bvsub (bvadd ?x242 (_ bv4 32)) (_ bv1 32)))) $x196)))
 (let (($x230 (and $x226 $x190)))
 (let (($x102 (=> $x230 $x143)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x225 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x310 (bvule ?x225 (_ bv4294967294 32))))
 (let (($x108 (= $x310 true)))
 (let (($x143 (= $x108 true)))
 (let ((?x90 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x219 (bvneg ?x90)))
 (let (($x421 (= ?x219 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x260 (= $x421 true)))
 (let (($x320 (= $x260 true)))
 (let (($x232 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x88 (= $x232 true)))
 (let (($x164 (= $x88 true)))
 (let (($x159 (= $x164 true)))
 (let ((?x31 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x242 (bvadd input.dst.llvm-%x ?x31)))
 (let ((?x372 (bvsub ?x242 ?x31)))
 (let (($x333 (ite (bvsge ?x31 (_ bv0 32)) (bvuge ?x242 ?x372) (bvult ?x242 ?x372))))
 (let (($x420 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x170 (ite $x420 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x171 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x44 (bvmul (_ bv4 64) ?x171)))
 (let ((?x12 ((_ extract 63 32) ?x44)))
 (let (($x417 (= ?x12 ?x170)))
 (let (($x341 (and $x417 $x333)))
 (let (($x128 (= (bvand ?x242 (_ bv4294967292 32)) ?x242)))
 (let (($x311 (and $x128 $x341)))
 (let (($x67 (= true $x311)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x204 (=> $x109 $x67)))
 (let (($x290 (= $x204 true)))
 (let (($x304 (= $x290 true)))
 (let (($x347 (= $x304 true)))
 (let (($x371 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x78 (= $x371 true)))
 (let (($x337 (= $x78 true)))
 (let (($x146 (= $x337 true)))
 (let (($x400 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x14 (= $x400 true)))
 (let (($x401 (= $x14 true)))
 (let (($x112 (= $x401 true)))
 (let (($x374 (= $x109 true)))
 (let (($x287 (= $x374 true)))
 (let (($x49 (= $x287 true)))
 (let ((?x73 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x73)))
 (let ((?x93 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x362 (= (_ bv0 32) ?x93)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x231 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x231)))
 (let (($x183 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x57 (and $x183 $x42)))
 (let (($x271 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x271 $x57)))
 (let (($x131 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x253 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x182 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x357 (and $x182 $x16)))
 (let (($x379 (not $x357)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x292 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x381 (and $x292 $x48)))
 (let (($x113 (and (not $x381) $x379)))
 (let (($x65 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x280 $x65)))
 (let (($x61 (not $x169)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (and $x173 $x236)))
 (let (($x22 (and (not $x251) $x61)))
 (let (($x53 (and (and (and (and (and (and $x22 $x113) $x253) $x131) $x250) $x265) $x362)))
 (let (($x80 (and $x53 $x27)))
 (let (($x75 (= $x80 true)))
 (let (($x385 (= $x75 true)))
 (let (($x100 (= $x385 true)))
 (let (($x404 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x406 (= $x404 true)))
 (let (($x285 (= $x406 true)))
 (let (($x408 (= $x285 true)))
 (let (($x289 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x120))))
 (let ((?x150 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (=> $x97 (= ?x150 ?x63)))))))))
 ))
 (let (($x405 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvuge ?x424 (_ bv1 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (= $x97 $x380))))))
 ))
 (let (($x352 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x389 (_ bv0 32))))
 (=> $x390 $x215)))))
 ))
 (let (($x349 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (= ?x424 (_ bv0 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x389 (_ bv0 32))))
 (= $x390 $x426))))))
 ))
 (let (($x105 (and $x349 $x352)))
 (let (($x203 (and $x105 $x405)))
 (let (($x407 (and $x203 $x289)))
 (let (($x415 (= $x407 true)))
 (let (($x101 (= $x415 true)))
 (let (($x39 (= $x101 true)))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x120))))
 (let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x28 (_ bv1 32))))
 (=> $x20 (= ?x77 ?x63)))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x380 (bvuge ?x424 (_ bv1 32))))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x28 (_ bv1 32))))
 (= $x20 $x380))))))
 ))
 (let (($x59 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x215 (= false false)))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x28 (_ bv0 32))))
 (=> $x376 $x215)))))
 ))
 (let (($x423 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x424 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x426 (= ?x424 (_ bv0 32))))
 (let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x28 (_ bv0 32))))
 (= $x376 $x426))))))
 ))
 (let (($x263 (and $x423 $x59)))
 (let (($x284 (and $x263 $x322)))
 (let (($x305 (and $x284 $x8)))
 (let (($x181 (= $x305 true)))
 (let (($x396 (= $x181 true)))
 (let (($x64 (= $x396 true)))
 (let ((?x262 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x55 (= (_ bv0 2) ?x262)))
 (let (($x30 (= $x55 true)))
 (let (($x130 (= $x30 true)))
 (let ((?x136 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x243 (bvneg ?x136)))
 (let (($x318 (= ?x243 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x258 (= $x318 true)))
 (let (($x62 (= $x258 true)))
 (let (($x343 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x96 (= $x343 true)))
 (let (($x200 (= $x96 true)))
 (let (($x144 (= $x200 true)))
 (let (($x336 (and $x144 $x62)))
 (let (($x298 (and $x336 $x130)))
 (let (($x398 (and $x298 $x64)))
 (let (($x147 (and $x398 $x39)))
 (let (($x71 (and $x147 $x408)))
 (let (($x179 (and $x71 $x100)))
 (let (($x216 (and $x179 $x49)))
 (let (($x414 (and $x216 $x112)))
 (let (($x15 (and $x414 $x146)))
 (let (($x327 (and $x15 $x347)))
 (let (($x235 (and $x327 $x159)))
 (let (($x326 (and $x235 $x320)))
 (let ((?x332 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x247 (and (bvuge ?x332 (_ bv1 32)) $x326)))
 (let (($x142 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x77 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x150 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (=> $x97 (= ?x150 ?x77)))))))
 ))
 (let (($x282 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x28 (_ bv1 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x389 (_ bv1 32))))
 (= $x97 $x20))))))
 ))
 (let (($x392 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x28 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x376 (= ?x28 (_ bv0 32))))
 (let ((?x389 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x390 (= ?x389 (_ bv0 32))))
 (= $x390 $x376))))))
 ))
 (let (($x393 (and $x392 $x352)))
 (let (($x68 (and $x393 $x282)))
 (let (($x295 (and $x68 $x142)))
 (let (($x275 (and $x295 $x247)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x277 (and $x361 $x275)))
 (let (($x367 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x212 (and $x367 $x277)))
 (let (($x132 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x190 (and $x132 $x212)))
 (let (($x185 (bvugt ?x242 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x199 (bvadd ?x242 (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x199)))
 (let (($x365 (bvugt ?x242 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x199)))
 (let (($x196 (or false (or false (and (and true (or $x141 $x365)) (or $x254 $x185))))))
 (let (($x174 (=> (bvule ?x242 (bvsub (bvadd ?x242 (_ bv4 32)) (_ bv1 32))) $x196)))
 (let (($x226 (=> (and $x109 (bvule ?x242 (bvsub (bvadd ?x242 (_ bv4 32)) (_ bv1 32)))) $x196)))
 (let (($x230 (and $x226 $x190)))
 (let (($x102 (=> $x230 $x143)))
 (not $x102))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 236 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x351 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x412 (bvsge ?x351 (_ bv0 32))))
 (let (($x422 (= $x412 true)))
 (let (($x188 (= $x422 true)))
 (let ((?x176 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x153 (bvneg ?x176)))
 (let (($x375 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x375 true)))
 (let (($x370 (= $x89 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x218 true)))
 (let (($x288 (= $x306 true)))
 (let (($x208 (= $x288 true)))
 (let ((?x242 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x161 (bvadd input.dst.llvm-%x ?x242)))
 (let ((?x355 (bvsub ?x161 ?x242)))
 (let (($x224 (ite (bvsge ?x242 (_ bv0 32)) (bvuge ?x161 ?x355) (bvult ?x161 ?x355))))
 (let (($x257 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x19 (ite $x257 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x329 (bvmul (_ bv4 64) ?x156)))
 (let ((?x416 ((_ extract 63 32) ?x329)))
 (let (($x368 (= ?x416 ?x19)))
 (let (($x106 (and $x368 $x224)))
 (let (($x98 (= (bvand ?x161 (_ bv4294967292 32)) ?x161)))
 (let (($x267 (and $x98 $x106)))
 (let (($x10 (= true $x267)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x369 (=> $x109 $x10)))
 (let (($x237 (= $x369 true)))
 (let (($x303 (= $x237 true)))
 (let (($x353 (= $x303 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x300 true)))
 (let (($x391 (= $x92 true)))
 (let (($x37 (= $x391 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x244 true)))
 (let (($x286 (= $x317 true)))
 (let (($x217 (= $x286 true)))
 (let (($x121 (= $x109 true)))
 (let (($x399 (= $x121 true)))
 (let (($x69 (= $x399 true)))
 (let ((?x373 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x373)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x411 (= (_ bv0 32) ?x187)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x346 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x312)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x228)))
 (let (($x383 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (and $x383 $x163)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x315 $x325)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x323 $x259)))
 (let (($x127 (not $x33)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x339 $x268)))
 (let (($x180 (and (not $x60) $x127)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x118 $x9)))
 (let (($x210 (not $x160)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x248 $x266)))
 (let (($x331 (and (not $x6) $x210)))
 (let (($x103 (and (and (and (and (and (and $x331 $x180) $x46) $x193) $x84) $x346) $x411)))
 (let (($x272 (and $x103 $x152)))
 (let (($x410 (= $x272 true)))
 (let (($x394 (= $x410 true)))
 (let (($x314 (= $x394 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x32 (= $x52 true)))
 (let (($x299 (= $x32 true)))
 (let (($x297 (= $x299 true)))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x324 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x51))))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (=> $x95 (= ?x63 ?x74)))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x311 (_ bv1 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (= $x95 $x320))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x336 (_ bv0 32))))
 (=> $x115 $x30)))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x311 (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x336 (_ bv0 32))))
 (= $x115 $x67))))))
 ))
 (let (($x122 (and $x137 $x205)))
 (let (($x418 (and $x122 $x233)))
 (let (($x252 (and $x418 $x201)))
 (let (($x354 (= $x252 true)))
 (let (($x202 (= $x354 true)))
 (let (($x338 (= $x202 true)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x324 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x51))))
 (let ((?x211 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x318 (_ bv1 32))))
 (=> $x284 (= ?x211 ?x74)))))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x311 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x318 (_ bv1 32))))
 (= $x284 $x320))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x318 (_ bv0 32))))
 (=> $x258 $x30)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x311 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x318 (_ bv0 32))))
 (= $x258 $x67))))))
 ))
 (let (($x232 (and $x290 $x327)))
 (let (($x275 (and $x232 $x247)))
 (let (($x273 (and $x275 $x348)))
 (let (($x119 (= $x273 true)))
 (let (($x261 (= $x119 true)))
 (let (($x269 (= $x261 true)))
 (let ((?x251 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x223 (= (_ bv0 2) ?x251)))
 (let (($x280 (= $x223 true)))
 (let (($x65 (= $x280 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x404 (bvneg ?x147)))
 (let (($x285 (= ?x404 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x408 (= $x285 true)))
 (let (($x71 (= $x408 true)))
 (let (($x402 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x289 (= $x402 true)))
 (let (($x407 (= $x289 true)))
 (let (($x415 (= $x407 true)))
 (let (($x173 (and $x415 $x71)))
 (let (($x169 (and $x173 $x65)))
 (let (($x158 (and $x169 $x269)))
 (let (($x321 (and $x158 $x338)))
 (let (($x94 (and $x321 $x297)))
 (let (($x363 (and $x94 $x314)))
 (let (($x25 (and $x363 $x69)))
 (let (($x246 (and $x25 $x217)))
 (let (($x87 (and $x246 $x37)))
 (let (($x255 (and $x87 $x353)))
 (let (($x384 (and $x255 $x208)))
 (let (($x221 (and $x384 $x370)))
 (let ((?x72 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x388 (and (bvuge ?x72 (_ bv1 32)) $x221)))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x211 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (=> $x95 (= ?x63 ?x211)))))))
 ))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x318 (_ bv1 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (= $x95 $x284))))))
 ))
 (let (($x55 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x318 (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x336 (_ bv0 32))))
 (= $x115 $x258))))))
 ))
 (let (($x192 (and $x55 $x205)))
 (let (($x328 (and $x192 $x134)))
 (let (($x305 (and $x328 $x8)))
 (let (($x135 (and $x305 $x388)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x293 (and $x35 $x135)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x148 (and $x361 $x293)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x313 (and $x195 $x148)))
 (let (($x13 (bvugt ?x161 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x161 (_ bv3 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x229 (bvugt ?x161 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x308 (or false (or false (and (and true (or $x56 $x229)) (or $x206 $x13))))))
 (let (($x116 (=> (bvule ?x161 (bvsub (bvadd ?x161 (_ bv4 32)) (_ bv1 32))) $x308)))
 (let (($x70 (=> (and $x109 (bvule ?x161 (bvsub (bvadd ?x161 (_ bv4 32)) (_ bv1 32)))) $x308)))
 (let (($x7 (and $x70 $x313)))
 (let (($x387 (=> $x7 $x188)))
 (not $x387))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x351 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x412 (bvsge ?x351 (_ bv0 32))))
 (let (($x422 (= $x412 true)))
 (let (($x188 (= $x422 true)))
 (let ((?x176 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x153 (bvneg ?x176)))
 (let (($x375 (= ?x153 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x89 (= $x375 true)))
 (let (($x370 (= $x89 true)))
 (let (($x218 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x306 (= $x218 true)))
 (let (($x288 (= $x306 true)))
 (let (($x208 (= $x288 true)))
 (let ((?x242 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x161 (bvadd input.dst.llvm-%x ?x242)))
 (let ((?x355 (bvsub ?x161 ?x242)))
 (let (($x224 (ite (bvsge ?x242 (_ bv0 32)) (bvuge ?x161 ?x355) (bvult ?x161 ?x355))))
 (let (($x257 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x19 (ite $x257 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x156 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x329 (bvmul (_ bv4 64) ?x156)))
 (let ((?x416 ((_ extract 63 32) ?x329)))
 (let (($x368 (= ?x416 ?x19)))
 (let (($x106 (and $x368 $x224)))
 (let (($x98 (= (bvand ?x161 (_ bv4294967292 32)) ?x161)))
 (let (($x267 (and $x98 $x106)))
 (let (($x10 (= true $x267)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x369 (=> $x109 $x10)))
 (let (($x237 (= $x369 true)))
 (let (($x303 (= $x237 true)))
 (let (($x353 (= $x303 true)))
 (let (($x300 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x92 (= $x300 true)))
 (let (($x391 (= $x92 true)))
 (let (($x37 (= $x391 true)))
 (let (($x244 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x317 (= $x244 true)))
 (let (($x286 (= $x317 true)))
 (let (($x217 (= $x286 true)))
 (let (($x121 (= $x109 true)))
 (let (($x399 (= $x121 true)))
 (let (($x69 (= $x399 true)))
 (let ((?x373 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x152 (= (_ bv0 32) ?x373)))
 (let ((?x187 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x411 (= (_ bv0 32) ?x187)))
 (let ((?x312 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x346 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x312)))
 (let ((?x228 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x228)))
 (let (($x383 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x325 (and $x383 $x163)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x315 $x325)))
 (let (($x193 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x259 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x323 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x33 (and $x323 $x259)))
 (let (($x127 (not $x33)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x339 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x339 $x268)))
 (let (($x180 (and (not $x60) $x127)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x160 (and $x118 $x9)))
 (let (($x210 (not $x160)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x248 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x248 $x266)))
 (let (($x331 (and (not $x6) $x210)))
 (let (($x103 (and (and (and (and (and (and $x331 $x180) $x46) $x193) $x84) $x346) $x411)))
 (let (($x272 (and $x103 $x152)))
 (let (($x410 (= $x272 true)))
 (let (($x394 (= $x410 true)))
 (let (($x314 (= $x394 true)))
 (let (($x52 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x32 (= $x52 true)))
 (let (($x299 (= $x32 true)))
 (let (($x297 (= $x299 true)))
 (let (($x201 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x324 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x51))))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (=> $x95 (= ?x63 ?x74)))))))))
 ))
 (let (($x233 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x311 (_ bv1 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (= $x95 $x320))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x336 (_ bv0 32))))
 (=> $x115 $x30)))))
 ))
 (let (($x137 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x311 (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x336 (_ bv0 32))))
 (= $x115 $x67))))))
 ))
 (let (($x122 (and $x137 $x205)))
 (let (($x418 (and $x122 $x233)))
 (let (($x252 (and $x418 $x201)))
 (let (($x354 (= $x252 true)))
 (let (($x202 (= $x354 true)))
 (let (($x338 (= $x202 true)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x324 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x51))))
 (let ((?x211 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x318 (_ bv1 32))))
 (=> $x284 (= ?x211 ?x74)))))))))
 ))
 (let (($x247 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x311 (_ bv1 32))))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x318 (_ bv1 32))))
 (= $x284 $x320))))))
 ))
 (let (($x327 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x30 (= false false)))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x318 (_ bv0 32))))
 (=> $x258 $x30)))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x311 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x67 (= ?x311 (_ bv0 32))))
 (let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x318 (_ bv0 32))))
 (= $x258 $x67))))))
 ))
 (let (($x232 (and $x290 $x327)))
 (let (($x275 (and $x232 $x247)))
 (let (($x273 (and $x275 $x348)))
 (let (($x119 (= $x273 true)))
 (let (($x261 (= $x119 true)))
 (let (($x269 (= $x261 true)))
 (let ((?x251 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x223 (= (_ bv0 2) ?x251)))
 (let (($x280 (= $x223 true)))
 (let (($x65 (= $x280 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x404 (bvneg ?x147)))
 (let (($x285 (= ?x404 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x408 (= $x285 true)))
 (let (($x71 (= $x408 true)))
 (let (($x402 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x289 (= $x402 true)))
 (let (($x407 (= $x289 true)))
 (let (($x415 (= $x407 true)))
 (let (($x173 (and $x415 $x71)))
 (let (($x169 (and $x173 $x65)))
 (let (($x158 (and $x169 $x269)))
 (let (($x321 (and $x158 $x338)))
 (let (($x94 (and $x321 $x297)))
 (let (($x363 (and $x94 $x314)))
 (let (($x25 (and $x363 $x69)))
 (let (($x246 (and $x25 $x217)))
 (let (($x87 (and $x246 $x37)))
 (let (($x255 (and $x87 $x353)))
 (let (($x384 (and $x255 $x208)))
 (let (($x221 (and $x384 $x370)))
 (let ((?x72 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x388 (and (bvuge ?x72 (_ bv1 32)) $x221)))
 (let (($x8 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x211 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x63 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (=> $x95 (= ?x63 ?x211)))))))
 ))
 (let (($x134 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x284 (bvuge ?x318 (_ bv1 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x95 (bvuge ?x336 (_ bv1 32))))
 (= $x95 $x284))))))
 ))
 (let (($x55 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x318 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x258 (= ?x318 (_ bv0 32))))
 (let ((?x336 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x115 (= ?x336 (_ bv0 32))))
 (= $x115 $x258))))))
 ))
 (let (($x192 (and $x55 $x205)))
 (let (($x328 (and $x192 $x134)))
 (let (($x305 (and $x328 $x8)))
 (let (($x135 (and $x305 $x388)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x293 (and $x35 $x135)))
 (let (($x361 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x148 (and $x361 $x293)))
 (let (($x195 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x313 (and $x195 $x148)))
 (let (($x13 (bvugt ?x161 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x167 (bvadd ?x161 (_ bv3 32))))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x229 (bvugt ?x161 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x167)))
 (let (($x308 (or false (or false (and (and true (or $x56 $x229)) (or $x206 $x13))))))
 (let (($x116 (=> (bvule ?x161 (bvsub (bvadd ?x161 (_ bv4 32)) (_ bv1 32))) $x308)))
 (let (($x70 (=> (and $x109 (bvule ?x161 (bvsub (bvadd ?x161 (_ bv4 32)) (_ bv1 32)))) $x308)))
 (let (($x7 (and $x70 $x313)))
 (let (($x387 (=> $x7 $x188)))
 (not $x387))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (bvule ?x203 input.dst.llvm-%n)))
 (let (($x304 (= $x5 true)))
 (let (($x260 (= $x304 true)))
 (let ((?x136 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x423 (bvneg ?x136)))
 (let (($x344 (= ?x423 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x344 true)))
 (let (($x263 (= $x59 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x340 (= $x126 true)))
 (let (($x144 (= $x340 true)))
 (let (($x99 (= $x144 true)))
 (let ((?x161 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd input.dst.llvm-%x ?x161)))
 (let ((?x108 (bvsub ?x85 ?x161)))
 (let (($x43 (ite (bvsge ?x161 (_ bv0 32)) (bvuge ?x85 ?x108) (bvult ?x85 ?x108))))
 (let (($x225 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x310 (ite $x225 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x166 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x166)))
 (let ((?x102 ((_ extract 63 32) ?x143)))
 (let (($x230 (= ?x102 ?x310)))
 (let (($x419 (and $x230 $x43)))
 (let (($x190 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x295 (and $x190 $x419)))
 (let (($x175 (= true $x295)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (=> $x109 $x175)))
 (let (($x142 (= $x139 true)))
 (let (($x38 (= $x142 true)))
 (let (($x330 (= $x38 true)))
 (let (($x380 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x421 (= $x380 true)))
 (let (($x270 (= $x421 true)))
 (let (($x425 (= $x270 true)))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x78))))
 (let ((?x74 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (=> $x381 (= ?x74 ?x316)))))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x113 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (= $x381 $x123))))))
 ))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x173 (_ bv0 32))))
 (=> $x236 $x280)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x113 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x173 (_ bv0 32))))
 (= $x236 $x29))))))
 ))
 (let (($x417 (and $x420 $x333)))
 (let (($x130 (and $x417 $x364)))
 (let (($x159 (and $x130 $x88)))
 (let (($x164 (= $x159 true)))
 (let (($x235 (= $x164 true)))
 (let (($x90 (= $x235 true)))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x78))))
 (let ((?x178 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x285 (_ bv1 32))))
 (=> $x275 (= ?x178 ?x316)))))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x113 (_ bv1 32))))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x285 (_ bv1 32))))
 (= $x275 $x123))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x285 (_ bv0 32))))
 (=> $x408 $x280)))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x113 (_ bv0 32))))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x285 (_ bv0 32))))
 (= $x408 $x29))))))
 ))
 (let (($x57 (and $x271 $x42)))
 (let (($x75 (and $x57 $x73)))
 (let (($x171 (and $x75 $x128)))
 (let (($x44 (= $x171 true)))
 (let (($x12 (= $x44 true)))
 (let (($x343 (= $x12 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x98 true)))
 (let (($x156 (= $x117 true)))
 (let (($x329 (= $x156 true)))
 (let (($x37 (= $x109 true)))
 (let (($x87 (= $x37 true)))
 (let (($x66 (= $x87 true)))
 (let ((?x363 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x363)))
 (let ((?x394 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x314 (= (_ bv0 32) ?x394)))
 (let ((?x272 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x410 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x272)))
 (let ((?x411 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x411)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x373 (and $x187 $x103)))
 (let (($x413 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x413 $x373)))
 (let (($x346 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x34 $x315)))
 (let (($x228 (not $x383)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x151 $x79)))
 (let (($x325 (and (not $x193) $x228)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x33 $x127)))
 (let (($x209 (not $x180)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x114 $x323)))
 (let (($x46 (and (not $x259) $x209)))
 (let (($x286 (and (and (and (and (and (and $x46 $x325) $x18) $x346) $x152) $x410) $x314)))
 (let (($x217 (and $x286 $x121)))
 (let (($x246 (= $x217 true)))
 (let (($x300 (= $x246 true)))
 (let (($x92 (= $x300 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x331 (= $x210 true)))
 (let (($x339 (= $x331 true)))
 (let (($x268 (= $x339 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x335 (= (_ bv0 2) ?x6)))
 (let (($x118 (= $x335 true)))
 (let (($x9 (= $x118 true)))
 (let ((?x321 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x52 (bvneg ?x321)))
 (let (($x299 (= ?x52 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x299 true)))
 (let (($x94 (= $x297 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x41 true)))
 (let (($x252 (= $x201 true)))
 (let (($x354 (= $x252 true)))
 (let (($x248 (and $x354 $x94)))
 (let (($x160 (and $x248 $x9)))
 (let (($x60 (and $x160 $x268)))
 (let (($x391 (and $x60 $x92)))
 (let (($x189 (and $x391 $x66)))
 (let (($x416 (and $x189 $x329)))
 (let (($x96 (and $x416 $x343)))
 (let (($x219 (and $x96 $x90)))
 (let (($x11 (and $x219 $x425)))
 (let (($x332 (and $x11 $x330)))
 (let (($x238 (and $x332 $x99)))
 (let (($x86 (and $x238 $x263)))
 (let ((?x307 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (and (bvuge ?x307 (_ bv1 32)) $x86)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x74 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (=> $x381 (= ?x74 ?x178)))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x285 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (= $x381 $x275))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x285 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x173 (_ bv0 32))))
 (= $x236 $x408))))))
 ))
 (let (($x104 (and $x223 $x333)))
 (let (($x256 (and $x104 $x324)))
 (let (($x273 (and $x256 $x348)))
 (let (($x111 (and $x273 $x172)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x120 (and $x62 $x111)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x35 $x120)))
 (let (($x359 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x397 (and $x359 $x105)))
 (let (($x226 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x85 (_ bv3 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x185 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x334 (or false (or false (and (and true (or $x213 $x185)) (or $x174 $x226))))))
 (let (($x367 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) $x334)))
 (let (($x199 (=> (and $x109 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) $x334)))
 (let (($x405 (and $x199 $x397)))
 (let (($x378 (=> $x405 $x260)))
 (not $x378))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x203 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x5 (bvule ?x203 input.dst.llvm-%n)))
 (let (($x304 (= $x5 true)))
 (let (($x260 (= $x304 true)))
 (let ((?x136 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x423 (bvneg ?x136)))
 (let (($x344 (= ?x423 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x59 (= $x344 true)))
 (let (($x263 (= $x59 true)))
 (let (($x126 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x340 (= $x126 true)))
 (let (($x144 (= $x340 true)))
 (let (($x99 (= $x144 true)))
 (let ((?x161 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x85 (bvadd input.dst.llvm-%x ?x161)))
 (let ((?x108 (bvsub ?x85 ?x161)))
 (let (($x43 (ite (bvsge ?x161 (_ bv0 32)) (bvuge ?x85 ?x108) (bvult ?x85 ?x108))))
 (let (($x225 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x310 (ite $x225 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x166 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x143 (bvmul (_ bv4 64) ?x166)))
 (let ((?x102 ((_ extract 63 32) ?x143)))
 (let (($x230 (= ?x102 ?x310)))
 (let (($x419 (and $x230 $x43)))
 (let (($x190 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x295 (and $x190 $x419)))
 (let (($x175 (= true $x295)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x139 (=> $x109 $x175)))
 (let (($x142 (= $x139 true)))
 (let (($x38 (= $x142 true)))
 (let (($x330 (= $x38 true)))
 (let (($x380 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x421 (= $x380 true)))
 (let (($x270 (= $x421 true)))
 (let (($x425 (= $x270 true)))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x78))))
 (let ((?x74 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (=> $x381 (= ?x74 ?x316)))))))))
 ))
 (let (($x364 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x113 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (= $x381 $x123))))))
 ))
 (let (($x333 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x173 (_ bv0 32))))
 (=> $x236 $x280)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x113 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x173 (_ bv0 32))))
 (= $x236 $x29))))))
 ))
 (let (($x417 (and $x420 $x333)))
 (let (($x130 (and $x417 $x364)))
 (let (($x159 (and $x130 $x88)))
 (let (($x164 (= $x159 true)))
 (let (($x235 (= $x164 true)))
 (let (($x90 (= $x235 true)))
 (let (($x128 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x400 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x78))))
 (let ((?x178 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x285 (_ bv1 32))))
 (=> $x275 (= ?x178 ?x316)))))))))
 ))
 (let (($x73 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x123 (bvuge ?x113 (_ bv1 32))))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x285 (_ bv1 32))))
 (= $x275 $x123))))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x280 (= false false)))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x285 (_ bv0 32))))
 (=> $x408 $x280)))))
 ))
 (let (($x271 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x113 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x29 (= ?x113 (_ bv0 32))))
 (let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x285 (_ bv0 32))))
 (= $x408 $x29))))))
 ))
 (let (($x57 (and $x271 $x42)))
 (let (($x75 (and $x57 $x73)))
 (let (($x171 (and $x75 $x128)))
 (let (($x44 (= $x171 true)))
 (let (($x12 (= $x44 true)))
 (let (($x343 (= $x12 true)))
 (let (($x98 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x117 (= $x98 true)))
 (let (($x156 (= $x117 true)))
 (let (($x329 (= $x156 true)))
 (let (($x37 (= $x109 true)))
 (let (($x87 (= $x37 true)))
 (let (($x66 (= $x87 true)))
 (let ((?x363 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x121 (= (_ bv0 32) ?x363)))
 (let ((?x394 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x314 (= (_ bv0 32) ?x394)))
 (let ((?x272 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x410 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x272)))
 (let ((?x411 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x411)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x373 (and $x187 $x103)))
 (let (($x413 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x152 (and $x413 $x373)))
 (let (($x346 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x34 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x383 (and $x34 $x315)))
 (let (($x228 (not $x383)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x151 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x151 $x79)))
 (let (($x325 (and (not $x193) $x228)))
 (let (($x127 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (and $x33 $x127)))
 (let (($x209 (not $x180)))
 (let (($x323 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (and $x114 $x323)))
 (let (($x46 (and (not $x259) $x209)))
 (let (($x286 (and (and (and (and (and (and $x46 $x325) $x18) $x346) $x152) $x410) $x314)))
 (let (($x217 (and $x286 $x121)))
 (let (($x246 (= $x217 true)))
 (let (($x300 (= $x246 true)))
 (let (($x92 (= $x300 true)))
 (let (($x210 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x331 (= $x210 true)))
 (let (($x339 (= $x331 true)))
 (let (($x268 (= $x339 true)))
 (let ((?x6 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x335 (= (_ bv0 2) ?x6)))
 (let (($x118 (= $x335 true)))
 (let (($x9 (= $x118 true)))
 (let ((?x321 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x52 (bvneg ?x321)))
 (let (($x299 (= ?x52 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x297 (= $x299 true)))
 (let (($x94 (= $x297 true)))
 (let (($x41 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x201 (= $x41 true)))
 (let (($x252 (= $x201 true)))
 (let (($x354 (= $x252 true)))
 (let (($x248 (and $x354 $x94)))
 (let (($x160 (and $x248 $x9)))
 (let (($x60 (and $x160 $x268)))
 (let (($x391 (and $x60 $x92)))
 (let (($x189 (and $x391 $x66)))
 (let (($x416 (and $x189 $x329)))
 (let (($x96 (and $x416 $x343)))
 (let (($x219 (and $x96 $x90)))
 (let (($x11 (and $x219 $x425)))
 (let (($x332 (and $x11 $x330)))
 (let (($x238 (and $x332 $x99)))
 (let (($x86 (and $x238 $x263)))
 (let ((?x307 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x172 (and (bvuge ?x307 (_ bv1 32)) $x86)))
 (let (($x348 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x74 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (=> $x381 (= ?x74 ?x178)))))))
 ))
 (let (($x324 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x285 (_ bv1 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x381 (bvuge ?x173 (_ bv1 32))))
 (= $x381 $x275))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x285 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x408 (= ?x285 (_ bv0 32))))
 (let ((?x173 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x236 (= ?x173 (_ bv0 32))))
 (= $x236 $x408))))))
 ))
 (let (($x104 (and $x223 $x333)))
 (let (($x256 (and $x104 $x324)))
 (let (($x273 (and $x256 $x348)))
 (let (($x111 (and $x273 $x172)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x120 (and $x62 $x111)))
 (let (($x35 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x105 (and $x35 $x120)))
 (let (($x359 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x397 (and $x359 $x105)))
 (let (($x226 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x254 (bvadd ?x85 (_ bv3 32))))
 (let (($x174 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x185 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x254)))
 (let (($x334 (or false (or false (and (and true (or $x213 $x185)) (or $x174 $x226))))))
 (let (($x367 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) $x334)))
 (let (($x199 (=> (and $x109 (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32)))) $x334)))
 (let (($x405 (and $x199 $x397)))
 (let (($x378 (=> $x405 $x260)))
 (not $x378))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x418 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x253 (bvmul (_ bv4294967295 32) ?x418)))
 (let ((?x231 (bvneg ?x253)))
 (let (($x374 (= ?x231 ?x301)))
 (let (($x287 (= $x374 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x290 (bvneg ?x147)))
 (let (($x347 (= ?x290 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x327 (= $x347 true)))
 (let (($x232 (= $x327 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x403 (= $x24 true)))
 (let (($x415 (= $x403 true)))
 (let (($x101 (= $x415 true)))
 (let (($x45 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x45 true)))
 (let (($x181 (= $x8 true)))
 (let (($x186 (= $x181 true)))
 (let ((?x85 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x141 (bvadd input.dst.llvm-%x ?x85)))
 (let ((?x20 (bvsub ?x141 ?x85)))
 (let (($x215 (ite (bvsge ?x85 (_ bv0 32)) (bvuge ?x141 ?x20) (bvult ?x141 ?x20))))
 (let (($x392 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x385 (ite $x392 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x350 (bvmul (_ bv4 64) ?x249)))
 (let ((?x358 ((_ extract 63 32) ?x350)))
 (let (($x179 (= ?x358 ?x385)))
 (let (($x97 (and $x179 $x215)))
 (let (($x76 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x49 (and $x76 $x97)))
 (let (($x100 (= true $x49)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (=> $x109 $x100)))
 (let (($x222 (= $x264 true)))
 (let (($x424 (= $x222 true)))
 (let (($x305 (= $x424 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x27 true)))
 (let (($x80 (= $x220 true)))
 (let (($x362 (= $x80 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x341 true)))
 (let (($x67 (= $x311 true)))
 (let (($x204 (= $x67 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x131 (= $x279 true)))
 (let (($x342 (= $x131 true)))
 (let (($x200 (= $x342 true)))
 (let (($x402 (= $x109 true)))
 (let (($x289 (= $x402 true)))
 (let (($x407 (= $x289 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x389 (= (_ bv0 32) ?x282)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x77)))
 (let ((?x376 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x376)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x387 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x390 (and $x387 $x155)))
 (let (($x422 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x422 $x390)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x298 $x262)))
 (let (($x30 (not $x55)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (and $x135 $x313)))
 (let (($x192 (and (not $x412) $x30)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x351 $x293)))
 (let (($x221 (not $x148)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x375 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x375 $x89)))
 (let (($x370 (and (not $x7) $x221)))
 (let (($x396 (and (and (and (and (and (and $x370 $x192) $x284) $x194) $x28) $x150) $x23)))
 (let (($x398 (and $x396 $x389)))
 (let (($x64 (= $x398 true)))
 (let (($x349 (= $x64 true)))
 (let (($x36 (= $x349 true)))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x257))))
 (let ((?x312 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (=> $x151 (= ?x312 ?x328)))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x140 (_ bv1 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (= $x151 $x99))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (=> $x266 $x118)))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x140 (_ bv0 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (= $x266 $x108))))))
 ))
 (let (($x255 (and $x240 $x210)))
 (let (($x106 (and $x255 $x303)))
 (let (($x288 (and $x106 $x306)))
 (let (($x384 (= $x288 true)))
 (let (($x208 (= $x384 true)))
 (let (($x176 (= $x208 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x257))))
 (let ((?x69 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x299 (_ bv1 32))))
 (=> $x46 (= ?x69 ?x328)))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x140 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x299 (_ bv1 32))))
 (= $x46 $x99))))))
 ))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x299 (_ bv0 32))))
 (=> $x297 $x118)))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x140 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x299 (_ bv0 32))))
 (= $x297 $x108))))))
 ))
 (let (($x175 (and $x274 $x295)))
 (let (($x423 (and $x175 $x136)))
 (let (($x261 (and $x423 $x386)))
 (let (($x269 (= $x261 true)))
 (let (($x158 (= $x269 true)))
 (let (($x137 (= $x158 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x66 (= (_ bv0 2) ?x87)))
 (let (($x189 (= $x66 true)))
 (let (($x98 (= $x189 true)))
 (let ((?x121 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x217 (bvneg ?x121)))
 (let (($x300 (= ?x217 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x300 true)))
 (let (($x391 (= $x92 true)))
 (let (($x117 (and $x391 $x98)))
 (let (($x47 (and $x117 $x137)))
 (let (($x153 (and $x47 $x176)))
 (let (($x292 (and $x153 $x36)))
 (let (($x182 (and $x292 $x407)))
 (let (($x65 (and $x182 $x200)))
 (let (($x250 (and $x65 $x204)))
 (let (($x53 (and $x250 $x362)))
 (let (($x294 (and $x53 $x305)))
 (let (($x72 (and $x294 $x186)))
 (let (($x39 (and $x72 $x101)))
 (let (($x326 (and $x39 $x232)))
 (let ((?x366 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (and (bvuge ?x366 (_ bv1 32)) $x326)))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x312 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (=> $x151 (= ?x312 ?x69)))))))
 ))
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x299 (_ bv1 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (= $x151 $x46))))))
 ))
 (let (($x335 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x299 (_ bv0 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (= $x266 $x297))))))
 ))
 (let (($x331 (and $x335 $x210)))
 (let (($x163 (and $x331 $x193)))
 (let (($x187 (and $x163 $x413)))
 (let (($x145 (and $x187 $x276)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x51 (and $x71 $x145)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x122 (and $x62 $x51)))
 (let (($x281 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x157 (and $x281 $x122)))
 (let (($x70 (bvugt ?x141 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x141 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x13 (bvugt ?x141 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x206)))
 (let (($x132 (or false (or false (and (and true (or $x177 $x13)) (or $x116 $x70))))))
 (let (($x361 (=> (bvule ?x141 (bvsub (bvadd ?x141 (_ bv4 32)) (_ bv1 32))) $x132)))
 (let (($x167 (=> (and $x109 (bvule ?x141 (bvsub (bvadd ?x141 (_ bv4 32)) (_ bv1 32)))) $x132)))
 (let (($x233 (and $x167 $x157)))
 (let (($x356 (=> $x233 $x287)))
 (not $x356))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x301 (bvadd (_ bv1 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x418 (bvadd (_ bv1 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x253 (bvmul (_ bv4294967295 32) ?x418)))
 (let ((?x231 (bvneg ?x253)))
 (let (($x374 (= ?x231 ?x301)))
 (let (($x287 (= $x374 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x290 (bvneg ?x147)))
 (let (($x347 (= ?x290 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x327 (= $x347 true)))
 (let (($x232 (= $x327 true)))
 (let (($x24 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x403 (= $x24 true)))
 (let (($x415 (= $x403 true)))
 (let (($x101 (= $x415 true)))
 (let (($x45 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x8 (= $x45 true)))
 (let (($x181 (= $x8 true)))
 (let (($x186 (= $x181 true)))
 (let ((?x85 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x141 (bvadd input.dst.llvm-%x ?x85)))
 (let ((?x20 (bvsub ?x141 ?x85)))
 (let (($x215 (ite (bvsge ?x85 (_ bv0 32)) (bvuge ?x141 ?x20) (bvult ?x141 ?x20))))
 (let (($x392 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x385 (ite $x392 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x249 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x350 (bvmul (_ bv4 64) ?x249)))
 (let ((?x358 ((_ extract 63 32) ?x350)))
 (let (($x179 (= ?x358 ?x385)))
 (let (($x97 (and $x179 $x215)))
 (let (($x76 (= (bvand ?x141 (_ bv4294967292 32)) ?x141)))
 (let (($x49 (and $x76 $x97)))
 (let (($x100 (= true $x49)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x264 (=> $x109 $x100)))
 (let (($x222 (= $x264 true)))
 (let (($x424 (= $x222 true)))
 (let (($x305 (= $x424 true)))
 (let (($x27 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x220 (= $x27 true)))
 (let (($x80 (= $x220 true)))
 (let (($x362 (= $x80 true)))
 (let (($x341 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x311 (= $x341 true)))
 (let (($x67 (= $x311 true)))
 (let (($x204 (= $x67 true)))
 (let (($x279 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x131 (= $x279 true)))
 (let (($x342 (= $x131 true)))
 (let (($x200 (= $x342 true)))
 (let (($x402 (= $x109 true)))
 (let (($x289 (= $x402 true)))
 (let (($x407 (= $x289 true)))
 (let ((?x282 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x389 (= (_ bv0 32) ?x282)))
 (let ((?x77 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x77)))
 (let ((?x376 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x150 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x376)))
 (let ((?x188 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x155 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x188)))
 (let (($x387 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x390 (and $x387 $x155)))
 (let (($x422 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x422 $x390)))
 (let (($x194 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x262 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x298 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x298 $x262)))
 (let (($x30 (not $x55)))
 (let (($x313 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x135 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (and $x135 $x313)))
 (let (($x192 (and (not $x412) $x30)))
 (let (($x293 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x148 (and $x351 $x293)))
 (let (($x221 (not $x148)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x375 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x375 $x89)))
 (let (($x370 (and (not $x7) $x221)))
 (let (($x396 (and (and (and (and (and (and $x370 $x192) $x284) $x194) $x28) $x150) $x23)))
 (let (($x398 (and $x396 $x389)))
 (let (($x64 (= $x398 true)))
 (let (($x349 (= $x64 true)))
 (let (($x36 (= $x349 true)))
 (let (($x306 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x257))))
 (let ((?x312 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (=> $x151 (= ?x312 ?x328)))))))))
 ))
 (let (($x303 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x140 (_ bv1 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (= $x151 $x99))))))
 ))
 (let (($x210 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (=> $x266 $x118)))))
 ))
 (let (($x240 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x140 (_ bv0 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (= $x266 $x108))))))
 ))
 (let (($x255 (and $x240 $x210)))
 (let (($x106 (and $x255 $x303)))
 (let (($x288 (and $x106 $x306)))
 (let (($x384 (= $x288 true)))
 (let (($x208 (= $x384 true)))
 (let (($x176 (= $x208 true)))
 (let (($x386 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x115 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x257))))
 (let ((?x69 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x299 (_ bv1 32))))
 (=> $x46 (= ?x69 ?x328)))))))))
 ))
 (let (($x136 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x140 (_ bv1 32))))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x299 (_ bv1 32))))
 (= $x46 $x99))))))
 ))
 (let (($x295 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x118 (= false false)))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x299 (_ bv0 32))))
 (=> $x297 $x118)))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x140 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x108 (= ?x140 (_ bv0 32))))
 (let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x299 (_ bv0 32))))
 (= $x297 $x108))))))
 ))
 (let (($x175 (and $x274 $x295)))
 (let (($x423 (and $x175 $x136)))
 (let (($x261 (and $x423 $x386)))
 (let (($x269 (= $x261 true)))
 (let (($x158 (= $x269 true)))
 (let (($x137 (= $x158 true)))
 (let ((?x87 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x66 (= (_ bv0 2) ?x87)))
 (let (($x189 (= $x66 true)))
 (let (($x98 (= $x189 true)))
 (let ((?x121 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x217 (bvneg ?x121)))
 (let (($x300 (= ?x217 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x92 (= $x300 true)))
 (let (($x391 (= $x92 true)))
 (let (($x117 (and $x391 $x98)))
 (let (($x47 (and $x117 $x137)))
 (let (($x153 (and $x47 $x176)))
 (let (($x292 (and $x153 $x36)))
 (let (($x182 (and $x292 $x407)))
 (let (($x65 (and $x182 $x200)))
 (let (($x250 (and $x65 $x204)))
 (let (($x53 (and $x250 $x362)))
 (let (($x294 (and $x53 $x305)))
 (let (($x72 (and $x294 $x186)))
 (let (($x39 (and $x72 $x101)))
 (let (($x326 (and $x39 $x232)))
 (let ((?x366 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x276 (and (bvuge ?x366 (_ bv1 32)) $x326)))
 (let (($x413 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x69 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x312 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (=> $x151 (= ?x312 ?x69)))))))
 ))
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x299 (_ bv1 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x248 (_ bv1 32))))
 (= $x151 $x46))))))
 ))
 (let (($x335 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x299 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x297 (= ?x299 (_ bv0 32))))
 (let ((?x248 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x248 (_ bv0 32))))
 (= $x266 $x297))))))
 ))
 (let (($x331 (and $x335 $x210)))
 (let (($x163 (and $x331 $x193)))
 (let (($x187 (and $x163 $x413)))
 (let (($x145 (and $x187 $x276)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x51 (and $x71 $x145)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x122 (and $x62 $x51)))
 (let (($x281 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x157 (and $x281 $x122)))
 (let (($x70 (bvugt ?x141 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x206 (bvadd ?x141 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x13 (bvugt ?x141 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x206)))
 (let (($x132 (or false (or false (and (and true (or $x177 $x13)) (or $x116 $x70))))))
 (let (($x361 (=> (bvule ?x141 (bvsub (bvadd ?x141 (_ bv4 32)) (_ bv1 32))) $x132)))
 (let (($x167 (=> (and $x109 (bvule ?x141 (bvsub (bvadd ?x141 (_ bv4 32)) (_ bv1 32)))) $x132)))
 (let (($x233 (and $x167 $x157)))
 (let (($x356 (=> $x233 $x287)))
 (not $x356))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x56 (bvadd input.dst.llvm-%x ?x141)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x138))))
 (let ((?x245 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x234)))
 (let ((?x102 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x43 (bvmul (_ bv4294967295 32) ?x102)))
 (let ((?x144 (bvneg ?x43)))
 (let (($x129 (= ?x144 ?x245)))
 (let (($x309 (= $x129 true)))
 (let ((?x354 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x202 (bvneg ?x354)))
 (let (($x321 (= ?x202 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x323 (= $x321 true)))
 (let (($x259 (= $x323 true)))
 (let ((?x348 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x119 (= (_ bv0 2) ?x348)))
 (let (($x322 (= $x119 true)))
 (let (($x307 (= $x322 true)))
 (let ((?x304 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x325 (bvneg ?x304)))
 (let (($x267 (= ?x325 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x267 true)))
 (let (($x273 (= $x224 true)))
 (let (($x172 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x111 (= $x172 true)))
 (let (($x86 (= $x111 true)))
 (let (($x120 (= $x86 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x203 (= $x263 true)))
 (let (($x5 (= $x203 true)))
 (let (($x105 (= $x5 true)))
 (let (($x332 (ite (bvsge ?x141 (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 ?x141)) (bvult ?x56 (bvsub ?x56 ?x141)))))
 (let (($x339 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x60 (ite $x339 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x143 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x368 (bvmul (_ bv4 64) ?x143)))
 (let ((?x9 ((_ extract 63 32) ?x368)))
 (let (($x114 (= ?x9 ?x60)))
 (let (($x126 (and $x114 $x332)))
 (let (($x40 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x127 (and $x40 $x126)))
 (let (($x340 (= true $x127)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x109 $x340)))
 (let (($x34 (= $x218 true)))
 (let (($x315 (= $x34 true)))
 (let (($x344 (= $x315 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x11 true)))
 (let (($x41 (= $x277 true)))
 (let (($x201 (= $x41 true)))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x371 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv1 32))) (select input.dst.llvm-mem ?x371))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv2 32))) ?x82))))
 (let ((?x158 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (=> $x336 (= ?x158 ?x333)))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x16 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (= $x336 $x75))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x140 (= false false)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x117 (_ bv0 32))))
 (=> $x310 $x140)))))
 ))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x16 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x117 (_ bv0 32))))
 (= $x310 $x31))))))
 ))
 (let (($x372 (and $x417 $x274)))
 (let (($x159 (and $x372 $x88)))
 (let (($x219 (and $x159 $x164)))
 (let (($x380 (= $x219 true)))
 (let (($x270 (= $x380 true)))
 (let (($x421 (= $x270 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x371 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv1 32))) (select input.dst.llvm-mem ?x371))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv2 32))) ?x82))))
 (let ((?x269 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x66 (_ bv1 32))))
 (=> $x42 (= ?x269 ?x333)))))))))
 ))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x16 (_ bv1 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x66 (_ bv1 32))))
 (= $x42 $x75))))))
 ))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x140 (= false false)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x66 (_ bv0 32))))
 (=> $x189 $x140)))))
 ))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x16 (_ bv0 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x66 (_ bv0 32))))
 (= $x189 $x31))))))
 ))
 (let (($x103 (and $x256 $x244)))
 (let (($x133 (and $x103 $x123)))
 (let (($x198 (and $x133 $x275)))
 (let (($x420 (= $x198 true)))
 (let (($x44 (= $x420 true)))
 (let (($x343 (= $x44 true)))
 (let (($x342 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x200 (= $x342 true)))
 (let (($x65 (= $x200 true)))
 (let (($x341 (= $x65 true)))
 (let (($x407 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x407 true)))
 (let (($x48 (= $x182 true)))
 (let (($x279 (= $x48 true)))
 (let (($x349 (= $x109 true)))
 (let (($x36 (= $x349 true)))
 (let (($x292 (= $x36 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x28)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x390 (= (_ bv0 32) ?x155)))
 (let ((?x387 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x387)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (and $x61 $x194)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x422 (and $x284 $x149)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x313 $x412)))
 (let (($x298 (not $x205)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x221 $x370)))
 (let (($x55 (and (not $x135) $x298)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x388 (and $x89 $x7)))
 (let (($x351 (not $x388)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x176 $x153)))
 (let (($x148 (and (not $x375) $x351)))
 (let (($x396 (and (and (and (and (and (and $x148 $x55) $x192) $x95) $x422) $x188) $x390)))
 (let (($x282 (and $x396 $x68)))
 (let (($x389 (= $x282 true)))
 (let (($x398 (= $x389 true)))
 (let (($x64 (= $x398 true)))
 (let (($x402 (and $x64 $x292)))
 (let (($x131 (and $x402 $x279)))
 (let (($x311 (and $x131 $x341)))
 (let (($x12 (and $x311 $x343)))
 (let (($x425 (and $x12 $x421)))
 (let (($x252 (and $x425 $x201)))
 (let (($x59 (and $x252 $x344)))
 (let (($x397 (and $x59 $x105)))
 (let (($x405 (and $x397 $x120)))
 (let (($x17 (and $x405 $x273)))
 (let (($x207 (and $x17 $x307)))
 (let (($x319 (and $x207 $x259)))
 (let ((?x180 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (and (bvuge ?x180 (_ bv1 32)) $x319)))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x158 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (=> $x336 (= ?x158 ?x269)))))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x66 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (= $x336 $x42))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x66 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x117 (_ bv0 32))))
 (= $x310 $x189))))))
 ))
 (let (($x419 (and $x230 $x274)))
 (let (($x258 (and $x419 $x318)))
 (let (($x240 (and $x258 $x168)))
 (let (($x228 (and $x240 $x383)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x399 (and $x94 $x228)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x84 (and $x71 $x399)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x18 (and $x243 $x84)))
 (let (($x199 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd ?x56 (_ bv3 32))))
 (let (($x367 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x226 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x195 (or false (or false (and (and true (or $x196 $x226)) (or $x367 $x199))))))
 (let (($x35 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) $x195)))
 (let (($x254 (=> (and $x109 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) $x195)))
 (let (($x410 (and $x254 $x18)))
 (let (($x227 (=> $x410 $x309)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x141 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x56 (bvadd input.dst.llvm-%x ?x141)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x138))))
 (let ((?x245 (bvadd input.dst.llvm-%ret.0.Lfor.cond%1%bbentry ?x234)))
 (let ((?x102 (bvadd input.spec-%var-ret-0.L2%7%bbentry (input.spec-%var-x-0.L2%7%bbentry.1.1 input.spec-%var-i-0.L2%7%bbentry))))
 (let ((?x43 (bvmul (_ bv4294967295 32) ?x102)))
 (let ((?x144 (bvneg ?x43)))
 (let (($x129 (= ?x144 ?x245)))
 (let (($x309 (= $x129 true)))
 (let ((?x354 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x202 (bvneg ?x354)))
 (let (($x321 (= ?x202 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x323 (= $x321 true)))
 (let (($x259 (= $x323 true)))
 (let ((?x348 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x119 (= (_ bv0 2) ?x348)))
 (let (($x322 (= $x119 true)))
 (let (($x307 (= $x322 true)))
 (let ((?x304 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x325 (bvneg ?x304)))
 (let (($x267 (= ?x325 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x224 (= $x267 true)))
 (let (($x273 (= $x224 true)))
 (let (($x172 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x111 (= $x172 true)))
 (let (($x86 (= $x111 true)))
 (let (($x120 (= $x86 true)))
 (let (($x263 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x203 (= $x263 true)))
 (let (($x5 (= $x203 true)))
 (let (($x105 (= $x5 true)))
 (let (($x332 (ite (bvsge ?x141 (_ bv0 32)) (bvuge ?x56 (bvsub ?x56 ?x141)) (bvult ?x56 (bvsub ?x56 ?x141)))))
 (let (($x339 (bvslt input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let ((?x60 (ite $x339 (_ bv4294967295 32) (_ bv0 32))))
 (let ((?x143 ((_ sign_extend 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x368 (bvmul (_ bv4 64) ?x143)))
 (let ((?x9 ((_ extract 63 32) ?x368)))
 (let (($x114 (= ?x9 ?x60)))
 (let (($x126 (and $x114 $x332)))
 (let (($x40 (= (bvand ?x56 (_ bv4294967292 32)) ?x56)))
 (let (($x127 (and $x40 $x126)))
 (let (($x340 (= true $x127)))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x218 (=> $x109 $x340)))
 (let (($x34 (= $x218 true)))
 (let (($x315 (= $x34 true)))
 (let (($x344 (= $x315 true)))
 (let (($x11 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x277 (= $x11 true)))
 (let (($x41 (= $x277 true)))
 (let (($x201 (= $x41 true)))
 (let (($x164 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x371 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv1 32))) (select input.dst.llvm-mem ?x371))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv2 32))) ?x82))))
 (let ((?x158 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (=> $x336 (= ?x158 ?x333)))))))))
 ))
 (let (($x88 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x16 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (= $x336 $x75))))))
 ))
 (let (($x274 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x140 (= false false)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x117 (_ bv0 32))))
 (=> $x310 $x140)))))
 ))
 (let (($x417 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x16 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x117 (_ bv0 32))))
 (= $x310 $x31))))))
 ))
 (let (($x372 (and $x417 $x274)))
 (let (($x159 (and $x372 $x88)))
 (let (($x219 (and $x159 $x164)))
 (let (($x380 (= $x219 true)))
 (let (($x270 (= $x380 true)))
 (let (($x421 (= $x270 true)))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x371 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv1 32))) (select input.dst.llvm-mem ?x371))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv2 32))) ?x82))))
 (let ((?x269 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x66 (_ bv1 32))))
 (=> $x42 (= ?x269 ?x333)))))))))
 ))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (bvuge ?x16 (_ bv1 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x66 (_ bv1 32))))
 (= $x42 $x75))))))
 ))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x140 (= false false)))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x66 (_ bv0 32))))
 (=> $x189 $x140)))))
 ))
 (let (($x256 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x16 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x31 (= ?x16 (_ bv0 32))))
 (let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x66 (_ bv0 32))))
 (= $x189 $x31))))))
 ))
 (let (($x103 (and $x256 $x244)))
 (let (($x133 (and $x103 $x123)))
 (let (($x198 (and $x133 $x275)))
 (let (($x420 (= $x198 true)))
 (let (($x44 (= $x420 true)))
 (let (($x343 (= $x44 true)))
 (let (($x342 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x200 (= $x342 true)))
 (let (($x65 (= $x200 true)))
 (let (($x341 (= $x65 true)))
 (let (($x407 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x182 (= $x407 true)))
 (let (($x48 (= $x182 true)))
 (let (($x279 (= $x48 true)))
 (let (($x349 (= $x109 true)))
 (let (($x36 (= $x349 true)))
 (let (($x292 (= $x36 true)))
 (let ((?x28 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x68 (= (_ bv0 32) ?x28)))
 (let ((?x155 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x390 (= (_ bv0 32) ?x155)))
 (let ((?x387 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x188 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x387)))
 (let ((?x125 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x125)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x149 (and $x61 $x194)))
 (let (($x284 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x422 (and $x284 $x149)))
 (let (($x95 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x192 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x313 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x313 $x412)))
 (let (($x298 (not $x205)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x135 (and $x221 $x370)))
 (let (($x55 (and (not $x135) $x298)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x388 (and $x89 $x7)))
 (let (($x351 (not $x388)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x375 (and $x176 $x153)))
 (let (($x148 (and (not $x375) $x351)))
 (let (($x396 (and (and (and (and (and (and $x148 $x55) $x192) $x95) $x422) $x188) $x390)))
 (let (($x282 (and $x396 $x68)))
 (let (($x389 (= $x282 true)))
 (let (($x398 (= $x389 true)))
 (let (($x64 (= $x398 true)))
 (let (($x402 (and $x64 $x292)))
 (let (($x131 (and $x402 $x279)))
 (let (($x311 (and $x131 $x341)))
 (let (($x12 (and $x311 $x343)))
 (let (($x425 (and $x12 $x421)))
 (let (($x252 (and $x425 $x201)))
 (let (($x59 (and $x252 $x344)))
 (let (($x397 (and $x59 $x105)))
 (let (($x405 (and $x397 $x120)))
 (let (($x17 (and $x405 $x273)))
 (let (($x207 (and $x17 $x307)))
 (let (($x319 (and $x207 $x259)))
 (let ((?x180 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x383 (and (bvuge ?x180 (_ bv1 32)) $x319)))
 (let (($x168 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x269 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x158 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (=> $x336 (= ?x158 ?x269)))))))
 ))
 (let (($x318 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x42 (bvuge ?x66 (_ bv1 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x336 (bvuge ?x117 (_ bv1 32))))
 (= $x336 $x42))))))
 ))
 (let (($x230 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x66 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x189 (= ?x66 (_ bv0 32))))
 (let ((?x117 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x310 (= ?x117 (_ bv0 32))))
 (= $x310 $x189))))))
 ))
 (let (($x419 (and $x230 $x274)))
 (let (($x258 (and $x419 $x318)))
 (let (($x240 (and $x258 $x168)))
 (let (($x228 (and $x240 $x383)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x399 (and $x94 $x228)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x84 (and $x71 $x399)))
 (let (($x243 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x18 (and $x243 $x84)))
 (let (($x199 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x174 (bvadd ?x56 (_ bv3 32))))
 (let (($x367 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x174)))
 (let (($x226 (bvugt ?x56 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x196 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x174)))
 (let (($x195 (or false (or false (and (and true (or $x196 $x226)) (or $x367 $x199))))))
 (let (($x35 (=> (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32))) $x195)))
 (let (($x254 (=> (and $x109 (bvule ?x56 (bvsub (bvadd ?x56 (_ bv4 32)) (_ bv1 32)))) $x195)))
 (let (($x410 (and $x254 $x18)))
 (let (($x227 (=> $x410 $x309)))
 (not $x227)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (not $x109)))
 (let (($x112 (or $x152 (bvuge ?x183 (_ bv1 32)))))
 (let (($x400 (= $x112 true)))
 (let (($x337 (= $x400 true)))
 (let ((?x236 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x406 (bvneg ?x236)))
 (let (($x285 (= ?x406 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x285 true)))
 (let (($x108 (= $x96 true)))
 (let (($x363 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x121 (= $x363 true)))
 (let (($x217 (= $x121 true)))
 (let (($x54 (= $x217 true)))
 (let (($x231 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x231 true)))
 (let (($x301 (= $x253 true)))
 (let (($x374 (= $x301 true)))
 (let (($x347 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x326 (= $x347 true)))
 (let (($x51 (= $x326 true)))
 (let (($x233 (= $x51 true)))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x8))))
 (let ((?x402 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (=> $x23 (= ?x402 ?x100)))))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x239 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (= $x23 $x303))))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x313 (_ bv0 32))))
 (=> $x412 $x55)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x239 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x313 (_ bv0 32))))
 (= $x412 $x266))))))
 ))
 (let (($x79 (and $x46 $x192)))
 (let (($x24 (and $x79 $x403)))
 (let (($x157 (and $x24 $x122)))
 (let (($x276 (= $x157 true)))
 (let (($x145 (= $x276 true)))
 (let (($x327 (= $x145 true)))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x8))))
 (let ((?x292 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x370 (_ bv1 32))))
 (=> $x188 (= ?x292 ?x100)))))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x239 (_ bv1 32))))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x370 (_ bv1 32))))
 (= $x188 $x303))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x370 (_ bv0 32))))
 (=> $x135 $x55)))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x239 (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x370 (_ bv0 32))))
 (= $x135 $x266))))))
 ))
 (let (($x204 (and $x299 $x248)))
 (let (($x229 (and $x204 $x353)))
 (let (($x160 (and $x229 $x186)))
 (let (($x6 (= $x160 true)))
 (let (($x335 (= $x6 true)))
 (let (($x118 (= $x335 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x368 (= $x143 true)))
 (let (($x9 (= $x368 true)))
 (let (($x339 (= $x9 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x190 (= $x252 true)))
 (let (($x212 (= $x190 true)))
 (let (($x40 (= $x212 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x90)))
 (let ((?x417 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x372 (= (_ bv0 32) ?x417)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x420 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x275 $x420)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (and $x381 $x44)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x302 $x171)))
 (let (($x15 (not $x169)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x371 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x371 $x223)))
 (let (($x146 (and (not $x280) $x15)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x75 $x57)))
 (let (($x133 (not $x123)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x178 $x244)))
 (let (($x316 (and (not $x103) $x133)))
 (let (($x380 (and (and (and (and (and (and $x316 $x146) $x251) $x104) $x343) $x170) $x372)))
 (let (($x270 (and $x380 $x88)))
 (let (($x421 (= $x270 true)))
 (let (($x425 (= $x421 true)))
 (let (($x11 (= $x425 true)))
 (let ((?x329 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x329)))
 (let (($x31 (= $x16 true)))
 (let (($x324 (= $x31 true)))
 (let ((?x342 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x200 (bvneg ?x342)))
 (let (($x341 (= ?x200 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x341 true)))
 (let (($x173 (= $x311 true)))
 (let (($x256 (and $x173 $x324)))
 (let (($x277 (and $x256 $x11)))
 (let (($x166 (and $x277 $x40)))
 (let (($x268 (and $x166 $x339)))
 (let (($x210 (and $x268 $x118)))
 (let (($x232 (and $x210 $x327)))
 (let (($x418 (and $x232 $x233)))
 (let (($x287 (and $x418 $x374)))
 (let (($x356 (and $x287 $x54)))
 (let (($x295 (and $x356 $x108)))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x402 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (=> $x23 (= ?x402 ?x292)))))))
 ))
 (let (($x390 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x370 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (= $x23 $x188))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x370 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x313 (_ bv0 32))))
 (= $x412 $x135))))))
 ))
 (let (($x150 (and $x298 $x192)))
 (let (($x396 (and $x150 $x390)))
 (let (($x48 (and $x396 $x182)))
 (let (($x175 (and $x48 $x295)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x99 (and $x98 $x175)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x238 (and $x94 $x99)))
 (let (($x404 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x373 (and $x404 $x238)))
 (let ((?x56 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x213 (bvadd input.dst.llvm-%x ?x56)))
 (let (($x167 (bvugt ?x213 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd ?x213 (_ bv3 32))))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x70 (bvugt ?x213 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x359 (or false (or false (and (and true (or $x308 $x70)) (or $x361 $x167))))))
 (let (($x62 (=> (bvule ?x213 (bvsub (bvadd ?x213 (_ bv4 32)) (_ bv1 32))) $x359)))
 (let (($x206 (=> (and $x109 (bvule ?x213 (bvsub (bvadd ?x213 (_ bv4 32)) (_ bv1 32)))) $x359)))
 (let (($x272 (and $x206 $x373)))
 (let (($x355 (=> $x272 $x337)))
 (not $x355))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x183 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x152 (not $x109)))
 (let (($x112 (or $x152 (bvuge ?x183 (_ bv1 32)))))
 (let (($x400 (= $x112 true)))
 (let (($x337 (= $x400 true)))
 (let ((?x236 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x406 (bvneg ?x236)))
 (let (($x285 (= ?x406 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x96 (= $x285 true)))
 (let (($x108 (= $x96 true)))
 (let (($x363 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x121 (= $x363 true)))
 (let (($x217 (= $x121 true)))
 (let (($x54 (= $x217 true)))
 (let (($x231 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x253 (= $x231 true)))
 (let (($x301 (= $x253 true)))
 (let (($x374 (= $x301 true)))
 (let (($x347 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x326 (= $x347 true)))
 (let (($x51 (= $x326 true)))
 (let (($x233 (= $x51 true)))
 (let (($x122 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x8))))
 (let ((?x402 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (=> $x23 (= ?x402 ?x100)))))))))
 ))
 (let (($x403 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x239 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (= $x23 $x303))))))
 ))
 (let (($x192 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x313 (_ bv0 32))))
 (=> $x412 $x55)))))
 ))
 (let (($x46 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x239 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x313 (_ bv0 32))))
 (= $x412 $x266))))))
 ))
 (let (($x79 (and $x46 $x192)))
 (let (($x24 (and $x79 $x403)))
 (let (($x157 (and $x24 $x122)))
 (let (($x276 (= $x157 true)))
 (let (($x145 (= $x276 true)))
 (let (($x327 (= $x145 true)))
 (let (($x186 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x393 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x8))))
 (let ((?x292 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x370 (_ bv1 32))))
 (=> $x188 (= ?x292 ?x100)))))))))
 ))
 (let (($x353 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x239 (_ bv1 32))))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x370 (_ bv1 32))))
 (= $x188 $x303))))))
 ))
 (let (($x248 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x55 (= false false)))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x370 (_ bv0 32))))
 (=> $x135 $x55)))))
 ))
 (let (($x299 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x239 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x266 (= ?x239 (_ bv0 32))))
 (let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x370 (_ bv0 32))))
 (= $x135 $x266))))))
 ))
 (let (($x204 (and $x299 $x248)))
 (let (($x229 (and $x204 $x353)))
 (let (($x160 (and $x229 $x186)))
 (let (($x6 (= $x160 true)))
 (let (($x335 (= $x6 true)))
 (let (($x118 (= $x335 true)))
 (let (($x143 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x368 (= $x143 true)))
 (let (($x9 (= $x368 true)))
 (let (($x339 (= $x9 true)))
 (let (($x252 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x190 (= $x252 true)))
 (let (($x212 (= $x190 true)))
 (let (($x40 (= $x212 true)))
 (let ((?x90 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x88 (= (_ bv0 32) ?x90)))
 (let ((?x417 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x372 (= (_ bv0 32) ?x417)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let ((?x198 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x420 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x44 (and $x275 $x420)))
 (let (($x381 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x343 (and $x381 $x44)))
 (let (($x104 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x251 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x302 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x169 (and $x302 $x171)))
 (let (($x15 (not $x169)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x371 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x280 (and $x371 $x223)))
 (let (($x146 (and (not $x280) $x15)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x123 (and $x75 $x57)))
 (let (($x133 (not $x123)))
 (let (($x244 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x178 $x244)))
 (let (($x316 (and (not $x103) $x133)))
 (let (($x380 (and (and (and (and (and (and $x316 $x146) $x251) $x104) $x343) $x170) $x372)))
 (let (($x270 (and $x380 $x88)))
 (let (($x421 (= $x270 true)))
 (let (($x425 (= $x421 true)))
 (let (($x11 (= $x425 true)))
 (let ((?x329 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x16 (= (_ bv0 2) ?x329)))
 (let (($x31 (= $x16 true)))
 (let (($x324 (= $x31 true)))
 (let ((?x342 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x200 (bvneg ?x342)))
 (let (($x341 (= ?x200 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x311 (= $x341 true)))
 (let (($x173 (= $x311 true)))
 (let (($x256 (and $x173 $x324)))
 (let (($x277 (and $x256 $x11)))
 (let (($x166 (and $x277 $x40)))
 (let (($x268 (and $x166 $x339)))
 (let (($x210 (and $x268 $x118)))
 (let (($x232 (and $x210 $x327)))
 (let (($x418 (and $x232 $x233)))
 (let (($x287 (and $x418 $x374)))
 (let (($x356 (and $x287 $x54)))
 (let (($x295 (and $x356 $x108)))
 (let (($x182 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x402 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (=> $x23 (= ?x402 ?x292)))))))
 ))
 (let (($x390 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x188 (bvuge ?x370 (_ bv1 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x313 (_ bv1 32))))
 (= $x23 $x188))))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x370 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x135 (= ?x370 (_ bv0 32))))
 (let ((?x313 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x412 (= ?x313 (_ bv0 32))))
 (= $x412 $x135))))))
 ))
 (let (($x150 (and $x298 $x192)))
 (let (($x396 (and $x150 $x390)))
 (let (($x48 (and $x396 $x182)))
 (let (($x175 (and $x48 $x295)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x99 (and $x98 $x175)))
 (let (($x94 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x238 (and $x94 $x99)))
 (let (($x404 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x373 (and $x404 $x238)))
 (let ((?x56 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x213 (bvadd input.dst.llvm-%x ?x56)))
 (let (($x167 (bvugt ?x213 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x116 (bvadd ?x213 (_ bv3 32))))
 (let (($x361 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x70 (bvugt ?x213 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x308 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x116)))
 (let (($x359 (or false (or false (and (and true (or $x308 $x70)) (or $x361 $x167))))))
 (let (($x62 (=> (bvule ?x213 (bvsub (bvadd ?x213 (_ bv4 32)) (_ bv1 32))) $x359)))
 (let (($x206 (=> (and $x109 (bvule ?x213 (bvsub (bvadd ?x213 (_ bv4 32)) (_ bv1 32)))) $x359)))
 (let (($x272 (and $x206 $x373)))
 (let (($x355 (=> $x272 $x337)))
 (not $x355))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (not $x109)))
 (let (($x149 (= $x194 false)))
 (let (($x77 (= $x149 true)))
 (let ((?x255 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x33 (bvneg ?x255)))
 (let (($x180 (= ?x33 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x180 true)))
 (let (($x176 (= $x209 true)))
 (let (($x101 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x101 true)))
 (let (($x137 (= $x240 true)))
 (let (($x47 (= $x137 true)))
 (let (($x350 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x350 true)))
 (let (($x179 (= $x53 true)))
 (let (($x398 (= $x179 true)))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x293))))
 (let ((?x380 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (=> $x427 (= ?x380 ?x331)))))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x267 (_ bv1 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (= $x427 $x296))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x133 (= false false)))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x220 (_ bv0 32))))
 (=> $x75 $x133)))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x267 (_ bv0 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x220 (_ bv0 32))))
 (= $x75 $x304))))))
 ))
 (let (($x422 (and $x69 $x223)))
 (let (($x68 (and $x422 $x28)))
 (let (($x320 (and $x68 $x358)))
 (let (($x265 (= $x320 true)))
 (let (($x385 (= $x265 true)))
 (let (($x249 (= $x385 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x293))))
 (let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x178 (_ bv1 32))))
 (=> $x104 (= ?x372 ?x331)))))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x267 (_ bv1 32))))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x178 (_ bv1 32))))
 (= $x104 $x296))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x133 (= false false)))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x178 (_ bv0 32))))
 (=> $x244 $x133)))))
 ))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x267 (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x178 (_ bv0 32))))
 (= $x244 $x304))))))
 ))
 (let (($x230 (and $x50 $x225)))
 (let (($x202 (and $x230 $x354)))
 (let (($x395 (and $x202 $x95)))
 (let (($x284 (= $x395 true)))
 (let (($x80 (= $x284 true)))
 (let (($x193 (= $x80 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x301 (= $x253 true)))
 (let (($x374 (= $x301 true)))
 (let (($x287 (= $x374 true)))
 (let ((?x290 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x290)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x24)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x118 $x151)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x335 $x46)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x49 $x215)))
 (let (($x294 (not $x8)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x181 $x305)))
 (let (($x424 (and (not $x97) $x294)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (and $x142 $x20)))
 (let (($x264 (not $x393)))
 (let (($x353 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x106 $x353)))
 (let (($x34 (and (not $x229) $x264)))
 (let (($x347 (and (and (and (and (and (and $x34 $x424) $x186) $x6) $x79) $x403) $x147)))
 (let (($x326 (and $x347 $x122)))
 (let (($x51 (= $x326 true)))
 (let (($x233 (= $x51 true)))
 (let (($x418 (= $x233 true)))
 (let (($x299 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x299 true)))
 (let (($x248 (= $x67 true)))
 (let (($x204 (= $x248 true)))
 (let ((?x129 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x227 (= (_ bv0 2) ?x129)))
 (let (($x239 (= $x227 true)))
 (let (($x266 (= $x239 true)))
 (let ((?x40 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x166 (bvneg ?x40)))
 (let (($x368 (= ?x166 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x368 true)))
 (let (($x339 (= $x9 true)))
 (let (($x277 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x41 (= $x277 true)))
 (let (($x201 (= $x41 true)))
 (let (($x252 (= $x201 true)))
 (let (($x268 (and $x252 $x339)))
 (let (($x32 (and $x268 $x266)))
 (let (($x303 (and $x32 $x204)))
 (let (($x231 (and $x303 $x418)))
 (let (($x363 (and $x231 $x287)))
 (let (($x242 (and $x363 $x193)))
 (let (($x392 (and $x242 $x249)))
 (let (($x415 (and $x392 $x398)))
 (let (($x168 (and $x415 $x47)))
 (let (($x89 (and $x168 $x176)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x380 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (=> $x427 (= ?x380 ?x372)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x178 (_ bv1 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (= $x427 $x104))))))
 ))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x178 (_ bv0 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x220 (_ bv0 32))))
 (= $x75 $x244))))))
 ))
 (let (($x280 (and $x123 $x223)))
 (let (($x198 (and $x280 $x275)))
 (let (($x421 (and $x198 $x270)))
 (let (($x7 (and $x421 $x89)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x388 (and $x262 $x7)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x351 (and $x98 $x388)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x52 $x351)))
 (let ((?x213 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvadd input.dst.llvm-%x ?x213)))
 (let (($x254 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x367 (bvadd ?x177 (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x367)))
 (let (($x199 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x334 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x367)))
 (let (($x281 (or false (or false (and (and true (or $x334 $x199)) (or $x35 $x254))))))
 (let (($x71 (=> (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32))) $x281)))
 (let (($x174 (=> (and $x109 (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32)))) $x281)))
 (let (($x125 (and $x174 $x61)))
 (let (($x387 (=> $x125 $x77)))
 (not $x387))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x109 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x194 (not $x109)))
 (let (($x149 (= $x194 false)))
 (let (($x77 (= $x149 true)))
 (let ((?x255 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x33 (bvneg ?x255)))
 (let (($x180 (= ?x33 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x209 (= $x180 true)))
 (let (($x176 (= $x209 true)))
 (let (($x101 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x240 (= $x101 true)))
 (let (($x137 (= $x240 true)))
 (let (($x47 (= $x137 true)))
 (let (($x350 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x53 (= $x350 true)))
 (let (($x179 (= $x53 true)))
 (let (($x398 (= $x179 true)))
 (let (($x358 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x293))))
 (let ((?x380 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (=> $x427 (= ?x380 ?x331)))))))))
 ))
 (let (($x28 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x267 (_ bv1 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (= $x427 $x296))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x133 (= false false)))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x220 (_ bv0 32))))
 (=> $x75 $x133)))))
 ))
 (let (($x69 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x267 (_ bv0 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x220 (_ bv0 32))))
 (= $x75 $x304))))))
 ))
 (let (($x422 (and $x69 $x223)))
 (let (($x68 (and $x422 $x28)))
 (let (($x320 (and $x68 $x358)))
 (let (($x265 (= $x320 true)))
 (let (($x385 (= $x265 true)))
 (let (($x249 (= $x385 true)))
 (let (($x95 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x91 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv1 32))) (select input.dst.llvm-mem ?x91))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x91 (_ bv2 32))) ?x293))))
 (let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x178 (_ bv1 32))))
 (=> $x104 (= ?x372 ?x331)))))))))
 ))
 (let (($x354 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x296 (bvuge ?x267 (_ bv1 32))))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x178 (_ bv1 32))))
 (= $x104 $x296))))))
 ))
 (let (($x225 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x133 (= false false)))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x178 (_ bv0 32))))
 (=> $x244 $x133)))))
 ))
 (let (($x50 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x267 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x304 (= ?x267 (_ bv0 32))))
 (let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x178 (_ bv0 32))))
 (= $x244 $x304))))))
 ))
 (let (($x230 (and $x50 $x225)))
 (let (($x202 (and $x230 $x354)))
 (let (($x395 (and $x202 $x95)))
 (let (($x284 (= $x395 true)))
 (let (($x80 (= $x284 true)))
 (let (($x193 (= $x80 true)))
 (let (($x253 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x301 (= $x253 true)))
 (let (($x374 (= $x301 true)))
 (let (($x287 (= $x374 true)))
 (let ((?x290 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x122 (= (_ bv0 32) ?x290)))
 (let ((?x24 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x147 (= (_ bv0 32) ?x24)))
 (let ((?x72 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x210 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x210)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x118 $x151)))
 (let (($x335 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x335 $x46)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x8 (and $x49 $x215)))
 (let (($x294 (not $x8)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x181 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x181 $x305)))
 (let (($x424 (and (not $x97) $x294)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (and $x142 $x20)))
 (let (($x264 (not $x393)))
 (let (($x353 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x229 (and $x106 $x353)))
 (let (($x34 (and (not $x229) $x264)))
 (let (($x347 (and (and (and (and (and (and $x34 $x424) $x186) $x6) $x79) $x403) $x147)))
 (let (($x326 (and $x347 $x122)))
 (let (($x51 (= $x326 true)))
 (let (($x233 (= $x51 true)))
 (let (($x418 (= $x233 true)))
 (let (($x299 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x67 (= $x299 true)))
 (let (($x248 (= $x67 true)))
 (let (($x204 (= $x248 true)))
 (let ((?x129 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x227 (= (_ bv0 2) ?x129)))
 (let (($x239 (= $x227 true)))
 (let (($x266 (= $x239 true)))
 (let ((?x40 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x166 (bvneg ?x40)))
 (let (($x368 (= ?x166 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x9 (= $x368 true)))
 (let (($x339 (= $x9 true)))
 (let (($x277 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x41 (= $x277 true)))
 (let (($x201 (= $x41 true)))
 (let (($x252 (= $x201 true)))
 (let (($x268 (and $x252 $x339)))
 (let (($x32 (and $x268 $x266)))
 (let (($x303 (and $x32 $x204)))
 (let (($x231 (and $x303 $x418)))
 (let (($x363 (and $x231 $x287)))
 (let (($x242 (and $x363 $x193)))
 (let (($x392 (and $x242 $x249)))
 (let (($x415 (and $x392 $x398)))
 (let (($x168 (and $x415 $x47)))
 (let (($x89 (and $x168 $x176)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x372 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x380 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (=> $x427 (= ?x380 ?x372)))))))
 ))
 (let (($x275 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x178 (_ bv1 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x427 (bvuge ?x220 (_ bv1 32))))
 (= $x427 $x104))))))
 ))
 (let (($x123 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x178 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x244 (= ?x178 (_ bv0 32))))
 (let ((?x220 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x75 (= ?x220 (_ bv0 32))))
 (= $x75 $x244))))))
 ))
 (let (($x280 (and $x123 $x223)))
 (let (($x198 (and $x280 $x275)))
 (let (($x421 (and $x198 $x270)))
 (let (($x7 (and $x421 $x89)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x388 (and $x262 $x7)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x351 (and $x98 $x388)))
 (let (($x52 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x61 (and $x52 $x351)))
 (let ((?x213 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x177 (bvadd input.dst.llvm-%x ?x213)))
 (let (($x254 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x367 (bvadd ?x177 (_ bv3 32))))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x367)))
 (let (($x199 (bvugt ?x177 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x334 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x367)))
 (let (($x281 (or false (or false (and (and true (or $x334 $x199)) (or $x35 $x254))))))
 (let (($x71 (=> (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32))) $x281)))
 (let (($x174 (=> (and $x109 (bvule ?x177 (bvsub (bvadd ?x177 (_ bv4 32)) (_ bv1 32)))) $x281)))
 (let (($x125 (and $x174 $x61)))
 (let (($x387 (=> $x125 $x77)))
 (not $x387))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x3fec1c7a)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x3fec1c7a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd47081f8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10b56008)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x3fec1c7a)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10b5600b)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd47081fb)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10b56008)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd47081f8)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x3fec1c7a x!0)
         (ite (bvule #x3fec1c7b x!0) #x3fec1c7b #x3fec1c7a)
         #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!10 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!10 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 x!0)
             a!1
             (input.spec-%var-x-1.1.1 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000710)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!10))
  (define-fun input.dst.llvm-%n () (_ BitVec 32)
    #x4d85d8cb)
  (define-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x4d85d8cb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32)
    #x4d85d8cb)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000713)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000710)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x4d85d8cb x!0)
         (ite (bvule #x4d85d8cc x!0) #x4d85d8cc #x4d85d8cb)
         #x00000000))
  (define-fun k!10 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((x!0 (_ BitVec 32))) (_ BitVec
     32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!10 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-x-1.0.1!12 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-1.0.1!12 (k!11 x!0)))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1!13 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-x-0.L2%7%bbentry.0.1!13 (k!11 x!0)))
  (define-fun input.spec-%var-x-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!10 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!10 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!10 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-x-1.0.1 x!0)
             a!1
             (input.spec-%var-x-0.L2%7%bbentry.1.1 x!0)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (or $x141 (= ?x291 (_ bv0 32)))))
 (let (($x245 (= $x271 true)))
 (let (($x297 (= $x245 true)))
 (let ((?x15 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x146 (bvneg ?x15)))
 (let (($x159 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x159 true)))
 (let (($x364 (= $x82 true)))
 (let (($x65 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x156 (= $x65 true)))
 (let (($x329 (= $x156 true)))
 (let (($x16 (= $x329 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x279 (= $x182 true)))
 (let (($x131 (= $x279 true)))
 (let (($x342 (= $x131 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x250 true)))
 (let (($x48 (= $x27 true)))
 (let (($x289 (= $x48 true)))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x405))))
 (let ((?x335 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (=> $x100 (= ?x335 ?x171)))))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x258 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (= $x100 $x113))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x227 (_ bv0 32))))
 (=> $x239 $x299)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x258 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x227 (_ bv0 32))))
 (= $x239 $x30))))))
 ))
 (let (($x44 (and $x420 $x204)))
 (let (($x18 (and $x44 $x410)))
 (let (($x314 (and $x18 $x84)))
 (let (($x319 (= $x314 true)))
 (let (($x228 (= $x319 true)))
 (let (($x43 (= $x228 true)))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x405))))
 (let ((?x145 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x268 (_ bv1 32))))
 (=> $x97 (= ?x145 ?x171)))))))))
 ))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x258 (_ bv1 32))))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x268 (_ bv1 32))))
 (= $x97 $x113))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x268 (_ bv0 32))))
 (=> $x309 $x299)))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x258 (_ bv0 32))))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x268 (_ bv0 32))))
 (= $x309 $x30))))))
 ))
 (let (($x23 (and $x298 $x150)))
 (let (($x340 (and $x23 $x127)))
 (let (($x274 (and $x340 $x419)))
 (let (($x336 (= $x274 true)))
 (let (($x42 (= $x336 true)))
 (let (($x19 (= $x42 true)))
 (let (($x265 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x385 (= $x265 true)))
 (let (($x249 (= $x385 true)))
 (let (($x392 (= $x249 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x362 (= $x68 true)))
 (let (($x76 (= $x362 true)))
 (let (($x358 (= $x76 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x331 (= (_ bv0 32) ?x138)))
 (let ((?x378 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x378)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x375 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x234)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (and $x214 $x99)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x91 $x260)))
 (let (($x278 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x50 $x197)))
 (let (($x230 (not $x225)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x267 $x304)))
 (let (($x207 (and (not $x224) $x230)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x374 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x374 $x287)))
 (let (($x17 (not $x363)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x231 $x253)))
 (let (($x325 (and (not $x301) $x17)))
 (let (($x80 (and (and (and (and (and (and $x325 $x207) $x202) $x278) $x241) $x375) $x293)))
 (let (($x193 (and $x80 $x331)))
 (let (($x242 (= $x193 true)))
 (let (($x312 (= $x242 true)))
 (let (($x69 (= $x312 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x326 (= (_ bv0 2) ?x122)))
 (let (($x51 (= $x326 true)))
 (let (($x233 (= $x51 true)))
 (let ((?x72 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x403 (bvneg ?x72)))
 (let (($x24 (= ?x403 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x24 true)))
 (let (($x347 (= $x147 true)))
 (let (($x418 (and $x347 $x233)))
 (let (($x422 (and $x418 $x69)))
 (let (($x320 (and $x422 $x358)))
 (let (($x350 (and $x320 $x392)))
 (let (($x251 (and $x350 $x19)))
 (let (($x12 (and $x251 $x43)))
 (let (($x407 (and $x12 $x289)))
 (let (($x200 (and $x407 $x342)))
 (let (($x31 (and $x200 $x16)))
 (let (($x333 (and $x31 $x364)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x335 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (=> $x100 (= ?x335 ?x145)))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x268 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (= $x100 $x97))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x268 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x227 (_ bv0 32))))
 (= $x239 $x309))))))
 ))
 (let (($x303 (and $x32 $x204)))
 (let (($x8 (and $x303 $x215)))
 (let (($x46 (and $x8 $x151)))
 (let (($x343 (and $x46 $x333)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x164 (and $x103 $x343)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x170 (and $x262 $x164)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x219 (and $x37 $x170)))
 (let ((?x177 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x196 (bvadd input.dst.llvm-%x ?x177)))
 (let (($x206 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x361 (bvadd ?x196 (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x167 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x361)))
 (let (($x243 (or false (or false (and (and true (or $x132 $x167)) (or $x62 $x206))))))
 (let (($x94 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) $x243)))
 (let (($x116 (=> (and $x141 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) $x243)))
 (let (($x417 (and $x116 $x219)))
 (let (($x237 (=> $x417 $x297)))
 (not $x237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x291 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x271 (or $x141 (= ?x291 (_ bv0 32)))))
 (let (($x245 (= $x271 true)))
 (let (($x297 (= $x245 true)))
 (let ((?x15 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x146 (bvneg ?x15)))
 (let (($x159 (= ?x146 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x82 (= $x159 true)))
 (let (($x364 (= $x82 true)))
 (let (($x65 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x156 (= $x65 true)))
 (let (($x329 (= $x156 true)))
 (let (($x16 (= $x329 true)))
 (let (($x182 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x279 (= $x182 true)))
 (let (($x131 (= $x279 true)))
 (let (($x342 (= $x131 true)))
 (let (($x250 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x27 (= $x250 true)))
 (let (($x48 (= $x27 true)))
 (let (($x289 (= $x48 true)))
 (let (($x84 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x405))))
 (let ((?x335 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (=> $x100 (= ?x335 ?x171)))))))))
 ))
 (let (($x410 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x258 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (= $x100 $x113))))))
 ))
 (let (($x204 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x227 (_ bv0 32))))
 (=> $x239 $x299)))))
 ))
 (let (($x420 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x258 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x227 (_ bv0 32))))
 (= $x239 $x30))))))
 ))
 (let (($x44 (and $x420 $x204)))
 (let (($x18 (and $x44 $x410)))
 (let (($x314 (and $x18 $x84)))
 (let (($x319 (= $x314 true)))
 (let (($x228 (= $x319 true)))
 (let (($x43 (= $x228 true)))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x173 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x405))))
 (let ((?x145 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x268 (_ bv1 32))))
 (=> $x97 (= ?x145 ?x171)))))))))
 ))
 (let (($x127 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x258 (_ bv1 32))))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x268 (_ bv1 32))))
 (= $x97 $x113))))))
 ))
 (let (($x150 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x299 (= false false)))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x268 (_ bv0 32))))
 (=> $x309 $x299)))))
 ))
 (let (($x298 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x258 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x30 (= ?x258 (_ bv0 32))))
 (let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x268 (_ bv0 32))))
 (= $x309 $x30))))))
 ))
 (let (($x23 (and $x298 $x150)))
 (let (($x340 (and $x23 $x127)))
 (let (($x274 (and $x340 $x419)))
 (let (($x336 (= $x274 true)))
 (let (($x42 (= $x336 true)))
 (let (($x19 (= $x42 true)))
 (let (($x265 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x385 (= $x265 true)))
 (let (($x249 (= $x385 true)))
 (let (($x392 (= $x249 true)))
 (let (($x68 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x362 (= $x68 true)))
 (let (($x76 (= $x362 true)))
 (let (($x358 (= $x76 true)))
 (let ((?x138 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x331 (= (_ bv0 32) ?x138)))
 (let ((?x378 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x293 (= (_ bv0 32) ?x378)))
 (let ((?x153 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x375 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x153)))
 (let ((?x234 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x234)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x260 (and $x214 $x99)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (and $x91 $x260)))
 (let (($x278 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x50 $x197)))
 (let (($x230 (not $x225)))
 (let (($x304 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x267 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x224 (and $x267 $x304)))
 (let (($x207 (and (not $x224) $x230)))
 (let (($x287 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x374 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x363 (and $x374 $x287)))
 (let (($x17 (not $x363)))
 (let (($x253 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x231 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x231 $x253)))
 (let (($x325 (and (not $x301) $x17)))
 (let (($x80 (and (and (and (and (and (and $x325 $x207) $x202) $x278) $x241) $x375) $x293)))
 (let (($x193 (and $x80 $x331)))
 (let (($x242 (= $x193 true)))
 (let (($x312 (= $x242 true)))
 (let (($x69 (= $x312 true)))
 (let ((?x122 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x326 (= (_ bv0 2) ?x122)))
 (let (($x51 (= $x326 true)))
 (let (($x233 (= $x51 true)))
 (let ((?x72 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x403 (bvneg ?x72)))
 (let (($x24 (= ?x403 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x147 (= $x24 true)))
 (let (($x347 (= $x147 true)))
 (let (($x418 (and $x347 $x233)))
 (let (($x422 (and $x418 $x69)))
 (let (($x320 (and $x422 $x358)))
 (let (($x350 (and $x320 $x392)))
 (let (($x251 (and $x350 $x19)))
 (let (($x12 (and $x251 $x43)))
 (let (($x407 (and $x12 $x289)))
 (let (($x200 (and $x407 $x342)))
 (let (($x31 (and $x200 $x16)))
 (let (($x333 (and $x31 $x364)))
 (let (($x151 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x145 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x335 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (=> $x100 (= ?x335 ?x145)))))))
 ))
 (let (($x215 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x97 (bvuge ?x268 (_ bv1 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x227 (_ bv1 32))))
 (= $x100 $x97))))))
 ))
 (let (($x32 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x268 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x309 (= ?x268 (_ bv0 32))))
 (let ((?x227 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x239 (= ?x227 (_ bv0 32))))
 (= $x239 $x309))))))
 ))
 (let (($x303 (and $x32 $x204)))
 (let (($x8 (and $x303 $x215)))
 (let (($x46 (and $x8 $x151)))
 (let (($x343 (and $x46 $x333)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x164 (and $x103 $x343)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x170 (and $x262 $x164)))
 (let (($x37 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x219 (and $x37 $x170)))
 (let ((?x177 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x196 (bvadd input.dst.llvm-%x ?x177)))
 (let (($x206 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x361 (bvadd ?x196 (_ bv3 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x361)))
 (let (($x167 (bvugt ?x196 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x361)))
 (let (($x243 (or false (or false (and (and true (or $x132 $x167)) (or $x62 $x206))))))
 (let (($x94 (=> (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32))) $x243)))
 (let (($x116 (=> (and $x141 (bvule ?x196 (bvsub (bvadd ?x196 (_ bv4 32)) (_ bv1 32)))) $x243)))
 (let (($x417 (and $x116 $x219)))
 (let (($x237 (=> $x417 $x297)))
 (not $x237)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 213 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x393 (= input.spec-%var-ret-0.L2%7%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x393 true)))
 (let (($x181 (= $x264 true)))
 (let ((?x421 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x90 (bvneg ?x421)))
 (let (($x270 (= ?x90 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x425 (= $x270 true)))
 (let (($x11 (= $x425 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x139)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x315 (= (_ bv0 32) ?x203)))
 (let ((?x294 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x294)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x269)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x365 (and $x115 $x34)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x321 (and $x158 $x365)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x338 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x66 $x338)))
 (let (($x106 (not $x67)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x161 $x117)))
 (let (($x229 (and (not $x114) $x106)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x216 $x310)))
 (let (($x190 (not $x252)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x401 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x401 $x337)))
 (let (($x318 (and (not $x112) $x190)))
 (let (($x332 (and (and (and (and (and (and $x318 $x229) $x188) $x155) $x321) $x424) $x315)))
 (let (($x344 (and $x332 $x59)))
 (let (($x5 (= $x344 true)))
 (let (($x172 (= $x5 true)))
 (let (($x186 (= $x172 true)))
 (let (($x295 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x295 true)))
 (let (($x238 (= $x96 true)))
 (let (($x373 (= $x238 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x54 true)))
 (let (($x152 (= $x285 true)))
 (let (($x272 (= $x152 true)))
 (let ((?x381 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x356 (bvneg ?x381)))
 (let (($x396 (= ?x356 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x396 true)))
 (let (($x402 (= $x292 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (= $x123 true)))
 (let (($x223 (= $x133 true)))
 (let (($x280 (= $x223 true)))
 (let (($x313 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x226))))
 (let ((?x17 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (=> $x290 (= ?x17 ?x209)))))))))
 ))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x329 (_ bv1 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (= $x290 $x257))))))
 ))
 (let (($x335 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x204 (_ bv0 32))))
 (=> $x303 $x49)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x329 (_ bv0 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x204 (_ bv0 32))))
 (= $x303 $x16))))))
 ))
 (let (($x77 (and $x149 $x335)))
 (let (($x85 (and $x77 $x406)))
 (let (($x370 (and $x85 $x313)))
 (let (($x217 (= $x370 true)))
 (let (($x390 (= $x217 true)))
 (let (($x371 (= $x390 true)))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x226))))
 (let ((?x363 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x32 (_ bv1 32))))
 (=> $x347 (= ?x363 ?x209)))))))))
 ))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x329 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x32 (_ bv1 32))))
 (= $x347 $x257))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (= ?x32 (_ bv0 32))))
 (=> $x299 $x49)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x329 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (= ?x32 (_ bv0 32))))
 (= $x299 $x16))))))
 ))
 (let (($x364 (and $x15 $x82)))
 (let (($x297 (and $x364 $x245)))
 (let (($x47 (and $x297 $x255)))
 (let (($x33 (= $x47 true)))
 (let (($x89 (= $x33 true)))
 (let (($x351 (= $x89 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x312)))
 (let (($x422 (= $x69 true)))
 (let (($x39 (= $x422 true)))
 (let (($x378 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x293 (= $x378 true)))
 (let (($x80 (= $x293 true)))
 (let (($x138 (= $x80 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x395 (= $x241 true)))
 (let (($x153 (= $x395 true)))
 (let (($x375 (= $x153 true)))
 (let (($x95 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x95)))
 (let (($x214 (= $x91 true)))
 (let (($x234 (= $x214 true)))
 (let (($x99 (= $x234 true)))
 (let (($x284 (and $x99 $x375)))
 (let (($x331 (and $x284 $x138)))
 (let (($x28 (and $x331 $x39)))
 (let (($x61 (and $x28 $x351)))
 (let (($x57 (and $x61 $x371)))
 (let (($x427 (and $x57 $x280)))
 (let (($x13 (and $x427 $x402)))
 (let (($x183 (and $x13 $x272)))
 (let (($x29 (and $x183 $x373)))
 (let (($x102 (and $x29 $x186)))
 (let (($x277 (and $x102 $x11)))
 (let ((?x201 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (and (= ?x201 (_ bv0 32)) $x277)))
 (let (($x304 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x363 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x17 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (=> $x290 (= ?x17 ?x363)))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x32 (_ bv1 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (= $x290 $x347))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (= ?x32 (_ bv0 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x204 (_ bv0 32))))
 (= $x303 $x299))))))
 ))
 (let (($x145 (and $x97 $x335)))
 (let (($x51 (and $x145 $x326)))
 (let (($x224 (and $x51 $x304)))
 (let (($x143 (and $x224 $x166)))
 (let (($x308 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x368 (and $x308 $x143)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x142 (and $x177 $x368)))
 (let (($x377 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x20 (and $x377 $x142)))
 (let (($x305 (=> $x20 $x181)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x393 (= input.spec-%var-ret-0.L2%7%bbentry input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x264 (= $x393 true)))
 (let (($x181 (= $x264 true)))
 (let ((?x421 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x90 (bvneg ?x421)))
 (let (($x270 (= ?x90 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x425 (= $x270 true)))
 (let (($x11 (= $x425 true)))
 (let ((?x139 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x59 (= (_ bv0 32) ?x139)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x315 (= (_ bv0 32) ?x203)))
 (let ((?x294 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x424 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x294)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x269)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x365 (and $x115 $x34)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x321 (and $x158 $x365)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x188 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x338 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x67 (and $x66 $x338)))
 (let (($x106 (not $x67)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x161 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x114 (and $x161 $x117)))
 (let (($x229 (and (not $x114) $x106)))
 (let (($x310 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x216 $x310)))
 (let (($x190 (not $x252)))
 (let (($x337 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x401 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (and $x401 $x337)))
 (let (($x318 (and (not $x112) $x190)))
 (let (($x332 (and (and (and (and (and (and $x318 $x229) $x188) $x155) $x321) $x424) $x315)))
 (let (($x344 (and $x332 $x59)))
 (let (($x5 (= $x344 true)))
 (let (($x172 (= $x5 true)))
 (let (($x186 (= $x172 true)))
 (let (($x295 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x96 (= $x295 true)))
 (let (($x238 (= $x96 true)))
 (let (($x373 (= $x238 true)))
 (let (($x54 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x285 (= $x54 true)))
 (let (($x152 (= $x285 true)))
 (let (($x272 (= $x152 true)))
 (let ((?x381 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x356 (bvneg ?x381)))
 (let (($x396 (= ?x356 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x292 (= $x396 true)))
 (let (($x402 (= $x292 true)))
 (let (($x123 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x133 (= $x123 true)))
 (let (($x223 (= $x133 true)))
 (let (($x280 (= $x223 true)))
 (let (($x313 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x226))))
 (let ((?x17 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (=> $x290 (= ?x17 ?x209)))))))))
 ))
 (let (($x406 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x329 (_ bv1 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (= $x290 $x257))))))
 ))
 (let (($x335 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x204 (_ bv0 32))))
 (=> $x303 $x49)))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x329 (_ bv0 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x204 (_ bv0 32))))
 (= $x303 $x16))))))
 ))
 (let (($x77 (and $x149 $x335)))
 (let (($x85 (and $x77 $x406)))
 (let (($x370 (and $x85 $x313)))
 (let (($x217 (= $x370 true)))
 (let (($x390 (= $x217 true)))
 (let (($x371 (= $x390 true)))
 (let (($x255 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x226))))
 (let ((?x363 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x32 (_ bv1 32))))
 (=> $x347 (= ?x363 ?x209)))))))))
 ))
 (let (($x245 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x329 (_ bv1 32))))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x32 (_ bv1 32))))
 (= $x347 $x257))))))
 ))
 (let (($x82 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x49 (= false false)))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (= ?x32 (_ bv0 32))))
 (=> $x299 $x49)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x329 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x16 (= ?x329 (_ bv0 32))))
 (let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (= ?x32 (_ bv0 32))))
 (= $x299 $x16))))))
 ))
 (let (($x364 (and $x15 $x82)))
 (let (($x297 (and $x364 $x245)))
 (let (($x47 (and $x297 $x255)))
 (let (($x33 (= $x47 true)))
 (let (($x89 (= $x33 true)))
 (let (($x351 (= $x89 true)))
 (let ((?x312 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x69 (= (_ bv0 2) ?x312)))
 (let (($x422 (= $x69 true)))
 (let (($x39 (= $x422 true)))
 (let (($x378 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x293 (= $x378 true)))
 (let (($x80 (= $x293 true)))
 (let (($x138 (= $x80 true)))
 (let (($x241 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x395 (= $x241 true)))
 (let (($x153 (= $x395 true)))
 (let (($x375 (= $x153 true)))
 (let (($x95 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x91 (not $x95)))
 (let (($x214 (= $x91 true)))
 (let (($x234 (= $x214 true)))
 (let (($x99 (= $x234 true)))
 (let (($x284 (and $x99 $x375)))
 (let (($x331 (and $x284 $x138)))
 (let (($x28 (and $x331 $x39)))
 (let (($x61 (and $x28 $x351)))
 (let (($x57 (and $x61 $x371)))
 (let (($x427 (and $x57 $x280)))
 (let (($x13 (and $x427 $x402)))
 (let (($x183 (and $x13 $x272)))
 (let (($x29 (and $x183 $x373)))
 (let (($x102 (and $x29 $x186)))
 (let (($x277 (and $x102 $x11)))
 (let ((?x201 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 input.spec-%var-i-0.L2%7%bbentry) (_ bv1 32) (_ bv0 32))))
 (let (($x166 (and (= ?x201 (_ bv0 32)) $x277)))
 (let (($x304 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x363 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x17 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (=> $x290 (= ?x17 ?x363)))))))
 ))
 (let (($x326 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x347 (bvuge ?x32 (_ bv1 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x204 (_ bv1 32))))
 (= $x290 $x347))))))
 ))
 (let (($x97 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x32 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x299 (= ?x32 (_ bv0 32))))
 (let ((?x204 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x303 (= ?x204 (_ bv0 32))))
 (= $x303 $x299))))))
 ))
 (let (($x145 (and $x97 $x335)))
 (let (($x51 (and $x145 $x326)))
 (let (($x224 (and $x51 $x304)))
 (let (($x143 (and $x224 $x166)))
 (let (($x308 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x368 (and $x308 $x143)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x142 (and $x177 $x368)))
 (let (($x377 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x20 (and $x377 $x142)))
 (let (($x305 (=> $x20 $x181)))
 (not $x305))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x377 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x376 (not $x377)))
 (let (($x354 (or $x377 $x376)))
 (let (($x202 (= $x354 true)))
 (let (($x22 (= $x202 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x231 (bvneg ?x147)))
 (let (($x253 (= ?x231 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x253 true)))
 (let (($x374 (= $x273 true)))
 (let (($x79 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x327 (= $x79 true)))
 (let (($x72 (= $x327 true)))
 (let (($x403 (= $x72 true)))
 (let (($x324 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (= $x324 true)))
 (let (($x239 (= $x227 true)))
 (let (($x339 (= $x239 true)))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x343))))
 (let ((?x371 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (=> $x61 (= ?x371 ?x387)))))))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x19 (_ bv1 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (= $x61 $x399))))))
 ))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x388 (= false false)))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x191 (_ bv0 32))))
 (=> $x119 $x388)))))
 ))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x19 (_ bv0 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x191 (_ bv0 32))))
 (= $x119 $x140))))))
 ))
 (let (($x256 (and $x244 $x415)))
 (let (($x301 (and $x256 $x198)))
 (let (($x116 (and $x301 $x94)))
 (let (($x37 (= $x116 true)))
 (let (($x98 (= $x37 true)))
 (let (($x148 (= $x98 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x343))))
 (let ((?x390 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x297 (_ bv1 32))))
 (=> $x351 (= ?x390 ?x387)))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x19 (_ bv1 32))))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x297 (_ bv1 32))))
 (= $x351 $x399))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x388 (= false false)))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x297 (_ bv0 32))))
 (=> $x320 $x388)))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x19 (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x297 (_ bv0 32))))
 (= $x320 $x140))))))
 ))
 (let (($x10 (and $x419 $x251)))
 (let (($x12 (and $x10 $x228)))
 (let (($x154 (and $x12 $x237)))
 (let (($x75 (= $x154 true)))
 (let (($x109 (= $x75 true)))
 (let (($x275 (= $x109 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x270 (= $x88 true)))
 (let (($x425 (= $x270 true)))
 (let (($x11 (= $x425 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x315 (= (_ bv0 32) ?x203)))
 (let ((?x424 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x424)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x269)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x365 (and $x115 $x34)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x321 (and $x158 $x365)))
 (let (($x218 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x379 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (and $x67 $x106)))
 (let (($x105 (not $x229)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x353 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x338 (and $x353 $x66)))
 (let (($x188 (and (not $x338) $x105)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x252 $x190)))
 (let (($x161 (not $x318)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x355 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x355 $x216)))
 (let (($x114 (and (not $x310) $x161)))
 (let (($x172 (and (and (and (and (and (and $x114 $x188) $x379) $x218) $x321) $x294) $x263)))
 (let (($x186 (and $x172 $x315)))
 (let (($x102 (= $x186 true)))
 (let (($x383 (= $x102 true)))
 (let (($x421 (= $x383 true)))
 (let (($x401 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x400 (= $x401 true)))
 (let (($x337 (= $x400 true)))
 (let (($x112 (= $x337 true)))
 (let ((?x238 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x373 (= (_ bv0 2) ?x238)))
 (let (($x29 (= $x373 true)))
 (let (($x108 (= $x29 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x54 (bvneg ?x13)))
 (let (($x152 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x272 (= $x152 true)))
 (let (($x183 (= $x272 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x381 (= $x104 true)))
 (let (($x356 (= $x381 true)))
 (let (($x396 (= $x356 true)))
 (let (($x295 (and $x396 $x183)))
 (let (($x175 (and $x295 $x108)))
 (let (($x212 (and $x175 $x112)))
 (let (($x90 (and $x212 $x421)))
 (let (($x277 (and $x90 $x11)))
 (let (($x220 (and $x277 $x275)))
 (let (($x262 (and $x220 $x148)))
 (let (($x268 (and $x262 $x339)))
 (let (($x24 (and $x268 $x403)))
 (let (($x287 (and $x24 $x374)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x371 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (=> $x61 (= ?x371 ?x390)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x297 (_ bv1 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (= $x61 $x351))))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x297 (_ bv0 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x191 (_ bv0 32))))
 (= $x119 $x320))))))
 ))
 (let (($x307 (and $x7 $x415)))
 (let (($x77 (and $x307 $x149)))
 (let (($x223 (and $x77 $x133)))
 (let (($x342 (and $x223 $x287)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x146 (and $x278 $x342)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x291 (and $x40 $x146)))
 (let (($x296 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x380 (and $x296 $x291)))
 (let ((?x196 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x308 (bvadd input.dst.llvm-%x ?x196)))
 (let (($x51 (bvugt ?x308 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd ?x308 (_ bv3 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x335 (bvugt ?x308 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x267 (or false (or false (and (and true (or $x8 $x335)) (or $x326 $x51))))))
 (let (($x224 (=> (bvule ?x308 (bvsub (bvadd ?x308 (_ bv4 32)) (_ bv1 32))) $x267)))
 (let (($x248 (=> (and $x377 (bvule ?x308 (bvsub (bvadd ?x308 (_ bv4 32)) (_ bv1 32)))) $x267)))
 (let (($x372 (and $x248 $x380)))
 (let (($x45 (=> $x372 $x22)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.llvm-%i.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-i-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%ret.0.Lfor.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-ret-0.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x377 (bvult input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x376 (not $x377)))
 (let (($x354 (or $x377 $x376)))
 (let (($x202 (= $x354 true)))
 (let (($x22 (= $x202 true)))
 (let ((?x147 (bvmul (_ bv4294967295 32) input.spec-%var-i-0.L2%7%bbentry)))
 (let ((?x231 (bvneg ?x147)))
 (let (($x253 (= ?x231 input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let (($x273 (= $x253 true)))
 (let (($x374 (= $x273 true)))
 (let (($x79 (bvsge input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv0 32))))
 (let (($x327 (= $x79 true)))
 (let (($x72 (= $x327 true)))
 (let (($x403 (= $x72 true)))
 (let (($x324 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry input.dst.llvm-%n)))
 (let (($x227 (= $x324 true)))
 (let (($x239 (= $x227 true)))
 (let (($x339 (= $x239 true)))
 (let (($x94 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x343))))
 (let ((?x371 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (=> $x61 (= ?x371 ?x387)))))))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x19 (_ bv1 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (= $x61 $x399))))))
 ))
 (let (($x415 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x388 (= false false)))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x191 (_ bv0 32))))
 (=> $x119 $x388)))))
 ))
 (let (($x244 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x19 (_ bv0 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x191 (_ bv0 32))))
 (= $x119 $x140))))))
 ))
 (let (($x256 (and $x244 $x415)))
 (let (($x301 (and $x256 $x198)))
 (let (($x116 (and $x301 $x94)))
 (let (($x37 (= $x116 true)))
 (let (($x98 (= $x37 true)))
 (let (($x148 (= $x98 true)))
 (let (($x237 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x151 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x387 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x343))))
 (let ((?x390 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x297 (_ bv1 32))))
 (=> $x351 (= ?x390 ?x387)))))))))
 ))
 (let (($x228 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x399 (bvuge ?x19 (_ bv1 32))))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x297 (_ bv1 32))))
 (= $x351 $x399))))))
 ))
 (let (($x251 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x388 (= false false)))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x297 (_ bv0 32))))
 (=> $x320 $x388)))))
 ))
 (let (($x419 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x19 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let (($x140 (= ?x19 (_ bv0 32))))
 (let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x297 (_ bv0 32))))
 (= $x320 $x140))))))
 ))
 (let (($x10 (and $x419 $x251)))
 (let (($x12 (and $x10 $x228)))
 (let (($x154 (and $x12 $x237)))
 (let (($x75 (= $x154 true)))
 (let (($x109 (= $x75 true)))
 (let (($x275 (= $x109 true)))
 (let (($x88 (bvule input.dst.llvm-%i.0.Lfor.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x270 (= $x88 true)))
 (let (($x425 (= $x270 true)))
 (let (($x11 (= $x425 true)))
 (let ((?x203 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x315 (= (_ bv0 32) ?x203)))
 (let ((?x424 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x424)))
 (let ((?x38 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x294 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x269 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x34 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x269)))
 (let (($x115 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x365 (and $x115 $x34)))
 (let (($x158 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x321 (and $x158 $x365)))
 (let (($x218 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x379 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x229 (and $x67 $x106)))
 (let (($x105 (not $x229)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x353 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x338 (and $x353 $x66)))
 (let (($x188 (and (not $x338) $x105)))
 (let (($x190 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x252 $x190)))
 (let (($x161 (not $x318)))
 (let (($x216 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x355 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x310 (and $x355 $x216)))
 (let (($x114 (and (not $x310) $x161)))
 (let (($x172 (and (and (and (and (and (and $x114 $x188) $x379) $x218) $x321) $x294) $x263)))
 (let (($x186 (and $x172 $x315)))
 (let (($x102 (= $x186 true)))
 (let (($x383 (= $x102 true)))
 (let (($x421 (= $x383 true)))
 (let (($x401 (bvsge input.spec-%var-i-0.L2%7%bbentry (_ bv0 32))))
 (let (($x400 (= $x401 true)))
 (let (($x337 (= $x400 true)))
 (let (($x112 (= $x337 true)))
 (let ((?x238 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x373 (= (_ bv0 2) ?x238)))
 (let (($x29 (= $x373 true)))
 (let (($x108 (= $x29 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%var-ret-0.L2%7%bbentry)))
 (let ((?x54 (bvneg ?x13)))
 (let (($x152 (= ?x54 input.dst.llvm-%ret.0.Lfor.cond%1%bbentry)))
 (let (($x272 (= $x152 true)))
 (let (($x183 (= $x272 true)))
 (let (($x104 (bvule input.spec-%var-i-0.L2%7%bbentry (_ bv4294967294 32))))
 (let (($x381 (= $x104 true)))
 (let (($x356 (= $x381 true)))
 (let (($x396 (= $x356 true)))
 (let (($x295 (and $x396 $x183)))
 (let (($x175 (and $x295 $x108)))
 (let (($x212 (and $x175 $x112)))
 (let (($x90 (and $x212 $x421)))
 (let (($x277 (and $x90 $x11)))
 (let (($x220 (and $x277 $x275)))
 (let (($x262 (and $x220 $x148)))
 (let (($x268 (and $x262 $x339)))
 (let (($x24 (and $x268 $x403)))
 (let (($x287 (and $x24 $x374)))
 (let (($x133 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x390 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))
 (let ((?x371 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (=> $x61 (= ?x371 ?x390)))))))
 ))
 (let (($x149 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x297 (_ bv1 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x191 (_ bv1 32))))
 (= $x61 $x351))))))
 ))
 (let (($x7 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x297 (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x320 (= ?x297 (_ bv0 32))))
 (let ((?x191 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x119 (= ?x191 (_ bv0 32))))
 (= $x119 $x320))))))
 ))
 (let (($x307 (and $x7 $x415)))
 (let (($x77 (and $x307 $x149)))
 (let (($x223 (and $x77 $x133)))
 (let (($x342 (and $x223 $x287)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x146 (and $x278 $x342)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x291 (and $x40 $x146)))
 (let (($x296 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x380 (and $x296 $x291)))
 (let ((?x196 (bvmul (_ bv4 32) input.dst.llvm-%i.0.Lfor.cond%1%bbentry)))
 (let ((?x308 (bvadd input.dst.llvm-%x ?x196)))
 (let (($x51 (bvugt ?x308 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd ?x308 (_ bv3 32))))
 (let (($x326 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x335 (bvugt ?x308 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x267 (or false (or false (and (and true (or $x8 $x335)) (or $x326 $x51))))))
 (let (($x224 (=> (bvule ?x308 (bvsub (bvadd ?x308 (_ bv4 32)) (_ bv1 32))) $x267)))
 (let (($x248 (=> (and $x377 (bvule ?x308 (bvsub (bvadd ?x308 (_ bv4 32)) (_ bv1 32)))) $x267)))
 (let (($x372 (and $x248 $x380)))
 (let (($x45 (=> $x372 $x22)))
 (not $x45)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x174)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x206)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x265)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x367 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x157 $x367)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x392 (and $x305 $x68)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x229 $x105)))
 (let (($x332 (not $x188)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x222 $x67)))
 (let (($x379 (and (not $x106) $x332)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x318 $x161)))
 (let (($x353 (not $x114)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x216 $x117)))
 (let (($x338 (and (not $x252) $x353)))
 (let (($x302 (and (and (and $x338 $x379) $x155) $x59)))
 (let (($x226 (and (and (and (and $x302 $x392) $x281) $x71) $x230)))
 (let (($x137 (= $x226 true)))
 (let (($x84 (= $x137 true)))
 (let ((?x358 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x241 (concat ?x260 (concat ?x350 (concat ?x207 ?x358)))))
 (let (($x31 (= ?x241 input.dst.llvm-%x)))
 (let (($x15 (= $x31 true)))
 (let (($x361 (= $x15 true)))
 (let ((?x284 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x258 (concat ?x60 (concat ?x298 (concat ?x293 ?x284)))))
 (let (($x111 (= ?x258 input.dst.llvm-%n)))
 (let (($x405 (= $x111 true)))
 (let (($x169 (= $x405 true)))
 (let (($x185 (= input.dst.llvm-%n ?x258)))
 (let (($x395 (= input.dst.llvm-%x ?x241)))
 (let (($x127 (and $x395 $x185)))
 (let (($x113 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and $x113 $x127)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x331))))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (=> $x402 (= ?x175 ?x264)))))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (= $x402 (bvuge ?x262 (_ bv1 32)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x398 (_ bv0 32))))
 (=> $x415 $x351)))))
 ))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x398 (_ bv0 32))))
 (= $x415 (= ?x262 (_ bv0 32)))))))
 ))
 (let (($x339 (and $x239 $x77)))
 (let (($x287 (and $x339 $x374)))
 (let (($x199 (and $x287 $x334)))
 (let (($x86 (and (and (and (and (and (and $x302 $x199) $x392) $x281) $x71) $x230) $x171)))
 (let (($x348 (= $x86 true)))
 (let (($x180 (= $x348 true)))
 (let (($x163 (= $x180 true)))
 (let (($x16 (and $x163 $x169)))
 (let (($x167 (and $x16 $x361)))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (=> $x402 (= ?x175 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (= $x402 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x61 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x398 (_ bv0 32))))
 (= $x415 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x371 (and $x61 $x77)))
 (let (($x285 (and $x371 $x54)))
 (let (($x112 (and $x285 $x337)))
 (let (($x132 (and $x112 $x167)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x283 (and $x196 $x132)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x35 (and $x213 $x283)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x179 (and $x141 $x35)))
 (let (($x18 (=> $x179 $x84)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x174 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x230 (= (_ bv0 32) ?x174)))
 (let ((?x206 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x71 (= (_ bv0 32) ?x206)))
 (let ((?x265 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x281 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x265)))
 (let ((?x181 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x367 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x181)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x157 $x367)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x392 (and $x305 $x68)))
 (let (($x59 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x155 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x188 (and $x229 $x105)))
 (let (($x332 (not $x188)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x222 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (and $x222 $x67)))
 (let (($x379 (and (not $x106) $x332)))
 (let (($x161 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (and $x318 $x161)))
 (let (($x353 (not $x114)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x216 $x117)))
 (let (($x338 (and (not $x252) $x353)))
 (let (($x302 (and (and (and $x338 $x379) $x155) $x59)))
 (let (($x226 (and (and (and (and $x302 $x392) $x281) $x71) $x230)))
 (let (($x137 (= $x226 true)))
 (let (($x84 (= $x137 true)))
 (let ((?x358 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x241 (concat ?x260 (concat ?x350 (concat ?x207 ?x358)))))
 (let (($x31 (= ?x241 input.dst.llvm-%x)))
 (let (($x15 (= $x31 true)))
 (let (($x361 (= $x15 true)))
 (let ((?x284 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x258 (concat ?x60 (concat ?x298 (concat ?x293 ?x284)))))
 (let (($x111 (= ?x258 input.dst.llvm-%n)))
 (let (($x405 (= $x111 true)))
 (let (($x169 (= $x405 true)))
 (let (($x185 (= input.dst.llvm-%n ?x258)))
 (let (($x395 (= input.dst.llvm-%x ?x241)))
 (let (($x127 (and $x395 $x185)))
 (let (($x113 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x171 (and $x113 $x127)))
 (let (($x334 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x143 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x331))))
 (let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (=> $x402 (= ?x175 ?x264)))))))))
 ))
 (let (($x374 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (= $x402 (bvuge ?x262 (_ bv1 32)))))))
 ))
 (let (($x77 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x351 (= false false)))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x398 (_ bv0 32))))
 (=> $x415 $x351)))))
 ))
 (let (($x239 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x262 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x398 (_ bv0 32))))
 (= $x415 (= ?x262 (_ bv0 32)))))))
 ))
 (let (($x339 (and $x239 $x77)))
 (let (($x287 (and $x339 $x374)))
 (let (($x199 (and $x287 $x334)))
 (let (($x86 (and (and (and (and (and (and $x302 $x199) $x392) $x281) $x71) $x230) $x171)))
 (let (($x348 (= $x86 true)))
 (let (($x180 (= $x348 true)))
 (let (($x163 (= $x180 true)))
 (let (($x16 (and $x163 $x169)))
 (let (($x167 (and $x16 $x361)))
 (let (($x337 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x175 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (=> $x402 (= ?x175 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x54 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x402 (bvuge ?x398 (_ bv1 32))))
 (= $x402 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x61 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x398 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x415 (= ?x398 (_ bv0 32))))
 (= $x415 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x371 (and $x61 $x77)))
 (let (($x285 (and $x371 $x54)))
 (let (($x112 (and $x285 $x337)))
 (let (($x132 (and $x112 $x167)))
 (let (($x196 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x283 (and $x196 $x132)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x35 (and $x213 $x283)))
 (let (($x141 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x179 (and $x141 $x35)))
 (let (($x18 (=> $x179 $x84)))
 (not $x18))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x356 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x396 (= (_ bv0 2) ?x356)))
 (let (($x183 (= $x396 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x202 (concat ?x291 (concat ?x272 ?x231)))))
 (let (($x40 (= ?x22 input.dst.llvm-%x)))
 (let (($x249 (= $x40 true)))
 (let (($x191 (= $x249 true)))
 (let ((?x309 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x340 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x367 (concat ?x340 (concat ?x70 ?x309)))))
 (let (($x376 (= input.dst.llvm-%n ?x68)))
 (let (($x372 (= input.dst.llvm-%x ?x22)))
 (let (($x380 (and $x372 $x376)))
 (let (($x381 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x354 (and $x381 $x380)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x79)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x327 (= (_ bv0 32) ?x268)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x116)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x390 (and $x94 $x125)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x243 $x390)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem ?x387))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv2 32))) ?x178))))
 (let ((?x368 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (=> $x227 (= ?x368 ?x278)))))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (= $x227 (bvuge ?x20 (_ bv1 32)))))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x105 (= false false)))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x67 (_ bv0 32))))
 (=> $x106 $x105)))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x67 (_ bv0 32))))
 (= $x106 (= ?x20 (_ bv0 32)))))))
 ))
 (let (($x251 (and $x42 $x379)))
 (let (($x347 (and $x251 $x290)))
 (let (($x404 (and $x347 $x198)))
 (let (($x298 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x358 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x358 $x197)))
 (let (($x241 (not $x205)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x350 $x225)))
 (let (($x87 (and (not $x207) $x241)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x50 $x23)))
 (let (($x153 (not $x113)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x71 $x174)))
 (let (($x385 (and (not $x230) $x153)))
 (let (($x248 (and (and (and (and (and (and $x385 $x87) $x60) $x298) $x404) $x57) $x133)))
 (let (($x224 (and (and (and $x248 $x327) $x72) $x354)))
 (let (($x204 (= $x224 true)))
 (let (($x296 (= $x204 true)))
 (let (($x41 (= $x296 true)))
 (let (($x311 (= ?x68 input.dst.llvm-%n)))
 (let (($x265 (= $x311 true)))
 (let (($x281 (= $x265 true)))
 (let (($x201 (and $x281 $x41)))
 (let (($x119 (and $x201 $x191)))
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (=> $x227 (= ?x368 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (= $x227 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x67 (_ bv0 32))))
 (= $x106 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x120 (and $x229 $x379)))
 (let (($x253 (and $x120 $x339)))
 (let (($x242 (and $x253 $x193)))
 (let (($x245 (and $x242 $x119)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x223 (and $x177 $x245)))
 (let (($x377 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x280 (and $x377 $x223)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x427 (and $x95 $x280)))
 (let (($x295 (=> $x427 $x183)))
 (not $x295))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let ((?x356 ((_ extract 1 0) input.dst.llvm-%x)))
 (let (($x396 (= (_ bv0 2) ?x356)))
 (let (($x183 (= $x396 true)))
 (let ((?x231 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x22 (concat ?x202 (concat ?x291 (concat ?x272 ?x231)))))
 (let (($x40 (= ?x22 input.dst.llvm-%x)))
 (let (($x249 (= $x40 true)))
 (let (($x191 (= $x249 true)))
 (let ((?x309 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x340 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x68 (concat ?x367 (concat ?x340 (concat ?x70 ?x309)))))
 (let (($x376 (= input.dst.llvm-%n ?x68)))
 (let (($x372 (= input.dst.llvm-%x ?x22)))
 (let (($x380 (and $x372 $x376)))
 (let (($x381 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x354 (and $x381 $x380)))
 (let ((?x79 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x72 (= (_ bv0 32) ?x79)))
 (let ((?x268 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x327 (= (_ bv0 32) ?x268)))
 (let ((?x123 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x116 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x125 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x116)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x390 (and $x94 $x125)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x243 $x390)))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x387 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv1 32))) (select input.dst.llvm-mem ?x387))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x387 (_ bv2 32))) ?x178))))
 (let ((?x368 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (=> $x227 (= ?x368 ?x278)))))))))
 ))
 (let (($x290 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (= $x227 (bvuge ?x20 (_ bv1 32)))))))
 ))
 (let (($x379 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x105 (= false false)))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x67 (_ bv0 32))))
 (=> $x106 $x105)))))
 ))
 (let (($x42 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x20 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x67 (_ bv0 32))))
 (= $x106 (= ?x20 (_ bv0 32)))))))
 ))
 (let (($x251 (and $x42 $x379)))
 (let (($x347 (and $x251 $x290)))
 (let (($x404 (and $x347 $x198)))
 (let (($x298 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x358 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x205 (and $x358 $x197)))
 (let (($x241 (not $x205)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x350 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x207 (and $x350 $x225)))
 (let (($x87 (and (not $x207) $x241)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x113 (and $x50 $x23)))
 (let (($x153 (not $x113)))
 (let (($x174 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x230 (and $x71 $x174)))
 (let (($x385 (and (not $x230) $x153)))
 (let (($x248 (and (and (and (and (and (and $x385 $x87) $x60) $x298) $x404) $x57) $x133)))
 (let (($x224 (and (and (and $x248 $x327) $x72) $x354)))
 (let (($x204 (= $x224 true)))
 (let (($x296 (= $x204 true)))
 (let (($x41 (= $x296 true)))
 (let (($x311 (= ?x68 input.dst.llvm-%n)))
 (let (($x265 (= $x311 true)))
 (let (($x281 (= $x265 true)))
 (let (($x201 (and $x281 $x41)))
 (let (($x119 (and $x201 $x191)))
 (let (($x193 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x368 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (=> $x227 (= ?x368 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x339 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x67 (_ bv1 32))))
 (= $x227 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x229 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x67 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x106 (= ?x67 (_ bv0 32))))
 (= $x106 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x120 (and $x229 $x379)))
 (let (($x253 (and $x120 $x339)))
 (let (($x242 (and $x253 $x193)))
 (let (($x245 (and $x242 $x119)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x223 (and $x177 $x245)))
 (let (($x377 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x280 (and $x377 $x223)))
 (let (($x95 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x427 (and $x95 $x280)))
 (let (($x295 (=> $x427 $x183)))
 (not $x295))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x122))))
 (let ((?x12 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (=> $x358 (= ?x12 ?x363)))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (= $x358 (bvuge ?x86 (_ bv1 32)))))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x101 (= false false)))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x392 (_ bv0 32))))
 (=> $x311 $x101)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x392 (_ bv0 32))))
 (= $x311 (= ?x86 (_ bv0 32)))))))
 ))
 (let (($x361 (and $x15 $x173)))
 (let (($x226 (and $x361 $x322)))
 (let (($x383 (and $x226 $x263)))
 (let (($x262 (= $x383 true)))
 (let (($x287 (= $x262 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x100 (concat ?x228 (concat ?x78 ?x139)))))
 (let (($x66 (= ?x97 input.dst.llvm-%x)))
 (let (($x190 (= $x66 true)))
 (let (($x318 (= $x190 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x333 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x333 (concat ?x151 (concat ?x374 ?x8)))))
 (let (($x112 (= ?x164 input.dst.llvm-%n)))
 (let (($x212 (= $x112 true)))
 (let (($x355 (= $x212 true)))
 (let (($x232 (= input.dst.llvm-%n ?x164)))
 (let (($x37 (= input.dst.llvm-%x ?x97)))
 (let (($x52 (and $x37 $x232)))
 (let (($x19 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x235 (and $x19 $x52)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x11)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x117)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x203)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x315 $x172)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x421 $x186)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x178 $x256)))
 (let (($x271 (not $x278)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x109 $x275)))
 (let (($x198 (and (not $x237) $x271)))
 (let (($x387 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x127 $x387)))
 (let (($x236 (not $x240)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x145 $x347)))
 (let (($x244 (and (not $x258) $x236)))
 (let (($x417 (and (and (and (and (and (and $x244 $x198) $x234) $x94) $x383) $x90) $x310)))
 (let (($x175 (and (and (and $x417 $x277) $x254) $x235)))
 (let (($x108 (= $x175 true)))
 (let (($x400 (= $x108 true)))
 (let (($x337 (= $x400 true)))
 (let (($x252 (and $x337 $x355)))
 (let (($x59 (and $x252 $x318)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (=> $x358 (= ?x12 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (= $x358 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x392 (_ bv0 32))))
 (= $x311 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x174 (and $x281 $x173)))
 (let (($x241 (and $x174 $x205)))
 (let (($x42 (and $x241 $x319)))
 (let (($x302 (and $x42 $x59)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x98 (and $x213 $x302)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x269 (and $x165 $x98)))
 (let (($x308 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x148 (and $x308 $x269)))
 (let (($x321 (=> $x148 $x287)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x263 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x158 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem ?x158))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x158 (_ bv2 32))) ?x122))))
 (let ((?x12 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (=> $x358 (= ?x12 ?x363)))))))))
 ))
 (let (($x322 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (= $x358 (bvuge ?x86 (_ bv1 32)))))))
 ))
 (let (($x173 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x101 (= false false)))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x392 (_ bv0 32))))
 (=> $x311 $x101)))))
 ))
 (let (($x15 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x86 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x392 (_ bv0 32))))
 (= $x311 (= ?x86 (_ bv0 32)))))))
 ))
 (let (($x361 (and $x15 $x173)))
 (let (($x226 (and $x361 $x322)))
 (let (($x383 (and $x226 $x263)))
 (let (($x262 (= $x383 true)))
 (let (($x287 (= $x262 true)))
 (let ((?x139 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x97 (concat ?x100 (concat ?x228 (concat ?x78 ?x139)))))
 (let (($x66 (= ?x97 input.dst.llvm-%x)))
 (let (($x190 (= $x66 true)))
 (let (($x318 (= $x190 true)))
 (let ((?x8 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x151 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x333 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x164 (concat ?x333 (concat ?x151 (concat ?x374 ?x8)))))
 (let (($x112 (= ?x164 input.dst.llvm-%n)))
 (let (($x212 (= $x112 true)))
 (let (($x355 (= $x212 true)))
 (let (($x232 (= input.dst.llvm-%n ?x164)))
 (let (($x37 (= input.dst.llvm-%x ?x97)))
 (let (($x52 (and $x37 $x232)))
 (let (($x19 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x235 (and $x19 $x52)))
 (let ((?x11 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x254 (= (_ bv0 32) ?x11)))
 (let ((?x117 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x277 (= (_ bv0 32) ?x117)))
 (let ((?x216 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x310 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x216)))
 (let ((?x203 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x172 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x203)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x186 (and $x315 $x172)))
 (let (($x421 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x421 $x186)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x234 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x278 (and $x178 $x256)))
 (let (($x271 (not $x278)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x109 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x237 (and $x109 $x275)))
 (let (($x198 (and (not $x237) $x271)))
 (let (($x387 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x127 $x387)))
 (let (($x236 (not $x240)))
 (let (($x347 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (and $x145 $x347)))
 (let (($x244 (and (not $x258) $x236)))
 (let (($x417 (and (and (and (and (and (and $x244 $x198) $x234) $x94) $x383) $x90) $x310)))
 (let (($x175 (and (and (and $x417 $x277) $x254) $x235)))
 (let (($x108 (= $x175 true)))
 (let (($x400 (= $x108 true)))
 (let (($x337 (= $x400 true)))
 (let (($x252 (and $x337 $x355)))
 (let (($x59 (and $x252 $x318)))
 (let (($x319 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x12 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (=> $x358 (= ?x12 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x205 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x392 (_ bv1 32))))
 (= $x358 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x281 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x392 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x311 (= ?x392 (_ bv0 32))))
 (= $x311 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x174 (and $x281 $x173)))
 (let (($x241 (and $x174 $x205)))
 (let (($x42 (and $x241 $x319)))
 (let (($x302 (and $x42 $x59)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x98 (and $x213 $x302)))
 (let (($x165 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x269 (and $x165 $x98)))
 (let (($x308 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x148 (and $x308 $x269)))
 (let (($x321 (=> $x148 $x287)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x214 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x298 (= $x214 true)))
 (let (($x96 (= $x298 true)))
 (let ((?x314 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x150 (concat ?x307 (concat ?x77 ?x314)))))
 (let (($x264 (= ?x351 input.dst.llvm-%n)))
 (let (($x23 (= $x264 true)))
 (let (($x113 (= $x23 true)))
 (let (($x371 (= input.dst.llvm-%n ?x351)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x172 (concat ?x294 (concat ?x51 ?x34)))))
 (let (($x144 (= input.dst.llvm-%x ?x186)))
 (let (($x192 (and $x144 $x371)))
 (let (($x45 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x375 (and $x45 $x192)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x350)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x179)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x316)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (and $x260 $x50)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (and $x230 $x132)))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x330))))
 (let ((?x365 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (=> $x169 (= ?x365 ?x171)))))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (= $x169 (bvuge ?x296 (_ bv1 32)))))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x256 (= false false)))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x275 (_ bv0 32))))
 (=> $x237 $x256)))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x275 (_ bv0 32))))
 (= $x237 (= ?x296 (_ bv0 32)))))))
 ))
 (let (($x245 (and $x249 $x198)))
 (let (($x427 (and $x245 $x223)))
 (let (($x206 (and $x427 $x111)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x139 $x218)))
 (let (($x97 (not $x10)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x228 $x155)))
 (let (($x233 (and (not $x78) $x97)))
 (let (($x359 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x62 $x359)))
 (let (($x210 (not $x19)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x277 $x11)))
 (let (($x419 (and (not $x254) $x210)))
 (let (($x102 (and (and (and (and (and (and $x419 $x233) $x219) $x151) $x206) $x283) $x35)))
 (let (($x56 (and (and (and $x102 $x30) $x303) $x375)))
 (let (($x331 (= $x56 true)))
 (let (($x334 (= $x331 true)))
 (let (($x199 (= $x334 true)))
 (let (($x343 (= ?x186 input.dst.llvm-%x)))
 (let (($x216 (= $x343 true)))
 (let (($x310 (= $x216 true)))
 (let (($x340 (and $x310 $x199)))
 (let (($x153 (and $x340 $x113)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (=> $x169 (= ?x365 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (= $x169 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x275 (_ bv0 32))))
 (= $x237 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x170 (and $x178 $x198)))
 (let (($x84 (and $x170 $x361)))
 (let (($x425 (and $x84 $x270)))
 (let (($x385 (and $x425 $x153)))
 (let (($x377 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x225 (and $x377 $x385)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x207 (and $x141 $x225)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x60 (and $x196 $x207)))
 (let (($x274 (=> $x60 $x96)))
 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%n () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-x-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%var-x-0.L2%7%bbentry.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-x-0.L2%7%bbentry.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-7.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%7%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%7%bbentry () (_ BitVec 32))
(assert
 (let (($x214 (bvule (_ bv0 32) input.dst.llvm-%n)))
 (let (($x298 (= $x214 true)))
 (let (($x96 (= $x298 true)))
 (let ((?x314 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum1=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x351 (concat ?x150 (concat ?x307 (concat ?x77 ?x314)))))
 (let (($x264 (= ?x351 input.dst.llvm-%n)))
 (let (($x23 (= $x264 true)))
 (let (($x113 (= $x23 true)))
 (let (($x371 (= input.dst.llvm-%n ?x351)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x172 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x172 (concat ?x294 (concat ?x51 ?x34)))))
 (let (($x144 (= input.dst.llvm-%x ?x186)))
 (let (($x192 (and $x144 $x371)))
 (let (($x45 (= (bvand input.dst.llvm-%x (_ bv4294967292 32)) input.dst.llvm-%x)))
 (let (($x375 (and $x45 $x192)))
 (let ((?x350 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x303 (= (_ bv0 32) ?x350)))
 (let ((?x179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x30 (= (_ bv0 32) ?x179)))
 (let ((?x167 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x35 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let ((?x316 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end ?x316)))
 (let (($x260 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x132 (and $x260 $x50)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (and $x230 $x132)))
 (let (($x111 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x292 (bvadd (bvmul Lambda1Var (_ bv4 32)) input.dst.llvm-%x)))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv1 32))) (select input.dst.llvm-mem ?x292))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x292 (_ bv2 32))) ?x330))))
 (let ((?x365 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (=> $x169 (= ?x365 ?x171)))))))))
 ))
 (let (($x223 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (= $x169 (bvuge ?x296 (_ bv1 32)))))))
 ))
 (let (($x198 (forall ((Lambda1Var (_ BitVec 32)) )(let (($x256 (= false false)))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x275 (_ bv0 32))))
 (=> $x237 $x256)))))
 ))
 (let (($x249 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x296 (ite (and (bvule (_ bv0 32) Lambda1Var) (bvult Lambda1Var input.dst.llvm-%n)) (_ bv1 32) (_ bv0 32))))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x275 (_ bv0 32))))
 (= $x237 (= ?x296 (_ bv0 32)))))))
 ))
 (let (($x245 (and $x249 $x198)))
 (let (($x427 (and $x245 $x223)))
 (let (($x206 (and $x427 $x111)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.local./*___y___foo__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x218 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x139 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x10 (and $x139 $x218)))
 (let (($x97 (not $x10)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x228 $x155)))
 (let (($x233 (and (not $x78) $x97)))
 (let (($x359 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x62 $x359)))
 (let (($x210 (not $x19)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvuge input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (and $x277 $x11)))
 (let (($x419 (and (not $x254) $x210)))
 (let (($x102 (and (and (and (and (and (and $x419 $x233) $x219) $x151) $x206) $x283) $x35)))
 (let (($x56 (and (and (and $x102 $x30) $x303) $x375)))
 (let (($x331 (= $x56 true)))
 (let (($x334 (= $x331 true)))
 (let (($x199 (= $x334 true)))
 (let (($x343 (= ?x186 input.dst.llvm-%x)))
 (let (($x216 (= $x343 true)))
 (let (($x310 (= $x216 true)))
 (let (($x340 (and $x310 $x199)))
 (let (($x153 (and $x340 $x113)))
 (let (($x270 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x365 (input.spec-%var-x-1.1.1 Lambda1Var)))
 (let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (=> $x169 (= ?x365 (input.spec-%var-x-0.L2%7%bbentry.1.1 Lambda1Var)))))))
 ))
 (let (($x361 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x169 (bvuge ?x275 (_ bv1 32))))
 (= $x169 (bvuge (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv1 32))))))
 ))
 (let (($x178 (forall ((Lambda1Var (_ BitVec 32)) )(let ((?x275 (ite (input.spec-%var-x-1.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32))))
 (let (($x237 (= ?x275 (_ bv0 32))))
 (= $x237 (= (ite (input.spec-%var-x-0.L2%7%bbentry.0.1 Lambda1Var) (_ bv1 32) (_ bv0 32)) (_ bv0 32))))))
 ))
 (let (($x170 (and $x178 $x198)))
 (let (($x84 (and $x170 $x361)))
 (let (($x425 (and $x84 $x270)))
 (let (($x385 (and $x425 $x153)))
 (let (($x377 (= (_ bv0 32) input.spec-%tmpvar-7.L2%7%bbentry)))
 (let (($x225 (and $x377 $x385)))
 (let (($x141 (= (_ bv0 32) input.spec-%tmpvar-8.L2%7%bbentry)))
 (let (($x207 (and $x141 $x225)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-1.L2%7%bbentry)))
 (let (($x60 (and $x196 $x207)))
 (let (($x274 (=> $x60 $x96)))
 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2285916/query
